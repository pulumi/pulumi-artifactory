// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory;

import com.pulumi.artifactory.inputs.PushReplicationReplicationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PushReplicationArgs extends com.pulumi.resources.ResourceArgs {

    public static final PushReplicationArgs Empty = new PushReplicationArgs();

    /**
     * A valid CRON expression that you can use to control replication frequency. Eg: `0 0 12 * * ? *`, `0 0 2 ? * MON-SAT *`. Note: use 6 or 7 parts format - Seconds, Minutes Hours, Day Of Month, Month, Day Of Week, Year (optional). Specifying both a day-of-week AND a day-of-month parameter is not supported. One of them should be replaced by `?`. Incorrect: `* 5,7,9 14/2 * * WED,SAT *`, correct: `* 5,7,9 14/2 ? * WED,SAT *`. See details in [Cron Trigger Tutorial](https://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html).
     * 
     */
    @Import(name="cronExp", required=true)
    private Output<String> cronExp;

    /**
     * @return A valid CRON expression that you can use to control replication frequency. Eg: `0 0 12 * * ? *`, `0 0 2 ? * MON-SAT *`. Note: use 6 or 7 parts format - Seconds, Minutes Hours, Day Of Month, Month, Day Of Week, Year (optional). Specifying both a day-of-week AND a day-of-month parameter is not supported. One of them should be replaced by `?`. Incorrect: `* 5,7,9 14/2 * * WED,SAT *`, correct: `* 5,7,9 14/2 ? * WED,SAT *`. See details in [Cron Trigger Tutorial](https://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html).
     * 
     */
    public Output<String> cronExp() {
        return this.cronExp;
    }

    /**
     * When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on artifact, e.g. added, deleted or property change.
     * 
     */
    @Import(name="enableEventReplication")
    private @Nullable Output<Boolean> enableEventReplication;

    /**
     * @return When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on artifact, e.g. added, deleted or property change.
     * 
     */
    public Optional<Output<Boolean>> enableEventReplication() {
        return Optional.ofNullable(this.enableEventReplication);
    }

    @Import(name="replications")
    private @Nullable Output<List<PushReplicationReplicationArgs>> replications;

    public Optional<Output<List<PushReplicationReplicationArgs>>> replications() {
        return Optional.ofNullable(this.replications);
    }

    /**
     * Repository name.
     * 
     */
    @Import(name="repoKey", required=true)
    private Output<String> repoKey;

    /**
     * @return Repository name.
     * 
     */
    public Output<String> repoKey() {
        return this.repoKey;
    }

    private PushReplicationArgs() {}

    private PushReplicationArgs(PushReplicationArgs $) {
        this.cronExp = $.cronExp;
        this.enableEventReplication = $.enableEventReplication;
        this.replications = $.replications;
        this.repoKey = $.repoKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PushReplicationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PushReplicationArgs $;

        public Builder() {
            $ = new PushReplicationArgs();
        }

        public Builder(PushReplicationArgs defaults) {
            $ = new PushReplicationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cronExp A valid CRON expression that you can use to control replication frequency. Eg: `0 0 12 * * ? *`, `0 0 2 ? * MON-SAT *`. Note: use 6 or 7 parts format - Seconds, Minutes Hours, Day Of Month, Month, Day Of Week, Year (optional). Specifying both a day-of-week AND a day-of-month parameter is not supported. One of them should be replaced by `?`. Incorrect: `* 5,7,9 14/2 * * WED,SAT *`, correct: `* 5,7,9 14/2 ? * WED,SAT *`. See details in [Cron Trigger Tutorial](https://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html).
         * 
         * @return builder
         * 
         */
        public Builder cronExp(Output<String> cronExp) {
            $.cronExp = cronExp;
            return this;
        }

        /**
         * @param cronExp A valid CRON expression that you can use to control replication frequency. Eg: `0 0 12 * * ? *`, `0 0 2 ? * MON-SAT *`. Note: use 6 or 7 parts format - Seconds, Minutes Hours, Day Of Month, Month, Day Of Week, Year (optional). Specifying both a day-of-week AND a day-of-month parameter is not supported. One of them should be replaced by `?`. Incorrect: `* 5,7,9 14/2 * * WED,SAT *`, correct: `* 5,7,9 14/2 ? * WED,SAT *`. See details in [Cron Trigger Tutorial](https://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html).
         * 
         * @return builder
         * 
         */
        public Builder cronExp(String cronExp) {
            return cronExp(Output.of(cronExp));
        }

        /**
         * @param enableEventReplication When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on artifact, e.g. added, deleted or property change.
         * 
         * @return builder
         * 
         */
        public Builder enableEventReplication(@Nullable Output<Boolean> enableEventReplication) {
            $.enableEventReplication = enableEventReplication;
            return this;
        }

        /**
         * @param enableEventReplication When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on artifact, e.g. added, deleted or property change.
         * 
         * @return builder
         * 
         */
        public Builder enableEventReplication(Boolean enableEventReplication) {
            return enableEventReplication(Output.of(enableEventReplication));
        }

        public Builder replications(@Nullable Output<List<PushReplicationReplicationArgs>> replications) {
            $.replications = replications;
            return this;
        }

        public Builder replications(List<PushReplicationReplicationArgs> replications) {
            return replications(Output.of(replications));
        }

        public Builder replications(PushReplicationReplicationArgs... replications) {
            return replications(List.of(replications));
        }

        /**
         * @param repoKey Repository name.
         * 
         * @return builder
         * 
         */
        public Builder repoKey(Output<String> repoKey) {
            $.repoKey = repoKey;
            return this;
        }

        /**
         * @param repoKey Repository name.
         * 
         * @return builder
         * 
         */
        public Builder repoKey(String repoKey) {
            return repoKey(Output.of(repoKey));
        }

        public PushReplicationArgs build() {
            $.cronExp = Objects.requireNonNull($.cronExp, "expected parameter 'cronExp' to be non-null");
            $.repoKey = Objects.requireNonNull($.repoKey, "expected parameter 'repoKey' to be non-null");
            return $;
        }
    }

}
