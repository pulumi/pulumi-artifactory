// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificateState extends com.pulumi.resources.ResourceArgs {

    public static final CertificateState Empty = new CertificateState();

    /**
     * Name of certificate.
     * 
     */
    @Import(name="alias")
    private @Nullable Output<String> alias;

    /**
     * @return Name of certificate.
     * 
     */
    public Optional<Output<String>> alias() {
        return Optional.ofNullable(this.alias);
    }

    /**
     * PEM-encoded client certificate and private key.
     * 
     */
    @Import(name="content")
    private @Nullable Output<String> content;

    /**
     * @return PEM-encoded client certificate and private key.
     * 
     */
    public Optional<Output<String>> content() {
        return Optional.ofNullable(this.content);
    }

    @Import(name="file")
    private @Nullable Output<String> file;

    public Optional<Output<String>> file() {
        return Optional.ofNullable(this.file);
    }

    /**
     * SHA256 fingerprint of the certificate.
     * 
     */
    @Import(name="fingerprint")
    private @Nullable Output<String> fingerprint;

    /**
     * @return SHA256 fingerprint of the certificate.
     * 
     */
    public Optional<Output<String>> fingerprint() {
        return Optional.ofNullable(this.fingerprint);
    }

    /**
     * Name of the certificate authority that issued the certificate.
     * 
     */
    @Import(name="issuedBy")
    private @Nullable Output<String> issuedBy;

    /**
     * @return Name of the certificate authority that issued the certificate.
     * 
     */
    public Optional<Output<String>> issuedBy() {
        return Optional.ofNullable(this.issuedBy);
    }

    /**
     * The time &amp; date when the certificate is valid from.
     * 
     */
    @Import(name="issuedOn")
    private @Nullable Output<String> issuedOn;

    /**
     * @return The time &amp; date when the certificate is valid from.
     * 
     */
    public Optional<Output<String>> issuedOn() {
        return Optional.ofNullable(this.issuedOn);
    }

    /**
     * Name of whom the certificate has been issued to.
     * 
     */
    @Import(name="issuedTo")
    private @Nullable Output<String> issuedTo;

    /**
     * @return Name of whom the certificate has been issued to.
     * 
     */
    public Optional<Output<String>> issuedTo() {
        return Optional.ofNullable(this.issuedTo);
    }

    /**
     * The time &amp; date when the certificate expires.
     * 
     */
    @Import(name="validUntil")
    private @Nullable Output<String> validUntil;

    /**
     * @return The time &amp; date when the certificate expires.
     * 
     */
    public Optional<Output<String>> validUntil() {
        return Optional.ofNullable(this.validUntil);
    }

    private CertificateState() {}

    private CertificateState(CertificateState $) {
        this.alias = $.alias;
        this.content = $.content;
        this.file = $.file;
        this.fingerprint = $.fingerprint;
        this.issuedBy = $.issuedBy;
        this.issuedOn = $.issuedOn;
        this.issuedTo = $.issuedTo;
        this.validUntil = $.validUntil;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateState $;

        public Builder() {
            $ = new CertificateState();
        }

        public Builder(CertificateState defaults) {
            $ = new CertificateState(Objects.requireNonNull(defaults));
        }

        /**
         * @param alias Name of certificate.
         * 
         * @return builder
         * 
         */
        public Builder alias(@Nullable Output<String> alias) {
            $.alias = alias;
            return this;
        }

        /**
         * @param alias Name of certificate.
         * 
         * @return builder
         * 
         */
        public Builder alias(String alias) {
            return alias(Output.of(alias));
        }

        /**
         * @param content PEM-encoded client certificate and private key.
         * 
         * @return builder
         * 
         */
        public Builder content(@Nullable Output<String> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content PEM-encoded client certificate and private key.
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            return content(Output.of(content));
        }

        public Builder file(@Nullable Output<String> file) {
            $.file = file;
            return this;
        }

        public Builder file(String file) {
            return file(Output.of(file));
        }

        /**
         * @param fingerprint SHA256 fingerprint of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder fingerprint(@Nullable Output<String> fingerprint) {
            $.fingerprint = fingerprint;
            return this;
        }

        /**
         * @param fingerprint SHA256 fingerprint of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder fingerprint(String fingerprint) {
            return fingerprint(Output.of(fingerprint));
        }

        /**
         * @param issuedBy Name of the certificate authority that issued the certificate.
         * 
         * @return builder
         * 
         */
        public Builder issuedBy(@Nullable Output<String> issuedBy) {
            $.issuedBy = issuedBy;
            return this;
        }

        /**
         * @param issuedBy Name of the certificate authority that issued the certificate.
         * 
         * @return builder
         * 
         */
        public Builder issuedBy(String issuedBy) {
            return issuedBy(Output.of(issuedBy));
        }

        /**
         * @param issuedOn The time &amp; date when the certificate is valid from.
         * 
         * @return builder
         * 
         */
        public Builder issuedOn(@Nullable Output<String> issuedOn) {
            $.issuedOn = issuedOn;
            return this;
        }

        /**
         * @param issuedOn The time &amp; date when the certificate is valid from.
         * 
         * @return builder
         * 
         */
        public Builder issuedOn(String issuedOn) {
            return issuedOn(Output.of(issuedOn));
        }

        /**
         * @param issuedTo Name of whom the certificate has been issued to.
         * 
         * @return builder
         * 
         */
        public Builder issuedTo(@Nullable Output<String> issuedTo) {
            $.issuedTo = issuedTo;
            return this;
        }

        /**
         * @param issuedTo Name of whom the certificate has been issued to.
         * 
         * @return builder
         * 
         */
        public Builder issuedTo(String issuedTo) {
            return issuedTo(Output.of(issuedTo));
        }

        /**
         * @param validUntil The time &amp; date when the certificate expires.
         * 
         * @return builder
         * 
         */
        public Builder validUntil(@Nullable Output<String> validUntil) {
            $.validUntil = validUntil;
            return this;
        }

        /**
         * @param validUntil The time &amp; date when the certificate expires.
         * 
         * @return builder
         * 
         */
        public Builder validUntil(String validUntil) {
            return validUntil(Output.of(validUntil));
        }

        public CertificateState build() {
            return $;
        }
    }

}
