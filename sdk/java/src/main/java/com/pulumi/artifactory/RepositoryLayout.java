// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory;

import com.pulumi.artifactory.RepositoryLayoutArgs;
import com.pulumi.artifactory.Utilities;
import com.pulumi.artifactory.inputs.RepositoryLayoutState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="artifactory:index/repositoryLayout:RepositoryLayout")
public class RepositoryLayout extends com.pulumi.resources.CustomResource {
    /**
     * Please refer to: [Path
     * Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-ModulesandPathPatternsusedbyRepositoryLayouts)
     * in the Artifactory Wiki documentation.
     * 
     */
    @Export(name="artifactPathPattern", type=String.class, parameters={})
    private Output<String> artifactPathPattern;

    /**
     * @return Please refer to: [Path
     * Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-ModulesandPathPatternsusedbyRepositoryLayouts)
     * in the Artifactory Wiki documentation.
     * 
     */
    public Output<String> artifactPathPattern() {
        return this.artifactPathPattern;
    }
    /**
     * Please refer to: [Descriptor Path
     * Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-DescriptorPathPatterns) in
     * the Artifactory Wiki documentation.
     * 
     */
    @Export(name="descriptorPathPattern", type=String.class, parameters={})
    private Output</* @Nullable */ String> descriptorPathPattern;

    /**
     * @return Please refer to: [Descriptor Path
     * Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-DescriptorPathPatterns) in
     * the Artifactory Wiki documentation.
     * 
     */
    public Output<Optional<String>> descriptorPathPattern() {
        return Codegen.optional(this.descriptorPathPattern);
    }
    /**
     * When set, &#39;descriptor_path_pattern&#39; will be used. Default to &#39;false&#39;.
     * 
     */
    @Export(name="distinctiveDescriptorPathPattern", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> distinctiveDescriptorPathPattern;

    /**
     * @return When set, &#39;descriptor_path_pattern&#39; will be used. Default to &#39;false&#39;.
     * 
     */
    public Output<Optional<Boolean>> distinctiveDescriptorPathPattern() {
        return Codegen.optional(this.distinctiveDescriptorPathPattern);
    }
    /**
     * A regular expression matching the integration revision string appearing in a file name as part of the artifact&#39;s path.
     * For example, &#39;SNAPSHOT|(?:(?:[0-9]{8}.[0-9]{6})-(?:[0-9]+))&#39;, in Maven. Note! Take care not to introduce any regexp
     * capturing groups within this expression. If not applicable use &#39;.*&#39;
     * 
     */
    @Export(name="fileIntegrationRevisionRegexp", type=String.class, parameters={})
    private Output<String> fileIntegrationRevisionRegexp;

    /**
     * @return A regular expression matching the integration revision string appearing in a file name as part of the artifact&#39;s path.
     * For example, &#39;SNAPSHOT|(?:(?:[0-9]{8}.[0-9]{6})-(?:[0-9]+))&#39;, in Maven. Note! Take care not to introduce any regexp
     * capturing groups within this expression. If not applicable use &#39;.*&#39;
     * 
     */
    public Output<String> fileIntegrationRevisionRegexp() {
        return this.fileIntegrationRevisionRegexp;
    }
    /**
     * A regular expression matching the integration revision string appearing in a folder name as part of the artifact&#39;s path.
     * For example, &#39;SNAPSHOT&#39;, in Maven. Note! Take care not to introduce any regexp capturing groups within this expression.
     * If not applicable use &#39;.*&#39;
     * 
     */
    @Export(name="folderIntegrationRevisionRegexp", type=String.class, parameters={})
    private Output<String> folderIntegrationRevisionRegexp;

    /**
     * @return A regular expression matching the integration revision string appearing in a folder name as part of the artifact&#39;s path.
     * For example, &#39;SNAPSHOT&#39;, in Maven. Note! Take care not to introduce any regexp capturing groups within this expression.
     * If not applicable use &#39;.*&#39;
     * 
     */
    public Output<String> folderIntegrationRevisionRegexp() {
        return this.folderIntegrationRevisionRegexp;
    }
    /**
     * Layout name
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Layout name
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RepositoryLayout(String name) {
        this(name, RepositoryLayoutArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RepositoryLayout(String name, RepositoryLayoutArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RepositoryLayout(String name, RepositoryLayoutArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("artifactory:index/repositoryLayout:RepositoryLayout", name, args == null ? RepositoryLayoutArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private RepositoryLayout(String name, Output<String> id, @Nullable RepositoryLayoutState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("artifactory:index/repositoryLayout:RepositoryLayout", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RepositoryLayout get(String name, Output<String> id, @Nullable RepositoryLayoutState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new RepositoryLayout(name, id, state, options);
    }
}
