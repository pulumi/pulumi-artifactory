// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory;

import com.pulumi.artifactory.UnmanagedUserArgs;
import com.pulumi.artifactory.Utilities;
import com.pulumi.artifactory.inputs.UnmanagedUserState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="artifactory:index/unmanagedUser:UnmanagedUser")
public class UnmanagedUser extends com.pulumi.resources.CustomResource {
    /**
     * (Optional, Default: false) When enabled, this user is an administrator with all the ensuing privileges.
     * 
     */
    @Export(name="admin", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> admin;

    /**
     * @return (Optional, Default: false) When enabled, this user is an administrator with all the ensuing privileges.
     * 
     */
    public Output<Optional<Boolean>> admin() {
        return Codegen.optional(this.admin);
    }
    /**
     * (Optional, Default: true) When enabled, this user can only access the system through the REST API. This option cannot be
     * set if the user has Admin privileges.
     * 
     */
    @Export(name="disableUiAccess", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> disableUiAccess;

    /**
     * @return (Optional, Default: true) When enabled, this user can only access the system through the REST API. This option cannot be
     * set if the user has Admin privileges.
     * 
     */
    public Output<Optional<Boolean>> disableUiAccess() {
        return Codegen.optional(this.disableUiAccess);
    }
    /**
     * Email for user.
     * 
     */
    @Export(name="email", type=String.class, parameters={})
    private Output<String> email;

    /**
     * @return Email for user.
     * 
     */
    public Output<String> email() {
        return this.email;
    }
    /**
     * List of groups this user is a part of.
     * 
     */
    @Export(name="groups", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> groups;

    /**
     * @return List of groups this user is a part of.
     * 
     */
    public Output<Optional<List<String>>> groups() {
        return Codegen.optional(this.groups);
    }
    /**
     * (Optional, Default: false) When enabled, disables the fallback mechanism for using an internal password when external
     * authentication (such as LDAP) is enabled.
     * 
     */
    @Export(name="internalPasswordDisabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> internalPasswordDisabled;

    /**
     * @return (Optional, Default: false) When enabled, disables the fallback mechanism for using an internal password when external
     * authentication (such as LDAP) is enabled.
     * 
     */
    public Output<Optional<Boolean>> internalPasswordDisabled() {
        return Codegen.optional(this.internalPasswordDisabled);
    }
    /**
     * Username for user.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Username for user.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * (Optional, Sensitive) Password for the user. When omitted, a random password is generated using the following password
     * policy: 12 characters with 1 digit, 1 symbol, with upper and lower case letters
     * 
     */
    @Export(name="password", type=String.class, parameters={})
    private Output</* @Nullable */ String> password;

    /**
     * @return (Optional, Sensitive) Password for the user. When omitted, a random password is generated using the following password
     * policy: 12 characters with 1 digit, 1 symbol, with upper and lower case letters
     * 
     */
    public Output<Optional<String>> password() {
        return Codegen.optional(this.password);
    }
    /**
     * (Optional, Default: true) When enabled, this user can update their profile details (except for the password. Only an
     * administrator can update the password). There may be cases in which you want to leave this unset to prevent users from
     * updating their profile. For example, a departmental user with a single password shared between all department members.
     * 
     */
    @Export(name="profileUpdatable", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> profileUpdatable;

    /**
     * @return (Optional, Default: true) When enabled, this user can update their profile details (except for the password. Only an
     * administrator can update the password). There may be cases in which you want to leave this unset to prevent users from
     * updating their profile. For example, a departmental user with a single password shared between all department members.
     * 
     */
    public Output<Optional<Boolean>> profileUpdatable() {
        return Codegen.optional(this.profileUpdatable);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public UnmanagedUser(String name) {
        this(name, UnmanagedUserArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public UnmanagedUser(String name, UnmanagedUserArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public UnmanagedUser(String name, UnmanagedUserArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("artifactory:index/unmanagedUser:UnmanagedUser", name, args == null ? UnmanagedUserArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private UnmanagedUser(String name, Output<String> id, @Nullable UnmanagedUserState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("artifactory:index/unmanagedUser:UnmanagedUser", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "password"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static UnmanagedUser get(String name, Output<String> id, @Nullable UnmanagedUserState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new UnmanagedUser(name, id, state, options);
    }
}
