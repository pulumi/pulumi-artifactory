// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PackageCleanupPolicySearchCriteria {
    /**
     * @return Remove packages based on when they were created.
     * 
     */
    private @Nullable Integer createdBeforeInMonths;
    /**
     * @return Specify explicit package names that you want excluded from the policy.
     * 
     */
    private @Nullable List<String> excludedPackages;
    /**
     * @return Specify patterns for repository names or explicit repository names that you want excluded from the policy. It can not accept any pattern only list of specific repositories.
     * 
     */
    private @Nullable List<String> excludedRepos;
    private @Nullable Boolean includeAllProjects;
    /**
     * @return Specify a pattern for a package name or an explicit package name. It accept only single element which can be specific package or pattern, and for including all packages use `**`. Example: `included_packages = [&#34;**&#34;]`
     * 
     */
    private List<String> includedPackages;
    /**
     * @return List of projects name(s) to apply the policy to.
     * 
     */
    private @Nullable List<String> includedProjects;
    /**
     * @return Select the number of latest version to keep. The policy will remove all versions (based on creation date) prior to the selected number. Some package types may not be supported. [Learn more](https://jfrog.com/help/r/jfrog-platform-administration-documentation/retention-policies/package-types-coverage)
     * 
     */
    private @Nullable Integer keepLastNVersions;
    /**
     * @return Remove packages based on when they were last downloaded.
     * 
     */
    private @Nullable Integer lastDownloadedBeforeInMonths;
    /**
     * @return Types of packages to be removed. Support: conan, docker, generic, gradle, maven, npm, nuget, rpm.
     * 
     */
    private List<String> packageTypes;
    /**
     * @return Specify patterns for repository names or explicit repository names. For including all repos use `**`. Example: `repos = [&#34;**&#34;]`
     * 
     */
    private List<String> repos;

    private PackageCleanupPolicySearchCriteria() {}
    /**
     * @return Remove packages based on when they were created.
     * 
     */
    public Optional<Integer> createdBeforeInMonths() {
        return Optional.ofNullable(this.createdBeforeInMonths);
    }
    /**
     * @return Specify explicit package names that you want excluded from the policy.
     * 
     */
    public List<String> excludedPackages() {
        return this.excludedPackages == null ? List.of() : this.excludedPackages;
    }
    /**
     * @return Specify patterns for repository names or explicit repository names that you want excluded from the policy. It can not accept any pattern only list of specific repositories.
     * 
     */
    public List<String> excludedRepos() {
        return this.excludedRepos == null ? List.of() : this.excludedRepos;
    }
    public Optional<Boolean> includeAllProjects() {
        return Optional.ofNullable(this.includeAllProjects);
    }
    /**
     * @return Specify a pattern for a package name or an explicit package name. It accept only single element which can be specific package or pattern, and for including all packages use `**`. Example: `included_packages = [&#34;**&#34;]`
     * 
     */
    public List<String> includedPackages() {
        return this.includedPackages;
    }
    /**
     * @return List of projects name(s) to apply the policy to.
     * 
     */
    public List<String> includedProjects() {
        return this.includedProjects == null ? List.of() : this.includedProjects;
    }
    /**
     * @return Select the number of latest version to keep. The policy will remove all versions (based on creation date) prior to the selected number. Some package types may not be supported. [Learn more](https://jfrog.com/help/r/jfrog-platform-administration-documentation/retention-policies/package-types-coverage)
     * 
     */
    public Optional<Integer> keepLastNVersions() {
        return Optional.ofNullable(this.keepLastNVersions);
    }
    /**
     * @return Remove packages based on when they were last downloaded.
     * 
     */
    public Optional<Integer> lastDownloadedBeforeInMonths() {
        return Optional.ofNullable(this.lastDownloadedBeforeInMonths);
    }
    /**
     * @return Types of packages to be removed. Support: conan, docker, generic, gradle, maven, npm, nuget, rpm.
     * 
     */
    public List<String> packageTypes() {
        return this.packageTypes;
    }
    /**
     * @return Specify patterns for repository names or explicit repository names. For including all repos use `**`. Example: `repos = [&#34;**&#34;]`
     * 
     */
    public List<String> repos() {
        return this.repos;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PackageCleanupPolicySearchCriteria defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer createdBeforeInMonths;
        private @Nullable List<String> excludedPackages;
        private @Nullable List<String> excludedRepos;
        private @Nullable Boolean includeAllProjects;
        private List<String> includedPackages;
        private @Nullable List<String> includedProjects;
        private @Nullable Integer keepLastNVersions;
        private @Nullable Integer lastDownloadedBeforeInMonths;
        private List<String> packageTypes;
        private List<String> repos;
        public Builder() {}
        public Builder(PackageCleanupPolicySearchCriteria defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdBeforeInMonths = defaults.createdBeforeInMonths;
    	      this.excludedPackages = defaults.excludedPackages;
    	      this.excludedRepos = defaults.excludedRepos;
    	      this.includeAllProjects = defaults.includeAllProjects;
    	      this.includedPackages = defaults.includedPackages;
    	      this.includedProjects = defaults.includedProjects;
    	      this.keepLastNVersions = defaults.keepLastNVersions;
    	      this.lastDownloadedBeforeInMonths = defaults.lastDownloadedBeforeInMonths;
    	      this.packageTypes = defaults.packageTypes;
    	      this.repos = defaults.repos;
        }

        @CustomType.Setter
        public Builder createdBeforeInMonths(@Nullable Integer createdBeforeInMonths) {

            this.createdBeforeInMonths = createdBeforeInMonths;
            return this;
        }
        @CustomType.Setter
        public Builder excludedPackages(@Nullable List<String> excludedPackages) {

            this.excludedPackages = excludedPackages;
            return this;
        }
        public Builder excludedPackages(String... excludedPackages) {
            return excludedPackages(List.of(excludedPackages));
        }
        @CustomType.Setter
        public Builder excludedRepos(@Nullable List<String> excludedRepos) {

            this.excludedRepos = excludedRepos;
            return this;
        }
        public Builder excludedRepos(String... excludedRepos) {
            return excludedRepos(List.of(excludedRepos));
        }
        @CustomType.Setter
        public Builder includeAllProjects(@Nullable Boolean includeAllProjects) {

            this.includeAllProjects = includeAllProjects;
            return this;
        }
        @CustomType.Setter
        public Builder includedPackages(List<String> includedPackages) {
            if (includedPackages == null) {
              throw new MissingRequiredPropertyException("PackageCleanupPolicySearchCriteria", "includedPackages");
            }
            this.includedPackages = includedPackages;
            return this;
        }
        public Builder includedPackages(String... includedPackages) {
            return includedPackages(List.of(includedPackages));
        }
        @CustomType.Setter
        public Builder includedProjects(@Nullable List<String> includedProjects) {

            this.includedProjects = includedProjects;
            return this;
        }
        public Builder includedProjects(String... includedProjects) {
            return includedProjects(List.of(includedProjects));
        }
        @CustomType.Setter
        public Builder keepLastNVersions(@Nullable Integer keepLastNVersions) {

            this.keepLastNVersions = keepLastNVersions;
            return this;
        }
        @CustomType.Setter
        public Builder lastDownloadedBeforeInMonths(@Nullable Integer lastDownloadedBeforeInMonths) {

            this.lastDownloadedBeforeInMonths = lastDownloadedBeforeInMonths;
            return this;
        }
        @CustomType.Setter
        public Builder packageTypes(List<String> packageTypes) {
            if (packageTypes == null) {
              throw new MissingRequiredPropertyException("PackageCleanupPolicySearchCriteria", "packageTypes");
            }
            this.packageTypes = packageTypes;
            return this;
        }
        public Builder packageTypes(String... packageTypes) {
            return packageTypes(List.of(packageTypes));
        }
        @CustomType.Setter
        public Builder repos(List<String> repos) {
            if (repos == null) {
              throw new MissingRequiredPropertyException("PackageCleanupPolicySearchCriteria", "repos");
            }
            this.repos = repos;
            return this;
        }
        public Builder repos(String... repos) {
            return repos(List.of(repos));
        }
        public PackageCleanupPolicySearchCriteria build() {
            final var _resultValue = new PackageCleanupPolicySearchCriteria();
            _resultValue.createdBeforeInMonths = createdBeforeInMonths;
            _resultValue.excludedPackages = excludedPackages;
            _resultValue.excludedRepos = excludedRepos;
            _resultValue.includeAllProjects = includeAllProjects;
            _resultValue.includedPackages = includedPackages;
            _resultValue.includedProjects = includedProjects;
            _resultValue.keepLastNVersions = keepLastNVersions;
            _resultValue.lastDownloadedBeforeInMonths = lastDownloadedBeforeInMonths;
            _resultValue.packageTypes = packageTypes;
            _resultValue.repos = repos;
            return _resultValue;
        }
    }
}
