// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory.inputs;

import com.pulumi.artifactory.inputs.ReplicationConfigReplicationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReplicationConfigState extends com.pulumi.resources.ResourceArgs {

    public static final ReplicationConfigState Empty = new ReplicationConfigState();

    @Import(name="cronExp")
    private @Nullable Output<String> cronExp;

    public Optional<Output<String>> cronExp() {
        return Optional.ofNullable(this.cronExp);
    }

    @Import(name="enableEventReplication")
    private @Nullable Output<Boolean> enableEventReplication;

    public Optional<Output<Boolean>> enableEventReplication() {
        return Optional.ofNullable(this.enableEventReplication);
    }

    @Import(name="replications")
    private @Nullable Output<List<ReplicationConfigReplicationArgs>> replications;

    public Optional<Output<List<ReplicationConfigReplicationArgs>>> replications() {
        return Optional.ofNullable(this.replications);
    }

    @Import(name="repoKey")
    private @Nullable Output<String> repoKey;

    public Optional<Output<String>> repoKey() {
        return Optional.ofNullable(this.repoKey);
    }

    private ReplicationConfigState() {}

    private ReplicationConfigState(ReplicationConfigState $) {
        this.cronExp = $.cronExp;
        this.enableEventReplication = $.enableEventReplication;
        this.replications = $.replications;
        this.repoKey = $.repoKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReplicationConfigState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReplicationConfigState $;

        public Builder() {
            $ = new ReplicationConfigState();
        }

        public Builder(ReplicationConfigState defaults) {
            $ = new ReplicationConfigState(Objects.requireNonNull(defaults));
        }

        public Builder cronExp(@Nullable Output<String> cronExp) {
            $.cronExp = cronExp;
            return this;
        }

        public Builder cronExp(String cronExp) {
            return cronExp(Output.of(cronExp));
        }

        public Builder enableEventReplication(@Nullable Output<Boolean> enableEventReplication) {
            $.enableEventReplication = enableEventReplication;
            return this;
        }

        public Builder enableEventReplication(Boolean enableEventReplication) {
            return enableEventReplication(Output.of(enableEventReplication));
        }

        public Builder replications(@Nullable Output<List<ReplicationConfigReplicationArgs>> replications) {
            $.replications = replications;
            return this;
        }

        public Builder replications(List<ReplicationConfigReplicationArgs> replications) {
            return replications(Output.of(replications));
        }

        public Builder replications(ReplicationConfigReplicationArgs... replications) {
            return replications(List.of(replications));
        }

        public Builder repoKey(@Nullable Output<String> repoKey) {
            $.repoKey = repoKey;
            return this;
        }

        public Builder repoKey(String repoKey) {
            return repoKey(Output.of(repoKey));
        }

        public ReplicationConfigState build() {
            return $;
        }
    }

}
