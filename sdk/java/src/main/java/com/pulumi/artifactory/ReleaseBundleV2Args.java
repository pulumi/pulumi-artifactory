// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory;

import com.pulumi.artifactory.inputs.ReleaseBundleV2SourceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReleaseBundleV2Args extends com.pulumi.resources.ResourceArgs {

    public static final ReleaseBundleV2Args Empty = new ReleaseBundleV2Args();

    /**
     * Key-pair name to use for signature creation
     * 
     */
    @Import(name="keypairName", required=true)
    private Output<String> keypairName;

    /**
     * @return Key-pair name to use for signature creation
     * 
     */
    public Output<String> keypairName() {
        return this.keypairName;
    }

    /**
     * Name of Release Bundle
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of Release Bundle
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Project key the Release Bundle belongs to
     * 
     */
    @Import(name="projectKey")
    private @Nullable Output<String> projectKey;

    /**
     * @return Project key the Release Bundle belongs to
     * 
     */
    public Optional<Output<String>> projectKey() {
        return Optional.ofNullable(this.projectKey);
    }

    /**
     * Determines whether to skip the resolution of the Docker manifest, which adds the image layers to the Release Bundle. The default value is `false` (the manifest is resolved and image layers are included).
     * 
     */
    @Import(name="skipDockerManifestResolution")
    private @Nullable Output<Boolean> skipDockerManifestResolution;

    /**
     * @return Determines whether to skip the resolution of the Docker manifest, which adds the image layers to the Release Bundle. The default value is `false` (the manifest is resolved and image layers are included).
     * 
     */
    public Optional<Output<Boolean>> skipDockerManifestResolution() {
        return Optional.ofNullable(this.skipDockerManifestResolution);
    }

    /**
     * Defines specific repositories to include in the promotion. If this property is left undefined, all repositories (except those specifically excluded) are included in the promotion. Important: If one or more repositories are specifically included, all other repositories are excluded (regardless of what is defined in `excluded_repository_keys`).
     * 
     */
    @Import(name="source", required=true)
    private Output<ReleaseBundleV2SourceArgs> source;

    /**
     * @return Defines specific repositories to include in the promotion. If this property is left undefined, all repositories (except those specifically excluded) are included in the promotion. Important: If one or more repositories are specifically included, all other repositories are excluded (regardless of what is defined in `excluded_repository_keys`).
     * 
     */
    public Output<ReleaseBundleV2SourceArgs> source() {
        return this.source;
    }

    /**
     * Source type. Valid values: `aql`, `artifacts`, `builds`, `release_bundles`
     * 
     */
    @Import(name="sourceType", required=true)
    private Output<String> sourceType;

    /**
     * @return Source type. Valid values: `aql`, `artifacts`, `builds`, `release_bundles`
     * 
     */
    public Output<String> sourceType() {
        return this.sourceType;
    }

    /**
     * Version to promote
     * 
     */
    @Import(name="version", required=true)
    private Output<String> version;

    /**
     * @return Version to promote
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    private ReleaseBundleV2Args() {}

    private ReleaseBundleV2Args(ReleaseBundleV2Args $) {
        this.keypairName = $.keypairName;
        this.name = $.name;
        this.projectKey = $.projectKey;
        this.skipDockerManifestResolution = $.skipDockerManifestResolution;
        this.source = $.source;
        this.sourceType = $.sourceType;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReleaseBundleV2Args defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReleaseBundleV2Args $;

        public Builder() {
            $ = new ReleaseBundleV2Args();
        }

        public Builder(ReleaseBundleV2Args defaults) {
            $ = new ReleaseBundleV2Args(Objects.requireNonNull(defaults));
        }

        /**
         * @param keypairName Key-pair name to use for signature creation
         * 
         * @return builder
         * 
         */
        public Builder keypairName(Output<String> keypairName) {
            $.keypairName = keypairName;
            return this;
        }

        /**
         * @param keypairName Key-pair name to use for signature creation
         * 
         * @return builder
         * 
         */
        public Builder keypairName(String keypairName) {
            return keypairName(Output.of(keypairName));
        }

        /**
         * @param name Name of Release Bundle
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of Release Bundle
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectKey Project key the Release Bundle belongs to
         * 
         * @return builder
         * 
         */
        public Builder projectKey(@Nullable Output<String> projectKey) {
            $.projectKey = projectKey;
            return this;
        }

        /**
         * @param projectKey Project key the Release Bundle belongs to
         * 
         * @return builder
         * 
         */
        public Builder projectKey(String projectKey) {
            return projectKey(Output.of(projectKey));
        }

        /**
         * @param skipDockerManifestResolution Determines whether to skip the resolution of the Docker manifest, which adds the image layers to the Release Bundle. The default value is `false` (the manifest is resolved and image layers are included).
         * 
         * @return builder
         * 
         */
        public Builder skipDockerManifestResolution(@Nullable Output<Boolean> skipDockerManifestResolution) {
            $.skipDockerManifestResolution = skipDockerManifestResolution;
            return this;
        }

        /**
         * @param skipDockerManifestResolution Determines whether to skip the resolution of the Docker manifest, which adds the image layers to the Release Bundle. The default value is `false` (the manifest is resolved and image layers are included).
         * 
         * @return builder
         * 
         */
        public Builder skipDockerManifestResolution(Boolean skipDockerManifestResolution) {
            return skipDockerManifestResolution(Output.of(skipDockerManifestResolution));
        }

        /**
         * @param source Defines specific repositories to include in the promotion. If this property is left undefined, all repositories (except those specifically excluded) are included in the promotion. Important: If one or more repositories are specifically included, all other repositories are excluded (regardless of what is defined in `excluded_repository_keys`).
         * 
         * @return builder
         * 
         */
        public Builder source(Output<ReleaseBundleV2SourceArgs> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source Defines specific repositories to include in the promotion. If this property is left undefined, all repositories (except those specifically excluded) are included in the promotion. Important: If one or more repositories are specifically included, all other repositories are excluded (regardless of what is defined in `excluded_repository_keys`).
         * 
         * @return builder
         * 
         */
        public Builder source(ReleaseBundleV2SourceArgs source) {
            return source(Output.of(source));
        }

        /**
         * @param sourceType Source type. Valid values: `aql`, `artifacts`, `builds`, `release_bundles`
         * 
         * @return builder
         * 
         */
        public Builder sourceType(Output<String> sourceType) {
            $.sourceType = sourceType;
            return this;
        }

        /**
         * @param sourceType Source type. Valid values: `aql`, `artifacts`, `builds`, `release_bundles`
         * 
         * @return builder
         * 
         */
        public Builder sourceType(String sourceType) {
            return sourceType(Output.of(sourceType));
        }

        /**
         * @param version Version to promote
         * 
         * @return builder
         * 
         */
        public Builder version(Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Version to promote
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public ReleaseBundleV2Args build() {
            if ($.keypairName == null) {
                throw new MissingRequiredPropertyException("ReleaseBundleV2Args", "keypairName");
            }
            if ($.source == null) {
                throw new MissingRequiredPropertyException("ReleaseBundleV2Args", "source");
            }
            if ($.sourceType == null) {
                throw new MissingRequiredPropertyException("ReleaseBundleV2Args", "sourceType");
            }
            if ($.version == null) {
                throw new MissingRequiredPropertyException("ReleaseBundleV2Args", "version");
            }
            return $;
        }
    }

}
