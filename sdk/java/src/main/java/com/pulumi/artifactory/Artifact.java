// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory;

import com.pulumi.artifactory.ArtifactArgs;
import com.pulumi.artifactory.Utilities;
import com.pulumi.artifactory.inputs.ArtifactState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a resource for deploying artifact to Artifactory repository. Support deploying a single artifact only. Changes to `repository` or `path` attributes will trigger a recreation of the resource (i.e. delete then create). See [JFrog documentation](https://jfrog.com/help/r/jfrog-artifactory-documentation/deploy-a-single-artifact) for more details.
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.artifactory.Artifact;
 * import com.pulumi.artifactory.ArtifactArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var my_artifact = new Artifact("my-artifact", ArtifactArgs.builder()
 *             .repository("my-generic-local")
 *             .path("/my-path/my-file.zip")
 *             .filePath("/path/to/my-file.zip")
 *             .build());
 * 
 *         var my_base64_artifact = new Artifact("my-base64-artifact", ArtifactArgs.builder()
 *             .repository("my-generic-local")
 *             .path("/my-path/my-file.zip")
 *             .contentBase64("UEsDBAoAAAAAALl8alQAAAAAAAAAAAAAAAAJAAAATUVUQS1JTkYvUEsDBAoAAAAIALh8alTmUEsubQAAAIMAAAAUAAAATUVUQS1JTkYvTUFOSUZFU1QuTUbzTczLTEstLtENSy0qzszPs1Iw1DPg5XIsSs7ILEstQggH5KRWlBYrwCR4uZyLUhNLUlN0nSqtFBwLEpMzUhV8E8tS8xSM9cz0jHm5nEozc0rAsilAO1JzcjMhYim6XinZQGuA9uiZ83LxcgEAUEsDBAoAAAAAALh8alQAAAAAAAAAAAAAAAAMAAAAYXJ0aWZhY3RvcnkvUEsDBAoAAAAAALh8alQAAAAAAAAAAAAAAAARAAAAYXJ0aWZhY3RvcnkvdGVzdC9QSwMECgAAAAgAuHxqVMgzPcxdAQAALAIAAB0AAABhcnRpZmFjdG9yeS90ZXN0L011bHRpMS5jbGFzc3VRy07CQBQ9w6OlpQqCgPgEV+jCxsTEBcaNiXFRHwkGF66GOuKQPkyZmvBZutDEhR/gRxlvCwkxwVnck3vunXPPnfn++fwCcIRdExpWDdRQL6BhYg1NHes6Nhi0ExlIdcqQ7ez1GXJn4YNgKDkyEFexPxDRLR94xFSc0OVen0cyyWdkTj3JMUPT4ZGSj9xVYTSxlRgr+zL2lDzsUovPZcBQ79w7I/7CbY8HQ7unIhkMu+lAHg1JorqgzGD2wjhyxblMhhWnmgdJnwUdBR2bFrawzWBdCM8LW3dh5D20dexYaKHN0PjHFkN5Pux6MBKu+kP1JmMlfHqSMKZCbepMhvYN2VJkTnCfzFUX0Az6c5J5tHKts2hjtJGnz0hOBixZg6JBmU3ICPP7H2CvadmkqKWkhiJFa9pAuERoYBml2eXjVIy4N2Qq2Xfk5gImIWhKgRrnIgbKWCGkj007q79QSwECFAMKAAAAAAC5fGpUAAAAAAAAAAAAAAAACQAAAAAAAAAAABAA7UEAAAAATUVUQS1JTkYvUEsBAhQDCgAAAAgAuHxqVOZQSy5tAAAAgwAAABQAAAAAAAAAAAAAAKSBJwAAAE1FVEEtSU5GL01BTklGRVNULk1GUEsBAhQDCgAAAAAAuHxqVAAAAAAAAAAAAAAAAAwAAAAAAAAAAAAQAO1BxgAAAGFydGlmYWN0b3J5L1BLAQIUAwoAAAAAALh8alQAAAAAAAAAAAAAAAARAAAAAAAAAAAAEADtQfAAAABhcnRpZmFjdG9yeS90ZXN0L1BLAQIUAwoAAAAIALh8alTIMz3MXQEAACwCAAAdAAAAAAAAAAAAAACkgR8BAABhcnRpZmFjdG9yeS90ZXN0L011bHRpMS5jbGFzc1BLBQYAAAAABQAFAD0BAAC3AgAAAAA=")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 */
@ResourceType(type="artifactory:index/artifact:Artifact")
public class Artifact extends com.pulumi.resources.CustomResource {
    /**
     * MD5 checksum of the artifact.
     * 
     */
    @Export(name="checksumMd5", refs={String.class}, tree="[0]")
    private Output<String> checksumMd5;

    /**
     * @return MD5 checksum of the artifact.
     * 
     */
    public Output<String> checksumMd5() {
        return this.checksumMd5;
    }
    /**
     * SHA1 checksum of the artifact.
     * 
     */
    @Export(name="checksumSha1", refs={String.class}, tree="[0]")
    private Output<String> checksumSha1;

    /**
     * @return SHA1 checksum of the artifact.
     * 
     */
    public Output<String> checksumSha1() {
        return this.checksumSha1;
    }
    /**
     * SHA256 checksum of the artifact.
     * 
     */
    @Export(name="checksumSha256", refs={String.class}, tree="[0]")
    private Output<String> checksumSha256;

    /**
     * @return SHA256 checksum of the artifact.
     * 
     */
    public Output<String> checksumSha256() {
        return this.checksumSha256;
    }
    /**
     * Base64 content of the source file. Conflicts with `file_path`. Either one of these attribute must be set.
     * 
     */
    @Export(name="contentBase64", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> contentBase64;

    /**
     * @return Base64 content of the source file. Conflicts with `file_path`. Either one of these attribute must be set.
     * 
     */
    public Output<Optional<String>> contentBase64() {
        return Codegen.optional(this.contentBase64);
    }
    /**
     * Timestamp when artifact is created.
     * 
     */
    @Export(name="created", refs={String.class}, tree="[0]")
    private Output<String> created;

    /**
     * @return Timestamp when artifact is created.
     * 
     */
    public Output<String> created() {
        return this.created;
    }
    /**
     * User who deploys the artifact.
     * 
     */
    @Export(name="createdBy", refs={String.class}, tree="[0]")
    private Output<String> createdBy;

    /**
     * @return User who deploys the artifact.
     * 
     */
    public Output<String> createdBy() {
        return this.createdBy;
    }
    /**
     * Download URI of the artifact.
     * 
     */
    @Export(name="downloadUri", refs={String.class}, tree="[0]")
    private Output<String> downloadUri;

    /**
     * @return Download URI of the artifact.
     * 
     */
    public Output<String> downloadUri() {
        return this.downloadUri;
    }
    /**
     * Path to the source file. Conflicts with `content_base64`. Either one of these attribute must be set.
     * 
     */
    @Export(name="filePath", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> filePath;

    /**
     * @return Path to the source file. Conflicts with `content_base64`. Either one of these attribute must be set.
     * 
     */
    public Output<Optional<String>> filePath() {
        return Codegen.optional(this.filePath);
    }
    /**
     * MIME type of the artifact.
     * 
     */
    @Export(name="mimeType", refs={String.class}, tree="[0]")
    private Output<String> mimeType;

    /**
     * @return MIME type of the artifact.
     * 
     */
    public Output<String> mimeType() {
        return this.mimeType;
    }
    /**
     * The relative path in the target repository. Must begin with a &#39;/&#39;. You can add key-value matrix parameters to deploy the artifacts with properties. For more details, please refer to [Introducing Matrix Parameters](https://jfrog.com/help/r/jfrog-artifactory-documentation/using-properties-in-deployment-and-resolution).
     * 
     */
    @Export(name="path", refs={String.class}, tree="[0]")
    private Output<String> path;

    /**
     * @return The relative path in the target repository. Must begin with a &#39;/&#39;. You can add key-value matrix parameters to deploy the artifacts with properties. For more details, please refer to [Introducing Matrix Parameters](https://jfrog.com/help/r/jfrog-artifactory-documentation/using-properties-in-deployment-and-resolution).
     * 
     */
    public Output<String> path() {
        return this.path;
    }
    /**
     * Name of the respository.
     * 
     */
    @Export(name="repository", refs={String.class}, tree="[0]")
    private Output<String> repository;

    /**
     * @return Name of the respository.
     * 
     */
    public Output<String> repository() {
        return this.repository;
    }
    /**
     * Size of the artifact, in bytes.
     * 
     */
    @Export(name="size", refs={Integer.class}, tree="[0]")
    private Output<Integer> size;

    /**
     * @return Size of the artifact, in bytes.
     * 
     */
    public Output<Integer> size() {
        return this.size;
    }
    /**
     * URI of the artifact.
     * 
     */
    @Export(name="uri", refs={String.class}, tree="[0]")
    private Output<String> uri;

    /**
     * @return URI of the artifact.
     * 
     */
    public Output<String> uri() {
        return this.uri;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Artifact(java.lang.String name) {
        this(name, ArtifactArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Artifact(java.lang.String name, ArtifactArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Artifact(java.lang.String name, ArtifactArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("artifactory:index/artifact:Artifact", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Artifact(java.lang.String name, Output<java.lang.String> id, @Nullable ArtifactState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("artifactory:index/artifact:Artifact", name, state, makeResourceOptions(options, id), false);
    }

    private static ArtifactArgs makeArgs(ArtifactArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ArtifactArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Artifact get(java.lang.String name, Output<java.lang.String> id, @Nullable ArtifactState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Artifact(name, id, state, options);
    }
}
