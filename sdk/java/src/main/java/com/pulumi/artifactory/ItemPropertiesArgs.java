// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ItemPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ItemPropertiesArgs Empty = new ItemPropertiesArgs();

    /**
     * Add this property to the selected folder and to all of artifacts and folders under this folder. Default to `false`
     * 
     */
    @Import(name="isRecursive")
    private @Nullable Output<Boolean> isRecursive;

    /**
     * @return Add this property to the selected folder and to all of artifacts and folders under this folder. Default to `false`
     * 
     */
    public Optional<Output<Boolean>> isRecursive() {
        return Optional.ofNullable(this.isRecursive);
    }

    /**
     * The relative path of the item (file/folder/repository). Leave unset for repository.
     * 
     */
    @Import(name="itemPath")
    private @Nullable Output<String> itemPath;

    /**
     * @return The relative path of the item (file/folder/repository). Leave unset for repository.
     * 
     */
    public Optional<Output<String>> itemPath() {
        return Optional.ofNullable(this.itemPath);
    }

    /**
     * Map of key and list of values.
     * 
     */
    @Import(name="properties", required=true)
    private Output<Map<String,List<String>>> properties;

    /**
     * @return Map of key and list of values.
     * 
     */
    public Output<Map<String,List<String>>> properties() {
        return this.properties;
    }

    /**
     * Respository key.
     * 
     */
    @Import(name="repoKey", required=true)
    private Output<String> repoKey;

    /**
     * @return Respository key.
     * 
     */
    public Output<String> repoKey() {
        return this.repoKey;
    }

    private ItemPropertiesArgs() {}

    private ItemPropertiesArgs(ItemPropertiesArgs $) {
        this.isRecursive = $.isRecursive;
        this.itemPath = $.itemPath;
        this.properties = $.properties;
        this.repoKey = $.repoKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ItemPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ItemPropertiesArgs $;

        public Builder() {
            $ = new ItemPropertiesArgs();
        }

        public Builder(ItemPropertiesArgs defaults) {
            $ = new ItemPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param isRecursive Add this property to the selected folder and to all of artifacts and folders under this folder. Default to `false`
         * 
         * @return builder
         * 
         */
        public Builder isRecursive(@Nullable Output<Boolean> isRecursive) {
            $.isRecursive = isRecursive;
            return this;
        }

        /**
         * @param isRecursive Add this property to the selected folder and to all of artifacts and folders under this folder. Default to `false`
         * 
         * @return builder
         * 
         */
        public Builder isRecursive(Boolean isRecursive) {
            return isRecursive(Output.of(isRecursive));
        }

        /**
         * @param itemPath The relative path of the item (file/folder/repository). Leave unset for repository.
         * 
         * @return builder
         * 
         */
        public Builder itemPath(@Nullable Output<String> itemPath) {
            $.itemPath = itemPath;
            return this;
        }

        /**
         * @param itemPath The relative path of the item (file/folder/repository). Leave unset for repository.
         * 
         * @return builder
         * 
         */
        public Builder itemPath(String itemPath) {
            return itemPath(Output.of(itemPath));
        }

        /**
         * @param properties Map of key and list of values.
         * 
         * @return builder
         * 
         */
        public Builder properties(Output<Map<String,List<String>>> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param properties Map of key and list of values.
         * 
         * @return builder
         * 
         */
        public Builder properties(Map<String,List<String>> properties) {
            return properties(Output.of(properties));
        }

        /**
         * @param repoKey Respository key.
         * 
         * @return builder
         * 
         */
        public Builder repoKey(Output<String> repoKey) {
            $.repoKey = repoKey;
            return this;
        }

        /**
         * @param repoKey Respository key.
         * 
         * @return builder
         * 
         */
        public Builder repoKey(String repoKey) {
            return repoKey(Output.of(repoKey));
        }

        public ItemPropertiesArgs build() {
            if ($.properties == null) {
                throw new MissingRequiredPropertyException("ItemPropertiesArgs", "properties");
            }
            if ($.repoKey == null) {
                throw new MissingRequiredPropertyException("ItemPropertiesArgs", "repoKey");
            }
            return $;
        }
    }

}
