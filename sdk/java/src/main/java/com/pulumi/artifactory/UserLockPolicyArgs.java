// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserLockPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserLockPolicyArgs Empty = new UserLockPolicyArgs();

    /**
     * Enable User Lock Policy. Lock user after exceeding max failed login attempts.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Enable User Lock Policy. Lock user after exceeding max failed login attempts.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * Max failed login attempts.
     * 
     */
    @Import(name="loginAttempts", required=true)
    private Output<Integer> loginAttempts;

    /**
     * @return Max failed login attempts.
     * 
     */
    public Output<Integer> loginAttempts() {
        return this.loginAttempts;
    }

    /**
     * Name of the resource. Only used for importing.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource. Only used for importing.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private UserLockPolicyArgs() {}

    private UserLockPolicyArgs(UserLockPolicyArgs $) {
        this.enabled = $.enabled;
        this.loginAttempts = $.loginAttempts;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserLockPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserLockPolicyArgs $;

        public Builder() {
            $ = new UserLockPolicyArgs();
        }

        public Builder(UserLockPolicyArgs defaults) {
            $ = new UserLockPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Enable User Lock Policy. Lock user after exceeding max failed login attempts.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Enable User Lock Policy. Lock user after exceeding max failed login attempts.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param loginAttempts Max failed login attempts.
         * 
         * @return builder
         * 
         */
        public Builder loginAttempts(Output<Integer> loginAttempts) {
            $.loginAttempts = loginAttempts;
            return this;
        }

        /**
         * @param loginAttempts Max failed login attempts.
         * 
         * @return builder
         * 
         */
        public Builder loginAttempts(Integer loginAttempts) {
            return loginAttempts(Output.of(loginAttempts));
        }

        /**
         * @param name Name of the resource. Only used for importing.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource. Only used for importing.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public UserLockPolicyArgs build() {
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("UserLockPolicyArgs", "enabled");
            }
            if ($.loginAttempts == null) {
                throw new MissingRequiredPropertyException("UserLockPolicyArgs", "loginAttempts");
            }
            return $;
        }
    }

}
