// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory;

import com.pulumi.artifactory.ReleaseBundleV2Args;
import com.pulumi.artifactory.Utilities;
import com.pulumi.artifactory.inputs.ReleaseBundleV2State;
import com.pulumi.artifactory.outputs.ReleaseBundleV2Source;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource enables you to creates a new Release Bundle v2, uniquely identified by a combination of repository key, name, and version. For more information, see [Understanding Release Bundles v2](https://jfrog.com/help/r/jfrog-artifactory-documentation/understanding-release-bundles-v2) and [REST API](https://jfrog.com/help/r/jfrog-rest-apis/create-release-bundle-v2-version).
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="artifactory:index/releaseBundleV2:ReleaseBundleV2")
public class ReleaseBundleV2 extends com.pulumi.resources.CustomResource {
    /**
     * Timestamp when the new version was created (ISO 8601 standard).
     * 
     */
    @Export(name="created", refs={String.class}, tree="[0]")
    private Output<String> created;

    /**
     * @return Timestamp when the new version was created (ISO 8601 standard).
     * 
     */
    public Output<String> created() {
        return this.created;
    }
    /**
     * The user who created the Release Bundle.
     * 
     */
    @Export(name="createdBy", refs={String.class}, tree="[0]")
    private Output<String> createdBy;

    /**
     * @return The user who created the Release Bundle.
     * 
     */
    public Output<String> createdBy() {
        return this.createdBy;
    }
    /**
     * Key-pair name to use for signature creation
     * 
     */
    @Export(name="keypairName", refs={String.class}, tree="[0]")
    private Output<String> keypairName;

    /**
     * @return Key-pair name to use for signature creation
     * 
     */
    public Output<String> keypairName() {
        return this.keypairName;
    }
    /**
     * Name of Release Bundle
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of Release Bundle
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Project key the Release Bundle belongs to
     * 
     */
    @Export(name="projectKey", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> projectKey;

    /**
     * @return Project key the Release Bundle belongs to
     * 
     */
    public Output<Optional<String>> projectKey() {
        return Codegen.optional(this.projectKey);
    }
    /**
     * The unique identifier of the Artifactory instance where the Release Bundle was created.
     * 
     */
    @Export(name="serviceId", refs={String.class}, tree="[0]")
    private Output<String> serviceId;

    /**
     * @return The unique identifier of the Artifactory instance where the Release Bundle was created.
     * 
     */
    public Output<String> serviceId() {
        return this.serviceId;
    }
    /**
     * Determines whether to skip the resolution of the Docker manifest, which adds the image layers to the Release Bundle. The default value is `false` (the manifest is resolved and image layers are included).
     * 
     */
    @Export(name="skipDockerManifestResolution", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> skipDockerManifestResolution;

    /**
     * @return Determines whether to skip the resolution of the Docker manifest, which adds the image layers to the Release Bundle. The default value is `false` (the manifest is resolved and image layers are included).
     * 
     */
    public Output<Boolean> skipDockerManifestResolution() {
        return this.skipDockerManifestResolution;
    }
    /**
     * Defines specific repositories to include in the promotion. If this property is left undefined, all repositories (except those specifically excluded) are included in the promotion. Important: If one or more repositories are specifically included, all other repositories are excluded (regardless of what is defined in `excluded_repository_keys`).
     * 
     */
    @Export(name="source", refs={ReleaseBundleV2Source.class}, tree="[0]")
    private Output<ReleaseBundleV2Source> source;

    /**
     * @return Defines specific repositories to include in the promotion. If this property is left undefined, all repositories (except those specifically excluded) are included in the promotion. Important: If one or more repositories are specifically included, all other repositories are excluded (regardless of what is defined in `excluded_repository_keys`).
     * 
     */
    public Output<ReleaseBundleV2Source> source() {
        return this.source;
    }
    /**
     * Source type. Valid values: `aql`, `artifacts`, `builds`, `release_bundles`
     * 
     */
    @Export(name="sourceType", refs={String.class}, tree="[0]")
    private Output<String> sourceType;

    /**
     * @return Source type. Valid values: `aql`, `artifacts`, `builds`, `release_bundles`
     * 
     */
    public Output<String> sourceType() {
        return this.sourceType;
    }
    /**
     * Version to promote
     * 
     */
    @Export(name="version", refs={String.class}, tree="[0]")
    private Output<String> version;

    /**
     * @return Version to promote
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ReleaseBundleV2(java.lang.String name) {
        this(name, ReleaseBundleV2Args.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ReleaseBundleV2(java.lang.String name, ReleaseBundleV2Args args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ReleaseBundleV2(java.lang.String name, ReleaseBundleV2Args args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("artifactory:index/releaseBundleV2:ReleaseBundleV2", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ReleaseBundleV2(java.lang.String name, Output<java.lang.String> id, @Nullable ReleaseBundleV2State state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("artifactory:index/releaseBundleV2:ReleaseBundleV2", name, state, makeResourceOptions(options, id), false);
    }

    private static ReleaseBundleV2Args makeArgs(ReleaseBundleV2Args args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ReleaseBundleV2Args.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ReleaseBundleV2 get(java.lang.String name, Output<java.lang.String> id, @Nullable ReleaseBundleV2State state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ReleaseBundleV2(name, id, state, options);
    }
}
