// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OauthSettingsOauthProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final OauthSettingsOauthProviderArgs Empty = new OauthSettingsOauthProviderArgs();

    @Import(name="apiUrl", required=true)
    private Output<String> apiUrl;

    public Output<String> apiUrl() {
        return this.apiUrl;
    }

    @Import(name="authUrl", required=true)
    private Output<String> authUrl;

    public Output<String> authUrl() {
        return this.authUrl;
    }

    @Import(name="clientId", required=true)
    private Output<String> clientId;

    public Output<String> clientId() {
        return this.clientId;
    }

    @Import(name="clientSecret", required=true)
    private Output<String> clientSecret;

    public Output<String> clientSecret() {
        return this.clientSecret;
    }

    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    @Import(name="tokenUrl", required=true)
    private Output<String> tokenUrl;

    public Output<String> tokenUrl() {
        return this.tokenUrl;
    }

    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    private OauthSettingsOauthProviderArgs() {}

    private OauthSettingsOauthProviderArgs(OauthSettingsOauthProviderArgs $) {
        this.apiUrl = $.apiUrl;
        this.authUrl = $.authUrl;
        this.clientId = $.clientId;
        this.clientSecret = $.clientSecret;
        this.enabled = $.enabled;
        this.name = $.name;
        this.tokenUrl = $.tokenUrl;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OauthSettingsOauthProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OauthSettingsOauthProviderArgs $;

        public Builder() {
            $ = new OauthSettingsOauthProviderArgs();
        }

        public Builder(OauthSettingsOauthProviderArgs defaults) {
            $ = new OauthSettingsOauthProviderArgs(Objects.requireNonNull(defaults));
        }

        public Builder apiUrl(Output<String> apiUrl) {
            $.apiUrl = apiUrl;
            return this;
        }

        public Builder apiUrl(String apiUrl) {
            return apiUrl(Output.of(apiUrl));
        }

        public Builder authUrl(Output<String> authUrl) {
            $.authUrl = authUrl;
            return this;
        }

        public Builder authUrl(String authUrl) {
            return authUrl(Output.of(authUrl));
        }

        public Builder clientId(Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        public Builder clientSecret(Output<String> clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        public Builder clientSecret(String clientSecret) {
            return clientSecret(Output.of(clientSecret));
        }

        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder tokenUrl(Output<String> tokenUrl) {
            $.tokenUrl = tokenUrl;
            return this;
        }

        public Builder tokenUrl(String tokenUrl) {
            return tokenUrl(Output.of(tokenUrl));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public OauthSettingsOauthProviderArgs build() {
            $.apiUrl = Objects.requireNonNull($.apiUrl, "expected parameter 'apiUrl' to be non-null");
            $.authUrl = Objects.requireNonNull($.authUrl, "expected parameter 'authUrl' to be non-null");
            $.clientId = Objects.requireNonNull($.clientId, "expected parameter 'clientId' to be non-null");
            $.clientSecret = Objects.requireNonNull($.clientSecret, "expected parameter 'clientSecret' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.tokenUrl = Objects.requireNonNull($.tokenUrl, "expected parameter 'tokenUrl' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
