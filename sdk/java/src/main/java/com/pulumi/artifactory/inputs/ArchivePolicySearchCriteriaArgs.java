// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ArchivePolicySearchCriteriaArgs extends com.pulumi.resources.ResourceArgs {

    public static final ArchivePolicySearchCriteriaArgs Empty = new ArchivePolicySearchCriteriaArgs();

    /**
     * The archive policy will archive packages based on how long ago they were created. For example, if this parameter is 2 then packages created more than 2 months ago will be archived as part of the policy.
     * 
     */
    @Import(name="createdBeforeInMonths")
    private @Nullable Output<Integer> createdBeforeInMonths;

    /**
     * @return The archive policy will archive packages based on how long ago they were created. For example, if this parameter is 2 then packages created more than 2 months ago will be archived as part of the policy.
     * 
     */
    public Optional<Output<Integer>> createdBeforeInMonths() {
        return Optional.ofNullable(this.createdBeforeInMonths);
    }

    /**
     * Specify explicit package names that you want excluded from the policy. Only Name explicit names (and not patterns) are accepted.
     * 
     */
    @Import(name="excludedPackages")
    private @Nullable Output<List<String>> excludedPackages;

    /**
     * @return Specify explicit package names that you want excluded from the policy. Only Name explicit names (and not patterns) are accepted.
     * 
     */
    public Optional<Output<List<String>>> excludedPackages() {
        return Optional.ofNullable(this.excludedPackages);
    }

    /**
     * Specify patterns for repository names or explicit repository names that you want excluded from the archive policy.
     * 
     */
    @Import(name="excludedRepos")
    private @Nullable Output<List<String>> excludedRepos;

    /**
     * @return Specify patterns for repository names or explicit repository names that you want excluded from the archive policy.
     * 
     */
    public Optional<Output<List<String>>> excludedRepos() {
        return Optional.ofNullable(this.excludedRepos);
    }

    /**
     * Set this value to `true` if you want the policy to run on all Artifactory projects. The default value is `false`.
     * 
     */
    @Import(name="includeAllProjects")
    private @Nullable Output<Boolean> includeAllProjects;

    /**
     * @return Set this value to `true` if you want the policy to run on all Artifactory projects. The default value is `false`.
     * 
     */
    public Optional<Output<Boolean>> includeAllProjects() {
        return Optional.ofNullable(this.includeAllProjects);
    }

    /**
     * Specify a pattern for a package name or an explicit package name. It accept only single element which can be specific package or pattern, and for including all packages use `**`. Example: `included_packages = [&#34;**&#34;]`
     * 
     */
    @Import(name="includedPackages", required=true)
    private Output<List<String>> includedPackages;

    /**
     * @return Specify a pattern for a package name or an explicit package name. It accept only single element which can be specific package or pattern, and for including all packages use `**`. Example: `included_packages = [&#34;**&#34;]`
     * 
     */
    public Output<List<String>> includedPackages() {
        return this.includedPackages;
    }

    /**
     * List of projects on which you want this policy to run. To include repositories that are not assigned to any project, enter the project key `default`.
     * 
     * ~&gt;This setting is relevant only on the global level, for Platform Admins.
     * 
     */
    @Import(name="includedProjects")
    private @Nullable Output<List<String>> includedProjects;

    /**
     * @return List of projects on which you want this policy to run. To include repositories that are not assigned to any project, enter the project key `default`.
     * 
     * ~&gt;This setting is relevant only on the global level, for Platform Admins.
     * 
     */
    public Optional<Output<List<String>>> includedProjects() {
        return Optional.ofNullable(this.includedProjects);
    }

    /**
     * Set a value for the number of latest versions to keep. The archive policy will remove all versions before the number you select here. The latest version is always excluded.
     * 
     * ~&gt;Versions are determined by creation date.
     * 
     * ~&gt;Not all package types support this condition. If you include a package type in your policy that is not compatible with this condition, a validation error (400) is returned. For information on which package types support this condition, see here.
     * 
     */
    @Import(name="keepLastNVersions")
    private @Nullable Output<Integer> keepLastNVersions;

    /**
     * @return Set a value for the number of latest versions to keep. The archive policy will remove all versions before the number you select here. The latest version is always excluded.
     * 
     * ~&gt;Versions are determined by creation date.
     * 
     * ~&gt;Not all package types support this condition. If you include a package type in your policy that is not compatible with this condition, a validation error (400) is returned. For information on which package types support this condition, see here.
     * 
     */
    public Optional<Output<Integer>> keepLastNVersions() {
        return Optional.ofNullable(this.keepLastNVersions);
    }

    /**
     * The archive policy will archive packages based on how long ago they were downloaded. For example, if this parameter is 5 then packages downloaded more than 5 months ago will be archived as part of the policy.
     * 
     * ~&gt;JFrog recommends using the `last_downloaded_before_in_months` condition to ensure that packages currently in use are not archived.
     * 
     */
    @Import(name="lastDownloadedBeforeInMonths")
    private @Nullable Output<Integer> lastDownloadedBeforeInMonths;

    /**
     * @return The archive policy will archive packages based on how long ago they were downloaded. For example, if this parameter is 5 then packages downloaded more than 5 months ago will be archived as part of the policy.
     * 
     * ~&gt;JFrog recommends using the `last_downloaded_before_in_months` condition to ensure that packages currently in use are not archived.
     * 
     */
    public Optional<Output<Integer>> lastDownloadedBeforeInMonths() {
        return Optional.ofNullable(this.lastDownloadedBeforeInMonths);
    }

    @Import(name="packageTypes", required=true)
    private Output<List<String>> packageTypes;

    public Output<List<String>> packageTypes() {
        return this.packageTypes;
    }

    /**
     * Specify one or more patterns for the repository name(s) on which you want the archive policy to run. You can also specify explicit repository names. Specifying at least one pattern or explicit name is required. Only packages in repositories that match the pattern or explicit name will be archived. For including all repos use `**`. Example: `repos = [&#34;**&#34;]`
     * 
     */
    @Import(name="repos", required=true)
    private Output<List<String>> repos;

    /**
     * @return Specify one or more patterns for the repository name(s) on which you want the archive policy to run. You can also specify explicit repository names. Specifying at least one pattern or explicit name is required. Only packages in repositories that match the pattern or explicit name will be archived. For including all repos use `**`. Example: `repos = [&#34;**&#34;]`
     * 
     */
    public Output<List<String>> repos() {
        return this.repos;
    }

    private ArchivePolicySearchCriteriaArgs() {}

    private ArchivePolicySearchCriteriaArgs(ArchivePolicySearchCriteriaArgs $) {
        this.createdBeforeInMonths = $.createdBeforeInMonths;
        this.excludedPackages = $.excludedPackages;
        this.excludedRepos = $.excludedRepos;
        this.includeAllProjects = $.includeAllProjects;
        this.includedPackages = $.includedPackages;
        this.includedProjects = $.includedProjects;
        this.keepLastNVersions = $.keepLastNVersions;
        this.lastDownloadedBeforeInMonths = $.lastDownloadedBeforeInMonths;
        this.packageTypes = $.packageTypes;
        this.repos = $.repos;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ArchivePolicySearchCriteriaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ArchivePolicySearchCriteriaArgs $;

        public Builder() {
            $ = new ArchivePolicySearchCriteriaArgs();
        }

        public Builder(ArchivePolicySearchCriteriaArgs defaults) {
            $ = new ArchivePolicySearchCriteriaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdBeforeInMonths The archive policy will archive packages based on how long ago they were created. For example, if this parameter is 2 then packages created more than 2 months ago will be archived as part of the policy.
         * 
         * @return builder
         * 
         */
        public Builder createdBeforeInMonths(@Nullable Output<Integer> createdBeforeInMonths) {
            $.createdBeforeInMonths = createdBeforeInMonths;
            return this;
        }

        /**
         * @param createdBeforeInMonths The archive policy will archive packages based on how long ago they were created. For example, if this parameter is 2 then packages created more than 2 months ago will be archived as part of the policy.
         * 
         * @return builder
         * 
         */
        public Builder createdBeforeInMonths(Integer createdBeforeInMonths) {
            return createdBeforeInMonths(Output.of(createdBeforeInMonths));
        }

        /**
         * @param excludedPackages Specify explicit package names that you want excluded from the policy. Only Name explicit names (and not patterns) are accepted.
         * 
         * @return builder
         * 
         */
        public Builder excludedPackages(@Nullable Output<List<String>> excludedPackages) {
            $.excludedPackages = excludedPackages;
            return this;
        }

        /**
         * @param excludedPackages Specify explicit package names that you want excluded from the policy. Only Name explicit names (and not patterns) are accepted.
         * 
         * @return builder
         * 
         */
        public Builder excludedPackages(List<String> excludedPackages) {
            return excludedPackages(Output.of(excludedPackages));
        }

        /**
         * @param excludedPackages Specify explicit package names that you want excluded from the policy. Only Name explicit names (and not patterns) are accepted.
         * 
         * @return builder
         * 
         */
        public Builder excludedPackages(String... excludedPackages) {
            return excludedPackages(List.of(excludedPackages));
        }

        /**
         * @param excludedRepos Specify patterns for repository names or explicit repository names that you want excluded from the archive policy.
         * 
         * @return builder
         * 
         */
        public Builder excludedRepos(@Nullable Output<List<String>> excludedRepos) {
            $.excludedRepos = excludedRepos;
            return this;
        }

        /**
         * @param excludedRepos Specify patterns for repository names or explicit repository names that you want excluded from the archive policy.
         * 
         * @return builder
         * 
         */
        public Builder excludedRepos(List<String> excludedRepos) {
            return excludedRepos(Output.of(excludedRepos));
        }

        /**
         * @param excludedRepos Specify patterns for repository names or explicit repository names that you want excluded from the archive policy.
         * 
         * @return builder
         * 
         */
        public Builder excludedRepos(String... excludedRepos) {
            return excludedRepos(List.of(excludedRepos));
        }

        /**
         * @param includeAllProjects Set this value to `true` if you want the policy to run on all Artifactory projects. The default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder includeAllProjects(@Nullable Output<Boolean> includeAllProjects) {
            $.includeAllProjects = includeAllProjects;
            return this;
        }

        /**
         * @param includeAllProjects Set this value to `true` if you want the policy to run on all Artifactory projects. The default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder includeAllProjects(Boolean includeAllProjects) {
            return includeAllProjects(Output.of(includeAllProjects));
        }

        /**
         * @param includedPackages Specify a pattern for a package name or an explicit package name. It accept only single element which can be specific package or pattern, and for including all packages use `**`. Example: `included_packages = [&#34;**&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder includedPackages(Output<List<String>> includedPackages) {
            $.includedPackages = includedPackages;
            return this;
        }

        /**
         * @param includedPackages Specify a pattern for a package name or an explicit package name. It accept only single element which can be specific package or pattern, and for including all packages use `**`. Example: `included_packages = [&#34;**&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder includedPackages(List<String> includedPackages) {
            return includedPackages(Output.of(includedPackages));
        }

        /**
         * @param includedPackages Specify a pattern for a package name or an explicit package name. It accept only single element which can be specific package or pattern, and for including all packages use `**`. Example: `included_packages = [&#34;**&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder includedPackages(String... includedPackages) {
            return includedPackages(List.of(includedPackages));
        }

        /**
         * @param includedProjects List of projects on which you want this policy to run. To include repositories that are not assigned to any project, enter the project key `default`.
         * 
         * ~&gt;This setting is relevant only on the global level, for Platform Admins.
         * 
         * @return builder
         * 
         */
        public Builder includedProjects(@Nullable Output<List<String>> includedProjects) {
            $.includedProjects = includedProjects;
            return this;
        }

        /**
         * @param includedProjects List of projects on which you want this policy to run. To include repositories that are not assigned to any project, enter the project key `default`.
         * 
         * ~&gt;This setting is relevant only on the global level, for Platform Admins.
         * 
         * @return builder
         * 
         */
        public Builder includedProjects(List<String> includedProjects) {
            return includedProjects(Output.of(includedProjects));
        }

        /**
         * @param includedProjects List of projects on which you want this policy to run. To include repositories that are not assigned to any project, enter the project key `default`.
         * 
         * ~&gt;This setting is relevant only on the global level, for Platform Admins.
         * 
         * @return builder
         * 
         */
        public Builder includedProjects(String... includedProjects) {
            return includedProjects(List.of(includedProjects));
        }

        /**
         * @param keepLastNVersions Set a value for the number of latest versions to keep. The archive policy will remove all versions before the number you select here. The latest version is always excluded.
         * 
         * ~&gt;Versions are determined by creation date.
         * 
         * ~&gt;Not all package types support this condition. If you include a package type in your policy that is not compatible with this condition, a validation error (400) is returned. For information on which package types support this condition, see here.
         * 
         * @return builder
         * 
         */
        public Builder keepLastNVersions(@Nullable Output<Integer> keepLastNVersions) {
            $.keepLastNVersions = keepLastNVersions;
            return this;
        }

        /**
         * @param keepLastNVersions Set a value for the number of latest versions to keep. The archive policy will remove all versions before the number you select here. The latest version is always excluded.
         * 
         * ~&gt;Versions are determined by creation date.
         * 
         * ~&gt;Not all package types support this condition. If you include a package type in your policy that is not compatible with this condition, a validation error (400) is returned. For information on which package types support this condition, see here.
         * 
         * @return builder
         * 
         */
        public Builder keepLastNVersions(Integer keepLastNVersions) {
            return keepLastNVersions(Output.of(keepLastNVersions));
        }

        /**
         * @param lastDownloadedBeforeInMonths The archive policy will archive packages based on how long ago they were downloaded. For example, if this parameter is 5 then packages downloaded more than 5 months ago will be archived as part of the policy.
         * 
         * ~&gt;JFrog recommends using the `last_downloaded_before_in_months` condition to ensure that packages currently in use are not archived.
         * 
         * @return builder
         * 
         */
        public Builder lastDownloadedBeforeInMonths(@Nullable Output<Integer> lastDownloadedBeforeInMonths) {
            $.lastDownloadedBeforeInMonths = lastDownloadedBeforeInMonths;
            return this;
        }

        /**
         * @param lastDownloadedBeforeInMonths The archive policy will archive packages based on how long ago they were downloaded. For example, if this parameter is 5 then packages downloaded more than 5 months ago will be archived as part of the policy.
         * 
         * ~&gt;JFrog recommends using the `last_downloaded_before_in_months` condition to ensure that packages currently in use are not archived.
         * 
         * @return builder
         * 
         */
        public Builder lastDownloadedBeforeInMonths(Integer lastDownloadedBeforeInMonths) {
            return lastDownloadedBeforeInMonths(Output.of(lastDownloadedBeforeInMonths));
        }

        public Builder packageTypes(Output<List<String>> packageTypes) {
            $.packageTypes = packageTypes;
            return this;
        }

        public Builder packageTypes(List<String> packageTypes) {
            return packageTypes(Output.of(packageTypes));
        }

        public Builder packageTypes(String... packageTypes) {
            return packageTypes(List.of(packageTypes));
        }

        /**
         * @param repos Specify one or more patterns for the repository name(s) on which you want the archive policy to run. You can also specify explicit repository names. Specifying at least one pattern or explicit name is required. Only packages in repositories that match the pattern or explicit name will be archived. For including all repos use `**`. Example: `repos = [&#34;**&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder repos(Output<List<String>> repos) {
            $.repos = repos;
            return this;
        }

        /**
         * @param repos Specify one or more patterns for the repository name(s) on which you want the archive policy to run. You can also specify explicit repository names. Specifying at least one pattern or explicit name is required. Only packages in repositories that match the pattern or explicit name will be archived. For including all repos use `**`. Example: `repos = [&#34;**&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder repos(List<String> repos) {
            return repos(Output.of(repos));
        }

        /**
         * @param repos Specify one or more patterns for the repository name(s) on which you want the archive policy to run. You can also specify explicit repository names. Specifying at least one pattern or explicit name is required. Only packages in repositories that match the pattern or explicit name will be archived. For including all repos use `**`. Example: `repos = [&#34;**&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder repos(String... repos) {
            return repos(List.of(repos));
        }

        public ArchivePolicySearchCriteriaArgs build() {
            if ($.includedPackages == null) {
                throw new MissingRequiredPropertyException("ArchivePolicySearchCriteriaArgs", "includedPackages");
            }
            if ($.packageTypes == null) {
                throw new MissingRequiredPropertyException("ArchivePolicySearchCriteriaArgs", "packageTypes");
            }
            if ($.repos == null) {
                throw new MissingRequiredPropertyException("ArchivePolicySearchCriteriaArgs", "repos");
            }
            return $;
        }
    }

}
