// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory.inputs;

import com.pulumi.artifactory.inputs.PermissionTargetBuildArgs;
import com.pulumi.artifactory.inputs.PermissionTargetReleaseBundleArgs;
import com.pulumi.artifactory.inputs.PermissionTargetRepoArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PermissionTargetState extends com.pulumi.resources.ResourceArgs {

    public static final PermissionTargetState Empty = new PermissionTargetState();

    /**
     * As for repo but for artifactory-build-info permissions.
     * 
     */
    @Import(name="builds")
    private @Nullable Output<List<PermissionTargetBuildArgs>> builds;

    /**
     * @return As for repo but for artifactory-build-info permissions.
     * 
     */
    public Optional<Output<List<PermissionTargetBuildArgs>>> builds() {
        return Optional.ofNullable(this.builds);
    }

    /**
     * Name of permission.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of permission.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * As for repo for for release-bundles permissions.
     * 
     */
    @Import(name="releaseBundles")
    private @Nullable Output<List<PermissionTargetReleaseBundleArgs>> releaseBundles;

    /**
     * @return As for repo for for release-bundles permissions.
     * 
     */
    public Optional<Output<List<PermissionTargetReleaseBundleArgs>>> releaseBundles() {
        return Optional.ofNullable(this.releaseBundles);
    }

    /**
     * Repository permission configuration.
     * 
     */
    @Import(name="repos")
    private @Nullable Output<List<PermissionTargetRepoArgs>> repos;

    /**
     * @return Repository permission configuration.
     * 
     */
    public Optional<Output<List<PermissionTargetRepoArgs>>> repos() {
        return Optional.ofNullable(this.repos);
    }

    private PermissionTargetState() {}

    private PermissionTargetState(PermissionTargetState $) {
        this.builds = $.builds;
        this.name = $.name;
        this.releaseBundles = $.releaseBundles;
        this.repos = $.repos;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PermissionTargetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PermissionTargetState $;

        public Builder() {
            $ = new PermissionTargetState();
        }

        public Builder(PermissionTargetState defaults) {
            $ = new PermissionTargetState(Objects.requireNonNull(defaults));
        }

        /**
         * @param builds As for repo but for artifactory-build-info permissions.
         * 
         * @return builder
         * 
         */
        public Builder builds(@Nullable Output<List<PermissionTargetBuildArgs>> builds) {
            $.builds = builds;
            return this;
        }

        /**
         * @param builds As for repo but for artifactory-build-info permissions.
         * 
         * @return builder
         * 
         */
        public Builder builds(List<PermissionTargetBuildArgs> builds) {
            return builds(Output.of(builds));
        }

        /**
         * @param builds As for repo but for artifactory-build-info permissions.
         * 
         * @return builder
         * 
         */
        public Builder builds(PermissionTargetBuildArgs... builds) {
            return builds(List.of(builds));
        }

        /**
         * @param name Name of permission.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of permission.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param releaseBundles As for repo for for release-bundles permissions.
         * 
         * @return builder
         * 
         */
        public Builder releaseBundles(@Nullable Output<List<PermissionTargetReleaseBundleArgs>> releaseBundles) {
            $.releaseBundles = releaseBundles;
            return this;
        }

        /**
         * @param releaseBundles As for repo for for release-bundles permissions.
         * 
         * @return builder
         * 
         */
        public Builder releaseBundles(List<PermissionTargetReleaseBundleArgs> releaseBundles) {
            return releaseBundles(Output.of(releaseBundles));
        }

        /**
         * @param releaseBundles As for repo for for release-bundles permissions.
         * 
         * @return builder
         * 
         */
        public Builder releaseBundles(PermissionTargetReleaseBundleArgs... releaseBundles) {
            return releaseBundles(List.of(releaseBundles));
        }

        /**
         * @param repos Repository permission configuration.
         * 
         * @return builder
         * 
         */
        public Builder repos(@Nullable Output<List<PermissionTargetRepoArgs>> repos) {
            $.repos = repos;
            return this;
        }

        /**
         * @param repos Repository permission configuration.
         * 
         * @return builder
         * 
         */
        public Builder repos(List<PermissionTargetRepoArgs> repos) {
            return repos(Output.of(repos));
        }

        /**
         * @param repos Repository permission configuration.
         * 
         * @return builder
         * 
         */
        public Builder repos(PermissionTargetRepoArgs... repos) {
            return repos(List.of(repos));
        }

        public PermissionTargetState build() {
            return $;
        }
    }

}
