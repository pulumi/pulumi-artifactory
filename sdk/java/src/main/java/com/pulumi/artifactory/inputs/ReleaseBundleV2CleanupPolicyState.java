// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory.inputs;

import com.pulumi.artifactory.inputs.ReleaseBundleV2CleanupPolicySearchCriteriaArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReleaseBundleV2CleanupPolicyState extends com.pulumi.resources.ResourceArgs {

    public static final ReleaseBundleV2CleanupPolicyState Empty = new ReleaseBundleV2CleanupPolicyState();

    /**
     * The cron expression determines when the policy is run. This parameter is not mandatory, however if left empty the policy will not run automatically and can only be triggered manually.
     * 
     */
    @Import(name="cronExpression")
    private @Nullable Output<String> cronExpression;

    /**
     * @return The cron expression determines when the policy is run. This parameter is not mandatory, however if left empty the policy will not run automatically and can only be triggered manually.
     * 
     */
    public Optional<Output<String>> cronExpression() {
        return Optional.ofNullable(this.cronExpression);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The maximum duration (in minutes) for policy execution, after which the policy will stop running even if not completed. While setting a maximum run duration for a policy is useful for adhering to a strict archive V2 schedule, it can cause the policy to stop before completion.
     * 
     */
    @Import(name="durationInMinutes")
    private @Nullable Output<Integer> durationInMinutes;

    /**
     * @return The maximum duration (in minutes) for policy execution, after which the policy will stop running even if not completed. While setting a maximum run duration for a policy is useful for adhering to a strict archive V2 schedule, it can cause the policy to stop before completion.
     * 
     */
    public Optional<Output<Integer>> durationInMinutes() {
        return Optional.ofNullable(this.durationInMinutes);
    }

    /**
     * Enables or disabled the release bundles v2 cleanup policy. This allows the user to run the policy manually. If a policy has a valid cron expression, then it will be scheduled for execution based on it. If a policy is disabled, its future executions will be unscheduled. Defaults to `true`
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Enables or disabled the release bundles v2 cleanup policy. This allows the user to run the policy manually. If a policy has a valid cron expression, then it will be scheduled for execution based on it. If a policy is disabled, its future executions will be unscheduled. Defaults to `true`
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Needs to be set to releaseBundle.
     * 
     */
    @Import(name="itemType")
    private @Nullable Output<String> itemType;

    /**
     * @return Needs to be set to releaseBundle.
     * 
     */
    public Optional<Output<String>> itemType() {
        return Optional.ofNullable(this.itemType);
    }

    /**
     * An ID that is used to identify the cleanup policy. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return An ID that is used to identify the cleanup policy. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    @Import(name="searchCriteria")
    private @Nullable Output<ReleaseBundleV2CleanupPolicySearchCriteriaArgs> searchCriteria;

    public Optional<Output<ReleaseBundleV2CleanupPolicySearchCriteriaArgs>> searchCriteria() {
        return Optional.ofNullable(this.searchCriteria);
    }

    private ReleaseBundleV2CleanupPolicyState() {}

    private ReleaseBundleV2CleanupPolicyState(ReleaseBundleV2CleanupPolicyState $) {
        this.cronExpression = $.cronExpression;
        this.description = $.description;
        this.durationInMinutes = $.durationInMinutes;
        this.enabled = $.enabled;
        this.itemType = $.itemType;
        this.key = $.key;
        this.searchCriteria = $.searchCriteria;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReleaseBundleV2CleanupPolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReleaseBundleV2CleanupPolicyState $;

        public Builder() {
            $ = new ReleaseBundleV2CleanupPolicyState();
        }

        public Builder(ReleaseBundleV2CleanupPolicyState defaults) {
            $ = new ReleaseBundleV2CleanupPolicyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param cronExpression The cron expression determines when the policy is run. This parameter is not mandatory, however if left empty the policy will not run automatically and can only be triggered manually.
         * 
         * @return builder
         * 
         */
        public Builder cronExpression(@Nullable Output<String> cronExpression) {
            $.cronExpression = cronExpression;
            return this;
        }

        /**
         * @param cronExpression The cron expression determines when the policy is run. This parameter is not mandatory, however if left empty the policy will not run automatically and can only be triggered manually.
         * 
         * @return builder
         * 
         */
        public Builder cronExpression(String cronExpression) {
            return cronExpression(Output.of(cronExpression));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param durationInMinutes The maximum duration (in minutes) for policy execution, after which the policy will stop running even if not completed. While setting a maximum run duration for a policy is useful for adhering to a strict archive V2 schedule, it can cause the policy to stop before completion.
         * 
         * @return builder
         * 
         */
        public Builder durationInMinutes(@Nullable Output<Integer> durationInMinutes) {
            $.durationInMinutes = durationInMinutes;
            return this;
        }

        /**
         * @param durationInMinutes The maximum duration (in minutes) for policy execution, after which the policy will stop running even if not completed. While setting a maximum run duration for a policy is useful for adhering to a strict archive V2 schedule, it can cause the policy to stop before completion.
         * 
         * @return builder
         * 
         */
        public Builder durationInMinutes(Integer durationInMinutes) {
            return durationInMinutes(Output.of(durationInMinutes));
        }

        /**
         * @param enabled Enables or disabled the release bundles v2 cleanup policy. This allows the user to run the policy manually. If a policy has a valid cron expression, then it will be scheduled for execution based on it. If a policy is disabled, its future executions will be unscheduled. Defaults to `true`
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Enables or disabled the release bundles v2 cleanup policy. This allows the user to run the policy manually. If a policy has a valid cron expression, then it will be scheduled for execution based on it. If a policy is disabled, its future executions will be unscheduled. Defaults to `true`
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param itemType Needs to be set to releaseBundle.
         * 
         * @return builder
         * 
         */
        public Builder itemType(@Nullable Output<String> itemType) {
            $.itemType = itemType;
            return this;
        }

        /**
         * @param itemType Needs to be set to releaseBundle.
         * 
         * @return builder
         * 
         */
        public Builder itemType(String itemType) {
            return itemType(Output.of(itemType));
        }

        /**
         * @param key An ID that is used to identify the cleanup policy. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key An ID that is used to identify the cleanup policy. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        public Builder searchCriteria(@Nullable Output<ReleaseBundleV2CleanupPolicySearchCriteriaArgs> searchCriteria) {
            $.searchCriteria = searchCriteria;
            return this;
        }

        public Builder searchCriteria(ReleaseBundleV2CleanupPolicySearchCriteriaArgs searchCriteria) {
            return searchCriteria(Output.of(searchCriteria));
        }

        public ReleaseBundleV2CleanupPolicyState build() {
            return $;
        }
    }

}
