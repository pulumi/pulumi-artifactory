// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ManagedUserPasswordPolicy {
    /**
     * @return Minimum number of digits that the password must contain
     * 
     */
    private @Nullable Integer digit;
    /**
     * @return Minimum length of the password
     * 
     */
    private @Nullable Integer length;
    /**
     * @return Minimum number of lowercase letters that the password must contain
     * 
     */
    private @Nullable Integer lowercase;
    /**
     * @return Minimum number of special char that the password must contain. Special chars list: `!&#34;#$%&amp;&#39;()*+,-./:;&lt;=&gt;?{@literal @}[\]^_`{|}~`
     * 
     */
    private @Nullable Integer specialChar;
    /**
     * @return Minimum number of uppercase letters that the password must contain
     * 
     */
    private @Nullable Integer uppercase;

    private ManagedUserPasswordPolicy() {}
    /**
     * @return Minimum number of digits that the password must contain
     * 
     */
    public Optional<Integer> digit() {
        return Optional.ofNullable(this.digit);
    }
    /**
     * @return Minimum length of the password
     * 
     */
    public Optional<Integer> length() {
        return Optional.ofNullable(this.length);
    }
    /**
     * @return Minimum number of lowercase letters that the password must contain
     * 
     */
    public Optional<Integer> lowercase() {
        return Optional.ofNullable(this.lowercase);
    }
    /**
     * @return Minimum number of special char that the password must contain. Special chars list: `!&#34;#$%&amp;&#39;()*+,-./:;&lt;=&gt;?{@literal @}[\]^_`{|}~`
     * 
     */
    public Optional<Integer> specialChar() {
        return Optional.ofNullable(this.specialChar);
    }
    /**
     * @return Minimum number of uppercase letters that the password must contain
     * 
     */
    public Optional<Integer> uppercase() {
        return Optional.ofNullable(this.uppercase);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ManagedUserPasswordPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer digit;
        private @Nullable Integer length;
        private @Nullable Integer lowercase;
        private @Nullable Integer specialChar;
        private @Nullable Integer uppercase;
        public Builder() {}
        public Builder(ManagedUserPasswordPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.digit = defaults.digit;
    	      this.length = defaults.length;
    	      this.lowercase = defaults.lowercase;
    	      this.specialChar = defaults.specialChar;
    	      this.uppercase = defaults.uppercase;
        }

        @CustomType.Setter
        public Builder digit(@Nullable Integer digit) {

            this.digit = digit;
            return this;
        }
        @CustomType.Setter
        public Builder length(@Nullable Integer length) {

            this.length = length;
            return this;
        }
        @CustomType.Setter
        public Builder lowercase(@Nullable Integer lowercase) {

            this.lowercase = lowercase;
            return this;
        }
        @CustomType.Setter
        public Builder specialChar(@Nullable Integer specialChar) {

            this.specialChar = specialChar;
            return this;
        }
        @CustomType.Setter
        public Builder uppercase(@Nullable Integer uppercase) {

            this.uppercase = uppercase;
            return this;
        }
        public ManagedUserPasswordPolicy build() {
            final var _resultValue = new ManagedUserPasswordPolicy();
            _resultValue.digit = digit;
            _resultValue.length = length;
            _resultValue.lowercase = lowercase;
            _resultValue.specialChar = specialChar;
            _resultValue.uppercase = uppercase;
            return _resultValue;
        }
    }
}
