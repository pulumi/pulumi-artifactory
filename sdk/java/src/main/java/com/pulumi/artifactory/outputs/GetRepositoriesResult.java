// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory.outputs;

import com.pulumi.artifactory.outputs.GetRepositoriesRepo;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRepositoriesResult {
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable String packageType;
    /**
     * @return Filter for repositories assigned to a specific project.
     * 
     */
    private @Nullable String projectKey;
    /**
     * @return A list of repositories.
     * 
     */
    private List<GetRepositoriesRepo> repos;
    /**
     * @return Filter for repositories of a specific type. Allowed values are: local, remote, virtual, federated, distribution
     * 
     */
    private @Nullable String repositoryType;

    private GetRepositoriesResult() {}
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> packageType() {
        return Optional.ofNullable(this.packageType);
    }
    /**
     * @return Filter for repositories assigned to a specific project.
     * 
     */
    public Optional<String> projectKey() {
        return Optional.ofNullable(this.projectKey);
    }
    /**
     * @return A list of repositories.
     * 
     */
    public List<GetRepositoriesRepo> repos() {
        return this.repos;
    }
    /**
     * @return Filter for repositories of a specific type. Allowed values are: local, remote, virtual, federated, distribution
     * 
     */
    public Optional<String> repositoryType() {
        return Optional.ofNullable(this.repositoryType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRepositoriesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private @Nullable String packageType;
        private @Nullable String projectKey;
        private List<GetRepositoriesRepo> repos;
        private @Nullable String repositoryType;
        public Builder() {}
        public Builder(GetRepositoriesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.packageType = defaults.packageType;
    	      this.projectKey = defaults.projectKey;
    	      this.repos = defaults.repos;
    	      this.repositoryType = defaults.repositoryType;
        }

        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRepositoriesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder packageType(@Nullable String packageType) {

            this.packageType = packageType;
            return this;
        }
        @CustomType.Setter
        public Builder projectKey(@Nullable String projectKey) {

            this.projectKey = projectKey;
            return this;
        }
        @CustomType.Setter
        public Builder repos(List<GetRepositoriesRepo> repos) {
            if (repos == null) {
              throw new MissingRequiredPropertyException("GetRepositoriesResult", "repos");
            }
            this.repos = repos;
            return this;
        }
        public Builder repos(GetRepositoriesRepo... repos) {
            return repos(List.of(repos));
        }
        @CustomType.Setter
        public Builder repositoryType(@Nullable String repositoryType) {

            this.repositoryType = repositoryType;
            return this;
        }
        public GetRepositoriesResult build() {
            final var _resultValue = new GetRepositoriesResult();
            _resultValue.id = id;
            _resultValue.packageType = packageType;
            _resultValue.projectKey = projectKey;
            _resultValue.repos = repos;
            _resultValue.repositoryType = repositoryType;
            return _resultValue;
        }
    }
}
