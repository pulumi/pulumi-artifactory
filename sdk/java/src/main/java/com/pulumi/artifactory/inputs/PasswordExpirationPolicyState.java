// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PasswordExpirationPolicyState extends com.pulumi.resources.ResourceArgs {

    public static final PasswordExpirationPolicyState Empty = new PasswordExpirationPolicyState();

    /**
     * Enable Password Expiration Policy. This only applies to internal user passwords.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Enable Password Expiration Policy. This only applies to internal user passwords.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Name of the resource. Only used for importing.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource. Only used for importing.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Send mail notification before password expiration. Users will receive an email notification X days before password will expire. Mail server must be enabled and configured correctly.
     * 
     */
    @Import(name="notifyByEmail")
    private @Nullable Output<Boolean> notifyByEmail;

    /**
     * @return Send mail notification before password expiration. Users will receive an email notification X days before password will expire. Mail server must be enabled and configured correctly.
     * 
     */
    public Optional<Output<Boolean>> notifyByEmail() {
        return Optional.ofNullable(this.notifyByEmail);
    }

    /**
     * Password expires every N days. The time interval in which users will be obligated to change their password.
     * 
     */
    @Import(name="passwordMaxAge")
    private @Nullable Output<Integer> passwordMaxAge;

    /**
     * @return Password expires every N days. The time interval in which users will be obligated to change their password.
     * 
     */
    public Optional<Output<Integer>> passwordMaxAge() {
        return Optional.ofNullable(this.passwordMaxAge);
    }

    private PasswordExpirationPolicyState() {}

    private PasswordExpirationPolicyState(PasswordExpirationPolicyState $) {
        this.enabled = $.enabled;
        this.name = $.name;
        this.notifyByEmail = $.notifyByEmail;
        this.passwordMaxAge = $.passwordMaxAge;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PasswordExpirationPolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PasswordExpirationPolicyState $;

        public Builder() {
            $ = new PasswordExpirationPolicyState();
        }

        public Builder(PasswordExpirationPolicyState defaults) {
            $ = new PasswordExpirationPolicyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Enable Password Expiration Policy. This only applies to internal user passwords.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Enable Password Expiration Policy. This only applies to internal user passwords.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param name Name of the resource. Only used for importing.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource. Only used for importing.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notifyByEmail Send mail notification before password expiration. Users will receive an email notification X days before password will expire. Mail server must be enabled and configured correctly.
         * 
         * @return builder
         * 
         */
        public Builder notifyByEmail(@Nullable Output<Boolean> notifyByEmail) {
            $.notifyByEmail = notifyByEmail;
            return this;
        }

        /**
         * @param notifyByEmail Send mail notification before password expiration. Users will receive an email notification X days before password will expire. Mail server must be enabled and configured correctly.
         * 
         * @return builder
         * 
         */
        public Builder notifyByEmail(Boolean notifyByEmail) {
            return notifyByEmail(Output.of(notifyByEmail));
        }

        /**
         * @param passwordMaxAge Password expires every N days. The time interval in which users will be obligated to change their password.
         * 
         * @return builder
         * 
         */
        public Builder passwordMaxAge(@Nullable Output<Integer> passwordMaxAge) {
            $.passwordMaxAge = passwordMaxAge;
            return this;
        }

        /**
         * @param passwordMaxAge Password expires every N days. The time interval in which users will be obligated to change their password.
         * 
         * @return builder
         * 
         */
        public Builder passwordMaxAge(Integer passwordMaxAge) {
            return passwordMaxAge(Output.of(passwordMaxAge));
        }

        public PasswordExpirationPolicyState build() {
            return $;
        }
    }

}
