// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScopedTokenState extends com.pulumi.resources.ResourceArgs {

    public static final ScopedTokenState Empty = new ScopedTokenState();

    /**
     * Returns the access token to authenticate to Artifactory.
     * 
     */
    @Import(name="accessToken")
    private @Nullable Output<String> accessToken;

    /**
     * @return Returns the access token to authenticate to Artifactory.
     * 
     */
    public Optional<Output<String>> accessToken() {
        return Optional.ofNullable(this.accessToken);
    }

    /**
     * A list of the other instances or services that should accept this token identified by their Service-IDs. Limited to total 255 characters. Default to &#39;*{@literal @}*&#39; if not set. Service ID must begin with valid JFrog service type. Options: jfrt, jfxr, jfpip, jfds, jfmc, jfac, jfevt, jfmd, jfcon, or *. For instructions to retrieve the Artifactory Service ID see this [documentation](https://jfrog.com/help/r/jfrog-rest-apis/get-service-id)
     * 
     */
    @Import(name="audiences")
    private @Nullable Output<List<String>> audiences;

    /**
     * @return A list of the other instances or services that should accept this token identified by their Service-IDs. Limited to total 255 characters. Default to &#39;*{@literal @}*&#39; if not set. Service ID must begin with valid JFrog service type. Options: jfrt, jfxr, jfpip, jfds, jfmc, jfac, jfevt, jfmd, jfcon, or *. For instructions to retrieve the Artifactory Service ID see this [documentation](https://jfrog.com/help/r/jfrog-rest-apis/get-service-id)
     * 
     */
    public Optional<Output<List<String>>> audiences() {
        return Optional.ofNullable(this.audiences);
    }

    /**
     * Free text token description. Useful for filtering and managing tokens. Limited to 1024 characters.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Free text token description. Useful for filtering and managing tokens. Limited to 1024 characters.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The amount of time, in seconds, it would take for the token to expire. An admin shall be able to set whether expiry is mandatory, what is the default expiry, and what is the maximum expiry allowed. Must be non-negative. Default value is based on configuration in &#39;access.config.yaml&#39;. See [API documentation](https://jfrog.com/help/r/jfrog-rest-apis/revoke-token-by-id) for details. Access Token would not be saved by Artifactory if this is less than the persistence threshold value (default to 10800 seconds) set in Access configuration. See [official documentation](https://jfrog.com/help/r/jfrog-platform-administration-documentation/persistency-threshold) for details.
     * 
     */
    @Import(name="expiresIn")
    private @Nullable Output<Integer> expiresIn;

    /**
     * @return The amount of time, in seconds, it would take for the token to expire. An admin shall be able to set whether expiry is mandatory, what is the default expiry, and what is the maximum expiry allowed. Must be non-negative. Default value is based on configuration in &#39;access.config.yaml&#39;. See [API documentation](https://jfrog.com/help/r/jfrog-rest-apis/revoke-token-by-id) for details. Access Token would not be saved by Artifactory if this is less than the persistence threshold value (default to 10800 seconds) set in Access configuration. See [official documentation](https://jfrog.com/help/r/jfrog-platform-administration-documentation/persistency-threshold) for details.
     * 
     */
    public Optional<Output<Integer>> expiresIn() {
        return Optional.ofNullable(this.expiresIn);
    }

    /**
     * Returns the token expiry.
     * 
     */
    @Import(name="expiry")
    private @Nullable Output<Integer> expiry;

    /**
     * @return Returns the token expiry.
     * 
     */
    public Optional<Output<Integer>> expiry() {
        return Optional.ofNullable(this.expiry);
    }

    /**
     * The grant type used to authenticate the request. In this case, the only value supported is `clientCredentials` which is also the default value if this parameter is not specified.
     * 
     */
    @Import(name="grantType")
    private @Nullable Output<String> grantType;

    /**
     * @return The grant type used to authenticate the request. In this case, the only value supported is `clientCredentials` which is also the default value if this parameter is not specified.
     * 
     */
    public Optional<Output<String>> grantType() {
        return Optional.ofNullable(this.grantType);
    }

    /**
     * Toggle to ignore warning message when token was missing or not created and stored by Artifactory. Default is `false`.
     * 
     */
    @Import(name="ignoreMissingTokenWarning")
    private @Nullable Output<Boolean> ignoreMissingTokenWarning;

    /**
     * @return Toggle to ignore warning message when token was missing or not created and stored by Artifactory. Default is `false`.
     * 
     */
    public Optional<Output<Boolean>> ignoreMissingTokenWarning() {
        return Optional.ofNullable(this.ignoreMissingTokenWarning);
    }

    /**
     * Also create a reference token which can be used like an API key. Default is `false`.
     * 
     */
    @Import(name="includeReferenceToken")
    private @Nullable Output<Boolean> includeReferenceToken;

    /**
     * @return Also create a reference token which can be used like an API key. Default is `false`.
     * 
     */
    public Optional<Output<Boolean>> includeReferenceToken() {
        return Optional.ofNullable(this.includeReferenceToken);
    }

    /**
     * Returns the token issued at date/time.
     * 
     */
    @Import(name="issuedAt")
    private @Nullable Output<Integer> issuedAt;

    /**
     * @return Returns the token issued at date/time.
     * 
     */
    public Optional<Output<Integer>> issuedAt() {
        return Optional.ofNullable(this.issuedAt);
    }

    /**
     * Returns the token issuer.
     * 
     */
    @Import(name="issuer")
    private @Nullable Output<String> issuer;

    /**
     * @return Returns the token issuer.
     * 
     */
    public Optional<Output<String>> issuer() {
        return Optional.ofNullable(this.issuer);
    }

    /**
     * The project for which this token is created. Enter the project name on which you want to apply this token.
     * 
     */
    @Import(name="projectKey")
    private @Nullable Output<String> projectKey;

    /**
     * @return The project for which this token is created. Enter the project name on which you want to apply this token.
     * 
     */
    public Optional<Output<String>> projectKey() {
        return Optional.ofNullable(this.projectKey);
    }

    /**
     * Reference Token (alias to Access Token).
     * 
     */
    @Import(name="referenceToken")
    private @Nullable Output<String> referenceToken;

    /**
     * @return Reference Token (alias to Access Token).
     * 
     */
    public Optional<Output<String>> referenceToken() {
        return Optional.ofNullable(this.referenceToken);
    }

    /**
     * Refresh token.
     * 
     */
    @Import(name="refreshToken")
    private @Nullable Output<String> refreshToken;

    /**
     * @return Refresh token.
     * 
     */
    public Optional<Output<String>> refreshToken() {
        return Optional.ofNullable(this.refreshToken);
    }

    /**
     * Is this token refreshable? Default is `false`.
     * 
     */
    @Import(name="refreshable")
    private @Nullable Output<Boolean> refreshable;

    /**
     * @return Is this token refreshable? Default is `false`.
     * 
     */
    public Optional<Output<Boolean>> refreshable() {
        return Optional.ofNullable(this.refreshable);
    }

    /**
     * The scope of access that the token provides. Access to the REST API is always provided by default. Administrators can set any scope, while non-admin users can only set the scope to a subset of the groups to which they belong. The supported scopes include:
     *   - `applied-permissions/user` - provides user access. If left at the default setting, the token will be created with the user-identity scope, which allows users to identify themselves in the Platform but does not grant any specific access permissions.
     *   - `applied-permissions/admin` - the scope assigned to admin users.
     *   - `applied-permissions/groups` - this scope assigns permissions to groups using the following format: `applied-permissions/groups:&lt;group-name&gt;[,&lt;group-name&gt;...]`
     *   - Resource Permissions: From Artifactory 7.38.x, resource permissions scoped tokens are also supported in the REST API. A permission can be represented as a scope token string in the following format: `&lt;resource-type&gt;:&lt;target&gt;[/&lt;sub-resource&gt;]:&lt;actions&gt;`
     *     - Where:
     *       - `&lt;resource-type&gt;` - one of the permission resource types, from a predefined closed list. Currently, the only resource type that is supported is the artifact resource type.
     *       - `&lt;target&gt;` - the target resource, can be exact name or a pattern
     *       - `&lt;sub-resource&gt;` - optional, the target sub-resource, can be exact name or a pattern
     *       - `&lt;actions&gt;` - comma-separated list of action acronyms. The actions allowed are `r`, `w`, `d`, `a`, `m`, `x`, `s`, or any combination of these actions. To allow all actions - use `*`
     *     - Examples:
     *       - `[&#34;applied-permissions/user&#34;, &#34;artifact:generic-local:r&#34;]`
     *       - `[&#34;applied-permissions/group&#34;, &#34;artifact:generic-local/path:*&#34;]`
     *       - `[&#34;applied-permissions/admin&#34;, &#34;system:metrics:r&#34;, &#34;artifact:generic-local:*&#34;]`
     *   - `applied-permissions/roles:project-key` - provides access to elements associated with the project based on the project role. For example, `applied-permissions/roles:project-type:developer,qa`.
     * 
     *   - System Permissions: Used to grant access to system resources. A permission can be represented as a scope token string in the following format: `system:(metrics|livelogs|identities|permissions):&lt;actions&gt;`
     *     - Where:
     *       - `metrics|livelogs|identities|permissions` - one of these options can be chosen      - `&lt;actions&gt;` - comma-separated list of action acronyms. The actions allowed are `r`, `w`, `d`, `a`, `m`, `x`, `s`, or any combination of these actions. To allow all actions - use `*`
     *     - Examples:
     *       - `[&#34;system:livelogs:r&#34;, &#34;system:metrics:r,w,d&#34;]`
     *         -&gt;The scope to assign to the token should be provided as a list of scope tokens, limited to 500 characters in total.
     *         From Artifactory 7.84.3, [project admins](https://jfrog.com/help/r/jfrog-platform-administration-documentation/access-token-creation-by-project-admins) can create access tokens that are tied to the projects in which they hold administrative privileges.
     * 
     */
    @Import(name="scopes")
    private @Nullable Output<List<String>> scopes;

    /**
     * @return The scope of access that the token provides. Access to the REST API is always provided by default. Administrators can set any scope, while non-admin users can only set the scope to a subset of the groups to which they belong. The supported scopes include:
     *   - `applied-permissions/user` - provides user access. If left at the default setting, the token will be created with the user-identity scope, which allows users to identify themselves in the Platform but does not grant any specific access permissions.
     *   - `applied-permissions/admin` - the scope assigned to admin users.
     *   - `applied-permissions/groups` - this scope assigns permissions to groups using the following format: `applied-permissions/groups:&lt;group-name&gt;[,&lt;group-name&gt;...]`
     *   - Resource Permissions: From Artifactory 7.38.x, resource permissions scoped tokens are also supported in the REST API. A permission can be represented as a scope token string in the following format: `&lt;resource-type&gt;:&lt;target&gt;[/&lt;sub-resource&gt;]:&lt;actions&gt;`
     *     - Where:
     *       - `&lt;resource-type&gt;` - one of the permission resource types, from a predefined closed list. Currently, the only resource type that is supported is the artifact resource type.
     *       - `&lt;target&gt;` - the target resource, can be exact name or a pattern
     *       - `&lt;sub-resource&gt;` - optional, the target sub-resource, can be exact name or a pattern
     *       - `&lt;actions&gt;` - comma-separated list of action acronyms. The actions allowed are `r`, `w`, `d`, `a`, `m`, `x`, `s`, or any combination of these actions. To allow all actions - use `*`
     *     - Examples:
     *       - `[&#34;applied-permissions/user&#34;, &#34;artifact:generic-local:r&#34;]`
     *       - `[&#34;applied-permissions/group&#34;, &#34;artifact:generic-local/path:*&#34;]`
     *       - `[&#34;applied-permissions/admin&#34;, &#34;system:metrics:r&#34;, &#34;artifact:generic-local:*&#34;]`
     *   - `applied-permissions/roles:project-key` - provides access to elements associated with the project based on the project role. For example, `applied-permissions/roles:project-type:developer,qa`.
     * 
     *   - System Permissions: Used to grant access to system resources. A permission can be represented as a scope token string in the following format: `system:(metrics|livelogs|identities|permissions):&lt;actions&gt;`
     *     - Where:
     *       - `metrics|livelogs|identities|permissions` - one of these options can be chosen      - `&lt;actions&gt;` - comma-separated list of action acronyms. The actions allowed are `r`, `w`, `d`, `a`, `m`, `x`, `s`, or any combination of these actions. To allow all actions - use `*`
     *     - Examples:
     *       - `[&#34;system:livelogs:r&#34;, &#34;system:metrics:r,w,d&#34;]`
     *         -&gt;The scope to assign to the token should be provided as a list of scope tokens, limited to 500 characters in total.
     *         From Artifactory 7.84.3, [project admins](https://jfrog.com/help/r/jfrog-platform-administration-documentation/access-token-creation-by-project-admins) can create access tokens that are tied to the projects in which they hold administrative privileges.
     * 
     */
    public Optional<Output<List<String>>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * Returns the token type.
     * 
     */
    @Import(name="subject")
    private @Nullable Output<String> subject;

    /**
     * @return Returns the token type.
     * 
     */
    public Optional<Output<String>> subject() {
        return Optional.ofNullable(this.subject);
    }

    /**
     * Returns the token type.
     * 
     */
    @Import(name="tokenType")
    private @Nullable Output<String> tokenType;

    /**
     * @return Returns the token type.
     * 
     */
    public Optional<Output<String>> tokenType() {
        return Optional.ofNullable(this.tokenType);
    }

    /**
     * The user name for which this token is created. The username is based on the authenticated user - either from the user of the authenticated token or based on the username (if basic auth was used). The username is then used to set the subject of the token: &lt;service-id&gt;/users/&lt;username&gt;. Limited to 255 characters.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return The user name for which this token is created. The username is based on the authenticated user - either from the user of the authenticated token or based on the username (if basic auth was used). The username is then used to set the subject of the token: &lt;service-id&gt;/users/&lt;username&gt;. Limited to 255 characters.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private ScopedTokenState() {}

    private ScopedTokenState(ScopedTokenState $) {
        this.accessToken = $.accessToken;
        this.audiences = $.audiences;
        this.description = $.description;
        this.expiresIn = $.expiresIn;
        this.expiry = $.expiry;
        this.grantType = $.grantType;
        this.ignoreMissingTokenWarning = $.ignoreMissingTokenWarning;
        this.includeReferenceToken = $.includeReferenceToken;
        this.issuedAt = $.issuedAt;
        this.issuer = $.issuer;
        this.projectKey = $.projectKey;
        this.referenceToken = $.referenceToken;
        this.refreshToken = $.refreshToken;
        this.refreshable = $.refreshable;
        this.scopes = $.scopes;
        this.subject = $.subject;
        this.tokenType = $.tokenType;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScopedTokenState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScopedTokenState $;

        public Builder() {
            $ = new ScopedTokenState();
        }

        public Builder(ScopedTokenState defaults) {
            $ = new ScopedTokenState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessToken Returns the access token to authenticate to Artifactory.
         * 
         * @return builder
         * 
         */
        public Builder accessToken(@Nullable Output<String> accessToken) {
            $.accessToken = accessToken;
            return this;
        }

        /**
         * @param accessToken Returns the access token to authenticate to Artifactory.
         * 
         * @return builder
         * 
         */
        public Builder accessToken(String accessToken) {
            return accessToken(Output.of(accessToken));
        }

        /**
         * @param audiences A list of the other instances or services that should accept this token identified by their Service-IDs. Limited to total 255 characters. Default to &#39;*{@literal @}*&#39; if not set. Service ID must begin with valid JFrog service type. Options: jfrt, jfxr, jfpip, jfds, jfmc, jfac, jfevt, jfmd, jfcon, or *. For instructions to retrieve the Artifactory Service ID see this [documentation](https://jfrog.com/help/r/jfrog-rest-apis/get-service-id)
         * 
         * @return builder
         * 
         */
        public Builder audiences(@Nullable Output<List<String>> audiences) {
            $.audiences = audiences;
            return this;
        }

        /**
         * @param audiences A list of the other instances or services that should accept this token identified by their Service-IDs. Limited to total 255 characters. Default to &#39;*{@literal @}*&#39; if not set. Service ID must begin with valid JFrog service type. Options: jfrt, jfxr, jfpip, jfds, jfmc, jfac, jfevt, jfmd, jfcon, or *. For instructions to retrieve the Artifactory Service ID see this [documentation](https://jfrog.com/help/r/jfrog-rest-apis/get-service-id)
         * 
         * @return builder
         * 
         */
        public Builder audiences(List<String> audiences) {
            return audiences(Output.of(audiences));
        }

        /**
         * @param audiences A list of the other instances or services that should accept this token identified by their Service-IDs. Limited to total 255 characters. Default to &#39;*{@literal @}*&#39; if not set. Service ID must begin with valid JFrog service type. Options: jfrt, jfxr, jfpip, jfds, jfmc, jfac, jfevt, jfmd, jfcon, or *. For instructions to retrieve the Artifactory Service ID see this [documentation](https://jfrog.com/help/r/jfrog-rest-apis/get-service-id)
         * 
         * @return builder
         * 
         */
        public Builder audiences(String... audiences) {
            return audiences(List.of(audiences));
        }

        /**
         * @param description Free text token description. Useful for filtering and managing tokens. Limited to 1024 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Free text token description. Useful for filtering and managing tokens. Limited to 1024 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param expiresIn The amount of time, in seconds, it would take for the token to expire. An admin shall be able to set whether expiry is mandatory, what is the default expiry, and what is the maximum expiry allowed. Must be non-negative. Default value is based on configuration in &#39;access.config.yaml&#39;. See [API documentation](https://jfrog.com/help/r/jfrog-rest-apis/revoke-token-by-id) for details. Access Token would not be saved by Artifactory if this is less than the persistence threshold value (default to 10800 seconds) set in Access configuration. See [official documentation](https://jfrog.com/help/r/jfrog-platform-administration-documentation/persistency-threshold) for details.
         * 
         * @return builder
         * 
         */
        public Builder expiresIn(@Nullable Output<Integer> expiresIn) {
            $.expiresIn = expiresIn;
            return this;
        }

        /**
         * @param expiresIn The amount of time, in seconds, it would take for the token to expire. An admin shall be able to set whether expiry is mandatory, what is the default expiry, and what is the maximum expiry allowed. Must be non-negative. Default value is based on configuration in &#39;access.config.yaml&#39;. See [API documentation](https://jfrog.com/help/r/jfrog-rest-apis/revoke-token-by-id) for details. Access Token would not be saved by Artifactory if this is less than the persistence threshold value (default to 10800 seconds) set in Access configuration. See [official documentation](https://jfrog.com/help/r/jfrog-platform-administration-documentation/persistency-threshold) for details.
         * 
         * @return builder
         * 
         */
        public Builder expiresIn(Integer expiresIn) {
            return expiresIn(Output.of(expiresIn));
        }

        /**
         * @param expiry Returns the token expiry.
         * 
         * @return builder
         * 
         */
        public Builder expiry(@Nullable Output<Integer> expiry) {
            $.expiry = expiry;
            return this;
        }

        /**
         * @param expiry Returns the token expiry.
         * 
         * @return builder
         * 
         */
        public Builder expiry(Integer expiry) {
            return expiry(Output.of(expiry));
        }

        /**
         * @param grantType The grant type used to authenticate the request. In this case, the only value supported is `clientCredentials` which is also the default value if this parameter is not specified.
         * 
         * @return builder
         * 
         */
        public Builder grantType(@Nullable Output<String> grantType) {
            $.grantType = grantType;
            return this;
        }

        /**
         * @param grantType The grant type used to authenticate the request. In this case, the only value supported is `clientCredentials` which is also the default value if this parameter is not specified.
         * 
         * @return builder
         * 
         */
        public Builder grantType(String grantType) {
            return grantType(Output.of(grantType));
        }

        /**
         * @param ignoreMissingTokenWarning Toggle to ignore warning message when token was missing or not created and stored by Artifactory. Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder ignoreMissingTokenWarning(@Nullable Output<Boolean> ignoreMissingTokenWarning) {
            $.ignoreMissingTokenWarning = ignoreMissingTokenWarning;
            return this;
        }

        /**
         * @param ignoreMissingTokenWarning Toggle to ignore warning message when token was missing or not created and stored by Artifactory. Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder ignoreMissingTokenWarning(Boolean ignoreMissingTokenWarning) {
            return ignoreMissingTokenWarning(Output.of(ignoreMissingTokenWarning));
        }

        /**
         * @param includeReferenceToken Also create a reference token which can be used like an API key. Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder includeReferenceToken(@Nullable Output<Boolean> includeReferenceToken) {
            $.includeReferenceToken = includeReferenceToken;
            return this;
        }

        /**
         * @param includeReferenceToken Also create a reference token which can be used like an API key. Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder includeReferenceToken(Boolean includeReferenceToken) {
            return includeReferenceToken(Output.of(includeReferenceToken));
        }

        /**
         * @param issuedAt Returns the token issued at date/time.
         * 
         * @return builder
         * 
         */
        public Builder issuedAt(@Nullable Output<Integer> issuedAt) {
            $.issuedAt = issuedAt;
            return this;
        }

        /**
         * @param issuedAt Returns the token issued at date/time.
         * 
         * @return builder
         * 
         */
        public Builder issuedAt(Integer issuedAt) {
            return issuedAt(Output.of(issuedAt));
        }

        /**
         * @param issuer Returns the token issuer.
         * 
         * @return builder
         * 
         */
        public Builder issuer(@Nullable Output<String> issuer) {
            $.issuer = issuer;
            return this;
        }

        /**
         * @param issuer Returns the token issuer.
         * 
         * @return builder
         * 
         */
        public Builder issuer(String issuer) {
            return issuer(Output.of(issuer));
        }

        /**
         * @param projectKey The project for which this token is created. Enter the project name on which you want to apply this token.
         * 
         * @return builder
         * 
         */
        public Builder projectKey(@Nullable Output<String> projectKey) {
            $.projectKey = projectKey;
            return this;
        }

        /**
         * @param projectKey The project for which this token is created. Enter the project name on which you want to apply this token.
         * 
         * @return builder
         * 
         */
        public Builder projectKey(String projectKey) {
            return projectKey(Output.of(projectKey));
        }

        /**
         * @param referenceToken Reference Token (alias to Access Token).
         * 
         * @return builder
         * 
         */
        public Builder referenceToken(@Nullable Output<String> referenceToken) {
            $.referenceToken = referenceToken;
            return this;
        }

        /**
         * @param referenceToken Reference Token (alias to Access Token).
         * 
         * @return builder
         * 
         */
        public Builder referenceToken(String referenceToken) {
            return referenceToken(Output.of(referenceToken));
        }

        /**
         * @param refreshToken Refresh token.
         * 
         * @return builder
         * 
         */
        public Builder refreshToken(@Nullable Output<String> refreshToken) {
            $.refreshToken = refreshToken;
            return this;
        }

        /**
         * @param refreshToken Refresh token.
         * 
         * @return builder
         * 
         */
        public Builder refreshToken(String refreshToken) {
            return refreshToken(Output.of(refreshToken));
        }

        /**
         * @param refreshable Is this token refreshable? Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder refreshable(@Nullable Output<Boolean> refreshable) {
            $.refreshable = refreshable;
            return this;
        }

        /**
         * @param refreshable Is this token refreshable? Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder refreshable(Boolean refreshable) {
            return refreshable(Output.of(refreshable));
        }

        /**
         * @param scopes The scope of access that the token provides. Access to the REST API is always provided by default. Administrators can set any scope, while non-admin users can only set the scope to a subset of the groups to which they belong. The supported scopes include:
         *   - `applied-permissions/user` - provides user access. If left at the default setting, the token will be created with the user-identity scope, which allows users to identify themselves in the Platform but does not grant any specific access permissions.
         *   - `applied-permissions/admin` - the scope assigned to admin users.
         *   - `applied-permissions/groups` - this scope assigns permissions to groups using the following format: `applied-permissions/groups:&lt;group-name&gt;[,&lt;group-name&gt;...]`
         *   - Resource Permissions: From Artifactory 7.38.x, resource permissions scoped tokens are also supported in the REST API. A permission can be represented as a scope token string in the following format: `&lt;resource-type&gt;:&lt;target&gt;[/&lt;sub-resource&gt;]:&lt;actions&gt;`
         *     - Where:
         *       - `&lt;resource-type&gt;` - one of the permission resource types, from a predefined closed list. Currently, the only resource type that is supported is the artifact resource type.
         *       - `&lt;target&gt;` - the target resource, can be exact name or a pattern
         *       - `&lt;sub-resource&gt;` - optional, the target sub-resource, can be exact name or a pattern
         *       - `&lt;actions&gt;` - comma-separated list of action acronyms. The actions allowed are `r`, `w`, `d`, `a`, `m`, `x`, `s`, or any combination of these actions. To allow all actions - use `*`
         *     - Examples:
         *       - `[&#34;applied-permissions/user&#34;, &#34;artifact:generic-local:r&#34;]`
         *       - `[&#34;applied-permissions/group&#34;, &#34;artifact:generic-local/path:*&#34;]`
         *       - `[&#34;applied-permissions/admin&#34;, &#34;system:metrics:r&#34;, &#34;artifact:generic-local:*&#34;]`
         *   - `applied-permissions/roles:project-key` - provides access to elements associated with the project based on the project role. For example, `applied-permissions/roles:project-type:developer,qa`.
         * 
         *   - System Permissions: Used to grant access to system resources. A permission can be represented as a scope token string in the following format: `system:(metrics|livelogs|identities|permissions):&lt;actions&gt;`
         *     - Where:
         *       - `metrics|livelogs|identities|permissions` - one of these options can be chosen      - `&lt;actions&gt;` - comma-separated list of action acronyms. The actions allowed are `r`, `w`, `d`, `a`, `m`, `x`, `s`, or any combination of these actions. To allow all actions - use `*`
         *     - Examples:
         *       - `[&#34;system:livelogs:r&#34;, &#34;system:metrics:r,w,d&#34;]`
         *         -&gt;The scope to assign to the token should be provided as a list of scope tokens, limited to 500 characters in total.
         *         From Artifactory 7.84.3, [project admins](https://jfrog.com/help/r/jfrog-platform-administration-documentation/access-token-creation-by-project-admins) can create access tokens that are tied to the projects in which they hold administrative privileges.
         * 
         * @return builder
         * 
         */
        public Builder scopes(@Nullable Output<List<String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes The scope of access that the token provides. Access to the REST API is always provided by default. Administrators can set any scope, while non-admin users can only set the scope to a subset of the groups to which they belong. The supported scopes include:
         *   - `applied-permissions/user` - provides user access. If left at the default setting, the token will be created with the user-identity scope, which allows users to identify themselves in the Platform but does not grant any specific access permissions.
         *   - `applied-permissions/admin` - the scope assigned to admin users.
         *   - `applied-permissions/groups` - this scope assigns permissions to groups using the following format: `applied-permissions/groups:&lt;group-name&gt;[,&lt;group-name&gt;...]`
         *   - Resource Permissions: From Artifactory 7.38.x, resource permissions scoped tokens are also supported in the REST API. A permission can be represented as a scope token string in the following format: `&lt;resource-type&gt;:&lt;target&gt;[/&lt;sub-resource&gt;]:&lt;actions&gt;`
         *     - Where:
         *       - `&lt;resource-type&gt;` - one of the permission resource types, from a predefined closed list. Currently, the only resource type that is supported is the artifact resource type.
         *       - `&lt;target&gt;` - the target resource, can be exact name or a pattern
         *       - `&lt;sub-resource&gt;` - optional, the target sub-resource, can be exact name or a pattern
         *       - `&lt;actions&gt;` - comma-separated list of action acronyms. The actions allowed are `r`, `w`, `d`, `a`, `m`, `x`, `s`, or any combination of these actions. To allow all actions - use `*`
         *     - Examples:
         *       - `[&#34;applied-permissions/user&#34;, &#34;artifact:generic-local:r&#34;]`
         *       - `[&#34;applied-permissions/group&#34;, &#34;artifact:generic-local/path:*&#34;]`
         *       - `[&#34;applied-permissions/admin&#34;, &#34;system:metrics:r&#34;, &#34;artifact:generic-local:*&#34;]`
         *   - `applied-permissions/roles:project-key` - provides access to elements associated with the project based on the project role. For example, `applied-permissions/roles:project-type:developer,qa`.
         * 
         *   - System Permissions: Used to grant access to system resources. A permission can be represented as a scope token string in the following format: `system:(metrics|livelogs|identities|permissions):&lt;actions&gt;`
         *     - Where:
         *       - `metrics|livelogs|identities|permissions` - one of these options can be chosen      - `&lt;actions&gt;` - comma-separated list of action acronyms. The actions allowed are `r`, `w`, `d`, `a`, `m`, `x`, `s`, or any combination of these actions. To allow all actions - use `*`
         *     - Examples:
         *       - `[&#34;system:livelogs:r&#34;, &#34;system:metrics:r,w,d&#34;]`
         *         -&gt;The scope to assign to the token should be provided as a list of scope tokens, limited to 500 characters in total.
         *         From Artifactory 7.84.3, [project admins](https://jfrog.com/help/r/jfrog-platform-administration-documentation/access-token-creation-by-project-admins) can create access tokens that are tied to the projects in which they hold administrative privileges.
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<String> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes The scope of access that the token provides. Access to the REST API is always provided by default. Administrators can set any scope, while non-admin users can only set the scope to a subset of the groups to which they belong. The supported scopes include:
         *   - `applied-permissions/user` - provides user access. If left at the default setting, the token will be created with the user-identity scope, which allows users to identify themselves in the Platform but does not grant any specific access permissions.
         *   - `applied-permissions/admin` - the scope assigned to admin users.
         *   - `applied-permissions/groups` - this scope assigns permissions to groups using the following format: `applied-permissions/groups:&lt;group-name&gt;[,&lt;group-name&gt;...]`
         *   - Resource Permissions: From Artifactory 7.38.x, resource permissions scoped tokens are also supported in the REST API. A permission can be represented as a scope token string in the following format: `&lt;resource-type&gt;:&lt;target&gt;[/&lt;sub-resource&gt;]:&lt;actions&gt;`
         *     - Where:
         *       - `&lt;resource-type&gt;` - one of the permission resource types, from a predefined closed list. Currently, the only resource type that is supported is the artifact resource type.
         *       - `&lt;target&gt;` - the target resource, can be exact name or a pattern
         *       - `&lt;sub-resource&gt;` - optional, the target sub-resource, can be exact name or a pattern
         *       - `&lt;actions&gt;` - comma-separated list of action acronyms. The actions allowed are `r`, `w`, `d`, `a`, `m`, `x`, `s`, or any combination of these actions. To allow all actions - use `*`
         *     - Examples:
         *       - `[&#34;applied-permissions/user&#34;, &#34;artifact:generic-local:r&#34;]`
         *       - `[&#34;applied-permissions/group&#34;, &#34;artifact:generic-local/path:*&#34;]`
         *       - `[&#34;applied-permissions/admin&#34;, &#34;system:metrics:r&#34;, &#34;artifact:generic-local:*&#34;]`
         *   - `applied-permissions/roles:project-key` - provides access to elements associated with the project based on the project role. For example, `applied-permissions/roles:project-type:developer,qa`.
         * 
         *   - System Permissions: Used to grant access to system resources. A permission can be represented as a scope token string in the following format: `system:(metrics|livelogs|identities|permissions):&lt;actions&gt;`
         *     - Where:
         *       - `metrics|livelogs|identities|permissions` - one of these options can be chosen      - `&lt;actions&gt;` - comma-separated list of action acronyms. The actions allowed are `r`, `w`, `d`, `a`, `m`, `x`, `s`, or any combination of these actions. To allow all actions - use `*`
         *     - Examples:
         *       - `[&#34;system:livelogs:r&#34;, &#34;system:metrics:r,w,d&#34;]`
         *         -&gt;The scope to assign to the token should be provided as a list of scope tokens, limited to 500 characters in total.
         *         From Artifactory 7.84.3, [project admins](https://jfrog.com/help/r/jfrog-platform-administration-documentation/access-token-creation-by-project-admins) can create access tokens that are tied to the projects in which they hold administrative privileges.
         * 
         * @return builder
         * 
         */
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        /**
         * @param subject Returns the token type.
         * 
         * @return builder
         * 
         */
        public Builder subject(@Nullable Output<String> subject) {
            $.subject = subject;
            return this;
        }

        /**
         * @param subject Returns the token type.
         * 
         * @return builder
         * 
         */
        public Builder subject(String subject) {
            return subject(Output.of(subject));
        }

        /**
         * @param tokenType Returns the token type.
         * 
         * @return builder
         * 
         */
        public Builder tokenType(@Nullable Output<String> tokenType) {
            $.tokenType = tokenType;
            return this;
        }

        /**
         * @param tokenType Returns the token type.
         * 
         * @return builder
         * 
         */
        public Builder tokenType(String tokenType) {
            return tokenType(Output.of(tokenType));
        }

        /**
         * @param username The user name for which this token is created. The username is based on the authenticated user - either from the user of the authenticated token or based on the username (if basic auth was used). The username is then used to set the subject of the token: &lt;service-id&gt;/users/&lt;username&gt;. Limited to 255 characters.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The user name for which this token is created. The username is based on the authenticated user - either from the user of the authenticated token or based on the username (if basic auth was used). The username is then used to set the subject of the token: &lt;service-id&gt;/users/&lt;username&gt;. Limited to 255 characters.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ScopedTokenState build() {
            return $;
        }
    }

}
