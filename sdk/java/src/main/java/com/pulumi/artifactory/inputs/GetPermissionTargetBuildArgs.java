// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory.inputs;

import com.pulumi.artifactory.inputs.GetPermissionTargetBuildActionsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPermissionTargetBuildArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetPermissionTargetBuildArgs Empty = new GetPermissionTargetBuildArgs();

    @Import(name="actions")
    private @Nullable Output<GetPermissionTargetBuildActionsArgs> actions;

    public Optional<Output<GetPermissionTargetBuildActionsArgs>> actions() {
        return Optional.ofNullable(this.actions);
    }

    @Import(name="excludesPatterns")
    private @Nullable Output<List<String>> excludesPatterns;

    public Optional<Output<List<String>>> excludesPatterns() {
        return Optional.ofNullable(this.excludesPatterns);
    }

    @Import(name="includesPatterns")
    private @Nullable Output<List<String>> includesPatterns;

    public Optional<Output<List<String>>> includesPatterns() {
        return Optional.ofNullable(this.includesPatterns);
    }

    @Import(name="repositories", required=true)
    private Output<List<String>> repositories;

    public Output<List<String>> repositories() {
        return this.repositories;
    }

    private GetPermissionTargetBuildArgs() {}

    private GetPermissionTargetBuildArgs(GetPermissionTargetBuildArgs $) {
        this.actions = $.actions;
        this.excludesPatterns = $.excludesPatterns;
        this.includesPatterns = $.includesPatterns;
        this.repositories = $.repositories;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPermissionTargetBuildArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPermissionTargetBuildArgs $;

        public Builder() {
            $ = new GetPermissionTargetBuildArgs();
        }

        public Builder(GetPermissionTargetBuildArgs defaults) {
            $ = new GetPermissionTargetBuildArgs(Objects.requireNonNull(defaults));
        }

        public Builder actions(@Nullable Output<GetPermissionTargetBuildActionsArgs> actions) {
            $.actions = actions;
            return this;
        }

        public Builder actions(GetPermissionTargetBuildActionsArgs actions) {
            return actions(Output.of(actions));
        }

        public Builder excludesPatterns(@Nullable Output<List<String>> excludesPatterns) {
            $.excludesPatterns = excludesPatterns;
            return this;
        }

        public Builder excludesPatterns(List<String> excludesPatterns) {
            return excludesPatterns(Output.of(excludesPatterns));
        }

        public Builder excludesPatterns(String... excludesPatterns) {
            return excludesPatterns(List.of(excludesPatterns));
        }

        public Builder includesPatterns(@Nullable Output<List<String>> includesPatterns) {
            $.includesPatterns = includesPatterns;
            return this;
        }

        public Builder includesPatterns(List<String> includesPatterns) {
            return includesPatterns(Output.of(includesPatterns));
        }

        public Builder includesPatterns(String... includesPatterns) {
            return includesPatterns(List.of(includesPatterns));
        }

        public Builder repositories(Output<List<String>> repositories) {
            $.repositories = repositories;
            return this;
        }

        public Builder repositories(List<String> repositories) {
            return repositories(Output.of(repositories));
        }

        public Builder repositories(String... repositories) {
            return repositories(List.of(repositories));
        }

        public GetPermissionTargetBuildArgs build() {
            $.repositories = Objects.requireNonNull($.repositories, "expected parameter 'repositories' to be non-null");
            return $;
        }
    }

}
