// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory.inputs;

import com.pulumi.artifactory.inputs.LocalRepositoryMultiReplicationReplicationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LocalRepositoryMultiReplicationState extends com.pulumi.resources.ResourceArgs {

    public static final LocalRepositoryMultiReplicationState Empty = new LocalRepositoryMultiReplicationState();

    /**
     * Cron expression to control the operation frequency.
     * 
     */
    @Import(name="cronExp")
    private @Nullable Output<String> cronExp;

    /**
     * @return Cron expression to control the operation frequency.
     * 
     */
    public Optional<Output<String>> cronExp() {
        return Optional.ofNullable(this.cronExp);
    }

    /**
     * When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on
     * artifact, e.g. add, deleted or property change. Default value is `false`.
     * 
     */
    @Import(name="enableEventReplication")
    private @Nullable Output<Boolean> enableEventReplication;

    /**
     * @return When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on
     * artifact, e.g. add, deleted or property change. Default value is `false`.
     * 
     */
    public Optional<Output<Boolean>> enableEventReplication() {
        return Optional.ofNullable(this.enableEventReplication);
    }

    @Import(name="replications")
    private @Nullable Output<List<LocalRepositoryMultiReplicationReplicationArgs>> replications;

    public Optional<Output<List<LocalRepositoryMultiReplicationReplicationArgs>>> replications() {
        return Optional.ofNullable(this.replications);
    }

    /**
     * Repository name.
     * 
     */
    @Import(name="repoKey")
    private @Nullable Output<String> repoKey;

    /**
     * @return Repository name.
     * 
     */
    public Optional<Output<String>> repoKey() {
        return Optional.ofNullable(this.repoKey);
    }

    private LocalRepositoryMultiReplicationState() {}

    private LocalRepositoryMultiReplicationState(LocalRepositoryMultiReplicationState $) {
        this.cronExp = $.cronExp;
        this.enableEventReplication = $.enableEventReplication;
        this.replications = $.replications;
        this.repoKey = $.repoKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LocalRepositoryMultiReplicationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LocalRepositoryMultiReplicationState $;

        public Builder() {
            $ = new LocalRepositoryMultiReplicationState();
        }

        public Builder(LocalRepositoryMultiReplicationState defaults) {
            $ = new LocalRepositoryMultiReplicationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param cronExp Cron expression to control the operation frequency.
         * 
         * @return builder
         * 
         */
        public Builder cronExp(@Nullable Output<String> cronExp) {
            $.cronExp = cronExp;
            return this;
        }

        /**
         * @param cronExp Cron expression to control the operation frequency.
         * 
         * @return builder
         * 
         */
        public Builder cronExp(String cronExp) {
            return cronExp(Output.of(cronExp));
        }

        /**
         * @param enableEventReplication When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on
         * artifact, e.g. add, deleted or property change. Default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder enableEventReplication(@Nullable Output<Boolean> enableEventReplication) {
            $.enableEventReplication = enableEventReplication;
            return this;
        }

        /**
         * @param enableEventReplication When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on
         * artifact, e.g. add, deleted or property change. Default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder enableEventReplication(Boolean enableEventReplication) {
            return enableEventReplication(Output.of(enableEventReplication));
        }

        public Builder replications(@Nullable Output<List<LocalRepositoryMultiReplicationReplicationArgs>> replications) {
            $.replications = replications;
            return this;
        }

        public Builder replications(List<LocalRepositoryMultiReplicationReplicationArgs> replications) {
            return replications(Output.of(replications));
        }

        public Builder replications(LocalRepositoryMultiReplicationReplicationArgs... replications) {
            return replications(List.of(replications));
        }

        /**
         * @param repoKey Repository name.
         * 
         * @return builder
         * 
         */
        public Builder repoKey(@Nullable Output<String> repoKey) {
            $.repoKey = repoKey;
            return this;
        }

        /**
         * @param repoKey Repository name.
         * 
         * @return builder
         * 
         */
        public Builder repoKey(String repoKey) {
            return repoKey(Output.of(repoKey));
        }

        public LocalRepositoryMultiReplicationState build() {
            return $;
        }
    }

}
