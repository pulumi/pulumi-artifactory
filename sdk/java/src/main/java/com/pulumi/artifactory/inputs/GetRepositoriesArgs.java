// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRepositoriesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRepositoriesArgs Empty = new GetRepositoriesArgs();

    @Import(name="packageType")
    private @Nullable Output<String> packageType;

    public Optional<Output<String>> packageType() {
        return Optional.ofNullable(this.packageType);
    }

    /**
     * Filter for repositories assigned to a specific project.
     * 
     */
    @Import(name="projectKey")
    private @Nullable Output<String> projectKey;

    /**
     * @return Filter for repositories assigned to a specific project.
     * 
     */
    public Optional<Output<String>> projectKey() {
        return Optional.ofNullable(this.projectKey);
    }

    /**
     * Filter for repositories of a specific type. Allowed values are: local, remote, virtual, federated, distribution
     * 
     */
    @Import(name="repositoryType")
    private @Nullable Output<String> repositoryType;

    /**
     * @return Filter for repositories of a specific type. Allowed values are: local, remote, virtual, federated, distribution
     * 
     */
    public Optional<Output<String>> repositoryType() {
        return Optional.ofNullable(this.repositoryType);
    }

    private GetRepositoriesArgs() {}

    private GetRepositoriesArgs(GetRepositoriesArgs $) {
        this.packageType = $.packageType;
        this.projectKey = $.projectKey;
        this.repositoryType = $.repositoryType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRepositoriesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRepositoriesArgs $;

        public Builder() {
            $ = new GetRepositoriesArgs();
        }

        public Builder(GetRepositoriesArgs defaults) {
            $ = new GetRepositoriesArgs(Objects.requireNonNull(defaults));
        }

        public Builder packageType(@Nullable Output<String> packageType) {
            $.packageType = packageType;
            return this;
        }

        public Builder packageType(String packageType) {
            return packageType(Output.of(packageType));
        }

        /**
         * @param projectKey Filter for repositories assigned to a specific project.
         * 
         * @return builder
         * 
         */
        public Builder projectKey(@Nullable Output<String> projectKey) {
            $.projectKey = projectKey;
            return this;
        }

        /**
         * @param projectKey Filter for repositories assigned to a specific project.
         * 
         * @return builder
         * 
         */
        public Builder projectKey(String projectKey) {
            return projectKey(Output.of(projectKey));
        }

        /**
         * @param repositoryType Filter for repositories of a specific type. Allowed values are: local, remote, virtual, federated, distribution
         * 
         * @return builder
         * 
         */
        public Builder repositoryType(@Nullable Output<String> repositoryType) {
            $.repositoryType = repositoryType;
            return this;
        }

        /**
         * @param repositoryType Filter for repositories of a specific type. Allowed values are: local, remote, virtual, federated, distribution
         * 
         * @return builder
         * 
         */
        public Builder repositoryType(String repositoryType) {
            return repositoryType(Output.of(repositoryType));
        }

        public GetRepositoriesArgs build() {
            return $;
        }
    }

}
