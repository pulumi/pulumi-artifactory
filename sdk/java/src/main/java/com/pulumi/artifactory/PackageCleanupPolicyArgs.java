// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory;

import com.pulumi.artifactory.inputs.PackageCleanupPolicySearchCriteriaArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PackageCleanupPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final PackageCleanupPolicyArgs Empty = new PackageCleanupPolicyArgs();

    /**
     * The Cron expression that sets the schedule of policy execution. For example, `0 0 2 * * ?` executes the policy every day at 02:00 AM. The minimum recurrent time for policy execution is 6 hours.
     * 
     */
    @Import(name="cronExpression")
    private @Nullable Output<String> cronExpression;

    /**
     * @return The Cron expression that sets the schedule of policy execution. For example, `0 0 2 * * ?` executes the policy every day at 02:00 AM. The minimum recurrent time for policy execution is 6 hours.
     * 
     */
    public Optional<Output<String>> cronExpression() {
        return Optional.ofNullable(this.cronExpression);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Enable and select the maximum duration for policy execution. Note: using this setting can cause the policy to stop before completion.
     * 
     */
    @Import(name="durationInMinutes")
    private @Nullable Output<Integer> durationInMinutes;

    /**
     * @return Enable and select the maximum duration for policy execution. Note: using this setting can cause the policy to stop before completion.
     * 
     */
    public Optional<Output<Integer>> durationInMinutes() {
        return Optional.ofNullable(this.durationInMinutes);
    }

    /**
     * Enables or disabled the package cleanup policy. This allows the user to run the policy manually. If a policy has a valid cron expression, then it will be scheduled for execution based on it. If a policy is disabled, its future executions will be unscheduled. Defaults to `true`
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Enables or disabled the package cleanup policy. This allows the user to run the policy manually. If a policy has a valid cron expression, then it will be scheduled for execution based on it. If a policy is disabled, its future executions will be unscheduled. Defaults to `true`
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Policy key. It has to be unique. It should not be used for other policies and configuration entities like archive policies, key pairs, repo layouts, property sets, backups, proxies, reverse proxies etc. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
     * 
     */
    @Import(name="key", required=true)
    private Output<String> key;

    /**
     * @return Policy key. It has to be unique. It should not be used for other policies and configuration entities like archive policies, key pairs, repo layouts, property sets, backups, proxies, reverse proxies etc. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
     * 
     */
    public Output<String> key() {
        return this.key;
    }

    /**
     * This attribute is used only for project-level cleanup policies, it is not used for global-level policies.
     * 
     */
    @Import(name="projectKey")
    private @Nullable Output<String> projectKey;

    /**
     * @return This attribute is used only for project-level cleanup policies, it is not used for global-level policies.
     * 
     */
    public Optional<Output<String>> projectKey() {
        return Optional.ofNullable(this.projectKey);
    }

    @Import(name="searchCriteria", required=true)
    private Output<PackageCleanupPolicySearchCriteriaArgs> searchCriteria;

    public Output<PackageCleanupPolicySearchCriteriaArgs> searchCriteria() {
        return this.searchCriteria;
    }

    /**
     * Enabling this setting results in packages being permanently deleted from Artifactory after the cleanup policy is executed instead of going to the Trash Can repository. Defaults to `false`.
     * 
     */
    @Import(name="skipTrashcan")
    private @Nullable Output<Boolean> skipTrashcan;

    /**
     * @return Enabling this setting results in packages being permanently deleted from Artifactory after the cleanup policy is executed instead of going to the Trash Can repository. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> skipTrashcan() {
        return Optional.ofNullable(this.skipTrashcan);
    }

    private PackageCleanupPolicyArgs() {}

    private PackageCleanupPolicyArgs(PackageCleanupPolicyArgs $) {
        this.cronExpression = $.cronExpression;
        this.description = $.description;
        this.durationInMinutes = $.durationInMinutes;
        this.enabled = $.enabled;
        this.key = $.key;
        this.projectKey = $.projectKey;
        this.searchCriteria = $.searchCriteria;
        this.skipTrashcan = $.skipTrashcan;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PackageCleanupPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PackageCleanupPolicyArgs $;

        public Builder() {
            $ = new PackageCleanupPolicyArgs();
        }

        public Builder(PackageCleanupPolicyArgs defaults) {
            $ = new PackageCleanupPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cronExpression The Cron expression that sets the schedule of policy execution. For example, `0 0 2 * * ?` executes the policy every day at 02:00 AM. The minimum recurrent time for policy execution is 6 hours.
         * 
         * @return builder
         * 
         */
        public Builder cronExpression(@Nullable Output<String> cronExpression) {
            $.cronExpression = cronExpression;
            return this;
        }

        /**
         * @param cronExpression The Cron expression that sets the schedule of policy execution. For example, `0 0 2 * * ?` executes the policy every day at 02:00 AM. The minimum recurrent time for policy execution is 6 hours.
         * 
         * @return builder
         * 
         */
        public Builder cronExpression(String cronExpression) {
            return cronExpression(Output.of(cronExpression));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param durationInMinutes Enable and select the maximum duration for policy execution. Note: using this setting can cause the policy to stop before completion.
         * 
         * @return builder
         * 
         */
        public Builder durationInMinutes(@Nullable Output<Integer> durationInMinutes) {
            $.durationInMinutes = durationInMinutes;
            return this;
        }

        /**
         * @param durationInMinutes Enable and select the maximum duration for policy execution. Note: using this setting can cause the policy to stop before completion.
         * 
         * @return builder
         * 
         */
        public Builder durationInMinutes(Integer durationInMinutes) {
            return durationInMinutes(Output.of(durationInMinutes));
        }

        /**
         * @param enabled Enables or disabled the package cleanup policy. This allows the user to run the policy manually. If a policy has a valid cron expression, then it will be scheduled for execution based on it. If a policy is disabled, its future executions will be unscheduled. Defaults to `true`
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Enables or disabled the package cleanup policy. This allows the user to run the policy manually. If a policy has a valid cron expression, then it will be scheduled for execution based on it. If a policy is disabled, its future executions will be unscheduled. Defaults to `true`
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param key Policy key. It has to be unique. It should not be used for other policies and configuration entities like archive policies, key pairs, repo layouts, property sets, backups, proxies, reverse proxies etc. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
         * 
         * @return builder
         * 
         */
        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key Policy key. It has to be unique. It should not be used for other policies and configuration entities like archive policies, key pairs, repo layouts, property sets, backups, proxies, reverse proxies etc. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param projectKey This attribute is used only for project-level cleanup policies, it is not used for global-level policies.
         * 
         * @return builder
         * 
         */
        public Builder projectKey(@Nullable Output<String> projectKey) {
            $.projectKey = projectKey;
            return this;
        }

        /**
         * @param projectKey This attribute is used only for project-level cleanup policies, it is not used for global-level policies.
         * 
         * @return builder
         * 
         */
        public Builder projectKey(String projectKey) {
            return projectKey(Output.of(projectKey));
        }

        public Builder searchCriteria(Output<PackageCleanupPolicySearchCriteriaArgs> searchCriteria) {
            $.searchCriteria = searchCriteria;
            return this;
        }

        public Builder searchCriteria(PackageCleanupPolicySearchCriteriaArgs searchCriteria) {
            return searchCriteria(Output.of(searchCriteria));
        }

        /**
         * @param skipTrashcan Enabling this setting results in packages being permanently deleted from Artifactory after the cleanup policy is executed instead of going to the Trash Can repository. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder skipTrashcan(@Nullable Output<Boolean> skipTrashcan) {
            $.skipTrashcan = skipTrashcan;
            return this;
        }

        /**
         * @param skipTrashcan Enabling this setting results in packages being permanently deleted from Artifactory after the cleanup policy is executed instead of going to the Trash Can repository. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder skipTrashcan(Boolean skipTrashcan) {
            return skipTrashcan(Output.of(skipTrashcan));
        }

        public PackageCleanupPolicyArgs build() {
            if ($.key == null) {
                throw new MissingRequiredPropertyException("PackageCleanupPolicyArgs", "key");
            }
            if ($.searchCriteria == null) {
                throw new MissingRequiredPropertyException("PackageCleanupPolicyArgs", "searchCriteria");
            }
            return $;
        }
    }

}
