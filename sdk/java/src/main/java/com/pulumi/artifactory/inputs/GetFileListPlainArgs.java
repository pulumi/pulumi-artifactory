// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetFileListPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetFileListPlainArgs Empty = new GetFileListPlainArgs();

    /**
     * Get deep listing
     * 
     */
    @Import(name="deepListing")
    private @Nullable Boolean deepListing;

    /**
     * @return Get deep listing
     * 
     */
    public Optional<Boolean> deepListing() {
        return Optional.ofNullable(this.deepListing);
    }

    /**
     * Depth of the deep listing
     * 
     */
    @Import(name="depth")
    private @Nullable Integer depth;

    /**
     * @return Depth of the deep listing
     * 
     */
    public Optional<Integer> depth() {
        return Optional.ofNullable(this.depth);
    }

    /**
     * Path of the folder
     * 
     */
    @Import(name="folderPath", required=true)
    private String folderPath;

    /**
     * @return Path of the folder
     * 
     */
    public String folderPath() {
        return this.folderPath;
    }

    /**
     * Include root path
     * 
     */
    @Import(name="includeRootPath")
    private @Nullable Boolean includeRootPath;

    /**
     * @return Include root path
     * 
     */
    public Optional<Boolean> includeRootPath() {
        return Optional.ofNullable(this.includeRootPath);
    }

    /**
     * Include folders
     * 
     */
    @Import(name="listFolders")
    private @Nullable Boolean listFolders;

    /**
     * @return Include folders
     * 
     */
    public Optional<Boolean> listFolders() {
        return Optional.ofNullable(this.listFolders);
    }

    /**
     * Include metadata timestamps
     * 
     */
    @Import(name="metadataTimestamps")
    private @Nullable Boolean metadataTimestamps;

    /**
     * @return Include metadata timestamps
     * 
     */
    public Optional<Boolean> metadataTimestamps() {
        return Optional.ofNullable(this.metadataTimestamps);
    }

    /**
     * Repository key
     * 
     */
    @Import(name="repositoryKey", required=true)
    private String repositoryKey;

    /**
     * @return Repository key
     * 
     */
    public String repositoryKey() {
        return this.repositoryKey;
    }

    private GetFileListPlainArgs() {}

    private GetFileListPlainArgs(GetFileListPlainArgs $) {
        this.deepListing = $.deepListing;
        this.depth = $.depth;
        this.folderPath = $.folderPath;
        this.includeRootPath = $.includeRootPath;
        this.listFolders = $.listFolders;
        this.metadataTimestamps = $.metadataTimestamps;
        this.repositoryKey = $.repositoryKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetFileListPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetFileListPlainArgs $;

        public Builder() {
            $ = new GetFileListPlainArgs();
        }

        public Builder(GetFileListPlainArgs defaults) {
            $ = new GetFileListPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deepListing Get deep listing
         * 
         * @return builder
         * 
         */
        public Builder deepListing(@Nullable Boolean deepListing) {
            $.deepListing = deepListing;
            return this;
        }

        /**
         * @param depth Depth of the deep listing
         * 
         * @return builder
         * 
         */
        public Builder depth(@Nullable Integer depth) {
            $.depth = depth;
            return this;
        }

        /**
         * @param folderPath Path of the folder
         * 
         * @return builder
         * 
         */
        public Builder folderPath(String folderPath) {
            $.folderPath = folderPath;
            return this;
        }

        /**
         * @param includeRootPath Include root path
         * 
         * @return builder
         * 
         */
        public Builder includeRootPath(@Nullable Boolean includeRootPath) {
            $.includeRootPath = includeRootPath;
            return this;
        }

        /**
         * @param listFolders Include folders
         * 
         * @return builder
         * 
         */
        public Builder listFolders(@Nullable Boolean listFolders) {
            $.listFolders = listFolders;
            return this;
        }

        /**
         * @param metadataTimestamps Include metadata timestamps
         * 
         * @return builder
         * 
         */
        public Builder metadataTimestamps(@Nullable Boolean metadataTimestamps) {
            $.metadataTimestamps = metadataTimestamps;
            return this;
        }

        /**
         * @param repositoryKey Repository key
         * 
         * @return builder
         * 
         */
        public Builder repositoryKey(String repositoryKey) {
            $.repositoryKey = repositoryKey;
            return this;
        }

        public GetFileListPlainArgs build() {
            if ($.folderPath == null) {
                throw new MissingRequiredPropertyException("GetFileListPlainArgs", "folderPath");
            }
            if ($.repositoryKey == null) {
                throw new MissingRequiredPropertyException("GetFileListPlainArgs", "repositoryKey");
            }
            return $;
        }
    }

}
