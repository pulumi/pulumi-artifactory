// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory;

import com.pulumi.artifactory.PermissionTargetArgs;
import com.pulumi.artifactory.Utilities;
import com.pulumi.artifactory.inputs.PermissionTargetState;
import com.pulumi.artifactory.outputs.PermissionTargetBuild;
import com.pulumi.artifactory.outputs.PermissionTargetReleaseBundle;
import com.pulumi.artifactory.outputs.PermissionTargetRepo;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides an Artifactory permission target resource. This can be used to create and manage Artifactory permission targets.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.artifactory.PermissionTarget;
 * import com.pulumi.artifactory.PermissionTargetArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test_perm = new PermissionTarget(&#34;test-perm&#34;, PermissionTargetArgs.builder()        
 *             .builds(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *             .releaseBundles(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *             .repos(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *             .build());
 * 
 *     }
 * }
 * ```
 * ## Permissions
 * 
 * The provider supports the following `permission` enums:
 * 
 * * `read`
 * * `write`
 * * `annotate`
 * * `delete`
 * * `manage`
 * * `managedXrayMeta`
 * * `distribute`
 * 
 * The values can be mapped to the permissions from the official [documentation](https://www.jfrog.com/confluence/display/JFROG/Permissions):
 * 
 * * `read` - matches `Read` permissions.
 * * `write` - matches `  Deploy / Cache / Create ` permissions.
 * * `annotate` - matches `Annotate` permissions.
 * * `delete` - matches `Delete / Overwrite` permissions.
 * * `manage` - matches `Manage` permissions.
 * * `managedXrayMeta` - matches `Manage Xray Metadata` permissions.
 * * `distribute` - matches `Distribute` permissions.
 * 
 * ## Import
 * 
 * Permission targets can be imported using their name, e.g.
 * 
 * ```sh
 *  $ pulumi import artifactory:index/permissionTarget:PermissionTarget terraform-test-permission mypermission
 * ```
 * 
 */
@ResourceType(type="artifactory:index/permissionTarget:PermissionTarget")
public class PermissionTarget extends com.pulumi.resources.CustomResource {
    /**
     * As for repo but for artifactory-build-info permissions.
     * 
     */
    @Export(name="builds", type=List.class, parameters={PermissionTargetBuild.class})
    private Output</* @Nullable */ List<PermissionTargetBuild>> builds;

    /**
     * @return As for repo but for artifactory-build-info permissions.
     * 
     */
    public Output<Optional<List<PermissionTargetBuild>>> builds() {
        return Codegen.optional(this.builds);
    }
    /**
     * Name of permission.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Name of permission.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * As for repo for for release-bundles permissions.
     * 
     */
    @Export(name="releaseBundles", type=List.class, parameters={PermissionTargetReleaseBundle.class})
    private Output</* @Nullable */ List<PermissionTargetReleaseBundle>> releaseBundles;

    /**
     * @return As for repo for for release-bundles permissions.
     * 
     */
    public Output<Optional<List<PermissionTargetReleaseBundle>>> releaseBundles() {
        return Codegen.optional(this.releaseBundles);
    }
    /**
     * Repository permission configuration.
     * 
     */
    @Export(name="repos", type=List.class, parameters={PermissionTargetRepo.class})
    private Output</* @Nullable */ List<PermissionTargetRepo>> repos;

    /**
     * @return Repository permission configuration.
     * 
     */
    public Output<Optional<List<PermissionTargetRepo>>> repos() {
        return Codegen.optional(this.repos);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public PermissionTarget(String name) {
        this(name, PermissionTargetArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public PermissionTarget(String name, @Nullable PermissionTargetArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public PermissionTarget(String name, @Nullable PermissionTargetArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("artifactory:index/permissionTarget:PermissionTarget", name, args == null ? PermissionTargetArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private PermissionTarget(String name, Output<String> id, @Nullable PermissionTargetState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("artifactory:index/permissionTarget:PermissionTarget", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static PermissionTarget get(String name, Output<String> id, @Nullable PermissionTargetState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new PermissionTarget(name, id, state, options);
    }
}
