// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReleaseBundleV2SourceBuildArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReleaseBundleV2SourceBuildArgs Empty = new ReleaseBundleV2SourceBuildArgs();

    /**
     * Determines whether to include build dependencies in the Release Bundle. The default value is `false`.
     * 
     */
    @Import(name="includeDependencies")
    private @Nullable Output<Boolean> includeDependencies;

    /**
     * @return Determines whether to include build dependencies in the Release Bundle. The default value is `false`.
     * 
     */
    public Optional<Output<Boolean>> includeDependencies() {
        return Optional.ofNullable(this.includeDependencies);
    }

    /**
     * Name of the build.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the build.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Number (run) of the build.
     * 
     */
    @Import(name="number", required=true)
    private Output<String> number;

    /**
     * @return Number (run) of the build.
     * 
     */
    public Output<String> number() {
        return this.number;
    }

    /**
     * The repository key of the build. If omitted, the system uses the default built-in repository, `artifactory-build-info`.
     * 
     */
    @Import(name="repository")
    private @Nullable Output<String> repository;

    /**
     * @return The repository key of the build. If omitted, the system uses the default built-in repository, `artifactory-build-info`.
     * 
     */
    public Optional<Output<String>> repository() {
        return Optional.ofNullable(this.repository);
    }

    /**
     * Timestamp when the build was created. If omitted, the system uses the latest build run, as identified by the `name` and `number` combination. The timestamp is provided according to the ISO 8601 standard.
     * 
     */
    @Import(name="started")
    private @Nullable Output<String> started;

    /**
     * @return Timestamp when the build was created. If omitted, the system uses the latest build run, as identified by the `name` and `number` combination. The timestamp is provided according to the ISO 8601 standard.
     * 
     */
    public Optional<Output<String>> started() {
        return Optional.ofNullable(this.started);
    }

    private ReleaseBundleV2SourceBuildArgs() {}

    private ReleaseBundleV2SourceBuildArgs(ReleaseBundleV2SourceBuildArgs $) {
        this.includeDependencies = $.includeDependencies;
        this.name = $.name;
        this.number = $.number;
        this.repository = $.repository;
        this.started = $.started;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReleaseBundleV2SourceBuildArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReleaseBundleV2SourceBuildArgs $;

        public Builder() {
            $ = new ReleaseBundleV2SourceBuildArgs();
        }

        public Builder(ReleaseBundleV2SourceBuildArgs defaults) {
            $ = new ReleaseBundleV2SourceBuildArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param includeDependencies Determines whether to include build dependencies in the Release Bundle. The default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder includeDependencies(@Nullable Output<Boolean> includeDependencies) {
            $.includeDependencies = includeDependencies;
            return this;
        }

        /**
         * @param includeDependencies Determines whether to include build dependencies in the Release Bundle. The default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder includeDependencies(Boolean includeDependencies) {
            return includeDependencies(Output.of(includeDependencies));
        }

        /**
         * @param name Name of the build.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the build.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param number Number (run) of the build.
         * 
         * @return builder
         * 
         */
        public Builder number(Output<String> number) {
            $.number = number;
            return this;
        }

        /**
         * @param number Number (run) of the build.
         * 
         * @return builder
         * 
         */
        public Builder number(String number) {
            return number(Output.of(number));
        }

        /**
         * @param repository The repository key of the build. If omitted, the system uses the default built-in repository, `artifactory-build-info`.
         * 
         * @return builder
         * 
         */
        public Builder repository(@Nullable Output<String> repository) {
            $.repository = repository;
            return this;
        }

        /**
         * @param repository The repository key of the build. If omitted, the system uses the default built-in repository, `artifactory-build-info`.
         * 
         * @return builder
         * 
         */
        public Builder repository(String repository) {
            return repository(Output.of(repository));
        }

        /**
         * @param started Timestamp when the build was created. If omitted, the system uses the latest build run, as identified by the `name` and `number` combination. The timestamp is provided according to the ISO 8601 standard.
         * 
         * @return builder
         * 
         */
        public Builder started(@Nullable Output<String> started) {
            $.started = started;
            return this;
        }

        /**
         * @param started Timestamp when the build was created. If omitted, the system uses the latest build run, as identified by the `name` and `number` combination. The timestamp is provided according to the ISO 8601 standard.
         * 
         * @return builder
         * 
         */
        public Builder started(String started) {
            return started(Output.of(started));
        }

        public ReleaseBundleV2SourceBuildArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ReleaseBundleV2SourceBuildArgs", "name");
            }
            if ($.number == null) {
                throw new MissingRequiredPropertyException("ReleaseBundleV2SourceBuildArgs", "number");
            }
            return $;
        }
    }

}
