// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRepositoriesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRepositoriesPlainArgs Empty = new GetRepositoriesPlainArgs();

    @Import(name="packageType")
    private @Nullable String packageType;

    public Optional<String> packageType() {
        return Optional.ofNullable(this.packageType);
    }

    /**
     * Filter for repositories assigned to a specific project.
     * 
     */
    @Import(name="projectKey")
    private @Nullable String projectKey;

    /**
     * @return Filter for repositories assigned to a specific project.
     * 
     */
    public Optional<String> projectKey() {
        return Optional.ofNullable(this.projectKey);
    }

    /**
     * Filter for repositories of a specific type. Allowed values are: local, remote, virtual, federated, distribution
     * 
     */
    @Import(name="repositoryType")
    private @Nullable String repositoryType;

    /**
     * @return Filter for repositories of a specific type. Allowed values are: local, remote, virtual, federated, distribution
     * 
     */
    public Optional<String> repositoryType() {
        return Optional.ofNullable(this.repositoryType);
    }

    private GetRepositoriesPlainArgs() {}

    private GetRepositoriesPlainArgs(GetRepositoriesPlainArgs $) {
        this.packageType = $.packageType;
        this.projectKey = $.projectKey;
        this.repositoryType = $.repositoryType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRepositoriesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRepositoriesPlainArgs $;

        public Builder() {
            $ = new GetRepositoriesPlainArgs();
        }

        public Builder(GetRepositoriesPlainArgs defaults) {
            $ = new GetRepositoriesPlainArgs(Objects.requireNonNull(defaults));
        }

        public Builder packageType(@Nullable String packageType) {
            $.packageType = packageType;
            return this;
        }

        /**
         * @param projectKey Filter for repositories assigned to a specific project.
         * 
         * @return builder
         * 
         */
        public Builder projectKey(@Nullable String projectKey) {
            $.projectKey = projectKey;
            return this;
        }

        /**
         * @param repositoryType Filter for repositories of a specific type. Allowed values are: local, remote, virtual, federated, distribution
         * 
         * @return builder
         * 
         */
        public Builder repositoryType(@Nullable String repositoryType) {
            $.repositoryType = repositoryType;
            return this;
        }

        public GetRepositoriesPlainArgs build() {
            return $;
        }
    }

}
