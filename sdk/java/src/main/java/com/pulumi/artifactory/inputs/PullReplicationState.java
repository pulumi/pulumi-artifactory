// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PullReplicationState extends com.pulumi.resources.ResourceArgs {

    public static final PullReplicationState Empty = new PullReplicationState();

    /**
     * When true, enables distributed checksum storage. For more information, see
     * [Optimizing Repository Replication with Checksum-Based Storage](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-OptimizingRepositoryReplicationUsingStorageLevelSynchronizationOptions).
     * 
     */
    @Import(name="checkBinaryExistenceInFilestore")
    private @Nullable Output<Boolean> checkBinaryExistenceInFilestore;

    /**
     * @return When true, enables distributed checksum storage. For more information, see
     * [Optimizing Repository Replication with Checksum-Based Storage](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-OptimizingRepositoryReplicationUsingStorageLevelSynchronizationOptions).
     * 
     */
    public Optional<Output<Boolean>> checkBinaryExistenceInFilestore() {
        return Optional.ofNullable(this.checkBinaryExistenceInFilestore);
    }

    @Import(name="cronExp")
    private @Nullable Output<String> cronExp;

    public Optional<Output<String>> cronExp() {
        return Optional.ofNullable(this.cronExp);
    }

    /**
     * When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on artifact, e.g. added, deleted or property change.
     * 
     */
    @Import(name="enableEventReplication")
    private @Nullable Output<Boolean> enableEventReplication;

    /**
     * @return When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on artifact, e.g. added, deleted or property change.
     * 
     */
    public Optional<Output<Boolean>> enableEventReplication() {
        return Optional.ofNullable(this.enableEventReplication);
    }

    /**
     * When set, this replication will be enabled when saved.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return When set, this replication will be enabled when saved.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Required for local repository, but not needed for remote repository.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Required for local repository, but not needed for remote repository.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Only artifacts that located in path that matches the subpath within the remote repository will be replicated.
     * 
     */
    @Import(name="pathPrefix")
    private @Nullable Output<String> pathPrefix;

    /**
     * @return Only artifacts that located in path that matches the subpath within the remote repository will be replicated.
     * 
     */
    public Optional<Output<String>> pathPrefix() {
        return Optional.ofNullable(this.pathPrefix);
    }

    /**
     * Proxy key from Artifactory Proxies setting
     * 
     */
    @Import(name="proxy")
    private @Nullable Output<String> proxy;

    /**
     * @return Proxy key from Artifactory Proxies setting
     * 
     */
    public Optional<Output<String>> proxy() {
        return Optional.ofNullable(this.proxy);
    }

    @Import(name="repoKey")
    private @Nullable Output<String> repoKey;

    public Optional<Output<String>> repoKey() {
        return Optional.ofNullable(this.repoKey);
    }

    @Import(name="socketTimeoutMillis")
    private @Nullable Output<Integer> socketTimeoutMillis;

    public Optional<Output<Integer>> socketTimeoutMillis() {
        return Optional.ofNullable(this.socketTimeoutMillis);
    }

    /**
     * When set, items that were deleted locally should also be deleted remotely (also applies to properties metadata).
     * 
     */
    @Import(name="syncDeletes")
    private @Nullable Output<Boolean> syncDeletes;

    /**
     * @return When set, items that were deleted locally should also be deleted remotely (also applies to properties metadata).
     * 
     */
    public Optional<Output<Boolean>> syncDeletes() {
        return Optional.ofNullable(this.syncDeletes);
    }

    /**
     * When set, the task also synchronizes the properties of replicated artifacts.
     * 
     */
    @Import(name="syncProperties")
    private @Nullable Output<Boolean> syncProperties;

    /**
     * @return When set, the task also synchronizes the properties of replicated artifacts.
     * 
     */
    public Optional<Output<Boolean>> syncProperties() {
        return Optional.ofNullable(this.syncProperties);
    }

    /**
     * When set, artifact download statistics will also be replicated. Set to avoid inadvertent cleanup at the target instance when setting up replication for disaster recovery.
     * 
     */
    @Import(name="syncStatistics")
    private @Nullable Output<Boolean> syncStatistics;

    /**
     * @return When set, artifact download statistics will also be replicated. Set to avoid inadvertent cleanup at the target instance when setting up replication for disaster recovery.
     * 
     */
    public Optional<Output<Boolean>> syncStatistics() {
        return Optional.ofNullable(this.syncStatistics);
    }

    /**
     * The URL of the target local repository on a remote Artifactory server. For some package types, you need to prefix the repository key in the URL with api/&lt;pkg&gt;.
     * For a list of package types where this is required, see the [note](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-anchorPREFIX).
     * Required for local repository, but not needed for remote repository.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return The URL of the target local repository on a remote Artifactory server. For some package types, you need to prefix the repository key in the URL with api/&lt;pkg&gt;.
     * For a list of package types where this is required, see the [note](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-anchorPREFIX).
     * Required for local repository, but not needed for remote repository.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    /**
     * Required for local repository, but not needed for remote repository.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return Required for local repository, but not needed for remote repository.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private PullReplicationState() {}

    private PullReplicationState(PullReplicationState $) {
        this.checkBinaryExistenceInFilestore = $.checkBinaryExistenceInFilestore;
        this.cronExp = $.cronExp;
        this.enableEventReplication = $.enableEventReplication;
        this.enabled = $.enabled;
        this.password = $.password;
        this.pathPrefix = $.pathPrefix;
        this.proxy = $.proxy;
        this.repoKey = $.repoKey;
        this.socketTimeoutMillis = $.socketTimeoutMillis;
        this.syncDeletes = $.syncDeletes;
        this.syncProperties = $.syncProperties;
        this.syncStatistics = $.syncStatistics;
        this.url = $.url;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PullReplicationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PullReplicationState $;

        public Builder() {
            $ = new PullReplicationState();
        }

        public Builder(PullReplicationState defaults) {
            $ = new PullReplicationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param checkBinaryExistenceInFilestore When true, enables distributed checksum storage. For more information, see
         * [Optimizing Repository Replication with Checksum-Based Storage](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-OptimizingRepositoryReplicationUsingStorageLevelSynchronizationOptions).
         * 
         * @return builder
         * 
         */
        public Builder checkBinaryExistenceInFilestore(@Nullable Output<Boolean> checkBinaryExistenceInFilestore) {
            $.checkBinaryExistenceInFilestore = checkBinaryExistenceInFilestore;
            return this;
        }

        /**
         * @param checkBinaryExistenceInFilestore When true, enables distributed checksum storage. For more information, see
         * [Optimizing Repository Replication with Checksum-Based Storage](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-OptimizingRepositoryReplicationUsingStorageLevelSynchronizationOptions).
         * 
         * @return builder
         * 
         */
        public Builder checkBinaryExistenceInFilestore(Boolean checkBinaryExistenceInFilestore) {
            return checkBinaryExistenceInFilestore(Output.of(checkBinaryExistenceInFilestore));
        }

        public Builder cronExp(@Nullable Output<String> cronExp) {
            $.cronExp = cronExp;
            return this;
        }

        public Builder cronExp(String cronExp) {
            return cronExp(Output.of(cronExp));
        }

        /**
         * @param enableEventReplication When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on artifact, e.g. added, deleted or property change.
         * 
         * @return builder
         * 
         */
        public Builder enableEventReplication(@Nullable Output<Boolean> enableEventReplication) {
            $.enableEventReplication = enableEventReplication;
            return this;
        }

        /**
         * @param enableEventReplication When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on artifact, e.g. added, deleted or property change.
         * 
         * @return builder
         * 
         */
        public Builder enableEventReplication(Boolean enableEventReplication) {
            return enableEventReplication(Output.of(enableEventReplication));
        }

        /**
         * @param enabled When set, this replication will be enabled when saved.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled When set, this replication will be enabled when saved.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param password Required for local repository, but not needed for remote repository.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Required for local repository, but not needed for remote repository.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param pathPrefix Only artifacts that located in path that matches the subpath within the remote repository will be replicated.
         * 
         * @return builder
         * 
         */
        public Builder pathPrefix(@Nullable Output<String> pathPrefix) {
            $.pathPrefix = pathPrefix;
            return this;
        }

        /**
         * @param pathPrefix Only artifacts that located in path that matches the subpath within the remote repository will be replicated.
         * 
         * @return builder
         * 
         */
        public Builder pathPrefix(String pathPrefix) {
            return pathPrefix(Output.of(pathPrefix));
        }

        /**
         * @param proxy Proxy key from Artifactory Proxies setting
         * 
         * @return builder
         * 
         */
        public Builder proxy(@Nullable Output<String> proxy) {
            $.proxy = proxy;
            return this;
        }

        /**
         * @param proxy Proxy key from Artifactory Proxies setting
         * 
         * @return builder
         * 
         */
        public Builder proxy(String proxy) {
            return proxy(Output.of(proxy));
        }

        public Builder repoKey(@Nullable Output<String> repoKey) {
            $.repoKey = repoKey;
            return this;
        }

        public Builder repoKey(String repoKey) {
            return repoKey(Output.of(repoKey));
        }

        public Builder socketTimeoutMillis(@Nullable Output<Integer> socketTimeoutMillis) {
            $.socketTimeoutMillis = socketTimeoutMillis;
            return this;
        }

        public Builder socketTimeoutMillis(Integer socketTimeoutMillis) {
            return socketTimeoutMillis(Output.of(socketTimeoutMillis));
        }

        /**
         * @param syncDeletes When set, items that were deleted locally should also be deleted remotely (also applies to properties metadata).
         * 
         * @return builder
         * 
         */
        public Builder syncDeletes(@Nullable Output<Boolean> syncDeletes) {
            $.syncDeletes = syncDeletes;
            return this;
        }

        /**
         * @param syncDeletes When set, items that were deleted locally should also be deleted remotely (also applies to properties metadata).
         * 
         * @return builder
         * 
         */
        public Builder syncDeletes(Boolean syncDeletes) {
            return syncDeletes(Output.of(syncDeletes));
        }

        /**
         * @param syncProperties When set, the task also synchronizes the properties of replicated artifacts.
         * 
         * @return builder
         * 
         */
        public Builder syncProperties(@Nullable Output<Boolean> syncProperties) {
            $.syncProperties = syncProperties;
            return this;
        }

        /**
         * @param syncProperties When set, the task also synchronizes the properties of replicated artifacts.
         * 
         * @return builder
         * 
         */
        public Builder syncProperties(Boolean syncProperties) {
            return syncProperties(Output.of(syncProperties));
        }

        /**
         * @param syncStatistics When set, artifact download statistics will also be replicated. Set to avoid inadvertent cleanup at the target instance when setting up replication for disaster recovery.
         * 
         * @return builder
         * 
         */
        public Builder syncStatistics(@Nullable Output<Boolean> syncStatistics) {
            $.syncStatistics = syncStatistics;
            return this;
        }

        /**
         * @param syncStatistics When set, artifact download statistics will also be replicated. Set to avoid inadvertent cleanup at the target instance when setting up replication for disaster recovery.
         * 
         * @return builder
         * 
         */
        public Builder syncStatistics(Boolean syncStatistics) {
            return syncStatistics(Output.of(syncStatistics));
        }

        /**
         * @param url The URL of the target local repository on a remote Artifactory server. For some package types, you need to prefix the repository key in the URL with api/&lt;pkg&gt;.
         * For a list of package types where this is required, see the [note](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-anchorPREFIX).
         * Required for local repository, but not needed for remote repository.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The URL of the target local repository on a remote Artifactory server. For some package types, you need to prefix the repository key in the URL with api/&lt;pkg&gt;.
         * For a list of package types where this is required, see the [note](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-anchorPREFIX).
         * Required for local repository, but not needed for remote repository.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param username Required for local repository, but not needed for remote repository.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Required for local repository, but not needed for remote repository.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public PullReplicationState build() {
            return $;
        }
    }

}
