// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory.inputs;

import com.pulumi.artifactory.inputs.ReleaseBundleV2CleanupPolicySearchCriteriaReleaseBundleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReleaseBundleV2CleanupPolicySearchCriteriaArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReleaseBundleV2CleanupPolicySearchCriteriaArgs Empty = new ReleaseBundleV2CleanupPolicySearchCriteriaArgs();

    /**
     * The cleanup policy will cleanup release bundles based on how long ago they were created. For example, if this parameter is 2 then release bundles created more than 2 months ago will be cleaned up as part of the policy.
     * 
     */
    @Import(name="createdBeforeInMonths")
    private @Nullable Output<Integer> createdBeforeInMonths;

    /**
     * @return The cleanup policy will cleanup release bundles based on how long ago they were created. For example, if this parameter is 2 then release bundles created more than 2 months ago will be cleaned up as part of the policy.
     * 
     */
    public Optional<Output<Integer>> createdBeforeInMonths() {
        return Optional.ofNullable(this.createdBeforeInMonths);
    }

    /**
     * A list of environments to exclude from the cleanup process. To exclude all, set to `**`. Example: `excludePromotedEnvironments = [&#34;**&#34;]`
     * 
     */
    @Import(name="excludePromotedEnvironments", required=true)
    private Output<List<String>> excludePromotedEnvironments;

    /**
     * @return A list of environments to exclude from the cleanup process. To exclude all, set to `**`. Example: `excludePromotedEnvironments = [&#34;**&#34;]`
     * 
     */
    public Output<List<String>> excludePromotedEnvironments() {
        return this.excludePromotedEnvironments;
    }

    /**
     * Set this value to `true` if you want the policy to run on all Artifactory projects. The default value is `false`.
     * 
     */
    @Import(name="includeAllProjects")
    private @Nullable Output<Boolean> includeAllProjects;

    /**
     * @return Set this value to `true` if you want the policy to run on all Artifactory projects. The default value is `false`.
     * 
     */
    public Optional<Output<Boolean>> includeAllProjects() {
        return Optional.ofNullable(this.includeAllProjects);
    }

    /**
     * List of projects on which you want this policy to run. To include repositories that are not assigned to any project, enter the project key `default`.
     * 
     * ~&gt;This setting is relevant only on the global level, for Platform Admins.
     * 
     */
    @Import(name="includedProjects")
    private @Nullable Output<List<String>> includedProjects;

    /**
     * @return List of projects on which you want this policy to run. To include repositories that are not assigned to any project, enter the project key `default`.
     * 
     * ~&gt;This setting is relevant only on the global level, for Platform Admins.
     * 
     */
    public Optional<Output<List<String>>> includedProjects() {
        return Optional.ofNullable(this.includedProjects);
    }

    /**
     * Specify the release bundles to include in the cleanup policy. The policy will only clean up the release bundles that match the specified criteria.
     * 
     */
    @Import(name="releaseBundles")
    private @Nullable Output<List<ReleaseBundleV2CleanupPolicySearchCriteriaReleaseBundleArgs>> releaseBundles;

    /**
     * @return Specify the release bundles to include in the cleanup policy. The policy will only clean up the release bundles that match the specified criteria.
     * 
     */
    public Optional<Output<List<ReleaseBundleV2CleanupPolicySearchCriteriaReleaseBundleArgs>>> releaseBundles() {
        return Optional.ofNullable(this.releaseBundles);
    }

    private ReleaseBundleV2CleanupPolicySearchCriteriaArgs() {}

    private ReleaseBundleV2CleanupPolicySearchCriteriaArgs(ReleaseBundleV2CleanupPolicySearchCriteriaArgs $) {
        this.createdBeforeInMonths = $.createdBeforeInMonths;
        this.excludePromotedEnvironments = $.excludePromotedEnvironments;
        this.includeAllProjects = $.includeAllProjects;
        this.includedProjects = $.includedProjects;
        this.releaseBundles = $.releaseBundles;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReleaseBundleV2CleanupPolicySearchCriteriaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReleaseBundleV2CleanupPolicySearchCriteriaArgs $;

        public Builder() {
            $ = new ReleaseBundleV2CleanupPolicySearchCriteriaArgs();
        }

        public Builder(ReleaseBundleV2CleanupPolicySearchCriteriaArgs defaults) {
            $ = new ReleaseBundleV2CleanupPolicySearchCriteriaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdBeforeInMonths The cleanup policy will cleanup release bundles based on how long ago they were created. For example, if this parameter is 2 then release bundles created more than 2 months ago will be cleaned up as part of the policy.
         * 
         * @return builder
         * 
         */
        public Builder createdBeforeInMonths(@Nullable Output<Integer> createdBeforeInMonths) {
            $.createdBeforeInMonths = createdBeforeInMonths;
            return this;
        }

        /**
         * @param createdBeforeInMonths The cleanup policy will cleanup release bundles based on how long ago they were created. For example, if this parameter is 2 then release bundles created more than 2 months ago will be cleaned up as part of the policy.
         * 
         * @return builder
         * 
         */
        public Builder createdBeforeInMonths(Integer createdBeforeInMonths) {
            return createdBeforeInMonths(Output.of(createdBeforeInMonths));
        }

        /**
         * @param excludePromotedEnvironments A list of environments to exclude from the cleanup process. To exclude all, set to `**`. Example: `excludePromotedEnvironments = [&#34;**&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder excludePromotedEnvironments(Output<List<String>> excludePromotedEnvironments) {
            $.excludePromotedEnvironments = excludePromotedEnvironments;
            return this;
        }

        /**
         * @param excludePromotedEnvironments A list of environments to exclude from the cleanup process. To exclude all, set to `**`. Example: `excludePromotedEnvironments = [&#34;**&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder excludePromotedEnvironments(List<String> excludePromotedEnvironments) {
            return excludePromotedEnvironments(Output.of(excludePromotedEnvironments));
        }

        /**
         * @param excludePromotedEnvironments A list of environments to exclude from the cleanup process. To exclude all, set to `**`. Example: `excludePromotedEnvironments = [&#34;**&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder excludePromotedEnvironments(String... excludePromotedEnvironments) {
            return excludePromotedEnvironments(List.of(excludePromotedEnvironments));
        }

        /**
         * @param includeAllProjects Set this value to `true` if you want the policy to run on all Artifactory projects. The default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder includeAllProjects(@Nullable Output<Boolean> includeAllProjects) {
            $.includeAllProjects = includeAllProjects;
            return this;
        }

        /**
         * @param includeAllProjects Set this value to `true` if you want the policy to run on all Artifactory projects. The default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder includeAllProjects(Boolean includeAllProjects) {
            return includeAllProjects(Output.of(includeAllProjects));
        }

        /**
         * @param includedProjects List of projects on which you want this policy to run. To include repositories that are not assigned to any project, enter the project key `default`.
         * 
         * ~&gt;This setting is relevant only on the global level, for Platform Admins.
         * 
         * @return builder
         * 
         */
        public Builder includedProjects(@Nullable Output<List<String>> includedProjects) {
            $.includedProjects = includedProjects;
            return this;
        }

        /**
         * @param includedProjects List of projects on which you want this policy to run. To include repositories that are not assigned to any project, enter the project key `default`.
         * 
         * ~&gt;This setting is relevant only on the global level, for Platform Admins.
         * 
         * @return builder
         * 
         */
        public Builder includedProjects(List<String> includedProjects) {
            return includedProjects(Output.of(includedProjects));
        }

        /**
         * @param includedProjects List of projects on which you want this policy to run. To include repositories that are not assigned to any project, enter the project key `default`.
         * 
         * ~&gt;This setting is relevant only on the global level, for Platform Admins.
         * 
         * @return builder
         * 
         */
        public Builder includedProjects(String... includedProjects) {
            return includedProjects(List.of(includedProjects));
        }

        /**
         * @param releaseBundles Specify the release bundles to include in the cleanup policy. The policy will only clean up the release bundles that match the specified criteria.
         * 
         * @return builder
         * 
         */
        public Builder releaseBundles(@Nullable Output<List<ReleaseBundleV2CleanupPolicySearchCriteriaReleaseBundleArgs>> releaseBundles) {
            $.releaseBundles = releaseBundles;
            return this;
        }

        /**
         * @param releaseBundles Specify the release bundles to include in the cleanup policy. The policy will only clean up the release bundles that match the specified criteria.
         * 
         * @return builder
         * 
         */
        public Builder releaseBundles(List<ReleaseBundleV2CleanupPolicySearchCriteriaReleaseBundleArgs> releaseBundles) {
            return releaseBundles(Output.of(releaseBundles));
        }

        /**
         * @param releaseBundles Specify the release bundles to include in the cleanup policy. The policy will only clean up the release bundles that match the specified criteria.
         * 
         * @return builder
         * 
         */
        public Builder releaseBundles(ReleaseBundleV2CleanupPolicySearchCriteriaReleaseBundleArgs... releaseBundles) {
            return releaseBundles(List.of(releaseBundles));
        }

        public ReleaseBundleV2CleanupPolicySearchCriteriaArgs build() {
            if ($.excludePromotedEnvironments == null) {
                throw new MissingRequiredPropertyException("ReleaseBundleV2CleanupPolicySearchCriteriaArgs", "excludePromotedEnvironments");
            }
            return $;
        }
    }

}
