// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory;

import com.pulumi.artifactory.ScopedTokenArgs;
import com.pulumi.artifactory.Utilities;
import com.pulumi.artifactory.inputs.ScopedTokenState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="artifactory:index/scopedToken:ScopedToken")
public class ScopedToken extends com.pulumi.resources.CustomResource {
    /**
     * Returns the access token to authenticate to Artifactory.
     * 
     */
    @Export(name="accessToken", type=String.class, parameters={})
    private Output<String> accessToken;

    /**
     * @return Returns the access token to authenticate to Artifactory.
     * 
     */
    public Output<String> accessToken() {
        return this.accessToken;
    }
    /**
     * A list of the other instances or services that should accept this token identified by their Service-IDs. Limited to
     * total 255 characters. Default to &#39;*@*&#39; if not set. Service ID must begin with valid JFrog service type. Options: jfrt,
     * jfxr, jfpip, jfds, jfmc, jfac, jfevt, jfmd, jfcon, or *. For instructions to retrieve the Artifactory Service ID see
     * this [documentation](https://jfrog.com/help/r/jfrog-rest-apis/get-service-id)
     * 
     */
    @Export(name="audiences", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> audiences;

    /**
     * @return A list of the other instances or services that should accept this token identified by their Service-IDs. Limited to
     * total 255 characters. Default to &#39;*@*&#39; if not set. Service ID must begin with valid JFrog service type. Options: jfrt,
     * jfxr, jfpip, jfds, jfmc, jfac, jfevt, jfmd, jfcon, or *. For instructions to retrieve the Artifactory Service ID see
     * this [documentation](https://jfrog.com/help/r/jfrog-rest-apis/get-service-id)
     * 
     */
    public Output<Optional<List<String>>> audiences() {
        return Codegen.optional(this.audiences);
    }
    /**
     * Free text token description. Useful for filtering and managing tokens. Limited to 1024 characters.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output<String> description;

    /**
     * @return Free text token description. Useful for filtering and managing tokens. Limited to 1024 characters.
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * The amount of time, in seconds, it would take for the token to expire. An admin shall be able to set whether expiry is
     * mandatory, what is the default expiry, and what is the maximum expiry allowed. Must be non-negative. Default value is
     * based on configuration in &#39;access.config.yaml&#39;. See [API
     * documentation](https://jfrog.com/help/r/jfrog-rest-apis/revoke-token-by-id) for details. Access Token would not be saved
     * by Artifactory if this is less than the persistence threshold value (default to 10800 seconds) set in Access
     * configuration. See [official
     * documentation](https://jfrog.com/help/r/jfrog-platform-administration-documentation/using-the-revocable-and-persistency-thresholds)
     * for details.
     * 
     */
    @Export(name="expiresIn", type=Integer.class, parameters={})
    private Output<Integer> expiresIn;

    /**
     * @return The amount of time, in seconds, it would take for the token to expire. An admin shall be able to set whether expiry is
     * mandatory, what is the default expiry, and what is the maximum expiry allowed. Must be non-negative. Default value is
     * based on configuration in &#39;access.config.yaml&#39;. See [API
     * documentation](https://jfrog.com/help/r/jfrog-rest-apis/revoke-token-by-id) for details. Access Token would not be saved
     * by Artifactory if this is less than the persistence threshold value (default to 10800 seconds) set in Access
     * configuration. See [official
     * documentation](https://jfrog.com/help/r/jfrog-platform-administration-documentation/using-the-revocable-and-persistency-thresholds)
     * for details.
     * 
     */
    public Output<Integer> expiresIn() {
        return this.expiresIn;
    }
    /**
     * Returns the token expiry.
     * 
     */
    @Export(name="expiry", type=Integer.class, parameters={})
    private Output<Integer> expiry;

    /**
     * @return Returns the token expiry.
     * 
     */
    public Output<Integer> expiry() {
        return this.expiry;
    }
    /**
     * The grant type used to authenticate the request. In this case, the only value supported is `client_credentials` which is
     * also the default value if this parameter is not specified.
     * 
     */
    @Export(name="grantType", type=String.class, parameters={})
    private Output<String> grantType;

    /**
     * @return The grant type used to authenticate the request. In this case, the only value supported is `client_credentials` which is
     * also the default value if this parameter is not specified.
     * 
     */
    public Output<String> grantType() {
        return this.grantType;
    }
    /**
     * Also create a reference token which can be used like an API key. Default is `false`.
     * 
     */
    @Export(name="includeReferenceToken", type=Boolean.class, parameters={})
    private Output<Boolean> includeReferenceToken;

    /**
     * @return Also create a reference token which can be used like an API key. Default is `false`.
     * 
     */
    public Output<Boolean> includeReferenceToken() {
        return this.includeReferenceToken;
    }
    /**
     * Returns the token issued at date/time.
     * 
     */
    @Export(name="issuedAt", type=Integer.class, parameters={})
    private Output<Integer> issuedAt;

    /**
     * @return Returns the token issued at date/time.
     * 
     */
    public Output<Integer> issuedAt() {
        return this.issuedAt;
    }
    /**
     * Returns the token issuer.
     * 
     */
    @Export(name="issuer", type=String.class, parameters={})
    private Output<String> issuer;

    /**
     * @return Returns the token issuer.
     * 
     */
    public Output<String> issuer() {
        return this.issuer;
    }
    /**
     * Reference Token (alias to Access Token).
     * 
     */
    @Export(name="referenceToken", type=String.class, parameters={})
    private Output<String> referenceToken;

    /**
     * @return Reference Token (alias to Access Token).
     * 
     */
    public Output<String> referenceToken() {
        return this.referenceToken;
    }
    /**
     * Refresh token.
     * 
     */
    @Export(name="refreshToken", type=String.class, parameters={})
    private Output<String> refreshToken;

    /**
     * @return Refresh token.
     * 
     */
    public Output<String> refreshToken() {
        return this.refreshToken;
    }
    /**
     * Is this token refreshable? Default is `false`.
     * 
     */
    @Export(name="refreshable", type=Boolean.class, parameters={})
    private Output<Boolean> refreshable;

    /**
     * @return Is this token refreshable? Default is `false`.
     * 
     */
    public Output<Boolean> refreshable() {
        return this.refreshable;
    }
    /**
     * The scope of access that the token provides. Access to the REST API is always provided by default. Administrators can
     * set any scope, while non-admin users can only set the scope to a subset of the groups to which they belong. The
     * supported scopes include: * `applied-permissions/user` - provides user access. If left at the default setting, the token
     * will be created with the user-identity scope, which allows users to identify themselves in the Platform but does not
     * grant any specific access permissions.* `applied-permissions/admin` - the scope assigned to admin users.*
     * `applied-permissions/groups` - the group to which permissions are assigned by group name (use username to inicate the
     * group name)* `system:metrics:r` - for getting the service metrics* `system:livelogs:r` - for getting the service
     * livelogsrThe scope to assign to the token should be provided as a list of scope tokens, limited to 500 characters in
     * total. Resource Permissions From Artifactory 7.38.x, resource permissions scoped tokens are also supported in the REST
     * API. A permission can be represented as a scope token string in the following format:
     * `&lt;resource-type&gt;:&lt;target&gt;[/&lt;sub-resource&gt;]:&lt;actions&gt;` Where: `&lt;resource-type&gt;` - one of the permission resource types,
     * from a predefined closed list. Currently, the only resource type that is supported is the artifact resource type.
     * `&lt;target&gt;` - the target resource, can be exact name or a pattern `&lt;sub-resource&gt;` - optional, the target sub-resource,
     * can be exact name or a pattern `&lt;actions&gt;` - comma-separated list of action acronyms.The actions allowed are &lt;r, w, d,
     * a, m&gt; or any combination of these actions .To allow all actions - use `*` Examples: `[&#34;applied-permissions/user&#34;,
     * &#34;artifact:generic-local:r&#34;]` `[&#34;applied-permissions/group&#34;, &#34;artifact:generic-local/path:*&#34;]`
     * `[&#34;applied-permissions/admin&#34;, &#34;system:metrics:r&#34;, &#34;artifact:generic-local:*&#34;]`
     * 
     */
    @Export(name="scopes", type=List.class, parameters={String.class})
    private Output<List<String>> scopes;

    /**
     * @return The scope of access that the token provides. Access to the REST API is always provided by default. Administrators can
     * set any scope, while non-admin users can only set the scope to a subset of the groups to which they belong. The
     * supported scopes include: * `applied-permissions/user` - provides user access. If left at the default setting, the token
     * will be created with the user-identity scope, which allows users to identify themselves in the Platform but does not
     * grant any specific access permissions.* `applied-permissions/admin` - the scope assigned to admin users.*
     * `applied-permissions/groups` - the group to which permissions are assigned by group name (use username to inicate the
     * group name)* `system:metrics:r` - for getting the service metrics* `system:livelogs:r` - for getting the service
     * livelogsrThe scope to assign to the token should be provided as a list of scope tokens, limited to 500 characters in
     * total. Resource Permissions From Artifactory 7.38.x, resource permissions scoped tokens are also supported in the REST
     * API. A permission can be represented as a scope token string in the following format:
     * `&lt;resource-type&gt;:&lt;target&gt;[/&lt;sub-resource&gt;]:&lt;actions&gt;` Where: `&lt;resource-type&gt;` - one of the permission resource types,
     * from a predefined closed list. Currently, the only resource type that is supported is the artifact resource type.
     * `&lt;target&gt;` - the target resource, can be exact name or a pattern `&lt;sub-resource&gt;` - optional, the target sub-resource,
     * can be exact name or a pattern `&lt;actions&gt;` - comma-separated list of action acronyms.The actions allowed are &lt;r, w, d,
     * a, m&gt; or any combination of these actions .To allow all actions - use `*` Examples: `[&#34;applied-permissions/user&#34;,
     * &#34;artifact:generic-local:r&#34;]` `[&#34;applied-permissions/group&#34;, &#34;artifact:generic-local/path:*&#34;]`
     * `[&#34;applied-permissions/admin&#34;, &#34;system:metrics:r&#34;, &#34;artifact:generic-local:*&#34;]`
     * 
     */
    public Output<List<String>> scopes() {
        return this.scopes;
    }
    /**
     * Returns the token type.
     * 
     */
    @Export(name="subject", type=String.class, parameters={})
    private Output<String> subject;

    /**
     * @return Returns the token type.
     * 
     */
    public Output<String> subject() {
        return this.subject;
    }
    /**
     * Returns the token type.
     * 
     */
    @Export(name="tokenType", type=String.class, parameters={})
    private Output<String> tokenType;

    /**
     * @return Returns the token type.
     * 
     */
    public Output<String> tokenType() {
        return this.tokenType;
    }
    /**
     * The user name for which this token is created. The username is based on the authenticated user - either from the user of
     * the authenticated token or based on the username (if basic auth was used). The username is then used to set the subject
     * of the token: &lt;service-id&gt;/users/&lt;username&gt;. Limited to 255 characters.
     * 
     */
    @Export(name="username", type=String.class, parameters={})
    private Output</* @Nullable */ String> username;

    /**
     * @return The user name for which this token is created. The username is based on the authenticated user - either from the user of
     * the authenticated token or based on the username (if basic auth was used). The username is then used to set the subject
     * of the token: &lt;service-id&gt;/users/&lt;username&gt;. Limited to 255 characters.
     * 
     */
    public Output<Optional<String>> username() {
        return Codegen.optional(this.username);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ScopedToken(String name) {
        this(name, ScopedTokenArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ScopedToken(String name, @Nullable ScopedTokenArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ScopedToken(String name, @Nullable ScopedTokenArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("artifactory:index/scopedToken:ScopedToken", name, args == null ? ScopedTokenArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ScopedToken(String name, Output<String> id, @Nullable ScopedTokenState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("artifactory:index/scopedToken:ScopedToken", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "accessToken",
                "referenceToken",
                "refreshToken"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ScopedToken get(String name, Output<String> id, @Nullable ScopedTokenState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ScopedToken(name, id, state, options);
    }
}
