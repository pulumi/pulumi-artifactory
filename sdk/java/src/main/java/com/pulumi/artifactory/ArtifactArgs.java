// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ArtifactArgs extends com.pulumi.resources.ResourceArgs {

    public static final ArtifactArgs Empty = new ArtifactArgs();

    /**
     * Base64 content of the source file. Conflicts with `file_path`. Either one of these attribute must be set.
     * 
     */
    @Import(name="contentBase64")
    private @Nullable Output<String> contentBase64;

    /**
     * @return Base64 content of the source file. Conflicts with `file_path`. Either one of these attribute must be set.
     * 
     */
    public Optional<Output<String>> contentBase64() {
        return Optional.ofNullable(this.contentBase64);
    }

    /**
     * Path to the source file. Conflicts with `content_base64`. Either one of these attribute must be set.
     * 
     */
    @Import(name="filePath")
    private @Nullable Output<String> filePath;

    /**
     * @return Path to the source file. Conflicts with `content_base64`. Either one of these attribute must be set.
     * 
     */
    public Optional<Output<String>> filePath() {
        return Optional.ofNullable(this.filePath);
    }

    /**
     * The relative path in the target repository. Must begin with a &#39;/&#39;. You can add key-value matrix parameters to deploy the artifacts with properties. For more details, please refer to [Introducing Matrix Parameters](https://jfrog.com/help/r/jfrog-artifactory-documentation/using-properties-in-deployment-and-resolution).
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return The relative path in the target repository. Must begin with a &#39;/&#39;. You can add key-value matrix parameters to deploy the artifacts with properties. For more details, please refer to [Introducing Matrix Parameters](https://jfrog.com/help/r/jfrog-artifactory-documentation/using-properties-in-deployment-and-resolution).
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    /**
     * Name of the respository.
     * 
     */
    @Import(name="repository", required=true)
    private Output<String> repository;

    /**
     * @return Name of the respository.
     * 
     */
    public Output<String> repository() {
        return this.repository;
    }

    private ArtifactArgs() {}

    private ArtifactArgs(ArtifactArgs $) {
        this.contentBase64 = $.contentBase64;
        this.filePath = $.filePath;
        this.path = $.path;
        this.repository = $.repository;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ArtifactArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ArtifactArgs $;

        public Builder() {
            $ = new ArtifactArgs();
        }

        public Builder(ArtifactArgs defaults) {
            $ = new ArtifactArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param contentBase64 Base64 content of the source file. Conflicts with `file_path`. Either one of these attribute must be set.
         * 
         * @return builder
         * 
         */
        public Builder contentBase64(@Nullable Output<String> contentBase64) {
            $.contentBase64 = contentBase64;
            return this;
        }

        /**
         * @param contentBase64 Base64 content of the source file. Conflicts with `file_path`. Either one of these attribute must be set.
         * 
         * @return builder
         * 
         */
        public Builder contentBase64(String contentBase64) {
            return contentBase64(Output.of(contentBase64));
        }

        /**
         * @param filePath Path to the source file. Conflicts with `content_base64`. Either one of these attribute must be set.
         * 
         * @return builder
         * 
         */
        public Builder filePath(@Nullable Output<String> filePath) {
            $.filePath = filePath;
            return this;
        }

        /**
         * @param filePath Path to the source file. Conflicts with `content_base64`. Either one of these attribute must be set.
         * 
         * @return builder
         * 
         */
        public Builder filePath(String filePath) {
            return filePath(Output.of(filePath));
        }

        /**
         * @param path The relative path in the target repository. Must begin with a &#39;/&#39;. You can add key-value matrix parameters to deploy the artifacts with properties. For more details, please refer to [Introducing Matrix Parameters](https://jfrog.com/help/r/jfrog-artifactory-documentation/using-properties-in-deployment-and-resolution).
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The relative path in the target repository. Must begin with a &#39;/&#39;. You can add key-value matrix parameters to deploy the artifacts with properties. For more details, please refer to [Introducing Matrix Parameters](https://jfrog.com/help/r/jfrog-artifactory-documentation/using-properties-in-deployment-and-resolution).
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param repository Name of the respository.
         * 
         * @return builder
         * 
         */
        public Builder repository(Output<String> repository) {
            $.repository = repository;
            return this;
        }

        /**
         * @param repository Name of the respository.
         * 
         * @return builder
         * 
         */
        public Builder repository(String repository) {
            return repository(Output.of(repository));
        }

        public ArtifactArgs build() {
            if ($.path == null) {
                throw new MissingRequiredPropertyException("ArtifactArgs", "path");
            }
            if ($.repository == null) {
                throw new MissingRequiredPropertyException("ArtifactArgs", "repository");
            }
            return $;
        }
    }

}
