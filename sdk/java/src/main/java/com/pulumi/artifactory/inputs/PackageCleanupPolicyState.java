// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory.inputs;

import com.pulumi.artifactory.inputs.PackageCleanupPolicySearchCriteriaArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PackageCleanupPolicyState extends com.pulumi.resources.ResourceArgs {

    public static final PackageCleanupPolicyState Empty = new PackageCleanupPolicyState();

    /**
     * The cron expression that determines when the policy is run, However if left empty the policy will not run automatically and can only be triggered manually.
     * 
     */
    @Import(name="cronExpression")
    private @Nullable Output<String> cronExpression;

    /**
     * @return The cron expression that determines when the policy is run, However if left empty the policy will not run automatically and can only be triggered manually.
     * 
     */
    public Optional<Output<String>> cronExpression() {
        return Optional.ofNullable(this.cronExpression);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The maximum duration (in minutes) for policy execution, after which the policy will stop running even if not completed. While setting a maximum run duration for a policy is useful for adhering to a strict cleanup schedule, it can cause the policy to stop before completion.
     * 
     */
    @Import(name="durationInMinutes")
    private @Nullable Output<Integer> durationInMinutes;

    /**
     * @return The maximum duration (in minutes) for policy execution, after which the policy will stop running even if not completed. While setting a maximum run duration for a policy is useful for adhering to a strict cleanup schedule, it can cause the policy to stop before completion.
     * 
     */
    public Optional<Output<Integer>> durationInMinutes() {
        return Optional.ofNullable(this.durationInMinutes);
    }

    /**
     * A cleanup policy must be created inactive. But if used it must be set to `false`. If set to `true` when calling this API, the API call will fail and an error message is received. Defaults to `true`
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return A cleanup policy must be created inactive. But if used it must be set to `false`. If set to `true` when calling this API, the API call will fail and an error message is received. Defaults to `true`
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * An ID that is used to identify the cleanup policy. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return An ID that is used to identify the cleanup policy. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * This attribute is used only for project-level cleanup policies, it is not used for global-level policies. When specified, the policy will be scoped to the specified project. Note: The policy `key` must start with this project key value as a prefix (e.g., if `project_key` is `&#34;myproj&#34;`, the `key` should be `&#34;myproj-policy-name&#34;`).
     * 
     */
    @Import(name="projectKey")
    private @Nullable Output<String> projectKey;

    /**
     * @return This attribute is used only for project-level cleanup policies, it is not used for global-level policies. When specified, the policy will be scoped to the specified project. Note: The policy `key` must start with this project key value as a prefix (e.g., if `project_key` is `&#34;myproj&#34;`, the `key` should be `&#34;myproj-policy-name&#34;`).
     * 
     */
    public Optional<Output<String>> projectKey() {
        return Optional.ofNullable(this.projectKey);
    }

    @Import(name="searchCriteria")
    private @Nullable Output<PackageCleanupPolicySearchCriteriaArgs> searchCriteria;

    public Optional<Output<PackageCleanupPolicySearchCriteriaArgs>> searchCriteria() {
        return Optional.ofNullable(this.searchCriteria);
    }

    /**
     * A true value means that when this policy is executed, packages will be permanently deleted. false means that when the policy is executed packages will be deleted to the Trash Can. Defaults to `false`.
     * 
     */
    @Import(name="skipTrashcan")
    private @Nullable Output<Boolean> skipTrashcan;

    /**
     * @return A true value means that when this policy is executed, packages will be permanently deleted. false means that when the policy is executed packages will be deleted to the Trash Can. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> skipTrashcan() {
        return Optional.ofNullable(this.skipTrashcan);
    }

    private PackageCleanupPolicyState() {}

    private PackageCleanupPolicyState(PackageCleanupPolicyState $) {
        this.cronExpression = $.cronExpression;
        this.description = $.description;
        this.durationInMinutes = $.durationInMinutes;
        this.enabled = $.enabled;
        this.key = $.key;
        this.projectKey = $.projectKey;
        this.searchCriteria = $.searchCriteria;
        this.skipTrashcan = $.skipTrashcan;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PackageCleanupPolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PackageCleanupPolicyState $;

        public Builder() {
            $ = new PackageCleanupPolicyState();
        }

        public Builder(PackageCleanupPolicyState defaults) {
            $ = new PackageCleanupPolicyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param cronExpression The cron expression that determines when the policy is run, However if left empty the policy will not run automatically and can only be triggered manually.
         * 
         * @return builder
         * 
         */
        public Builder cronExpression(@Nullable Output<String> cronExpression) {
            $.cronExpression = cronExpression;
            return this;
        }

        /**
         * @param cronExpression The cron expression that determines when the policy is run, However if left empty the policy will not run automatically and can only be triggered manually.
         * 
         * @return builder
         * 
         */
        public Builder cronExpression(String cronExpression) {
            return cronExpression(Output.of(cronExpression));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param durationInMinutes The maximum duration (in minutes) for policy execution, after which the policy will stop running even if not completed. While setting a maximum run duration for a policy is useful for adhering to a strict cleanup schedule, it can cause the policy to stop before completion.
         * 
         * @return builder
         * 
         */
        public Builder durationInMinutes(@Nullable Output<Integer> durationInMinutes) {
            $.durationInMinutes = durationInMinutes;
            return this;
        }

        /**
         * @param durationInMinutes The maximum duration (in minutes) for policy execution, after which the policy will stop running even if not completed. While setting a maximum run duration for a policy is useful for adhering to a strict cleanup schedule, it can cause the policy to stop before completion.
         * 
         * @return builder
         * 
         */
        public Builder durationInMinutes(Integer durationInMinutes) {
            return durationInMinutes(Output.of(durationInMinutes));
        }

        /**
         * @param enabled A cleanup policy must be created inactive. But if used it must be set to `false`. If set to `true` when calling this API, the API call will fail and an error message is received. Defaults to `true`
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled A cleanup policy must be created inactive. But if used it must be set to `false`. If set to `true` when calling this API, the API call will fail and an error message is received. Defaults to `true`
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param key An ID that is used to identify the cleanup policy. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key An ID that is used to identify the cleanup policy. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param projectKey This attribute is used only for project-level cleanup policies, it is not used for global-level policies. When specified, the policy will be scoped to the specified project. Note: The policy `key` must start with this project key value as a prefix (e.g., if `project_key` is `&#34;myproj&#34;`, the `key` should be `&#34;myproj-policy-name&#34;`).
         * 
         * @return builder
         * 
         */
        public Builder projectKey(@Nullable Output<String> projectKey) {
            $.projectKey = projectKey;
            return this;
        }

        /**
         * @param projectKey This attribute is used only for project-level cleanup policies, it is not used for global-level policies. When specified, the policy will be scoped to the specified project. Note: The policy `key` must start with this project key value as a prefix (e.g., if `project_key` is `&#34;myproj&#34;`, the `key` should be `&#34;myproj-policy-name&#34;`).
         * 
         * @return builder
         * 
         */
        public Builder projectKey(String projectKey) {
            return projectKey(Output.of(projectKey));
        }

        public Builder searchCriteria(@Nullable Output<PackageCleanupPolicySearchCriteriaArgs> searchCriteria) {
            $.searchCriteria = searchCriteria;
            return this;
        }

        public Builder searchCriteria(PackageCleanupPolicySearchCriteriaArgs searchCriteria) {
            return searchCriteria(Output.of(searchCriteria));
        }

        /**
         * @param skipTrashcan A true value means that when this policy is executed, packages will be permanently deleted. false means that when the policy is executed packages will be deleted to the Trash Can. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder skipTrashcan(@Nullable Output<Boolean> skipTrashcan) {
            $.skipTrashcan = skipTrashcan;
            return this;
        }

        /**
         * @param skipTrashcan A true value means that when this policy is executed, packages will be permanently deleted. false means that when the policy is executed packages will be deleted to the Trash Can. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder skipTrashcan(Boolean skipTrashcan) {
            return skipTrashcan(Output.of(skipTrashcan));
        }

        public PackageCleanupPolicyState build() {
            return $;
        }
    }

}
