// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReleaseBundleV2PromotionState extends com.pulumi.resources.ResourceArgs {

    public static final ReleaseBundleV2PromotionState Empty = new ReleaseBundleV2PromotionState();

    /**
     * Timestamp when the new version was created (ISO 8601 standard).
     * 
     */
    @Import(name="created")
    private @Nullable Output<String> created;

    /**
     * @return Timestamp when the new version was created (ISO 8601 standard).
     * 
     */
    public Optional<Output<String>> created() {
        return Optional.ofNullable(this.created);
    }

    /**
     * Timestamp when the new version was created (in milliseconds).
     * 
     */
    @Import(name="createdMillis")
    private @Nullable Output<Integer> createdMillis;

    /**
     * @return Timestamp when the new version was created (in milliseconds).
     * 
     */
    public Optional<Output<Integer>> createdMillis() {
        return Optional.ofNullable(this.createdMillis);
    }

    /**
     * Target environment
     * 
     */
    @Import(name="environment")
    private @Nullable Output<String> environment;

    /**
     * @return Target environment
     * 
     */
    public Optional<Output<String>> environment() {
        return Optional.ofNullable(this.environment);
    }

    /**
     * Defines specific repositories to exclude from the promotion.
     * 
     */
    @Import(name="excludedRepositoryKeys")
    private @Nullable Output<List<String>> excludedRepositoryKeys;

    /**
     * @return Defines specific repositories to exclude from the promotion.
     * 
     */
    public Optional<Output<List<String>>> excludedRepositoryKeys() {
        return Optional.ofNullable(this.excludedRepositoryKeys);
    }

    /**
     * Defines specific repositories to include in the promotion. If this property is left undefined, all repositories (except those specifically excluded) are included in the promotion. Important: If one or more repositories are specifically included, all other repositories are excluded (regardless of what is defined in `excluded_repository_keys`).
     * 
     */
    @Import(name="includedRepositoryKeys")
    private @Nullable Output<List<String>> includedRepositoryKeys;

    /**
     * @return Defines specific repositories to include in the promotion. If this property is left undefined, all repositories (except those specifically excluded) are included in the promotion. Important: If one or more repositories are specifically included, all other repositories are excluded (regardless of what is defined in `excluded_repository_keys`).
     * 
     */
    public Optional<Output<List<String>>> includedRepositoryKeys() {
        return Optional.ofNullable(this.includedRepositoryKeys);
    }

    /**
     * Key-pair name to use for signature creation
     * 
     */
    @Import(name="keypairName")
    private @Nullable Output<String> keypairName;

    /**
     * @return Key-pair name to use for signature creation
     * 
     */
    public Optional<Output<String>> keypairName() {
        return Optional.ofNullable(this.keypairName);
    }

    /**
     * Name of Release Bundle
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of Release Bundle
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Project key the Release Bundle belongs to
     * 
     */
    @Import(name="projectKey")
    private @Nullable Output<String> projectKey;

    /**
     * @return Project key the Release Bundle belongs to
     * 
     */
    public Optional<Output<String>> projectKey() {
        return Optional.ofNullable(this.projectKey);
    }

    /**
     * Version to promote
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return Version to promote
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private ReleaseBundleV2PromotionState() {}

    private ReleaseBundleV2PromotionState(ReleaseBundleV2PromotionState $) {
        this.created = $.created;
        this.createdMillis = $.createdMillis;
        this.environment = $.environment;
        this.excludedRepositoryKeys = $.excludedRepositoryKeys;
        this.includedRepositoryKeys = $.includedRepositoryKeys;
        this.keypairName = $.keypairName;
        this.name = $.name;
        this.projectKey = $.projectKey;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReleaseBundleV2PromotionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReleaseBundleV2PromotionState $;

        public Builder() {
            $ = new ReleaseBundleV2PromotionState();
        }

        public Builder(ReleaseBundleV2PromotionState defaults) {
            $ = new ReleaseBundleV2PromotionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param created Timestamp when the new version was created (ISO 8601 standard).
         * 
         * @return builder
         * 
         */
        public Builder created(@Nullable Output<String> created) {
            $.created = created;
            return this;
        }

        /**
         * @param created Timestamp when the new version was created (ISO 8601 standard).
         * 
         * @return builder
         * 
         */
        public Builder created(String created) {
            return created(Output.of(created));
        }

        /**
         * @param createdMillis Timestamp when the new version was created (in milliseconds).
         * 
         * @return builder
         * 
         */
        public Builder createdMillis(@Nullable Output<Integer> createdMillis) {
            $.createdMillis = createdMillis;
            return this;
        }

        /**
         * @param createdMillis Timestamp when the new version was created (in milliseconds).
         * 
         * @return builder
         * 
         */
        public Builder createdMillis(Integer createdMillis) {
            return createdMillis(Output.of(createdMillis));
        }

        /**
         * @param environment Target environment
         * 
         * @return builder
         * 
         */
        public Builder environment(@Nullable Output<String> environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param environment Target environment
         * 
         * @return builder
         * 
         */
        public Builder environment(String environment) {
            return environment(Output.of(environment));
        }

        /**
         * @param excludedRepositoryKeys Defines specific repositories to exclude from the promotion.
         * 
         * @return builder
         * 
         */
        public Builder excludedRepositoryKeys(@Nullable Output<List<String>> excludedRepositoryKeys) {
            $.excludedRepositoryKeys = excludedRepositoryKeys;
            return this;
        }

        /**
         * @param excludedRepositoryKeys Defines specific repositories to exclude from the promotion.
         * 
         * @return builder
         * 
         */
        public Builder excludedRepositoryKeys(List<String> excludedRepositoryKeys) {
            return excludedRepositoryKeys(Output.of(excludedRepositoryKeys));
        }

        /**
         * @param excludedRepositoryKeys Defines specific repositories to exclude from the promotion.
         * 
         * @return builder
         * 
         */
        public Builder excludedRepositoryKeys(String... excludedRepositoryKeys) {
            return excludedRepositoryKeys(List.of(excludedRepositoryKeys));
        }

        /**
         * @param includedRepositoryKeys Defines specific repositories to include in the promotion. If this property is left undefined, all repositories (except those specifically excluded) are included in the promotion. Important: If one or more repositories are specifically included, all other repositories are excluded (regardless of what is defined in `excluded_repository_keys`).
         * 
         * @return builder
         * 
         */
        public Builder includedRepositoryKeys(@Nullable Output<List<String>> includedRepositoryKeys) {
            $.includedRepositoryKeys = includedRepositoryKeys;
            return this;
        }

        /**
         * @param includedRepositoryKeys Defines specific repositories to include in the promotion. If this property is left undefined, all repositories (except those specifically excluded) are included in the promotion. Important: If one or more repositories are specifically included, all other repositories are excluded (regardless of what is defined in `excluded_repository_keys`).
         * 
         * @return builder
         * 
         */
        public Builder includedRepositoryKeys(List<String> includedRepositoryKeys) {
            return includedRepositoryKeys(Output.of(includedRepositoryKeys));
        }

        /**
         * @param includedRepositoryKeys Defines specific repositories to include in the promotion. If this property is left undefined, all repositories (except those specifically excluded) are included in the promotion. Important: If one or more repositories are specifically included, all other repositories are excluded (regardless of what is defined in `excluded_repository_keys`).
         * 
         * @return builder
         * 
         */
        public Builder includedRepositoryKeys(String... includedRepositoryKeys) {
            return includedRepositoryKeys(List.of(includedRepositoryKeys));
        }

        /**
         * @param keypairName Key-pair name to use for signature creation
         * 
         * @return builder
         * 
         */
        public Builder keypairName(@Nullable Output<String> keypairName) {
            $.keypairName = keypairName;
            return this;
        }

        /**
         * @param keypairName Key-pair name to use for signature creation
         * 
         * @return builder
         * 
         */
        public Builder keypairName(String keypairName) {
            return keypairName(Output.of(keypairName));
        }

        /**
         * @param name Name of Release Bundle
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of Release Bundle
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectKey Project key the Release Bundle belongs to
         * 
         * @return builder
         * 
         */
        public Builder projectKey(@Nullable Output<String> projectKey) {
            $.projectKey = projectKey;
            return this;
        }

        /**
         * @param projectKey Project key the Release Bundle belongs to
         * 
         * @return builder
         * 
         */
        public Builder projectKey(String projectKey) {
            return projectKey(Output.of(projectKey));
        }

        /**
         * @param version Version to promote
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Version to promote
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public ReleaseBundleV2PromotionState build() {
            return $;
        }
    }

}
