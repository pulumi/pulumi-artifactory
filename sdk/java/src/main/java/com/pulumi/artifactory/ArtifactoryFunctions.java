// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory;

import com.pulumi.artifactory.Utilities;
import com.pulumi.artifactory.inputs.GetFileArgs;
import com.pulumi.artifactory.inputs.GetFilePlainArgs;
import com.pulumi.artifactory.inputs.GetFileinfoArgs;
import com.pulumi.artifactory.inputs.GetFileinfoPlainArgs;
import com.pulumi.artifactory.outputs.GetFileResult;
import com.pulumi.artifactory.outputs.GetFileinfoResult;
import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import java.util.concurrent.CompletableFuture;

public final class ArtifactoryFunctions {
    /**
     * ## # Artifactory File Data Source
     * 
     * Provides an Artifactory file datasource. This can be used to download a file from a given Artifactory repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-file = ArtifactoryFunctions.getFile(GetFileArgs.builder()
     *             .outputPath(&#34;tmp/artifact.zip&#34;)
     *             .path(&#34;/path/to/the/artifact.zip&#34;)
     *             .repository(&#34;repo-key&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFileResult> getFile(GetFileArgs args) {
        return getFile(args, InvokeOptions.Empty);
    }
    /**
     * ## # Artifactory File Data Source
     * 
     * Provides an Artifactory file datasource. This can be used to download a file from a given Artifactory repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-file = ArtifactoryFunctions.getFile(GetFileArgs.builder()
     *             .outputPath(&#34;tmp/artifact.zip&#34;)
     *             .path(&#34;/path/to/the/artifact.zip&#34;)
     *             .repository(&#34;repo-key&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFileResult> getFilePlain(GetFilePlainArgs args) {
        return getFilePlain(args, InvokeOptions.Empty);
    }
    /**
     * ## # Artifactory File Data Source
     * 
     * Provides an Artifactory file datasource. This can be used to download a file from a given Artifactory repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-file = ArtifactoryFunctions.getFile(GetFileArgs.builder()
     *             .outputPath(&#34;tmp/artifact.zip&#34;)
     *             .path(&#34;/path/to/the/artifact.zip&#34;)
     *             .repository(&#34;repo-key&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFileResult> getFile(GetFileArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFile:getFile", TypeShape.of(GetFileResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## # Artifactory File Data Source
     * 
     * Provides an Artifactory file datasource. This can be used to download a file from a given Artifactory repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-file = ArtifactoryFunctions.getFile(GetFileArgs.builder()
     *             .outputPath(&#34;tmp/artifact.zip&#34;)
     *             .path(&#34;/path/to/the/artifact.zip&#34;)
     *             .repository(&#34;repo-key&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFileResult> getFilePlain(GetFilePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFile:getFile", TypeShape.of(GetFileResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## # Artifactory File Info Data Source
     * 
     * Provides an Artifactory fileinfo datasource. This can be used to read metadata of files stored in Artifactory repositories.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFileinfoArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-file = ArtifactoryFunctions.getFileinfo(GetFileinfoArgs.builder()
     *             .path(&#34;/path/to/the/artifact.zip&#34;)
     *             .repository(&#34;repo-key&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFileinfoResult> getFileinfo(GetFileinfoArgs args) {
        return getFileinfo(args, InvokeOptions.Empty);
    }
    /**
     * ## # Artifactory File Info Data Source
     * 
     * Provides an Artifactory fileinfo datasource. This can be used to read metadata of files stored in Artifactory repositories.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFileinfoArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-file = ArtifactoryFunctions.getFileinfo(GetFileinfoArgs.builder()
     *             .path(&#34;/path/to/the/artifact.zip&#34;)
     *             .repository(&#34;repo-key&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFileinfoResult> getFileinfoPlain(GetFileinfoPlainArgs args) {
        return getFileinfoPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## # Artifactory File Info Data Source
     * 
     * Provides an Artifactory fileinfo datasource. This can be used to read metadata of files stored in Artifactory repositories.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFileinfoArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-file = ArtifactoryFunctions.getFileinfo(GetFileinfoArgs.builder()
     *             .path(&#34;/path/to/the/artifact.zip&#34;)
     *             .repository(&#34;repo-key&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFileinfoResult> getFileinfo(GetFileinfoArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFileinfo:getFileinfo", TypeShape.of(GetFileinfoResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## # Artifactory File Info Data Source
     * 
     * Provides an Artifactory fileinfo datasource. This can be used to read metadata of files stored in Artifactory repositories.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFileinfoArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-file = ArtifactoryFunctions.getFileinfo(GetFileinfoArgs.builder()
     *             .path(&#34;/path/to/the/artifact.zip&#34;)
     *             .repository(&#34;repo-key&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFileinfoResult> getFileinfoPlain(GetFileinfoPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFileinfo:getFileinfo", TypeShape.of(GetFileinfoResult.class), args, Utilities.withVersion(options));
    }
}
