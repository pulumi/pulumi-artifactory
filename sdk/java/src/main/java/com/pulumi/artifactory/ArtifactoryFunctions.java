// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory;

import com.pulumi.artifactory.Utilities;
import com.pulumi.artifactory.inputs.GetFederatedAlpineRepositoryArgs;
import com.pulumi.artifactory.inputs.GetFederatedAlpineRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetFederatedBowerRepositoryArgs;
import com.pulumi.artifactory.inputs.GetFederatedBowerRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetFederatedCargoRepositoryArgs;
import com.pulumi.artifactory.inputs.GetFederatedCargoRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetFederatedChefRepositoryArgs;
import com.pulumi.artifactory.inputs.GetFederatedChefRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetFederatedCocoapodsRepositoryArgs;
import com.pulumi.artifactory.inputs.GetFederatedCocoapodsRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetFederatedComposerRepositoryArgs;
import com.pulumi.artifactory.inputs.GetFederatedComposerRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetFederatedConanRepositoryArgs;
import com.pulumi.artifactory.inputs.GetFederatedConanRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetFederatedCondaRepositoryArgs;
import com.pulumi.artifactory.inputs.GetFederatedCondaRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetFederatedCranRepositoryArgs;
import com.pulumi.artifactory.inputs.GetFederatedCranRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetFederatedDebianRepositoryArgs;
import com.pulumi.artifactory.inputs.GetFederatedDebianRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetFederatedDockerRepositoryArgs;
import com.pulumi.artifactory.inputs.GetFederatedDockerRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetFederatedDockerV1RepositoryArgs;
import com.pulumi.artifactory.inputs.GetFederatedDockerV1RepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetFederatedDockerV2RepositoryArgs;
import com.pulumi.artifactory.inputs.GetFederatedDockerV2RepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetFederatedGemsRepositoryArgs;
import com.pulumi.artifactory.inputs.GetFederatedGemsRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetFederatedGenericRepositoryArgs;
import com.pulumi.artifactory.inputs.GetFederatedGenericRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetFederatedGitlfsRepositoryArgs;
import com.pulumi.artifactory.inputs.GetFederatedGitlfsRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetFederatedGoRepositoryArgs;
import com.pulumi.artifactory.inputs.GetFederatedGoRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetFederatedGradleRepositoryArgs;
import com.pulumi.artifactory.inputs.GetFederatedGradleRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetFederatedHelmRepositoryArgs;
import com.pulumi.artifactory.inputs.GetFederatedHelmRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetFederatedIvyRepositoryArgs;
import com.pulumi.artifactory.inputs.GetFederatedIvyRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetFederatedMavenRepositoryArgs;
import com.pulumi.artifactory.inputs.GetFederatedMavenRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetFederatedNpmRepositoryArgs;
import com.pulumi.artifactory.inputs.GetFederatedNpmRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetFederatedNugetRepositoryArgs;
import com.pulumi.artifactory.inputs.GetFederatedNugetRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetFederatedOpkgRepositoryArgs;
import com.pulumi.artifactory.inputs.GetFederatedOpkgRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetFederatedPuppetRepositoryArgs;
import com.pulumi.artifactory.inputs.GetFederatedPuppetRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetFederatedPypiRepositoryArgs;
import com.pulumi.artifactory.inputs.GetFederatedPypiRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetFederatedRpmRepositoryArgs;
import com.pulumi.artifactory.inputs.GetFederatedRpmRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetFederatedSbtRepositoryArgs;
import com.pulumi.artifactory.inputs.GetFederatedSbtRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetFederatedSwiftRepositoryArgs;
import com.pulumi.artifactory.inputs.GetFederatedSwiftRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetFederatedTerraformModuleRepositoryArgs;
import com.pulumi.artifactory.inputs.GetFederatedTerraformModuleRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetFederatedTerraformProviderRepositoryArgs;
import com.pulumi.artifactory.inputs.GetFederatedTerraformProviderRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetFederatedVagrantRepositoryArgs;
import com.pulumi.artifactory.inputs.GetFederatedVagrantRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetFileArgs;
import com.pulumi.artifactory.inputs.GetFilePlainArgs;
import com.pulumi.artifactory.inputs.GetFileinfoArgs;
import com.pulumi.artifactory.inputs.GetFileinfoPlainArgs;
import com.pulumi.artifactory.inputs.GetGroupArgs;
import com.pulumi.artifactory.inputs.GetGroupPlainArgs;
import com.pulumi.artifactory.inputs.GetLocalAlpineRepositoryArgs;
import com.pulumi.artifactory.inputs.GetLocalAlpineRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetLocalBowerRepositoryArgs;
import com.pulumi.artifactory.inputs.GetLocalBowerRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetLocalCargoRepositoryArgs;
import com.pulumi.artifactory.inputs.GetLocalCargoRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetLocalChefRepositoryArgs;
import com.pulumi.artifactory.inputs.GetLocalChefRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetLocalCocoapodsRepositoryArgs;
import com.pulumi.artifactory.inputs.GetLocalCocoapodsRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetLocalComposerRepositoryArgs;
import com.pulumi.artifactory.inputs.GetLocalComposerRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetLocalConanRepositoryArgs;
import com.pulumi.artifactory.inputs.GetLocalConanRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetLocalCondaRepositoryArgs;
import com.pulumi.artifactory.inputs.GetLocalCondaRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetLocalCranRepositoryArgs;
import com.pulumi.artifactory.inputs.GetLocalCranRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetLocalDebianRepositoryArgs;
import com.pulumi.artifactory.inputs.GetLocalDebianRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetLocalDockerV1RepositoryArgs;
import com.pulumi.artifactory.inputs.GetLocalDockerV1RepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetLocalDockerV2RepositoryArgs;
import com.pulumi.artifactory.inputs.GetLocalDockerV2RepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetLocalGemsRepositoryArgs;
import com.pulumi.artifactory.inputs.GetLocalGemsRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetLocalGenericRepositoryArgs;
import com.pulumi.artifactory.inputs.GetLocalGenericRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetLocalGitlfsRepositoryArgs;
import com.pulumi.artifactory.inputs.GetLocalGitlfsRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetLocalGoRepositoryArgs;
import com.pulumi.artifactory.inputs.GetLocalGoRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetLocalGradleRepositoryArgs;
import com.pulumi.artifactory.inputs.GetLocalGradleRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetLocalHelmRepositoryArgs;
import com.pulumi.artifactory.inputs.GetLocalHelmRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetLocalIvyRepositoryArgs;
import com.pulumi.artifactory.inputs.GetLocalIvyRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetLocalMavenRepositoryArgs;
import com.pulumi.artifactory.inputs.GetLocalMavenRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetLocalNpmRepositoryArgs;
import com.pulumi.artifactory.inputs.GetLocalNpmRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetLocalNugetRepositoryArgs;
import com.pulumi.artifactory.inputs.GetLocalNugetRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetLocalOpkgRepositoryArgs;
import com.pulumi.artifactory.inputs.GetLocalOpkgRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetLocalPubRepositoryArgs;
import com.pulumi.artifactory.inputs.GetLocalPubRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetLocalPuppetRepositoryArgs;
import com.pulumi.artifactory.inputs.GetLocalPuppetRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetLocalPypiRepositoryArgs;
import com.pulumi.artifactory.inputs.GetLocalPypiRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetLocalRpmRepositoryArgs;
import com.pulumi.artifactory.inputs.GetLocalRpmRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetLocalSbtRepositoryArgs;
import com.pulumi.artifactory.inputs.GetLocalSbtRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetLocalSwiftRepositoryArgs;
import com.pulumi.artifactory.inputs.GetLocalSwiftRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetLocalTerraformModuleRepositoryArgs;
import com.pulumi.artifactory.inputs.GetLocalTerraformModuleRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetLocalTerraformProviderRepositoryArgs;
import com.pulumi.artifactory.inputs.GetLocalTerraformProviderRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetLocalTerraformbackendRepositoryArgs;
import com.pulumi.artifactory.inputs.GetLocalTerraformbackendRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetLocalVagrantRepositoryArgs;
import com.pulumi.artifactory.inputs.GetLocalVagrantRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetPermissionTargetArgs;
import com.pulumi.artifactory.inputs.GetPermissionTargetPlainArgs;
import com.pulumi.artifactory.inputs.GetRemoteAlpineRepositoryArgs;
import com.pulumi.artifactory.inputs.GetRemoteAlpineRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetRemoteBowerRepositoryArgs;
import com.pulumi.artifactory.inputs.GetRemoteBowerRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetRemoteCargoRepositoryArgs;
import com.pulumi.artifactory.inputs.GetRemoteCargoRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetRemoteChefRepositoryArgs;
import com.pulumi.artifactory.inputs.GetRemoteChefRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetRemoteCocoapodsRepositoryArgs;
import com.pulumi.artifactory.inputs.GetRemoteCocoapodsRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetRemoteComposerRepositoryArgs;
import com.pulumi.artifactory.inputs.GetRemoteComposerRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetRemoteConanRepositoryArgs;
import com.pulumi.artifactory.inputs.GetRemoteConanRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetRemoteCondaRepositoryArgs;
import com.pulumi.artifactory.inputs.GetRemoteCondaRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetRemoteCranRepositoryArgs;
import com.pulumi.artifactory.inputs.GetRemoteCranRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetRemoteDebianRepositoryArgs;
import com.pulumi.artifactory.inputs.GetRemoteDebianRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetRemoteDockerRepositoryArgs;
import com.pulumi.artifactory.inputs.GetRemoteDockerRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetRemoteGemsRepositoryArgs;
import com.pulumi.artifactory.inputs.GetRemoteGemsRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetRemoteGenericRepositoryArgs;
import com.pulumi.artifactory.inputs.GetRemoteGenericRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetRemoteGitlfsRepositoryArgs;
import com.pulumi.artifactory.inputs.GetRemoteGitlfsRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetRemoteGoRepositoryArgs;
import com.pulumi.artifactory.inputs.GetRemoteGoRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetRemoteGradleRepositoryArgs;
import com.pulumi.artifactory.inputs.GetRemoteGradleRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetRemoteHelmRepositoryArgs;
import com.pulumi.artifactory.inputs.GetRemoteHelmRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetRemoteIvyRepositoryArgs;
import com.pulumi.artifactory.inputs.GetRemoteIvyRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetRemoteMavenRepositoryArgs;
import com.pulumi.artifactory.inputs.GetRemoteMavenRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetRemoteNpmRepositoryArgs;
import com.pulumi.artifactory.inputs.GetRemoteNpmRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetRemoteNugetRepositoryArgs;
import com.pulumi.artifactory.inputs.GetRemoteNugetRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetRemoteOpkgRepositoryArgs;
import com.pulumi.artifactory.inputs.GetRemoteOpkgRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetRemoteP2RepositoryArgs;
import com.pulumi.artifactory.inputs.GetRemoteP2RepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetRemotePubRepositoryArgs;
import com.pulumi.artifactory.inputs.GetRemotePubRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetRemotePuppetRepositoryArgs;
import com.pulumi.artifactory.inputs.GetRemotePuppetRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetRemotePypiRepositoryArgs;
import com.pulumi.artifactory.inputs.GetRemotePypiRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetRemoteRpmRepositoryArgs;
import com.pulumi.artifactory.inputs.GetRemoteRpmRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetRemoteSbtRepositoryArgs;
import com.pulumi.artifactory.inputs.GetRemoteSbtRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetRemoteSwiftRepositoryArgs;
import com.pulumi.artifactory.inputs.GetRemoteSwiftRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetRemoteTerraformRepositoryArgs;
import com.pulumi.artifactory.inputs.GetRemoteTerraformRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetRemoteVcsRepositoryArgs;
import com.pulumi.artifactory.inputs.GetRemoteVcsRepositoryPlainArgs;
import com.pulumi.artifactory.inputs.GetUserArgs;
import com.pulumi.artifactory.inputs.GetUserPlainArgs;
import com.pulumi.artifactory.outputs.GetFederatedAlpineRepositoryResult;
import com.pulumi.artifactory.outputs.GetFederatedBowerRepositoryResult;
import com.pulumi.artifactory.outputs.GetFederatedCargoRepositoryResult;
import com.pulumi.artifactory.outputs.GetFederatedChefRepositoryResult;
import com.pulumi.artifactory.outputs.GetFederatedCocoapodsRepositoryResult;
import com.pulumi.artifactory.outputs.GetFederatedComposerRepositoryResult;
import com.pulumi.artifactory.outputs.GetFederatedConanRepositoryResult;
import com.pulumi.artifactory.outputs.GetFederatedCondaRepositoryResult;
import com.pulumi.artifactory.outputs.GetFederatedCranRepositoryResult;
import com.pulumi.artifactory.outputs.GetFederatedDebianRepositoryResult;
import com.pulumi.artifactory.outputs.GetFederatedDockerRepositoryResult;
import com.pulumi.artifactory.outputs.GetFederatedDockerV1RepositoryResult;
import com.pulumi.artifactory.outputs.GetFederatedDockerV2RepositoryResult;
import com.pulumi.artifactory.outputs.GetFederatedGemsRepositoryResult;
import com.pulumi.artifactory.outputs.GetFederatedGenericRepositoryResult;
import com.pulumi.artifactory.outputs.GetFederatedGitlfsRepositoryResult;
import com.pulumi.artifactory.outputs.GetFederatedGoRepositoryResult;
import com.pulumi.artifactory.outputs.GetFederatedGradleRepositoryResult;
import com.pulumi.artifactory.outputs.GetFederatedHelmRepositoryResult;
import com.pulumi.artifactory.outputs.GetFederatedIvyRepositoryResult;
import com.pulumi.artifactory.outputs.GetFederatedMavenRepositoryResult;
import com.pulumi.artifactory.outputs.GetFederatedNpmRepositoryResult;
import com.pulumi.artifactory.outputs.GetFederatedNugetRepositoryResult;
import com.pulumi.artifactory.outputs.GetFederatedOpkgRepositoryResult;
import com.pulumi.artifactory.outputs.GetFederatedPuppetRepositoryResult;
import com.pulumi.artifactory.outputs.GetFederatedPypiRepositoryResult;
import com.pulumi.artifactory.outputs.GetFederatedRpmRepositoryResult;
import com.pulumi.artifactory.outputs.GetFederatedSbtRepositoryResult;
import com.pulumi.artifactory.outputs.GetFederatedSwiftRepositoryResult;
import com.pulumi.artifactory.outputs.GetFederatedTerraformModuleRepositoryResult;
import com.pulumi.artifactory.outputs.GetFederatedTerraformProviderRepositoryResult;
import com.pulumi.artifactory.outputs.GetFederatedVagrantRepositoryResult;
import com.pulumi.artifactory.outputs.GetFileResult;
import com.pulumi.artifactory.outputs.GetFileinfoResult;
import com.pulumi.artifactory.outputs.GetGroupResult;
import com.pulumi.artifactory.outputs.GetLocalAlpineRepositoryResult;
import com.pulumi.artifactory.outputs.GetLocalBowerRepositoryResult;
import com.pulumi.artifactory.outputs.GetLocalCargoRepositoryResult;
import com.pulumi.artifactory.outputs.GetLocalChefRepositoryResult;
import com.pulumi.artifactory.outputs.GetLocalCocoapodsRepositoryResult;
import com.pulumi.artifactory.outputs.GetLocalComposerRepositoryResult;
import com.pulumi.artifactory.outputs.GetLocalConanRepositoryResult;
import com.pulumi.artifactory.outputs.GetLocalCondaRepositoryResult;
import com.pulumi.artifactory.outputs.GetLocalCranRepositoryResult;
import com.pulumi.artifactory.outputs.GetLocalDebianRepositoryResult;
import com.pulumi.artifactory.outputs.GetLocalDockerV1RepositoryResult;
import com.pulumi.artifactory.outputs.GetLocalDockerV2RepositoryResult;
import com.pulumi.artifactory.outputs.GetLocalGemsRepositoryResult;
import com.pulumi.artifactory.outputs.GetLocalGenericRepositoryResult;
import com.pulumi.artifactory.outputs.GetLocalGitlfsRepositoryResult;
import com.pulumi.artifactory.outputs.GetLocalGoRepositoryResult;
import com.pulumi.artifactory.outputs.GetLocalGradleRepositoryResult;
import com.pulumi.artifactory.outputs.GetLocalHelmRepositoryResult;
import com.pulumi.artifactory.outputs.GetLocalIvyRepositoryResult;
import com.pulumi.artifactory.outputs.GetLocalMavenRepositoryResult;
import com.pulumi.artifactory.outputs.GetLocalNpmRepositoryResult;
import com.pulumi.artifactory.outputs.GetLocalNugetRepositoryResult;
import com.pulumi.artifactory.outputs.GetLocalOpkgRepositoryResult;
import com.pulumi.artifactory.outputs.GetLocalPubRepositoryResult;
import com.pulumi.artifactory.outputs.GetLocalPuppetRepositoryResult;
import com.pulumi.artifactory.outputs.GetLocalPypiRepositoryResult;
import com.pulumi.artifactory.outputs.GetLocalRpmRepositoryResult;
import com.pulumi.artifactory.outputs.GetLocalSbtRepositoryResult;
import com.pulumi.artifactory.outputs.GetLocalSwiftRepositoryResult;
import com.pulumi.artifactory.outputs.GetLocalTerraformModuleRepositoryResult;
import com.pulumi.artifactory.outputs.GetLocalTerraformProviderRepositoryResult;
import com.pulumi.artifactory.outputs.GetLocalTerraformbackendRepositoryResult;
import com.pulumi.artifactory.outputs.GetLocalVagrantRepositoryResult;
import com.pulumi.artifactory.outputs.GetPermissionTargetResult;
import com.pulumi.artifactory.outputs.GetRemoteAlpineRepositoryResult;
import com.pulumi.artifactory.outputs.GetRemoteBowerRepositoryResult;
import com.pulumi.artifactory.outputs.GetRemoteCargoRepositoryResult;
import com.pulumi.artifactory.outputs.GetRemoteChefRepositoryResult;
import com.pulumi.artifactory.outputs.GetRemoteCocoapodsRepositoryResult;
import com.pulumi.artifactory.outputs.GetRemoteComposerRepositoryResult;
import com.pulumi.artifactory.outputs.GetRemoteConanRepositoryResult;
import com.pulumi.artifactory.outputs.GetRemoteCondaRepositoryResult;
import com.pulumi.artifactory.outputs.GetRemoteCranRepositoryResult;
import com.pulumi.artifactory.outputs.GetRemoteDebianRepositoryResult;
import com.pulumi.artifactory.outputs.GetRemoteDockerRepositoryResult;
import com.pulumi.artifactory.outputs.GetRemoteGemsRepositoryResult;
import com.pulumi.artifactory.outputs.GetRemoteGenericRepositoryResult;
import com.pulumi.artifactory.outputs.GetRemoteGitlfsRepositoryResult;
import com.pulumi.artifactory.outputs.GetRemoteGoRepositoryResult;
import com.pulumi.artifactory.outputs.GetRemoteGradleRepositoryResult;
import com.pulumi.artifactory.outputs.GetRemoteHelmRepositoryResult;
import com.pulumi.artifactory.outputs.GetRemoteIvyRepositoryResult;
import com.pulumi.artifactory.outputs.GetRemoteMavenRepositoryResult;
import com.pulumi.artifactory.outputs.GetRemoteNpmRepositoryResult;
import com.pulumi.artifactory.outputs.GetRemoteNugetRepositoryResult;
import com.pulumi.artifactory.outputs.GetRemoteOpkgRepositoryResult;
import com.pulumi.artifactory.outputs.GetRemoteP2RepositoryResult;
import com.pulumi.artifactory.outputs.GetRemotePubRepositoryResult;
import com.pulumi.artifactory.outputs.GetRemotePuppetRepositoryResult;
import com.pulumi.artifactory.outputs.GetRemotePypiRepositoryResult;
import com.pulumi.artifactory.outputs.GetRemoteRpmRepositoryResult;
import com.pulumi.artifactory.outputs.GetRemoteSbtRepositoryResult;
import com.pulumi.artifactory.outputs.GetRemoteSwiftRepositoryResult;
import com.pulumi.artifactory.outputs.GetRemoteTerraformRepositoryResult;
import com.pulumi.artifactory.outputs.GetRemoteVcsRepositoryResult;
import com.pulumi.artifactory.outputs.GetUserResult;
import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import java.util.concurrent.CompletableFuture;

public final class ArtifactoryFunctions {
    /**
     * Retrieves a federated Alpine repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedAlpineRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-alpine-repo = ArtifactoryFunctions.getFederatedAlpineRepository(GetFederatedAlpineRepositoryArgs.builder()
     *             .key(&#34;federated-test-alpine-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedAlpineRepositoryResult> getFederatedAlpineRepository(GetFederatedAlpineRepositoryArgs args) {
        return getFederatedAlpineRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Alpine repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedAlpineRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-alpine-repo = ArtifactoryFunctions.getFederatedAlpineRepository(GetFederatedAlpineRepositoryArgs.builder()
     *             .key(&#34;federated-test-alpine-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedAlpineRepositoryResult> getFederatedAlpineRepositoryPlain(GetFederatedAlpineRepositoryPlainArgs args) {
        return getFederatedAlpineRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Alpine repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedAlpineRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-alpine-repo = ArtifactoryFunctions.getFederatedAlpineRepository(GetFederatedAlpineRepositoryArgs.builder()
     *             .key(&#34;federated-test-alpine-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedAlpineRepositoryResult> getFederatedAlpineRepository(GetFederatedAlpineRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFederatedAlpineRepository:getFederatedAlpineRepository", TypeShape.of(GetFederatedAlpineRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Alpine repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedAlpineRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-alpine-repo = ArtifactoryFunctions.getFederatedAlpineRepository(GetFederatedAlpineRepositoryArgs.builder()
     *             .key(&#34;federated-test-alpine-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedAlpineRepositoryResult> getFederatedAlpineRepositoryPlain(GetFederatedAlpineRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFederatedAlpineRepository:getFederatedAlpineRepository", TypeShape.of(GetFederatedAlpineRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Bower repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedBowerRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-bower-repo = ArtifactoryFunctions.getFederatedBowerRepository(GetFederatedBowerRepositoryArgs.builder()
     *             .key(&#34;federated-test-bower-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedBowerRepositoryResult> getFederatedBowerRepository(GetFederatedBowerRepositoryArgs args) {
        return getFederatedBowerRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Bower repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedBowerRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-bower-repo = ArtifactoryFunctions.getFederatedBowerRepository(GetFederatedBowerRepositoryArgs.builder()
     *             .key(&#34;federated-test-bower-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedBowerRepositoryResult> getFederatedBowerRepositoryPlain(GetFederatedBowerRepositoryPlainArgs args) {
        return getFederatedBowerRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Bower repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedBowerRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-bower-repo = ArtifactoryFunctions.getFederatedBowerRepository(GetFederatedBowerRepositoryArgs.builder()
     *             .key(&#34;federated-test-bower-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedBowerRepositoryResult> getFederatedBowerRepository(GetFederatedBowerRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFederatedBowerRepository:getFederatedBowerRepository", TypeShape.of(GetFederatedBowerRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Bower repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedBowerRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-bower-repo = ArtifactoryFunctions.getFederatedBowerRepository(GetFederatedBowerRepositoryArgs.builder()
     *             .key(&#34;federated-test-bower-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedBowerRepositoryResult> getFederatedBowerRepositoryPlain(GetFederatedBowerRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFederatedBowerRepository:getFederatedBowerRepository", TypeShape.of(GetFederatedBowerRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Cargo repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.FederatedCargoRepository;
     * import com.pulumi.artifactory.FederatedCargoRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var federated_test_cargo_repo = new FederatedCargoRepository(&#34;federated-test-cargo-repo&#34;, FederatedCargoRepositoryArgs.builder()        
     *             .key(&#34;federated-test-cargo-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedCargoRepositoryResult> getFederatedCargoRepository(GetFederatedCargoRepositoryArgs args) {
        return getFederatedCargoRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Cargo repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.FederatedCargoRepository;
     * import com.pulumi.artifactory.FederatedCargoRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var federated_test_cargo_repo = new FederatedCargoRepository(&#34;federated-test-cargo-repo&#34;, FederatedCargoRepositoryArgs.builder()        
     *             .key(&#34;federated-test-cargo-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedCargoRepositoryResult> getFederatedCargoRepositoryPlain(GetFederatedCargoRepositoryPlainArgs args) {
        return getFederatedCargoRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Cargo repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.FederatedCargoRepository;
     * import com.pulumi.artifactory.FederatedCargoRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var federated_test_cargo_repo = new FederatedCargoRepository(&#34;federated-test-cargo-repo&#34;, FederatedCargoRepositoryArgs.builder()        
     *             .key(&#34;federated-test-cargo-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedCargoRepositoryResult> getFederatedCargoRepository(GetFederatedCargoRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFederatedCargoRepository:getFederatedCargoRepository", TypeShape.of(GetFederatedCargoRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Cargo repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.FederatedCargoRepository;
     * import com.pulumi.artifactory.FederatedCargoRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var federated_test_cargo_repo = new FederatedCargoRepository(&#34;federated-test-cargo-repo&#34;, FederatedCargoRepositoryArgs.builder()        
     *             .key(&#34;federated-test-cargo-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedCargoRepositoryResult> getFederatedCargoRepositoryPlain(GetFederatedCargoRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFederatedCargoRepository:getFederatedCargoRepository", TypeShape.of(GetFederatedCargoRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Chef repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedChefRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-chef-repo = ArtifactoryFunctions.getFederatedChefRepository(GetFederatedChefRepositoryArgs.builder()
     *             .key(&#34;federated-test-chef-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedChefRepositoryResult> getFederatedChefRepository(GetFederatedChefRepositoryArgs args) {
        return getFederatedChefRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Chef repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedChefRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-chef-repo = ArtifactoryFunctions.getFederatedChefRepository(GetFederatedChefRepositoryArgs.builder()
     *             .key(&#34;federated-test-chef-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedChefRepositoryResult> getFederatedChefRepositoryPlain(GetFederatedChefRepositoryPlainArgs args) {
        return getFederatedChefRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Chef repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedChefRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-chef-repo = ArtifactoryFunctions.getFederatedChefRepository(GetFederatedChefRepositoryArgs.builder()
     *             .key(&#34;federated-test-chef-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedChefRepositoryResult> getFederatedChefRepository(GetFederatedChefRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFederatedChefRepository:getFederatedChefRepository", TypeShape.of(GetFederatedChefRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Chef repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedChefRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-chef-repo = ArtifactoryFunctions.getFederatedChefRepository(GetFederatedChefRepositoryArgs.builder()
     *             .key(&#34;federated-test-chef-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedChefRepositoryResult> getFederatedChefRepositoryPlain(GetFederatedChefRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFederatedChefRepository:getFederatedChefRepository", TypeShape.of(GetFederatedChefRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Cocoapods repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedCocoapodsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-cocoapods-repo = ArtifactoryFunctions.getFederatedCocoapodsRepository(GetFederatedCocoapodsRepositoryArgs.builder()
     *             .key(&#34;federated-test-cocoapods-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedCocoapodsRepositoryResult> getFederatedCocoapodsRepository(GetFederatedCocoapodsRepositoryArgs args) {
        return getFederatedCocoapodsRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Cocoapods repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedCocoapodsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-cocoapods-repo = ArtifactoryFunctions.getFederatedCocoapodsRepository(GetFederatedCocoapodsRepositoryArgs.builder()
     *             .key(&#34;federated-test-cocoapods-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedCocoapodsRepositoryResult> getFederatedCocoapodsRepositoryPlain(GetFederatedCocoapodsRepositoryPlainArgs args) {
        return getFederatedCocoapodsRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Cocoapods repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedCocoapodsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-cocoapods-repo = ArtifactoryFunctions.getFederatedCocoapodsRepository(GetFederatedCocoapodsRepositoryArgs.builder()
     *             .key(&#34;federated-test-cocoapods-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedCocoapodsRepositoryResult> getFederatedCocoapodsRepository(GetFederatedCocoapodsRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFederatedCocoapodsRepository:getFederatedCocoapodsRepository", TypeShape.of(GetFederatedCocoapodsRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Cocoapods repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedCocoapodsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-cocoapods-repo = ArtifactoryFunctions.getFederatedCocoapodsRepository(GetFederatedCocoapodsRepositoryArgs.builder()
     *             .key(&#34;federated-test-cocoapods-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedCocoapodsRepositoryResult> getFederatedCocoapodsRepositoryPlain(GetFederatedCocoapodsRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFederatedCocoapodsRepository:getFederatedCocoapodsRepository", TypeShape.of(GetFederatedCocoapodsRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Composer repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedComposerRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-composer-repo = ArtifactoryFunctions.getFederatedComposerRepository(GetFederatedComposerRepositoryArgs.builder()
     *             .key(&#34;federated-test-composer-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedComposerRepositoryResult> getFederatedComposerRepository(GetFederatedComposerRepositoryArgs args) {
        return getFederatedComposerRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Composer repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedComposerRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-composer-repo = ArtifactoryFunctions.getFederatedComposerRepository(GetFederatedComposerRepositoryArgs.builder()
     *             .key(&#34;federated-test-composer-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedComposerRepositoryResult> getFederatedComposerRepositoryPlain(GetFederatedComposerRepositoryPlainArgs args) {
        return getFederatedComposerRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Composer repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedComposerRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-composer-repo = ArtifactoryFunctions.getFederatedComposerRepository(GetFederatedComposerRepositoryArgs.builder()
     *             .key(&#34;federated-test-composer-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedComposerRepositoryResult> getFederatedComposerRepository(GetFederatedComposerRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFederatedComposerRepository:getFederatedComposerRepository", TypeShape.of(GetFederatedComposerRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Composer repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedComposerRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-composer-repo = ArtifactoryFunctions.getFederatedComposerRepository(GetFederatedComposerRepositoryArgs.builder()
     *             .key(&#34;federated-test-composer-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedComposerRepositoryResult> getFederatedComposerRepositoryPlain(GetFederatedComposerRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFederatedComposerRepository:getFederatedComposerRepository", TypeShape.of(GetFederatedComposerRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Conan repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedConanRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-conan-repo = ArtifactoryFunctions.getFederatedConanRepository(GetFederatedConanRepositoryArgs.builder()
     *             .key(&#34;federated-test-conan-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedConanRepositoryResult> getFederatedConanRepository(GetFederatedConanRepositoryArgs args) {
        return getFederatedConanRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Conan repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedConanRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-conan-repo = ArtifactoryFunctions.getFederatedConanRepository(GetFederatedConanRepositoryArgs.builder()
     *             .key(&#34;federated-test-conan-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedConanRepositoryResult> getFederatedConanRepositoryPlain(GetFederatedConanRepositoryPlainArgs args) {
        return getFederatedConanRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Conan repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedConanRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-conan-repo = ArtifactoryFunctions.getFederatedConanRepository(GetFederatedConanRepositoryArgs.builder()
     *             .key(&#34;federated-test-conan-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedConanRepositoryResult> getFederatedConanRepository(GetFederatedConanRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFederatedConanRepository:getFederatedConanRepository", TypeShape.of(GetFederatedConanRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Conan repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedConanRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-conan-repo = ArtifactoryFunctions.getFederatedConanRepository(GetFederatedConanRepositoryArgs.builder()
     *             .key(&#34;federated-test-conan-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedConanRepositoryResult> getFederatedConanRepositoryPlain(GetFederatedConanRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFederatedConanRepository:getFederatedConanRepository", TypeShape.of(GetFederatedConanRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Conda repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedCondaRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-conda-repo = ArtifactoryFunctions.getFederatedCondaRepository(GetFederatedCondaRepositoryArgs.builder()
     *             .key(&#34;federated-test-conda-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedCondaRepositoryResult> getFederatedCondaRepository(GetFederatedCondaRepositoryArgs args) {
        return getFederatedCondaRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Conda repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedCondaRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-conda-repo = ArtifactoryFunctions.getFederatedCondaRepository(GetFederatedCondaRepositoryArgs.builder()
     *             .key(&#34;federated-test-conda-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedCondaRepositoryResult> getFederatedCondaRepositoryPlain(GetFederatedCondaRepositoryPlainArgs args) {
        return getFederatedCondaRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Conda repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedCondaRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-conda-repo = ArtifactoryFunctions.getFederatedCondaRepository(GetFederatedCondaRepositoryArgs.builder()
     *             .key(&#34;federated-test-conda-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedCondaRepositoryResult> getFederatedCondaRepository(GetFederatedCondaRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFederatedCondaRepository:getFederatedCondaRepository", TypeShape.of(GetFederatedCondaRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Conda repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedCondaRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-conda-repo = ArtifactoryFunctions.getFederatedCondaRepository(GetFederatedCondaRepositoryArgs.builder()
     *             .key(&#34;federated-test-conda-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedCondaRepositoryResult> getFederatedCondaRepositoryPlain(GetFederatedCondaRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFederatedCondaRepository:getFederatedCondaRepository", TypeShape.of(GetFederatedCondaRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Cran repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedCranRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-cran-repo = ArtifactoryFunctions.getFederatedCranRepository(GetFederatedCranRepositoryArgs.builder()
     *             .key(&#34;federated-test-cran-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedCranRepositoryResult> getFederatedCranRepository(GetFederatedCranRepositoryArgs args) {
        return getFederatedCranRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Cran repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedCranRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-cran-repo = ArtifactoryFunctions.getFederatedCranRepository(GetFederatedCranRepositoryArgs.builder()
     *             .key(&#34;federated-test-cran-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedCranRepositoryResult> getFederatedCranRepositoryPlain(GetFederatedCranRepositoryPlainArgs args) {
        return getFederatedCranRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Cran repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedCranRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-cran-repo = ArtifactoryFunctions.getFederatedCranRepository(GetFederatedCranRepositoryArgs.builder()
     *             .key(&#34;federated-test-cran-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedCranRepositoryResult> getFederatedCranRepository(GetFederatedCranRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFederatedCranRepository:getFederatedCranRepository", TypeShape.of(GetFederatedCranRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Cran repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedCranRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-cran-repo = ArtifactoryFunctions.getFederatedCranRepository(GetFederatedCranRepositoryArgs.builder()
     *             .key(&#34;federated-test-cran-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedCranRepositoryResult> getFederatedCranRepositoryPlain(GetFederatedCranRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFederatedCranRepository:getFederatedCranRepository", TypeShape.of(GetFederatedCranRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Debian repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedDebianRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-debian-repo = ArtifactoryFunctions.getFederatedDebianRepository(GetFederatedDebianRepositoryArgs.builder()
     *             .key(&#34;federated-test-debian-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedDebianRepositoryResult> getFederatedDebianRepository(GetFederatedDebianRepositoryArgs args) {
        return getFederatedDebianRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Debian repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedDebianRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-debian-repo = ArtifactoryFunctions.getFederatedDebianRepository(GetFederatedDebianRepositoryArgs.builder()
     *             .key(&#34;federated-test-debian-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedDebianRepositoryResult> getFederatedDebianRepositoryPlain(GetFederatedDebianRepositoryPlainArgs args) {
        return getFederatedDebianRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Debian repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedDebianRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-debian-repo = ArtifactoryFunctions.getFederatedDebianRepository(GetFederatedDebianRepositoryArgs.builder()
     *             .key(&#34;federated-test-debian-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedDebianRepositoryResult> getFederatedDebianRepository(GetFederatedDebianRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFederatedDebianRepository:getFederatedDebianRepository", TypeShape.of(GetFederatedDebianRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Debian repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedDebianRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-debian-repo = ArtifactoryFunctions.getFederatedDebianRepository(GetFederatedDebianRepositoryArgs.builder()
     *             .key(&#34;federated-test-debian-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedDebianRepositoryResult> getFederatedDebianRepositoryPlain(GetFederatedDebianRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFederatedDebianRepository:getFederatedDebianRepository", TypeShape.of(GetFederatedDebianRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetFederatedDockerRepositoryResult> getFederatedDockerRepository(GetFederatedDockerRepositoryArgs args) {
        return getFederatedDockerRepository(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetFederatedDockerRepositoryResult> getFederatedDockerRepositoryPlain(GetFederatedDockerRepositoryPlainArgs args) {
        return getFederatedDockerRepositoryPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetFederatedDockerRepositoryResult> getFederatedDockerRepository(GetFederatedDockerRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFederatedDockerRepository:getFederatedDockerRepository", TypeShape.of(GetFederatedDockerRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetFederatedDockerRepositoryResult> getFederatedDockerRepositoryPlain(GetFederatedDockerRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFederatedDockerRepository:getFederatedDockerRepository", TypeShape.of(GetFederatedDockerRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Docker repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedDockerV1RepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-docker-repo = ArtifactoryFunctions.getFederatedDockerV1Repository(GetFederatedDockerV1RepositoryArgs.builder()
     *             .key(&#34;federated-test-docker-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedDockerV1RepositoryResult> getFederatedDockerV1Repository(GetFederatedDockerV1RepositoryArgs args) {
        return getFederatedDockerV1Repository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Docker repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedDockerV1RepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-docker-repo = ArtifactoryFunctions.getFederatedDockerV1Repository(GetFederatedDockerV1RepositoryArgs.builder()
     *             .key(&#34;federated-test-docker-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedDockerV1RepositoryResult> getFederatedDockerV1RepositoryPlain(GetFederatedDockerV1RepositoryPlainArgs args) {
        return getFederatedDockerV1RepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Docker repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedDockerV1RepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-docker-repo = ArtifactoryFunctions.getFederatedDockerV1Repository(GetFederatedDockerV1RepositoryArgs.builder()
     *             .key(&#34;federated-test-docker-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedDockerV1RepositoryResult> getFederatedDockerV1Repository(GetFederatedDockerV1RepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFederatedDockerV1Repository:getFederatedDockerV1Repository", TypeShape.of(GetFederatedDockerV1RepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Docker repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedDockerV1RepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-docker-repo = ArtifactoryFunctions.getFederatedDockerV1Repository(GetFederatedDockerV1RepositoryArgs.builder()
     *             .key(&#34;federated-test-docker-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedDockerV1RepositoryResult> getFederatedDockerV1RepositoryPlain(GetFederatedDockerV1RepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFederatedDockerV1Repository:getFederatedDockerV1Repository", TypeShape.of(GetFederatedDockerV1RepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Docker repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedDockerV2RepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-docker-repo = ArtifactoryFunctions.getFederatedDockerV2Repository(GetFederatedDockerV2RepositoryArgs.builder()
     *             .key(&#34;federated-test-docker-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedDockerV2RepositoryResult> getFederatedDockerV2Repository(GetFederatedDockerV2RepositoryArgs args) {
        return getFederatedDockerV2Repository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Docker repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedDockerV2RepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-docker-repo = ArtifactoryFunctions.getFederatedDockerV2Repository(GetFederatedDockerV2RepositoryArgs.builder()
     *             .key(&#34;federated-test-docker-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedDockerV2RepositoryResult> getFederatedDockerV2RepositoryPlain(GetFederatedDockerV2RepositoryPlainArgs args) {
        return getFederatedDockerV2RepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Docker repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedDockerV2RepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-docker-repo = ArtifactoryFunctions.getFederatedDockerV2Repository(GetFederatedDockerV2RepositoryArgs.builder()
     *             .key(&#34;federated-test-docker-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedDockerV2RepositoryResult> getFederatedDockerV2Repository(GetFederatedDockerV2RepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFederatedDockerV2Repository:getFederatedDockerV2Repository", TypeShape.of(GetFederatedDockerV2RepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Docker repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedDockerV2RepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-docker-repo = ArtifactoryFunctions.getFederatedDockerV2Repository(GetFederatedDockerV2RepositoryArgs.builder()
     *             .key(&#34;federated-test-docker-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedDockerV2RepositoryResult> getFederatedDockerV2RepositoryPlain(GetFederatedDockerV2RepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFederatedDockerV2Repository:getFederatedDockerV2Repository", TypeShape.of(GetFederatedDockerV2RepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Gems repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedGemsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-gems-repo = ArtifactoryFunctions.getFederatedGemsRepository(GetFederatedGemsRepositoryArgs.builder()
     *             .key(&#34;federated-test-gems-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedGemsRepositoryResult> getFederatedGemsRepository(GetFederatedGemsRepositoryArgs args) {
        return getFederatedGemsRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Gems repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedGemsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-gems-repo = ArtifactoryFunctions.getFederatedGemsRepository(GetFederatedGemsRepositoryArgs.builder()
     *             .key(&#34;federated-test-gems-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedGemsRepositoryResult> getFederatedGemsRepositoryPlain(GetFederatedGemsRepositoryPlainArgs args) {
        return getFederatedGemsRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Gems repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedGemsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-gems-repo = ArtifactoryFunctions.getFederatedGemsRepository(GetFederatedGemsRepositoryArgs.builder()
     *             .key(&#34;federated-test-gems-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedGemsRepositoryResult> getFederatedGemsRepository(GetFederatedGemsRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFederatedGemsRepository:getFederatedGemsRepository", TypeShape.of(GetFederatedGemsRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Gems repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedGemsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-gems-repo = ArtifactoryFunctions.getFederatedGemsRepository(GetFederatedGemsRepositoryArgs.builder()
     *             .key(&#34;federated-test-gems-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedGemsRepositoryResult> getFederatedGemsRepositoryPlain(GetFederatedGemsRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFederatedGemsRepository:getFederatedGemsRepository", TypeShape.of(GetFederatedGemsRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Generic repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedGenericRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var terraform-federated-test-generic-repo = ArtifactoryFunctions.getFederatedGenericRepository(GetFederatedGenericRepositoryArgs.builder()
     *             .key(&#34;terraform-federated-test-generic-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedGenericRepositoryResult> getFederatedGenericRepository(GetFederatedGenericRepositoryArgs args) {
        return getFederatedGenericRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Generic repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedGenericRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var terraform-federated-test-generic-repo = ArtifactoryFunctions.getFederatedGenericRepository(GetFederatedGenericRepositoryArgs.builder()
     *             .key(&#34;terraform-federated-test-generic-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedGenericRepositoryResult> getFederatedGenericRepositoryPlain(GetFederatedGenericRepositoryPlainArgs args) {
        return getFederatedGenericRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Generic repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedGenericRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var terraform-federated-test-generic-repo = ArtifactoryFunctions.getFederatedGenericRepository(GetFederatedGenericRepositoryArgs.builder()
     *             .key(&#34;terraform-federated-test-generic-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedGenericRepositoryResult> getFederatedGenericRepository(GetFederatedGenericRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFederatedGenericRepository:getFederatedGenericRepository", TypeShape.of(GetFederatedGenericRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Generic repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedGenericRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var terraform-federated-test-generic-repo = ArtifactoryFunctions.getFederatedGenericRepository(GetFederatedGenericRepositoryArgs.builder()
     *             .key(&#34;terraform-federated-test-generic-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedGenericRepositoryResult> getFederatedGenericRepositoryPlain(GetFederatedGenericRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFederatedGenericRepository:getFederatedGenericRepository", TypeShape.of(GetFederatedGenericRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Gitlfs repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedGitlfsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-gitlfs-repo = ArtifactoryFunctions.getFederatedGitlfsRepository(GetFederatedGitlfsRepositoryArgs.builder()
     *             .key(&#34;federated-test-gitlfs-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedGitlfsRepositoryResult> getFederatedGitlfsRepository(GetFederatedGitlfsRepositoryArgs args) {
        return getFederatedGitlfsRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Gitlfs repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedGitlfsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-gitlfs-repo = ArtifactoryFunctions.getFederatedGitlfsRepository(GetFederatedGitlfsRepositoryArgs.builder()
     *             .key(&#34;federated-test-gitlfs-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedGitlfsRepositoryResult> getFederatedGitlfsRepositoryPlain(GetFederatedGitlfsRepositoryPlainArgs args) {
        return getFederatedGitlfsRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Gitlfs repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedGitlfsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-gitlfs-repo = ArtifactoryFunctions.getFederatedGitlfsRepository(GetFederatedGitlfsRepositoryArgs.builder()
     *             .key(&#34;federated-test-gitlfs-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedGitlfsRepositoryResult> getFederatedGitlfsRepository(GetFederatedGitlfsRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFederatedGitlfsRepository:getFederatedGitlfsRepository", TypeShape.of(GetFederatedGitlfsRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Gitlfs repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedGitlfsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-gitlfs-repo = ArtifactoryFunctions.getFederatedGitlfsRepository(GetFederatedGitlfsRepositoryArgs.builder()
     *             .key(&#34;federated-test-gitlfs-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedGitlfsRepositoryResult> getFederatedGitlfsRepositoryPlain(GetFederatedGitlfsRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFederatedGitlfsRepository:getFederatedGitlfsRepository", TypeShape.of(GetFederatedGitlfsRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Go repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedGoRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-go-repo = ArtifactoryFunctions.getFederatedGoRepository(GetFederatedGoRepositoryArgs.builder()
     *             .key(&#34;federated-test-go-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedGoRepositoryResult> getFederatedGoRepository(GetFederatedGoRepositoryArgs args) {
        return getFederatedGoRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Go repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedGoRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-go-repo = ArtifactoryFunctions.getFederatedGoRepository(GetFederatedGoRepositoryArgs.builder()
     *             .key(&#34;federated-test-go-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedGoRepositoryResult> getFederatedGoRepositoryPlain(GetFederatedGoRepositoryPlainArgs args) {
        return getFederatedGoRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Go repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedGoRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-go-repo = ArtifactoryFunctions.getFederatedGoRepository(GetFederatedGoRepositoryArgs.builder()
     *             .key(&#34;federated-test-go-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedGoRepositoryResult> getFederatedGoRepository(GetFederatedGoRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFederatedGoRepository:getFederatedGoRepository", TypeShape.of(GetFederatedGoRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Go repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedGoRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-go-repo = ArtifactoryFunctions.getFederatedGoRepository(GetFederatedGoRepositoryArgs.builder()
     *             .key(&#34;federated-test-go-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedGoRepositoryResult> getFederatedGoRepositoryPlain(GetFederatedGoRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFederatedGoRepository:getFederatedGoRepository", TypeShape.of(GetFederatedGoRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Gradle repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedGradleRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-gradle-repo = ArtifactoryFunctions.getFederatedGradleRepository(GetFederatedGradleRepositoryArgs.builder()
     *             .key(&#34;federated-test-gradle-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedGradleRepositoryResult> getFederatedGradleRepository(GetFederatedGradleRepositoryArgs args) {
        return getFederatedGradleRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Gradle repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedGradleRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-gradle-repo = ArtifactoryFunctions.getFederatedGradleRepository(GetFederatedGradleRepositoryArgs.builder()
     *             .key(&#34;federated-test-gradle-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedGradleRepositoryResult> getFederatedGradleRepositoryPlain(GetFederatedGradleRepositoryPlainArgs args) {
        return getFederatedGradleRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Gradle repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedGradleRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-gradle-repo = ArtifactoryFunctions.getFederatedGradleRepository(GetFederatedGradleRepositoryArgs.builder()
     *             .key(&#34;federated-test-gradle-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedGradleRepositoryResult> getFederatedGradleRepository(GetFederatedGradleRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFederatedGradleRepository:getFederatedGradleRepository", TypeShape.of(GetFederatedGradleRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Gradle repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedGradleRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-gradle-repo = ArtifactoryFunctions.getFederatedGradleRepository(GetFederatedGradleRepositoryArgs.builder()
     *             .key(&#34;federated-test-gradle-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedGradleRepositoryResult> getFederatedGradleRepositoryPlain(GetFederatedGradleRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFederatedGradleRepository:getFederatedGradleRepository", TypeShape.of(GetFederatedGradleRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Helm repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedHelmRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-helm-repo = ArtifactoryFunctions.getFederatedHelmRepository(GetFederatedHelmRepositoryArgs.builder()
     *             .key(&#34;federated-test-helm-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedHelmRepositoryResult> getFederatedHelmRepository(GetFederatedHelmRepositoryArgs args) {
        return getFederatedHelmRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Helm repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedHelmRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-helm-repo = ArtifactoryFunctions.getFederatedHelmRepository(GetFederatedHelmRepositoryArgs.builder()
     *             .key(&#34;federated-test-helm-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedHelmRepositoryResult> getFederatedHelmRepositoryPlain(GetFederatedHelmRepositoryPlainArgs args) {
        return getFederatedHelmRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Helm repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedHelmRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-helm-repo = ArtifactoryFunctions.getFederatedHelmRepository(GetFederatedHelmRepositoryArgs.builder()
     *             .key(&#34;federated-test-helm-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedHelmRepositoryResult> getFederatedHelmRepository(GetFederatedHelmRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFederatedHelmRepository:getFederatedHelmRepository", TypeShape.of(GetFederatedHelmRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Helm repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedHelmRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-helm-repo = ArtifactoryFunctions.getFederatedHelmRepository(GetFederatedHelmRepositoryArgs.builder()
     *             .key(&#34;federated-test-helm-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedHelmRepositoryResult> getFederatedHelmRepositoryPlain(GetFederatedHelmRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFederatedHelmRepository:getFederatedHelmRepository", TypeShape.of(GetFederatedHelmRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Ivy repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedIvyRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-ivy-repo = ArtifactoryFunctions.getFederatedIvyRepository(GetFederatedIvyRepositoryArgs.builder()
     *             .key(&#34;federated-test-ivy-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedIvyRepositoryResult> getFederatedIvyRepository(GetFederatedIvyRepositoryArgs args) {
        return getFederatedIvyRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Ivy repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedIvyRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-ivy-repo = ArtifactoryFunctions.getFederatedIvyRepository(GetFederatedIvyRepositoryArgs.builder()
     *             .key(&#34;federated-test-ivy-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedIvyRepositoryResult> getFederatedIvyRepositoryPlain(GetFederatedIvyRepositoryPlainArgs args) {
        return getFederatedIvyRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Ivy repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedIvyRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-ivy-repo = ArtifactoryFunctions.getFederatedIvyRepository(GetFederatedIvyRepositoryArgs.builder()
     *             .key(&#34;federated-test-ivy-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedIvyRepositoryResult> getFederatedIvyRepository(GetFederatedIvyRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFederatedIvyRepository:getFederatedIvyRepository", TypeShape.of(GetFederatedIvyRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Ivy repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedIvyRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-ivy-repo = ArtifactoryFunctions.getFederatedIvyRepository(GetFederatedIvyRepositoryArgs.builder()
     *             .key(&#34;federated-test-ivy-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedIvyRepositoryResult> getFederatedIvyRepositoryPlain(GetFederatedIvyRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFederatedIvyRepository:getFederatedIvyRepository", TypeShape.of(GetFederatedIvyRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Maven repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedMavenRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-maven-repo = ArtifactoryFunctions.getFederatedMavenRepository(GetFederatedMavenRepositoryArgs.builder()
     *             .key(&#34;federated-test-maven-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedMavenRepositoryResult> getFederatedMavenRepository(GetFederatedMavenRepositoryArgs args) {
        return getFederatedMavenRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Maven repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedMavenRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-maven-repo = ArtifactoryFunctions.getFederatedMavenRepository(GetFederatedMavenRepositoryArgs.builder()
     *             .key(&#34;federated-test-maven-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedMavenRepositoryResult> getFederatedMavenRepositoryPlain(GetFederatedMavenRepositoryPlainArgs args) {
        return getFederatedMavenRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Maven repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedMavenRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-maven-repo = ArtifactoryFunctions.getFederatedMavenRepository(GetFederatedMavenRepositoryArgs.builder()
     *             .key(&#34;federated-test-maven-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedMavenRepositoryResult> getFederatedMavenRepository(GetFederatedMavenRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFederatedMavenRepository:getFederatedMavenRepository", TypeShape.of(GetFederatedMavenRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Maven repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedMavenRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-maven-repo = ArtifactoryFunctions.getFederatedMavenRepository(GetFederatedMavenRepositoryArgs.builder()
     *             .key(&#34;federated-test-maven-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedMavenRepositoryResult> getFederatedMavenRepositoryPlain(GetFederatedMavenRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFederatedMavenRepository:getFederatedMavenRepository", TypeShape.of(GetFederatedMavenRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Npm repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedNpmRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-npm-repo = ArtifactoryFunctions.getFederatedNpmRepository(GetFederatedNpmRepositoryArgs.builder()
     *             .key(&#34;federated-test-npm-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedNpmRepositoryResult> getFederatedNpmRepository(GetFederatedNpmRepositoryArgs args) {
        return getFederatedNpmRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Npm repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedNpmRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-npm-repo = ArtifactoryFunctions.getFederatedNpmRepository(GetFederatedNpmRepositoryArgs.builder()
     *             .key(&#34;federated-test-npm-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedNpmRepositoryResult> getFederatedNpmRepositoryPlain(GetFederatedNpmRepositoryPlainArgs args) {
        return getFederatedNpmRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Npm repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedNpmRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-npm-repo = ArtifactoryFunctions.getFederatedNpmRepository(GetFederatedNpmRepositoryArgs.builder()
     *             .key(&#34;federated-test-npm-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedNpmRepositoryResult> getFederatedNpmRepository(GetFederatedNpmRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFederatedNpmRepository:getFederatedNpmRepository", TypeShape.of(GetFederatedNpmRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Npm repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedNpmRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-npm-repo = ArtifactoryFunctions.getFederatedNpmRepository(GetFederatedNpmRepositoryArgs.builder()
     *             .key(&#34;federated-test-npm-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedNpmRepositoryResult> getFederatedNpmRepositoryPlain(GetFederatedNpmRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFederatedNpmRepository:getFederatedNpmRepository", TypeShape.of(GetFederatedNpmRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Nuget repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedNugetRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-nuget-repo = ArtifactoryFunctions.getFederatedNugetRepository(GetFederatedNugetRepositoryArgs.builder()
     *             .key(&#34;federated-test-nuget-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedNugetRepositoryResult> getFederatedNugetRepository(GetFederatedNugetRepositoryArgs args) {
        return getFederatedNugetRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Nuget repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedNugetRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-nuget-repo = ArtifactoryFunctions.getFederatedNugetRepository(GetFederatedNugetRepositoryArgs.builder()
     *             .key(&#34;federated-test-nuget-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedNugetRepositoryResult> getFederatedNugetRepositoryPlain(GetFederatedNugetRepositoryPlainArgs args) {
        return getFederatedNugetRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Nuget repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedNugetRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-nuget-repo = ArtifactoryFunctions.getFederatedNugetRepository(GetFederatedNugetRepositoryArgs.builder()
     *             .key(&#34;federated-test-nuget-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedNugetRepositoryResult> getFederatedNugetRepository(GetFederatedNugetRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFederatedNugetRepository:getFederatedNugetRepository", TypeShape.of(GetFederatedNugetRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Nuget repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedNugetRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-nuget-repo = ArtifactoryFunctions.getFederatedNugetRepository(GetFederatedNugetRepositoryArgs.builder()
     *             .key(&#34;federated-test-nuget-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedNugetRepositoryResult> getFederatedNugetRepositoryPlain(GetFederatedNugetRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFederatedNugetRepository:getFederatedNugetRepository", TypeShape.of(GetFederatedNugetRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Opkg repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedOpkgRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-opkg-repo = ArtifactoryFunctions.getFederatedOpkgRepository(GetFederatedOpkgRepositoryArgs.builder()
     *             .key(&#34;federated-test-opkg-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedOpkgRepositoryResult> getFederatedOpkgRepository(GetFederatedOpkgRepositoryArgs args) {
        return getFederatedOpkgRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Opkg repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedOpkgRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-opkg-repo = ArtifactoryFunctions.getFederatedOpkgRepository(GetFederatedOpkgRepositoryArgs.builder()
     *             .key(&#34;federated-test-opkg-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedOpkgRepositoryResult> getFederatedOpkgRepositoryPlain(GetFederatedOpkgRepositoryPlainArgs args) {
        return getFederatedOpkgRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Opkg repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedOpkgRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-opkg-repo = ArtifactoryFunctions.getFederatedOpkgRepository(GetFederatedOpkgRepositoryArgs.builder()
     *             .key(&#34;federated-test-opkg-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedOpkgRepositoryResult> getFederatedOpkgRepository(GetFederatedOpkgRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFederatedOpkgRepository:getFederatedOpkgRepository", TypeShape.of(GetFederatedOpkgRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Opkg repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedOpkgRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-opkg-repo = ArtifactoryFunctions.getFederatedOpkgRepository(GetFederatedOpkgRepositoryArgs.builder()
     *             .key(&#34;federated-test-opkg-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedOpkgRepositoryResult> getFederatedOpkgRepositoryPlain(GetFederatedOpkgRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFederatedOpkgRepository:getFederatedOpkgRepository", TypeShape.of(GetFederatedOpkgRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Puppet repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedPuppetRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-puppet-repo = ArtifactoryFunctions.getFederatedPuppetRepository(GetFederatedPuppetRepositoryArgs.builder()
     *             .key(&#34;federated-test-puppet-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedPuppetRepositoryResult> getFederatedPuppetRepository(GetFederatedPuppetRepositoryArgs args) {
        return getFederatedPuppetRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Puppet repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedPuppetRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-puppet-repo = ArtifactoryFunctions.getFederatedPuppetRepository(GetFederatedPuppetRepositoryArgs.builder()
     *             .key(&#34;federated-test-puppet-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedPuppetRepositoryResult> getFederatedPuppetRepositoryPlain(GetFederatedPuppetRepositoryPlainArgs args) {
        return getFederatedPuppetRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Puppet repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedPuppetRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-puppet-repo = ArtifactoryFunctions.getFederatedPuppetRepository(GetFederatedPuppetRepositoryArgs.builder()
     *             .key(&#34;federated-test-puppet-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedPuppetRepositoryResult> getFederatedPuppetRepository(GetFederatedPuppetRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFederatedPuppetRepository:getFederatedPuppetRepository", TypeShape.of(GetFederatedPuppetRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Puppet repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedPuppetRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-puppet-repo = ArtifactoryFunctions.getFederatedPuppetRepository(GetFederatedPuppetRepositoryArgs.builder()
     *             .key(&#34;federated-test-puppet-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedPuppetRepositoryResult> getFederatedPuppetRepositoryPlain(GetFederatedPuppetRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFederatedPuppetRepository:getFederatedPuppetRepository", TypeShape.of(GetFederatedPuppetRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Pypi repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedPypiRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-pypi-repo = ArtifactoryFunctions.getFederatedPypiRepository(GetFederatedPypiRepositoryArgs.builder()
     *             .key(&#34;federated-test-pypi-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedPypiRepositoryResult> getFederatedPypiRepository(GetFederatedPypiRepositoryArgs args) {
        return getFederatedPypiRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Pypi repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedPypiRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-pypi-repo = ArtifactoryFunctions.getFederatedPypiRepository(GetFederatedPypiRepositoryArgs.builder()
     *             .key(&#34;federated-test-pypi-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedPypiRepositoryResult> getFederatedPypiRepositoryPlain(GetFederatedPypiRepositoryPlainArgs args) {
        return getFederatedPypiRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Pypi repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedPypiRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-pypi-repo = ArtifactoryFunctions.getFederatedPypiRepository(GetFederatedPypiRepositoryArgs.builder()
     *             .key(&#34;federated-test-pypi-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedPypiRepositoryResult> getFederatedPypiRepository(GetFederatedPypiRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFederatedPypiRepository:getFederatedPypiRepository", TypeShape.of(GetFederatedPypiRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Pypi repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedPypiRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-pypi-repo = ArtifactoryFunctions.getFederatedPypiRepository(GetFederatedPypiRepositoryArgs.builder()
     *             .key(&#34;federated-test-pypi-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedPypiRepositoryResult> getFederatedPypiRepositoryPlain(GetFederatedPypiRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFederatedPypiRepository:getFederatedPypiRepository", TypeShape.of(GetFederatedPypiRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Rpm repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedRpmRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-rpm-repo = ArtifactoryFunctions.getFederatedRpmRepository(GetFederatedRpmRepositoryArgs.builder()
     *             .key(&#34;federated-test-rpm-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedRpmRepositoryResult> getFederatedRpmRepository(GetFederatedRpmRepositoryArgs args) {
        return getFederatedRpmRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Rpm repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedRpmRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-rpm-repo = ArtifactoryFunctions.getFederatedRpmRepository(GetFederatedRpmRepositoryArgs.builder()
     *             .key(&#34;federated-test-rpm-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedRpmRepositoryResult> getFederatedRpmRepositoryPlain(GetFederatedRpmRepositoryPlainArgs args) {
        return getFederatedRpmRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Rpm repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedRpmRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-rpm-repo = ArtifactoryFunctions.getFederatedRpmRepository(GetFederatedRpmRepositoryArgs.builder()
     *             .key(&#34;federated-test-rpm-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedRpmRepositoryResult> getFederatedRpmRepository(GetFederatedRpmRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFederatedRpmRepository:getFederatedRpmRepository", TypeShape.of(GetFederatedRpmRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Rpm repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedRpmRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-rpm-repo = ArtifactoryFunctions.getFederatedRpmRepository(GetFederatedRpmRepositoryArgs.builder()
     *             .key(&#34;federated-test-rpm-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedRpmRepositoryResult> getFederatedRpmRepositoryPlain(GetFederatedRpmRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFederatedRpmRepository:getFederatedRpmRepository", TypeShape.of(GetFederatedRpmRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated SBT repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedSbtRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-sbt-repo = ArtifactoryFunctions.getFederatedSbtRepository(GetFederatedSbtRepositoryArgs.builder()
     *             .key(&#34;federated-test-sbt-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedSbtRepositoryResult> getFederatedSbtRepository(GetFederatedSbtRepositoryArgs args) {
        return getFederatedSbtRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated SBT repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedSbtRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-sbt-repo = ArtifactoryFunctions.getFederatedSbtRepository(GetFederatedSbtRepositoryArgs.builder()
     *             .key(&#34;federated-test-sbt-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedSbtRepositoryResult> getFederatedSbtRepositoryPlain(GetFederatedSbtRepositoryPlainArgs args) {
        return getFederatedSbtRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated SBT repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedSbtRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-sbt-repo = ArtifactoryFunctions.getFederatedSbtRepository(GetFederatedSbtRepositoryArgs.builder()
     *             .key(&#34;federated-test-sbt-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedSbtRepositoryResult> getFederatedSbtRepository(GetFederatedSbtRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFederatedSbtRepository:getFederatedSbtRepository", TypeShape.of(GetFederatedSbtRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated SBT repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedSbtRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-sbt-repo = ArtifactoryFunctions.getFederatedSbtRepository(GetFederatedSbtRepositoryArgs.builder()
     *             .key(&#34;federated-test-sbt-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedSbtRepositoryResult> getFederatedSbtRepositoryPlain(GetFederatedSbtRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFederatedSbtRepository:getFederatedSbtRepository", TypeShape.of(GetFederatedSbtRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Swift repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedSwiftRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-swift-repo = ArtifactoryFunctions.getFederatedSwiftRepository(GetFederatedSwiftRepositoryArgs.builder()
     *             .key(&#34;federated-test-swift-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedSwiftRepositoryResult> getFederatedSwiftRepository(GetFederatedSwiftRepositoryArgs args) {
        return getFederatedSwiftRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Swift repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedSwiftRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-swift-repo = ArtifactoryFunctions.getFederatedSwiftRepository(GetFederatedSwiftRepositoryArgs.builder()
     *             .key(&#34;federated-test-swift-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedSwiftRepositoryResult> getFederatedSwiftRepositoryPlain(GetFederatedSwiftRepositoryPlainArgs args) {
        return getFederatedSwiftRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Swift repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedSwiftRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-swift-repo = ArtifactoryFunctions.getFederatedSwiftRepository(GetFederatedSwiftRepositoryArgs.builder()
     *             .key(&#34;federated-test-swift-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedSwiftRepositoryResult> getFederatedSwiftRepository(GetFederatedSwiftRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFederatedSwiftRepository:getFederatedSwiftRepository", TypeShape.of(GetFederatedSwiftRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Swift repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedSwiftRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-swift-repo = ArtifactoryFunctions.getFederatedSwiftRepository(GetFederatedSwiftRepositoryArgs.builder()
     *             .key(&#34;federated-test-swift-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedSwiftRepositoryResult> getFederatedSwiftRepositoryPlain(GetFederatedSwiftRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFederatedSwiftRepository:getFederatedSwiftRepository", TypeShape.of(GetFederatedSwiftRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedTerraformModuleRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-terraformModule-repo = ArtifactoryFunctions.getFederatedTerraformModuleRepository(GetFederatedTerraformModuleRepositoryArgs.builder()
     *             .key(&#34;federated-test-terraform-module-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedTerraformModuleRepositoryResult> getFederatedTerraformModuleRepository(GetFederatedTerraformModuleRepositoryArgs args) {
        return getFederatedTerraformModuleRepository(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedTerraformModuleRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-terraformModule-repo = ArtifactoryFunctions.getFederatedTerraformModuleRepository(GetFederatedTerraformModuleRepositoryArgs.builder()
     *             .key(&#34;federated-test-terraform-module-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedTerraformModuleRepositoryResult> getFederatedTerraformModuleRepositoryPlain(GetFederatedTerraformModuleRepositoryPlainArgs args) {
        return getFederatedTerraformModuleRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedTerraformModuleRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-terraformModule-repo = ArtifactoryFunctions.getFederatedTerraformModuleRepository(GetFederatedTerraformModuleRepositoryArgs.builder()
     *             .key(&#34;federated-test-terraform-module-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedTerraformModuleRepositoryResult> getFederatedTerraformModuleRepository(GetFederatedTerraformModuleRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFederatedTerraformModuleRepository:getFederatedTerraformModuleRepository", TypeShape.of(GetFederatedTerraformModuleRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedTerraformModuleRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-terraformModule-repo = ArtifactoryFunctions.getFederatedTerraformModuleRepository(GetFederatedTerraformModuleRepositoryArgs.builder()
     *             .key(&#34;federated-test-terraform-module-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedTerraformModuleRepositoryResult> getFederatedTerraformModuleRepositoryPlain(GetFederatedTerraformModuleRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFederatedTerraformModuleRepository:getFederatedTerraformModuleRepository", TypeShape.of(GetFederatedTerraformModuleRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedTerraformProviderRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-terraformProvider-repo = ArtifactoryFunctions.getFederatedTerraformProviderRepository(GetFederatedTerraformProviderRepositoryArgs.builder()
     *             .key(&#34;federated-test-terraform-provider-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedTerraformProviderRepositoryResult> getFederatedTerraformProviderRepository(GetFederatedTerraformProviderRepositoryArgs args) {
        return getFederatedTerraformProviderRepository(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedTerraformProviderRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-terraformProvider-repo = ArtifactoryFunctions.getFederatedTerraformProviderRepository(GetFederatedTerraformProviderRepositoryArgs.builder()
     *             .key(&#34;federated-test-terraform-provider-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedTerraformProviderRepositoryResult> getFederatedTerraformProviderRepositoryPlain(GetFederatedTerraformProviderRepositoryPlainArgs args) {
        return getFederatedTerraformProviderRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedTerraformProviderRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-terraformProvider-repo = ArtifactoryFunctions.getFederatedTerraformProviderRepository(GetFederatedTerraformProviderRepositoryArgs.builder()
     *             .key(&#34;federated-test-terraform-provider-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedTerraformProviderRepositoryResult> getFederatedTerraformProviderRepository(GetFederatedTerraformProviderRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFederatedTerraformProviderRepository:getFederatedTerraformProviderRepository", TypeShape.of(GetFederatedTerraformProviderRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedTerraformProviderRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-terraformProvider-repo = ArtifactoryFunctions.getFederatedTerraformProviderRepository(GetFederatedTerraformProviderRepositoryArgs.builder()
     *             .key(&#34;federated-test-terraform-provider-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedTerraformProviderRepositoryResult> getFederatedTerraformProviderRepositoryPlain(GetFederatedTerraformProviderRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFederatedTerraformProviderRepository:getFederatedTerraformProviderRepository", TypeShape.of(GetFederatedTerraformProviderRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Vagrant repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedVagrantRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-vagrant-repo = ArtifactoryFunctions.getFederatedVagrantRepository(GetFederatedVagrantRepositoryArgs.builder()
     *             .key(&#34;federated-test-vagrant-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedVagrantRepositoryResult> getFederatedVagrantRepository(GetFederatedVagrantRepositoryArgs args) {
        return getFederatedVagrantRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Vagrant repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedVagrantRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-vagrant-repo = ArtifactoryFunctions.getFederatedVagrantRepository(GetFederatedVagrantRepositoryArgs.builder()
     *             .key(&#34;federated-test-vagrant-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedVagrantRepositoryResult> getFederatedVagrantRepositoryPlain(GetFederatedVagrantRepositoryPlainArgs args) {
        return getFederatedVagrantRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a federated Vagrant repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedVagrantRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-vagrant-repo = ArtifactoryFunctions.getFederatedVagrantRepository(GetFederatedVagrantRepositoryArgs.builder()
     *             .key(&#34;federated-test-vagrant-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedVagrantRepositoryResult> getFederatedVagrantRepository(GetFederatedVagrantRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFederatedVagrantRepository:getFederatedVagrantRepository", TypeShape.of(GetFederatedVagrantRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a federated Vagrant repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFederatedVagrantRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var federated-test-vagrant-repo = ArtifactoryFunctions.getFederatedVagrantRepository(GetFederatedVagrantRepositoryArgs.builder()
     *             .key(&#34;federated-test-vagrant-repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedVagrantRepositoryResult> getFederatedVagrantRepositoryPlain(GetFederatedVagrantRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFederatedVagrantRepository:getFederatedVagrantRepository", TypeShape.of(GetFederatedVagrantRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## # Artifactory File Data Source
     * 
     * Provides an Artifactory file datasource. This can be used to download a file from a given Artifactory repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-file = ArtifactoryFunctions.getFile(GetFileArgs.builder()
     *             .outputPath(&#34;tmp/artifact.zip&#34;)
     *             .path(&#34;/path/to/the/artifact.zip&#34;)
     *             .repository(&#34;repo-key&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFileResult> getFile(GetFileArgs args) {
        return getFile(args, InvokeOptions.Empty);
    }
    /**
     * ## # Artifactory File Data Source
     * 
     * Provides an Artifactory file datasource. This can be used to download a file from a given Artifactory repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-file = ArtifactoryFunctions.getFile(GetFileArgs.builder()
     *             .outputPath(&#34;tmp/artifact.zip&#34;)
     *             .path(&#34;/path/to/the/artifact.zip&#34;)
     *             .repository(&#34;repo-key&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFileResult> getFilePlain(GetFilePlainArgs args) {
        return getFilePlain(args, InvokeOptions.Empty);
    }
    /**
     * ## # Artifactory File Data Source
     * 
     * Provides an Artifactory file datasource. This can be used to download a file from a given Artifactory repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-file = ArtifactoryFunctions.getFile(GetFileArgs.builder()
     *             .outputPath(&#34;tmp/artifact.zip&#34;)
     *             .path(&#34;/path/to/the/artifact.zip&#34;)
     *             .repository(&#34;repo-key&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFileResult> getFile(GetFileArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFile:getFile", TypeShape.of(GetFileResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## # Artifactory File Data Source
     * 
     * Provides an Artifactory file datasource. This can be used to download a file from a given Artifactory repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-file = ArtifactoryFunctions.getFile(GetFileArgs.builder()
     *             .outputPath(&#34;tmp/artifact.zip&#34;)
     *             .path(&#34;/path/to/the/artifact.zip&#34;)
     *             .repository(&#34;repo-key&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFileResult> getFilePlain(GetFilePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFile:getFile", TypeShape.of(GetFileResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## # Artifactory File Info Data Source
     * 
     * Provides an Artifactory fileinfo datasource. This can be used to read metadata of files stored in Artifactory repositories.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFileinfoArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-file = ArtifactoryFunctions.getFileinfo(GetFileinfoArgs.builder()
     *             .path(&#34;/path/to/the/artifact.zip&#34;)
     *             .repository(&#34;repo-key&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFileinfoResult> getFileinfo(GetFileinfoArgs args) {
        return getFileinfo(args, InvokeOptions.Empty);
    }
    /**
     * ## # Artifactory File Info Data Source
     * 
     * Provides an Artifactory fileinfo datasource. This can be used to read metadata of files stored in Artifactory repositories.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFileinfoArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-file = ArtifactoryFunctions.getFileinfo(GetFileinfoArgs.builder()
     *             .path(&#34;/path/to/the/artifact.zip&#34;)
     *             .repository(&#34;repo-key&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFileinfoResult> getFileinfoPlain(GetFileinfoPlainArgs args) {
        return getFileinfoPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## # Artifactory File Info Data Source
     * 
     * Provides an Artifactory fileinfo datasource. This can be used to read metadata of files stored in Artifactory repositories.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFileinfoArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-file = ArtifactoryFunctions.getFileinfo(GetFileinfoArgs.builder()
     *             .path(&#34;/path/to/the/artifact.zip&#34;)
     *             .repository(&#34;repo-key&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFileinfoResult> getFileinfo(GetFileinfoArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getFileinfo:getFileinfo", TypeShape.of(GetFileinfoResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## # Artifactory File Info Data Source
     * 
     * Provides an Artifactory fileinfo datasource. This can be used to read metadata of files stored in Artifactory repositories.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetFileinfoArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-file = ArtifactoryFunctions.getFileinfo(GetFileinfoArgs.builder()
     *             .path(&#34;/path/to/the/artifact.zip&#34;)
     *             .repository(&#34;repo-key&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFileinfoResult> getFileinfoPlain(GetFileinfoPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getFileinfo:getFileinfo", TypeShape.of(GetFileinfoResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## # Artifactory Group Data Source
     * 
     * Provides an Artifactory group datasource. This can be used to read the configuration of groups in artifactory.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myGroup = ArtifactoryFunctions.getGroup(GetGroupArgs.builder()
     *             .includeUsers(true)
     *             .name(&#34;my_group&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetGroupResult> getGroup(GetGroupArgs args) {
        return getGroup(args, InvokeOptions.Empty);
    }
    /**
     * ## # Artifactory Group Data Source
     * 
     * Provides an Artifactory group datasource. This can be used to read the configuration of groups in artifactory.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myGroup = ArtifactoryFunctions.getGroup(GetGroupArgs.builder()
     *             .includeUsers(true)
     *             .name(&#34;my_group&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetGroupResult> getGroupPlain(GetGroupPlainArgs args) {
        return getGroupPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## # Artifactory Group Data Source
     * 
     * Provides an Artifactory group datasource. This can be used to read the configuration of groups in artifactory.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myGroup = ArtifactoryFunctions.getGroup(GetGroupArgs.builder()
     *             .includeUsers(true)
     *             .name(&#34;my_group&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetGroupResult> getGroup(GetGroupArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getGroup:getGroup", TypeShape.of(GetGroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## # Artifactory Group Data Source
     * 
     * Provides an Artifactory group datasource. This can be used to read the configuration of groups in artifactory.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myGroup = ArtifactoryFunctions.getGroup(GetGroupArgs.builder()
     *             .includeUsers(true)
     *             .name(&#34;my_group&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetGroupResult> getGroupPlain(GetGroupPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getGroup:getGroup", TypeShape.of(GetGroupResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetLocalAlpineRepositoryResult> getLocalAlpineRepository(GetLocalAlpineRepositoryArgs args) {
        return getLocalAlpineRepository(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetLocalAlpineRepositoryResult> getLocalAlpineRepositoryPlain(GetLocalAlpineRepositoryPlainArgs args) {
        return getLocalAlpineRepositoryPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetLocalAlpineRepositoryResult> getLocalAlpineRepository(GetLocalAlpineRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getLocalAlpineRepository:getLocalAlpineRepository", TypeShape.of(GetLocalAlpineRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetLocalAlpineRepositoryResult> getLocalAlpineRepositoryPlain(GetLocalAlpineRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getLocalAlpineRepository:getLocalAlpineRepository", TypeShape.of(GetLocalAlpineRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetLocalBowerRepositoryResult> getLocalBowerRepository(GetLocalBowerRepositoryArgs args) {
        return getLocalBowerRepository(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetLocalBowerRepositoryResult> getLocalBowerRepositoryPlain(GetLocalBowerRepositoryPlainArgs args) {
        return getLocalBowerRepositoryPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetLocalBowerRepositoryResult> getLocalBowerRepository(GetLocalBowerRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getLocalBowerRepository:getLocalBowerRepository", TypeShape.of(GetLocalBowerRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetLocalBowerRepositoryResult> getLocalBowerRepositoryPlain(GetLocalBowerRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getLocalBowerRepository:getLocalBowerRepository", TypeShape.of(GetLocalBowerRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetLocalCargoRepositoryResult> getLocalCargoRepository(GetLocalCargoRepositoryArgs args) {
        return getLocalCargoRepository(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetLocalCargoRepositoryResult> getLocalCargoRepositoryPlain(GetLocalCargoRepositoryPlainArgs args) {
        return getLocalCargoRepositoryPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetLocalCargoRepositoryResult> getLocalCargoRepository(GetLocalCargoRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getLocalCargoRepository:getLocalCargoRepository", TypeShape.of(GetLocalCargoRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetLocalCargoRepositoryResult> getLocalCargoRepositoryPlain(GetLocalCargoRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getLocalCargoRepository:getLocalCargoRepository", TypeShape.of(GetLocalCargoRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetLocalChefRepositoryResult> getLocalChefRepository(GetLocalChefRepositoryArgs args) {
        return getLocalChefRepository(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetLocalChefRepositoryResult> getLocalChefRepositoryPlain(GetLocalChefRepositoryPlainArgs args) {
        return getLocalChefRepositoryPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetLocalChefRepositoryResult> getLocalChefRepository(GetLocalChefRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getLocalChefRepository:getLocalChefRepository", TypeShape.of(GetLocalChefRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetLocalChefRepositoryResult> getLocalChefRepositoryPlain(GetLocalChefRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getLocalChefRepository:getLocalChefRepository", TypeShape.of(GetLocalChefRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetLocalCocoapodsRepositoryResult> getLocalCocoapodsRepository(GetLocalCocoapodsRepositoryArgs args) {
        return getLocalCocoapodsRepository(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetLocalCocoapodsRepositoryResult> getLocalCocoapodsRepositoryPlain(GetLocalCocoapodsRepositoryPlainArgs args) {
        return getLocalCocoapodsRepositoryPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetLocalCocoapodsRepositoryResult> getLocalCocoapodsRepository(GetLocalCocoapodsRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getLocalCocoapodsRepository:getLocalCocoapodsRepository", TypeShape.of(GetLocalCocoapodsRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetLocalCocoapodsRepositoryResult> getLocalCocoapodsRepositoryPlain(GetLocalCocoapodsRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getLocalCocoapodsRepository:getLocalCocoapodsRepository", TypeShape.of(GetLocalCocoapodsRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetLocalComposerRepositoryResult> getLocalComposerRepository(GetLocalComposerRepositoryArgs args) {
        return getLocalComposerRepository(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetLocalComposerRepositoryResult> getLocalComposerRepositoryPlain(GetLocalComposerRepositoryPlainArgs args) {
        return getLocalComposerRepositoryPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetLocalComposerRepositoryResult> getLocalComposerRepository(GetLocalComposerRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getLocalComposerRepository:getLocalComposerRepository", TypeShape.of(GetLocalComposerRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetLocalComposerRepositoryResult> getLocalComposerRepositoryPlain(GetLocalComposerRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getLocalComposerRepository:getLocalComposerRepository", TypeShape.of(GetLocalComposerRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetLocalConanRepositoryResult> getLocalConanRepository(GetLocalConanRepositoryArgs args) {
        return getLocalConanRepository(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetLocalConanRepositoryResult> getLocalConanRepositoryPlain(GetLocalConanRepositoryPlainArgs args) {
        return getLocalConanRepositoryPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetLocalConanRepositoryResult> getLocalConanRepository(GetLocalConanRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getLocalConanRepository:getLocalConanRepository", TypeShape.of(GetLocalConanRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetLocalConanRepositoryResult> getLocalConanRepositoryPlain(GetLocalConanRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getLocalConanRepository:getLocalConanRepository", TypeShape.of(GetLocalConanRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetLocalCondaRepositoryResult> getLocalCondaRepository(GetLocalCondaRepositoryArgs args) {
        return getLocalCondaRepository(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetLocalCondaRepositoryResult> getLocalCondaRepositoryPlain(GetLocalCondaRepositoryPlainArgs args) {
        return getLocalCondaRepositoryPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetLocalCondaRepositoryResult> getLocalCondaRepository(GetLocalCondaRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getLocalCondaRepository:getLocalCondaRepository", TypeShape.of(GetLocalCondaRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetLocalCondaRepositoryResult> getLocalCondaRepositoryPlain(GetLocalCondaRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getLocalCondaRepository:getLocalCondaRepository", TypeShape.of(GetLocalCondaRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetLocalCranRepositoryResult> getLocalCranRepository(GetLocalCranRepositoryArgs args) {
        return getLocalCranRepository(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetLocalCranRepositoryResult> getLocalCranRepositoryPlain(GetLocalCranRepositoryPlainArgs args) {
        return getLocalCranRepositoryPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetLocalCranRepositoryResult> getLocalCranRepository(GetLocalCranRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getLocalCranRepository:getLocalCranRepository", TypeShape.of(GetLocalCranRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetLocalCranRepositoryResult> getLocalCranRepositoryPlain(GetLocalCranRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getLocalCranRepository:getLocalCranRepository", TypeShape.of(GetLocalCranRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetLocalDebianRepositoryResult> getLocalDebianRepository(GetLocalDebianRepositoryArgs args) {
        return getLocalDebianRepository(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetLocalDebianRepositoryResult> getLocalDebianRepositoryPlain(GetLocalDebianRepositoryPlainArgs args) {
        return getLocalDebianRepositoryPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetLocalDebianRepositoryResult> getLocalDebianRepository(GetLocalDebianRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getLocalDebianRepository:getLocalDebianRepository", TypeShape.of(GetLocalDebianRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetLocalDebianRepositoryResult> getLocalDebianRepositoryPlain(GetLocalDebianRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getLocalDebianRepository:getLocalDebianRepository", TypeShape.of(GetLocalDebianRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetLocalDockerV1RepositoryResult> getLocalDockerV1Repository(GetLocalDockerV1RepositoryArgs args) {
        return getLocalDockerV1Repository(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetLocalDockerV1RepositoryResult> getLocalDockerV1RepositoryPlain(GetLocalDockerV1RepositoryPlainArgs args) {
        return getLocalDockerV1RepositoryPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetLocalDockerV1RepositoryResult> getLocalDockerV1Repository(GetLocalDockerV1RepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getLocalDockerV1Repository:getLocalDockerV1Repository", TypeShape.of(GetLocalDockerV1RepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetLocalDockerV1RepositoryResult> getLocalDockerV1RepositoryPlain(GetLocalDockerV1RepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getLocalDockerV1Repository:getLocalDockerV1Repository", TypeShape.of(GetLocalDockerV1RepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetLocalDockerV2RepositoryResult> getLocalDockerV2Repository(GetLocalDockerV2RepositoryArgs args) {
        return getLocalDockerV2Repository(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetLocalDockerV2RepositoryResult> getLocalDockerV2RepositoryPlain(GetLocalDockerV2RepositoryPlainArgs args) {
        return getLocalDockerV2RepositoryPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetLocalDockerV2RepositoryResult> getLocalDockerV2Repository(GetLocalDockerV2RepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getLocalDockerV2Repository:getLocalDockerV2Repository", TypeShape.of(GetLocalDockerV2RepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetLocalDockerV2RepositoryResult> getLocalDockerV2RepositoryPlain(GetLocalDockerV2RepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getLocalDockerV2Repository:getLocalDockerV2Repository", TypeShape.of(GetLocalDockerV2RepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetLocalGemsRepositoryResult> getLocalGemsRepository(GetLocalGemsRepositoryArgs args) {
        return getLocalGemsRepository(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetLocalGemsRepositoryResult> getLocalGemsRepositoryPlain(GetLocalGemsRepositoryPlainArgs args) {
        return getLocalGemsRepositoryPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetLocalGemsRepositoryResult> getLocalGemsRepository(GetLocalGemsRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getLocalGemsRepository:getLocalGemsRepository", TypeShape.of(GetLocalGemsRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetLocalGemsRepositoryResult> getLocalGemsRepositoryPlain(GetLocalGemsRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getLocalGemsRepository:getLocalGemsRepository", TypeShape.of(GetLocalGemsRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetLocalGenericRepositoryResult> getLocalGenericRepository(GetLocalGenericRepositoryArgs args) {
        return getLocalGenericRepository(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetLocalGenericRepositoryResult> getLocalGenericRepositoryPlain(GetLocalGenericRepositoryPlainArgs args) {
        return getLocalGenericRepositoryPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetLocalGenericRepositoryResult> getLocalGenericRepository(GetLocalGenericRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getLocalGenericRepository:getLocalGenericRepository", TypeShape.of(GetLocalGenericRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetLocalGenericRepositoryResult> getLocalGenericRepositoryPlain(GetLocalGenericRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getLocalGenericRepository:getLocalGenericRepository", TypeShape.of(GetLocalGenericRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetLocalGitlfsRepositoryResult> getLocalGitlfsRepository(GetLocalGitlfsRepositoryArgs args) {
        return getLocalGitlfsRepository(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetLocalGitlfsRepositoryResult> getLocalGitlfsRepositoryPlain(GetLocalGitlfsRepositoryPlainArgs args) {
        return getLocalGitlfsRepositoryPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetLocalGitlfsRepositoryResult> getLocalGitlfsRepository(GetLocalGitlfsRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getLocalGitlfsRepository:getLocalGitlfsRepository", TypeShape.of(GetLocalGitlfsRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetLocalGitlfsRepositoryResult> getLocalGitlfsRepositoryPlain(GetLocalGitlfsRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getLocalGitlfsRepository:getLocalGitlfsRepository", TypeShape.of(GetLocalGitlfsRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetLocalGoRepositoryResult> getLocalGoRepository(GetLocalGoRepositoryArgs args) {
        return getLocalGoRepository(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetLocalGoRepositoryResult> getLocalGoRepositoryPlain(GetLocalGoRepositoryPlainArgs args) {
        return getLocalGoRepositoryPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetLocalGoRepositoryResult> getLocalGoRepository(GetLocalGoRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getLocalGoRepository:getLocalGoRepository", TypeShape.of(GetLocalGoRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetLocalGoRepositoryResult> getLocalGoRepositoryPlain(GetLocalGoRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getLocalGoRepository:getLocalGoRepository", TypeShape.of(GetLocalGoRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetLocalGradleRepositoryResult> getLocalGradleRepository(GetLocalGradleRepositoryArgs args) {
        return getLocalGradleRepository(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetLocalGradleRepositoryResult> getLocalGradleRepositoryPlain(GetLocalGradleRepositoryPlainArgs args) {
        return getLocalGradleRepositoryPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetLocalGradleRepositoryResult> getLocalGradleRepository(GetLocalGradleRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getLocalGradleRepository:getLocalGradleRepository", TypeShape.of(GetLocalGradleRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetLocalGradleRepositoryResult> getLocalGradleRepositoryPlain(GetLocalGradleRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getLocalGradleRepository:getLocalGradleRepository", TypeShape.of(GetLocalGradleRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetLocalHelmRepositoryResult> getLocalHelmRepository(GetLocalHelmRepositoryArgs args) {
        return getLocalHelmRepository(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetLocalHelmRepositoryResult> getLocalHelmRepositoryPlain(GetLocalHelmRepositoryPlainArgs args) {
        return getLocalHelmRepositoryPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetLocalHelmRepositoryResult> getLocalHelmRepository(GetLocalHelmRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getLocalHelmRepository:getLocalHelmRepository", TypeShape.of(GetLocalHelmRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetLocalHelmRepositoryResult> getLocalHelmRepositoryPlain(GetLocalHelmRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getLocalHelmRepository:getLocalHelmRepository", TypeShape.of(GetLocalHelmRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetLocalIvyRepositoryResult> getLocalIvyRepository(GetLocalIvyRepositoryArgs args) {
        return getLocalIvyRepository(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetLocalIvyRepositoryResult> getLocalIvyRepositoryPlain(GetLocalIvyRepositoryPlainArgs args) {
        return getLocalIvyRepositoryPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetLocalIvyRepositoryResult> getLocalIvyRepository(GetLocalIvyRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getLocalIvyRepository:getLocalIvyRepository", TypeShape.of(GetLocalIvyRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetLocalIvyRepositoryResult> getLocalIvyRepositoryPlain(GetLocalIvyRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getLocalIvyRepository:getLocalIvyRepository", TypeShape.of(GetLocalIvyRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetLocalMavenRepositoryResult> getLocalMavenRepository(GetLocalMavenRepositoryArgs args) {
        return getLocalMavenRepository(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetLocalMavenRepositoryResult> getLocalMavenRepositoryPlain(GetLocalMavenRepositoryPlainArgs args) {
        return getLocalMavenRepositoryPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetLocalMavenRepositoryResult> getLocalMavenRepository(GetLocalMavenRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getLocalMavenRepository:getLocalMavenRepository", TypeShape.of(GetLocalMavenRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetLocalMavenRepositoryResult> getLocalMavenRepositoryPlain(GetLocalMavenRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getLocalMavenRepository:getLocalMavenRepository", TypeShape.of(GetLocalMavenRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetLocalNpmRepositoryResult> getLocalNpmRepository(GetLocalNpmRepositoryArgs args) {
        return getLocalNpmRepository(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetLocalNpmRepositoryResult> getLocalNpmRepositoryPlain(GetLocalNpmRepositoryPlainArgs args) {
        return getLocalNpmRepositoryPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetLocalNpmRepositoryResult> getLocalNpmRepository(GetLocalNpmRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getLocalNpmRepository:getLocalNpmRepository", TypeShape.of(GetLocalNpmRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetLocalNpmRepositoryResult> getLocalNpmRepositoryPlain(GetLocalNpmRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getLocalNpmRepository:getLocalNpmRepository", TypeShape.of(GetLocalNpmRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetLocalNugetRepositoryResult> getLocalNugetRepository(GetLocalNugetRepositoryArgs args) {
        return getLocalNugetRepository(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetLocalNugetRepositoryResult> getLocalNugetRepositoryPlain(GetLocalNugetRepositoryPlainArgs args) {
        return getLocalNugetRepositoryPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetLocalNugetRepositoryResult> getLocalNugetRepository(GetLocalNugetRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getLocalNugetRepository:getLocalNugetRepository", TypeShape.of(GetLocalNugetRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetLocalNugetRepositoryResult> getLocalNugetRepositoryPlain(GetLocalNugetRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getLocalNugetRepository:getLocalNugetRepository", TypeShape.of(GetLocalNugetRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetLocalOpkgRepositoryResult> getLocalOpkgRepository(GetLocalOpkgRepositoryArgs args) {
        return getLocalOpkgRepository(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetLocalOpkgRepositoryResult> getLocalOpkgRepositoryPlain(GetLocalOpkgRepositoryPlainArgs args) {
        return getLocalOpkgRepositoryPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetLocalOpkgRepositoryResult> getLocalOpkgRepository(GetLocalOpkgRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getLocalOpkgRepository:getLocalOpkgRepository", TypeShape.of(GetLocalOpkgRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetLocalOpkgRepositoryResult> getLocalOpkgRepositoryPlain(GetLocalOpkgRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getLocalOpkgRepository:getLocalOpkgRepository", TypeShape.of(GetLocalOpkgRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetLocalPubRepositoryResult> getLocalPubRepository(GetLocalPubRepositoryArgs args) {
        return getLocalPubRepository(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetLocalPubRepositoryResult> getLocalPubRepositoryPlain(GetLocalPubRepositoryPlainArgs args) {
        return getLocalPubRepositoryPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetLocalPubRepositoryResult> getLocalPubRepository(GetLocalPubRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getLocalPubRepository:getLocalPubRepository", TypeShape.of(GetLocalPubRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetLocalPubRepositoryResult> getLocalPubRepositoryPlain(GetLocalPubRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getLocalPubRepository:getLocalPubRepository", TypeShape.of(GetLocalPubRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetLocalPuppetRepositoryResult> getLocalPuppetRepository(GetLocalPuppetRepositoryArgs args) {
        return getLocalPuppetRepository(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetLocalPuppetRepositoryResult> getLocalPuppetRepositoryPlain(GetLocalPuppetRepositoryPlainArgs args) {
        return getLocalPuppetRepositoryPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetLocalPuppetRepositoryResult> getLocalPuppetRepository(GetLocalPuppetRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getLocalPuppetRepository:getLocalPuppetRepository", TypeShape.of(GetLocalPuppetRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetLocalPuppetRepositoryResult> getLocalPuppetRepositoryPlain(GetLocalPuppetRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getLocalPuppetRepository:getLocalPuppetRepository", TypeShape.of(GetLocalPuppetRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetLocalPypiRepositoryResult> getLocalPypiRepository(GetLocalPypiRepositoryArgs args) {
        return getLocalPypiRepository(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetLocalPypiRepositoryResult> getLocalPypiRepositoryPlain(GetLocalPypiRepositoryPlainArgs args) {
        return getLocalPypiRepositoryPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetLocalPypiRepositoryResult> getLocalPypiRepository(GetLocalPypiRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getLocalPypiRepository:getLocalPypiRepository", TypeShape.of(GetLocalPypiRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetLocalPypiRepositoryResult> getLocalPypiRepositoryPlain(GetLocalPypiRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getLocalPypiRepository:getLocalPypiRepository", TypeShape.of(GetLocalPypiRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetLocalRpmRepositoryResult> getLocalRpmRepository(GetLocalRpmRepositoryArgs args) {
        return getLocalRpmRepository(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetLocalRpmRepositoryResult> getLocalRpmRepositoryPlain(GetLocalRpmRepositoryPlainArgs args) {
        return getLocalRpmRepositoryPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetLocalRpmRepositoryResult> getLocalRpmRepository(GetLocalRpmRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getLocalRpmRepository:getLocalRpmRepository", TypeShape.of(GetLocalRpmRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetLocalRpmRepositoryResult> getLocalRpmRepositoryPlain(GetLocalRpmRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getLocalRpmRepository:getLocalRpmRepository", TypeShape.of(GetLocalRpmRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetLocalSbtRepositoryResult> getLocalSbtRepository(GetLocalSbtRepositoryArgs args) {
        return getLocalSbtRepository(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetLocalSbtRepositoryResult> getLocalSbtRepositoryPlain(GetLocalSbtRepositoryPlainArgs args) {
        return getLocalSbtRepositoryPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetLocalSbtRepositoryResult> getLocalSbtRepository(GetLocalSbtRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getLocalSbtRepository:getLocalSbtRepository", TypeShape.of(GetLocalSbtRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetLocalSbtRepositoryResult> getLocalSbtRepositoryPlain(GetLocalSbtRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getLocalSbtRepository:getLocalSbtRepository", TypeShape.of(GetLocalSbtRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetLocalSwiftRepositoryResult> getLocalSwiftRepository(GetLocalSwiftRepositoryArgs args) {
        return getLocalSwiftRepository(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetLocalSwiftRepositoryResult> getLocalSwiftRepositoryPlain(GetLocalSwiftRepositoryPlainArgs args) {
        return getLocalSwiftRepositoryPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetLocalSwiftRepositoryResult> getLocalSwiftRepository(GetLocalSwiftRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getLocalSwiftRepository:getLocalSwiftRepository", TypeShape.of(GetLocalSwiftRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetLocalSwiftRepositoryResult> getLocalSwiftRepositoryPlain(GetLocalSwiftRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getLocalSwiftRepository:getLocalSwiftRepository", TypeShape.of(GetLocalSwiftRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetLocalTerraformModuleRepositoryResult> getLocalTerraformModuleRepository(GetLocalTerraformModuleRepositoryArgs args) {
        return getLocalTerraformModuleRepository(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetLocalTerraformModuleRepositoryResult> getLocalTerraformModuleRepositoryPlain(GetLocalTerraformModuleRepositoryPlainArgs args) {
        return getLocalTerraformModuleRepositoryPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetLocalTerraformModuleRepositoryResult> getLocalTerraformModuleRepository(GetLocalTerraformModuleRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getLocalTerraformModuleRepository:getLocalTerraformModuleRepository", TypeShape.of(GetLocalTerraformModuleRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetLocalTerraformModuleRepositoryResult> getLocalTerraformModuleRepositoryPlain(GetLocalTerraformModuleRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getLocalTerraformModuleRepository:getLocalTerraformModuleRepository", TypeShape.of(GetLocalTerraformModuleRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetLocalTerraformProviderRepositoryResult> getLocalTerraformProviderRepository(GetLocalTerraformProviderRepositoryArgs args) {
        return getLocalTerraformProviderRepository(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetLocalTerraformProviderRepositoryResult> getLocalTerraformProviderRepositoryPlain(GetLocalTerraformProviderRepositoryPlainArgs args) {
        return getLocalTerraformProviderRepositoryPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetLocalTerraformProviderRepositoryResult> getLocalTerraformProviderRepository(GetLocalTerraformProviderRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getLocalTerraformProviderRepository:getLocalTerraformProviderRepository", TypeShape.of(GetLocalTerraformProviderRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetLocalTerraformProviderRepositoryResult> getLocalTerraformProviderRepositoryPlain(GetLocalTerraformProviderRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getLocalTerraformProviderRepository:getLocalTerraformProviderRepository", TypeShape.of(GetLocalTerraformProviderRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetLocalTerraformbackendRepositoryResult> getLocalTerraformbackendRepository(GetLocalTerraformbackendRepositoryArgs args) {
        return getLocalTerraformbackendRepository(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetLocalTerraformbackendRepositoryResult> getLocalTerraformbackendRepositoryPlain(GetLocalTerraformbackendRepositoryPlainArgs args) {
        return getLocalTerraformbackendRepositoryPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetLocalTerraformbackendRepositoryResult> getLocalTerraformbackendRepository(GetLocalTerraformbackendRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getLocalTerraformbackendRepository:getLocalTerraformbackendRepository", TypeShape.of(GetLocalTerraformbackendRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetLocalTerraformbackendRepositoryResult> getLocalTerraformbackendRepositoryPlain(GetLocalTerraformbackendRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getLocalTerraformbackendRepository:getLocalTerraformbackendRepository", TypeShape.of(GetLocalTerraformbackendRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetLocalVagrantRepositoryResult> getLocalVagrantRepository(GetLocalVagrantRepositoryArgs args) {
        return getLocalVagrantRepository(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetLocalVagrantRepositoryResult> getLocalVagrantRepositoryPlain(GetLocalVagrantRepositoryPlainArgs args) {
        return getLocalVagrantRepositoryPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetLocalVagrantRepositoryResult> getLocalVagrantRepository(GetLocalVagrantRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getLocalVagrantRepository:getLocalVagrantRepository", TypeShape.of(GetLocalVagrantRepositoryResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetLocalVagrantRepositoryResult> getLocalVagrantRepositoryPlain(GetLocalVagrantRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getLocalVagrantRepository:getLocalVagrantRepository", TypeShape.of(GetLocalVagrantRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## # Artifactory Permission Target Data Source
     * 
     * Provides an Artifactory permission target data source. This can be used to read the configuration of permission targets in artifactory.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetPermissionTargetArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var target1 = ArtifactoryFunctions.getPermissionTarget(GetPermissionTargetArgs.builder()
     *             .name(&#34;my_permission&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetPermissionTargetResult> getPermissionTarget(GetPermissionTargetArgs args) {
        return getPermissionTarget(args, InvokeOptions.Empty);
    }
    /**
     * ## # Artifactory Permission Target Data Source
     * 
     * Provides an Artifactory permission target data source. This can be used to read the configuration of permission targets in artifactory.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetPermissionTargetArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var target1 = ArtifactoryFunctions.getPermissionTarget(GetPermissionTargetArgs.builder()
     *             .name(&#34;my_permission&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetPermissionTargetResult> getPermissionTargetPlain(GetPermissionTargetPlainArgs args) {
        return getPermissionTargetPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## # Artifactory Permission Target Data Source
     * 
     * Provides an Artifactory permission target data source. This can be used to read the configuration of permission targets in artifactory.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetPermissionTargetArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var target1 = ArtifactoryFunctions.getPermissionTarget(GetPermissionTargetArgs.builder()
     *             .name(&#34;my_permission&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetPermissionTargetResult> getPermissionTarget(GetPermissionTargetArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getPermissionTarget:getPermissionTarget", TypeShape.of(GetPermissionTargetResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## # Artifactory Permission Target Data Source
     * 
     * Provides an Artifactory permission target data source. This can be used to read the configuration of permission targets in artifactory.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetPermissionTargetArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var target1 = ArtifactoryFunctions.getPermissionTarget(GetPermissionTargetArgs.builder()
     *             .name(&#34;my_permission&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetPermissionTargetResult> getPermissionTargetPlain(GetPermissionTargetPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getPermissionTarget:getPermissionTarget", TypeShape.of(GetPermissionTargetResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Alpine repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteAlpineRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-alpine = ArtifactoryFunctions.getRemoteAlpineRepository(GetRemoteAlpineRepositoryArgs.builder()
     *             .key(&#34;remote-alpine&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteAlpineRepositoryResult> getRemoteAlpineRepository(GetRemoteAlpineRepositoryArgs args) {
        return getRemoteAlpineRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Alpine repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteAlpineRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-alpine = ArtifactoryFunctions.getRemoteAlpineRepository(GetRemoteAlpineRepositoryArgs.builder()
     *             .key(&#34;remote-alpine&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteAlpineRepositoryResult> getRemoteAlpineRepositoryPlain(GetRemoteAlpineRepositoryPlainArgs args) {
        return getRemoteAlpineRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Alpine repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteAlpineRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-alpine = ArtifactoryFunctions.getRemoteAlpineRepository(GetRemoteAlpineRepositoryArgs.builder()
     *             .key(&#34;remote-alpine&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteAlpineRepositoryResult> getRemoteAlpineRepository(GetRemoteAlpineRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getRemoteAlpineRepository:getRemoteAlpineRepository", TypeShape.of(GetRemoteAlpineRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Alpine repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteAlpineRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-alpine = ArtifactoryFunctions.getRemoteAlpineRepository(GetRemoteAlpineRepositoryArgs.builder()
     *             .key(&#34;remote-alpine&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteAlpineRepositoryResult> getRemoteAlpineRepositoryPlain(GetRemoteAlpineRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getRemoteAlpineRepository:getRemoteAlpineRepository", TypeShape.of(GetRemoteAlpineRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Bower repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteBowerRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-bower = ArtifactoryFunctions.getRemoteBowerRepository(GetRemoteBowerRepositoryArgs.builder()
     *             .key(&#34;remote-bower&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteBowerRepositoryResult> getRemoteBowerRepository(GetRemoteBowerRepositoryArgs args) {
        return getRemoteBowerRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Bower repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteBowerRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-bower = ArtifactoryFunctions.getRemoteBowerRepository(GetRemoteBowerRepositoryArgs.builder()
     *             .key(&#34;remote-bower&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteBowerRepositoryResult> getRemoteBowerRepositoryPlain(GetRemoteBowerRepositoryPlainArgs args) {
        return getRemoteBowerRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Bower repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteBowerRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-bower = ArtifactoryFunctions.getRemoteBowerRepository(GetRemoteBowerRepositoryArgs.builder()
     *             .key(&#34;remote-bower&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteBowerRepositoryResult> getRemoteBowerRepository(GetRemoteBowerRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getRemoteBowerRepository:getRemoteBowerRepository", TypeShape.of(GetRemoteBowerRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Bower repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteBowerRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-bower = ArtifactoryFunctions.getRemoteBowerRepository(GetRemoteBowerRepositoryArgs.builder()
     *             .key(&#34;remote-bower&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteBowerRepositoryResult> getRemoteBowerRepositoryPlain(GetRemoteBowerRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getRemoteBowerRepository:getRemoteBowerRepository", TypeShape.of(GetRemoteBowerRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Cargo repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteCargoRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-cargo = ArtifactoryFunctions.getRemoteCargoRepository(GetRemoteCargoRepositoryArgs.builder()
     *             .key(&#34;remote-cargo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteCargoRepositoryResult> getRemoteCargoRepository(GetRemoteCargoRepositoryArgs args) {
        return getRemoteCargoRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Cargo repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteCargoRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-cargo = ArtifactoryFunctions.getRemoteCargoRepository(GetRemoteCargoRepositoryArgs.builder()
     *             .key(&#34;remote-cargo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteCargoRepositoryResult> getRemoteCargoRepositoryPlain(GetRemoteCargoRepositoryPlainArgs args) {
        return getRemoteCargoRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Cargo repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteCargoRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-cargo = ArtifactoryFunctions.getRemoteCargoRepository(GetRemoteCargoRepositoryArgs.builder()
     *             .key(&#34;remote-cargo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteCargoRepositoryResult> getRemoteCargoRepository(GetRemoteCargoRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getRemoteCargoRepository:getRemoteCargoRepository", TypeShape.of(GetRemoteCargoRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Cargo repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteCargoRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-cargo = ArtifactoryFunctions.getRemoteCargoRepository(GetRemoteCargoRepositoryArgs.builder()
     *             .key(&#34;remote-cargo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteCargoRepositoryResult> getRemoteCargoRepositoryPlain(GetRemoteCargoRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getRemoteCargoRepository:getRemoteCargoRepository", TypeShape.of(GetRemoteCargoRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Chef repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteChefRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-chef = ArtifactoryFunctions.getRemoteChefRepository(GetRemoteChefRepositoryArgs.builder()
     *             .key(&#34;remote-chef&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteChefRepositoryResult> getRemoteChefRepository(GetRemoteChefRepositoryArgs args) {
        return getRemoteChefRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Chef repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteChefRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-chef = ArtifactoryFunctions.getRemoteChefRepository(GetRemoteChefRepositoryArgs.builder()
     *             .key(&#34;remote-chef&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteChefRepositoryResult> getRemoteChefRepositoryPlain(GetRemoteChefRepositoryPlainArgs args) {
        return getRemoteChefRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Chef repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteChefRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-chef = ArtifactoryFunctions.getRemoteChefRepository(GetRemoteChefRepositoryArgs.builder()
     *             .key(&#34;remote-chef&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteChefRepositoryResult> getRemoteChefRepository(GetRemoteChefRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getRemoteChefRepository:getRemoteChefRepository", TypeShape.of(GetRemoteChefRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Chef repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteChefRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-chef = ArtifactoryFunctions.getRemoteChefRepository(GetRemoteChefRepositoryArgs.builder()
     *             .key(&#34;remote-chef&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteChefRepositoryResult> getRemoteChefRepositoryPlain(GetRemoteChefRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getRemoteChefRepository:getRemoteChefRepository", TypeShape.of(GetRemoteChefRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote CocoaPods repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteCocoapodsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-cocoapods = ArtifactoryFunctions.getRemoteCocoapodsRepository(GetRemoteCocoapodsRepositoryArgs.builder()
     *             .key(&#34;remote-cocoapods&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteCocoapodsRepositoryResult> getRemoteCocoapodsRepository(GetRemoteCocoapodsRepositoryArgs args) {
        return getRemoteCocoapodsRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote CocoaPods repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteCocoapodsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-cocoapods = ArtifactoryFunctions.getRemoteCocoapodsRepository(GetRemoteCocoapodsRepositoryArgs.builder()
     *             .key(&#34;remote-cocoapods&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteCocoapodsRepositoryResult> getRemoteCocoapodsRepositoryPlain(GetRemoteCocoapodsRepositoryPlainArgs args) {
        return getRemoteCocoapodsRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote CocoaPods repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteCocoapodsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-cocoapods = ArtifactoryFunctions.getRemoteCocoapodsRepository(GetRemoteCocoapodsRepositoryArgs.builder()
     *             .key(&#34;remote-cocoapods&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteCocoapodsRepositoryResult> getRemoteCocoapodsRepository(GetRemoteCocoapodsRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getRemoteCocoapodsRepository:getRemoteCocoapodsRepository", TypeShape.of(GetRemoteCocoapodsRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote CocoaPods repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteCocoapodsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-cocoapods = ArtifactoryFunctions.getRemoteCocoapodsRepository(GetRemoteCocoapodsRepositoryArgs.builder()
     *             .key(&#34;remote-cocoapods&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteCocoapodsRepositoryResult> getRemoteCocoapodsRepositoryPlain(GetRemoteCocoapodsRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getRemoteCocoapodsRepository:getRemoteCocoapodsRepository", TypeShape.of(GetRemoteCocoapodsRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Composer repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteComposerRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-composer = ArtifactoryFunctions.getRemoteComposerRepository(GetRemoteComposerRepositoryArgs.builder()
     *             .key(&#34;remote-composer&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteComposerRepositoryResult> getRemoteComposerRepository(GetRemoteComposerRepositoryArgs args) {
        return getRemoteComposerRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Composer repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteComposerRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-composer = ArtifactoryFunctions.getRemoteComposerRepository(GetRemoteComposerRepositoryArgs.builder()
     *             .key(&#34;remote-composer&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteComposerRepositoryResult> getRemoteComposerRepositoryPlain(GetRemoteComposerRepositoryPlainArgs args) {
        return getRemoteComposerRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Composer repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteComposerRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-composer = ArtifactoryFunctions.getRemoteComposerRepository(GetRemoteComposerRepositoryArgs.builder()
     *             .key(&#34;remote-composer&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteComposerRepositoryResult> getRemoteComposerRepository(GetRemoteComposerRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getRemoteComposerRepository:getRemoteComposerRepository", TypeShape.of(GetRemoteComposerRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Composer repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteComposerRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-composer = ArtifactoryFunctions.getRemoteComposerRepository(GetRemoteComposerRepositoryArgs.builder()
     *             .key(&#34;remote-composer&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteComposerRepositoryResult> getRemoteComposerRepositoryPlain(GetRemoteComposerRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getRemoteComposerRepository:getRemoteComposerRepository", TypeShape.of(GetRemoteComposerRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Conan repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteConanRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-conan = ArtifactoryFunctions.getRemoteConanRepository(GetRemoteConanRepositoryArgs.builder()
     *             .key(&#34;remote-conan&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteConanRepositoryResult> getRemoteConanRepository(GetRemoteConanRepositoryArgs args) {
        return getRemoteConanRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Conan repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteConanRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-conan = ArtifactoryFunctions.getRemoteConanRepository(GetRemoteConanRepositoryArgs.builder()
     *             .key(&#34;remote-conan&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteConanRepositoryResult> getRemoteConanRepositoryPlain(GetRemoteConanRepositoryPlainArgs args) {
        return getRemoteConanRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Conan repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteConanRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-conan = ArtifactoryFunctions.getRemoteConanRepository(GetRemoteConanRepositoryArgs.builder()
     *             .key(&#34;remote-conan&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteConanRepositoryResult> getRemoteConanRepository(GetRemoteConanRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getRemoteConanRepository:getRemoteConanRepository", TypeShape.of(GetRemoteConanRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Conan repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteConanRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-conan = ArtifactoryFunctions.getRemoteConanRepository(GetRemoteConanRepositoryArgs.builder()
     *             .key(&#34;remote-conan&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteConanRepositoryResult> getRemoteConanRepositoryPlain(GetRemoteConanRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getRemoteConanRepository:getRemoteConanRepository", TypeShape.of(GetRemoteConanRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Conda repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteCondaRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-conda = ArtifactoryFunctions.getRemoteCondaRepository(GetRemoteCondaRepositoryArgs.builder()
     *             .key(&#34;remote-conda&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteCondaRepositoryResult> getRemoteCondaRepository(GetRemoteCondaRepositoryArgs args) {
        return getRemoteCondaRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Conda repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteCondaRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-conda = ArtifactoryFunctions.getRemoteCondaRepository(GetRemoteCondaRepositoryArgs.builder()
     *             .key(&#34;remote-conda&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteCondaRepositoryResult> getRemoteCondaRepositoryPlain(GetRemoteCondaRepositoryPlainArgs args) {
        return getRemoteCondaRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Conda repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteCondaRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-conda = ArtifactoryFunctions.getRemoteCondaRepository(GetRemoteCondaRepositoryArgs.builder()
     *             .key(&#34;remote-conda&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteCondaRepositoryResult> getRemoteCondaRepository(GetRemoteCondaRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getRemoteCondaRepository:getRemoteCondaRepository", TypeShape.of(GetRemoteCondaRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Conda repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteCondaRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-conda = ArtifactoryFunctions.getRemoteCondaRepository(GetRemoteCondaRepositoryArgs.builder()
     *             .key(&#34;remote-conda&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteCondaRepositoryResult> getRemoteCondaRepositoryPlain(GetRemoteCondaRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getRemoteCondaRepository:getRemoteCondaRepository", TypeShape.of(GetRemoteCondaRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote CRAN repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteCranRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-cran = ArtifactoryFunctions.getRemoteCranRepository(GetRemoteCranRepositoryArgs.builder()
     *             .key(&#34;remote-cran&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteCranRepositoryResult> getRemoteCranRepository(GetRemoteCranRepositoryArgs args) {
        return getRemoteCranRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote CRAN repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteCranRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-cran = ArtifactoryFunctions.getRemoteCranRepository(GetRemoteCranRepositoryArgs.builder()
     *             .key(&#34;remote-cran&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteCranRepositoryResult> getRemoteCranRepositoryPlain(GetRemoteCranRepositoryPlainArgs args) {
        return getRemoteCranRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote CRAN repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteCranRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-cran = ArtifactoryFunctions.getRemoteCranRepository(GetRemoteCranRepositoryArgs.builder()
     *             .key(&#34;remote-cran&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteCranRepositoryResult> getRemoteCranRepository(GetRemoteCranRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getRemoteCranRepository:getRemoteCranRepository", TypeShape.of(GetRemoteCranRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote CRAN repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteCranRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-cran = ArtifactoryFunctions.getRemoteCranRepository(GetRemoteCranRepositoryArgs.builder()
     *             .key(&#34;remote-cran&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteCranRepositoryResult> getRemoteCranRepositoryPlain(GetRemoteCranRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getRemoteCranRepository:getRemoteCranRepository", TypeShape.of(GetRemoteCranRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Debian repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteDebianRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-debian = ArtifactoryFunctions.getRemoteDebianRepository(GetRemoteDebianRepositoryArgs.builder()
     *             .key(&#34;remote-debian&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteDebianRepositoryResult> getRemoteDebianRepository(GetRemoteDebianRepositoryArgs args) {
        return getRemoteDebianRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Debian repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteDebianRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-debian = ArtifactoryFunctions.getRemoteDebianRepository(GetRemoteDebianRepositoryArgs.builder()
     *             .key(&#34;remote-debian&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteDebianRepositoryResult> getRemoteDebianRepositoryPlain(GetRemoteDebianRepositoryPlainArgs args) {
        return getRemoteDebianRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Debian repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteDebianRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-debian = ArtifactoryFunctions.getRemoteDebianRepository(GetRemoteDebianRepositoryArgs.builder()
     *             .key(&#34;remote-debian&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteDebianRepositoryResult> getRemoteDebianRepository(GetRemoteDebianRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getRemoteDebianRepository:getRemoteDebianRepository", TypeShape.of(GetRemoteDebianRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Debian repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteDebianRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-debian = ArtifactoryFunctions.getRemoteDebianRepository(GetRemoteDebianRepositoryArgs.builder()
     *             .key(&#34;remote-debian&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteDebianRepositoryResult> getRemoteDebianRepositoryPlain(GetRemoteDebianRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getRemoteDebianRepository:getRemoteDebianRepository", TypeShape.of(GetRemoteDebianRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Docker repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteDockerRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-docker = ArtifactoryFunctions.getRemoteDockerRepository(GetRemoteDockerRepositoryArgs.builder()
     *             .key(&#34;remote-docker&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteDockerRepositoryResult> getRemoteDockerRepository(GetRemoteDockerRepositoryArgs args) {
        return getRemoteDockerRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Docker repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteDockerRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-docker = ArtifactoryFunctions.getRemoteDockerRepository(GetRemoteDockerRepositoryArgs.builder()
     *             .key(&#34;remote-docker&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteDockerRepositoryResult> getRemoteDockerRepositoryPlain(GetRemoteDockerRepositoryPlainArgs args) {
        return getRemoteDockerRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Docker repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteDockerRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-docker = ArtifactoryFunctions.getRemoteDockerRepository(GetRemoteDockerRepositoryArgs.builder()
     *             .key(&#34;remote-docker&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteDockerRepositoryResult> getRemoteDockerRepository(GetRemoteDockerRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getRemoteDockerRepository:getRemoteDockerRepository", TypeShape.of(GetRemoteDockerRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Docker repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteDockerRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-docker = ArtifactoryFunctions.getRemoteDockerRepository(GetRemoteDockerRepositoryArgs.builder()
     *             .key(&#34;remote-docker&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteDockerRepositoryResult> getRemoteDockerRepositoryPlain(GetRemoteDockerRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getRemoteDockerRepository:getRemoteDockerRepository", TypeShape.of(GetRemoteDockerRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Gems repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteGemsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-gems = ArtifactoryFunctions.getRemoteGemsRepository(GetRemoteGemsRepositoryArgs.builder()
     *             .key(&#34;remote-gems&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteGemsRepositoryResult> getRemoteGemsRepository(GetRemoteGemsRepositoryArgs args) {
        return getRemoteGemsRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Gems repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteGemsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-gems = ArtifactoryFunctions.getRemoteGemsRepository(GetRemoteGemsRepositoryArgs.builder()
     *             .key(&#34;remote-gems&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteGemsRepositoryResult> getRemoteGemsRepositoryPlain(GetRemoteGemsRepositoryPlainArgs args) {
        return getRemoteGemsRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Gems repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteGemsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-gems = ArtifactoryFunctions.getRemoteGemsRepository(GetRemoteGemsRepositoryArgs.builder()
     *             .key(&#34;remote-gems&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteGemsRepositoryResult> getRemoteGemsRepository(GetRemoteGemsRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getRemoteGemsRepository:getRemoteGemsRepository", TypeShape.of(GetRemoteGemsRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Gems repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteGemsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-gems = ArtifactoryFunctions.getRemoteGemsRepository(GetRemoteGemsRepositoryArgs.builder()
     *             .key(&#34;remote-gems&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteGemsRepositoryResult> getRemoteGemsRepositoryPlain(GetRemoteGemsRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getRemoteGemsRepository:getRemoteGemsRepository", TypeShape.of(GetRemoteGemsRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Generic repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteGenericRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-generic = ArtifactoryFunctions.getRemoteGenericRepository(GetRemoteGenericRepositoryArgs.builder()
     *             .key(&#34;remote-generic&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteGenericRepositoryResult> getRemoteGenericRepository(GetRemoteGenericRepositoryArgs args) {
        return getRemoteGenericRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Generic repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteGenericRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-generic = ArtifactoryFunctions.getRemoteGenericRepository(GetRemoteGenericRepositoryArgs.builder()
     *             .key(&#34;remote-generic&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteGenericRepositoryResult> getRemoteGenericRepositoryPlain(GetRemoteGenericRepositoryPlainArgs args) {
        return getRemoteGenericRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Generic repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteGenericRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-generic = ArtifactoryFunctions.getRemoteGenericRepository(GetRemoteGenericRepositoryArgs.builder()
     *             .key(&#34;remote-generic&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteGenericRepositoryResult> getRemoteGenericRepository(GetRemoteGenericRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getRemoteGenericRepository:getRemoteGenericRepository", TypeShape.of(GetRemoteGenericRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Generic repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteGenericRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-generic = ArtifactoryFunctions.getRemoteGenericRepository(GetRemoteGenericRepositoryArgs.builder()
     *             .key(&#34;remote-generic&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteGenericRepositoryResult> getRemoteGenericRepositoryPlain(GetRemoteGenericRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getRemoteGenericRepository:getRemoteGenericRepository", TypeShape.of(GetRemoteGenericRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote GitLfs repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteGitlfsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-gitlfs = ArtifactoryFunctions.getRemoteGitlfsRepository(GetRemoteGitlfsRepositoryArgs.builder()
     *             .key(&#34;remote-gitlfs&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteGitlfsRepositoryResult> getRemoteGitlfsRepository(GetRemoteGitlfsRepositoryArgs args) {
        return getRemoteGitlfsRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote GitLfs repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteGitlfsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-gitlfs = ArtifactoryFunctions.getRemoteGitlfsRepository(GetRemoteGitlfsRepositoryArgs.builder()
     *             .key(&#34;remote-gitlfs&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteGitlfsRepositoryResult> getRemoteGitlfsRepositoryPlain(GetRemoteGitlfsRepositoryPlainArgs args) {
        return getRemoteGitlfsRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote GitLfs repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteGitlfsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-gitlfs = ArtifactoryFunctions.getRemoteGitlfsRepository(GetRemoteGitlfsRepositoryArgs.builder()
     *             .key(&#34;remote-gitlfs&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteGitlfsRepositoryResult> getRemoteGitlfsRepository(GetRemoteGitlfsRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getRemoteGitlfsRepository:getRemoteGitlfsRepository", TypeShape.of(GetRemoteGitlfsRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote GitLfs repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteGitlfsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-gitlfs = ArtifactoryFunctions.getRemoteGitlfsRepository(GetRemoteGitlfsRepositoryArgs.builder()
     *             .key(&#34;remote-gitlfs&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteGitlfsRepositoryResult> getRemoteGitlfsRepositoryPlain(GetRemoteGitlfsRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getRemoteGitlfsRepository:getRemoteGitlfsRepository", TypeShape.of(GetRemoteGitlfsRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Go repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteGoRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-go = ArtifactoryFunctions.getRemoteGoRepository(GetRemoteGoRepositoryArgs.builder()
     *             .key(&#34;remote-go&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteGoRepositoryResult> getRemoteGoRepository(GetRemoteGoRepositoryArgs args) {
        return getRemoteGoRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Go repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteGoRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-go = ArtifactoryFunctions.getRemoteGoRepository(GetRemoteGoRepositoryArgs.builder()
     *             .key(&#34;remote-go&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteGoRepositoryResult> getRemoteGoRepositoryPlain(GetRemoteGoRepositoryPlainArgs args) {
        return getRemoteGoRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Go repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteGoRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-go = ArtifactoryFunctions.getRemoteGoRepository(GetRemoteGoRepositoryArgs.builder()
     *             .key(&#34;remote-go&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteGoRepositoryResult> getRemoteGoRepository(GetRemoteGoRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getRemoteGoRepository:getRemoteGoRepository", TypeShape.of(GetRemoteGoRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Go repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteGoRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-go = ArtifactoryFunctions.getRemoteGoRepository(GetRemoteGoRepositoryArgs.builder()
     *             .key(&#34;remote-go&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteGoRepositoryResult> getRemoteGoRepositoryPlain(GetRemoteGoRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getRemoteGoRepository:getRemoteGoRepository", TypeShape.of(GetRemoteGoRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Gradle repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteGradleRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-gradle = ArtifactoryFunctions.getRemoteGradleRepository(GetRemoteGradleRepositoryArgs.builder()
     *             .key(&#34;remote-gradle&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteGradleRepositoryResult> getRemoteGradleRepository(GetRemoteGradleRepositoryArgs args) {
        return getRemoteGradleRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Gradle repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteGradleRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-gradle = ArtifactoryFunctions.getRemoteGradleRepository(GetRemoteGradleRepositoryArgs.builder()
     *             .key(&#34;remote-gradle&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteGradleRepositoryResult> getRemoteGradleRepositoryPlain(GetRemoteGradleRepositoryPlainArgs args) {
        return getRemoteGradleRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Gradle repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteGradleRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-gradle = ArtifactoryFunctions.getRemoteGradleRepository(GetRemoteGradleRepositoryArgs.builder()
     *             .key(&#34;remote-gradle&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteGradleRepositoryResult> getRemoteGradleRepository(GetRemoteGradleRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getRemoteGradleRepository:getRemoteGradleRepository", TypeShape.of(GetRemoteGradleRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Gradle repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteGradleRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-gradle = ArtifactoryFunctions.getRemoteGradleRepository(GetRemoteGradleRepositoryArgs.builder()
     *             .key(&#34;remote-gradle&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteGradleRepositoryResult> getRemoteGradleRepositoryPlain(GetRemoteGradleRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getRemoteGradleRepository:getRemoteGradleRepository", TypeShape.of(GetRemoteGradleRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Helm repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteHelmRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-helm = ArtifactoryFunctions.getRemoteHelmRepository(GetRemoteHelmRepositoryArgs.builder()
     *             .key(&#34;remote-helm&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteHelmRepositoryResult> getRemoteHelmRepository(GetRemoteHelmRepositoryArgs args) {
        return getRemoteHelmRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Helm repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteHelmRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-helm = ArtifactoryFunctions.getRemoteHelmRepository(GetRemoteHelmRepositoryArgs.builder()
     *             .key(&#34;remote-helm&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteHelmRepositoryResult> getRemoteHelmRepositoryPlain(GetRemoteHelmRepositoryPlainArgs args) {
        return getRemoteHelmRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Helm repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteHelmRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-helm = ArtifactoryFunctions.getRemoteHelmRepository(GetRemoteHelmRepositoryArgs.builder()
     *             .key(&#34;remote-helm&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteHelmRepositoryResult> getRemoteHelmRepository(GetRemoteHelmRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getRemoteHelmRepository:getRemoteHelmRepository", TypeShape.of(GetRemoteHelmRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Helm repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteHelmRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-helm = ArtifactoryFunctions.getRemoteHelmRepository(GetRemoteHelmRepositoryArgs.builder()
     *             .key(&#34;remote-helm&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteHelmRepositoryResult> getRemoteHelmRepositoryPlain(GetRemoteHelmRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getRemoteHelmRepository:getRemoteHelmRepository", TypeShape.of(GetRemoteHelmRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Ivy repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteIvyRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-ivy = ArtifactoryFunctions.getRemoteIvyRepository(GetRemoteIvyRepositoryArgs.builder()
     *             .key(&#34;remote-ivy&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteIvyRepositoryResult> getRemoteIvyRepository(GetRemoteIvyRepositoryArgs args) {
        return getRemoteIvyRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Ivy repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteIvyRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-ivy = ArtifactoryFunctions.getRemoteIvyRepository(GetRemoteIvyRepositoryArgs.builder()
     *             .key(&#34;remote-ivy&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteIvyRepositoryResult> getRemoteIvyRepositoryPlain(GetRemoteIvyRepositoryPlainArgs args) {
        return getRemoteIvyRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Ivy repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteIvyRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-ivy = ArtifactoryFunctions.getRemoteIvyRepository(GetRemoteIvyRepositoryArgs.builder()
     *             .key(&#34;remote-ivy&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteIvyRepositoryResult> getRemoteIvyRepository(GetRemoteIvyRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getRemoteIvyRepository:getRemoteIvyRepository", TypeShape.of(GetRemoteIvyRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Ivy repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteIvyRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-ivy = ArtifactoryFunctions.getRemoteIvyRepository(GetRemoteIvyRepositoryArgs.builder()
     *             .key(&#34;remote-ivy&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteIvyRepositoryResult> getRemoteIvyRepositoryPlain(GetRemoteIvyRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getRemoteIvyRepository:getRemoteIvyRepository", TypeShape.of(GetRemoteIvyRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Maven repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteMavenRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-maven = ArtifactoryFunctions.getRemoteMavenRepository(GetRemoteMavenRepositoryArgs.builder()
     *             .key(&#34;remote-maven&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteMavenRepositoryResult> getRemoteMavenRepository(GetRemoteMavenRepositoryArgs args) {
        return getRemoteMavenRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Maven repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteMavenRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-maven = ArtifactoryFunctions.getRemoteMavenRepository(GetRemoteMavenRepositoryArgs.builder()
     *             .key(&#34;remote-maven&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteMavenRepositoryResult> getRemoteMavenRepositoryPlain(GetRemoteMavenRepositoryPlainArgs args) {
        return getRemoteMavenRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Maven repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteMavenRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-maven = ArtifactoryFunctions.getRemoteMavenRepository(GetRemoteMavenRepositoryArgs.builder()
     *             .key(&#34;remote-maven&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteMavenRepositoryResult> getRemoteMavenRepository(GetRemoteMavenRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getRemoteMavenRepository:getRemoteMavenRepository", TypeShape.of(GetRemoteMavenRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Maven repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteMavenRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-maven = ArtifactoryFunctions.getRemoteMavenRepository(GetRemoteMavenRepositoryArgs.builder()
     *             .key(&#34;remote-maven&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteMavenRepositoryResult> getRemoteMavenRepositoryPlain(GetRemoteMavenRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getRemoteMavenRepository:getRemoteMavenRepository", TypeShape.of(GetRemoteMavenRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Npm repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteNpmRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-npm = ArtifactoryFunctions.getRemoteNpmRepository(GetRemoteNpmRepositoryArgs.builder()
     *             .key(&#34;remote-npm&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteNpmRepositoryResult> getRemoteNpmRepository(GetRemoteNpmRepositoryArgs args) {
        return getRemoteNpmRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Npm repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteNpmRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-npm = ArtifactoryFunctions.getRemoteNpmRepository(GetRemoteNpmRepositoryArgs.builder()
     *             .key(&#34;remote-npm&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteNpmRepositoryResult> getRemoteNpmRepositoryPlain(GetRemoteNpmRepositoryPlainArgs args) {
        return getRemoteNpmRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Npm repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteNpmRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-npm = ArtifactoryFunctions.getRemoteNpmRepository(GetRemoteNpmRepositoryArgs.builder()
     *             .key(&#34;remote-npm&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteNpmRepositoryResult> getRemoteNpmRepository(GetRemoteNpmRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getRemoteNpmRepository:getRemoteNpmRepository", TypeShape.of(GetRemoteNpmRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Npm repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteNpmRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-npm = ArtifactoryFunctions.getRemoteNpmRepository(GetRemoteNpmRepositoryArgs.builder()
     *             .key(&#34;remote-npm&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteNpmRepositoryResult> getRemoteNpmRepositoryPlain(GetRemoteNpmRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getRemoteNpmRepository:getRemoteNpmRepository", TypeShape.of(GetRemoteNpmRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote NuGet repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteNugetRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-nuget = ArtifactoryFunctions.getRemoteNugetRepository(GetRemoteNugetRepositoryArgs.builder()
     *             .key(&#34;remote-nuget&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteNugetRepositoryResult> getRemoteNugetRepository(GetRemoteNugetRepositoryArgs args) {
        return getRemoteNugetRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote NuGet repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteNugetRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-nuget = ArtifactoryFunctions.getRemoteNugetRepository(GetRemoteNugetRepositoryArgs.builder()
     *             .key(&#34;remote-nuget&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteNugetRepositoryResult> getRemoteNugetRepositoryPlain(GetRemoteNugetRepositoryPlainArgs args) {
        return getRemoteNugetRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote NuGet repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteNugetRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-nuget = ArtifactoryFunctions.getRemoteNugetRepository(GetRemoteNugetRepositoryArgs.builder()
     *             .key(&#34;remote-nuget&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteNugetRepositoryResult> getRemoteNugetRepository(GetRemoteNugetRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getRemoteNugetRepository:getRemoteNugetRepository", TypeShape.of(GetRemoteNugetRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote NuGet repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteNugetRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-nuget = ArtifactoryFunctions.getRemoteNugetRepository(GetRemoteNugetRepositoryArgs.builder()
     *             .key(&#34;remote-nuget&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteNugetRepositoryResult> getRemoteNugetRepositoryPlain(GetRemoteNugetRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getRemoteNugetRepository:getRemoteNugetRepository", TypeShape.of(GetRemoteNugetRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Opkg repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteOpkgRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-opkg = ArtifactoryFunctions.getRemoteOpkgRepository(GetRemoteOpkgRepositoryArgs.builder()
     *             .key(&#34;remote-opkg&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteOpkgRepositoryResult> getRemoteOpkgRepository(GetRemoteOpkgRepositoryArgs args) {
        return getRemoteOpkgRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Opkg repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteOpkgRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-opkg = ArtifactoryFunctions.getRemoteOpkgRepository(GetRemoteOpkgRepositoryArgs.builder()
     *             .key(&#34;remote-opkg&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteOpkgRepositoryResult> getRemoteOpkgRepositoryPlain(GetRemoteOpkgRepositoryPlainArgs args) {
        return getRemoteOpkgRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Opkg repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteOpkgRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-opkg = ArtifactoryFunctions.getRemoteOpkgRepository(GetRemoteOpkgRepositoryArgs.builder()
     *             .key(&#34;remote-opkg&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteOpkgRepositoryResult> getRemoteOpkgRepository(GetRemoteOpkgRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getRemoteOpkgRepository:getRemoteOpkgRepository", TypeShape.of(GetRemoteOpkgRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Opkg repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteOpkgRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-opkg = ArtifactoryFunctions.getRemoteOpkgRepository(GetRemoteOpkgRepositoryArgs.builder()
     *             .key(&#34;remote-opkg&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteOpkgRepositoryResult> getRemoteOpkgRepositoryPlain(GetRemoteOpkgRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getRemoteOpkgRepository:getRemoteOpkgRepository", TypeShape.of(GetRemoteOpkgRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote P2 repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteP2RepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-p2 = ArtifactoryFunctions.getRemoteP2Repository(GetRemoteP2RepositoryArgs.builder()
     *             .key(&#34;remote-p2&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteP2RepositoryResult> getRemoteP2Repository(GetRemoteP2RepositoryArgs args) {
        return getRemoteP2Repository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote P2 repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteP2RepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-p2 = ArtifactoryFunctions.getRemoteP2Repository(GetRemoteP2RepositoryArgs.builder()
     *             .key(&#34;remote-p2&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteP2RepositoryResult> getRemoteP2RepositoryPlain(GetRemoteP2RepositoryPlainArgs args) {
        return getRemoteP2RepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote P2 repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteP2RepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-p2 = ArtifactoryFunctions.getRemoteP2Repository(GetRemoteP2RepositoryArgs.builder()
     *             .key(&#34;remote-p2&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteP2RepositoryResult> getRemoteP2Repository(GetRemoteP2RepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getRemoteP2Repository:getRemoteP2Repository", TypeShape.of(GetRemoteP2RepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote P2 repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteP2RepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-p2 = ArtifactoryFunctions.getRemoteP2Repository(GetRemoteP2RepositoryArgs.builder()
     *             .key(&#34;remote-p2&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteP2RepositoryResult> getRemoteP2RepositoryPlain(GetRemoteP2RepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getRemoteP2Repository:getRemoteP2Repository", TypeShape.of(GetRemoteP2RepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Pub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemotePubRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-pub = ArtifactoryFunctions.getRemotePubRepository(GetRemotePubRepositoryArgs.builder()
     *             .key(&#34;remote-pub&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemotePubRepositoryResult> getRemotePubRepository(GetRemotePubRepositoryArgs args) {
        return getRemotePubRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Pub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemotePubRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-pub = ArtifactoryFunctions.getRemotePubRepository(GetRemotePubRepositoryArgs.builder()
     *             .key(&#34;remote-pub&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemotePubRepositoryResult> getRemotePubRepositoryPlain(GetRemotePubRepositoryPlainArgs args) {
        return getRemotePubRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Pub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemotePubRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-pub = ArtifactoryFunctions.getRemotePubRepository(GetRemotePubRepositoryArgs.builder()
     *             .key(&#34;remote-pub&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemotePubRepositoryResult> getRemotePubRepository(GetRemotePubRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getRemotePubRepository:getRemotePubRepository", TypeShape.of(GetRemotePubRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Pub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemotePubRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-pub = ArtifactoryFunctions.getRemotePubRepository(GetRemotePubRepositoryArgs.builder()
     *             .key(&#34;remote-pub&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemotePubRepositoryResult> getRemotePubRepositoryPlain(GetRemotePubRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getRemotePubRepository:getRemotePubRepository", TypeShape.of(GetRemotePubRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Peppet repository.
     * 
     */
    public static Output<GetRemotePuppetRepositoryResult> getRemotePuppetRepository(GetRemotePuppetRepositoryArgs args) {
        return getRemotePuppetRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Peppet repository.
     * 
     */
    public static CompletableFuture<GetRemotePuppetRepositoryResult> getRemotePuppetRepositoryPlain(GetRemotePuppetRepositoryPlainArgs args) {
        return getRemotePuppetRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Peppet repository.
     * 
     */
    public static Output<GetRemotePuppetRepositoryResult> getRemotePuppetRepository(GetRemotePuppetRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getRemotePuppetRepository:getRemotePuppetRepository", TypeShape.of(GetRemotePuppetRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Peppet repository.
     * 
     */
    public static CompletableFuture<GetRemotePuppetRepositoryResult> getRemotePuppetRepositoryPlain(GetRemotePuppetRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getRemotePuppetRepository:getRemotePuppetRepository", TypeShape.of(GetRemotePuppetRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Pypi repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemotePypiRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-pypi = ArtifactoryFunctions.getRemotePypiRepository(GetRemotePypiRepositoryArgs.builder()
     *             .key(&#34;remote-pypi&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemotePypiRepositoryResult> getRemotePypiRepository(GetRemotePypiRepositoryArgs args) {
        return getRemotePypiRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Pypi repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemotePypiRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-pypi = ArtifactoryFunctions.getRemotePypiRepository(GetRemotePypiRepositoryArgs.builder()
     *             .key(&#34;remote-pypi&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemotePypiRepositoryResult> getRemotePypiRepositoryPlain(GetRemotePypiRepositoryPlainArgs args) {
        return getRemotePypiRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Pypi repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemotePypiRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-pypi = ArtifactoryFunctions.getRemotePypiRepository(GetRemotePypiRepositoryArgs.builder()
     *             .key(&#34;remote-pypi&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemotePypiRepositoryResult> getRemotePypiRepository(GetRemotePypiRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getRemotePypiRepository:getRemotePypiRepository", TypeShape.of(GetRemotePypiRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Pypi repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemotePypiRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-pypi = ArtifactoryFunctions.getRemotePypiRepository(GetRemotePypiRepositoryArgs.builder()
     *             .key(&#34;remote-pypi&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemotePypiRepositoryResult> getRemotePypiRepositoryPlain(GetRemotePypiRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getRemotePypiRepository:getRemotePypiRepository", TypeShape.of(GetRemotePypiRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Rpm repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteRpmRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-rpm = ArtifactoryFunctions.getRemoteRpmRepository(GetRemoteRpmRepositoryArgs.builder()
     *             .key(&#34;remote-rpm&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteRpmRepositoryResult> getRemoteRpmRepository(GetRemoteRpmRepositoryArgs args) {
        return getRemoteRpmRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Rpm repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteRpmRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-rpm = ArtifactoryFunctions.getRemoteRpmRepository(GetRemoteRpmRepositoryArgs.builder()
     *             .key(&#34;remote-rpm&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteRpmRepositoryResult> getRemoteRpmRepositoryPlain(GetRemoteRpmRepositoryPlainArgs args) {
        return getRemoteRpmRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Rpm repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteRpmRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-rpm = ArtifactoryFunctions.getRemoteRpmRepository(GetRemoteRpmRepositoryArgs.builder()
     *             .key(&#34;remote-rpm&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteRpmRepositoryResult> getRemoteRpmRepository(GetRemoteRpmRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getRemoteRpmRepository:getRemoteRpmRepository", TypeShape.of(GetRemoteRpmRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Rpm repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteRpmRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-rpm = ArtifactoryFunctions.getRemoteRpmRepository(GetRemoteRpmRepositoryArgs.builder()
     *             .key(&#34;remote-rpm&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteRpmRepositoryResult> getRemoteRpmRepositoryPlain(GetRemoteRpmRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getRemoteRpmRepository:getRemoteRpmRepository", TypeShape.of(GetRemoteRpmRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote SBT repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteSbtRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-sbt = ArtifactoryFunctions.getRemoteSbtRepository(GetRemoteSbtRepositoryArgs.builder()
     *             .key(&#34;remote-sbt&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteSbtRepositoryResult> getRemoteSbtRepository(GetRemoteSbtRepositoryArgs args) {
        return getRemoteSbtRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote SBT repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteSbtRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-sbt = ArtifactoryFunctions.getRemoteSbtRepository(GetRemoteSbtRepositoryArgs.builder()
     *             .key(&#34;remote-sbt&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteSbtRepositoryResult> getRemoteSbtRepositoryPlain(GetRemoteSbtRepositoryPlainArgs args) {
        return getRemoteSbtRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote SBT repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteSbtRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-sbt = ArtifactoryFunctions.getRemoteSbtRepository(GetRemoteSbtRepositoryArgs.builder()
     *             .key(&#34;remote-sbt&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteSbtRepositoryResult> getRemoteSbtRepository(GetRemoteSbtRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getRemoteSbtRepository:getRemoteSbtRepository", TypeShape.of(GetRemoteSbtRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote SBT repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteSbtRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-sbt = ArtifactoryFunctions.getRemoteSbtRepository(GetRemoteSbtRepositoryArgs.builder()
     *             .key(&#34;remote-sbt&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteSbtRepositoryResult> getRemoteSbtRepositoryPlain(GetRemoteSbtRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getRemoteSbtRepository:getRemoteSbtRepository", TypeShape.of(GetRemoteSbtRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Swift repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteSwiftRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-swift = ArtifactoryFunctions.getRemoteSwiftRepository(GetRemoteSwiftRepositoryArgs.builder()
     *             .key(&#34;remote-swift&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteSwiftRepositoryResult> getRemoteSwiftRepository(GetRemoteSwiftRepositoryArgs args) {
        return getRemoteSwiftRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Swift repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteSwiftRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-swift = ArtifactoryFunctions.getRemoteSwiftRepository(GetRemoteSwiftRepositoryArgs.builder()
     *             .key(&#34;remote-swift&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteSwiftRepositoryResult> getRemoteSwiftRepositoryPlain(GetRemoteSwiftRepositoryPlainArgs args) {
        return getRemoteSwiftRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote Swift repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteSwiftRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-swift = ArtifactoryFunctions.getRemoteSwiftRepository(GetRemoteSwiftRepositoryArgs.builder()
     *             .key(&#34;remote-swift&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteSwiftRepositoryResult> getRemoteSwiftRepository(GetRemoteSwiftRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getRemoteSwiftRepository:getRemoteSwiftRepository", TypeShape.of(GetRemoteSwiftRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote Swift repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteSwiftRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-swift = ArtifactoryFunctions.getRemoteSwiftRepository(GetRemoteSwiftRepositoryArgs.builder()
     *             .key(&#34;remote-swift&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteSwiftRepositoryResult> getRemoteSwiftRepositoryPlain(GetRemoteSwiftRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getRemoteSwiftRepository:getRemoteSwiftRepository", TypeShape.of(GetRemoteSwiftRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteTerraformRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-terraform = ArtifactoryFunctions.getRemoteTerraformRepository(GetRemoteTerraformRepositoryArgs.builder()
     *             .key(&#34;remote-terraform&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteTerraformRepositoryResult> getRemoteTerraformRepository(GetRemoteTerraformRepositoryArgs args) {
        return getRemoteTerraformRepository(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteTerraformRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-terraform = ArtifactoryFunctions.getRemoteTerraformRepository(GetRemoteTerraformRepositoryArgs.builder()
     *             .key(&#34;remote-terraform&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteTerraformRepositoryResult> getRemoteTerraformRepositoryPlain(GetRemoteTerraformRepositoryPlainArgs args) {
        return getRemoteTerraformRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteTerraformRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-terraform = ArtifactoryFunctions.getRemoteTerraformRepository(GetRemoteTerraformRepositoryArgs.builder()
     *             .key(&#34;remote-terraform&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteTerraformRepositoryResult> getRemoteTerraformRepository(GetRemoteTerraformRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getRemoteTerraformRepository:getRemoteTerraformRepository", TypeShape.of(GetRemoteTerraformRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteTerraformRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-terraform = ArtifactoryFunctions.getRemoteTerraformRepository(GetRemoteTerraformRepositoryArgs.builder()
     *             .key(&#34;remote-terraform&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteTerraformRepositoryResult> getRemoteTerraformRepositoryPlain(GetRemoteTerraformRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getRemoteTerraformRepository:getRemoteTerraformRepository", TypeShape.of(GetRemoteTerraformRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote VCS repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteVcsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-vcs = ArtifactoryFunctions.getRemoteVcsRepository(GetRemoteVcsRepositoryArgs.builder()
     *             .key(&#34;remote-vcs&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteVcsRepositoryResult> getRemoteVcsRepository(GetRemoteVcsRepositoryArgs args) {
        return getRemoteVcsRepository(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote VCS repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteVcsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-vcs = ArtifactoryFunctions.getRemoteVcsRepository(GetRemoteVcsRepositoryArgs.builder()
     *             .key(&#34;remote-vcs&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteVcsRepositoryResult> getRemoteVcsRepositoryPlain(GetRemoteVcsRepositoryPlainArgs args) {
        return getRemoteVcsRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves a remote VCS repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteVcsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-vcs = ArtifactoryFunctions.getRemoteVcsRepository(GetRemoteVcsRepositoryArgs.builder()
     *             .key(&#34;remote-vcs&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRemoteVcsRepositoryResult> getRemoteVcsRepository(GetRemoteVcsRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getRemoteVcsRepository:getRemoteVcsRepository", TypeShape.of(GetRemoteVcsRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves a remote VCS repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetRemoteVcsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var remote-vcs = ArtifactoryFunctions.getRemoteVcsRepository(GetRemoteVcsRepositoryArgs.builder()
     *             .key(&#34;remote-vcs&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRemoteVcsRepositoryResult> getRemoteVcsRepositoryPlain(GetRemoteVcsRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getRemoteVcsRepository:getRemoteVcsRepository", TypeShape.of(GetRemoteVcsRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## # Artifactory User Data Source
     * 
     * Provides an Artifactory user data source. This can be used to read the configuration of users in artifactory.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var user1 = ArtifactoryFunctions.getUser(GetUserArgs.builder()
     *             .name(&#34;user1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetUserResult> getUser(GetUserArgs args) {
        return getUser(args, InvokeOptions.Empty);
    }
    /**
     * ## # Artifactory User Data Source
     * 
     * Provides an Artifactory user data source. This can be used to read the configuration of users in artifactory.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var user1 = ArtifactoryFunctions.getUser(GetUserArgs.builder()
     *             .name(&#34;user1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetUserResult> getUserPlain(GetUserPlainArgs args) {
        return getUserPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## # Artifactory User Data Source
     * 
     * Provides an Artifactory user data source. This can be used to read the configuration of users in artifactory.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var user1 = ArtifactoryFunctions.getUser(GetUserArgs.builder()
     *             .name(&#34;user1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetUserResult> getUser(GetUserArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("artifactory:index/getUser:getUser", TypeShape.of(GetUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## # Artifactory User Data Source
     * 
     * Provides an Artifactory user data source. This can be used to read the configuration of users in artifactory.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.artifactory.ArtifactoryFunctions;
     * import com.pulumi.artifactory.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var user1 = ArtifactoryFunctions.getUser(GetUserArgs.builder()
     *             .name(&#34;user1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetUserResult> getUserPlain(GetUserPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("artifactory:index/getUser:getUser", TypeShape.of(GetUserResult.class), args, Utilities.withVersion(options));
    }
}
