// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory.outputs;

import com.pulumi.artifactory.outputs.ReleaseBundleV2CleanupPolicySearchCriteriaReleaseBundle;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ReleaseBundleV2CleanupPolicySearchCriteria {
    /**
     * @return The cleanup policy will cleanup release bundles based on how long ago they were created. For example, if this parameter is 2 then release bundles created more than 2 months ago will be cleaned up as part of the policy.
     * 
     */
    private @Nullable Integer createdBeforeInMonths;
    /**
     * @return A list of environments to exclude from the cleanup process. To exclude all, set to `**`. Example: `exclude_promoted_environments = [&#34;**&#34;]`
     * 
     */
    private List<String> excludePromotedEnvironments;
    /**
     * @return Set this value to `true` if you want the policy to run on all Artifactory projects. The default value is `false`.
     * 
     */
    private @Nullable Boolean includeAllProjects;
    /**
     * @return List of projects on which you want this policy to run. To include repositories that are not assigned to any project, enter the project key `default`.
     * 
     * ~&gt;This setting is relevant only on the global level, for Platform Admins.
     * 
     */
    private @Nullable List<String> includedProjects;
    /**
     * @return Specify the release bundles to include in the cleanup policy. The policy will only clean up the release bundles that match the specified criteria.
     * 
     */
    private @Nullable List<ReleaseBundleV2CleanupPolicySearchCriteriaReleaseBundle> releaseBundles;

    private ReleaseBundleV2CleanupPolicySearchCriteria() {}
    /**
     * @return The cleanup policy will cleanup release bundles based on how long ago they were created. For example, if this parameter is 2 then release bundles created more than 2 months ago will be cleaned up as part of the policy.
     * 
     */
    public Optional<Integer> createdBeforeInMonths() {
        return Optional.ofNullable(this.createdBeforeInMonths);
    }
    /**
     * @return A list of environments to exclude from the cleanup process. To exclude all, set to `**`. Example: `exclude_promoted_environments = [&#34;**&#34;]`
     * 
     */
    public List<String> excludePromotedEnvironments() {
        return this.excludePromotedEnvironments;
    }
    /**
     * @return Set this value to `true` if you want the policy to run on all Artifactory projects. The default value is `false`.
     * 
     */
    public Optional<Boolean> includeAllProjects() {
        return Optional.ofNullable(this.includeAllProjects);
    }
    /**
     * @return List of projects on which you want this policy to run. To include repositories that are not assigned to any project, enter the project key `default`.
     * 
     * ~&gt;This setting is relevant only on the global level, for Platform Admins.
     * 
     */
    public List<String> includedProjects() {
        return this.includedProjects == null ? List.of() : this.includedProjects;
    }
    /**
     * @return Specify the release bundles to include in the cleanup policy. The policy will only clean up the release bundles that match the specified criteria.
     * 
     */
    public List<ReleaseBundleV2CleanupPolicySearchCriteriaReleaseBundle> releaseBundles() {
        return this.releaseBundles == null ? List.of() : this.releaseBundles;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReleaseBundleV2CleanupPolicySearchCriteria defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer createdBeforeInMonths;
        private List<String> excludePromotedEnvironments;
        private @Nullable Boolean includeAllProjects;
        private @Nullable List<String> includedProjects;
        private @Nullable List<ReleaseBundleV2CleanupPolicySearchCriteriaReleaseBundle> releaseBundles;
        public Builder() {}
        public Builder(ReleaseBundleV2CleanupPolicySearchCriteria defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdBeforeInMonths = defaults.createdBeforeInMonths;
    	      this.excludePromotedEnvironments = defaults.excludePromotedEnvironments;
    	      this.includeAllProjects = defaults.includeAllProjects;
    	      this.includedProjects = defaults.includedProjects;
    	      this.releaseBundles = defaults.releaseBundles;
        }

        @CustomType.Setter
        public Builder createdBeforeInMonths(@Nullable Integer createdBeforeInMonths) {

            this.createdBeforeInMonths = createdBeforeInMonths;
            return this;
        }
        @CustomType.Setter
        public Builder excludePromotedEnvironments(List<String> excludePromotedEnvironments) {
            if (excludePromotedEnvironments == null) {
              throw new MissingRequiredPropertyException("ReleaseBundleV2CleanupPolicySearchCriteria", "excludePromotedEnvironments");
            }
            this.excludePromotedEnvironments = excludePromotedEnvironments;
            return this;
        }
        public Builder excludePromotedEnvironments(String... excludePromotedEnvironments) {
            return excludePromotedEnvironments(List.of(excludePromotedEnvironments));
        }
        @CustomType.Setter
        public Builder includeAllProjects(@Nullable Boolean includeAllProjects) {

            this.includeAllProjects = includeAllProjects;
            return this;
        }
        @CustomType.Setter
        public Builder includedProjects(@Nullable List<String> includedProjects) {

            this.includedProjects = includedProjects;
            return this;
        }
        public Builder includedProjects(String... includedProjects) {
            return includedProjects(List.of(includedProjects));
        }
        @CustomType.Setter
        public Builder releaseBundles(@Nullable List<ReleaseBundleV2CleanupPolicySearchCriteriaReleaseBundle> releaseBundles) {

            this.releaseBundles = releaseBundles;
            return this;
        }
        public Builder releaseBundles(ReleaseBundleV2CleanupPolicySearchCriteriaReleaseBundle... releaseBundles) {
            return releaseBundles(List.of(releaseBundles));
        }
        public ReleaseBundleV2CleanupPolicySearchCriteria build() {
            final var _resultValue = new ReleaseBundleV2CleanupPolicySearchCriteria();
            _resultValue.createdBeforeInMonths = createdBeforeInMonths;
            _resultValue.excludePromotedEnvironments = excludePromotedEnvironments;
            _resultValue.includeAllProjects = includeAllProjects;
            _resultValue.includedProjects = includedProjects;
            _resultValue.releaseBundles = releaseBundles;
            return _resultValue;
        }
    }
}
