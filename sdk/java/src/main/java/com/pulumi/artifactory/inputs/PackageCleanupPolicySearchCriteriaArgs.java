// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PackageCleanupPolicySearchCriteriaArgs extends com.pulumi.resources.ResourceArgs {

    public static final PackageCleanupPolicySearchCriteriaArgs Empty = new PackageCleanupPolicySearchCriteriaArgs();

    /**
     * Remove packages based on when they were created. For example, remove packages that were created more than a year ago. The default value is to remove packages created more than 2 years ago.
     * 
     */
    @Import(name="createdBeforeInMonths")
    private @Nullable Output<Integer> createdBeforeInMonths;

    /**
     * @return Remove packages based on when they were created. For example, remove packages that were created more than a year ago. The default value is to remove packages created more than 2 years ago.
     * 
     */
    public Optional<Output<Integer>> createdBeforeInMonths() {
        return Optional.ofNullable(this.createdBeforeInMonths);
    }

    /**
     * Specify explicit package names that you want excluded from the policy. Only Name explicit names (and not patterns) are accepted.
     * 
     */
    @Import(name="excludedPackages")
    private @Nullable Output<List<String>> excludedPackages;

    /**
     * @return Specify explicit package names that you want excluded from the policy. Only Name explicit names (and not patterns) are accepted.
     * 
     */
    public Optional<Output<List<String>>> excludedPackages() {
        return Optional.ofNullable(this.excludedPackages);
    }

    /**
     * Specify patterns for repository names or explicit repository names that you want excluded from the cleanup policy.
     * 
     */
    @Import(name="excludedRepos")
    private @Nullable Output<List<String>> excludedRepos;

    /**
     * @return Specify patterns for repository names or explicit repository names that you want excluded from the cleanup policy.
     * 
     */
    public Optional<Output<List<String>>> excludedRepos() {
        return Optional.ofNullable(this.excludedRepos);
    }

    /**
     * Set this to `true` if you want the policy to run on all projects on the platform.
     * 
     */
    @Import(name="includeAllProjects")
    private @Nullable Output<Boolean> includeAllProjects;

    /**
     * @return Set this to `true` if you want the policy to run on all projects on the platform.
     * 
     */
    public Optional<Output<Boolean>> includeAllProjects() {
        return Optional.ofNullable(this.includeAllProjects);
    }

    /**
     * Specify a pattern for a package name or an explicit package name. It accept only single element which can be specific package or pattern, and for including all packages use `**`. Example: `included_packages = [&#34;**&#34;]`
     * 
     */
    @Import(name="includedPackages", required=true)
    private Output<List<String>> includedPackages;

    /**
     * @return Specify a pattern for a package name or an explicit package name. It accept only single element which can be specific package or pattern, and for including all packages use `**`. Example: `included_packages = [&#34;**&#34;]`
     * 
     */
    public Output<List<String>> includedPackages() {
        return this.includedPackages;
    }

    /**
     * List of projects on which you want this policy to run. To include repositories that are not assigned to any project, enter the project key `default`.
     * 
     */
    @Import(name="includedProjects")
    private @Nullable Output<List<String>> includedProjects;

    /**
     * @return List of projects on which you want this policy to run. To include repositories that are not assigned to any project, enter the project key `default`.
     * 
     */
    public Optional<Output<List<String>>> includedProjects() {
        return Optional.ofNullable(this.includedProjects);
    }

    /**
     * Select the number of latest versions to keep. The cleanup policy will remove all versions prior to the number you select here. The latest version is always excluded. Versions are determined by creation date.
     * 
     * ~&gt;Not all package types support this condition. For information on which package types support this condition, [learn more](https://jfrog.com/help/r/jfrog-platform-administration-documentation/retention-policies/package-types-coverage).
     * 
     */
    @Import(name="keepLastNVersions")
    private @Nullable Output<Integer> keepLastNVersions;

    /**
     * @return Select the number of latest versions to keep. The cleanup policy will remove all versions prior to the number you select here. The latest version is always excluded. Versions are determined by creation date.
     * 
     * ~&gt;Not all package types support this condition. For information on which package types support this condition, [learn more](https://jfrog.com/help/r/jfrog-platform-administration-documentation/retention-policies/package-types-coverage).
     * 
     */
    public Optional<Output<Integer>> keepLastNVersions() {
        return Optional.ofNullable(this.keepLastNVersions);
    }

    /**
     * Removes packages based on when they were last downloaded. For example, removes packages that were not downloaded in the past year. The default value is to remove packages that were downloaded more than 2 years ago.
     * 
     * ~&gt;If a package was never downloaded, the policy will remove it based only on the age-condition (`created_before_in_months`).
     * 
     * ~&gt;JFrog recommends using the `last_downloaded_before_in_months` condition to ensure that packages currently in use are not deleted.
     * 
     */
    @Import(name="lastDownloadedBeforeInMonths")
    private @Nullable Output<Integer> lastDownloadedBeforeInMonths;

    /**
     * @return Removes packages based on when they were last downloaded. For example, removes packages that were not downloaded in the past year. The default value is to remove packages that were downloaded more than 2 years ago.
     * 
     * ~&gt;If a package was never downloaded, the policy will remove it based only on the age-condition (`created_before_in_months`).
     * 
     * ~&gt;JFrog recommends using the `last_downloaded_before_in_months` condition to ensure that packages currently in use are not deleted.
     * 
     */
    public Optional<Output<Integer>> lastDownloadedBeforeInMonths() {
        return Optional.ofNullable(this.lastDownloadedBeforeInMonths);
    }

    /**
     * Types of packages to be removed. Support: conan, docker, generic, gradle, maven, npm, nuget, rpm.
     * 
     */
    @Import(name="packageTypes", required=true)
    private Output<List<String>> packageTypes;

    /**
     * @return Types of packages to be removed. Support: conan, docker, generic, gradle, maven, npm, nuget, rpm.
     * 
     */
    public Output<List<String>> packageTypes() {
        return this.packageTypes;
    }

    /**
     * Specify patterns for repository names or explicit repository names. For including all repos use `**`. Example: `repos = [&#34;**&#34;]`
     * 
     */
    @Import(name="repos", required=true)
    private Output<List<String>> repos;

    /**
     * @return Specify patterns for repository names or explicit repository names. For including all repos use `**`. Example: `repos = [&#34;**&#34;]`
     * 
     */
    public Output<List<String>> repos() {
        return this.repos;
    }

    private PackageCleanupPolicySearchCriteriaArgs() {}

    private PackageCleanupPolicySearchCriteriaArgs(PackageCleanupPolicySearchCriteriaArgs $) {
        this.createdBeforeInMonths = $.createdBeforeInMonths;
        this.excludedPackages = $.excludedPackages;
        this.excludedRepos = $.excludedRepos;
        this.includeAllProjects = $.includeAllProjects;
        this.includedPackages = $.includedPackages;
        this.includedProjects = $.includedProjects;
        this.keepLastNVersions = $.keepLastNVersions;
        this.lastDownloadedBeforeInMonths = $.lastDownloadedBeforeInMonths;
        this.packageTypes = $.packageTypes;
        this.repos = $.repos;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PackageCleanupPolicySearchCriteriaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PackageCleanupPolicySearchCriteriaArgs $;

        public Builder() {
            $ = new PackageCleanupPolicySearchCriteriaArgs();
        }

        public Builder(PackageCleanupPolicySearchCriteriaArgs defaults) {
            $ = new PackageCleanupPolicySearchCriteriaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdBeforeInMonths Remove packages based on when they were created. For example, remove packages that were created more than a year ago. The default value is to remove packages created more than 2 years ago.
         * 
         * @return builder
         * 
         */
        public Builder createdBeforeInMonths(@Nullable Output<Integer> createdBeforeInMonths) {
            $.createdBeforeInMonths = createdBeforeInMonths;
            return this;
        }

        /**
         * @param createdBeforeInMonths Remove packages based on when they were created. For example, remove packages that were created more than a year ago. The default value is to remove packages created more than 2 years ago.
         * 
         * @return builder
         * 
         */
        public Builder createdBeforeInMonths(Integer createdBeforeInMonths) {
            return createdBeforeInMonths(Output.of(createdBeforeInMonths));
        }

        /**
         * @param excludedPackages Specify explicit package names that you want excluded from the policy. Only Name explicit names (and not patterns) are accepted.
         * 
         * @return builder
         * 
         */
        public Builder excludedPackages(@Nullable Output<List<String>> excludedPackages) {
            $.excludedPackages = excludedPackages;
            return this;
        }

        /**
         * @param excludedPackages Specify explicit package names that you want excluded from the policy. Only Name explicit names (and not patterns) are accepted.
         * 
         * @return builder
         * 
         */
        public Builder excludedPackages(List<String> excludedPackages) {
            return excludedPackages(Output.of(excludedPackages));
        }

        /**
         * @param excludedPackages Specify explicit package names that you want excluded from the policy. Only Name explicit names (and not patterns) are accepted.
         * 
         * @return builder
         * 
         */
        public Builder excludedPackages(String... excludedPackages) {
            return excludedPackages(List.of(excludedPackages));
        }

        /**
         * @param excludedRepos Specify patterns for repository names or explicit repository names that you want excluded from the cleanup policy.
         * 
         * @return builder
         * 
         */
        public Builder excludedRepos(@Nullable Output<List<String>> excludedRepos) {
            $.excludedRepos = excludedRepos;
            return this;
        }

        /**
         * @param excludedRepos Specify patterns for repository names or explicit repository names that you want excluded from the cleanup policy.
         * 
         * @return builder
         * 
         */
        public Builder excludedRepos(List<String> excludedRepos) {
            return excludedRepos(Output.of(excludedRepos));
        }

        /**
         * @param excludedRepos Specify patterns for repository names or explicit repository names that you want excluded from the cleanup policy.
         * 
         * @return builder
         * 
         */
        public Builder excludedRepos(String... excludedRepos) {
            return excludedRepos(List.of(excludedRepos));
        }

        /**
         * @param includeAllProjects Set this to `true` if you want the policy to run on all projects on the platform.
         * 
         * @return builder
         * 
         */
        public Builder includeAllProjects(@Nullable Output<Boolean> includeAllProjects) {
            $.includeAllProjects = includeAllProjects;
            return this;
        }

        /**
         * @param includeAllProjects Set this to `true` if you want the policy to run on all projects on the platform.
         * 
         * @return builder
         * 
         */
        public Builder includeAllProjects(Boolean includeAllProjects) {
            return includeAllProjects(Output.of(includeAllProjects));
        }

        /**
         * @param includedPackages Specify a pattern for a package name or an explicit package name. It accept only single element which can be specific package or pattern, and for including all packages use `**`. Example: `included_packages = [&#34;**&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder includedPackages(Output<List<String>> includedPackages) {
            $.includedPackages = includedPackages;
            return this;
        }

        /**
         * @param includedPackages Specify a pattern for a package name or an explicit package name. It accept only single element which can be specific package or pattern, and for including all packages use `**`. Example: `included_packages = [&#34;**&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder includedPackages(List<String> includedPackages) {
            return includedPackages(Output.of(includedPackages));
        }

        /**
         * @param includedPackages Specify a pattern for a package name or an explicit package name. It accept only single element which can be specific package or pattern, and for including all packages use `**`. Example: `included_packages = [&#34;**&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder includedPackages(String... includedPackages) {
            return includedPackages(List.of(includedPackages));
        }

        /**
         * @param includedProjects List of projects on which you want this policy to run. To include repositories that are not assigned to any project, enter the project key `default`.
         * 
         * @return builder
         * 
         */
        public Builder includedProjects(@Nullable Output<List<String>> includedProjects) {
            $.includedProjects = includedProjects;
            return this;
        }

        /**
         * @param includedProjects List of projects on which you want this policy to run. To include repositories that are not assigned to any project, enter the project key `default`.
         * 
         * @return builder
         * 
         */
        public Builder includedProjects(List<String> includedProjects) {
            return includedProjects(Output.of(includedProjects));
        }

        /**
         * @param includedProjects List of projects on which you want this policy to run. To include repositories that are not assigned to any project, enter the project key `default`.
         * 
         * @return builder
         * 
         */
        public Builder includedProjects(String... includedProjects) {
            return includedProjects(List.of(includedProjects));
        }

        /**
         * @param keepLastNVersions Select the number of latest versions to keep. The cleanup policy will remove all versions prior to the number you select here. The latest version is always excluded. Versions are determined by creation date.
         * 
         * ~&gt;Not all package types support this condition. For information on which package types support this condition, [learn more](https://jfrog.com/help/r/jfrog-platform-administration-documentation/retention-policies/package-types-coverage).
         * 
         * @return builder
         * 
         */
        public Builder keepLastNVersions(@Nullable Output<Integer> keepLastNVersions) {
            $.keepLastNVersions = keepLastNVersions;
            return this;
        }

        /**
         * @param keepLastNVersions Select the number of latest versions to keep. The cleanup policy will remove all versions prior to the number you select here. The latest version is always excluded. Versions are determined by creation date.
         * 
         * ~&gt;Not all package types support this condition. For information on which package types support this condition, [learn more](https://jfrog.com/help/r/jfrog-platform-administration-documentation/retention-policies/package-types-coverage).
         * 
         * @return builder
         * 
         */
        public Builder keepLastNVersions(Integer keepLastNVersions) {
            return keepLastNVersions(Output.of(keepLastNVersions));
        }

        /**
         * @param lastDownloadedBeforeInMonths Removes packages based on when they were last downloaded. For example, removes packages that were not downloaded in the past year. The default value is to remove packages that were downloaded more than 2 years ago.
         * 
         * ~&gt;If a package was never downloaded, the policy will remove it based only on the age-condition (`created_before_in_months`).
         * 
         * ~&gt;JFrog recommends using the `last_downloaded_before_in_months` condition to ensure that packages currently in use are not deleted.
         * 
         * @return builder
         * 
         */
        public Builder lastDownloadedBeforeInMonths(@Nullable Output<Integer> lastDownloadedBeforeInMonths) {
            $.lastDownloadedBeforeInMonths = lastDownloadedBeforeInMonths;
            return this;
        }

        /**
         * @param lastDownloadedBeforeInMonths Removes packages based on when they were last downloaded. For example, removes packages that were not downloaded in the past year. The default value is to remove packages that were downloaded more than 2 years ago.
         * 
         * ~&gt;If a package was never downloaded, the policy will remove it based only on the age-condition (`created_before_in_months`).
         * 
         * ~&gt;JFrog recommends using the `last_downloaded_before_in_months` condition to ensure that packages currently in use are not deleted.
         * 
         * @return builder
         * 
         */
        public Builder lastDownloadedBeforeInMonths(Integer lastDownloadedBeforeInMonths) {
            return lastDownloadedBeforeInMonths(Output.of(lastDownloadedBeforeInMonths));
        }

        /**
         * @param packageTypes Types of packages to be removed. Support: conan, docker, generic, gradle, maven, npm, nuget, rpm.
         * 
         * @return builder
         * 
         */
        public Builder packageTypes(Output<List<String>> packageTypes) {
            $.packageTypes = packageTypes;
            return this;
        }

        /**
         * @param packageTypes Types of packages to be removed. Support: conan, docker, generic, gradle, maven, npm, nuget, rpm.
         * 
         * @return builder
         * 
         */
        public Builder packageTypes(List<String> packageTypes) {
            return packageTypes(Output.of(packageTypes));
        }

        /**
         * @param packageTypes Types of packages to be removed. Support: conan, docker, generic, gradle, maven, npm, nuget, rpm.
         * 
         * @return builder
         * 
         */
        public Builder packageTypes(String... packageTypes) {
            return packageTypes(List.of(packageTypes));
        }

        /**
         * @param repos Specify patterns for repository names or explicit repository names. For including all repos use `**`. Example: `repos = [&#34;**&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder repos(Output<List<String>> repos) {
            $.repos = repos;
            return this;
        }

        /**
         * @param repos Specify patterns for repository names or explicit repository names. For including all repos use `**`. Example: `repos = [&#34;**&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder repos(List<String> repos) {
            return repos(Output.of(repos));
        }

        /**
         * @param repos Specify patterns for repository names or explicit repository names. For including all repos use `**`. Example: `repos = [&#34;**&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder repos(String... repos) {
            return repos(List.of(repos));
        }

        public PackageCleanupPolicySearchCriteriaArgs build() {
            if ($.includedPackages == null) {
                throw new MissingRequiredPropertyException("PackageCleanupPolicySearchCriteriaArgs", "includedPackages");
            }
            if ($.packageTypes == null) {
                throw new MissingRequiredPropertyException("PackageCleanupPolicySearchCriteriaArgs", "packageTypes");
            }
            if ($.repos == null) {
                throw new MissingRequiredPropertyException("PackageCleanupPolicySearchCriteriaArgs", "repos");
            }
            return $;
        }
    }

}
