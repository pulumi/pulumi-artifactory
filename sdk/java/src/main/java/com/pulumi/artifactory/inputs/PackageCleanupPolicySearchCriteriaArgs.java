// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PackageCleanupPolicySearchCriteriaArgs extends com.pulumi.resources.ResourceArgs {

    public static final PackageCleanupPolicySearchCriteriaArgs Empty = new PackageCleanupPolicySearchCriteriaArgs();

    /**
     * The cleanup policy will delete packages based on how long ago they were created. For example, if this parameter is 5 then packages created more than 5 days ago will be deleted as part of the policy.
     * 
     * ~&gt;JFrog recommends using the `created_before_in_days` condition to ensure that packages currently in use are not deleted.
     * 
     */
    @Import(name="createdBeforeInDays")
    private @Nullable Output<Integer> createdBeforeInDays;

    /**
     * @return The cleanup policy will delete packages based on how long ago they were created. For example, if this parameter is 5 then packages created more than 5 days ago will be deleted as part of the policy.
     * 
     * ~&gt;JFrog recommends using the `created_before_in_days` condition to ensure that packages currently in use are not deleted.
     * 
     */
    public Optional<Output<Integer>> createdBeforeInDays() {
        return Optional.ofNullable(this.createdBeforeInDays);
    }

    /**
     * The cleanup policy will delete packages based on how long ago they were created. For example, if this parameter is 2 then packages created more than 2 months ago will be deleted as part of the policy.
     * 
     * ~&gt;JFrog recommends using the `created_before_in_months` condition to ensure that packages currently in use are not deleted.
     * 
     * @deprecated
     * Use `created_before_in_days` instead of `created_before_in_months`. Renamed to `created_before_in_days` starting in version 7.111.2.
     * 
     */
    @Deprecated /* Use `created_before_in_days` instead of `created_before_in_months`. Renamed to `created_before_in_days` starting in version 7.111.2. */
    @Import(name="createdBeforeInMonths")
    private @Nullable Output<Integer> createdBeforeInMonths;

    /**
     * @return The cleanup policy will delete packages based on how long ago they were created. For example, if this parameter is 2 then packages created more than 2 months ago will be deleted as part of the policy.
     * 
     * ~&gt;JFrog recommends using the `created_before_in_months` condition to ensure that packages currently in use are not deleted.
     * 
     * @deprecated
     * Use `created_before_in_days` instead of `created_before_in_months`. Renamed to `created_before_in_days` starting in version 7.111.2.
     * 
     */
    @Deprecated /* Use `created_before_in_days` instead of `created_before_in_months`. Renamed to `created_before_in_days` starting in version 7.111.2. */
    public Optional<Output<Integer>> createdBeforeInMonths() {
        return Optional.ofNullable(this.createdBeforeInMonths);
    }

    /**
     * Specify explicit package names that you want excluded from the policy. Only explicit names (and not patterns) are accepted.
     * 
     */
    @Import(name="excludedPackages")
    private @Nullable Output<List<String>> excludedPackages;

    /**
     * @return Specify explicit package names that you want excluded from the policy. Only explicit names (and not patterns) are accepted.
     * 
     */
    public Optional<Output<List<String>>> excludedPackages() {
        return Optional.ofNullable(this.excludedPackages);
    }

    /**
     * A key-value pair applied to the lead artifact of a package. Packages with this property will be excluded from deletion.
     * 
     */
    @Import(name="excludedProperties")
    private @Nullable Output<Map<String,List<String>>> excludedProperties;

    /**
     * @return A key-value pair applied to the lead artifact of a package. Packages with this property will be excluded from deletion.
     * 
     */
    public Optional<Output<Map<String,List<String>>>> excludedProperties() {
        return Optional.ofNullable(this.excludedProperties);
    }

    /**
     * Specify patterns for repository names or explicit repository names that you want excluded from the cleanup policy.
     * 
     */
    @Import(name="excludedRepos")
    private @Nullable Output<List<String>> excludedRepos;

    /**
     * @return Specify patterns for repository names or explicit repository names that you want excluded from the cleanup policy.
     * 
     */
    public Optional<Output<List<String>>> excludedRepos() {
        return Optional.ofNullable(this.excludedRepos);
    }

    /**
     * Set this value to `true` if you want the policy to run on all Artifactory projects. The default value is `false`.
     * 
     *  ~&gt;This parameter is relevant only on the global level, for Platform Admins.
     * 
     */
    @Import(name="includeAllProjects")
    private @Nullable Output<Boolean> includeAllProjects;

    /**
     * @return Set this value to `true` if you want the policy to run on all Artifactory projects. The default value is `false`.
     * 
     *  ~&gt;This parameter is relevant only on the global level, for Platform Admins.
     * 
     */
    public Optional<Output<Boolean>> includeAllProjects() {
        return Optional.ofNullable(this.includeAllProjects);
    }

    /**
     * Specify a pattern for a package name or an explicit package name on which you want the cleanup policy to run. Only one pattern or explicit name can be entered. To include all packages, use `**`. Example: `included_packages = [&#34;**&#34;]`
     * 
     */
    @Import(name="includedPackages", required=true)
    private Output<List<String>> includedPackages;

    /**
     * @return Specify a pattern for a package name or an explicit package name on which you want the cleanup policy to run. Only one pattern or explicit name can be entered. To include all packages, use `**`. Example: `included_packages = [&#34;**&#34;]`
     * 
     */
    public Output<List<String>> includedPackages() {
        return this.includedPackages;
    }

    /**
     * Enter the project keys for the projects on which you want the policy to run. To include repositories that are not assigned to any project, enter the project key `default`. Can be empty when `include_all_projects` is set to `true`.
     * 
     */
    @Import(name="includedProjects", required=true)
    private Output<List<String>> includedProjects;

    /**
     * @return Enter the project keys for the projects on which you want the policy to run. To include repositories that are not assigned to any project, enter the project key `default`. Can be empty when `include_all_projects` is set to `true`.
     * 
     */
    public Output<List<String>> includedProjects() {
        return this.includedProjects;
    }

    /**
     * A key-value pair applied to the lead artifact of a package. Packages with this property will be deleted.
     * 
     */
    @Import(name="includedProperties")
    private @Nullable Output<Map<String,List<String>>> includedProperties;

    /**
     * @return A key-value pair applied to the lead artifact of a package. Packages with this property will be deleted.
     * 
     */
    public Optional<Output<Map<String,List<String>>>> includedProperties() {
        return Optional.ofNullable(this.includedProperties);
    }

    /**
     * Set a value for the number of latest versions to keep. The cleanup policy will remove all versions prior to the number you select here. The latest version is always excluded.
     * 
     * ~&gt;Not all package types support this condition. For information on which package types support this condition, [learn more](https://jfrog.com/help/r/jfrog-platform-administration-documentation/retention-policies/package-types-coverage).
     * 
     */
    @Import(name="keepLastNVersions")
    private @Nullable Output<Integer> keepLastNVersions;

    /**
     * @return Set a value for the number of latest versions to keep. The cleanup policy will remove all versions prior to the number you select here. The latest version is always excluded.
     * 
     * ~&gt;Not all package types support this condition. For information on which package types support this condition, [learn more](https://jfrog.com/help/r/jfrog-platform-administration-documentation/retention-policies/package-types-coverage).
     * 
     */
    public Optional<Output<Integer>> keepLastNVersions() {
        return Optional.ofNullable(this.keepLastNVersions);
    }

    /**
     * The cleanup policy will delete packages based on how long ago they were downloaded. For example, if this parameter is 5 then packages downloaded more than 5 days ago will be deleted as part of the policy.
     * 
     * ~&gt;JFrog recommends using the `last_downloaded_before_in_days` condition to ensure that packages currently in use are not deleted.
     * 
     */
    @Import(name="lastDownloadedBeforeInDays")
    private @Nullable Output<Integer> lastDownloadedBeforeInDays;

    /**
     * @return The cleanup policy will delete packages based on how long ago they were downloaded. For example, if this parameter is 5 then packages downloaded more than 5 days ago will be deleted as part of the policy.
     * 
     * ~&gt;JFrog recommends using the `last_downloaded_before_in_days` condition to ensure that packages currently in use are not deleted.
     * 
     */
    public Optional<Output<Integer>> lastDownloadedBeforeInDays() {
        return Optional.ofNullable(this.lastDownloadedBeforeInDays);
    }

    /**
     * The cleanup policy will delete packages based on how long ago they were downloaded. For example, if this parameter is 5 then packages downloaded more than 5 months ago will be deleted as part of the policy.
     * 
     * ~&gt;JFrog recommends using the `last_downloaded_before_in_months` condition to ensure that packages currently in use are not deleted.
     * 
     * @deprecated
     * Use `last_downloaded_before_in_days` instead of `last_downloaded_before_in_months`. Renamed to `last_downloaded_before_in_days` starting in version 7.111.2.
     * 
     */
    @Deprecated /* Use `last_downloaded_before_in_days` instead of `last_downloaded_before_in_months`. Renamed to `last_downloaded_before_in_days` starting in version 7.111.2. */
    @Import(name="lastDownloadedBeforeInMonths")
    private @Nullable Output<Integer> lastDownloadedBeforeInMonths;

    /**
     * @return The cleanup policy will delete packages based on how long ago they were downloaded. For example, if this parameter is 5 then packages downloaded more than 5 months ago will be deleted as part of the policy.
     * 
     * ~&gt;JFrog recommends using the `last_downloaded_before_in_months` condition to ensure that packages currently in use are not deleted.
     * 
     * @deprecated
     * Use `last_downloaded_before_in_days` instead of `last_downloaded_before_in_months`. Renamed to `last_downloaded_before_in_days` starting in version 7.111.2.
     * 
     */
    @Deprecated /* Use `last_downloaded_before_in_days` instead of `last_downloaded_before_in_months`. Renamed to `last_downloaded_before_in_days` starting in version 7.111.2. */
    public Optional<Output<Integer>> lastDownloadedBeforeInMonths() {
        return Optional.ofNullable(this.lastDownloadedBeforeInMonths);
    }

    @Import(name="packageTypes", required=true)
    private Output<List<String>> packageTypes;

    public Output<List<String>> packageTypes() {
        return this.packageTypes;
    }

    /**
     * Specify one or more patterns for the repository name(s) on which you want the cleanup policy to run. You can also specify explicit repository names. Specifying at least one pattern or explicit name is mandatory. Only packages in repositories that match the pattern or explicit name will be deleted. For including all repos use `**`. Example: `repos = [&#34;**&#34;]`
     * 
     */
    @Import(name="repos", required=true)
    private Output<List<String>> repos;

    /**
     * @return Specify one or more patterns for the repository name(s) on which you want the cleanup policy to run. You can also specify explicit repository names. Specifying at least one pattern or explicit name is mandatory. Only packages in repositories that match the pattern or explicit name will be deleted. For including all repos use `**`. Example: `repos = [&#34;**&#34;]`
     * 
     */
    public Output<List<String>> repos() {
        return this.repos;
    }

    private PackageCleanupPolicySearchCriteriaArgs() {}

    private PackageCleanupPolicySearchCriteriaArgs(PackageCleanupPolicySearchCriteriaArgs $) {
        this.createdBeforeInDays = $.createdBeforeInDays;
        this.createdBeforeInMonths = $.createdBeforeInMonths;
        this.excludedPackages = $.excludedPackages;
        this.excludedProperties = $.excludedProperties;
        this.excludedRepos = $.excludedRepos;
        this.includeAllProjects = $.includeAllProjects;
        this.includedPackages = $.includedPackages;
        this.includedProjects = $.includedProjects;
        this.includedProperties = $.includedProperties;
        this.keepLastNVersions = $.keepLastNVersions;
        this.lastDownloadedBeforeInDays = $.lastDownloadedBeforeInDays;
        this.lastDownloadedBeforeInMonths = $.lastDownloadedBeforeInMonths;
        this.packageTypes = $.packageTypes;
        this.repos = $.repos;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PackageCleanupPolicySearchCriteriaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PackageCleanupPolicySearchCriteriaArgs $;

        public Builder() {
            $ = new PackageCleanupPolicySearchCriteriaArgs();
        }

        public Builder(PackageCleanupPolicySearchCriteriaArgs defaults) {
            $ = new PackageCleanupPolicySearchCriteriaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdBeforeInDays The cleanup policy will delete packages based on how long ago they were created. For example, if this parameter is 5 then packages created more than 5 days ago will be deleted as part of the policy.
         * 
         * ~&gt;JFrog recommends using the `created_before_in_days` condition to ensure that packages currently in use are not deleted.
         * 
         * @return builder
         * 
         */
        public Builder createdBeforeInDays(@Nullable Output<Integer> createdBeforeInDays) {
            $.createdBeforeInDays = createdBeforeInDays;
            return this;
        }

        /**
         * @param createdBeforeInDays The cleanup policy will delete packages based on how long ago they were created. For example, if this parameter is 5 then packages created more than 5 days ago will be deleted as part of the policy.
         * 
         * ~&gt;JFrog recommends using the `created_before_in_days` condition to ensure that packages currently in use are not deleted.
         * 
         * @return builder
         * 
         */
        public Builder createdBeforeInDays(Integer createdBeforeInDays) {
            return createdBeforeInDays(Output.of(createdBeforeInDays));
        }

        /**
         * @param createdBeforeInMonths The cleanup policy will delete packages based on how long ago they were created. For example, if this parameter is 2 then packages created more than 2 months ago will be deleted as part of the policy.
         * 
         * ~&gt;JFrog recommends using the `created_before_in_months` condition to ensure that packages currently in use are not deleted.
         * 
         * @return builder
         * 
         * @deprecated
         * Use `created_before_in_days` instead of `created_before_in_months`. Renamed to `created_before_in_days` starting in version 7.111.2.
         * 
         */
        @Deprecated /* Use `created_before_in_days` instead of `created_before_in_months`. Renamed to `created_before_in_days` starting in version 7.111.2. */
        public Builder createdBeforeInMonths(@Nullable Output<Integer> createdBeforeInMonths) {
            $.createdBeforeInMonths = createdBeforeInMonths;
            return this;
        }

        /**
         * @param createdBeforeInMonths The cleanup policy will delete packages based on how long ago they were created. For example, if this parameter is 2 then packages created more than 2 months ago will be deleted as part of the policy.
         * 
         * ~&gt;JFrog recommends using the `created_before_in_months` condition to ensure that packages currently in use are not deleted.
         * 
         * @return builder
         * 
         * @deprecated
         * Use `created_before_in_days` instead of `created_before_in_months`. Renamed to `created_before_in_days` starting in version 7.111.2.
         * 
         */
        @Deprecated /* Use `created_before_in_days` instead of `created_before_in_months`. Renamed to `created_before_in_days` starting in version 7.111.2. */
        public Builder createdBeforeInMonths(Integer createdBeforeInMonths) {
            return createdBeforeInMonths(Output.of(createdBeforeInMonths));
        }

        /**
         * @param excludedPackages Specify explicit package names that you want excluded from the policy. Only explicit names (and not patterns) are accepted.
         * 
         * @return builder
         * 
         */
        public Builder excludedPackages(@Nullable Output<List<String>> excludedPackages) {
            $.excludedPackages = excludedPackages;
            return this;
        }

        /**
         * @param excludedPackages Specify explicit package names that you want excluded from the policy. Only explicit names (and not patterns) are accepted.
         * 
         * @return builder
         * 
         */
        public Builder excludedPackages(List<String> excludedPackages) {
            return excludedPackages(Output.of(excludedPackages));
        }

        /**
         * @param excludedPackages Specify explicit package names that you want excluded from the policy. Only explicit names (and not patterns) are accepted.
         * 
         * @return builder
         * 
         */
        public Builder excludedPackages(String... excludedPackages) {
            return excludedPackages(List.of(excludedPackages));
        }

        /**
         * @param excludedProperties A key-value pair applied to the lead artifact of a package. Packages with this property will be excluded from deletion.
         * 
         * @return builder
         * 
         */
        public Builder excludedProperties(@Nullable Output<Map<String,List<String>>> excludedProperties) {
            $.excludedProperties = excludedProperties;
            return this;
        }

        /**
         * @param excludedProperties A key-value pair applied to the lead artifact of a package. Packages with this property will be excluded from deletion.
         * 
         * @return builder
         * 
         */
        public Builder excludedProperties(Map<String,List<String>> excludedProperties) {
            return excludedProperties(Output.of(excludedProperties));
        }

        /**
         * @param excludedRepos Specify patterns for repository names or explicit repository names that you want excluded from the cleanup policy.
         * 
         * @return builder
         * 
         */
        public Builder excludedRepos(@Nullable Output<List<String>> excludedRepos) {
            $.excludedRepos = excludedRepos;
            return this;
        }

        /**
         * @param excludedRepos Specify patterns for repository names or explicit repository names that you want excluded from the cleanup policy.
         * 
         * @return builder
         * 
         */
        public Builder excludedRepos(List<String> excludedRepos) {
            return excludedRepos(Output.of(excludedRepos));
        }

        /**
         * @param excludedRepos Specify patterns for repository names or explicit repository names that you want excluded from the cleanup policy.
         * 
         * @return builder
         * 
         */
        public Builder excludedRepos(String... excludedRepos) {
            return excludedRepos(List.of(excludedRepos));
        }

        /**
         * @param includeAllProjects Set this value to `true` if you want the policy to run on all Artifactory projects. The default value is `false`.
         * 
         *  ~&gt;This parameter is relevant only on the global level, for Platform Admins.
         * 
         * @return builder
         * 
         */
        public Builder includeAllProjects(@Nullable Output<Boolean> includeAllProjects) {
            $.includeAllProjects = includeAllProjects;
            return this;
        }

        /**
         * @param includeAllProjects Set this value to `true` if you want the policy to run on all Artifactory projects. The default value is `false`.
         * 
         *  ~&gt;This parameter is relevant only on the global level, for Platform Admins.
         * 
         * @return builder
         * 
         */
        public Builder includeAllProjects(Boolean includeAllProjects) {
            return includeAllProjects(Output.of(includeAllProjects));
        }

        /**
         * @param includedPackages Specify a pattern for a package name or an explicit package name on which you want the cleanup policy to run. Only one pattern or explicit name can be entered. To include all packages, use `**`. Example: `included_packages = [&#34;**&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder includedPackages(Output<List<String>> includedPackages) {
            $.includedPackages = includedPackages;
            return this;
        }

        /**
         * @param includedPackages Specify a pattern for a package name or an explicit package name on which you want the cleanup policy to run. Only one pattern or explicit name can be entered. To include all packages, use `**`. Example: `included_packages = [&#34;**&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder includedPackages(List<String> includedPackages) {
            return includedPackages(Output.of(includedPackages));
        }

        /**
         * @param includedPackages Specify a pattern for a package name or an explicit package name on which you want the cleanup policy to run. Only one pattern or explicit name can be entered. To include all packages, use `**`. Example: `included_packages = [&#34;**&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder includedPackages(String... includedPackages) {
            return includedPackages(List.of(includedPackages));
        }

        /**
         * @param includedProjects Enter the project keys for the projects on which you want the policy to run. To include repositories that are not assigned to any project, enter the project key `default`. Can be empty when `include_all_projects` is set to `true`.
         * 
         * @return builder
         * 
         */
        public Builder includedProjects(Output<List<String>> includedProjects) {
            $.includedProjects = includedProjects;
            return this;
        }

        /**
         * @param includedProjects Enter the project keys for the projects on which you want the policy to run. To include repositories that are not assigned to any project, enter the project key `default`. Can be empty when `include_all_projects` is set to `true`.
         * 
         * @return builder
         * 
         */
        public Builder includedProjects(List<String> includedProjects) {
            return includedProjects(Output.of(includedProjects));
        }

        /**
         * @param includedProjects Enter the project keys for the projects on which you want the policy to run. To include repositories that are not assigned to any project, enter the project key `default`. Can be empty when `include_all_projects` is set to `true`.
         * 
         * @return builder
         * 
         */
        public Builder includedProjects(String... includedProjects) {
            return includedProjects(List.of(includedProjects));
        }

        /**
         * @param includedProperties A key-value pair applied to the lead artifact of a package. Packages with this property will be deleted.
         * 
         * @return builder
         * 
         */
        public Builder includedProperties(@Nullable Output<Map<String,List<String>>> includedProperties) {
            $.includedProperties = includedProperties;
            return this;
        }

        /**
         * @param includedProperties A key-value pair applied to the lead artifact of a package. Packages with this property will be deleted.
         * 
         * @return builder
         * 
         */
        public Builder includedProperties(Map<String,List<String>> includedProperties) {
            return includedProperties(Output.of(includedProperties));
        }

        /**
         * @param keepLastNVersions Set a value for the number of latest versions to keep. The cleanup policy will remove all versions prior to the number you select here. The latest version is always excluded.
         * 
         * ~&gt;Not all package types support this condition. For information on which package types support this condition, [learn more](https://jfrog.com/help/r/jfrog-platform-administration-documentation/retention-policies/package-types-coverage).
         * 
         * @return builder
         * 
         */
        public Builder keepLastNVersions(@Nullable Output<Integer> keepLastNVersions) {
            $.keepLastNVersions = keepLastNVersions;
            return this;
        }

        /**
         * @param keepLastNVersions Set a value for the number of latest versions to keep. The cleanup policy will remove all versions prior to the number you select here. The latest version is always excluded.
         * 
         * ~&gt;Not all package types support this condition. For information on which package types support this condition, [learn more](https://jfrog.com/help/r/jfrog-platform-administration-documentation/retention-policies/package-types-coverage).
         * 
         * @return builder
         * 
         */
        public Builder keepLastNVersions(Integer keepLastNVersions) {
            return keepLastNVersions(Output.of(keepLastNVersions));
        }

        /**
         * @param lastDownloadedBeforeInDays The cleanup policy will delete packages based on how long ago they were downloaded. For example, if this parameter is 5 then packages downloaded more than 5 days ago will be deleted as part of the policy.
         * 
         * ~&gt;JFrog recommends using the `last_downloaded_before_in_days` condition to ensure that packages currently in use are not deleted.
         * 
         * @return builder
         * 
         */
        public Builder lastDownloadedBeforeInDays(@Nullable Output<Integer> lastDownloadedBeforeInDays) {
            $.lastDownloadedBeforeInDays = lastDownloadedBeforeInDays;
            return this;
        }

        /**
         * @param lastDownloadedBeforeInDays The cleanup policy will delete packages based on how long ago they were downloaded. For example, if this parameter is 5 then packages downloaded more than 5 days ago will be deleted as part of the policy.
         * 
         * ~&gt;JFrog recommends using the `last_downloaded_before_in_days` condition to ensure that packages currently in use are not deleted.
         * 
         * @return builder
         * 
         */
        public Builder lastDownloadedBeforeInDays(Integer lastDownloadedBeforeInDays) {
            return lastDownloadedBeforeInDays(Output.of(lastDownloadedBeforeInDays));
        }

        /**
         * @param lastDownloadedBeforeInMonths The cleanup policy will delete packages based on how long ago they were downloaded. For example, if this parameter is 5 then packages downloaded more than 5 months ago will be deleted as part of the policy.
         * 
         * ~&gt;JFrog recommends using the `last_downloaded_before_in_months` condition to ensure that packages currently in use are not deleted.
         * 
         * @return builder
         * 
         * @deprecated
         * Use `last_downloaded_before_in_days` instead of `last_downloaded_before_in_months`. Renamed to `last_downloaded_before_in_days` starting in version 7.111.2.
         * 
         */
        @Deprecated /* Use `last_downloaded_before_in_days` instead of `last_downloaded_before_in_months`. Renamed to `last_downloaded_before_in_days` starting in version 7.111.2. */
        public Builder lastDownloadedBeforeInMonths(@Nullable Output<Integer> lastDownloadedBeforeInMonths) {
            $.lastDownloadedBeforeInMonths = lastDownloadedBeforeInMonths;
            return this;
        }

        /**
         * @param lastDownloadedBeforeInMonths The cleanup policy will delete packages based on how long ago they were downloaded. For example, if this parameter is 5 then packages downloaded more than 5 months ago will be deleted as part of the policy.
         * 
         * ~&gt;JFrog recommends using the `last_downloaded_before_in_months` condition to ensure that packages currently in use are not deleted.
         * 
         * @return builder
         * 
         * @deprecated
         * Use `last_downloaded_before_in_days` instead of `last_downloaded_before_in_months`. Renamed to `last_downloaded_before_in_days` starting in version 7.111.2.
         * 
         */
        @Deprecated /* Use `last_downloaded_before_in_days` instead of `last_downloaded_before_in_months`. Renamed to `last_downloaded_before_in_days` starting in version 7.111.2. */
        public Builder lastDownloadedBeforeInMonths(Integer lastDownloadedBeforeInMonths) {
            return lastDownloadedBeforeInMonths(Output.of(lastDownloadedBeforeInMonths));
        }

        public Builder packageTypes(Output<List<String>> packageTypes) {
            $.packageTypes = packageTypes;
            return this;
        }

        public Builder packageTypes(List<String> packageTypes) {
            return packageTypes(Output.of(packageTypes));
        }

        public Builder packageTypes(String... packageTypes) {
            return packageTypes(List.of(packageTypes));
        }

        /**
         * @param repos Specify one or more patterns for the repository name(s) on which you want the cleanup policy to run. You can also specify explicit repository names. Specifying at least one pattern or explicit name is mandatory. Only packages in repositories that match the pattern or explicit name will be deleted. For including all repos use `**`. Example: `repos = [&#34;**&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder repos(Output<List<String>> repos) {
            $.repos = repos;
            return this;
        }

        /**
         * @param repos Specify one or more patterns for the repository name(s) on which you want the cleanup policy to run. You can also specify explicit repository names. Specifying at least one pattern or explicit name is mandatory. Only packages in repositories that match the pattern or explicit name will be deleted. For including all repos use `**`. Example: `repos = [&#34;**&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder repos(List<String> repos) {
            return repos(Output.of(repos));
        }

        /**
         * @param repos Specify one or more patterns for the repository name(s) on which you want the cleanup policy to run. You can also specify explicit repository names. Specifying at least one pattern or explicit name is mandatory. Only packages in repositories that match the pattern or explicit name will be deleted. For including all repos use `**`. Example: `repos = [&#34;**&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder repos(String... repos) {
            return repos(List.of(repos));
        }

        public PackageCleanupPolicySearchCriteriaArgs build() {
            if ($.includedPackages == null) {
                throw new MissingRequiredPropertyException("PackageCleanupPolicySearchCriteriaArgs", "includedPackages");
            }
            if ($.includedProjects == null) {
                throw new MissingRequiredPropertyException("PackageCleanupPolicySearchCriteriaArgs", "includedProjects");
            }
            if ($.packageTypes == null) {
                throw new MissingRequiredPropertyException("PackageCleanupPolicySearchCriteriaArgs", "packageTypes");
            }
            if ($.repos == null) {
                throw new MissingRequiredPropertyException("PackageCleanupPolicySearchCriteriaArgs", "repos");
            }
            return $;
        }
    }

}
