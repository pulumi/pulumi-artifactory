// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory;

import com.pulumi.artifactory.LdapSettingArgs;
import com.pulumi.artifactory.Utilities;
import com.pulumi.artifactory.inputs.LdapSettingState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="artifactory:index/ldapSetting:LdapSetting")
public class LdapSetting extends com.pulumi.resources.CustomResource {
    /**
     * Auto created users will have access to their profile page and will be able to perform actions such as generating an API
     * key. Default value is &#34;false&#34;.
     * 
     */
    @Export(name="allowUserToAccessProfile", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> allowUserToAccessProfile;

    /**
     * @return Auto created users will have access to their profile page and will be able to perform actions such as generating an API
     * key. Default value is &#34;false&#34;.
     * 
     */
    public Output<Optional<Boolean>> allowUserToAccessProfile() {
        return Codegen.optional(this.allowUserToAccessProfile);
    }
    /**
     * When set, users are automatically created when using LDAP. Otherwise, users are transient and associated with auto-join
     * groups defined in Artifactory. Default value is &#34;true&#34;.
     * 
     */
    @Export(name="autoCreateUser", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> autoCreateUser;

    /**
     * @return When set, users are automatically created when using LDAP. Otherwise, users are transient and associated with auto-join
     * groups defined in Artifactory. Default value is &#34;true&#34;.
     * 
     */
    public Output<Optional<Boolean>> autoCreateUser() {
        return Codegen.optional(this.autoCreateUser);
    }
    /**
     * An attribute that can be used to map a user&#39;s email address to a user created automatically in Artifactory. Default
     * value is &#34;mail&#34;.
     * 
     */
    @Export(name="emailAttribute", type=String.class, parameters={})
    private Output</* @Nullable */ String> emailAttribute;

    /**
     * @return An attribute that can be used to map a user&#39;s email address to a user created automatically in Artifactory. Default
     * value is &#34;mail&#34;.
     * 
     */
    public Output<Optional<String>> emailAttribute() {
        return Codegen.optional(this.emailAttribute);
    }
    /**
     * Flag to enable or disable the ldap setting. Default value is &#34;true&#34;.
     * 
     */
    @Export(name="enabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> enabled;

    /**
     * @return Flag to enable or disable the ldap setting. Default value is &#34;true&#34;.
     * 
     */
    public Output<Optional<Boolean>> enabled() {
        return Codegen.optional(this.enabled);
    }
    /**
     * Ldap setting name.
     * 
     */
    @Export(name="key", type=String.class, parameters={})
    private Output<String> key;

    /**
     * @return Ldap setting name.
     * 
     */
    public Output<String> key() {
        return this.key;
    }
    /**
     * Protects against LDAP poisoning by filtering out users exposed to vulnerabilities. Default value is &#34;true&#34;.
     * 
     */
    @Export(name="ldapPoisoningProtection", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> ldapPoisoningProtection;

    /**
     * @return Protects against LDAP poisoning by filtering out users exposed to vulnerabilities. Default value is &#34;true&#34;.
     * 
     */
    public Output<Optional<Boolean>> ldapPoisoningProtection() {
        return Codegen.optional(this.ldapPoisoningProtection);
    }
    /**
     * Location of the LDAP server in the following format: ldap://myldapserver/dc=sampledomain,dc=com
     * 
     */
    @Export(name="ldapUrl", type=String.class, parameters={})
    private Output<String> ldapUrl;

    /**
     * @return Location of the LDAP server in the following format: ldap://myldapserver/dc=sampledomain,dc=com
     * 
     */
    public Output<String> ldapUrl() {
        return this.ldapUrl;
    }
    /**
     * The full DN of the user that binds to the LDAP server to perform user searches. Only used with &#34;search&#34; authentication.
     * 
     */
    @Export(name="managerDn", type=String.class, parameters={})
    private Output</* @Nullable */ String> managerDn;

    /**
     * @return The full DN of the user that binds to the LDAP server to perform user searches. Only used with &#34;search&#34; authentication.
     * 
     */
    public Output<Optional<String>> managerDn() {
        return Codegen.optional(this.managerDn);
    }
    /**
     * The password of the user that binds to the LDAP server to perform the search. Only used with &#34;search&#34; authentication.
     * 
     */
    @Export(name="managerPassword", type=String.class, parameters={})
    private Output<String> managerPassword;

    /**
     * @return The password of the user that binds to the LDAP server to perform the search. Only used with &#34;search&#34; authentication.
     * 
     */
    public Output<String> managerPassword() {
        return this.managerPassword;
    }
    /**
     * When set, supports paging results for the LDAP server. This feature requires that the LDAP server supports a
     * PagedResultsControl configuration. Default value is &#34;true&#34;.
     * 
     */
    @Export(name="pagingSupportEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> pagingSupportEnabled;

    /**
     * @return When set, supports paging results for the LDAP server. This feature requires that the LDAP server supports a
     * PagedResultsControl configuration. Default value is &#34;true&#34;.
     * 
     */
    public Output<Optional<Boolean>> pagingSupportEnabled() {
        return Codegen.optional(this.pagingSupportEnabled);
    }
    /**
     * A context name to search in relative to the base DN of the LDAP URL. For example, &#39;ou=users&#39; With the LDAP Group Add-on
     * enabled, it is possible to enter multiple search base entries separated by a pipe (&#39;|&#39;) character.
     * 
     */
    @Export(name="searchBase", type=String.class, parameters={})
    private Output</* @Nullable */ String> searchBase;

    /**
     * @return A context name to search in relative to the base DN of the LDAP URL. For example, &#39;ou=users&#39; With the LDAP Group Add-on
     * enabled, it is possible to enter multiple search base entries separated by a pipe (&#39;|&#39;) character.
     * 
     */
    public Output<Optional<String>> searchBase() {
        return Codegen.optional(this.searchBase);
    }
    /**
     * A filter expression used to search for the user DN used in LDAP authentication. This is an LDAP search filter (as
     * defined in &#39;RFC 2254&#39;) with optional arguments. In this case, the username is the only argument, and is denoted by
     * &#39;{0}&#39;. Possible examples are: (uid={0}) - This searches for a username match on the attribute. Authentication to LDAP is
     * performed from the DN found if successful.
     * 
     */
    @Export(name="searchFilter", type=String.class, parameters={})
    private Output</* @Nullable */ String> searchFilter;

    /**
     * @return A filter expression used to search for the user DN used in LDAP authentication. This is an LDAP search filter (as
     * defined in &#39;RFC 2254&#39;) with optional arguments. In this case, the username is the only argument, and is denoted by
     * &#39;{0}&#39;. Possible examples are: (uid={0}) - This searches for a username match on the attribute. Authentication to LDAP is
     * performed from the DN found if successful.
     * 
     */
    public Output<Optional<String>> searchFilter() {
        return Codegen.optional(this.searchFilter);
    }
    /**
     * When set, enables deep search through the sub tree of the LDAP URL + search base. Default value is &#34;true&#34;.
     * 
     */
    @Export(name="searchSubTree", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> searchSubTree;

    /**
     * @return When set, enables deep search through the sub tree of the LDAP URL + search base. Default value is &#34;true&#34;.
     * 
     */
    public Output<Optional<Boolean>> searchSubTree() {
        return Codegen.optional(this.searchSubTree);
    }
    /**
     * A DN pattern that can be used to log users directly in to LDAP. This pattern is used to create a DN string for &#39;direct&#39;
     * user authentication where the pattern is relative to the base DN in the LDAP URL. The pattern argument {0} is replaced
     * with the username. This only works if anonymous binding is allowed and a direct user DN can be used, which is not the
     * default case for Active Directory (use User DN search filter instead). Example: uid={0},ou=People. Default value is
     * blank/empty.
     * 
     */
    @Export(name="userDnPattern", type=String.class, parameters={})
    private Output</* @Nullable */ String> userDnPattern;

    /**
     * @return A DN pattern that can be used to log users directly in to LDAP. This pattern is used to create a DN string for &#39;direct&#39;
     * user authentication where the pattern is relative to the base DN in the LDAP URL. The pattern argument {0} is replaced
     * with the username. This only works if anonymous binding is allowed and a direct user DN can be used, which is not the
     * default case for Active Directory (use User DN search filter instead). Example: uid={0},ou=People. Default value is
     * blank/empty.
     * 
     */
    public Output<Optional<String>> userDnPattern() {
        return Codegen.optional(this.userDnPattern);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public LdapSetting(String name) {
        this(name, LdapSettingArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public LdapSetting(String name, LdapSettingArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public LdapSetting(String name, LdapSettingArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("artifactory:index/ldapSetting:LdapSetting", name, args == null ? LdapSettingArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private LdapSetting(String name, Output<String> id, @Nullable LdapSettingState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("artifactory:index/ldapSetting:LdapSetting", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "managerPassword"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static LdapSetting get(String name, Output<String> id, @Nullable LdapSettingState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new LdapSetting(name, id, state, options);
    }
}
