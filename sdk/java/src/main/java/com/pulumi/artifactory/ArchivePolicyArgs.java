// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory;

import com.pulumi.artifactory.inputs.ArchivePolicySearchCriteriaArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ArchivePolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ArchivePolicyArgs Empty = new ArchivePolicyArgs();

    /**
     * The cron expression determines when the policy is run. This parameter is not mandatory, however if left empty the policy will not run automatically and can only be triggered manually.
     * 
     */
    @Import(name="cronExpression")
    private @Nullable Output<String> cronExpression;

    /**
     * @return The cron expression determines when the policy is run. This parameter is not mandatory, however if left empty the policy will not run automatically and can only be triggered manually.
     * 
     */
    public Optional<Output<String>> cronExpression() {
        return Optional.ofNullable(this.cronExpression);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The maximum duration (in minutes) for policy execution, after which the policy will stop running even if not completed. While setting a maximum run duration for a policy is useful for adhering to a strict archive V2 schedule, it can cause the policy to stop before completion.
     * 
     */
    @Import(name="durationInMinutes")
    private @Nullable Output<Integer> durationInMinutes;

    /**
     * @return The maximum duration (in minutes) for policy execution, after which the policy will stop running even if not completed. While setting a maximum run duration for a policy is useful for adhering to a strict archive V2 schedule, it can cause the policy to stop before completion.
     * 
     */
    public Optional<Output<Integer>> durationInMinutes() {
        return Optional.ofNullable(this.durationInMinutes);
    }

    /**
     * Enables or disabled the package cleanup policy. This allows the user to run the policy manually. If a policy has a valid cron expression, then it will be scheduled for execution based on it. If a policy is disabled, its future executions will be unscheduled. Defaults to `true`
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Enables or disabled the package cleanup policy. This allows the user to run the policy manually. If a policy has a valid cron expression, then it will be scheduled for execution based on it. If a policy is disabled, its future executions will be unscheduled. Defaults to `true`
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * An ID that is used to identify the archive policy. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
     * 
     */
    @Import(name="key", required=true)
    private Output<String> key;

    /**
     * @return An ID that is used to identify the archive policy. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
     * 
     */
    public Output<String> key() {
        return this.key;
    }

    /**
     * This attribute is used only for project-level archive V2 policies, it is not used for global-level policies.
     * 
     */
    @Import(name="projectKey")
    private @Nullable Output<String> projectKey;

    /**
     * @return This attribute is used only for project-level archive V2 policies, it is not used for global-level policies.
     * 
     */
    public Optional<Output<String>> projectKey() {
        return Optional.ofNullable(this.projectKey);
    }

    @Import(name="searchCriteria", required=true)
    private Output<ArchivePolicySearchCriteriaArgs> searchCriteria;

    public Output<ArchivePolicySearchCriteriaArgs> searchCriteria() {
        return this.searchCriteria;
    }

    /**
     * A `true` value means that when this policy is executed, packages will be permanently deleted. `false` means that when the policy is executed packages will be deleted to the Trash Can. Defaults to `false`.
     * 
     */
    @Import(name="skipTrashcan")
    private @Nullable Output<Boolean> skipTrashcan;

    /**
     * @return A `true` value means that when this policy is executed, packages will be permanently deleted. `false` means that when the policy is executed packages will be deleted to the Trash Can. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> skipTrashcan() {
        return Optional.ofNullable(this.skipTrashcan);
    }

    private ArchivePolicyArgs() {}

    private ArchivePolicyArgs(ArchivePolicyArgs $) {
        this.cronExpression = $.cronExpression;
        this.description = $.description;
        this.durationInMinutes = $.durationInMinutes;
        this.enabled = $.enabled;
        this.key = $.key;
        this.projectKey = $.projectKey;
        this.searchCriteria = $.searchCriteria;
        this.skipTrashcan = $.skipTrashcan;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ArchivePolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ArchivePolicyArgs $;

        public Builder() {
            $ = new ArchivePolicyArgs();
        }

        public Builder(ArchivePolicyArgs defaults) {
            $ = new ArchivePolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cronExpression The cron expression determines when the policy is run. This parameter is not mandatory, however if left empty the policy will not run automatically and can only be triggered manually.
         * 
         * @return builder
         * 
         */
        public Builder cronExpression(@Nullable Output<String> cronExpression) {
            $.cronExpression = cronExpression;
            return this;
        }

        /**
         * @param cronExpression The cron expression determines when the policy is run. This parameter is not mandatory, however if left empty the policy will not run automatically and can only be triggered manually.
         * 
         * @return builder
         * 
         */
        public Builder cronExpression(String cronExpression) {
            return cronExpression(Output.of(cronExpression));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param durationInMinutes The maximum duration (in minutes) for policy execution, after which the policy will stop running even if not completed. While setting a maximum run duration for a policy is useful for adhering to a strict archive V2 schedule, it can cause the policy to stop before completion.
         * 
         * @return builder
         * 
         */
        public Builder durationInMinutes(@Nullable Output<Integer> durationInMinutes) {
            $.durationInMinutes = durationInMinutes;
            return this;
        }

        /**
         * @param durationInMinutes The maximum duration (in minutes) for policy execution, after which the policy will stop running even if not completed. While setting a maximum run duration for a policy is useful for adhering to a strict archive V2 schedule, it can cause the policy to stop before completion.
         * 
         * @return builder
         * 
         */
        public Builder durationInMinutes(Integer durationInMinutes) {
            return durationInMinutes(Output.of(durationInMinutes));
        }

        /**
         * @param enabled Enables or disabled the package cleanup policy. This allows the user to run the policy manually. If a policy has a valid cron expression, then it will be scheduled for execution based on it. If a policy is disabled, its future executions will be unscheduled. Defaults to `true`
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Enables or disabled the package cleanup policy. This allows the user to run the policy manually. If a policy has a valid cron expression, then it will be scheduled for execution based on it. If a policy is disabled, its future executions will be unscheduled. Defaults to `true`
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param key An ID that is used to identify the archive policy. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
         * 
         * @return builder
         * 
         */
        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key An ID that is used to identify the archive policy. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param projectKey This attribute is used only for project-level archive V2 policies, it is not used for global-level policies.
         * 
         * @return builder
         * 
         */
        public Builder projectKey(@Nullable Output<String> projectKey) {
            $.projectKey = projectKey;
            return this;
        }

        /**
         * @param projectKey This attribute is used only for project-level archive V2 policies, it is not used for global-level policies.
         * 
         * @return builder
         * 
         */
        public Builder projectKey(String projectKey) {
            return projectKey(Output.of(projectKey));
        }

        public Builder searchCriteria(Output<ArchivePolicySearchCriteriaArgs> searchCriteria) {
            $.searchCriteria = searchCriteria;
            return this;
        }

        public Builder searchCriteria(ArchivePolicySearchCriteriaArgs searchCriteria) {
            return searchCriteria(Output.of(searchCriteria));
        }

        /**
         * @param skipTrashcan A `true` value means that when this policy is executed, packages will be permanently deleted. `false` means that when the policy is executed packages will be deleted to the Trash Can. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder skipTrashcan(@Nullable Output<Boolean> skipTrashcan) {
            $.skipTrashcan = skipTrashcan;
            return this;
        }

        /**
         * @param skipTrashcan A `true` value means that when this policy is executed, packages will be permanently deleted. `false` means that when the policy is executed packages will be deleted to the Trash Can. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder skipTrashcan(Boolean skipTrashcan) {
            return skipTrashcan(Output.of(skipTrashcan));
        }

        public ArchivePolicyArgs build() {
            if ($.key == null) {
                throw new MissingRequiredPropertyException("ArchivePolicyArgs", "key");
            }
            if ($.searchCriteria == null) {
                throw new MissingRequiredPropertyException("ArchivePolicyArgs", "searchCriteria");
            }
            return $;
        }
    }

}
