// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory.inputs;

import com.pulumi.artifactory.inputs.PushReplicationReplicationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PushReplicationState extends com.pulumi.resources.ResourceArgs {

    public static final PushReplicationState Empty = new PushReplicationState();

    @Import(name="cronExp")
    private @Nullable Output<String> cronExp;

    public Optional<Output<String>> cronExp() {
        return Optional.ofNullable(this.cronExp);
    }

    /**
     * When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on artifact, e.g. added, deleted or property change.
     * 
     */
    @Import(name="enableEventReplication")
    private @Nullable Output<Boolean> enableEventReplication;

    /**
     * @return When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on artifact, e.g. added, deleted or property change.
     * 
     */
    public Optional<Output<Boolean>> enableEventReplication() {
        return Optional.ofNullable(this.enableEventReplication);
    }

    @Import(name="replications")
    private @Nullable Output<List<PushReplicationReplicationArgs>> replications;

    public Optional<Output<List<PushReplicationReplicationArgs>>> replications() {
        return Optional.ofNullable(this.replications);
    }

    @Import(name="repoKey")
    private @Nullable Output<String> repoKey;

    public Optional<Output<String>> repoKey() {
        return Optional.ofNullable(this.repoKey);
    }

    private PushReplicationState() {}

    private PushReplicationState(PushReplicationState $) {
        this.cronExp = $.cronExp;
        this.enableEventReplication = $.enableEventReplication;
        this.replications = $.replications;
        this.repoKey = $.repoKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PushReplicationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PushReplicationState $;

        public Builder() {
            $ = new PushReplicationState();
        }

        public Builder(PushReplicationState defaults) {
            $ = new PushReplicationState(Objects.requireNonNull(defaults));
        }

        public Builder cronExp(@Nullable Output<String> cronExp) {
            $.cronExp = cronExp;
            return this;
        }

        public Builder cronExp(String cronExp) {
            return cronExp(Output.of(cronExp));
        }

        /**
         * @param enableEventReplication When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on artifact, e.g. added, deleted or property change.
         * 
         * @return builder
         * 
         */
        public Builder enableEventReplication(@Nullable Output<Boolean> enableEventReplication) {
            $.enableEventReplication = enableEventReplication;
            return this;
        }

        /**
         * @param enableEventReplication When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on artifact, e.g. added, deleted or property change.
         * 
         * @return builder
         * 
         */
        public Builder enableEventReplication(Boolean enableEventReplication) {
            return enableEventReplication(Output.of(enableEventReplication));
        }

        public Builder replications(@Nullable Output<List<PushReplicationReplicationArgs>> replications) {
            $.replications = replications;
            return this;
        }

        public Builder replications(List<PushReplicationReplicationArgs> replications) {
            return replications(Output.of(replications));
        }

        public Builder replications(PushReplicationReplicationArgs... replications) {
            return replications(List.of(replications));
        }

        public Builder repoKey(@Nullable Output<String> repoKey) {
            $.repoKey = repoKey;
            return this;
        }

        public Builder repoKey(String repoKey) {
            return repoKey(Output.of(repoKey));
        }

        public PushReplicationState build() {
            return $;
        }
    }

}
