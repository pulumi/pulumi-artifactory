// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PushReplicationReplicationArgs extends com.pulumi.resources.ResourceArgs {

    public static final PushReplicationReplicationArgs Empty = new PushReplicationReplicationArgs();

    /**
     * When true, enables distributed checksum storage. For more information, see
     * [Optimizing Repository Replication with Checksum-Based Storage](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-OptimizingRepositoryReplicationUsingStorageLevelSynchronizationOptions).
     * 
     */
    @Import(name="checkBinaryExistenceInFilestore")
    private @Nullable Output<Boolean> checkBinaryExistenceInFilestore;

    /**
     * @return When true, enables distributed checksum storage. For more information, see
     * [Optimizing Repository Replication with Checksum-Based Storage](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-OptimizingRepositoryReplicationUsingStorageLevelSynchronizationOptions).
     * 
     */
    public Optional<Output<Boolean>> checkBinaryExistenceInFilestore() {
        return Optional.ofNullable(this.checkBinaryExistenceInFilestore);
    }

    /**
     * When set, this replication will be enabled when saved.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return When set, this replication will be enabled when saved.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Required for local repository, but not needed for remote repository.
     * 
     */
    @Import(name="password", required=true)
    private Output<String> password;

    /**
     * @return Required for local repository, but not needed for remote repository.
     * 
     */
    public Output<String> password() {
        return this.password;
    }

    /**
     * Only artifacts that located in path that matches the subpath within the remote repository will be replicated.
     * 
     */
    @Import(name="pathPrefix")
    private @Nullable Output<String> pathPrefix;

    /**
     * @return Only artifacts that located in path that matches the subpath within the remote repository will be replicated.
     * 
     */
    public Optional<Output<String>> pathPrefix() {
        return Optional.ofNullable(this.pathPrefix);
    }

    /**
     * Proxy key from Artifactory Proxies settings. The proxy configuration will be used when communicating with the remote instance.
     * 
     */
    @Import(name="proxy")
    private @Nullable Output<String> proxy;

    /**
     * @return Proxy key from Artifactory Proxies settings. The proxy configuration will be used when communicating with the remote instance.
     * 
     */
    public Optional<Output<String>> proxy() {
        return Optional.ofNullable(this.proxy);
    }

    /**
     * The network timeout in milliseconds to use for remote operations.
     * 
     */
    @Import(name="socketTimeoutMillis")
    private @Nullable Output<Integer> socketTimeoutMillis;

    /**
     * @return The network timeout in milliseconds to use for remote operations.
     * 
     */
    public Optional<Output<Integer>> socketTimeoutMillis() {
        return Optional.ofNullable(this.socketTimeoutMillis);
    }

    /**
     * When set, items that were deleted locally should also be deleted remotely (also applies to properties metadata).
     * Note that enabling this option, will delete artifacts on the target that do not exist in the source repository.
     * 
     */
    @Import(name="syncDeletes")
    private @Nullable Output<Boolean> syncDeletes;

    /**
     * @return When set, items that were deleted locally should also be deleted remotely (also applies to properties metadata).
     * Note that enabling this option, will delete artifacts on the target that do not exist in the source repository.
     * 
     */
    public Optional<Output<Boolean>> syncDeletes() {
        return Optional.ofNullable(this.syncDeletes);
    }

    /**
     * When set, the task also synchronizes the properties of replicated artifacts.
     * 
     */
    @Import(name="syncProperties")
    private @Nullable Output<Boolean> syncProperties;

    /**
     * @return When set, the task also synchronizes the properties of replicated artifacts.
     * 
     */
    public Optional<Output<Boolean>> syncProperties() {
        return Optional.ofNullable(this.syncProperties);
    }

    /**
     * When set, artifact download statistics will also be replicated. Set to avoid inadvertent cleanup at the target instance when setting up replication for disaster recovery.
     * 
     */
    @Import(name="syncStatistics")
    private @Nullable Output<Boolean> syncStatistics;

    /**
     * @return When set, artifact download statistics will also be replicated. Set to avoid inadvertent cleanup at the target instance when setting up replication for disaster recovery.
     * 
     */
    public Optional<Output<Boolean>> syncStatistics() {
        return Optional.ofNullable(this.syncStatistics);
    }

    /**
     * The URL of the target local repository on a remote Artifactory server. Required for local repository, but not needed for remote repository.
     * 
     */
    @Import(name="url", required=true)
    private Output<String> url;

    /**
     * @return The URL of the target local repository on a remote Artifactory server. Required for local repository, but not needed for remote repository.
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    /**
     * Required for local repository, but not needed for remote repository.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return Required for local repository, but not needed for remote repository.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private PushReplicationReplicationArgs() {}

    private PushReplicationReplicationArgs(PushReplicationReplicationArgs $) {
        this.checkBinaryExistenceInFilestore = $.checkBinaryExistenceInFilestore;
        this.enabled = $.enabled;
        this.password = $.password;
        this.pathPrefix = $.pathPrefix;
        this.proxy = $.proxy;
        this.socketTimeoutMillis = $.socketTimeoutMillis;
        this.syncDeletes = $.syncDeletes;
        this.syncProperties = $.syncProperties;
        this.syncStatistics = $.syncStatistics;
        this.url = $.url;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PushReplicationReplicationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PushReplicationReplicationArgs $;

        public Builder() {
            $ = new PushReplicationReplicationArgs();
        }

        public Builder(PushReplicationReplicationArgs defaults) {
            $ = new PushReplicationReplicationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param checkBinaryExistenceInFilestore When true, enables distributed checksum storage. For more information, see
         * [Optimizing Repository Replication with Checksum-Based Storage](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-OptimizingRepositoryReplicationUsingStorageLevelSynchronizationOptions).
         * 
         * @return builder
         * 
         */
        public Builder checkBinaryExistenceInFilestore(@Nullable Output<Boolean> checkBinaryExistenceInFilestore) {
            $.checkBinaryExistenceInFilestore = checkBinaryExistenceInFilestore;
            return this;
        }

        /**
         * @param checkBinaryExistenceInFilestore When true, enables distributed checksum storage. For more information, see
         * [Optimizing Repository Replication with Checksum-Based Storage](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-OptimizingRepositoryReplicationUsingStorageLevelSynchronizationOptions).
         * 
         * @return builder
         * 
         */
        public Builder checkBinaryExistenceInFilestore(Boolean checkBinaryExistenceInFilestore) {
            return checkBinaryExistenceInFilestore(Output.of(checkBinaryExistenceInFilestore));
        }

        /**
         * @param enabled When set, this replication will be enabled when saved.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled When set, this replication will be enabled when saved.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param password Required for local repository, but not needed for remote repository.
         * 
         * @return builder
         * 
         */
        public Builder password(Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Required for local repository, but not needed for remote repository.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param pathPrefix Only artifacts that located in path that matches the subpath within the remote repository will be replicated.
         * 
         * @return builder
         * 
         */
        public Builder pathPrefix(@Nullable Output<String> pathPrefix) {
            $.pathPrefix = pathPrefix;
            return this;
        }

        /**
         * @param pathPrefix Only artifacts that located in path that matches the subpath within the remote repository will be replicated.
         * 
         * @return builder
         * 
         */
        public Builder pathPrefix(String pathPrefix) {
            return pathPrefix(Output.of(pathPrefix));
        }

        /**
         * @param proxy Proxy key from Artifactory Proxies settings. The proxy configuration will be used when communicating with the remote instance.
         * 
         * @return builder
         * 
         */
        public Builder proxy(@Nullable Output<String> proxy) {
            $.proxy = proxy;
            return this;
        }

        /**
         * @param proxy Proxy key from Artifactory Proxies settings. The proxy configuration will be used when communicating with the remote instance.
         * 
         * @return builder
         * 
         */
        public Builder proxy(String proxy) {
            return proxy(Output.of(proxy));
        }

        /**
         * @param socketTimeoutMillis The network timeout in milliseconds to use for remote operations.
         * 
         * @return builder
         * 
         */
        public Builder socketTimeoutMillis(@Nullable Output<Integer> socketTimeoutMillis) {
            $.socketTimeoutMillis = socketTimeoutMillis;
            return this;
        }

        /**
         * @param socketTimeoutMillis The network timeout in milliseconds to use for remote operations.
         * 
         * @return builder
         * 
         */
        public Builder socketTimeoutMillis(Integer socketTimeoutMillis) {
            return socketTimeoutMillis(Output.of(socketTimeoutMillis));
        }

        /**
         * @param syncDeletes When set, items that were deleted locally should also be deleted remotely (also applies to properties metadata).
         * Note that enabling this option, will delete artifacts on the target that do not exist in the source repository.
         * 
         * @return builder
         * 
         */
        public Builder syncDeletes(@Nullable Output<Boolean> syncDeletes) {
            $.syncDeletes = syncDeletes;
            return this;
        }

        /**
         * @param syncDeletes When set, items that were deleted locally should also be deleted remotely (also applies to properties metadata).
         * Note that enabling this option, will delete artifacts on the target that do not exist in the source repository.
         * 
         * @return builder
         * 
         */
        public Builder syncDeletes(Boolean syncDeletes) {
            return syncDeletes(Output.of(syncDeletes));
        }

        /**
         * @param syncProperties When set, the task also synchronizes the properties of replicated artifacts.
         * 
         * @return builder
         * 
         */
        public Builder syncProperties(@Nullable Output<Boolean> syncProperties) {
            $.syncProperties = syncProperties;
            return this;
        }

        /**
         * @param syncProperties When set, the task also synchronizes the properties of replicated artifacts.
         * 
         * @return builder
         * 
         */
        public Builder syncProperties(Boolean syncProperties) {
            return syncProperties(Output.of(syncProperties));
        }

        /**
         * @param syncStatistics When set, artifact download statistics will also be replicated. Set to avoid inadvertent cleanup at the target instance when setting up replication for disaster recovery.
         * 
         * @return builder
         * 
         */
        public Builder syncStatistics(@Nullable Output<Boolean> syncStatistics) {
            $.syncStatistics = syncStatistics;
            return this;
        }

        /**
         * @param syncStatistics When set, artifact download statistics will also be replicated. Set to avoid inadvertent cleanup at the target instance when setting up replication for disaster recovery.
         * 
         * @return builder
         * 
         */
        public Builder syncStatistics(Boolean syncStatistics) {
            return syncStatistics(Output.of(syncStatistics));
        }

        /**
         * @param url The URL of the target local repository on a remote Artifactory server. Required for local repository, but not needed for remote repository.
         * 
         * @return builder
         * 
         */
        public Builder url(Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The URL of the target local repository on a remote Artifactory server. Required for local repository, but not needed for remote repository.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param username Required for local repository, but not needed for remote repository.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Required for local repository, but not needed for remote repository.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public PushReplicationReplicationArgs build() {
            $.password = Objects.requireNonNull($.password, "expected parameter 'password' to be non-null");
            $.url = Objects.requireNonNull($.url, "expected parameter 'url' to be non-null");
            $.username = Objects.requireNonNull($.username, "expected parameter 'username' to be non-null");
            return $;
        }
    }

}
