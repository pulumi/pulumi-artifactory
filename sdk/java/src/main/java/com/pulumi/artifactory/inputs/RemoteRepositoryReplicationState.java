// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RemoteRepositoryReplicationState extends com.pulumi.resources.ResourceArgs {

    public static final RemoteRepositoryReplicationState Empty = new RemoteRepositoryReplicationState();

    /**
     * Enabling the `check_binary_existence_in_filestore` flag requires an Enterprise Plus license. When true, enables distributed checksum storage. For more information, see [Optimizing Repository Replication with Checksum-Based Storage](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-OptimizingRepositoryReplicationUsingStorageLevelSynchronizationOptions).
     * 
     */
    @Import(name="checkBinaryExistenceInFilestore")
    private @Nullable Output<Boolean> checkBinaryExistenceInFilestore;

    /**
     * @return Enabling the `check_binary_existence_in_filestore` flag requires an Enterprise Plus license. When true, enables distributed checksum storage. For more information, see [Optimizing Repository Replication with Checksum-Based Storage](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-OptimizingRepositoryReplicationUsingStorageLevelSynchronizationOptions).
     * 
     */
    public Optional<Output<Boolean>> checkBinaryExistenceInFilestore() {
        return Optional.ofNullable(this.checkBinaryExistenceInFilestore);
    }

    /**
     * A valid CRON expression that you can use to control replication frequency. Eg: `0 0 12 * * ? *`, `0 0 2 ? * MON-SAT *`. Note: use 6 or 7 parts format - Seconds, Minutes Hours, Day Of Month, Month, Day Of Week, Year (optional). Specifying both a day-of-week AND a day-of-month parameter is not supported. One of them should be replaced by `?`. Incorrect: `* 5,7,9 14/2 * * WED,SAT *`, correct: `* 5,7,9 14/2 ? * WED,SAT *`. See details in [Cron Trigger Tutorial](https://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html).
     * 
     */
    @Import(name="cronExp")
    private @Nullable Output<String> cronExp;

    /**
     * @return A valid CRON expression that you can use to control replication frequency. Eg: `0 0 12 * * ? *`, `0 0 2 ? * MON-SAT *`. Note: use 6 or 7 parts format - Seconds, Minutes Hours, Day Of Month, Month, Day Of Week, Year (optional). Specifying both a day-of-week AND a day-of-month parameter is not supported. One of them should be replaced by `?`. Incorrect: `* 5,7,9 14/2 * * WED,SAT *`, correct: `* 5,7,9 14/2 ? * WED,SAT *`. See details in [Cron Trigger Tutorial](https://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html).
     * 
     */
    public Optional<Output<String>> cronExp() {
        return Optional.ofNullable(this.cronExp);
    }

    /**
     * When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on artifact, e.g. add, deleted or property change. Default value is `false`.
     * com/confluence/display/JFROG/User+Profile#UserProfile-IdentityTokenidentitytoken).
     * 
     */
    @Import(name="enableEventReplication")
    private @Nullable Output<Boolean> enableEventReplication;

    /**
     * @return When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on artifact, e.g. add, deleted or property change. Default value is `false`.
     * com/confluence/display/JFROG/User+Profile#UserProfile-IdentityTokenidentitytoken).
     * 
     */
    public Optional<Output<Boolean>> enableEventReplication() {
        return Optional.ofNullable(this.enableEventReplication);
    }

    /**
     * When set, enables replication of this repository to the target specified in `url` attribute. Default value is `true`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return When set, enables replication of this repository to the target specified in `url` attribute. Default value is `true`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**{@literal /}z/*`. By default, no artifacts are excluded.
     * 
     */
    @Import(name="excludePathPrefixPattern")
    private @Nullable Output<String> excludePathPrefixPattern;

    /**
     * @return List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**{@literal /}z/*`. By default, no artifacts are excluded.
     * 
     */
    public Optional<Output<String>> excludePathPrefixPattern() {
        return Optional.ofNullable(this.excludePathPrefixPattern);
    }

    /**
     * List of artifact patterns to include when evaluating artifact requests in the form of `x/y/**{@literal /}z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included `(**{@literal /}*)`.
     * 
     */
    @Import(name="includePathPrefixPattern")
    private @Nullable Output<String> includePathPrefixPattern;

    /**
     * @return List of artifact patterns to include when evaluating artifact requests in the form of `x/y/**{@literal /}z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included `(**{@literal /}*)`.
     * 
     */
    public Optional<Output<String>> includePathPrefixPattern() {
        return Optional.ofNullable(this.includePathPrefixPattern);
    }

    /**
     * Replication ID, the value is unknown until the resource is created. Can&#39;t be set or updated.
     * 
     */
    @Import(name="replicationKey")
    private @Nullable Output<String> replicationKey;

    /**
     * @return Replication ID, the value is unknown until the resource is created. Can&#39;t be set or updated.
     * 
     */
    public Optional<Output<String>> replicationKey() {
        return Optional.ofNullable(this.replicationKey);
    }

    /**
     * Repository name.
     * 
     */
    @Import(name="repoKey")
    private @Nullable Output<String> repoKey;

    /**
     * @return Repository name.
     * 
     */
    public Optional<Output<String>> repoKey() {
        return Optional.ofNullable(this.repoKey);
    }

    /**
     * When set, items that were deleted locally should also be deleted remotely (also applies to properties metadata). Note that enabling this option, will delete artifacts on the target that do not exist in the source repository. Default value is `false`.
     * 
     */
    @Import(name="syncDeletes")
    private @Nullable Output<Boolean> syncDeletes;

    /**
     * @return When set, items that were deleted locally should also be deleted remotely (also applies to properties metadata). Note that enabling this option, will delete artifacts on the target that do not exist in the source repository. Default value is `false`.
     * 
     */
    public Optional<Output<Boolean>> syncDeletes() {
        return Optional.ofNullable(this.syncDeletes);
    }

    /**
     * When set, the task also synchronizes the properties of replicated artifacts. Default value is `true`.
     * 
     */
    @Import(name="syncProperties")
    private @Nullable Output<Boolean> syncProperties;

    /**
     * @return When set, the task also synchronizes the properties of replicated artifacts. Default value is `true`.
     * 
     */
    public Optional<Output<Boolean>> syncProperties() {
        return Optional.ofNullable(this.syncProperties);
    }

    private RemoteRepositoryReplicationState() {}

    private RemoteRepositoryReplicationState(RemoteRepositoryReplicationState $) {
        this.checkBinaryExistenceInFilestore = $.checkBinaryExistenceInFilestore;
        this.cronExp = $.cronExp;
        this.enableEventReplication = $.enableEventReplication;
        this.enabled = $.enabled;
        this.excludePathPrefixPattern = $.excludePathPrefixPattern;
        this.includePathPrefixPattern = $.includePathPrefixPattern;
        this.replicationKey = $.replicationKey;
        this.repoKey = $.repoKey;
        this.syncDeletes = $.syncDeletes;
        this.syncProperties = $.syncProperties;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RemoteRepositoryReplicationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RemoteRepositoryReplicationState $;

        public Builder() {
            $ = new RemoteRepositoryReplicationState();
        }

        public Builder(RemoteRepositoryReplicationState defaults) {
            $ = new RemoteRepositoryReplicationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param checkBinaryExistenceInFilestore Enabling the `check_binary_existence_in_filestore` flag requires an Enterprise Plus license. When true, enables distributed checksum storage. For more information, see [Optimizing Repository Replication with Checksum-Based Storage](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-OptimizingRepositoryReplicationUsingStorageLevelSynchronizationOptions).
         * 
         * @return builder
         * 
         */
        public Builder checkBinaryExistenceInFilestore(@Nullable Output<Boolean> checkBinaryExistenceInFilestore) {
            $.checkBinaryExistenceInFilestore = checkBinaryExistenceInFilestore;
            return this;
        }

        /**
         * @param checkBinaryExistenceInFilestore Enabling the `check_binary_existence_in_filestore` flag requires an Enterprise Plus license. When true, enables distributed checksum storage. For more information, see [Optimizing Repository Replication with Checksum-Based Storage](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-OptimizingRepositoryReplicationUsingStorageLevelSynchronizationOptions).
         * 
         * @return builder
         * 
         */
        public Builder checkBinaryExistenceInFilestore(Boolean checkBinaryExistenceInFilestore) {
            return checkBinaryExistenceInFilestore(Output.of(checkBinaryExistenceInFilestore));
        }

        /**
         * @param cronExp A valid CRON expression that you can use to control replication frequency. Eg: `0 0 12 * * ? *`, `0 0 2 ? * MON-SAT *`. Note: use 6 or 7 parts format - Seconds, Minutes Hours, Day Of Month, Month, Day Of Week, Year (optional). Specifying both a day-of-week AND a day-of-month parameter is not supported. One of them should be replaced by `?`. Incorrect: `* 5,7,9 14/2 * * WED,SAT *`, correct: `* 5,7,9 14/2 ? * WED,SAT *`. See details in [Cron Trigger Tutorial](https://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html).
         * 
         * @return builder
         * 
         */
        public Builder cronExp(@Nullable Output<String> cronExp) {
            $.cronExp = cronExp;
            return this;
        }

        /**
         * @param cronExp A valid CRON expression that you can use to control replication frequency. Eg: `0 0 12 * * ? *`, `0 0 2 ? * MON-SAT *`. Note: use 6 or 7 parts format - Seconds, Minutes Hours, Day Of Month, Month, Day Of Week, Year (optional). Specifying both a day-of-week AND a day-of-month parameter is not supported. One of them should be replaced by `?`. Incorrect: `* 5,7,9 14/2 * * WED,SAT *`, correct: `* 5,7,9 14/2 ? * WED,SAT *`. See details in [Cron Trigger Tutorial](https://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html).
         * 
         * @return builder
         * 
         */
        public Builder cronExp(String cronExp) {
            return cronExp(Output.of(cronExp));
        }

        /**
         * @param enableEventReplication When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on artifact, e.g. add, deleted or property change. Default value is `false`.
         * com/confluence/display/JFROG/User+Profile#UserProfile-IdentityTokenidentitytoken).
         * 
         * @return builder
         * 
         */
        public Builder enableEventReplication(@Nullable Output<Boolean> enableEventReplication) {
            $.enableEventReplication = enableEventReplication;
            return this;
        }

        /**
         * @param enableEventReplication When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on artifact, e.g. add, deleted or property change. Default value is `false`.
         * com/confluence/display/JFROG/User+Profile#UserProfile-IdentityTokenidentitytoken).
         * 
         * @return builder
         * 
         */
        public Builder enableEventReplication(Boolean enableEventReplication) {
            return enableEventReplication(Output.of(enableEventReplication));
        }

        /**
         * @param enabled When set, enables replication of this repository to the target specified in `url` attribute. Default value is `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled When set, enables replication of this repository to the target specified in `url` attribute. Default value is `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param excludePathPrefixPattern List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**{@literal /}z/*`. By default, no artifacts are excluded.
         * 
         * @return builder
         * 
         */
        public Builder excludePathPrefixPattern(@Nullable Output<String> excludePathPrefixPattern) {
            $.excludePathPrefixPattern = excludePathPrefixPattern;
            return this;
        }

        /**
         * @param excludePathPrefixPattern List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**{@literal /}z/*`. By default, no artifacts are excluded.
         * 
         * @return builder
         * 
         */
        public Builder excludePathPrefixPattern(String excludePathPrefixPattern) {
            return excludePathPrefixPattern(Output.of(excludePathPrefixPattern));
        }

        /**
         * @param includePathPrefixPattern List of artifact patterns to include when evaluating artifact requests in the form of `x/y/**{@literal /}z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included `(**{@literal /}*)`.
         * 
         * @return builder
         * 
         */
        public Builder includePathPrefixPattern(@Nullable Output<String> includePathPrefixPattern) {
            $.includePathPrefixPattern = includePathPrefixPattern;
            return this;
        }

        /**
         * @param includePathPrefixPattern List of artifact patterns to include when evaluating artifact requests in the form of `x/y/**{@literal /}z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included `(**{@literal /}*)`.
         * 
         * @return builder
         * 
         */
        public Builder includePathPrefixPattern(String includePathPrefixPattern) {
            return includePathPrefixPattern(Output.of(includePathPrefixPattern));
        }

        /**
         * @param replicationKey Replication ID, the value is unknown until the resource is created. Can&#39;t be set or updated.
         * 
         * @return builder
         * 
         */
        public Builder replicationKey(@Nullable Output<String> replicationKey) {
            $.replicationKey = replicationKey;
            return this;
        }

        /**
         * @param replicationKey Replication ID, the value is unknown until the resource is created. Can&#39;t be set or updated.
         * 
         * @return builder
         * 
         */
        public Builder replicationKey(String replicationKey) {
            return replicationKey(Output.of(replicationKey));
        }

        /**
         * @param repoKey Repository name.
         * 
         * @return builder
         * 
         */
        public Builder repoKey(@Nullable Output<String> repoKey) {
            $.repoKey = repoKey;
            return this;
        }

        /**
         * @param repoKey Repository name.
         * 
         * @return builder
         * 
         */
        public Builder repoKey(String repoKey) {
            return repoKey(Output.of(repoKey));
        }

        /**
         * @param syncDeletes When set, items that were deleted locally should also be deleted remotely (also applies to properties metadata). Note that enabling this option, will delete artifacts on the target that do not exist in the source repository. Default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder syncDeletes(@Nullable Output<Boolean> syncDeletes) {
            $.syncDeletes = syncDeletes;
            return this;
        }

        /**
         * @param syncDeletes When set, items that were deleted locally should also be deleted remotely (also applies to properties metadata). Note that enabling this option, will delete artifacts on the target that do not exist in the source repository. Default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder syncDeletes(Boolean syncDeletes) {
            return syncDeletes(Output.of(syncDeletes));
        }

        /**
         * @param syncProperties When set, the task also synchronizes the properties of replicated artifacts. Default value is `true`.
         * 
         * @return builder
         * 
         */
        public Builder syncProperties(@Nullable Output<Boolean> syncProperties) {
            $.syncProperties = syncProperties;
            return this;
        }

        /**
         * @param syncProperties When set, the task also synchronizes the properties of replicated artifacts. Default value is `true`.
         * 
         * @return builder
         * 
         */
        public Builder syncProperties(Boolean syncProperties) {
            return syncProperties(Output.of(syncProperties));
        }

        public RemoteRepositoryReplicationState build() {
            return $;
        }
    }

}
