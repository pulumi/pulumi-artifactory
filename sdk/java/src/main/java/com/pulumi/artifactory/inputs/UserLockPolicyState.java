// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserLockPolicyState extends com.pulumi.resources.ResourceArgs {

    public static final UserLockPolicyState Empty = new UserLockPolicyState();

    /**
     * Enable User Lock Policy. Lock user after exceeding max failed login attempts.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Enable User Lock Policy. Lock user after exceeding max failed login attempts.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Max failed login attempts.
     * 
     */
    @Import(name="loginAttempts")
    private @Nullable Output<Integer> loginAttempts;

    /**
     * @return Max failed login attempts.
     * 
     */
    public Optional<Output<Integer>> loginAttempts() {
        return Optional.ofNullable(this.loginAttempts);
    }

    /**
     * Name of the resource. Only used for importing.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource. Only used for importing.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private UserLockPolicyState() {}

    private UserLockPolicyState(UserLockPolicyState $) {
        this.enabled = $.enabled;
        this.loginAttempts = $.loginAttempts;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserLockPolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserLockPolicyState $;

        public Builder() {
            $ = new UserLockPolicyState();
        }

        public Builder(UserLockPolicyState defaults) {
            $ = new UserLockPolicyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Enable User Lock Policy. Lock user after exceeding max failed login attempts.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Enable User Lock Policy. Lock user after exceeding max failed login attempts.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param loginAttempts Max failed login attempts.
         * 
         * @return builder
         * 
         */
        public Builder loginAttempts(@Nullable Output<Integer> loginAttempts) {
            $.loginAttempts = loginAttempts;
            return this;
        }

        /**
         * @param loginAttempts Max failed login attempts.
         * 
         * @return builder
         * 
         */
        public Builder loginAttempts(Integer loginAttempts) {
            return loginAttempts(Output.of(loginAttempts));
        }

        /**
         * @param name Name of the resource. Only used for importing.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource. Only used for importing.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public UserLockPolicyState build() {
            return $;
        }
    }

}
