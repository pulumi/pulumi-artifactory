// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class BuildWebhookCriteria {
    /**
     * @return Trigger on any build.
     * 
     */
    private Boolean anyBuild;
    /**
     * @return Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`.
     * 
     */
    private @Nullable List<String> excludePatterns;
    /**
     * @return Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`.
     * 
     */
    private @Nullable List<String> includePatterns;
    /**
     * @return Trigger on this list of build names.
     * 
     */
    private List<String> selectedBuilds;

    private BuildWebhookCriteria() {}
    /**
     * @return Trigger on any build.
     * 
     */
    public Boolean anyBuild() {
        return this.anyBuild;
    }
    /**
     * @return Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`.
     * 
     */
    public List<String> excludePatterns() {
        return this.excludePatterns == null ? List.of() : this.excludePatterns;
    }
    /**
     * @return Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`.
     * 
     */
    public List<String> includePatterns() {
        return this.includePatterns == null ? List.of() : this.includePatterns;
    }
    /**
     * @return Trigger on this list of build names.
     * 
     */
    public List<String> selectedBuilds() {
        return this.selectedBuilds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BuildWebhookCriteria defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean anyBuild;
        private @Nullable List<String> excludePatterns;
        private @Nullable List<String> includePatterns;
        private List<String> selectedBuilds;
        public Builder() {}
        public Builder(BuildWebhookCriteria defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.anyBuild = defaults.anyBuild;
    	      this.excludePatterns = defaults.excludePatterns;
    	      this.includePatterns = defaults.includePatterns;
    	      this.selectedBuilds = defaults.selectedBuilds;
        }

        @CustomType.Setter
        public Builder anyBuild(Boolean anyBuild) {
            this.anyBuild = Objects.requireNonNull(anyBuild);
            return this;
        }
        @CustomType.Setter
        public Builder excludePatterns(@Nullable List<String> excludePatterns) {
            this.excludePatterns = excludePatterns;
            return this;
        }
        public Builder excludePatterns(String... excludePatterns) {
            return excludePatterns(List.of(excludePatterns));
        }
        @CustomType.Setter
        public Builder includePatterns(@Nullable List<String> includePatterns) {
            this.includePatterns = includePatterns;
            return this;
        }
        public Builder includePatterns(String... includePatterns) {
            return includePatterns(List.of(includePatterns));
        }
        @CustomType.Setter
        public Builder selectedBuilds(List<String> selectedBuilds) {
            this.selectedBuilds = Objects.requireNonNull(selectedBuilds);
            return this;
        }
        public Builder selectedBuilds(String... selectedBuilds) {
            return selectedBuilds(List.of(selectedBuilds));
        }
        public BuildWebhookCriteria build() {
            final var o = new BuildWebhookCriteria();
            o.anyBuild = anyBuild;
            o.excludePatterns = excludePatterns;
            o.includePatterns = includePatterns;
            o.selectedBuilds = selectedBuilds;
            return o;
        }
    }
}
