// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReleaseBundleV2SourceReleaseBundleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReleaseBundleV2SourceReleaseBundleArgs Empty = new ReleaseBundleV2SourceReleaseBundleArgs();

    /**
     * The name of the release bundle.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the release bundle.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Project key of the release bundle.
     * 
     */
    @Import(name="projectKey")
    private @Nullable Output<String> projectKey;

    /**
     * @return Project key of the release bundle.
     * 
     */
    public Optional<Output<String>> projectKey() {
        return Optional.ofNullable(this.projectKey);
    }

    /**
     * The key of the release bundle repository.
     * 
     */
    @Import(name="repositoryKey")
    private @Nullable Output<String> repositoryKey;

    /**
     * @return The key of the release bundle repository.
     * 
     */
    public Optional<Output<String>> repositoryKey() {
        return Optional.ofNullable(this.repositoryKey);
    }

    /**
     * The version of the release bundle.
     * 
     */
    @Import(name="version", required=true)
    private Output<String> version;

    /**
     * @return The version of the release bundle.
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    private ReleaseBundleV2SourceReleaseBundleArgs() {}

    private ReleaseBundleV2SourceReleaseBundleArgs(ReleaseBundleV2SourceReleaseBundleArgs $) {
        this.name = $.name;
        this.projectKey = $.projectKey;
        this.repositoryKey = $.repositoryKey;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReleaseBundleV2SourceReleaseBundleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReleaseBundleV2SourceReleaseBundleArgs $;

        public Builder() {
            $ = new ReleaseBundleV2SourceReleaseBundleArgs();
        }

        public Builder(ReleaseBundleV2SourceReleaseBundleArgs defaults) {
            $ = new ReleaseBundleV2SourceReleaseBundleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name The name of the release bundle.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the release bundle.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectKey Project key of the release bundle.
         * 
         * @return builder
         * 
         */
        public Builder projectKey(@Nullable Output<String> projectKey) {
            $.projectKey = projectKey;
            return this;
        }

        /**
         * @param projectKey Project key of the release bundle.
         * 
         * @return builder
         * 
         */
        public Builder projectKey(String projectKey) {
            return projectKey(Output.of(projectKey));
        }

        /**
         * @param repositoryKey The key of the release bundle repository.
         * 
         * @return builder
         * 
         */
        public Builder repositoryKey(@Nullable Output<String> repositoryKey) {
            $.repositoryKey = repositoryKey;
            return this;
        }

        /**
         * @param repositoryKey The key of the release bundle repository.
         * 
         * @return builder
         * 
         */
        public Builder repositoryKey(String repositoryKey) {
            return repositoryKey(Output.of(repositoryKey));
        }

        /**
         * @param version The version of the release bundle.
         * 
         * @return builder
         * 
         */
        public Builder version(Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version of the release bundle.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public ReleaseBundleV2SourceReleaseBundleArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ReleaseBundleV2SourceReleaseBundleArgs", "name");
            }
            if ($.version == null) {
                throw new MissingRequiredPropertyException("ReleaseBundleV2SourceReleaseBundleArgs", "version");
            }
            return $;
        }
    }

}
