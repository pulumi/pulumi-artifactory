// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BuildCustomWebhookCriteriaArgs extends com.pulumi.resources.ResourceArgs {

    public static final BuildCustomWebhookCriteriaArgs Empty = new BuildCustomWebhookCriteriaArgs();

    /**
     * Trigger on any build.
     * 
     */
    @Import(name="anyBuild", required=true)
    private Output<Boolean> anyBuild;

    /**
     * @return Trigger on any build.
     * 
     */
    public Output<Boolean> anyBuild() {
        return this.anyBuild;
    }

    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`.
     * 
     */
    @Import(name="excludePatterns")
    private @Nullable Output<List<String>> excludePatterns;

    /**
     * @return Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`.
     * 
     */
    public Optional<Output<List<String>>> excludePatterns() {
        return Optional.ofNullable(this.excludePatterns);
    }

    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`.
     * 
     */
    @Import(name="includePatterns")
    private @Nullable Output<List<String>> includePatterns;

    /**
     * @return Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`.
     * 
     */
    public Optional<Output<List<String>>> includePatterns() {
        return Optional.ofNullable(this.includePatterns);
    }

    /**
     * Trigger on this list of build names.
     * 
     */
    @Import(name="selectedBuilds", required=true)
    private Output<List<String>> selectedBuilds;

    /**
     * @return Trigger on this list of build names.
     * 
     */
    public Output<List<String>> selectedBuilds() {
        return this.selectedBuilds;
    }

    private BuildCustomWebhookCriteriaArgs() {}

    private BuildCustomWebhookCriteriaArgs(BuildCustomWebhookCriteriaArgs $) {
        this.anyBuild = $.anyBuild;
        this.excludePatterns = $.excludePatterns;
        this.includePatterns = $.includePatterns;
        this.selectedBuilds = $.selectedBuilds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BuildCustomWebhookCriteriaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BuildCustomWebhookCriteriaArgs $;

        public Builder() {
            $ = new BuildCustomWebhookCriteriaArgs();
        }

        public Builder(BuildCustomWebhookCriteriaArgs defaults) {
            $ = new BuildCustomWebhookCriteriaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param anyBuild Trigger on any build.
         * 
         * @return builder
         * 
         */
        public Builder anyBuild(Output<Boolean> anyBuild) {
            $.anyBuild = anyBuild;
            return this;
        }

        /**
         * @param anyBuild Trigger on any build.
         * 
         * @return builder
         * 
         */
        public Builder anyBuild(Boolean anyBuild) {
            return anyBuild(Output.of(anyBuild));
        }

        /**
         * @param excludePatterns Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`.
         * 
         * @return builder
         * 
         */
        public Builder excludePatterns(@Nullable Output<List<String>> excludePatterns) {
            $.excludePatterns = excludePatterns;
            return this;
        }

        /**
         * @param excludePatterns Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`.
         * 
         * @return builder
         * 
         */
        public Builder excludePatterns(List<String> excludePatterns) {
            return excludePatterns(Output.of(excludePatterns));
        }

        /**
         * @param excludePatterns Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`.
         * 
         * @return builder
         * 
         */
        public Builder excludePatterns(String... excludePatterns) {
            return excludePatterns(List.of(excludePatterns));
        }

        /**
         * @param includePatterns Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`.
         * 
         * @return builder
         * 
         */
        public Builder includePatterns(@Nullable Output<List<String>> includePatterns) {
            $.includePatterns = includePatterns;
            return this;
        }

        /**
         * @param includePatterns Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`.
         * 
         * @return builder
         * 
         */
        public Builder includePatterns(List<String> includePatterns) {
            return includePatterns(Output.of(includePatterns));
        }

        /**
         * @param includePatterns Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`.
         * 
         * @return builder
         * 
         */
        public Builder includePatterns(String... includePatterns) {
            return includePatterns(List.of(includePatterns));
        }

        /**
         * @param selectedBuilds Trigger on this list of build names.
         * 
         * @return builder
         * 
         */
        public Builder selectedBuilds(Output<List<String>> selectedBuilds) {
            $.selectedBuilds = selectedBuilds;
            return this;
        }

        /**
         * @param selectedBuilds Trigger on this list of build names.
         * 
         * @return builder
         * 
         */
        public Builder selectedBuilds(List<String> selectedBuilds) {
            return selectedBuilds(Output.of(selectedBuilds));
        }

        /**
         * @param selectedBuilds Trigger on this list of build names.
         * 
         * @return builder
         * 
         */
        public Builder selectedBuilds(String... selectedBuilds) {
            return selectedBuilds(List.of(selectedBuilds));
        }

        public BuildCustomWebhookCriteriaArgs build() {
            if ($.anyBuild == null) {
                throw new MissingRequiredPropertyException("BuildCustomWebhookCriteriaArgs", "anyBuild");
            }
            if ($.selectedBuilds == null) {
                throw new MissingRequiredPropertyException("BuildCustomWebhookCriteriaArgs", "selectedBuilds");
            }
            return $;
        }
    }

}
