// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory.inputs;

import com.pulumi.artifactory.inputs.RemoteTerraformRepositoryContentSynchronisationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RemoteTerraformRepositoryState extends com.pulumi.resources.ResourceArgs {

    public static final RemoteTerraformRepositoryState Empty = new RemoteTerraformRepositoryState();

    /**
     * Also known as &#39;Lenient Host Authentication&#39;, Allow credentials of this repository to be used on requests redirected to
     * any other host.
     * 
     */
    @Import(name="allowAnyHostAuth")
    private @Nullable Output<Boolean> allowAnyHostAuth;

    /**
     * @return Also known as &#39;Lenient Host Authentication&#39;, Allow credentials of this repository to be used on requests redirected to
     * any other host.
     * 
     */
    public Optional<Output<Boolean>> allowAnyHostAuth() {
        return Optional.ofNullable(this.allowAnyHostAuth);
    }

    /**
     * The number of seconds the repository stays in assumed offline state after a connection error. At the end of this time,
     * an online check is attempted in order to reset the offline status. A value of 0 means the repository is never assumed
     * offline. Default to 300.
     * 
     */
    @Import(name="assumedOfflinePeriodSecs")
    private @Nullable Output<Integer> assumedOfflinePeriodSecs;

    /**
     * @return The number of seconds the repository stays in assumed offline state after a connection error. At the end of this time,
     * an online check is attempted in order to reset the offline status. A value of 0 means the repository is never assumed
     * offline. Default to 300.
     * 
     */
    public Optional<Output<Integer>> assumedOfflinePeriodSecs() {
        return Optional.ofNullable(this.assumedOfflinePeriodSecs);
    }

    /**
     * (A.K.A &#39;Ignore Repository&#39; on the UI) When set, the repository or its local cache do not participate in artifact
     * resolution.
     * 
     */
    @Import(name="blackedOut")
    private @Nullable Output<Boolean> blackedOut;

    /**
     * @return (A.K.A &#39;Ignore Repository&#39; on the UI) When set, the repository or its local cache do not participate in artifact
     * resolution.
     * 
     */
    public Optional<Output<Boolean>> blackedOut() {
        return Optional.ofNullable(this.blackedOut);
    }

    /**
     * Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,
     * HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,
     * Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
     * 
     */
    @Import(name="blockMismatchingMimeTypes")
    private @Nullable Output<Boolean> blockMismatchingMimeTypes;

    /**
     * @return Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,
     * HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,
     * Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
     * 
     */
    public Optional<Output<Boolean>> blockMismatchingMimeTypes() {
        return Optional.ofNullable(this.blockMismatchingMimeTypes);
    }

    /**
     * Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,
     * HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,
     * Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
     * 
     */
    @Import(name="bypassHeadRequests")
    private @Nullable Output<Boolean> bypassHeadRequests;

    /**
     * @return Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,
     * HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,
     * Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
     * 
     */
    public Optional<Output<Boolean>> bypassHeadRequests() {
        return Optional.ofNullable(this.bypassHeadRequests);
    }

    @Import(name="clientTlsCertificate")
    private @Nullable Output<String> clientTlsCertificate;

    public Optional<Output<String>> clientTlsCertificate() {
        return Optional.ofNullable(this.clientTlsCertificate);
    }

    @Import(name="contentSynchronisation")
    private @Nullable Output<RemoteTerraformRepositoryContentSynchronisationArgs> contentSynchronisation;

    public Optional<Output<RemoteTerraformRepositoryContentSynchronisationArgs>> contentSynchronisation() {
        return Optional.ofNullable(this.contentSynchronisation);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Enables cookie management if the remote repository uses cookies to manage client state.
     * 
     */
    @Import(name="enableCookieManagement")
    private @Nullable Output<Boolean> enableCookieManagement;

    /**
     * @return Enables cookie management if the remote repository uses cookies to manage client state.
     * 
     */
    public Optional<Output<Boolean>> enableCookieManagement() {
        return Optional.ofNullable(this.enableCookieManagement);
    }

    /**
     * List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**{@literal /}z/*. By default no
     * artifacts are excluded.
     * 
     */
    @Import(name="excludesPattern")
    private @Nullable Output<String> excludesPattern;

    /**
     * @return List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**{@literal /}z/*. By default no
     * artifacts are excluded.
     * 
     */
    public Optional<Output<String>> excludesPattern() {
        return Optional.ofNullable(this.excludesPattern);
    }

    /**
     * @deprecated
     * This field is not returned in a get payload but is offered on the UI. It&#39;s inserted here for inclusive and informational reasons. It does not function
     * 
     */
    @Deprecated /* This field is not returned in a get payload but is offered on the UI. It's inserted here for inclusive and informational reasons. It does not function */
    @Import(name="failedRetrievalCachePeriodSecs")
    private @Nullable Output<Integer> failedRetrievalCachePeriodSecs;

    /**
     * @deprecated
     * This field is not returned in a get payload but is offered on the UI. It&#39;s inserted here for inclusive and informational reasons. It does not function
     * 
     */
    @Deprecated /* This field is not returned in a get payload but is offered on the UI. It's inserted here for inclusive and informational reasons. It does not function */
    public Optional<Output<Integer>> failedRetrievalCachePeriodSecs() {
        return Optional.ofNullable(this.failedRetrievalCachePeriodSecs);
    }

    /**
     * When set, Artifactory will return an error to the client that causes the build to fail if there is a failure to
     * communicate with this repository.
     * 
     */
    @Import(name="hardFail")
    private @Nullable Output<Boolean> hardFail;

    /**
     * @return When set, Artifactory will return an error to the client that causes the build to fail if there is a failure to
     * communicate with this repository.
     * 
     */
    public Optional<Output<Boolean>> hardFail() {
        return Optional.ofNullable(this.hardFail);
    }

    /**
     * List of artifact patterns to include when evaluating artifact requests in the form of x/y/**{@literal /}z/*. When used, only
     * artifacts matching one of the include patterns are served. By default, all artifacts are included (**{@literal /}*).
     * 
     */
    @Import(name="includesPattern")
    private @Nullable Output<String> includesPattern;

    /**
     * @return List of artifact patterns to include when evaluating artifact requests in the form of x/y/**{@literal /}z/*. When used, only
     * artifacts matching one of the include patterns are served. By default, all artifacts are included (**{@literal /}*).
     * 
     */
    public Optional<Output<String>> includesPattern() {
        return Optional.ofNullable(this.includesPattern);
    }

    /**
     * A mandatory identifier for the repository that must be unique. It cannot begin with a number or
     * contain spaces or special characters.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return A mandatory identifier for the repository that must be unique. It cannot begin with a number or
     * contain spaces or special characters.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * Lists the items of remote folders in simple and list browsing. The remote content is cached according to the value of
     * the &#39;Retrieval Cache Period&#39;. Default value is &#39;false&#39;.
     * 
     */
    @Import(name="listRemoteFolderItems")
    private @Nullable Output<Boolean> listRemoteFolderItems;

    /**
     * @return Lists the items of remote folders in simple and list browsing. The remote content is cached according to the value of
     * the &#39;Retrieval Cache Period&#39;. Default value is &#39;false&#39;.
     * 
     */
    public Optional<Output<Boolean>> listRemoteFolderItems() {
        return Optional.ofNullable(this.listRemoteFolderItems);
    }

    /**
     * The local address to be used when creating connections. Useful for specifying the interface to use on systems with
     * multiple network interfaces.
     * 
     */
    @Import(name="localAddress")
    private @Nullable Output<String> localAddress;

    /**
     * @return The local address to be used when creating connections. Useful for specifying the interface to use on systems with
     * multiple network interfaces.
     * 
     */
    public Optional<Output<String>> localAddress() {
        return Optional.ofNullable(this.localAddress);
    }

    /**
     * The set of mime types that should override the block_mismatching_mime_types setting. Eg:
     * &#34;application/json,application/xml&#34;. Default value is empty.
     * 
     */
    @Import(name="mismatchingMimeTypesOverrideList")
    private @Nullable Output<String> mismatchingMimeTypesOverrideList;

    /**
     * @return The set of mime types that should override the block_mismatching_mime_types setting. Eg:
     * &#34;application/json,application/xml&#34;. Default value is empty.
     * 
     */
    public Optional<Output<String>> mismatchingMimeTypesOverrideList() {
        return Optional.ofNullable(this.mismatchingMimeTypesOverrideList);
    }

    /**
     * The number of seconds to cache artifact retrieval misses (artifact not found). A value of 0 indicates no caching.
     * 
     */
    @Import(name="missedCachePeriodSeconds")
    private @Nullable Output<Integer> missedCachePeriodSeconds;

    /**
     * @return The number of seconds to cache artifact retrieval misses (artifact not found). A value of 0 indicates no caching.
     * 
     */
    public Optional<Output<Integer>> missedCachePeriodSeconds() {
        return Optional.ofNullable(this.missedCachePeriodSeconds);
    }

    @Import(name="notes")
    private @Nullable Output<String> notes;

    public Optional<Output<String>> notes() {
        return Optional.ofNullable(this.notes);
    }

    /**
     * If set, Artifactory does not try to fetch remote artifacts. Only locally-cached artifacts are retrieved.
     * 
     */
    @Import(name="offline")
    private @Nullable Output<Boolean> offline;

    /**
     * @return If set, Artifactory does not try to fetch remote artifacts. Only locally-cached artifacts are retrieved.
     * 
     */
    public Optional<Output<Boolean>> offline() {
        return Optional.ofNullable(this.offline);
    }

    @Import(name="packageType")
    private @Nullable Output<String> packageType;

    public Optional<Output<String>> packageType() {
        return Optional.ofNullable(this.packageType);
    }

    @Import(name="password")
    private @Nullable Output<String> password;

    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Setting repositories with priority will cause metadata to be merged only from repositories set with this field
     * 
     */
    @Import(name="priorityResolution")
    private @Nullable Output<Boolean> priorityResolution;

    /**
     * @return Setting repositories with priority will cause metadata to be merged only from repositories set with this field
     * 
     */
    public Optional<Output<Boolean>> priorityResolution() {
        return Optional.ofNullable(this.priorityResolution);
    }

    /**
     * Project environment for assigning this repository to. Allow values: &#34;DEV&#34; or &#34;PROD&#34;
     * 
     */
    @Import(name="projectEnvironments")
    private @Nullable Output<List<String>> projectEnvironments;

    /**
     * @return Project environment for assigning this repository to. Allow values: &#34;DEV&#34; or &#34;PROD&#34;
     * 
     */
    public Optional<Output<List<String>>> projectEnvironments() {
        return Optional.ofNullable(this.projectEnvironments);
    }

    /**
     * Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric characters. When assigning
     * repository to a project, repository key must be prefixed with project key, separated by a dash.
     * 
     */
    @Import(name="projectKey")
    private @Nullable Output<String> projectKey;

    /**
     * @return Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric characters. When assigning
     * repository to a project, repository key must be prefixed with project key, separated by a dash.
     * 
     */
    public Optional<Output<String>> projectKey() {
        return Optional.ofNullable(this.projectKey);
    }

    /**
     * When set, if query params are included in the request to Artifactory, they will be passed on to the remote repository.
     * 
     */
    @Import(name="propagateQueryParams")
    private @Nullable Output<Boolean> propagateQueryParams;

    /**
     * @return When set, if query params are included in the request to Artifactory, they will be passed on to the remote repository.
     * 
     */
    public Optional<Output<Boolean>> propagateQueryParams() {
        return Optional.ofNullable(this.propagateQueryParams);
    }

    /**
     * List of property set names
     * 
     */
    @Import(name="propertySets")
    private @Nullable Output<List<String>> propertySets;

    /**
     * @return List of property set names
     * 
     */
    public Optional<Output<List<String>>> propertySets() {
        return Optional.ofNullable(this.propertySets);
    }

    /**
     * Proxy key from Artifactory Proxies settings
     * 
     */
    @Import(name="proxy")
    private @Nullable Output<String> proxy;

    /**
     * @return Proxy key from Artifactory Proxies settings
     * 
     */
    public Optional<Output<String>> proxy() {
        return Optional.ofNullable(this.proxy);
    }

    /**
     * Repository layout key for the remote layout mapping
     * 
     */
    @Import(name="remoteRepoLayoutRef")
    private @Nullable Output<String> remoteRepoLayoutRef;

    /**
     * @return Repository layout key for the remote layout mapping
     * 
     */
    public Optional<Output<String>> remoteRepoLayoutRef() {
        return Optional.ofNullable(this.remoteRepoLayoutRef);
    }

    /**
     * Repository layout key for the local repository
     * 
     */
    @Import(name="repoLayoutRef")
    private @Nullable Output<String> repoLayoutRef;

    /**
     * @return Repository layout key for the local repository
     * 
     */
    public Optional<Output<String>> repoLayoutRef() {
        return Optional.ofNullable(this.repoLayoutRef);
    }

    /**
     * The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.
     * 
     */
    @Import(name="retrievalCachePeriodSeconds")
    private @Nullable Output<Integer> retrievalCachePeriodSeconds;

    /**
     * @return The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.
     * 
     */
    public Optional<Output<Integer>> retrievalCachePeriodSeconds() {
        return Optional.ofNullable(this.retrievalCachePeriodSeconds);
    }

    @Import(name="shareConfiguration")
    private @Nullable Output<Boolean> shareConfiguration;

    public Optional<Output<Boolean>> shareConfiguration() {
        return Optional.ofNullable(this.shareConfiguration);
    }

    /**
     * Network timeout (in ms) to use when establishing a connection and for unanswered requests. Timing out on a network
     * operation is considered a retrieval failure.
     * 
     */
    @Import(name="socketTimeoutMillis")
    private @Nullable Output<Integer> socketTimeoutMillis;

    /**
     * @return Network timeout (in ms) to use when establishing a connection and for unanswered requests. Timing out on a network
     * operation is considered a retrieval failure.
     * 
     */
    public Optional<Output<Integer>> socketTimeoutMillis() {
        return Optional.ofNullable(this.socketTimeoutMillis);
    }

    /**
     * When set, the repository should store cached artifacts locally. When not set, artifacts are not stored locally, and
     * direct repository-to-client streaming is used. This can be useful for multi-server setups over a high-speed LAN, with
     * one Artifactory caching certain data on central storage, and streaming it directly to satellite pass-though Artifactory
     * servers.
     * 
     */
    @Import(name="storeArtifactsLocally")
    private @Nullable Output<Boolean> storeArtifactsLocally;

    /**
     * @return When set, the repository should store cached artifacts locally. When not set, artifacts are not stored locally, and
     * direct repository-to-client streaming is used. This can be useful for multi-server setups over a high-speed LAN, with
     * one Artifactory caching certain data on central storage, and streaming it directly to satellite pass-though Artifactory
     * servers.
     * 
     */
    public Optional<Output<Boolean>> storeArtifactsLocally() {
        return Optional.ofNullable(this.storeArtifactsLocally);
    }

    /**
     * When set, remote artifacts are fetched along with their properties.
     * 
     */
    @Import(name="synchronizeProperties")
    private @Nullable Output<Boolean> synchronizeProperties;

    /**
     * @return When set, remote artifacts are fetched along with their properties.
     * 
     */
    public Optional<Output<Boolean>> synchronizeProperties() {
        return Optional.ofNullable(this.synchronizeProperties);
    }

    /**
     * The base URL of the Provider&#39;s storage API. When using Smart remote repositories, set the URL to
     * &lt;base_Artifactory_URL&gt;/api/terraform/repokey/providers. Default value in UI is https://releases.hashicorp.com
     * 
     */
    @Import(name="terraformProvidersUrl")
    private @Nullable Output<String> terraformProvidersUrl;

    /**
     * @return The base URL of the Provider&#39;s storage API. When using Smart remote repositories, set the URL to
     * &lt;base_Artifactory_URL&gt;/api/terraform/repokey/providers. Default value in UI is https://releases.hashicorp.com
     * 
     */
    public Optional<Output<String>> terraformProvidersUrl() {
        return Optional.ofNullable(this.terraformProvidersUrl);
    }

    /**
     * The base URL of the registry API. When using Smart Remote Repositories, set the URL to
     * &lt;base_Artifactory_URL&gt;/api/terraform/repokey. Default value in UI is https://registry.terraform.io
     * 
     */
    @Import(name="terraformRegistryUrl")
    private @Nullable Output<String> terraformRegistryUrl;

    /**
     * @return The base URL of the registry API. When using Smart Remote Repositories, set the URL to
     * &lt;base_Artifactory_URL&gt;/api/terraform/repokey. Default value in UI is https://registry.terraform.io
     * 
     */
    public Optional<Output<String>> terraformRegistryUrl() {
        return Optional.ofNullable(this.terraformRegistryUrl);
    }

    @Import(name="unusedArtifactsCleanupPeriodEnabled")
    private @Nullable Output<Boolean> unusedArtifactsCleanupPeriodEnabled;

    public Optional<Output<Boolean>> unusedArtifactsCleanupPeriodEnabled() {
        return Optional.ofNullable(this.unusedArtifactsCleanupPeriodEnabled);
    }

    /**
     * The number of hours to wait before an artifact is deemed &#34;unused&#34; and eligible for cleanup from the repository. A value
     * of 0 means automatic cleanup of cached artifacts is disabled.
     * 
     */
    @Import(name="unusedArtifactsCleanupPeriodHours")
    private @Nullable Output<Integer> unusedArtifactsCleanupPeriodHours;

    /**
     * @return The number of hours to wait before an artifact is deemed &#34;unused&#34; and eligible for cleanup from the repository. A value
     * of 0 means automatic cleanup of cached artifacts is disabled.
     * 
     */
    public Optional<Output<Integer>> unusedArtifactsCleanupPeriodHours() {
        return Optional.ofNullable(this.unusedArtifactsCleanupPeriodHours);
    }

    /**
     * The base URL of the Module storage API.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return The base URL of the Module storage API.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    @Import(name="username")
    private @Nullable Output<String> username;

    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    /**
     * Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
     * Xray settings.
     * 
     */
    @Import(name="xrayIndex")
    private @Nullable Output<Boolean> xrayIndex;

    /**
     * @return Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
     * Xray settings.
     * 
     */
    public Optional<Output<Boolean>> xrayIndex() {
        return Optional.ofNullable(this.xrayIndex);
    }

    private RemoteTerraformRepositoryState() {}

    private RemoteTerraformRepositoryState(RemoteTerraformRepositoryState $) {
        this.allowAnyHostAuth = $.allowAnyHostAuth;
        this.assumedOfflinePeriodSecs = $.assumedOfflinePeriodSecs;
        this.blackedOut = $.blackedOut;
        this.blockMismatchingMimeTypes = $.blockMismatchingMimeTypes;
        this.bypassHeadRequests = $.bypassHeadRequests;
        this.clientTlsCertificate = $.clientTlsCertificate;
        this.contentSynchronisation = $.contentSynchronisation;
        this.description = $.description;
        this.enableCookieManagement = $.enableCookieManagement;
        this.excludesPattern = $.excludesPattern;
        this.failedRetrievalCachePeriodSecs = $.failedRetrievalCachePeriodSecs;
        this.hardFail = $.hardFail;
        this.includesPattern = $.includesPattern;
        this.key = $.key;
        this.listRemoteFolderItems = $.listRemoteFolderItems;
        this.localAddress = $.localAddress;
        this.mismatchingMimeTypesOverrideList = $.mismatchingMimeTypesOverrideList;
        this.missedCachePeriodSeconds = $.missedCachePeriodSeconds;
        this.notes = $.notes;
        this.offline = $.offline;
        this.packageType = $.packageType;
        this.password = $.password;
        this.priorityResolution = $.priorityResolution;
        this.projectEnvironments = $.projectEnvironments;
        this.projectKey = $.projectKey;
        this.propagateQueryParams = $.propagateQueryParams;
        this.propertySets = $.propertySets;
        this.proxy = $.proxy;
        this.remoteRepoLayoutRef = $.remoteRepoLayoutRef;
        this.repoLayoutRef = $.repoLayoutRef;
        this.retrievalCachePeriodSeconds = $.retrievalCachePeriodSeconds;
        this.shareConfiguration = $.shareConfiguration;
        this.socketTimeoutMillis = $.socketTimeoutMillis;
        this.storeArtifactsLocally = $.storeArtifactsLocally;
        this.synchronizeProperties = $.synchronizeProperties;
        this.terraformProvidersUrl = $.terraformProvidersUrl;
        this.terraformRegistryUrl = $.terraformRegistryUrl;
        this.unusedArtifactsCleanupPeriodEnabled = $.unusedArtifactsCleanupPeriodEnabled;
        this.unusedArtifactsCleanupPeriodHours = $.unusedArtifactsCleanupPeriodHours;
        this.url = $.url;
        this.username = $.username;
        this.xrayIndex = $.xrayIndex;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RemoteTerraformRepositoryState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RemoteTerraformRepositoryState $;

        public Builder() {
            $ = new RemoteTerraformRepositoryState();
        }

        public Builder(RemoteTerraformRepositoryState defaults) {
            $ = new RemoteTerraformRepositoryState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowAnyHostAuth Also known as &#39;Lenient Host Authentication&#39;, Allow credentials of this repository to be used on requests redirected to
         * any other host.
         * 
         * @return builder
         * 
         */
        public Builder allowAnyHostAuth(@Nullable Output<Boolean> allowAnyHostAuth) {
            $.allowAnyHostAuth = allowAnyHostAuth;
            return this;
        }

        /**
         * @param allowAnyHostAuth Also known as &#39;Lenient Host Authentication&#39;, Allow credentials of this repository to be used on requests redirected to
         * any other host.
         * 
         * @return builder
         * 
         */
        public Builder allowAnyHostAuth(Boolean allowAnyHostAuth) {
            return allowAnyHostAuth(Output.of(allowAnyHostAuth));
        }

        /**
         * @param assumedOfflinePeriodSecs The number of seconds the repository stays in assumed offline state after a connection error. At the end of this time,
         * an online check is attempted in order to reset the offline status. A value of 0 means the repository is never assumed
         * offline. Default to 300.
         * 
         * @return builder
         * 
         */
        public Builder assumedOfflinePeriodSecs(@Nullable Output<Integer> assumedOfflinePeriodSecs) {
            $.assumedOfflinePeriodSecs = assumedOfflinePeriodSecs;
            return this;
        }

        /**
         * @param assumedOfflinePeriodSecs The number of seconds the repository stays in assumed offline state after a connection error. At the end of this time,
         * an online check is attempted in order to reset the offline status. A value of 0 means the repository is never assumed
         * offline. Default to 300.
         * 
         * @return builder
         * 
         */
        public Builder assumedOfflinePeriodSecs(Integer assumedOfflinePeriodSecs) {
            return assumedOfflinePeriodSecs(Output.of(assumedOfflinePeriodSecs));
        }

        /**
         * @param blackedOut (A.K.A &#39;Ignore Repository&#39; on the UI) When set, the repository or its local cache do not participate in artifact
         * resolution.
         * 
         * @return builder
         * 
         */
        public Builder blackedOut(@Nullable Output<Boolean> blackedOut) {
            $.blackedOut = blackedOut;
            return this;
        }

        /**
         * @param blackedOut (A.K.A &#39;Ignore Repository&#39; on the UI) When set, the repository or its local cache do not participate in artifact
         * resolution.
         * 
         * @return builder
         * 
         */
        public Builder blackedOut(Boolean blackedOut) {
            return blackedOut(Output.of(blackedOut));
        }

        /**
         * @param blockMismatchingMimeTypes Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,
         * HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,
         * Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
         * 
         * @return builder
         * 
         */
        public Builder blockMismatchingMimeTypes(@Nullable Output<Boolean> blockMismatchingMimeTypes) {
            $.blockMismatchingMimeTypes = blockMismatchingMimeTypes;
            return this;
        }

        /**
         * @param blockMismatchingMimeTypes Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,
         * HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,
         * Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
         * 
         * @return builder
         * 
         */
        public Builder blockMismatchingMimeTypes(Boolean blockMismatchingMimeTypes) {
            return blockMismatchingMimeTypes(Output.of(blockMismatchingMimeTypes));
        }

        /**
         * @param bypassHeadRequests Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,
         * HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,
         * Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
         * 
         * @return builder
         * 
         */
        public Builder bypassHeadRequests(@Nullable Output<Boolean> bypassHeadRequests) {
            $.bypassHeadRequests = bypassHeadRequests;
            return this;
        }

        /**
         * @param bypassHeadRequests Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,
         * HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,
         * Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
         * 
         * @return builder
         * 
         */
        public Builder bypassHeadRequests(Boolean bypassHeadRequests) {
            return bypassHeadRequests(Output.of(bypassHeadRequests));
        }

        public Builder clientTlsCertificate(@Nullable Output<String> clientTlsCertificate) {
            $.clientTlsCertificate = clientTlsCertificate;
            return this;
        }

        public Builder clientTlsCertificate(String clientTlsCertificate) {
            return clientTlsCertificate(Output.of(clientTlsCertificate));
        }

        public Builder contentSynchronisation(@Nullable Output<RemoteTerraformRepositoryContentSynchronisationArgs> contentSynchronisation) {
            $.contentSynchronisation = contentSynchronisation;
            return this;
        }

        public Builder contentSynchronisation(RemoteTerraformRepositoryContentSynchronisationArgs contentSynchronisation) {
            return contentSynchronisation(Output.of(contentSynchronisation));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enableCookieManagement Enables cookie management if the remote repository uses cookies to manage client state.
         * 
         * @return builder
         * 
         */
        public Builder enableCookieManagement(@Nullable Output<Boolean> enableCookieManagement) {
            $.enableCookieManagement = enableCookieManagement;
            return this;
        }

        /**
         * @param enableCookieManagement Enables cookie management if the remote repository uses cookies to manage client state.
         * 
         * @return builder
         * 
         */
        public Builder enableCookieManagement(Boolean enableCookieManagement) {
            return enableCookieManagement(Output.of(enableCookieManagement));
        }

        /**
         * @param excludesPattern List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**{@literal /}z/*. By default no
         * artifacts are excluded.
         * 
         * @return builder
         * 
         */
        public Builder excludesPattern(@Nullable Output<String> excludesPattern) {
            $.excludesPattern = excludesPattern;
            return this;
        }

        /**
         * @param excludesPattern List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**{@literal /}z/*. By default no
         * artifacts are excluded.
         * 
         * @return builder
         * 
         */
        public Builder excludesPattern(String excludesPattern) {
            return excludesPattern(Output.of(excludesPattern));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This field is not returned in a get payload but is offered on the UI. It&#39;s inserted here for inclusive and informational reasons. It does not function
         * 
         */
        @Deprecated /* This field is not returned in a get payload but is offered on the UI. It's inserted here for inclusive and informational reasons. It does not function */
        public Builder failedRetrievalCachePeriodSecs(@Nullable Output<Integer> failedRetrievalCachePeriodSecs) {
            $.failedRetrievalCachePeriodSecs = failedRetrievalCachePeriodSecs;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This field is not returned in a get payload but is offered on the UI. It&#39;s inserted here for inclusive and informational reasons. It does not function
         * 
         */
        @Deprecated /* This field is not returned in a get payload but is offered on the UI. It's inserted here for inclusive and informational reasons. It does not function */
        public Builder failedRetrievalCachePeriodSecs(Integer failedRetrievalCachePeriodSecs) {
            return failedRetrievalCachePeriodSecs(Output.of(failedRetrievalCachePeriodSecs));
        }

        /**
         * @param hardFail When set, Artifactory will return an error to the client that causes the build to fail if there is a failure to
         * communicate with this repository.
         * 
         * @return builder
         * 
         */
        public Builder hardFail(@Nullable Output<Boolean> hardFail) {
            $.hardFail = hardFail;
            return this;
        }

        /**
         * @param hardFail When set, Artifactory will return an error to the client that causes the build to fail if there is a failure to
         * communicate with this repository.
         * 
         * @return builder
         * 
         */
        public Builder hardFail(Boolean hardFail) {
            return hardFail(Output.of(hardFail));
        }

        /**
         * @param includesPattern List of artifact patterns to include when evaluating artifact requests in the form of x/y/**{@literal /}z/*. When used, only
         * artifacts matching one of the include patterns are served. By default, all artifacts are included (**{@literal /}*).
         * 
         * @return builder
         * 
         */
        public Builder includesPattern(@Nullable Output<String> includesPattern) {
            $.includesPattern = includesPattern;
            return this;
        }

        /**
         * @param includesPattern List of artifact patterns to include when evaluating artifact requests in the form of x/y/**{@literal /}z/*. When used, only
         * artifacts matching one of the include patterns are served. By default, all artifacts are included (**{@literal /}*).
         * 
         * @return builder
         * 
         */
        public Builder includesPattern(String includesPattern) {
            return includesPattern(Output.of(includesPattern));
        }

        /**
         * @param key A mandatory identifier for the repository that must be unique. It cannot begin with a number or
         * contain spaces or special characters.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key A mandatory identifier for the repository that must be unique. It cannot begin with a number or
         * contain spaces or special characters.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param listRemoteFolderItems Lists the items of remote folders in simple and list browsing. The remote content is cached according to the value of
         * the &#39;Retrieval Cache Period&#39;. Default value is &#39;false&#39;.
         * 
         * @return builder
         * 
         */
        public Builder listRemoteFolderItems(@Nullable Output<Boolean> listRemoteFolderItems) {
            $.listRemoteFolderItems = listRemoteFolderItems;
            return this;
        }

        /**
         * @param listRemoteFolderItems Lists the items of remote folders in simple and list browsing. The remote content is cached according to the value of
         * the &#39;Retrieval Cache Period&#39;. Default value is &#39;false&#39;.
         * 
         * @return builder
         * 
         */
        public Builder listRemoteFolderItems(Boolean listRemoteFolderItems) {
            return listRemoteFolderItems(Output.of(listRemoteFolderItems));
        }

        /**
         * @param localAddress The local address to be used when creating connections. Useful for specifying the interface to use on systems with
         * multiple network interfaces.
         * 
         * @return builder
         * 
         */
        public Builder localAddress(@Nullable Output<String> localAddress) {
            $.localAddress = localAddress;
            return this;
        }

        /**
         * @param localAddress The local address to be used when creating connections. Useful for specifying the interface to use on systems with
         * multiple network interfaces.
         * 
         * @return builder
         * 
         */
        public Builder localAddress(String localAddress) {
            return localAddress(Output.of(localAddress));
        }

        /**
         * @param mismatchingMimeTypesOverrideList The set of mime types that should override the block_mismatching_mime_types setting. Eg:
         * &#34;application/json,application/xml&#34;. Default value is empty.
         * 
         * @return builder
         * 
         */
        public Builder mismatchingMimeTypesOverrideList(@Nullable Output<String> mismatchingMimeTypesOverrideList) {
            $.mismatchingMimeTypesOverrideList = mismatchingMimeTypesOverrideList;
            return this;
        }

        /**
         * @param mismatchingMimeTypesOverrideList The set of mime types that should override the block_mismatching_mime_types setting. Eg:
         * &#34;application/json,application/xml&#34;. Default value is empty.
         * 
         * @return builder
         * 
         */
        public Builder mismatchingMimeTypesOverrideList(String mismatchingMimeTypesOverrideList) {
            return mismatchingMimeTypesOverrideList(Output.of(mismatchingMimeTypesOverrideList));
        }

        /**
         * @param missedCachePeriodSeconds The number of seconds to cache artifact retrieval misses (artifact not found). A value of 0 indicates no caching.
         * 
         * @return builder
         * 
         */
        public Builder missedCachePeriodSeconds(@Nullable Output<Integer> missedCachePeriodSeconds) {
            $.missedCachePeriodSeconds = missedCachePeriodSeconds;
            return this;
        }

        /**
         * @param missedCachePeriodSeconds The number of seconds to cache artifact retrieval misses (artifact not found). A value of 0 indicates no caching.
         * 
         * @return builder
         * 
         */
        public Builder missedCachePeriodSeconds(Integer missedCachePeriodSeconds) {
            return missedCachePeriodSeconds(Output.of(missedCachePeriodSeconds));
        }

        public Builder notes(@Nullable Output<String> notes) {
            $.notes = notes;
            return this;
        }

        public Builder notes(String notes) {
            return notes(Output.of(notes));
        }

        /**
         * @param offline If set, Artifactory does not try to fetch remote artifacts. Only locally-cached artifacts are retrieved.
         * 
         * @return builder
         * 
         */
        public Builder offline(@Nullable Output<Boolean> offline) {
            $.offline = offline;
            return this;
        }

        /**
         * @param offline If set, Artifactory does not try to fetch remote artifacts. Only locally-cached artifacts are retrieved.
         * 
         * @return builder
         * 
         */
        public Builder offline(Boolean offline) {
            return offline(Output.of(offline));
        }

        public Builder packageType(@Nullable Output<String> packageType) {
            $.packageType = packageType;
            return this;
        }

        public Builder packageType(String packageType) {
            return packageType(Output.of(packageType));
        }

        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param priorityResolution Setting repositories with priority will cause metadata to be merged only from repositories set with this field
         * 
         * @return builder
         * 
         */
        public Builder priorityResolution(@Nullable Output<Boolean> priorityResolution) {
            $.priorityResolution = priorityResolution;
            return this;
        }

        /**
         * @param priorityResolution Setting repositories with priority will cause metadata to be merged only from repositories set with this field
         * 
         * @return builder
         * 
         */
        public Builder priorityResolution(Boolean priorityResolution) {
            return priorityResolution(Output.of(priorityResolution));
        }

        /**
         * @param projectEnvironments Project environment for assigning this repository to. Allow values: &#34;DEV&#34; or &#34;PROD&#34;
         * 
         * @return builder
         * 
         */
        public Builder projectEnvironments(@Nullable Output<List<String>> projectEnvironments) {
            $.projectEnvironments = projectEnvironments;
            return this;
        }

        /**
         * @param projectEnvironments Project environment for assigning this repository to. Allow values: &#34;DEV&#34; or &#34;PROD&#34;
         * 
         * @return builder
         * 
         */
        public Builder projectEnvironments(List<String> projectEnvironments) {
            return projectEnvironments(Output.of(projectEnvironments));
        }

        /**
         * @param projectEnvironments Project environment for assigning this repository to. Allow values: &#34;DEV&#34; or &#34;PROD&#34;
         * 
         * @return builder
         * 
         */
        public Builder projectEnvironments(String... projectEnvironments) {
            return projectEnvironments(List.of(projectEnvironments));
        }

        /**
         * @param projectKey Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric characters. When assigning
         * repository to a project, repository key must be prefixed with project key, separated by a dash.
         * 
         * @return builder
         * 
         */
        public Builder projectKey(@Nullable Output<String> projectKey) {
            $.projectKey = projectKey;
            return this;
        }

        /**
         * @param projectKey Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric characters. When assigning
         * repository to a project, repository key must be prefixed with project key, separated by a dash.
         * 
         * @return builder
         * 
         */
        public Builder projectKey(String projectKey) {
            return projectKey(Output.of(projectKey));
        }

        /**
         * @param propagateQueryParams When set, if query params are included in the request to Artifactory, they will be passed on to the remote repository.
         * 
         * @return builder
         * 
         */
        public Builder propagateQueryParams(@Nullable Output<Boolean> propagateQueryParams) {
            $.propagateQueryParams = propagateQueryParams;
            return this;
        }

        /**
         * @param propagateQueryParams When set, if query params are included in the request to Artifactory, they will be passed on to the remote repository.
         * 
         * @return builder
         * 
         */
        public Builder propagateQueryParams(Boolean propagateQueryParams) {
            return propagateQueryParams(Output.of(propagateQueryParams));
        }

        /**
         * @param propertySets List of property set names
         * 
         * @return builder
         * 
         */
        public Builder propertySets(@Nullable Output<List<String>> propertySets) {
            $.propertySets = propertySets;
            return this;
        }

        /**
         * @param propertySets List of property set names
         * 
         * @return builder
         * 
         */
        public Builder propertySets(List<String> propertySets) {
            return propertySets(Output.of(propertySets));
        }

        /**
         * @param propertySets List of property set names
         * 
         * @return builder
         * 
         */
        public Builder propertySets(String... propertySets) {
            return propertySets(List.of(propertySets));
        }

        /**
         * @param proxy Proxy key from Artifactory Proxies settings
         * 
         * @return builder
         * 
         */
        public Builder proxy(@Nullable Output<String> proxy) {
            $.proxy = proxy;
            return this;
        }

        /**
         * @param proxy Proxy key from Artifactory Proxies settings
         * 
         * @return builder
         * 
         */
        public Builder proxy(String proxy) {
            return proxy(Output.of(proxy));
        }

        /**
         * @param remoteRepoLayoutRef Repository layout key for the remote layout mapping
         * 
         * @return builder
         * 
         */
        public Builder remoteRepoLayoutRef(@Nullable Output<String> remoteRepoLayoutRef) {
            $.remoteRepoLayoutRef = remoteRepoLayoutRef;
            return this;
        }

        /**
         * @param remoteRepoLayoutRef Repository layout key for the remote layout mapping
         * 
         * @return builder
         * 
         */
        public Builder remoteRepoLayoutRef(String remoteRepoLayoutRef) {
            return remoteRepoLayoutRef(Output.of(remoteRepoLayoutRef));
        }

        /**
         * @param repoLayoutRef Repository layout key for the local repository
         * 
         * @return builder
         * 
         */
        public Builder repoLayoutRef(@Nullable Output<String> repoLayoutRef) {
            $.repoLayoutRef = repoLayoutRef;
            return this;
        }

        /**
         * @param repoLayoutRef Repository layout key for the local repository
         * 
         * @return builder
         * 
         */
        public Builder repoLayoutRef(String repoLayoutRef) {
            return repoLayoutRef(Output.of(repoLayoutRef));
        }

        /**
         * @param retrievalCachePeriodSeconds The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.
         * 
         * @return builder
         * 
         */
        public Builder retrievalCachePeriodSeconds(@Nullable Output<Integer> retrievalCachePeriodSeconds) {
            $.retrievalCachePeriodSeconds = retrievalCachePeriodSeconds;
            return this;
        }

        /**
         * @param retrievalCachePeriodSeconds The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.
         * 
         * @return builder
         * 
         */
        public Builder retrievalCachePeriodSeconds(Integer retrievalCachePeriodSeconds) {
            return retrievalCachePeriodSeconds(Output.of(retrievalCachePeriodSeconds));
        }

        public Builder shareConfiguration(@Nullable Output<Boolean> shareConfiguration) {
            $.shareConfiguration = shareConfiguration;
            return this;
        }

        public Builder shareConfiguration(Boolean shareConfiguration) {
            return shareConfiguration(Output.of(shareConfiguration));
        }

        /**
         * @param socketTimeoutMillis Network timeout (in ms) to use when establishing a connection and for unanswered requests. Timing out on a network
         * operation is considered a retrieval failure.
         * 
         * @return builder
         * 
         */
        public Builder socketTimeoutMillis(@Nullable Output<Integer> socketTimeoutMillis) {
            $.socketTimeoutMillis = socketTimeoutMillis;
            return this;
        }

        /**
         * @param socketTimeoutMillis Network timeout (in ms) to use when establishing a connection and for unanswered requests. Timing out on a network
         * operation is considered a retrieval failure.
         * 
         * @return builder
         * 
         */
        public Builder socketTimeoutMillis(Integer socketTimeoutMillis) {
            return socketTimeoutMillis(Output.of(socketTimeoutMillis));
        }

        /**
         * @param storeArtifactsLocally When set, the repository should store cached artifacts locally. When not set, artifacts are not stored locally, and
         * direct repository-to-client streaming is used. This can be useful for multi-server setups over a high-speed LAN, with
         * one Artifactory caching certain data on central storage, and streaming it directly to satellite pass-though Artifactory
         * servers.
         * 
         * @return builder
         * 
         */
        public Builder storeArtifactsLocally(@Nullable Output<Boolean> storeArtifactsLocally) {
            $.storeArtifactsLocally = storeArtifactsLocally;
            return this;
        }

        /**
         * @param storeArtifactsLocally When set, the repository should store cached artifacts locally. When not set, artifacts are not stored locally, and
         * direct repository-to-client streaming is used. This can be useful for multi-server setups over a high-speed LAN, with
         * one Artifactory caching certain data on central storage, and streaming it directly to satellite pass-though Artifactory
         * servers.
         * 
         * @return builder
         * 
         */
        public Builder storeArtifactsLocally(Boolean storeArtifactsLocally) {
            return storeArtifactsLocally(Output.of(storeArtifactsLocally));
        }

        /**
         * @param synchronizeProperties When set, remote artifacts are fetched along with their properties.
         * 
         * @return builder
         * 
         */
        public Builder synchronizeProperties(@Nullable Output<Boolean> synchronizeProperties) {
            $.synchronizeProperties = synchronizeProperties;
            return this;
        }

        /**
         * @param synchronizeProperties When set, remote artifacts are fetched along with their properties.
         * 
         * @return builder
         * 
         */
        public Builder synchronizeProperties(Boolean synchronizeProperties) {
            return synchronizeProperties(Output.of(synchronizeProperties));
        }

        /**
         * @param terraformProvidersUrl The base URL of the Provider&#39;s storage API. When using Smart remote repositories, set the URL to
         * &lt;base_Artifactory_URL&gt;/api/terraform/repokey/providers. Default value in UI is https://releases.hashicorp.com
         * 
         * @return builder
         * 
         */
        public Builder terraformProvidersUrl(@Nullable Output<String> terraformProvidersUrl) {
            $.terraformProvidersUrl = terraformProvidersUrl;
            return this;
        }

        /**
         * @param terraformProvidersUrl The base URL of the Provider&#39;s storage API. When using Smart remote repositories, set the URL to
         * &lt;base_Artifactory_URL&gt;/api/terraform/repokey/providers. Default value in UI is https://releases.hashicorp.com
         * 
         * @return builder
         * 
         */
        public Builder terraformProvidersUrl(String terraformProvidersUrl) {
            return terraformProvidersUrl(Output.of(terraformProvidersUrl));
        }

        /**
         * @param terraformRegistryUrl The base URL of the registry API. When using Smart Remote Repositories, set the URL to
         * &lt;base_Artifactory_URL&gt;/api/terraform/repokey. Default value in UI is https://registry.terraform.io
         * 
         * @return builder
         * 
         */
        public Builder terraformRegistryUrl(@Nullable Output<String> terraformRegistryUrl) {
            $.terraformRegistryUrl = terraformRegistryUrl;
            return this;
        }

        /**
         * @param terraformRegistryUrl The base URL of the registry API. When using Smart Remote Repositories, set the URL to
         * &lt;base_Artifactory_URL&gt;/api/terraform/repokey. Default value in UI is https://registry.terraform.io
         * 
         * @return builder
         * 
         */
        public Builder terraformRegistryUrl(String terraformRegistryUrl) {
            return terraformRegistryUrl(Output.of(terraformRegistryUrl));
        }

        public Builder unusedArtifactsCleanupPeriodEnabled(@Nullable Output<Boolean> unusedArtifactsCleanupPeriodEnabled) {
            $.unusedArtifactsCleanupPeriodEnabled = unusedArtifactsCleanupPeriodEnabled;
            return this;
        }

        public Builder unusedArtifactsCleanupPeriodEnabled(Boolean unusedArtifactsCleanupPeriodEnabled) {
            return unusedArtifactsCleanupPeriodEnabled(Output.of(unusedArtifactsCleanupPeriodEnabled));
        }

        /**
         * @param unusedArtifactsCleanupPeriodHours The number of hours to wait before an artifact is deemed &#34;unused&#34; and eligible for cleanup from the repository. A value
         * of 0 means automatic cleanup of cached artifacts is disabled.
         * 
         * @return builder
         * 
         */
        public Builder unusedArtifactsCleanupPeriodHours(@Nullable Output<Integer> unusedArtifactsCleanupPeriodHours) {
            $.unusedArtifactsCleanupPeriodHours = unusedArtifactsCleanupPeriodHours;
            return this;
        }

        /**
         * @param unusedArtifactsCleanupPeriodHours The number of hours to wait before an artifact is deemed &#34;unused&#34; and eligible for cleanup from the repository. A value
         * of 0 means automatic cleanup of cached artifacts is disabled.
         * 
         * @return builder
         * 
         */
        public Builder unusedArtifactsCleanupPeriodHours(Integer unusedArtifactsCleanupPeriodHours) {
            return unusedArtifactsCleanupPeriodHours(Output.of(unusedArtifactsCleanupPeriodHours));
        }

        /**
         * @param url The base URL of the Module storage API.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The base URL of the Module storage API.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        public Builder username(String username) {
            return username(Output.of(username));
        }

        /**
         * @param xrayIndex Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
         * Xray settings.
         * 
         * @return builder
         * 
         */
        public Builder xrayIndex(@Nullable Output<Boolean> xrayIndex) {
            $.xrayIndex = xrayIndex;
            return this;
        }

        /**
         * @param xrayIndex Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
         * Xray settings.
         * 
         * @return builder
         * 
         */
        public Builder xrayIndex(Boolean xrayIndex) {
            return xrayIndex(Output.of(xrayIndex));
        }

        public RemoteTerraformRepositoryState build() {
            return $;
        }
    }

}
