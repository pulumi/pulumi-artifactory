// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory;

import com.pulumi.artifactory.PackageCleanupPolicyArgs;
import com.pulumi.artifactory.Utilities;
import com.pulumi.artifactory.inputs.PackageCleanupPolicyState;
import com.pulumi.artifactory.outputs.PackageCleanupPolicySearchCriteria;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Import
 * 
 * ```sh
 * $ pulumi import artifactory:index/packageCleanupPolicy:PackageCleanupPolicy my-cleanup-policy my-policy
 * ```
 * 
 * ```sh
 * $ pulumi import artifactory:index/packageCleanupPolicy:PackageCleanupPolicy my-cleanup-policy my-policy:myproj
 * ```
 * 
 */
@ResourceType(type="artifactory:index/packageCleanupPolicy:PackageCleanupPolicy")
public class PackageCleanupPolicy extends com.pulumi.resources.CustomResource {
    /**
     * The cron expression that determines when the policy is run, However if left empty the policy will not run automatically and can only be triggered manually.
     * 
     */
    @Export(name="cronExpression", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> cronExpression;

    /**
     * @return The cron expression that determines when the policy is run, However if left empty the policy will not run automatically and can only be triggered manually.
     * 
     */
    public Output<Optional<String>> cronExpression() {
        return Codegen.optional(this.cronExpression);
    }
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The maximum duration (in minutes) for policy execution, after which the policy will stop running even if not completed. While setting a maximum run duration for a policy is useful for adhering to a strict cleanup schedule, it can cause the policy to stop before completion.
     * 
     */
    @Export(name="durationInMinutes", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> durationInMinutes;

    /**
     * @return The maximum duration (in minutes) for policy execution, after which the policy will stop running even if not completed. While setting a maximum run duration for a policy is useful for adhering to a strict cleanup schedule, it can cause the policy to stop before completion.
     * 
     */
    public Output<Optional<Integer>> durationInMinutes() {
        return Codegen.optional(this.durationInMinutes);
    }
    /**
     * A cleanup policy must be created inactive. But if used it must be set to `false`. If set to `true` when calling this API, the API call will fail and an error message is received. Defaults to `true`
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enabled;

    /**
     * @return A cleanup policy must be created inactive. But if used it must be set to `false`. If set to `true` when calling this API, the API call will fail and an error message is received. Defaults to `true`
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }
    /**
     * An ID that is used to identify the cleanup policy. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
     * 
     */
    @Export(name="key", refs={String.class}, tree="[0]")
    private Output<String> key;

    /**
     * @return An ID that is used to identify the cleanup policy. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
     * 
     */
    public Output<String> key() {
        return this.key;
    }
    @Export(name="searchCriteria", refs={PackageCleanupPolicySearchCriteria.class}, tree="[0]")
    private Output<PackageCleanupPolicySearchCriteria> searchCriteria;

    public Output<PackageCleanupPolicySearchCriteria> searchCriteria() {
        return this.searchCriteria;
    }
    /**
     * A true value means that when this policy is executed, packages will be permanently deleted. false means that when the policy is executed packages will be deleted to the Trash Can. Defaults to `false`.
     * 
     */
    @Export(name="skipTrashcan", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> skipTrashcan;

    /**
     * @return A true value means that when this policy is executed, packages will be permanently deleted. false means that when the policy is executed packages will be deleted to the Trash Can. Defaults to `false`.
     * 
     */
    public Output<Boolean> skipTrashcan() {
        return this.skipTrashcan;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public PackageCleanupPolicy(java.lang.String name) {
        this(name, PackageCleanupPolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public PackageCleanupPolicy(java.lang.String name, PackageCleanupPolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public PackageCleanupPolicy(java.lang.String name, PackageCleanupPolicyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("artifactory:index/packageCleanupPolicy:PackageCleanupPolicy", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private PackageCleanupPolicy(java.lang.String name, Output<java.lang.String> id, @Nullable PackageCleanupPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("artifactory:index/packageCleanupPolicy:PackageCleanupPolicy", name, state, makeResourceOptions(options, id), false);
    }

    private static PackageCleanupPolicyArgs makeArgs(PackageCleanupPolicyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? PackageCleanupPolicyArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static PackageCleanupPolicy get(java.lang.String name, Output<java.lang.String> id, @Nullable PackageCleanupPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new PackageCleanupPolicy(name, id, state, options);
    }
}
