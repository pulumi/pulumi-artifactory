// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProxyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProxyArgs Empty = new ProxyArgs();

    /**
     * The name of the proxy host.
     * 
     */
    @Import(name="host", required=true)
    private Output<String> host;

    /**
     * @return The name of the proxy host.
     * 
     */
    public Output<String> host() {
        return this.host;
    }

    /**
     * The unique ID of the proxy.
     * 
     */
    @Import(name="key", required=true)
    private Output<String> key;

    /**
     * @return The unique ID of the proxy.
     * 
     */
    public Output<String> key() {
        return this.key;
    }

    /**
     * The proxy domain/realm name.
     * 
     */
    @Import(name="ntDomain")
    private @Nullable Output<String> ntDomain;

    /**
     * @return The proxy domain/realm name.
     * 
     */
    public Optional<Output<String>> ntDomain() {
        return Optional.ofNullable(this.ntDomain);
    }

    /**
     * The computer name of the machine (the machine connecting to the NTLM proxy).
     * 
     */
    @Import(name="ntHost")
    private @Nullable Output<String> ntHost;

    /**
     * @return The computer name of the machine (the machine connecting to the NTLM proxy).
     * 
     */
    public Optional<Output<String>> ntHost() {
        return Optional.ofNullable(this.ntHost);
    }

    /**
     * The proxy password when authentication credentials are required.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The proxy password when authentication credentials are required.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * When set, this proxy will be the default proxy for new remote repositories and for internal HTTP requests issued by Artifactory. Will also be used as proxy for all other services in the platform (for example: Xray, Distribution, etc).
     * 
     */
    @Import(name="platformDefault")
    private @Nullable Output<Boolean> platformDefault;

    /**
     * @return When set, this proxy will be the default proxy for new remote repositories and for internal HTTP requests issued by Artifactory. Will also be used as proxy for all other services in the platform (for example: Xray, Distribution, etc).
     * 
     */
    public Optional<Output<Boolean>> platformDefault() {
        return Optional.ofNullable(this.platformDefault);
    }

    /**
     * The proxy port number.
     * 
     */
    @Import(name="port", required=true)
    private Output<Integer> port;

    /**
     * @return The proxy port number.
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }

    /**
     * An optional list of host names to which this proxy may redirect requests. The credentials defined for the proxy are reused by requests redirected to all of these hosts.
     * 
     */
    @Import(name="redirectToHosts")
    private @Nullable Output<List<String>> redirectToHosts;

    /**
     * @return An optional list of host names to which this proxy may redirect requests. The credentials defined for the proxy are reused by requests redirected to all of these hosts.
     * 
     */
    public Optional<Output<List<String>>> redirectToHosts() {
        return Optional.ofNullable(this.redirectToHosts);
    }

    /**
     * An optional list of services names to which this proxy be the default of. The options are `jfrt`, `jfmc`, `jfxr`, `jfds`.
     * 
     */
    @Import(name="services")
    private @Nullable Output<List<String>> services;

    /**
     * @return An optional list of services names to which this proxy be the default of. The options are `jfrt`, `jfmc`, `jfxr`, `jfds`.
     * 
     */
    public Optional<Output<List<String>>> services() {
        return Optional.ofNullable(this.services);
    }

    /**
     * The proxy username when authentication credentials are required.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return The proxy username when authentication credentials are required.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private ProxyArgs() {}

    private ProxyArgs(ProxyArgs $) {
        this.host = $.host;
        this.key = $.key;
        this.ntDomain = $.ntDomain;
        this.ntHost = $.ntHost;
        this.password = $.password;
        this.platformDefault = $.platformDefault;
        this.port = $.port;
        this.redirectToHosts = $.redirectToHosts;
        this.services = $.services;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProxyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProxyArgs $;

        public Builder() {
            $ = new ProxyArgs();
        }

        public Builder(ProxyArgs defaults) {
            $ = new ProxyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param host The name of the proxy host.
         * 
         * @return builder
         * 
         */
        public Builder host(Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host The name of the proxy host.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param key The unique ID of the proxy.
         * 
         * @return builder
         * 
         */
        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key The unique ID of the proxy.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param ntDomain The proxy domain/realm name.
         * 
         * @return builder
         * 
         */
        public Builder ntDomain(@Nullable Output<String> ntDomain) {
            $.ntDomain = ntDomain;
            return this;
        }

        /**
         * @param ntDomain The proxy domain/realm name.
         * 
         * @return builder
         * 
         */
        public Builder ntDomain(String ntDomain) {
            return ntDomain(Output.of(ntDomain));
        }

        /**
         * @param ntHost The computer name of the machine (the machine connecting to the NTLM proxy).
         * 
         * @return builder
         * 
         */
        public Builder ntHost(@Nullable Output<String> ntHost) {
            $.ntHost = ntHost;
            return this;
        }

        /**
         * @param ntHost The computer name of the machine (the machine connecting to the NTLM proxy).
         * 
         * @return builder
         * 
         */
        public Builder ntHost(String ntHost) {
            return ntHost(Output.of(ntHost));
        }

        /**
         * @param password The proxy password when authentication credentials are required.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The proxy password when authentication credentials are required.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param platformDefault When set, this proxy will be the default proxy for new remote repositories and for internal HTTP requests issued by Artifactory. Will also be used as proxy for all other services in the platform (for example: Xray, Distribution, etc).
         * 
         * @return builder
         * 
         */
        public Builder platformDefault(@Nullable Output<Boolean> platformDefault) {
            $.platformDefault = platformDefault;
            return this;
        }

        /**
         * @param platformDefault When set, this proxy will be the default proxy for new remote repositories and for internal HTTP requests issued by Artifactory. Will also be used as proxy for all other services in the platform (for example: Xray, Distribution, etc).
         * 
         * @return builder
         * 
         */
        public Builder platformDefault(Boolean platformDefault) {
            return platformDefault(Output.of(platformDefault));
        }

        /**
         * @param port The proxy port number.
         * 
         * @return builder
         * 
         */
        public Builder port(Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The proxy port number.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param redirectToHosts An optional list of host names to which this proxy may redirect requests. The credentials defined for the proxy are reused by requests redirected to all of these hosts.
         * 
         * @return builder
         * 
         */
        public Builder redirectToHosts(@Nullable Output<List<String>> redirectToHosts) {
            $.redirectToHosts = redirectToHosts;
            return this;
        }

        /**
         * @param redirectToHosts An optional list of host names to which this proxy may redirect requests. The credentials defined for the proxy are reused by requests redirected to all of these hosts.
         * 
         * @return builder
         * 
         */
        public Builder redirectToHosts(List<String> redirectToHosts) {
            return redirectToHosts(Output.of(redirectToHosts));
        }

        /**
         * @param redirectToHosts An optional list of host names to which this proxy may redirect requests. The credentials defined for the proxy are reused by requests redirected to all of these hosts.
         * 
         * @return builder
         * 
         */
        public Builder redirectToHosts(String... redirectToHosts) {
            return redirectToHosts(List.of(redirectToHosts));
        }

        /**
         * @param services An optional list of services names to which this proxy be the default of. The options are `jfrt`, `jfmc`, `jfxr`, `jfds`.
         * 
         * @return builder
         * 
         */
        public Builder services(@Nullable Output<List<String>> services) {
            $.services = services;
            return this;
        }

        /**
         * @param services An optional list of services names to which this proxy be the default of. The options are `jfrt`, `jfmc`, `jfxr`, `jfds`.
         * 
         * @return builder
         * 
         */
        public Builder services(List<String> services) {
            return services(Output.of(services));
        }

        /**
         * @param services An optional list of services names to which this proxy be the default of. The options are `jfrt`, `jfmc`, `jfxr`, `jfds`.
         * 
         * @return builder
         * 
         */
        public Builder services(String... services) {
            return services(List.of(services));
        }

        /**
         * @param username The proxy username when authentication credentials are required.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The proxy username when authentication credentials are required.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ProxyArgs build() {
            $.host = Objects.requireNonNull($.host, "expected parameter 'host' to be non-null");
            $.key = Objects.requireNonNull($.key, "expected parameter 'key' to be non-null");
            $.port = Objects.requireNonNull($.port, "expected parameter 'port' to be non-null");
            return $;
        }
    }

}
