// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.artifactory;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryLayoutArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryLayoutArgs Empty = new RepositoryLayoutArgs();

    /**
     * Please refer to: [Path
     * Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-ModulesandPathPatternsusedbyRepositoryLayouts)
     * in the Artifactory Wiki documentation.
     * 
     */
    @Import(name="artifactPathPattern", required=true)
    private Output<String> artifactPathPattern;

    /**
     * @return Please refer to: [Path
     * Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-ModulesandPathPatternsusedbyRepositoryLayouts)
     * in the Artifactory Wiki documentation.
     * 
     */
    public Output<String> artifactPathPattern() {
        return this.artifactPathPattern;
    }

    /**
     * Please refer to: [Descriptor Path
     * Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-DescriptorPathPatterns) in
     * the Artifactory Wiki documentation.
     * 
     */
    @Import(name="descriptorPathPattern")
    private @Nullable Output<String> descriptorPathPattern;

    /**
     * @return Please refer to: [Descriptor Path
     * Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-DescriptorPathPatterns) in
     * the Artifactory Wiki documentation.
     * 
     */
    public Optional<Output<String>> descriptorPathPattern() {
        return Optional.ofNullable(this.descriptorPathPattern);
    }

    /**
     * When set, &#39;descriptor_path_pattern&#39; will be used. Default to &#39;false&#39;.
     * 
     */
    @Import(name="distinctiveDescriptorPathPattern")
    private @Nullable Output<Boolean> distinctiveDescriptorPathPattern;

    /**
     * @return When set, &#39;descriptor_path_pattern&#39; will be used. Default to &#39;false&#39;.
     * 
     */
    public Optional<Output<Boolean>> distinctiveDescriptorPathPattern() {
        return Optional.ofNullable(this.distinctiveDescriptorPathPattern);
    }

    /**
     * A regular expression matching the integration revision string appearing in a file name as part of the artifact&#39;s path.
     * For example, &#39;SNAPSHOT|(?:(?:[0-9]{8}.[0-9]{6})-(?:[0-9]+))&#39;, in Maven. Note! Take care not to introduce any regexp
     * capturing groups within this expression. If not applicable use &#39;.*&#39;
     * 
     */
    @Import(name="fileIntegrationRevisionRegexp", required=true)
    private Output<String> fileIntegrationRevisionRegexp;

    /**
     * @return A regular expression matching the integration revision string appearing in a file name as part of the artifact&#39;s path.
     * For example, &#39;SNAPSHOT|(?:(?:[0-9]{8}.[0-9]{6})-(?:[0-9]+))&#39;, in Maven. Note! Take care not to introduce any regexp
     * capturing groups within this expression. If not applicable use &#39;.*&#39;
     * 
     */
    public Output<String> fileIntegrationRevisionRegexp() {
        return this.fileIntegrationRevisionRegexp;
    }

    /**
     * A regular expression matching the integration revision string appearing in a folder name as part of the artifact&#39;s path.
     * For example, &#39;SNAPSHOT&#39;, in Maven. Note! Take care not to introduce any regexp capturing groups within this expression.
     * If not applicable use &#39;.*&#39;
     * 
     */
    @Import(name="folderIntegrationRevisionRegexp", required=true)
    private Output<String> folderIntegrationRevisionRegexp;

    /**
     * @return A regular expression matching the integration revision string appearing in a folder name as part of the artifact&#39;s path.
     * For example, &#39;SNAPSHOT&#39;, in Maven. Note! Take care not to introduce any regexp capturing groups within this expression.
     * If not applicable use &#39;.*&#39;
     * 
     */
    public Output<String> folderIntegrationRevisionRegexp() {
        return this.folderIntegrationRevisionRegexp;
    }

    /**
     * Layout name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Layout name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private RepositoryLayoutArgs() {}

    private RepositoryLayoutArgs(RepositoryLayoutArgs $) {
        this.artifactPathPattern = $.artifactPathPattern;
        this.descriptorPathPattern = $.descriptorPathPattern;
        this.distinctiveDescriptorPathPattern = $.distinctiveDescriptorPathPattern;
        this.fileIntegrationRevisionRegexp = $.fileIntegrationRevisionRegexp;
        this.folderIntegrationRevisionRegexp = $.folderIntegrationRevisionRegexp;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryLayoutArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryLayoutArgs $;

        public Builder() {
            $ = new RepositoryLayoutArgs();
        }

        public Builder(RepositoryLayoutArgs defaults) {
            $ = new RepositoryLayoutArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param artifactPathPattern Please refer to: [Path
         * Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-ModulesandPathPatternsusedbyRepositoryLayouts)
         * in the Artifactory Wiki documentation.
         * 
         * @return builder
         * 
         */
        public Builder artifactPathPattern(Output<String> artifactPathPattern) {
            $.artifactPathPattern = artifactPathPattern;
            return this;
        }

        /**
         * @param artifactPathPattern Please refer to: [Path
         * Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-ModulesandPathPatternsusedbyRepositoryLayouts)
         * in the Artifactory Wiki documentation.
         * 
         * @return builder
         * 
         */
        public Builder artifactPathPattern(String artifactPathPattern) {
            return artifactPathPattern(Output.of(artifactPathPattern));
        }

        /**
         * @param descriptorPathPattern Please refer to: [Descriptor Path
         * Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-DescriptorPathPatterns) in
         * the Artifactory Wiki documentation.
         * 
         * @return builder
         * 
         */
        public Builder descriptorPathPattern(@Nullable Output<String> descriptorPathPattern) {
            $.descriptorPathPattern = descriptorPathPattern;
            return this;
        }

        /**
         * @param descriptorPathPattern Please refer to: [Descriptor Path
         * Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-DescriptorPathPatterns) in
         * the Artifactory Wiki documentation.
         * 
         * @return builder
         * 
         */
        public Builder descriptorPathPattern(String descriptorPathPattern) {
            return descriptorPathPattern(Output.of(descriptorPathPattern));
        }

        /**
         * @param distinctiveDescriptorPathPattern When set, &#39;descriptor_path_pattern&#39; will be used. Default to &#39;false&#39;.
         * 
         * @return builder
         * 
         */
        public Builder distinctiveDescriptorPathPattern(@Nullable Output<Boolean> distinctiveDescriptorPathPattern) {
            $.distinctiveDescriptorPathPattern = distinctiveDescriptorPathPattern;
            return this;
        }

        /**
         * @param distinctiveDescriptorPathPattern When set, &#39;descriptor_path_pattern&#39; will be used. Default to &#39;false&#39;.
         * 
         * @return builder
         * 
         */
        public Builder distinctiveDescriptorPathPattern(Boolean distinctiveDescriptorPathPattern) {
            return distinctiveDescriptorPathPattern(Output.of(distinctiveDescriptorPathPattern));
        }

        /**
         * @param fileIntegrationRevisionRegexp A regular expression matching the integration revision string appearing in a file name as part of the artifact&#39;s path.
         * For example, &#39;SNAPSHOT|(?:(?:[0-9]{8}.[0-9]{6})-(?:[0-9]+))&#39;, in Maven. Note! Take care not to introduce any regexp
         * capturing groups within this expression. If not applicable use &#39;.*&#39;
         * 
         * @return builder
         * 
         */
        public Builder fileIntegrationRevisionRegexp(Output<String> fileIntegrationRevisionRegexp) {
            $.fileIntegrationRevisionRegexp = fileIntegrationRevisionRegexp;
            return this;
        }

        /**
         * @param fileIntegrationRevisionRegexp A regular expression matching the integration revision string appearing in a file name as part of the artifact&#39;s path.
         * For example, &#39;SNAPSHOT|(?:(?:[0-9]{8}.[0-9]{6})-(?:[0-9]+))&#39;, in Maven. Note! Take care not to introduce any regexp
         * capturing groups within this expression. If not applicable use &#39;.*&#39;
         * 
         * @return builder
         * 
         */
        public Builder fileIntegrationRevisionRegexp(String fileIntegrationRevisionRegexp) {
            return fileIntegrationRevisionRegexp(Output.of(fileIntegrationRevisionRegexp));
        }

        /**
         * @param folderIntegrationRevisionRegexp A regular expression matching the integration revision string appearing in a folder name as part of the artifact&#39;s path.
         * For example, &#39;SNAPSHOT&#39;, in Maven. Note! Take care not to introduce any regexp capturing groups within this expression.
         * If not applicable use &#39;.*&#39;
         * 
         * @return builder
         * 
         */
        public Builder folderIntegrationRevisionRegexp(Output<String> folderIntegrationRevisionRegexp) {
            $.folderIntegrationRevisionRegexp = folderIntegrationRevisionRegexp;
            return this;
        }

        /**
         * @param folderIntegrationRevisionRegexp A regular expression matching the integration revision string appearing in a folder name as part of the artifact&#39;s path.
         * For example, &#39;SNAPSHOT&#39;, in Maven. Note! Take care not to introduce any regexp capturing groups within this expression.
         * If not applicable use &#39;.*&#39;
         * 
         * @return builder
         * 
         */
        public Builder folderIntegrationRevisionRegexp(String folderIntegrationRevisionRegexp) {
            return folderIntegrationRevisionRegexp(Output.of(folderIntegrationRevisionRegexp));
        }

        /**
         * @param name Layout name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Layout name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public RepositoryLayoutArgs build() {
            $.artifactPathPattern = Objects.requireNonNull($.artifactPathPattern, "expected parameter 'artifactPathPattern' to be non-null");
            $.fileIntegrationRevisionRegexp = Objects.requireNonNull($.fileIntegrationRevisionRegexp, "expected parameter 'fileIntegrationRevisionRegexp' to be non-null");
            $.folderIntegrationRevisionRegexp = Objects.requireNonNull($.folderIntegrationRevisionRegexp, "expected parameter 'folderIntegrationRevisionRegexp' to be non-null");
            return $;
        }
    }

}
