// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource can be used to manage the automatic and periodic backups of the entire Artifactory instance.
 *
 * When an `artifactory.Backup` resource is configured and enabled to true, backup of the entire Artifactory system will be done automatically and periodically.
 *
 * The backup process creates a time-stamped directory in the target backup directory.
 *
 * See [JFrog Artifactory Backup](https://www.jfrog.com/confluence/display/JFROG/Backups) for more details.
 *
 * ~>Only supported in self-hosted environment.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as artifactory from "@pulumi/artifactory";
 *
 * const backupConfigName = new artifactory.Backup("backup_config_name", {
 *     key: "backup_config_name",
 *     enabled: true,
 *     cronExp: "0 0 12 * * ? *",
 *     retentionPeriodHours: 1000,
 *     excludedRepositories: ["my-docker-local"],
 *     createArchive: false,
 *     excludeNewRepositories: true,
 *     sendMailOnError: true,
 *     verifyDiskSpace: true,
 *     exportMissionControl: true,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import artifactory:index/backup:Backup backup_name backup_name
 * ```
 */
export class Backup extends pulumi.CustomResource {
    /**
     * Get an existing Backup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BackupState, opts?: pulumi.CustomResourceOptions): Backup {
        return new Backup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'artifactory:index/backup:Backup';

    /**
     * Returns true if the given object is an instance of Backup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Backup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Backup.__pulumiType;
    }

    /**
     * If set to true, backups will be created within a Zip archive (Slow and CPU intensive). Default value is `false`
     */
    declare public readonly createArchive: pulumi.Output<boolean>;
    /**
     * A valid CRON expression that you can use to control backup frequency. Eg: `0 0 12 * * ? *`, `0 0 2 ? * MON-SAT *`. **Note:** please use 7 character format - Seconds, Minutes Hours, Day Of Month, Month, Day Of Week, Year. Also, specifying both a day-of-week AND a day-of-month parameter is not supported. One of them should be replaced by `?`. Incorrect: `* 5,7,9 14/2 * * WED,SAT *`, correct: `* 5,7,9 14/2 ? * WED,SAT *`. See details in [Cron Trigger Tutorial](http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html) and in [Cronexp package readme](https://github.com/gorhill/cronexpr#other-details).
     */
    declare public readonly cronExp: pulumi.Output<string>;
    /**
     * Flag to enable or disable the backup config. Default value is `true`.
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * When set to true, new repositories will not be automatically added to the backup. Default value is `false`.
     */
    declare public readonly excludeNewRepositories: pulumi.Output<boolean>;
    /**
     * List of excluded repositories from the backup.
     */
    declare public readonly excludedRepositories: pulumi.Output<string[] | undefined>;
    /**
     * When set to true, mission control will not be automatically added to the backup. Default value is `false`.
     */
    declare public readonly exportMissionControl: pulumi.Output<boolean>;
    declare public readonly key: pulumi.Output<string>;
    /**
     * The number of hours to keep a backup before Artifactory will clean it up to free up disk space. Applicable only to non-incremental backups. Default value is 168 hours i.e. 7 days.
     */
    declare public readonly retentionPeriodHours: pulumi.Output<number>;
    /**
     * If set to true, all Artifactory administrators will be notified by email if any problem is encountered during backup. Default value is `true`.
     */
    declare public readonly sendMailOnError: pulumi.Output<boolean>;
    /**
     * If set, Artifactory will verify that the backup target location has enough disk space available to hold the backed up data. If there is not enough space available, Artifactory will abort the backup and write a message in the log file. Applicable only to non-incremental backups. Default value is `false`.
     */
    declare public readonly verifyDiskSpace: pulumi.Output<boolean>;

    /**
     * Create a Backup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BackupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BackupArgs | BackupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BackupState | undefined;
            resourceInputs["createArchive"] = state?.createArchive;
            resourceInputs["cronExp"] = state?.cronExp;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["excludeNewRepositories"] = state?.excludeNewRepositories;
            resourceInputs["excludedRepositories"] = state?.excludedRepositories;
            resourceInputs["exportMissionControl"] = state?.exportMissionControl;
            resourceInputs["key"] = state?.key;
            resourceInputs["retentionPeriodHours"] = state?.retentionPeriodHours;
            resourceInputs["sendMailOnError"] = state?.sendMailOnError;
            resourceInputs["verifyDiskSpace"] = state?.verifyDiskSpace;
        } else {
            const args = argsOrState as BackupArgs | undefined;
            if (args?.cronExp === undefined && !opts.urn) {
                throw new Error("Missing required property 'cronExp'");
            }
            if (args?.key === undefined && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            resourceInputs["createArchive"] = args?.createArchive;
            resourceInputs["cronExp"] = args?.cronExp;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["excludeNewRepositories"] = args?.excludeNewRepositories;
            resourceInputs["excludedRepositories"] = args?.excludedRepositories;
            resourceInputs["exportMissionControl"] = args?.exportMissionControl;
            resourceInputs["key"] = args?.key;
            resourceInputs["retentionPeriodHours"] = args?.retentionPeriodHours;
            resourceInputs["sendMailOnError"] = args?.sendMailOnError;
            resourceInputs["verifyDiskSpace"] = args?.verifyDiskSpace;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Backup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Backup resources.
 */
export interface BackupState {
    /**
     * If set to true, backups will be created within a Zip archive (Slow and CPU intensive). Default value is `false`
     */
    createArchive?: pulumi.Input<boolean>;
    /**
     * A valid CRON expression that you can use to control backup frequency. Eg: `0 0 12 * * ? *`, `0 0 2 ? * MON-SAT *`. **Note:** please use 7 character format - Seconds, Minutes Hours, Day Of Month, Month, Day Of Week, Year. Also, specifying both a day-of-week AND a day-of-month parameter is not supported. One of them should be replaced by `?`. Incorrect: `* 5,7,9 14/2 * * WED,SAT *`, correct: `* 5,7,9 14/2 ? * WED,SAT *`. See details in [Cron Trigger Tutorial](http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html) and in [Cronexp package readme](https://github.com/gorhill/cronexpr#other-details).
     */
    cronExp?: pulumi.Input<string>;
    /**
     * Flag to enable or disable the backup config. Default value is `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * When set to true, new repositories will not be automatically added to the backup. Default value is `false`.
     */
    excludeNewRepositories?: pulumi.Input<boolean>;
    /**
     * List of excluded repositories from the backup.
     */
    excludedRepositories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When set to true, mission control will not be automatically added to the backup. Default value is `false`.
     */
    exportMissionControl?: pulumi.Input<boolean>;
    key?: pulumi.Input<string>;
    /**
     * The number of hours to keep a backup before Artifactory will clean it up to free up disk space. Applicable only to non-incremental backups. Default value is 168 hours i.e. 7 days.
     */
    retentionPeriodHours?: pulumi.Input<number>;
    /**
     * If set to true, all Artifactory administrators will be notified by email if any problem is encountered during backup. Default value is `true`.
     */
    sendMailOnError?: pulumi.Input<boolean>;
    /**
     * If set, Artifactory will verify that the backup target location has enough disk space available to hold the backed up data. If there is not enough space available, Artifactory will abort the backup and write a message in the log file. Applicable only to non-incremental backups. Default value is `false`.
     */
    verifyDiskSpace?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Backup resource.
 */
export interface BackupArgs {
    /**
     * If set to true, backups will be created within a Zip archive (Slow and CPU intensive). Default value is `false`
     */
    createArchive?: pulumi.Input<boolean>;
    /**
     * A valid CRON expression that you can use to control backup frequency. Eg: `0 0 12 * * ? *`, `0 0 2 ? * MON-SAT *`. **Note:** please use 7 character format - Seconds, Minutes Hours, Day Of Month, Month, Day Of Week, Year. Also, specifying both a day-of-week AND a day-of-month parameter is not supported. One of them should be replaced by `?`. Incorrect: `* 5,7,9 14/2 * * WED,SAT *`, correct: `* 5,7,9 14/2 ? * WED,SAT *`. See details in [Cron Trigger Tutorial](http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html) and in [Cronexp package readme](https://github.com/gorhill/cronexpr#other-details).
     */
    cronExp: pulumi.Input<string>;
    /**
     * Flag to enable or disable the backup config. Default value is `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * When set to true, new repositories will not be automatically added to the backup. Default value is `false`.
     */
    excludeNewRepositories?: pulumi.Input<boolean>;
    /**
     * List of excluded repositories from the backup.
     */
    excludedRepositories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When set to true, mission control will not be automatically added to the backup. Default value is `false`.
     */
    exportMissionControl?: pulumi.Input<boolean>;
    key: pulumi.Input<string>;
    /**
     * The number of hours to keep a backup before Artifactory will clean it up to free up disk space. Applicable only to non-incremental backups. Default value is 168 hours i.e. 7 days.
     */
    retentionPeriodHours?: pulumi.Input<number>;
    /**
     * If set to true, all Artifactory administrators will be notified by email if any problem is encountered during backup. Default value is `true`.
     */
    sendMailOnError?: pulumi.Input<boolean>;
    /**
     * If set, Artifactory will verify that the backup target location has enough disk space available to hold the backed up data. If there is not enough space available, Artifactory will abort the backup and write a message in the log file. Applicable only to non-incremental backups. Default value is `false`.
     */
    verifyDiskSpace?: pulumi.Input<boolean>;
}
