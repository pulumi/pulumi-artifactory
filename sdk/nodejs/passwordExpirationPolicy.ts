// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides an Artifactory Password Expiration Policy resource.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as artifactory from "@pulumi/artifactory";
 *
 * const my_password_expiration_policy = new artifactory.PasswordExpirationPolicy("my-password-expiration-policy", {
 *     name: "my-password-expiration-policy",
 *     enabled: true,
 *     passwordMaxAge: 120,
 *     notifyByEmail: true,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import artifactory:index/passwordExpirationPolicy:PasswordExpirationPolicy my-password-expiration-policy my-password-expiration-policy
 * ```
 */
export class PasswordExpirationPolicy extends pulumi.CustomResource {
    /**
     * Get an existing PasswordExpirationPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PasswordExpirationPolicyState, opts?: pulumi.CustomResourceOptions): PasswordExpirationPolicy {
        return new PasswordExpirationPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'artifactory:index/passwordExpirationPolicy:PasswordExpirationPolicy';

    /**
     * Returns true if the given object is an instance of PasswordExpirationPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PasswordExpirationPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PasswordExpirationPolicy.__pulumiType;
    }

    /**
     * Enable Password Expiration Policy. This only applies to internal user passwords.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Name of the resource. Only used for importing.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Send mail notification before password expiration. Users will receive an email notification X days before password will expire. Mail server must be enabled and configured correctly.
     */
    public readonly notifyByEmail!: pulumi.Output<boolean>;
    /**
     * Password expires every N days. The time interval in which users will be obligated to change their password.
     */
    public readonly passwordMaxAge!: pulumi.Output<number>;

    /**
     * Create a PasswordExpirationPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PasswordExpirationPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PasswordExpirationPolicyArgs | PasswordExpirationPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PasswordExpirationPolicyState | undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifyByEmail"] = state ? state.notifyByEmail : undefined;
            resourceInputs["passwordMaxAge"] = state ? state.passwordMaxAge : undefined;
        } else {
            const args = argsOrState as PasswordExpirationPolicyArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.notifyByEmail === undefined) && !opts.urn) {
                throw new Error("Missing required property 'notifyByEmail'");
            }
            if ((!args || args.passwordMaxAge === undefined) && !opts.urn) {
                throw new Error("Missing required property 'passwordMaxAge'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notifyByEmail"] = args ? args.notifyByEmail : undefined;
            resourceInputs["passwordMaxAge"] = args ? args.passwordMaxAge : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PasswordExpirationPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PasswordExpirationPolicy resources.
 */
export interface PasswordExpirationPolicyState {
    /**
     * Enable Password Expiration Policy. This only applies to internal user passwords.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Name of the resource. Only used for importing.
     */
    name?: pulumi.Input<string>;
    /**
     * Send mail notification before password expiration. Users will receive an email notification X days before password will expire. Mail server must be enabled and configured correctly.
     */
    notifyByEmail?: pulumi.Input<boolean>;
    /**
     * Password expires every N days. The time interval in which users will be obligated to change their password.
     */
    passwordMaxAge?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a PasswordExpirationPolicy resource.
 */
export interface PasswordExpirationPolicyArgs {
    /**
     * Enable Password Expiration Policy. This only applies to internal user passwords.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Name of the resource. Only used for importing.
     */
    name?: pulumi.Input<string>;
    /**
     * Send mail notification before password expiration. Users will receive an email notification X days before password will expire. Mail server must be enabled and configured correctly.
     */
    notifyByEmail: pulumi.Input<boolean>;
    /**
     * Password expires every N days. The time interval in which users will be obligated to change their password.
     */
    passwordMaxAge: pulumi.Input<number>;
}
