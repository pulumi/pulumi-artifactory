// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides an Artifactory Mail Server resource. This can be used to create and manage Artifactory mail server configuration.
 *
 * ## Example Usage
 *
 * ### S
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as artifactory from "@pulumi/artifactory";
 *
 * const mymailserver = new artifactory.MailServer("mymailserver", {
 *     enabled: true,
 *     artifactoryUrl: "http://tempurl.org",
 *     from: "test@jfrog.com",
 *     host: "http://tempurl.org",
 *     username: "test-user",
 *     password: "test-password",
 *     port: 25,
 *     subjectPrefix: "[Test]",
 *     useSsl: true,
 *     useTls: true,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import artifactory:index/mailServer:MailServer my-mail-server mymailserver
 * ```
 *
 * ~>The `password` attribute is not retrievable from Artifactory thus there will be state drift after importing this resource.
 */
export class MailServer extends pulumi.CustomResource {
    /**
     * Get an existing MailServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MailServerState, opts?: pulumi.CustomResourceOptions): MailServer {
        return new MailServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'artifactory:index/mailServer:MailServer';

    /**
     * Returns true if the given object is an instance of MailServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MailServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MailServer.__pulumiType;
    }

    /**
     * The Artifactory URL to to link to in all outgoing messages.
     */
    public readonly artifactoryUrl!: pulumi.Output<string | undefined>;
    /**
     * When set, mail notifications are enabled.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The 'from' address header to use in all outgoing messages.
     */
    public readonly from!: pulumi.Output<string | undefined>;
    /**
     * The mail server IP address / DNS.
     */
    public readonly host!: pulumi.Output<string>;
    /**
     * The password for authentication with the mail server.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * The port number of the mail server.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * A prefix to use for the subject of all outgoing mails.
     */
    public readonly subjectPrefix!: pulumi.Output<string | undefined>;
    /**
     * When set to 'true', uses a secure connection to the mail server.
     */
    public readonly useSsl!: pulumi.Output<boolean>;
    /**
     * When set to 'true', uses Transport Layer Security when connecting to the mail server.
     */
    public readonly useTls!: pulumi.Output<boolean>;
    /**
     * The username for authentication with the mail server.
     */
    public readonly username!: pulumi.Output<string | undefined>;

    /**
     * Create a MailServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MailServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MailServerArgs | MailServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MailServerState | undefined;
            resourceInputs["artifactoryUrl"] = state ? state.artifactoryUrl : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["from"] = state ? state.from : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["subjectPrefix"] = state ? state.subjectPrefix : undefined;
            resourceInputs["useSsl"] = state ? state.useSsl : undefined;
            resourceInputs["useTls"] = state ? state.useTls : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as MailServerArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.host === undefined) && !opts.urn) {
                throw new Error("Missing required property 'host'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            resourceInputs["artifactoryUrl"] = args ? args.artifactoryUrl : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["from"] = args ? args.from : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["subjectPrefix"] = args ? args.subjectPrefix : undefined;
            resourceInputs["useSsl"] = args ? args.useSsl : undefined;
            resourceInputs["useTls"] = args ? args.useTls : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MailServer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MailServer resources.
 */
export interface MailServerState {
    /**
     * The Artifactory URL to to link to in all outgoing messages.
     */
    artifactoryUrl?: pulumi.Input<string>;
    /**
     * When set, mail notifications are enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The 'from' address header to use in all outgoing messages.
     */
    from?: pulumi.Input<string>;
    /**
     * The mail server IP address / DNS.
     */
    host?: pulumi.Input<string>;
    /**
     * The password for authentication with the mail server.
     */
    password?: pulumi.Input<string>;
    /**
     * The port number of the mail server.
     */
    port?: pulumi.Input<number>;
    /**
     * A prefix to use for the subject of all outgoing mails.
     */
    subjectPrefix?: pulumi.Input<string>;
    /**
     * When set to 'true', uses a secure connection to the mail server.
     */
    useSsl?: pulumi.Input<boolean>;
    /**
     * When set to 'true', uses Transport Layer Security when connecting to the mail server.
     */
    useTls?: pulumi.Input<boolean>;
    /**
     * The username for authentication with the mail server.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MailServer resource.
 */
export interface MailServerArgs {
    /**
     * The Artifactory URL to to link to in all outgoing messages.
     */
    artifactoryUrl?: pulumi.Input<string>;
    /**
     * When set, mail notifications are enabled.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The 'from' address header to use in all outgoing messages.
     */
    from?: pulumi.Input<string>;
    /**
     * The mail server IP address / DNS.
     */
    host: pulumi.Input<string>;
    /**
     * The password for authentication with the mail server.
     */
    password?: pulumi.Input<string>;
    /**
     * The port number of the mail server.
     */
    port: pulumi.Input<number>;
    /**
     * A prefix to use for the subject of all outgoing mails.
     */
    subjectPrefix?: pulumi.Input<string>;
    /**
     * When set to 'true', uses a secure connection to the mail server.
     */
    useSsl?: pulumi.Input<boolean>;
    /**
     * When set to 'true', uses Transport Layer Security when connecting to the mail server.
     */
    useTls?: pulumi.Input<boolean>;
    /**
     * The username for authentication with the mail server.
     */
    username?: pulumi.Input<string>;
}
