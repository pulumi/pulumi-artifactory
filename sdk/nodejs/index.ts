// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccessTokenArgs, AccessTokenState } from "./accessToken";
export type AccessToken = import("./accessToken").AccessToken;
export const AccessToken: typeof import("./accessToken").AccessToken = null as any;
utilities.lazyLoad(exports, ["AccessToken"], () => require("./accessToken"));

export { AlpineRepositoryArgs, AlpineRepositoryState } from "./alpineRepository";
export type AlpineRepository = import("./alpineRepository").AlpineRepository;
export const AlpineRepository: typeof import("./alpineRepository").AlpineRepository = null as any;
utilities.lazyLoad(exports, ["AlpineRepository"], () => require("./alpineRepository"));

export { AnonymousUserArgs, AnonymousUserState } from "./anonymousUser";
export type AnonymousUser = import("./anonymousUser").AnonymousUser;
export const AnonymousUser: typeof import("./anonymousUser").AnonymousUser = null as any;
utilities.lazyLoad(exports, ["AnonymousUser"], () => require("./anonymousUser"));

export { ApiKeyArgs, ApiKeyState } from "./apiKey";
export type ApiKey = import("./apiKey").ApiKey;
export const ApiKey: typeof import("./apiKey").ApiKey = null as any;
utilities.lazyLoad(exports, ["ApiKey"], () => require("./apiKey"));

export { ArtifactPropertyWebhookArgs, ArtifactPropertyWebhookState } from "./artifactPropertyWebhook";
export type ArtifactPropertyWebhook = import("./artifactPropertyWebhook").ArtifactPropertyWebhook;
export const ArtifactPropertyWebhook: typeof import("./artifactPropertyWebhook").ArtifactPropertyWebhook = null as any;
utilities.lazyLoad(exports, ["ArtifactPropertyWebhook"], () => require("./artifactPropertyWebhook"));

export { ArtifactWebhookArgs, ArtifactWebhookState } from "./artifactWebhook";
export type ArtifactWebhook = import("./artifactWebhook").ArtifactWebhook;
export const ArtifactWebhook: typeof import("./artifactWebhook").ArtifactWebhook = null as any;
utilities.lazyLoad(exports, ["ArtifactWebhook"], () => require("./artifactWebhook"));

export { ArtifactoryReleaseBundleWebhookArgs, ArtifactoryReleaseBundleWebhookState } from "./artifactoryReleaseBundleWebhook";
export type ArtifactoryReleaseBundleWebhook = import("./artifactoryReleaseBundleWebhook").ArtifactoryReleaseBundleWebhook;
export const ArtifactoryReleaseBundleWebhook: typeof import("./artifactoryReleaseBundleWebhook").ArtifactoryReleaseBundleWebhook = null as any;
utilities.lazyLoad(exports, ["ArtifactoryReleaseBundleWebhook"], () => require("./artifactoryReleaseBundleWebhook"));

export { BackupArgs, BackupState } from "./backup";
export type Backup = import("./backup").Backup;
export const Backup: typeof import("./backup").Backup = null as any;
utilities.lazyLoad(exports, ["Backup"], () => require("./backup"));

export { BuildWebhookArgs, BuildWebhookState } from "./buildWebhook";
export type BuildWebhook = import("./buildWebhook").BuildWebhook;
export const BuildWebhook: typeof import("./buildWebhook").BuildWebhook = null as any;
utilities.lazyLoad(exports, ["BuildWebhook"], () => require("./buildWebhook"));

export { CertificateArgs, CertificateState } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { DebianRepositoryArgs, DebianRepositoryState } from "./debianRepository";
export type DebianRepository = import("./debianRepository").DebianRepository;
export const DebianRepository: typeof import("./debianRepository").DebianRepository = null as any;
utilities.lazyLoad(exports, ["DebianRepository"], () => require("./debianRepository"));

export { DistributionWebhookArgs, DistributionWebhookState } from "./distributionWebhook";
export type DistributionWebhook = import("./distributionWebhook").DistributionWebhook;
export const DistributionWebhook: typeof import("./distributionWebhook").DistributionWebhook = null as any;
utilities.lazyLoad(exports, ["DistributionWebhook"], () => require("./distributionWebhook"));

export { DockerV1RepositoryArgs, DockerV1RepositoryState } from "./dockerV1Repository";
export type DockerV1Repository = import("./dockerV1Repository").DockerV1Repository;
export const DockerV1Repository: typeof import("./dockerV1Repository").DockerV1Repository = null as any;
utilities.lazyLoad(exports, ["DockerV1Repository"], () => require("./dockerV1Repository"));

export { DockerV2RepositoryArgs, DockerV2RepositoryState } from "./dockerV2Repository";
export type DockerV2Repository = import("./dockerV2Repository").DockerV2Repository;
export const DockerV2Repository: typeof import("./dockerV2Repository").DockerV2Repository = null as any;
utilities.lazyLoad(exports, ["DockerV2Repository"], () => require("./dockerV2Repository"));

export { DockerWebhookArgs, DockerWebhookState } from "./dockerWebhook";
export type DockerWebhook = import("./dockerWebhook").DockerWebhook;
export const DockerWebhook: typeof import("./dockerWebhook").DockerWebhook = null as any;
utilities.lazyLoad(exports, ["DockerWebhook"], () => require("./dockerWebhook"));

export { FederatedAlpineRepositoryArgs, FederatedAlpineRepositoryState } from "./federatedAlpineRepository";
export type FederatedAlpineRepository = import("./federatedAlpineRepository").FederatedAlpineRepository;
export const FederatedAlpineRepository: typeof import("./federatedAlpineRepository").FederatedAlpineRepository = null as any;
utilities.lazyLoad(exports, ["FederatedAlpineRepository"], () => require("./federatedAlpineRepository"));

export { FederatedBowerRepositoryArgs, FederatedBowerRepositoryState } from "./federatedBowerRepository";
export type FederatedBowerRepository = import("./federatedBowerRepository").FederatedBowerRepository;
export const FederatedBowerRepository: typeof import("./federatedBowerRepository").FederatedBowerRepository = null as any;
utilities.lazyLoad(exports, ["FederatedBowerRepository"], () => require("./federatedBowerRepository"));

export { FederatedCargoRepositoryArgs, FederatedCargoRepositoryState } from "./federatedCargoRepository";
export type FederatedCargoRepository = import("./federatedCargoRepository").FederatedCargoRepository;
export const FederatedCargoRepository: typeof import("./federatedCargoRepository").FederatedCargoRepository = null as any;
utilities.lazyLoad(exports, ["FederatedCargoRepository"], () => require("./federatedCargoRepository"));

export { FederatedChefRepositoryArgs, FederatedChefRepositoryState } from "./federatedChefRepository";
export type FederatedChefRepository = import("./federatedChefRepository").FederatedChefRepository;
export const FederatedChefRepository: typeof import("./federatedChefRepository").FederatedChefRepository = null as any;
utilities.lazyLoad(exports, ["FederatedChefRepository"], () => require("./federatedChefRepository"));

export { FederatedCocoapodsRepositoryArgs, FederatedCocoapodsRepositoryState } from "./federatedCocoapodsRepository";
export type FederatedCocoapodsRepository = import("./federatedCocoapodsRepository").FederatedCocoapodsRepository;
export const FederatedCocoapodsRepository: typeof import("./federatedCocoapodsRepository").FederatedCocoapodsRepository = null as any;
utilities.lazyLoad(exports, ["FederatedCocoapodsRepository"], () => require("./federatedCocoapodsRepository"));

export { FederatedComposerRepositoryArgs, FederatedComposerRepositoryState } from "./federatedComposerRepository";
export type FederatedComposerRepository = import("./federatedComposerRepository").FederatedComposerRepository;
export const FederatedComposerRepository: typeof import("./federatedComposerRepository").FederatedComposerRepository = null as any;
utilities.lazyLoad(exports, ["FederatedComposerRepository"], () => require("./federatedComposerRepository"));

export { FederatedConanRepositoryArgs, FederatedConanRepositoryState } from "./federatedConanRepository";
export type FederatedConanRepository = import("./federatedConanRepository").FederatedConanRepository;
export const FederatedConanRepository: typeof import("./federatedConanRepository").FederatedConanRepository = null as any;
utilities.lazyLoad(exports, ["FederatedConanRepository"], () => require("./federatedConanRepository"));

export { FederatedCondaRepositoryArgs, FederatedCondaRepositoryState } from "./federatedCondaRepository";
export type FederatedCondaRepository = import("./federatedCondaRepository").FederatedCondaRepository;
export const FederatedCondaRepository: typeof import("./federatedCondaRepository").FederatedCondaRepository = null as any;
utilities.lazyLoad(exports, ["FederatedCondaRepository"], () => require("./federatedCondaRepository"));

export { FederatedCranRepositoryArgs, FederatedCranRepositoryState } from "./federatedCranRepository";
export type FederatedCranRepository = import("./federatedCranRepository").FederatedCranRepository;
export const FederatedCranRepository: typeof import("./federatedCranRepository").FederatedCranRepository = null as any;
utilities.lazyLoad(exports, ["FederatedCranRepository"], () => require("./federatedCranRepository"));

export { FederatedDebianRepositoryArgs, FederatedDebianRepositoryState } from "./federatedDebianRepository";
export type FederatedDebianRepository = import("./federatedDebianRepository").FederatedDebianRepository;
export const FederatedDebianRepository: typeof import("./federatedDebianRepository").FederatedDebianRepository = null as any;
utilities.lazyLoad(exports, ["FederatedDebianRepository"], () => require("./federatedDebianRepository"));

export { FederatedDockerRepositoryArgs, FederatedDockerRepositoryState } from "./federatedDockerRepository";
export type FederatedDockerRepository = import("./federatedDockerRepository").FederatedDockerRepository;
export const FederatedDockerRepository: typeof import("./federatedDockerRepository").FederatedDockerRepository = null as any;
utilities.lazyLoad(exports, ["FederatedDockerRepository"], () => require("./federatedDockerRepository"));

export { FederatedDockerV1RepositoryArgs, FederatedDockerV1RepositoryState } from "./federatedDockerV1Repository";
export type FederatedDockerV1Repository = import("./federatedDockerV1Repository").FederatedDockerV1Repository;
export const FederatedDockerV1Repository: typeof import("./federatedDockerV1Repository").FederatedDockerV1Repository = null as any;
utilities.lazyLoad(exports, ["FederatedDockerV1Repository"], () => require("./federatedDockerV1Repository"));

export { FederatedDockerV2RepositoryArgs, FederatedDockerV2RepositoryState } from "./federatedDockerV2Repository";
export type FederatedDockerV2Repository = import("./federatedDockerV2Repository").FederatedDockerV2Repository;
export const FederatedDockerV2Repository: typeof import("./federatedDockerV2Repository").FederatedDockerV2Repository = null as any;
utilities.lazyLoad(exports, ["FederatedDockerV2Repository"], () => require("./federatedDockerV2Repository"));

export { FederatedGemsRepositoryArgs, FederatedGemsRepositoryState } from "./federatedGemsRepository";
export type FederatedGemsRepository = import("./federatedGemsRepository").FederatedGemsRepository;
export const FederatedGemsRepository: typeof import("./federatedGemsRepository").FederatedGemsRepository = null as any;
utilities.lazyLoad(exports, ["FederatedGemsRepository"], () => require("./federatedGemsRepository"));

export { FederatedGenericRepositoryArgs, FederatedGenericRepositoryState } from "./federatedGenericRepository";
export type FederatedGenericRepository = import("./federatedGenericRepository").FederatedGenericRepository;
export const FederatedGenericRepository: typeof import("./federatedGenericRepository").FederatedGenericRepository = null as any;
utilities.lazyLoad(exports, ["FederatedGenericRepository"], () => require("./federatedGenericRepository"));

export { FederatedGitltfsRepositoryArgs, FederatedGitltfsRepositoryState } from "./federatedGitltfsRepository";
export type FederatedGitltfsRepository = import("./federatedGitltfsRepository").FederatedGitltfsRepository;
export const FederatedGitltfsRepository: typeof import("./federatedGitltfsRepository").FederatedGitltfsRepository = null as any;
utilities.lazyLoad(exports, ["FederatedGitltfsRepository"], () => require("./federatedGitltfsRepository"));

export { FederatedGoRepositoryArgs, FederatedGoRepositoryState } from "./federatedGoRepository";
export type FederatedGoRepository = import("./federatedGoRepository").FederatedGoRepository;
export const FederatedGoRepository: typeof import("./federatedGoRepository").FederatedGoRepository = null as any;
utilities.lazyLoad(exports, ["FederatedGoRepository"], () => require("./federatedGoRepository"));

export { FederatedGradleRepositoryArgs, FederatedGradleRepositoryState } from "./federatedGradleRepository";
export type FederatedGradleRepository = import("./federatedGradleRepository").FederatedGradleRepository;
export const FederatedGradleRepository: typeof import("./federatedGradleRepository").FederatedGradleRepository = null as any;
utilities.lazyLoad(exports, ["FederatedGradleRepository"], () => require("./federatedGradleRepository"));

export { FederatedHelmRepositoryArgs, FederatedHelmRepositoryState } from "./federatedHelmRepository";
export type FederatedHelmRepository = import("./federatedHelmRepository").FederatedHelmRepository;
export const FederatedHelmRepository: typeof import("./federatedHelmRepository").FederatedHelmRepository = null as any;
utilities.lazyLoad(exports, ["FederatedHelmRepository"], () => require("./federatedHelmRepository"));

export { FederatedIvyRepositoryArgs, FederatedIvyRepositoryState } from "./federatedIvyRepository";
export type FederatedIvyRepository = import("./federatedIvyRepository").FederatedIvyRepository;
export const FederatedIvyRepository: typeof import("./federatedIvyRepository").FederatedIvyRepository = null as any;
utilities.lazyLoad(exports, ["FederatedIvyRepository"], () => require("./federatedIvyRepository"));

export { FederatedMavenRepositoryArgs, FederatedMavenRepositoryState } from "./federatedMavenRepository";
export type FederatedMavenRepository = import("./federatedMavenRepository").FederatedMavenRepository;
export const FederatedMavenRepository: typeof import("./federatedMavenRepository").FederatedMavenRepository = null as any;
utilities.lazyLoad(exports, ["FederatedMavenRepository"], () => require("./federatedMavenRepository"));

export { FederatedNpmRepositoryArgs, FederatedNpmRepositoryState } from "./federatedNpmRepository";
export type FederatedNpmRepository = import("./federatedNpmRepository").FederatedNpmRepository;
export const FederatedNpmRepository: typeof import("./federatedNpmRepository").FederatedNpmRepository = null as any;
utilities.lazyLoad(exports, ["FederatedNpmRepository"], () => require("./federatedNpmRepository"));

export { FederatedNugetRepositoryArgs, FederatedNugetRepositoryState } from "./federatedNugetRepository";
export type FederatedNugetRepository = import("./federatedNugetRepository").FederatedNugetRepository;
export const FederatedNugetRepository: typeof import("./federatedNugetRepository").FederatedNugetRepository = null as any;
utilities.lazyLoad(exports, ["FederatedNugetRepository"], () => require("./federatedNugetRepository"));

export { FederatedOpkgRepositoryArgs, FederatedOpkgRepositoryState } from "./federatedOpkgRepository";
export type FederatedOpkgRepository = import("./federatedOpkgRepository").FederatedOpkgRepository;
export const FederatedOpkgRepository: typeof import("./federatedOpkgRepository").FederatedOpkgRepository = null as any;
utilities.lazyLoad(exports, ["FederatedOpkgRepository"], () => require("./federatedOpkgRepository"));

export { FederatedPuppetRepositoryArgs, FederatedPuppetRepositoryState } from "./federatedPuppetRepository";
export type FederatedPuppetRepository = import("./federatedPuppetRepository").FederatedPuppetRepository;
export const FederatedPuppetRepository: typeof import("./federatedPuppetRepository").FederatedPuppetRepository = null as any;
utilities.lazyLoad(exports, ["FederatedPuppetRepository"], () => require("./federatedPuppetRepository"));

export { FederatedPypiRepositoryArgs, FederatedPypiRepositoryState } from "./federatedPypiRepository";
export type FederatedPypiRepository = import("./federatedPypiRepository").FederatedPypiRepository;
export const FederatedPypiRepository: typeof import("./federatedPypiRepository").FederatedPypiRepository = null as any;
utilities.lazyLoad(exports, ["FederatedPypiRepository"], () => require("./federatedPypiRepository"));

export { FederatedRpmRepositoryArgs, FederatedRpmRepositoryState } from "./federatedRpmRepository";
export type FederatedRpmRepository = import("./federatedRpmRepository").FederatedRpmRepository;
export const FederatedRpmRepository: typeof import("./federatedRpmRepository").FederatedRpmRepository = null as any;
utilities.lazyLoad(exports, ["FederatedRpmRepository"], () => require("./federatedRpmRepository"));

export { FederatedSbtRepositoryArgs, FederatedSbtRepositoryState } from "./federatedSbtRepository";
export type FederatedSbtRepository = import("./federatedSbtRepository").FederatedSbtRepository;
export const FederatedSbtRepository: typeof import("./federatedSbtRepository").FederatedSbtRepository = null as any;
utilities.lazyLoad(exports, ["FederatedSbtRepository"], () => require("./federatedSbtRepository"));

export { FederatedSwiftRepositoryArgs, FederatedSwiftRepositoryState } from "./federatedSwiftRepository";
export type FederatedSwiftRepository = import("./federatedSwiftRepository").FederatedSwiftRepository;
export const FederatedSwiftRepository: typeof import("./federatedSwiftRepository").FederatedSwiftRepository = null as any;
utilities.lazyLoad(exports, ["FederatedSwiftRepository"], () => require("./federatedSwiftRepository"));

export { FederatedTerraformModuleRepositoryArgs, FederatedTerraformModuleRepositoryState } from "./federatedTerraformModuleRepository";
export type FederatedTerraformModuleRepository = import("./federatedTerraformModuleRepository").FederatedTerraformModuleRepository;
export const FederatedTerraformModuleRepository: typeof import("./federatedTerraformModuleRepository").FederatedTerraformModuleRepository = null as any;
utilities.lazyLoad(exports, ["FederatedTerraformModuleRepository"], () => require("./federatedTerraformModuleRepository"));

export { FederatedTerraformProviderRepositoryArgs, FederatedTerraformProviderRepositoryState } from "./federatedTerraformProviderRepository";
export type FederatedTerraformProviderRepository = import("./federatedTerraformProviderRepository").FederatedTerraformProviderRepository;
export const FederatedTerraformProviderRepository: typeof import("./federatedTerraformProviderRepository").FederatedTerraformProviderRepository = null as any;
utilities.lazyLoad(exports, ["FederatedTerraformProviderRepository"], () => require("./federatedTerraformProviderRepository"));

export { FederatedVagrantRepositoryArgs, FederatedVagrantRepositoryState } from "./federatedVagrantRepository";
export type FederatedVagrantRepository = import("./federatedVagrantRepository").FederatedVagrantRepository;
export const FederatedVagrantRepository: typeof import("./federatedVagrantRepository").FederatedVagrantRepository = null as any;
utilities.lazyLoad(exports, ["FederatedVagrantRepository"], () => require("./federatedVagrantRepository"));

export { GeneralSecurityArgs, GeneralSecurityState } from "./generalSecurity";
export type GeneralSecurity = import("./generalSecurity").GeneralSecurity;
export const GeneralSecurity: typeof import("./generalSecurity").GeneralSecurity = null as any;
utilities.lazyLoad(exports, ["GeneralSecurity"], () => require("./generalSecurity"));

export { GetFileArgs, GetFileResult, GetFileOutputArgs } from "./getFile";
export const getFile: typeof import("./getFile").getFile = null as any;
export const getFileOutput: typeof import("./getFile").getFileOutput = null as any;
utilities.lazyLoad(exports, ["getFile","getFileOutput"], () => require("./getFile"));

export { GetFileinfoArgs, GetFileinfoResult, GetFileinfoOutputArgs } from "./getFileinfo";
export const getFileinfo: typeof import("./getFileinfo").getFileinfo = null as any;
export const getFileinfoOutput: typeof import("./getFileinfo").getFileinfoOutput = null as any;
utilities.lazyLoad(exports, ["getFileinfo","getFileinfoOutput"], () => require("./getFileinfo"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetLocalAlpineRepositoryArgs, GetLocalAlpineRepositoryResult, GetLocalAlpineRepositoryOutputArgs } from "./getLocalAlpineRepository";
export const getLocalAlpineRepository: typeof import("./getLocalAlpineRepository").getLocalAlpineRepository = null as any;
export const getLocalAlpineRepositoryOutput: typeof import("./getLocalAlpineRepository").getLocalAlpineRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getLocalAlpineRepository","getLocalAlpineRepositoryOutput"], () => require("./getLocalAlpineRepository"));

export { GetLocalBowerRepositoryArgs, GetLocalBowerRepositoryResult, GetLocalBowerRepositoryOutputArgs } from "./getLocalBowerRepository";
export const getLocalBowerRepository: typeof import("./getLocalBowerRepository").getLocalBowerRepository = null as any;
export const getLocalBowerRepositoryOutput: typeof import("./getLocalBowerRepository").getLocalBowerRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getLocalBowerRepository","getLocalBowerRepositoryOutput"], () => require("./getLocalBowerRepository"));

export { GetLocalCargoRepositoryArgs, GetLocalCargoRepositoryResult, GetLocalCargoRepositoryOutputArgs } from "./getLocalCargoRepository";
export const getLocalCargoRepository: typeof import("./getLocalCargoRepository").getLocalCargoRepository = null as any;
export const getLocalCargoRepositoryOutput: typeof import("./getLocalCargoRepository").getLocalCargoRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getLocalCargoRepository","getLocalCargoRepositoryOutput"], () => require("./getLocalCargoRepository"));

export { GetLocalChefRepositoryArgs, GetLocalChefRepositoryResult, GetLocalChefRepositoryOutputArgs } from "./getLocalChefRepository";
export const getLocalChefRepository: typeof import("./getLocalChefRepository").getLocalChefRepository = null as any;
export const getLocalChefRepositoryOutput: typeof import("./getLocalChefRepository").getLocalChefRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getLocalChefRepository","getLocalChefRepositoryOutput"], () => require("./getLocalChefRepository"));

export { GetLocalCocoapodsRepositoryArgs, GetLocalCocoapodsRepositoryResult, GetLocalCocoapodsRepositoryOutputArgs } from "./getLocalCocoapodsRepository";
export const getLocalCocoapodsRepository: typeof import("./getLocalCocoapodsRepository").getLocalCocoapodsRepository = null as any;
export const getLocalCocoapodsRepositoryOutput: typeof import("./getLocalCocoapodsRepository").getLocalCocoapodsRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getLocalCocoapodsRepository","getLocalCocoapodsRepositoryOutput"], () => require("./getLocalCocoapodsRepository"));

export { GetLocalComposerRepositoryArgs, GetLocalComposerRepositoryResult, GetLocalComposerRepositoryOutputArgs } from "./getLocalComposerRepository";
export const getLocalComposerRepository: typeof import("./getLocalComposerRepository").getLocalComposerRepository = null as any;
export const getLocalComposerRepositoryOutput: typeof import("./getLocalComposerRepository").getLocalComposerRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getLocalComposerRepository","getLocalComposerRepositoryOutput"], () => require("./getLocalComposerRepository"));

export { GetLocalConanRepositoryArgs, GetLocalConanRepositoryResult, GetLocalConanRepositoryOutputArgs } from "./getLocalConanRepository";
export const getLocalConanRepository: typeof import("./getLocalConanRepository").getLocalConanRepository = null as any;
export const getLocalConanRepositoryOutput: typeof import("./getLocalConanRepository").getLocalConanRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getLocalConanRepository","getLocalConanRepositoryOutput"], () => require("./getLocalConanRepository"));

export { GetLocalCondaRepositoryArgs, GetLocalCondaRepositoryResult, GetLocalCondaRepositoryOutputArgs } from "./getLocalCondaRepository";
export const getLocalCondaRepository: typeof import("./getLocalCondaRepository").getLocalCondaRepository = null as any;
export const getLocalCondaRepositoryOutput: typeof import("./getLocalCondaRepository").getLocalCondaRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getLocalCondaRepository","getLocalCondaRepositoryOutput"], () => require("./getLocalCondaRepository"));

export { GetLocalCranRepositoryArgs, GetLocalCranRepositoryResult, GetLocalCranRepositoryOutputArgs } from "./getLocalCranRepository";
export const getLocalCranRepository: typeof import("./getLocalCranRepository").getLocalCranRepository = null as any;
export const getLocalCranRepositoryOutput: typeof import("./getLocalCranRepository").getLocalCranRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getLocalCranRepository","getLocalCranRepositoryOutput"], () => require("./getLocalCranRepository"));

export { GetLocalDebianRepositoryArgs, GetLocalDebianRepositoryResult, GetLocalDebianRepositoryOutputArgs } from "./getLocalDebianRepository";
export const getLocalDebianRepository: typeof import("./getLocalDebianRepository").getLocalDebianRepository = null as any;
export const getLocalDebianRepositoryOutput: typeof import("./getLocalDebianRepository").getLocalDebianRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getLocalDebianRepository","getLocalDebianRepositoryOutput"], () => require("./getLocalDebianRepository"));

export { GetLocalDockerV1RepositoryArgs, GetLocalDockerV1RepositoryResult, GetLocalDockerV1RepositoryOutputArgs } from "./getLocalDockerV1Repository";
export const getLocalDockerV1Repository: typeof import("./getLocalDockerV1Repository").getLocalDockerV1Repository = null as any;
export const getLocalDockerV1RepositoryOutput: typeof import("./getLocalDockerV1Repository").getLocalDockerV1RepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getLocalDockerV1Repository","getLocalDockerV1RepositoryOutput"], () => require("./getLocalDockerV1Repository"));

export { GetLocalDockerV2RepositoryArgs, GetLocalDockerV2RepositoryResult, GetLocalDockerV2RepositoryOutputArgs } from "./getLocalDockerV2Repository";
export const getLocalDockerV2Repository: typeof import("./getLocalDockerV2Repository").getLocalDockerV2Repository = null as any;
export const getLocalDockerV2RepositoryOutput: typeof import("./getLocalDockerV2Repository").getLocalDockerV2RepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getLocalDockerV2Repository","getLocalDockerV2RepositoryOutput"], () => require("./getLocalDockerV2Repository"));

export { GetLocalGemsRepositoryArgs, GetLocalGemsRepositoryResult, GetLocalGemsRepositoryOutputArgs } from "./getLocalGemsRepository";
export const getLocalGemsRepository: typeof import("./getLocalGemsRepository").getLocalGemsRepository = null as any;
export const getLocalGemsRepositoryOutput: typeof import("./getLocalGemsRepository").getLocalGemsRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getLocalGemsRepository","getLocalGemsRepositoryOutput"], () => require("./getLocalGemsRepository"));

export { GetLocalGenericRepositoryArgs, GetLocalGenericRepositoryResult, GetLocalGenericRepositoryOutputArgs } from "./getLocalGenericRepository";
export const getLocalGenericRepository: typeof import("./getLocalGenericRepository").getLocalGenericRepository = null as any;
export const getLocalGenericRepositoryOutput: typeof import("./getLocalGenericRepository").getLocalGenericRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getLocalGenericRepository","getLocalGenericRepositoryOutput"], () => require("./getLocalGenericRepository"));

export { GetLocalGitlfsRepositoryArgs, GetLocalGitlfsRepositoryResult, GetLocalGitlfsRepositoryOutputArgs } from "./getLocalGitlfsRepository";
export const getLocalGitlfsRepository: typeof import("./getLocalGitlfsRepository").getLocalGitlfsRepository = null as any;
export const getLocalGitlfsRepositoryOutput: typeof import("./getLocalGitlfsRepository").getLocalGitlfsRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getLocalGitlfsRepository","getLocalGitlfsRepositoryOutput"], () => require("./getLocalGitlfsRepository"));

export { GetLocalGoRepositoryArgs, GetLocalGoRepositoryResult, GetLocalGoRepositoryOutputArgs } from "./getLocalGoRepository";
export const getLocalGoRepository: typeof import("./getLocalGoRepository").getLocalGoRepository = null as any;
export const getLocalGoRepositoryOutput: typeof import("./getLocalGoRepository").getLocalGoRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getLocalGoRepository","getLocalGoRepositoryOutput"], () => require("./getLocalGoRepository"));

export { GetLocalGradleRepositoryArgs, GetLocalGradleRepositoryResult, GetLocalGradleRepositoryOutputArgs } from "./getLocalGradleRepository";
export const getLocalGradleRepository: typeof import("./getLocalGradleRepository").getLocalGradleRepository = null as any;
export const getLocalGradleRepositoryOutput: typeof import("./getLocalGradleRepository").getLocalGradleRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getLocalGradleRepository","getLocalGradleRepositoryOutput"], () => require("./getLocalGradleRepository"));

export { GetLocalHelmRepositoryArgs, GetLocalHelmRepositoryResult, GetLocalHelmRepositoryOutputArgs } from "./getLocalHelmRepository";
export const getLocalHelmRepository: typeof import("./getLocalHelmRepository").getLocalHelmRepository = null as any;
export const getLocalHelmRepositoryOutput: typeof import("./getLocalHelmRepository").getLocalHelmRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getLocalHelmRepository","getLocalHelmRepositoryOutput"], () => require("./getLocalHelmRepository"));

export { GetLocalIvyRepositoryArgs, GetLocalIvyRepositoryResult, GetLocalIvyRepositoryOutputArgs } from "./getLocalIvyRepository";
export const getLocalIvyRepository: typeof import("./getLocalIvyRepository").getLocalIvyRepository = null as any;
export const getLocalIvyRepositoryOutput: typeof import("./getLocalIvyRepository").getLocalIvyRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getLocalIvyRepository","getLocalIvyRepositoryOutput"], () => require("./getLocalIvyRepository"));

export { GetLocalMavenRepositoryArgs, GetLocalMavenRepositoryResult, GetLocalMavenRepositoryOutputArgs } from "./getLocalMavenRepository";
export const getLocalMavenRepository: typeof import("./getLocalMavenRepository").getLocalMavenRepository = null as any;
export const getLocalMavenRepositoryOutput: typeof import("./getLocalMavenRepository").getLocalMavenRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getLocalMavenRepository","getLocalMavenRepositoryOutput"], () => require("./getLocalMavenRepository"));

export { GetLocalNpmRepositoryArgs, GetLocalNpmRepositoryResult, GetLocalNpmRepositoryOutputArgs } from "./getLocalNpmRepository";
export const getLocalNpmRepository: typeof import("./getLocalNpmRepository").getLocalNpmRepository = null as any;
export const getLocalNpmRepositoryOutput: typeof import("./getLocalNpmRepository").getLocalNpmRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getLocalNpmRepository","getLocalNpmRepositoryOutput"], () => require("./getLocalNpmRepository"));

export { GetLocalNugetRepositoryArgs, GetLocalNugetRepositoryResult, GetLocalNugetRepositoryOutputArgs } from "./getLocalNugetRepository";
export const getLocalNugetRepository: typeof import("./getLocalNugetRepository").getLocalNugetRepository = null as any;
export const getLocalNugetRepositoryOutput: typeof import("./getLocalNugetRepository").getLocalNugetRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getLocalNugetRepository","getLocalNugetRepositoryOutput"], () => require("./getLocalNugetRepository"));

export { GetLocalOpkgRepositoryArgs, GetLocalOpkgRepositoryResult, GetLocalOpkgRepositoryOutputArgs } from "./getLocalOpkgRepository";
export const getLocalOpkgRepository: typeof import("./getLocalOpkgRepository").getLocalOpkgRepository = null as any;
export const getLocalOpkgRepositoryOutput: typeof import("./getLocalOpkgRepository").getLocalOpkgRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getLocalOpkgRepository","getLocalOpkgRepositoryOutput"], () => require("./getLocalOpkgRepository"));

export { GetLocalPubRepositoryArgs, GetLocalPubRepositoryResult, GetLocalPubRepositoryOutputArgs } from "./getLocalPubRepository";
export const getLocalPubRepository: typeof import("./getLocalPubRepository").getLocalPubRepository = null as any;
export const getLocalPubRepositoryOutput: typeof import("./getLocalPubRepository").getLocalPubRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getLocalPubRepository","getLocalPubRepositoryOutput"], () => require("./getLocalPubRepository"));

export { GetLocalPuppetRepositoryArgs, GetLocalPuppetRepositoryResult, GetLocalPuppetRepositoryOutputArgs } from "./getLocalPuppetRepository";
export const getLocalPuppetRepository: typeof import("./getLocalPuppetRepository").getLocalPuppetRepository = null as any;
export const getLocalPuppetRepositoryOutput: typeof import("./getLocalPuppetRepository").getLocalPuppetRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getLocalPuppetRepository","getLocalPuppetRepositoryOutput"], () => require("./getLocalPuppetRepository"));

export { GetLocalPypiRepositoryArgs, GetLocalPypiRepositoryResult, GetLocalPypiRepositoryOutputArgs } from "./getLocalPypiRepository";
export const getLocalPypiRepository: typeof import("./getLocalPypiRepository").getLocalPypiRepository = null as any;
export const getLocalPypiRepositoryOutput: typeof import("./getLocalPypiRepository").getLocalPypiRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getLocalPypiRepository","getLocalPypiRepositoryOutput"], () => require("./getLocalPypiRepository"));

export { GetLocalRpmRepositoryArgs, GetLocalRpmRepositoryResult, GetLocalRpmRepositoryOutputArgs } from "./getLocalRpmRepository";
export const getLocalRpmRepository: typeof import("./getLocalRpmRepository").getLocalRpmRepository = null as any;
export const getLocalRpmRepositoryOutput: typeof import("./getLocalRpmRepository").getLocalRpmRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getLocalRpmRepository","getLocalRpmRepositoryOutput"], () => require("./getLocalRpmRepository"));

export { GetLocalSbtRepositoryArgs, GetLocalSbtRepositoryResult, GetLocalSbtRepositoryOutputArgs } from "./getLocalSbtRepository";
export const getLocalSbtRepository: typeof import("./getLocalSbtRepository").getLocalSbtRepository = null as any;
export const getLocalSbtRepositoryOutput: typeof import("./getLocalSbtRepository").getLocalSbtRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getLocalSbtRepository","getLocalSbtRepositoryOutput"], () => require("./getLocalSbtRepository"));

export { GetLocalSwiftRepositoryArgs, GetLocalSwiftRepositoryResult, GetLocalSwiftRepositoryOutputArgs } from "./getLocalSwiftRepository";
export const getLocalSwiftRepository: typeof import("./getLocalSwiftRepository").getLocalSwiftRepository = null as any;
export const getLocalSwiftRepositoryOutput: typeof import("./getLocalSwiftRepository").getLocalSwiftRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getLocalSwiftRepository","getLocalSwiftRepositoryOutput"], () => require("./getLocalSwiftRepository"));

export { GetLocalTerraformModuleRepositoryArgs, GetLocalTerraformModuleRepositoryResult, GetLocalTerraformModuleRepositoryOutputArgs } from "./getLocalTerraformModuleRepository";
export const getLocalTerraformModuleRepository: typeof import("./getLocalTerraformModuleRepository").getLocalTerraformModuleRepository = null as any;
export const getLocalTerraformModuleRepositoryOutput: typeof import("./getLocalTerraformModuleRepository").getLocalTerraformModuleRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getLocalTerraformModuleRepository","getLocalTerraformModuleRepositoryOutput"], () => require("./getLocalTerraformModuleRepository"));

export { GetLocalTerraformProviderRepositoryArgs, GetLocalTerraformProviderRepositoryResult, GetLocalTerraformProviderRepositoryOutputArgs } from "./getLocalTerraformProviderRepository";
export const getLocalTerraformProviderRepository: typeof import("./getLocalTerraformProviderRepository").getLocalTerraformProviderRepository = null as any;
export const getLocalTerraformProviderRepositoryOutput: typeof import("./getLocalTerraformProviderRepository").getLocalTerraformProviderRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getLocalTerraformProviderRepository","getLocalTerraformProviderRepositoryOutput"], () => require("./getLocalTerraformProviderRepository"));

export { GetLocalTerraformbackendRepositoryArgs, GetLocalTerraformbackendRepositoryResult, GetLocalTerraformbackendRepositoryOutputArgs } from "./getLocalTerraformbackendRepository";
export const getLocalTerraformbackendRepository: typeof import("./getLocalTerraformbackendRepository").getLocalTerraformbackendRepository = null as any;
export const getLocalTerraformbackendRepositoryOutput: typeof import("./getLocalTerraformbackendRepository").getLocalTerraformbackendRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getLocalTerraformbackendRepository","getLocalTerraformbackendRepositoryOutput"], () => require("./getLocalTerraformbackendRepository"));

export { GetLocalVagrantRepositoryArgs, GetLocalVagrantRepositoryResult, GetLocalVagrantRepositoryOutputArgs } from "./getLocalVagrantRepository";
export const getLocalVagrantRepository: typeof import("./getLocalVagrantRepository").getLocalVagrantRepository = null as any;
export const getLocalVagrantRepositoryOutput: typeof import("./getLocalVagrantRepository").getLocalVagrantRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getLocalVagrantRepository","getLocalVagrantRepositoryOutput"], () => require("./getLocalVagrantRepository"));

export { GetPermissionTargetArgs, GetPermissionTargetResult, GetPermissionTargetOutputArgs } from "./getPermissionTarget";
export const getPermissionTarget: typeof import("./getPermissionTarget").getPermissionTarget = null as any;
export const getPermissionTargetOutput: typeof import("./getPermissionTarget").getPermissionTargetOutput = null as any;
utilities.lazyLoad(exports, ["getPermissionTarget","getPermissionTargetOutput"], () => require("./getPermissionTarget"));

export { GetRemoteAlpineRepositoryArgs, GetRemoteAlpineRepositoryResult, GetRemoteAlpineRepositoryOutputArgs } from "./getRemoteAlpineRepository";
export const getRemoteAlpineRepository: typeof import("./getRemoteAlpineRepository").getRemoteAlpineRepository = null as any;
export const getRemoteAlpineRepositoryOutput: typeof import("./getRemoteAlpineRepository").getRemoteAlpineRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteAlpineRepository","getRemoteAlpineRepositoryOutput"], () => require("./getRemoteAlpineRepository"));

export { GetRemoteBowerRepositoryArgs, GetRemoteBowerRepositoryResult, GetRemoteBowerRepositoryOutputArgs } from "./getRemoteBowerRepository";
export const getRemoteBowerRepository: typeof import("./getRemoteBowerRepository").getRemoteBowerRepository = null as any;
export const getRemoteBowerRepositoryOutput: typeof import("./getRemoteBowerRepository").getRemoteBowerRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteBowerRepository","getRemoteBowerRepositoryOutput"], () => require("./getRemoteBowerRepository"));

export { GetRemoteCargoRepositoryArgs, GetRemoteCargoRepositoryResult, GetRemoteCargoRepositoryOutputArgs } from "./getRemoteCargoRepository";
export const getRemoteCargoRepository: typeof import("./getRemoteCargoRepository").getRemoteCargoRepository = null as any;
export const getRemoteCargoRepositoryOutput: typeof import("./getRemoteCargoRepository").getRemoteCargoRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteCargoRepository","getRemoteCargoRepositoryOutput"], () => require("./getRemoteCargoRepository"));

export { GetRemoteChefRepositoryArgs, GetRemoteChefRepositoryResult, GetRemoteChefRepositoryOutputArgs } from "./getRemoteChefRepository";
export const getRemoteChefRepository: typeof import("./getRemoteChefRepository").getRemoteChefRepository = null as any;
export const getRemoteChefRepositoryOutput: typeof import("./getRemoteChefRepository").getRemoteChefRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteChefRepository","getRemoteChefRepositoryOutput"], () => require("./getRemoteChefRepository"));

export { GetRemoteCocoapodsRepositoryArgs, GetRemoteCocoapodsRepositoryResult, GetRemoteCocoapodsRepositoryOutputArgs } from "./getRemoteCocoapodsRepository";
export const getRemoteCocoapodsRepository: typeof import("./getRemoteCocoapodsRepository").getRemoteCocoapodsRepository = null as any;
export const getRemoteCocoapodsRepositoryOutput: typeof import("./getRemoteCocoapodsRepository").getRemoteCocoapodsRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteCocoapodsRepository","getRemoteCocoapodsRepositoryOutput"], () => require("./getRemoteCocoapodsRepository"));

export { GetRemoteComposerRepositoryArgs, GetRemoteComposerRepositoryResult, GetRemoteComposerRepositoryOutputArgs } from "./getRemoteComposerRepository";
export const getRemoteComposerRepository: typeof import("./getRemoteComposerRepository").getRemoteComposerRepository = null as any;
export const getRemoteComposerRepositoryOutput: typeof import("./getRemoteComposerRepository").getRemoteComposerRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteComposerRepository","getRemoteComposerRepositoryOutput"], () => require("./getRemoteComposerRepository"));

export { GetRemoteConanRepositoryArgs, GetRemoteConanRepositoryResult, GetRemoteConanRepositoryOutputArgs } from "./getRemoteConanRepository";
export const getRemoteConanRepository: typeof import("./getRemoteConanRepository").getRemoteConanRepository = null as any;
export const getRemoteConanRepositoryOutput: typeof import("./getRemoteConanRepository").getRemoteConanRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteConanRepository","getRemoteConanRepositoryOutput"], () => require("./getRemoteConanRepository"));

export { GetRemoteCondaRepositoryArgs, GetRemoteCondaRepositoryResult, GetRemoteCondaRepositoryOutputArgs } from "./getRemoteCondaRepository";
export const getRemoteCondaRepository: typeof import("./getRemoteCondaRepository").getRemoteCondaRepository = null as any;
export const getRemoteCondaRepositoryOutput: typeof import("./getRemoteCondaRepository").getRemoteCondaRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteCondaRepository","getRemoteCondaRepositoryOutput"], () => require("./getRemoteCondaRepository"));

export { GetRemoteCranRepositoryArgs, GetRemoteCranRepositoryResult, GetRemoteCranRepositoryOutputArgs } from "./getRemoteCranRepository";
export const getRemoteCranRepository: typeof import("./getRemoteCranRepository").getRemoteCranRepository = null as any;
export const getRemoteCranRepositoryOutput: typeof import("./getRemoteCranRepository").getRemoteCranRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteCranRepository","getRemoteCranRepositoryOutput"], () => require("./getRemoteCranRepository"));

export { GetRemoteDebianRepositoryArgs, GetRemoteDebianRepositoryResult, GetRemoteDebianRepositoryOutputArgs } from "./getRemoteDebianRepository";
export const getRemoteDebianRepository: typeof import("./getRemoteDebianRepository").getRemoteDebianRepository = null as any;
export const getRemoteDebianRepositoryOutput: typeof import("./getRemoteDebianRepository").getRemoteDebianRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteDebianRepository","getRemoteDebianRepositoryOutput"], () => require("./getRemoteDebianRepository"));

export { GetRemoteDockerRepositoryArgs, GetRemoteDockerRepositoryResult, GetRemoteDockerRepositoryOutputArgs } from "./getRemoteDockerRepository";
export const getRemoteDockerRepository: typeof import("./getRemoteDockerRepository").getRemoteDockerRepository = null as any;
export const getRemoteDockerRepositoryOutput: typeof import("./getRemoteDockerRepository").getRemoteDockerRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteDockerRepository","getRemoteDockerRepositoryOutput"], () => require("./getRemoteDockerRepository"));

export { GetRemoteGemsRepositoryArgs, GetRemoteGemsRepositoryResult, GetRemoteGemsRepositoryOutputArgs } from "./getRemoteGemsRepository";
export const getRemoteGemsRepository: typeof import("./getRemoteGemsRepository").getRemoteGemsRepository = null as any;
export const getRemoteGemsRepositoryOutput: typeof import("./getRemoteGemsRepository").getRemoteGemsRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteGemsRepository","getRemoteGemsRepositoryOutput"], () => require("./getRemoteGemsRepository"));

export { GetRemoteGenericRepositoryArgs, GetRemoteGenericRepositoryResult, GetRemoteGenericRepositoryOutputArgs } from "./getRemoteGenericRepository";
export const getRemoteGenericRepository: typeof import("./getRemoteGenericRepository").getRemoteGenericRepository = null as any;
export const getRemoteGenericRepositoryOutput: typeof import("./getRemoteGenericRepository").getRemoteGenericRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteGenericRepository","getRemoteGenericRepositoryOutput"], () => require("./getRemoteGenericRepository"));

export { GetRemoteGitlfsRepositoryArgs, GetRemoteGitlfsRepositoryResult, GetRemoteGitlfsRepositoryOutputArgs } from "./getRemoteGitlfsRepository";
export const getRemoteGitlfsRepository: typeof import("./getRemoteGitlfsRepository").getRemoteGitlfsRepository = null as any;
export const getRemoteGitlfsRepositoryOutput: typeof import("./getRemoteGitlfsRepository").getRemoteGitlfsRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteGitlfsRepository","getRemoteGitlfsRepositoryOutput"], () => require("./getRemoteGitlfsRepository"));

export { GetRemoteGoRepositoryArgs, GetRemoteGoRepositoryResult, GetRemoteGoRepositoryOutputArgs } from "./getRemoteGoRepository";
export const getRemoteGoRepository: typeof import("./getRemoteGoRepository").getRemoteGoRepository = null as any;
export const getRemoteGoRepositoryOutput: typeof import("./getRemoteGoRepository").getRemoteGoRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteGoRepository","getRemoteGoRepositoryOutput"], () => require("./getRemoteGoRepository"));

export { GetRemoteGradleRepositoryArgs, GetRemoteGradleRepositoryResult, GetRemoteGradleRepositoryOutputArgs } from "./getRemoteGradleRepository";
export const getRemoteGradleRepository: typeof import("./getRemoteGradleRepository").getRemoteGradleRepository = null as any;
export const getRemoteGradleRepositoryOutput: typeof import("./getRemoteGradleRepository").getRemoteGradleRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteGradleRepository","getRemoteGradleRepositoryOutput"], () => require("./getRemoteGradleRepository"));

export { GetRemoteHelmRepositoryArgs, GetRemoteHelmRepositoryResult, GetRemoteHelmRepositoryOutputArgs } from "./getRemoteHelmRepository";
export const getRemoteHelmRepository: typeof import("./getRemoteHelmRepository").getRemoteHelmRepository = null as any;
export const getRemoteHelmRepositoryOutput: typeof import("./getRemoteHelmRepository").getRemoteHelmRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteHelmRepository","getRemoteHelmRepositoryOutput"], () => require("./getRemoteHelmRepository"));

export { GetRemoteIvyRepositoryArgs, GetRemoteIvyRepositoryResult, GetRemoteIvyRepositoryOutputArgs } from "./getRemoteIvyRepository";
export const getRemoteIvyRepository: typeof import("./getRemoteIvyRepository").getRemoteIvyRepository = null as any;
export const getRemoteIvyRepositoryOutput: typeof import("./getRemoteIvyRepository").getRemoteIvyRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteIvyRepository","getRemoteIvyRepositoryOutput"], () => require("./getRemoteIvyRepository"));

export { GetRemoteMavenRepositoryArgs, GetRemoteMavenRepositoryResult, GetRemoteMavenRepositoryOutputArgs } from "./getRemoteMavenRepository";
export const getRemoteMavenRepository: typeof import("./getRemoteMavenRepository").getRemoteMavenRepository = null as any;
export const getRemoteMavenRepositoryOutput: typeof import("./getRemoteMavenRepository").getRemoteMavenRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteMavenRepository","getRemoteMavenRepositoryOutput"], () => require("./getRemoteMavenRepository"));

export { GetRemoteNpmRepositoryArgs, GetRemoteNpmRepositoryResult, GetRemoteNpmRepositoryOutputArgs } from "./getRemoteNpmRepository";
export const getRemoteNpmRepository: typeof import("./getRemoteNpmRepository").getRemoteNpmRepository = null as any;
export const getRemoteNpmRepositoryOutput: typeof import("./getRemoteNpmRepository").getRemoteNpmRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteNpmRepository","getRemoteNpmRepositoryOutput"], () => require("./getRemoteNpmRepository"));

export { GetRemoteNugetRepositoryArgs, GetRemoteNugetRepositoryResult, GetRemoteNugetRepositoryOutputArgs } from "./getRemoteNugetRepository";
export const getRemoteNugetRepository: typeof import("./getRemoteNugetRepository").getRemoteNugetRepository = null as any;
export const getRemoteNugetRepositoryOutput: typeof import("./getRemoteNugetRepository").getRemoteNugetRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteNugetRepository","getRemoteNugetRepositoryOutput"], () => require("./getRemoteNugetRepository"));

export { GetRemoteOpkgRepositoryArgs, GetRemoteOpkgRepositoryResult, GetRemoteOpkgRepositoryOutputArgs } from "./getRemoteOpkgRepository";
export const getRemoteOpkgRepository: typeof import("./getRemoteOpkgRepository").getRemoteOpkgRepository = null as any;
export const getRemoteOpkgRepositoryOutput: typeof import("./getRemoteOpkgRepository").getRemoteOpkgRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteOpkgRepository","getRemoteOpkgRepositoryOutput"], () => require("./getRemoteOpkgRepository"));

export { GetRemoteP2RepositoryArgs, GetRemoteP2RepositoryResult, GetRemoteP2RepositoryOutputArgs } from "./getRemoteP2Repository";
export const getRemoteP2Repository: typeof import("./getRemoteP2Repository").getRemoteP2Repository = null as any;
export const getRemoteP2RepositoryOutput: typeof import("./getRemoteP2Repository").getRemoteP2RepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteP2Repository","getRemoteP2RepositoryOutput"], () => require("./getRemoteP2Repository"));

export { GetRemotePubRepositoryArgs, GetRemotePubRepositoryResult, GetRemotePubRepositoryOutputArgs } from "./getRemotePubRepository";
export const getRemotePubRepository: typeof import("./getRemotePubRepository").getRemotePubRepository = null as any;
export const getRemotePubRepositoryOutput: typeof import("./getRemotePubRepository").getRemotePubRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRemotePubRepository","getRemotePubRepositoryOutput"], () => require("./getRemotePubRepository"));

export { GetRemotePuppetRepositoryArgs, GetRemotePuppetRepositoryResult, GetRemotePuppetRepositoryOutputArgs } from "./getRemotePuppetRepository";
export const getRemotePuppetRepository: typeof import("./getRemotePuppetRepository").getRemotePuppetRepository = null as any;
export const getRemotePuppetRepositoryOutput: typeof import("./getRemotePuppetRepository").getRemotePuppetRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRemotePuppetRepository","getRemotePuppetRepositoryOutput"], () => require("./getRemotePuppetRepository"));

export { GetRemotePypiRepositoryArgs, GetRemotePypiRepositoryResult, GetRemotePypiRepositoryOutputArgs } from "./getRemotePypiRepository";
export const getRemotePypiRepository: typeof import("./getRemotePypiRepository").getRemotePypiRepository = null as any;
export const getRemotePypiRepositoryOutput: typeof import("./getRemotePypiRepository").getRemotePypiRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRemotePypiRepository","getRemotePypiRepositoryOutput"], () => require("./getRemotePypiRepository"));

export { GetRemoteRpmRepositoryArgs, GetRemoteRpmRepositoryResult, GetRemoteRpmRepositoryOutputArgs } from "./getRemoteRpmRepository";
export const getRemoteRpmRepository: typeof import("./getRemoteRpmRepository").getRemoteRpmRepository = null as any;
export const getRemoteRpmRepositoryOutput: typeof import("./getRemoteRpmRepository").getRemoteRpmRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteRpmRepository","getRemoteRpmRepositoryOutput"], () => require("./getRemoteRpmRepository"));

export { GetRemoteSbtRepositoryArgs, GetRemoteSbtRepositoryResult, GetRemoteSbtRepositoryOutputArgs } from "./getRemoteSbtRepository";
export const getRemoteSbtRepository: typeof import("./getRemoteSbtRepository").getRemoteSbtRepository = null as any;
export const getRemoteSbtRepositoryOutput: typeof import("./getRemoteSbtRepository").getRemoteSbtRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteSbtRepository","getRemoteSbtRepositoryOutput"], () => require("./getRemoteSbtRepository"));

export { GetRemoteSwiftRepositoryArgs, GetRemoteSwiftRepositoryResult, GetRemoteSwiftRepositoryOutputArgs } from "./getRemoteSwiftRepository";
export const getRemoteSwiftRepository: typeof import("./getRemoteSwiftRepository").getRemoteSwiftRepository = null as any;
export const getRemoteSwiftRepositoryOutput: typeof import("./getRemoteSwiftRepository").getRemoteSwiftRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteSwiftRepository","getRemoteSwiftRepositoryOutput"], () => require("./getRemoteSwiftRepository"));

export { GetRemoteTerraformRepositoryArgs, GetRemoteTerraformRepositoryResult, GetRemoteTerraformRepositoryOutputArgs } from "./getRemoteTerraformRepository";
export const getRemoteTerraformRepository: typeof import("./getRemoteTerraformRepository").getRemoteTerraformRepository = null as any;
export const getRemoteTerraformRepositoryOutput: typeof import("./getRemoteTerraformRepository").getRemoteTerraformRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteTerraformRepository","getRemoteTerraformRepositoryOutput"], () => require("./getRemoteTerraformRepository"));

export { GetRemoteVcsRepositoryArgs, GetRemoteVcsRepositoryResult, GetRemoteVcsRepositoryOutputArgs } from "./getRemoteVcsRepository";
export const getRemoteVcsRepository: typeof import("./getRemoteVcsRepository").getRemoteVcsRepository = null as any;
export const getRemoteVcsRepositoryOutput: typeof import("./getRemoteVcsRepository").getRemoteVcsRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteVcsRepository","getRemoteVcsRepositoryOutput"], () => require("./getRemoteVcsRepository"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GoRepositoryArgs, GoRepositoryState } from "./goRepository";
export type GoRepository = import("./goRepository").GoRepository;
export const GoRepository: typeof import("./goRepository").GoRepository = null as any;
utilities.lazyLoad(exports, ["GoRepository"], () => require("./goRepository"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { KeypairArgs, KeypairState } from "./keypair";
export type Keypair = import("./keypair").Keypair;
export const Keypair: typeof import("./keypair").Keypair = null as any;
utilities.lazyLoad(exports, ["Keypair"], () => require("./keypair"));

export { LdapGroupSettingArgs, LdapGroupSettingState } from "./ldapGroupSetting";
export type LdapGroupSetting = import("./ldapGroupSetting").LdapGroupSetting;
export const LdapGroupSetting: typeof import("./ldapGroupSetting").LdapGroupSetting = null as any;
utilities.lazyLoad(exports, ["LdapGroupSetting"], () => require("./ldapGroupSetting"));

export { LdapSettingArgs, LdapSettingState } from "./ldapSetting";
export type LdapSetting = import("./ldapSetting").LdapSetting;
export const LdapSetting: typeof import("./ldapSetting").LdapSetting = null as any;
utilities.lazyLoad(exports, ["LdapSetting"], () => require("./ldapSetting"));

export { LocalBowerRepositoryArgs, LocalBowerRepositoryState } from "./localBowerRepository";
export type LocalBowerRepository = import("./localBowerRepository").LocalBowerRepository;
export const LocalBowerRepository: typeof import("./localBowerRepository").LocalBowerRepository = null as any;
utilities.lazyLoad(exports, ["LocalBowerRepository"], () => require("./localBowerRepository"));

export { LocalCargoRepositoryArgs, LocalCargoRepositoryState } from "./localCargoRepository";
export type LocalCargoRepository = import("./localCargoRepository").LocalCargoRepository;
export const LocalCargoRepository: typeof import("./localCargoRepository").LocalCargoRepository = null as any;
utilities.lazyLoad(exports, ["LocalCargoRepository"], () => require("./localCargoRepository"));

export { LocalChefRepositoryArgs, LocalChefRepositoryState } from "./localChefRepository";
export type LocalChefRepository = import("./localChefRepository").LocalChefRepository;
export const LocalChefRepository: typeof import("./localChefRepository").LocalChefRepository = null as any;
utilities.lazyLoad(exports, ["LocalChefRepository"], () => require("./localChefRepository"));

export { LocalCocoapodsRepositoryArgs, LocalCocoapodsRepositoryState } from "./localCocoapodsRepository";
export type LocalCocoapodsRepository = import("./localCocoapodsRepository").LocalCocoapodsRepository;
export const LocalCocoapodsRepository: typeof import("./localCocoapodsRepository").LocalCocoapodsRepository = null as any;
utilities.lazyLoad(exports, ["LocalCocoapodsRepository"], () => require("./localCocoapodsRepository"));

export { LocalComposerRepositoryArgs, LocalComposerRepositoryState } from "./localComposerRepository";
export type LocalComposerRepository = import("./localComposerRepository").LocalComposerRepository;
export const LocalComposerRepository: typeof import("./localComposerRepository").LocalComposerRepository = null as any;
utilities.lazyLoad(exports, ["LocalComposerRepository"], () => require("./localComposerRepository"));

export { LocalConanRepositoryArgs, LocalConanRepositoryState } from "./localConanRepository";
export type LocalConanRepository = import("./localConanRepository").LocalConanRepository;
export const LocalConanRepository: typeof import("./localConanRepository").LocalConanRepository = null as any;
utilities.lazyLoad(exports, ["LocalConanRepository"], () => require("./localConanRepository"));

export { LocalCondaRepositoryArgs, LocalCondaRepositoryState } from "./localCondaRepository";
export type LocalCondaRepository = import("./localCondaRepository").LocalCondaRepository;
export const LocalCondaRepository: typeof import("./localCondaRepository").LocalCondaRepository = null as any;
utilities.lazyLoad(exports, ["LocalCondaRepository"], () => require("./localCondaRepository"));

export { LocalCranRepositoryArgs, LocalCranRepositoryState } from "./localCranRepository";
export type LocalCranRepository = import("./localCranRepository").LocalCranRepository;
export const LocalCranRepository: typeof import("./localCranRepository").LocalCranRepository = null as any;
utilities.lazyLoad(exports, ["LocalCranRepository"], () => require("./localCranRepository"));

export { LocalGemsRepositoryArgs, LocalGemsRepositoryState } from "./localGemsRepository";
export type LocalGemsRepository = import("./localGemsRepository").LocalGemsRepository;
export const LocalGemsRepository: typeof import("./localGemsRepository").LocalGemsRepository = null as any;
utilities.lazyLoad(exports, ["LocalGemsRepository"], () => require("./localGemsRepository"));

export { LocalGenericRepositoryArgs, LocalGenericRepositoryState } from "./localGenericRepository";
export type LocalGenericRepository = import("./localGenericRepository").LocalGenericRepository;
export const LocalGenericRepository: typeof import("./localGenericRepository").LocalGenericRepository = null as any;
utilities.lazyLoad(exports, ["LocalGenericRepository"], () => require("./localGenericRepository"));

export { LocalGitltfsRepositoryArgs, LocalGitltfsRepositoryState } from "./localGitltfsRepository";
export type LocalGitltfsRepository = import("./localGitltfsRepository").LocalGitltfsRepository;
export const LocalGitltfsRepository: typeof import("./localGitltfsRepository").LocalGitltfsRepository = null as any;
utilities.lazyLoad(exports, ["LocalGitltfsRepository"], () => require("./localGitltfsRepository"));

export { LocalGoRepositoryArgs, LocalGoRepositoryState } from "./localGoRepository";
export type LocalGoRepository = import("./localGoRepository").LocalGoRepository;
export const LocalGoRepository: typeof import("./localGoRepository").LocalGoRepository = null as any;
utilities.lazyLoad(exports, ["LocalGoRepository"], () => require("./localGoRepository"));

export { LocalGradleRepositoryArgs, LocalGradleRepositoryState } from "./localGradleRepository";
export type LocalGradleRepository = import("./localGradleRepository").LocalGradleRepository;
export const LocalGradleRepository: typeof import("./localGradleRepository").LocalGradleRepository = null as any;
utilities.lazyLoad(exports, ["LocalGradleRepository"], () => require("./localGradleRepository"));

export { LocalHelmRepositoryArgs, LocalHelmRepositoryState } from "./localHelmRepository";
export type LocalHelmRepository = import("./localHelmRepository").LocalHelmRepository;
export const LocalHelmRepository: typeof import("./localHelmRepository").LocalHelmRepository = null as any;
utilities.lazyLoad(exports, ["LocalHelmRepository"], () => require("./localHelmRepository"));

export { LocalIvyRepositoryArgs, LocalIvyRepositoryState } from "./localIvyRepository";
export type LocalIvyRepository = import("./localIvyRepository").LocalIvyRepository;
export const LocalIvyRepository: typeof import("./localIvyRepository").LocalIvyRepository = null as any;
utilities.lazyLoad(exports, ["LocalIvyRepository"], () => require("./localIvyRepository"));

export { LocalMavenRepositoryArgs, LocalMavenRepositoryState } from "./localMavenRepository";
export type LocalMavenRepository = import("./localMavenRepository").LocalMavenRepository;
export const LocalMavenRepository: typeof import("./localMavenRepository").LocalMavenRepository = null as any;
utilities.lazyLoad(exports, ["LocalMavenRepository"], () => require("./localMavenRepository"));

export { LocalNpmRepositoryArgs, LocalNpmRepositoryState } from "./localNpmRepository";
export type LocalNpmRepository = import("./localNpmRepository").LocalNpmRepository;
export const LocalNpmRepository: typeof import("./localNpmRepository").LocalNpmRepository = null as any;
utilities.lazyLoad(exports, ["LocalNpmRepository"], () => require("./localNpmRepository"));

export { LocalNugetRepositoryArgs, LocalNugetRepositoryState } from "./localNugetRepository";
export type LocalNugetRepository = import("./localNugetRepository").LocalNugetRepository;
export const LocalNugetRepository: typeof import("./localNugetRepository").LocalNugetRepository = null as any;
utilities.lazyLoad(exports, ["LocalNugetRepository"], () => require("./localNugetRepository"));

export { LocalOpkgRepositoryArgs, LocalOpkgRepositoryState } from "./localOpkgRepository";
export type LocalOpkgRepository = import("./localOpkgRepository").LocalOpkgRepository;
export const LocalOpkgRepository: typeof import("./localOpkgRepository").LocalOpkgRepository = null as any;
utilities.lazyLoad(exports, ["LocalOpkgRepository"], () => require("./localOpkgRepository"));

export { LocalPubRepositoryArgs, LocalPubRepositoryState } from "./localPubRepository";
export type LocalPubRepository = import("./localPubRepository").LocalPubRepository;
export const LocalPubRepository: typeof import("./localPubRepository").LocalPubRepository = null as any;
utilities.lazyLoad(exports, ["LocalPubRepository"], () => require("./localPubRepository"));

export { LocalPuppetRepositoryArgs, LocalPuppetRepositoryState } from "./localPuppetRepository";
export type LocalPuppetRepository = import("./localPuppetRepository").LocalPuppetRepository;
export const LocalPuppetRepository: typeof import("./localPuppetRepository").LocalPuppetRepository = null as any;
utilities.lazyLoad(exports, ["LocalPuppetRepository"], () => require("./localPuppetRepository"));

export { LocalPypiRepositoryArgs, LocalPypiRepositoryState } from "./localPypiRepository";
export type LocalPypiRepository = import("./localPypiRepository").LocalPypiRepository;
export const LocalPypiRepository: typeof import("./localPypiRepository").LocalPypiRepository = null as any;
utilities.lazyLoad(exports, ["LocalPypiRepository"], () => require("./localPypiRepository"));

export { LocalRpmRepositoryArgs, LocalRpmRepositoryState } from "./localRpmRepository";
export type LocalRpmRepository = import("./localRpmRepository").LocalRpmRepository;
export const LocalRpmRepository: typeof import("./localRpmRepository").LocalRpmRepository = null as any;
utilities.lazyLoad(exports, ["LocalRpmRepository"], () => require("./localRpmRepository"));

export { LocalSbtRepositoryArgs, LocalSbtRepositoryState } from "./localSbtRepository";
export type LocalSbtRepository = import("./localSbtRepository").LocalSbtRepository;
export const LocalSbtRepository: typeof import("./localSbtRepository").LocalSbtRepository = null as any;
utilities.lazyLoad(exports, ["LocalSbtRepository"], () => require("./localSbtRepository"));

export { LocalSwiftRepositoryArgs, LocalSwiftRepositoryState } from "./localSwiftRepository";
export type LocalSwiftRepository = import("./localSwiftRepository").LocalSwiftRepository;
export const LocalSwiftRepository: typeof import("./localSwiftRepository").LocalSwiftRepository = null as any;
utilities.lazyLoad(exports, ["LocalSwiftRepository"], () => require("./localSwiftRepository"));

export { LocalTerraformBackendRepositoryArgs, LocalTerraformBackendRepositoryState } from "./localTerraformBackendRepository";
export type LocalTerraformBackendRepository = import("./localTerraformBackendRepository").LocalTerraformBackendRepository;
export const LocalTerraformBackendRepository: typeof import("./localTerraformBackendRepository").LocalTerraformBackendRepository = null as any;
utilities.lazyLoad(exports, ["LocalTerraformBackendRepository"], () => require("./localTerraformBackendRepository"));

export { LocalTerraformModuleRepositoryArgs, LocalTerraformModuleRepositoryState } from "./localTerraformModuleRepository";
export type LocalTerraformModuleRepository = import("./localTerraformModuleRepository").LocalTerraformModuleRepository;
export const LocalTerraformModuleRepository: typeof import("./localTerraformModuleRepository").LocalTerraformModuleRepository = null as any;
utilities.lazyLoad(exports, ["LocalTerraformModuleRepository"], () => require("./localTerraformModuleRepository"));

export { LocalTerraformProviderRepositoryArgs, LocalTerraformProviderRepositoryState } from "./localTerraformProviderRepository";
export type LocalTerraformProviderRepository = import("./localTerraformProviderRepository").LocalTerraformProviderRepository;
export const LocalTerraformProviderRepository: typeof import("./localTerraformProviderRepository").LocalTerraformProviderRepository = null as any;
utilities.lazyLoad(exports, ["LocalTerraformProviderRepository"], () => require("./localTerraformProviderRepository"));

export { LocalVagrantRepositoryArgs, LocalVagrantRepositoryState } from "./localVagrantRepository";
export type LocalVagrantRepository = import("./localVagrantRepository").LocalVagrantRepository;
export const LocalVagrantRepository: typeof import("./localVagrantRepository").LocalVagrantRepository = null as any;
utilities.lazyLoad(exports, ["LocalVagrantRepository"], () => require("./localVagrantRepository"));

export { ManagedUserArgs, ManagedUserState } from "./managedUser";
export type ManagedUser = import("./managedUser").ManagedUser;
export const ManagedUser: typeof import("./managedUser").ManagedUser = null as any;
utilities.lazyLoad(exports, ["ManagedUser"], () => require("./managedUser"));

export { MavenRepositoryArgs, MavenRepositoryState } from "./mavenRepository";
export type MavenRepository = import("./mavenRepository").MavenRepository;
export const MavenRepository: typeof import("./mavenRepository").MavenRepository = null as any;
utilities.lazyLoad(exports, ["MavenRepository"], () => require("./mavenRepository"));

export { OauthSettingsArgs, OauthSettingsState } from "./oauthSettings";
export type OauthSettings = import("./oauthSettings").OauthSettings;
export const OauthSettings: typeof import("./oauthSettings").OauthSettings = null as any;
utilities.lazyLoad(exports, ["OauthSettings"], () => require("./oauthSettings"));

export { PermissionTargetArgs, PermissionTargetState } from "./permissionTarget";
export type PermissionTarget = import("./permissionTarget").PermissionTarget;
export const PermissionTarget: typeof import("./permissionTarget").PermissionTarget = null as any;
utilities.lazyLoad(exports, ["PermissionTarget"], () => require("./permissionTarget"));

export { PermissionTargetsArgs, PermissionTargetsState } from "./permissionTargets";
export type PermissionTargets = import("./permissionTargets").PermissionTargets;
export const PermissionTargets: typeof import("./permissionTargets").PermissionTargets = null as any;
utilities.lazyLoad(exports, ["PermissionTargets"], () => require("./permissionTargets"));

export { PropertySetArgs, PropertySetState } from "./propertySet";
export type PropertySet = import("./propertySet").PropertySet;
export const PropertySet: typeof import("./propertySet").PropertySet = null as any;
utilities.lazyLoad(exports, ["PropertySet"], () => require("./propertySet"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ProxyArgs, ProxyState } from "./proxy";
export type Proxy = import("./proxy").Proxy;
export const Proxy: typeof import("./proxy").Proxy = null as any;
utilities.lazyLoad(exports, ["Proxy"], () => require("./proxy"));

export { PullReplicationArgs, PullReplicationState } from "./pullReplication";
export type PullReplication = import("./pullReplication").PullReplication;
export const PullReplication: typeof import("./pullReplication").PullReplication = null as any;
utilities.lazyLoad(exports, ["PullReplication"], () => require("./pullReplication"));

export { PushReplicationArgs, PushReplicationState } from "./pushReplication";
export type PushReplication = import("./pushReplication").PushReplication;
export const PushReplication: typeof import("./pushReplication").PushReplication = null as any;
utilities.lazyLoad(exports, ["PushReplication"], () => require("./pushReplication"));

export { ReleaseBundleWebhookArgs, ReleaseBundleWebhookState } from "./releaseBundleWebhook";
export type ReleaseBundleWebhook = import("./releaseBundleWebhook").ReleaseBundleWebhook;
export const ReleaseBundleWebhook: typeof import("./releaseBundleWebhook").ReleaseBundleWebhook = null as any;
utilities.lazyLoad(exports, ["ReleaseBundleWebhook"], () => require("./releaseBundleWebhook"));

export { RemoteAlpineRepositoryArgs, RemoteAlpineRepositoryState } from "./remoteAlpineRepository";
export type RemoteAlpineRepository = import("./remoteAlpineRepository").RemoteAlpineRepository;
export const RemoteAlpineRepository: typeof import("./remoteAlpineRepository").RemoteAlpineRepository = null as any;
utilities.lazyLoad(exports, ["RemoteAlpineRepository"], () => require("./remoteAlpineRepository"));

export { RemoteBowerRepositoryArgs, RemoteBowerRepositoryState } from "./remoteBowerRepository";
export type RemoteBowerRepository = import("./remoteBowerRepository").RemoteBowerRepository;
export const RemoteBowerRepository: typeof import("./remoteBowerRepository").RemoteBowerRepository = null as any;
utilities.lazyLoad(exports, ["RemoteBowerRepository"], () => require("./remoteBowerRepository"));

export { RemoteCargoRepositoryArgs, RemoteCargoRepositoryState } from "./remoteCargoRepository";
export type RemoteCargoRepository = import("./remoteCargoRepository").RemoteCargoRepository;
export const RemoteCargoRepository: typeof import("./remoteCargoRepository").RemoteCargoRepository = null as any;
utilities.lazyLoad(exports, ["RemoteCargoRepository"], () => require("./remoteCargoRepository"));

export { RemoteChefRepositoryArgs, RemoteChefRepositoryState } from "./remoteChefRepository";
export type RemoteChefRepository = import("./remoteChefRepository").RemoteChefRepository;
export const RemoteChefRepository: typeof import("./remoteChefRepository").RemoteChefRepository = null as any;
utilities.lazyLoad(exports, ["RemoteChefRepository"], () => require("./remoteChefRepository"));

export { RemoteCocoapodsRepositoryArgs, RemoteCocoapodsRepositoryState } from "./remoteCocoapodsRepository";
export type RemoteCocoapodsRepository = import("./remoteCocoapodsRepository").RemoteCocoapodsRepository;
export const RemoteCocoapodsRepository: typeof import("./remoteCocoapodsRepository").RemoteCocoapodsRepository = null as any;
utilities.lazyLoad(exports, ["RemoteCocoapodsRepository"], () => require("./remoteCocoapodsRepository"));

export { RemoteComposerRepositoryArgs, RemoteComposerRepositoryState } from "./remoteComposerRepository";
export type RemoteComposerRepository = import("./remoteComposerRepository").RemoteComposerRepository;
export const RemoteComposerRepository: typeof import("./remoteComposerRepository").RemoteComposerRepository = null as any;
utilities.lazyLoad(exports, ["RemoteComposerRepository"], () => require("./remoteComposerRepository"));

export { RemoteConanRepositoryArgs, RemoteConanRepositoryState } from "./remoteConanRepository";
export type RemoteConanRepository = import("./remoteConanRepository").RemoteConanRepository;
export const RemoteConanRepository: typeof import("./remoteConanRepository").RemoteConanRepository = null as any;
utilities.lazyLoad(exports, ["RemoteConanRepository"], () => require("./remoteConanRepository"));

export { RemoteCondaRepositoryArgs, RemoteCondaRepositoryState } from "./remoteCondaRepository";
export type RemoteCondaRepository = import("./remoteCondaRepository").RemoteCondaRepository;
export const RemoteCondaRepository: typeof import("./remoteCondaRepository").RemoteCondaRepository = null as any;
utilities.lazyLoad(exports, ["RemoteCondaRepository"], () => require("./remoteCondaRepository"));

export { RemoteCranRepositoryArgs, RemoteCranRepositoryState } from "./remoteCranRepository";
export type RemoteCranRepository = import("./remoteCranRepository").RemoteCranRepository;
export const RemoteCranRepository: typeof import("./remoteCranRepository").RemoteCranRepository = null as any;
utilities.lazyLoad(exports, ["RemoteCranRepository"], () => require("./remoteCranRepository"));

export { RemoteDebianRepositoryArgs, RemoteDebianRepositoryState } from "./remoteDebianRepository";
export type RemoteDebianRepository = import("./remoteDebianRepository").RemoteDebianRepository;
export const RemoteDebianRepository: typeof import("./remoteDebianRepository").RemoteDebianRepository = null as any;
utilities.lazyLoad(exports, ["RemoteDebianRepository"], () => require("./remoteDebianRepository"));

export { RemoteDockerRepositoryArgs, RemoteDockerRepositoryState } from "./remoteDockerRepository";
export type RemoteDockerRepository = import("./remoteDockerRepository").RemoteDockerRepository;
export const RemoteDockerRepository: typeof import("./remoteDockerRepository").RemoteDockerRepository = null as any;
utilities.lazyLoad(exports, ["RemoteDockerRepository"], () => require("./remoteDockerRepository"));

export { RemoteGemsRepositoryArgs, RemoteGemsRepositoryState } from "./remoteGemsRepository";
export type RemoteGemsRepository = import("./remoteGemsRepository").RemoteGemsRepository;
export const RemoteGemsRepository: typeof import("./remoteGemsRepository").RemoteGemsRepository = null as any;
utilities.lazyLoad(exports, ["RemoteGemsRepository"], () => require("./remoteGemsRepository"));

export { RemoteGenericRepositoryArgs, RemoteGenericRepositoryState } from "./remoteGenericRepository";
export type RemoteGenericRepository = import("./remoteGenericRepository").RemoteGenericRepository;
export const RemoteGenericRepository: typeof import("./remoteGenericRepository").RemoteGenericRepository = null as any;
utilities.lazyLoad(exports, ["RemoteGenericRepository"], () => require("./remoteGenericRepository"));

export { RemoteGitlfsRepositoryArgs, RemoteGitlfsRepositoryState } from "./remoteGitlfsRepository";
export type RemoteGitlfsRepository = import("./remoteGitlfsRepository").RemoteGitlfsRepository;
export const RemoteGitlfsRepository: typeof import("./remoteGitlfsRepository").RemoteGitlfsRepository = null as any;
utilities.lazyLoad(exports, ["RemoteGitlfsRepository"], () => require("./remoteGitlfsRepository"));

export { RemoteGoRepositoryArgs, RemoteGoRepositoryState } from "./remoteGoRepository";
export type RemoteGoRepository = import("./remoteGoRepository").RemoteGoRepository;
export const RemoteGoRepository: typeof import("./remoteGoRepository").RemoteGoRepository = null as any;
utilities.lazyLoad(exports, ["RemoteGoRepository"], () => require("./remoteGoRepository"));

export { RemoteGradleRepositoryArgs, RemoteGradleRepositoryState } from "./remoteGradleRepository";
export type RemoteGradleRepository = import("./remoteGradleRepository").RemoteGradleRepository;
export const RemoteGradleRepository: typeof import("./remoteGradleRepository").RemoteGradleRepository = null as any;
utilities.lazyLoad(exports, ["RemoteGradleRepository"], () => require("./remoteGradleRepository"));

export { RemoteHelmRepositoryArgs, RemoteHelmRepositoryState } from "./remoteHelmRepository";
export type RemoteHelmRepository = import("./remoteHelmRepository").RemoteHelmRepository;
export const RemoteHelmRepository: typeof import("./remoteHelmRepository").RemoteHelmRepository = null as any;
utilities.lazyLoad(exports, ["RemoteHelmRepository"], () => require("./remoteHelmRepository"));

export { RemoteIvyRepositoryArgs, RemoteIvyRepositoryState } from "./remoteIvyRepository";
export type RemoteIvyRepository = import("./remoteIvyRepository").RemoteIvyRepository;
export const RemoteIvyRepository: typeof import("./remoteIvyRepository").RemoteIvyRepository = null as any;
utilities.lazyLoad(exports, ["RemoteIvyRepository"], () => require("./remoteIvyRepository"));

export { RemoteMavenRepositoryArgs, RemoteMavenRepositoryState } from "./remoteMavenRepository";
export type RemoteMavenRepository = import("./remoteMavenRepository").RemoteMavenRepository;
export const RemoteMavenRepository: typeof import("./remoteMavenRepository").RemoteMavenRepository = null as any;
utilities.lazyLoad(exports, ["RemoteMavenRepository"], () => require("./remoteMavenRepository"));

export { RemoteNpmRepositoryArgs, RemoteNpmRepositoryState } from "./remoteNpmRepository";
export type RemoteNpmRepository = import("./remoteNpmRepository").RemoteNpmRepository;
export const RemoteNpmRepository: typeof import("./remoteNpmRepository").RemoteNpmRepository = null as any;
utilities.lazyLoad(exports, ["RemoteNpmRepository"], () => require("./remoteNpmRepository"));

export { RemoteNugetRepositoryArgs, RemoteNugetRepositoryState } from "./remoteNugetRepository";
export type RemoteNugetRepository = import("./remoteNugetRepository").RemoteNugetRepository;
export const RemoteNugetRepository: typeof import("./remoteNugetRepository").RemoteNugetRepository = null as any;
utilities.lazyLoad(exports, ["RemoteNugetRepository"], () => require("./remoteNugetRepository"));

export { RemoteOpkgRepositoryArgs, RemoteOpkgRepositoryState } from "./remoteOpkgRepository";
export type RemoteOpkgRepository = import("./remoteOpkgRepository").RemoteOpkgRepository;
export const RemoteOpkgRepository: typeof import("./remoteOpkgRepository").RemoteOpkgRepository = null as any;
utilities.lazyLoad(exports, ["RemoteOpkgRepository"], () => require("./remoteOpkgRepository"));

export { RemoteP2RepositoryArgs, RemoteP2RepositoryState } from "./remoteP2Repository";
export type RemoteP2Repository = import("./remoteP2Repository").RemoteP2Repository;
export const RemoteP2Repository: typeof import("./remoteP2Repository").RemoteP2Repository = null as any;
utilities.lazyLoad(exports, ["RemoteP2Repository"], () => require("./remoteP2Repository"));

export { RemotePubRepositoryArgs, RemotePubRepositoryState } from "./remotePubRepository";
export type RemotePubRepository = import("./remotePubRepository").RemotePubRepository;
export const RemotePubRepository: typeof import("./remotePubRepository").RemotePubRepository = null as any;
utilities.lazyLoad(exports, ["RemotePubRepository"], () => require("./remotePubRepository"));

export { RemotePuppetRepositoryArgs, RemotePuppetRepositoryState } from "./remotePuppetRepository";
export type RemotePuppetRepository = import("./remotePuppetRepository").RemotePuppetRepository;
export const RemotePuppetRepository: typeof import("./remotePuppetRepository").RemotePuppetRepository = null as any;
utilities.lazyLoad(exports, ["RemotePuppetRepository"], () => require("./remotePuppetRepository"));

export { RemotePypiRepositoryArgs, RemotePypiRepositoryState } from "./remotePypiRepository";
export type RemotePypiRepository = import("./remotePypiRepository").RemotePypiRepository;
export const RemotePypiRepository: typeof import("./remotePypiRepository").RemotePypiRepository = null as any;
utilities.lazyLoad(exports, ["RemotePypiRepository"], () => require("./remotePypiRepository"));

export { RemoteRpmRepositoryArgs, RemoteRpmRepositoryState } from "./remoteRpmRepository";
export type RemoteRpmRepository = import("./remoteRpmRepository").RemoteRpmRepository;
export const RemoteRpmRepository: typeof import("./remoteRpmRepository").RemoteRpmRepository = null as any;
utilities.lazyLoad(exports, ["RemoteRpmRepository"], () => require("./remoteRpmRepository"));

export { RemoteSbtRepositoryArgs, RemoteSbtRepositoryState } from "./remoteSbtRepository";
export type RemoteSbtRepository = import("./remoteSbtRepository").RemoteSbtRepository;
export const RemoteSbtRepository: typeof import("./remoteSbtRepository").RemoteSbtRepository = null as any;
utilities.lazyLoad(exports, ["RemoteSbtRepository"], () => require("./remoteSbtRepository"));

export { RemoteSwiftRepositoryArgs, RemoteSwiftRepositoryState } from "./remoteSwiftRepository";
export type RemoteSwiftRepository = import("./remoteSwiftRepository").RemoteSwiftRepository;
export const RemoteSwiftRepository: typeof import("./remoteSwiftRepository").RemoteSwiftRepository = null as any;
utilities.lazyLoad(exports, ["RemoteSwiftRepository"], () => require("./remoteSwiftRepository"));

export { RemoteTerraformRepositoryArgs, RemoteTerraformRepositoryState } from "./remoteTerraformRepository";
export type RemoteTerraformRepository = import("./remoteTerraformRepository").RemoteTerraformRepository;
export const RemoteTerraformRepository: typeof import("./remoteTerraformRepository").RemoteTerraformRepository = null as any;
utilities.lazyLoad(exports, ["RemoteTerraformRepository"], () => require("./remoteTerraformRepository"));

export { RemoteVcsRepositoryArgs, RemoteVcsRepositoryState } from "./remoteVcsRepository";
export type RemoteVcsRepository = import("./remoteVcsRepository").RemoteVcsRepository;
export const RemoteVcsRepository: typeof import("./remoteVcsRepository").RemoteVcsRepository = null as any;
utilities.lazyLoad(exports, ["RemoteVcsRepository"], () => require("./remoteVcsRepository"));

export { ReplicationConfigArgs, ReplicationConfigState } from "./replicationConfig";
export type ReplicationConfig = import("./replicationConfig").ReplicationConfig;
export const ReplicationConfig: typeof import("./replicationConfig").ReplicationConfig = null as any;
utilities.lazyLoad(exports, ["ReplicationConfig"], () => require("./replicationConfig"));

export { RepositoryLayoutArgs, RepositoryLayoutState } from "./repositoryLayout";
export type RepositoryLayout = import("./repositoryLayout").RepositoryLayout;
export const RepositoryLayout: typeof import("./repositoryLayout").RepositoryLayout = null as any;
utilities.lazyLoad(exports, ["RepositoryLayout"], () => require("./repositoryLayout"));

export { SamlSettingsArgs, SamlSettingsState } from "./samlSettings";
export type SamlSettings = import("./samlSettings").SamlSettings;
export const SamlSettings: typeof import("./samlSettings").SamlSettings = null as any;
utilities.lazyLoad(exports, ["SamlSettings"], () => require("./samlSettings"));

export { ScopedTokenArgs, ScopedTokenState } from "./scopedToken";
export type ScopedToken = import("./scopedToken").ScopedToken;
export const ScopedToken: typeof import("./scopedToken").ScopedToken = null as any;
utilities.lazyLoad(exports, ["ScopedToken"], () => require("./scopedToken"));

export { SingleReplicationConfigArgs, SingleReplicationConfigState } from "./singleReplicationConfig";
export type SingleReplicationConfig = import("./singleReplicationConfig").SingleReplicationConfig;
export const SingleReplicationConfig: typeof import("./singleReplicationConfig").SingleReplicationConfig = null as any;
utilities.lazyLoad(exports, ["SingleReplicationConfig"], () => require("./singleReplicationConfig"));

export { UnmanagedUserArgs, UnmanagedUserState } from "./unmanagedUser";
export type UnmanagedUser = import("./unmanagedUser").UnmanagedUser;
export const UnmanagedUser: typeof import("./unmanagedUser").UnmanagedUser = null as any;
utilities.lazyLoad(exports, ["UnmanagedUser"], () => require("./unmanagedUser"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { VirtualAlpineRepositoryArgs, VirtualAlpineRepositoryState } from "./virtualAlpineRepository";
export type VirtualAlpineRepository = import("./virtualAlpineRepository").VirtualAlpineRepository;
export const VirtualAlpineRepository: typeof import("./virtualAlpineRepository").VirtualAlpineRepository = null as any;
utilities.lazyLoad(exports, ["VirtualAlpineRepository"], () => require("./virtualAlpineRepository"));

export { VirtualBowerRepositoryArgs, VirtualBowerRepositoryState } from "./virtualBowerRepository";
export type VirtualBowerRepository = import("./virtualBowerRepository").VirtualBowerRepository;
export const VirtualBowerRepository: typeof import("./virtualBowerRepository").VirtualBowerRepository = null as any;
utilities.lazyLoad(exports, ["VirtualBowerRepository"], () => require("./virtualBowerRepository"));

export { VirtualChefRepositoryArgs, VirtualChefRepositoryState } from "./virtualChefRepository";
export type VirtualChefRepository = import("./virtualChefRepository").VirtualChefRepository;
export const VirtualChefRepository: typeof import("./virtualChefRepository").VirtualChefRepository = null as any;
utilities.lazyLoad(exports, ["VirtualChefRepository"], () => require("./virtualChefRepository"));

export { VirtualComposerRepositoryArgs, VirtualComposerRepositoryState } from "./virtualComposerRepository";
export type VirtualComposerRepository = import("./virtualComposerRepository").VirtualComposerRepository;
export const VirtualComposerRepository: typeof import("./virtualComposerRepository").VirtualComposerRepository = null as any;
utilities.lazyLoad(exports, ["VirtualComposerRepository"], () => require("./virtualComposerRepository"));

export { VirtualConanRepositoryArgs, VirtualConanRepositoryState } from "./virtualConanRepository";
export type VirtualConanRepository = import("./virtualConanRepository").VirtualConanRepository;
export const VirtualConanRepository: typeof import("./virtualConanRepository").VirtualConanRepository = null as any;
utilities.lazyLoad(exports, ["VirtualConanRepository"], () => require("./virtualConanRepository"));

export { VirtualCondaRepositoryArgs, VirtualCondaRepositoryState } from "./virtualCondaRepository";
export type VirtualCondaRepository = import("./virtualCondaRepository").VirtualCondaRepository;
export const VirtualCondaRepository: typeof import("./virtualCondaRepository").VirtualCondaRepository = null as any;
utilities.lazyLoad(exports, ["VirtualCondaRepository"], () => require("./virtualCondaRepository"));

export { VirtualCranRepositoryArgs, VirtualCranRepositoryState } from "./virtualCranRepository";
export type VirtualCranRepository = import("./virtualCranRepository").VirtualCranRepository;
export const VirtualCranRepository: typeof import("./virtualCranRepository").VirtualCranRepository = null as any;
utilities.lazyLoad(exports, ["VirtualCranRepository"], () => require("./virtualCranRepository"));

export { VirtualDebianRepositoryArgs, VirtualDebianRepositoryState } from "./virtualDebianRepository";
export type VirtualDebianRepository = import("./virtualDebianRepository").VirtualDebianRepository;
export const VirtualDebianRepository: typeof import("./virtualDebianRepository").VirtualDebianRepository = null as any;
utilities.lazyLoad(exports, ["VirtualDebianRepository"], () => require("./virtualDebianRepository"));

export { VirtualDockerRepositoryArgs, VirtualDockerRepositoryState } from "./virtualDockerRepository";
export type VirtualDockerRepository = import("./virtualDockerRepository").VirtualDockerRepository;
export const VirtualDockerRepository: typeof import("./virtualDockerRepository").VirtualDockerRepository = null as any;
utilities.lazyLoad(exports, ["VirtualDockerRepository"], () => require("./virtualDockerRepository"));

export { VirtualGemsRepositoryArgs, VirtualGemsRepositoryState } from "./virtualGemsRepository";
export type VirtualGemsRepository = import("./virtualGemsRepository").VirtualGemsRepository;
export const VirtualGemsRepository: typeof import("./virtualGemsRepository").VirtualGemsRepository = null as any;
utilities.lazyLoad(exports, ["VirtualGemsRepository"], () => require("./virtualGemsRepository"));

export { VirtualGenericRepositoryArgs, VirtualGenericRepositoryState } from "./virtualGenericRepository";
export type VirtualGenericRepository = import("./virtualGenericRepository").VirtualGenericRepository;
export const VirtualGenericRepository: typeof import("./virtualGenericRepository").VirtualGenericRepository = null as any;
utilities.lazyLoad(exports, ["VirtualGenericRepository"], () => require("./virtualGenericRepository"));

export { VirtualGitlfsRepositoryArgs, VirtualGitlfsRepositoryState } from "./virtualGitlfsRepository";
export type VirtualGitlfsRepository = import("./virtualGitlfsRepository").VirtualGitlfsRepository;
export const VirtualGitlfsRepository: typeof import("./virtualGitlfsRepository").VirtualGitlfsRepository = null as any;
utilities.lazyLoad(exports, ["VirtualGitlfsRepository"], () => require("./virtualGitlfsRepository"));

export { VirtualGradleRepositoryArgs, VirtualGradleRepositoryState } from "./virtualGradleRepository";
export type VirtualGradleRepository = import("./virtualGradleRepository").VirtualGradleRepository;
export const VirtualGradleRepository: typeof import("./virtualGradleRepository").VirtualGradleRepository = null as any;
utilities.lazyLoad(exports, ["VirtualGradleRepository"], () => require("./virtualGradleRepository"));

export { VirtualHelmRepositoryArgs, VirtualHelmRepositoryState } from "./virtualHelmRepository";
export type VirtualHelmRepository = import("./virtualHelmRepository").VirtualHelmRepository;
export const VirtualHelmRepository: typeof import("./virtualHelmRepository").VirtualHelmRepository = null as any;
utilities.lazyLoad(exports, ["VirtualHelmRepository"], () => require("./virtualHelmRepository"));

export { VirtualIvyRepositoryArgs, VirtualIvyRepositoryState } from "./virtualIvyRepository";
export type VirtualIvyRepository = import("./virtualIvyRepository").VirtualIvyRepository;
export const VirtualIvyRepository: typeof import("./virtualIvyRepository").VirtualIvyRepository = null as any;
utilities.lazyLoad(exports, ["VirtualIvyRepository"], () => require("./virtualIvyRepository"));

export { VirtualNpmRepositoryArgs, VirtualNpmRepositoryState } from "./virtualNpmRepository";
export type VirtualNpmRepository = import("./virtualNpmRepository").VirtualNpmRepository;
export const VirtualNpmRepository: typeof import("./virtualNpmRepository").VirtualNpmRepository = null as any;
utilities.lazyLoad(exports, ["VirtualNpmRepository"], () => require("./virtualNpmRepository"));

export { VirtualNugetRepositoryArgs, VirtualNugetRepositoryState } from "./virtualNugetRepository";
export type VirtualNugetRepository = import("./virtualNugetRepository").VirtualNugetRepository;
export const VirtualNugetRepository: typeof import("./virtualNugetRepository").VirtualNugetRepository = null as any;
utilities.lazyLoad(exports, ["VirtualNugetRepository"], () => require("./virtualNugetRepository"));

export { VirtualP2RepositoryArgs, VirtualP2RepositoryState } from "./virtualP2Repository";
export type VirtualP2Repository = import("./virtualP2Repository").VirtualP2Repository;
export const VirtualP2Repository: typeof import("./virtualP2Repository").VirtualP2Repository = null as any;
utilities.lazyLoad(exports, ["VirtualP2Repository"], () => require("./virtualP2Repository"));

export { VirtualPubRepositoryArgs, VirtualPubRepositoryState } from "./virtualPubRepository";
export type VirtualPubRepository = import("./virtualPubRepository").VirtualPubRepository;
export const VirtualPubRepository: typeof import("./virtualPubRepository").VirtualPubRepository = null as any;
utilities.lazyLoad(exports, ["VirtualPubRepository"], () => require("./virtualPubRepository"));

export { VirtualPuppetRepositoryArgs, VirtualPuppetRepositoryState } from "./virtualPuppetRepository";
export type VirtualPuppetRepository = import("./virtualPuppetRepository").VirtualPuppetRepository;
export const VirtualPuppetRepository: typeof import("./virtualPuppetRepository").VirtualPuppetRepository = null as any;
utilities.lazyLoad(exports, ["VirtualPuppetRepository"], () => require("./virtualPuppetRepository"));

export { VirtualPypiRepositoryArgs, VirtualPypiRepositoryState } from "./virtualPypiRepository";
export type VirtualPypiRepository = import("./virtualPypiRepository").VirtualPypiRepository;
export const VirtualPypiRepository: typeof import("./virtualPypiRepository").VirtualPypiRepository = null as any;
utilities.lazyLoad(exports, ["VirtualPypiRepository"], () => require("./virtualPypiRepository"));

export { VirtualRpmRepositoryArgs, VirtualRpmRepositoryState } from "./virtualRpmRepository";
export type VirtualRpmRepository = import("./virtualRpmRepository").VirtualRpmRepository;
export const VirtualRpmRepository: typeof import("./virtualRpmRepository").VirtualRpmRepository = null as any;
utilities.lazyLoad(exports, ["VirtualRpmRepository"], () => require("./virtualRpmRepository"));

export { VirtualSbtRepositoryArgs, VirtualSbtRepositoryState } from "./virtualSbtRepository";
export type VirtualSbtRepository = import("./virtualSbtRepository").VirtualSbtRepository;
export const VirtualSbtRepository: typeof import("./virtualSbtRepository").VirtualSbtRepository = null as any;
utilities.lazyLoad(exports, ["VirtualSbtRepository"], () => require("./virtualSbtRepository"));

export { VirtualSwiftRepositoryArgs, VirtualSwiftRepositoryState } from "./virtualSwiftRepository";
export type VirtualSwiftRepository = import("./virtualSwiftRepository").VirtualSwiftRepository;
export const VirtualSwiftRepository: typeof import("./virtualSwiftRepository").VirtualSwiftRepository = null as any;
utilities.lazyLoad(exports, ["VirtualSwiftRepository"], () => require("./virtualSwiftRepository"));

export { VirtualTerraformRepositoryArgs, VirtualTerraformRepositoryState } from "./virtualTerraformRepository";
export type VirtualTerraformRepository = import("./virtualTerraformRepository").VirtualTerraformRepository;
export const VirtualTerraformRepository: typeof import("./virtualTerraformRepository").VirtualTerraformRepository = null as any;
utilities.lazyLoad(exports, ["VirtualTerraformRepository"], () => require("./virtualTerraformRepository"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "artifactory:index/accessToken:AccessToken":
                return new AccessToken(name, <any>undefined, { urn })
            case "artifactory:index/alpineRepository:AlpineRepository":
                return new AlpineRepository(name, <any>undefined, { urn })
            case "artifactory:index/anonymousUser:AnonymousUser":
                return new AnonymousUser(name, <any>undefined, { urn })
            case "artifactory:index/apiKey:ApiKey":
                return new ApiKey(name, <any>undefined, { urn })
            case "artifactory:index/artifactPropertyWebhook:ArtifactPropertyWebhook":
                return new ArtifactPropertyWebhook(name, <any>undefined, { urn })
            case "artifactory:index/artifactWebhook:ArtifactWebhook":
                return new ArtifactWebhook(name, <any>undefined, { urn })
            case "artifactory:index/artifactoryReleaseBundleWebhook:ArtifactoryReleaseBundleWebhook":
                return new ArtifactoryReleaseBundleWebhook(name, <any>undefined, { urn })
            case "artifactory:index/backup:Backup":
                return new Backup(name, <any>undefined, { urn })
            case "artifactory:index/buildWebhook:BuildWebhook":
                return new BuildWebhook(name, <any>undefined, { urn })
            case "artifactory:index/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "artifactory:index/debianRepository:DebianRepository":
                return new DebianRepository(name, <any>undefined, { urn })
            case "artifactory:index/distributionWebhook:DistributionWebhook":
                return new DistributionWebhook(name, <any>undefined, { urn })
            case "artifactory:index/dockerV1Repository:DockerV1Repository":
                return new DockerV1Repository(name, <any>undefined, { urn })
            case "artifactory:index/dockerV2Repository:DockerV2Repository":
                return new DockerV2Repository(name, <any>undefined, { urn })
            case "artifactory:index/dockerWebhook:DockerWebhook":
                return new DockerWebhook(name, <any>undefined, { urn })
            case "artifactory:index/federatedAlpineRepository:FederatedAlpineRepository":
                return new FederatedAlpineRepository(name, <any>undefined, { urn })
            case "artifactory:index/federatedBowerRepository:FederatedBowerRepository":
                return new FederatedBowerRepository(name, <any>undefined, { urn })
            case "artifactory:index/federatedCargoRepository:FederatedCargoRepository":
                return new FederatedCargoRepository(name, <any>undefined, { urn })
            case "artifactory:index/federatedChefRepository:FederatedChefRepository":
                return new FederatedChefRepository(name, <any>undefined, { urn })
            case "artifactory:index/federatedCocoapodsRepository:FederatedCocoapodsRepository":
                return new FederatedCocoapodsRepository(name, <any>undefined, { urn })
            case "artifactory:index/federatedComposerRepository:FederatedComposerRepository":
                return new FederatedComposerRepository(name, <any>undefined, { urn })
            case "artifactory:index/federatedConanRepository:FederatedConanRepository":
                return new FederatedConanRepository(name, <any>undefined, { urn })
            case "artifactory:index/federatedCondaRepository:FederatedCondaRepository":
                return new FederatedCondaRepository(name, <any>undefined, { urn })
            case "artifactory:index/federatedCranRepository:FederatedCranRepository":
                return new FederatedCranRepository(name, <any>undefined, { urn })
            case "artifactory:index/federatedDebianRepository:FederatedDebianRepository":
                return new FederatedDebianRepository(name, <any>undefined, { urn })
            case "artifactory:index/federatedDockerRepository:FederatedDockerRepository":
                return new FederatedDockerRepository(name, <any>undefined, { urn })
            case "artifactory:index/federatedDockerV1Repository:FederatedDockerV1Repository":
                return new FederatedDockerV1Repository(name, <any>undefined, { urn })
            case "artifactory:index/federatedDockerV2Repository:FederatedDockerV2Repository":
                return new FederatedDockerV2Repository(name, <any>undefined, { urn })
            case "artifactory:index/federatedGemsRepository:FederatedGemsRepository":
                return new FederatedGemsRepository(name, <any>undefined, { urn })
            case "artifactory:index/federatedGenericRepository:FederatedGenericRepository":
                return new FederatedGenericRepository(name, <any>undefined, { urn })
            case "artifactory:index/federatedGitltfsRepository:FederatedGitltfsRepository":
                return new FederatedGitltfsRepository(name, <any>undefined, { urn })
            case "artifactory:index/federatedGoRepository:FederatedGoRepository":
                return new FederatedGoRepository(name, <any>undefined, { urn })
            case "artifactory:index/federatedGradleRepository:FederatedGradleRepository":
                return new FederatedGradleRepository(name, <any>undefined, { urn })
            case "artifactory:index/federatedHelmRepository:FederatedHelmRepository":
                return new FederatedHelmRepository(name, <any>undefined, { urn })
            case "artifactory:index/federatedIvyRepository:FederatedIvyRepository":
                return new FederatedIvyRepository(name, <any>undefined, { urn })
            case "artifactory:index/federatedMavenRepository:FederatedMavenRepository":
                return new FederatedMavenRepository(name, <any>undefined, { urn })
            case "artifactory:index/federatedNpmRepository:FederatedNpmRepository":
                return new FederatedNpmRepository(name, <any>undefined, { urn })
            case "artifactory:index/federatedNugetRepository:FederatedNugetRepository":
                return new FederatedNugetRepository(name, <any>undefined, { urn })
            case "artifactory:index/federatedOpkgRepository:FederatedOpkgRepository":
                return new FederatedOpkgRepository(name, <any>undefined, { urn })
            case "artifactory:index/federatedPuppetRepository:FederatedPuppetRepository":
                return new FederatedPuppetRepository(name, <any>undefined, { urn })
            case "artifactory:index/federatedPypiRepository:FederatedPypiRepository":
                return new FederatedPypiRepository(name, <any>undefined, { urn })
            case "artifactory:index/federatedRpmRepository:FederatedRpmRepository":
                return new FederatedRpmRepository(name, <any>undefined, { urn })
            case "artifactory:index/federatedSbtRepository:FederatedSbtRepository":
                return new FederatedSbtRepository(name, <any>undefined, { urn })
            case "artifactory:index/federatedSwiftRepository:FederatedSwiftRepository":
                return new FederatedSwiftRepository(name, <any>undefined, { urn })
            case "artifactory:index/federatedTerraformModuleRepository:FederatedTerraformModuleRepository":
                return new FederatedTerraformModuleRepository(name, <any>undefined, { urn })
            case "artifactory:index/federatedTerraformProviderRepository:FederatedTerraformProviderRepository":
                return new FederatedTerraformProviderRepository(name, <any>undefined, { urn })
            case "artifactory:index/federatedVagrantRepository:FederatedVagrantRepository":
                return new FederatedVagrantRepository(name, <any>undefined, { urn })
            case "artifactory:index/generalSecurity:GeneralSecurity":
                return new GeneralSecurity(name, <any>undefined, { urn })
            case "artifactory:index/goRepository:GoRepository":
                return new GoRepository(name, <any>undefined, { urn })
            case "artifactory:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "artifactory:index/keypair:Keypair":
                return new Keypair(name, <any>undefined, { urn })
            case "artifactory:index/ldapGroupSetting:LdapGroupSetting":
                return new LdapGroupSetting(name, <any>undefined, { urn })
            case "artifactory:index/ldapSetting:LdapSetting":
                return new LdapSetting(name, <any>undefined, { urn })
            case "artifactory:index/localBowerRepository:LocalBowerRepository":
                return new LocalBowerRepository(name, <any>undefined, { urn })
            case "artifactory:index/localCargoRepository:LocalCargoRepository":
                return new LocalCargoRepository(name, <any>undefined, { urn })
            case "artifactory:index/localChefRepository:LocalChefRepository":
                return new LocalChefRepository(name, <any>undefined, { urn })
            case "artifactory:index/localCocoapodsRepository:LocalCocoapodsRepository":
                return new LocalCocoapodsRepository(name, <any>undefined, { urn })
            case "artifactory:index/localComposerRepository:LocalComposerRepository":
                return new LocalComposerRepository(name, <any>undefined, { urn })
            case "artifactory:index/localConanRepository:LocalConanRepository":
                return new LocalConanRepository(name, <any>undefined, { urn })
            case "artifactory:index/localCondaRepository:LocalCondaRepository":
                return new LocalCondaRepository(name, <any>undefined, { urn })
            case "artifactory:index/localCranRepository:LocalCranRepository":
                return new LocalCranRepository(name, <any>undefined, { urn })
            case "artifactory:index/localGemsRepository:LocalGemsRepository":
                return new LocalGemsRepository(name, <any>undefined, { urn })
            case "artifactory:index/localGenericRepository:LocalGenericRepository":
                return new LocalGenericRepository(name, <any>undefined, { urn })
            case "artifactory:index/localGitltfsRepository:LocalGitltfsRepository":
                return new LocalGitltfsRepository(name, <any>undefined, { urn })
            case "artifactory:index/localGoRepository:LocalGoRepository":
                return new LocalGoRepository(name, <any>undefined, { urn })
            case "artifactory:index/localGradleRepository:LocalGradleRepository":
                return new LocalGradleRepository(name, <any>undefined, { urn })
            case "artifactory:index/localHelmRepository:LocalHelmRepository":
                return new LocalHelmRepository(name, <any>undefined, { urn })
            case "artifactory:index/localIvyRepository:LocalIvyRepository":
                return new LocalIvyRepository(name, <any>undefined, { urn })
            case "artifactory:index/localMavenRepository:LocalMavenRepository":
                return new LocalMavenRepository(name, <any>undefined, { urn })
            case "artifactory:index/localNpmRepository:LocalNpmRepository":
                return new LocalNpmRepository(name, <any>undefined, { urn })
            case "artifactory:index/localNugetRepository:LocalNugetRepository":
                return new LocalNugetRepository(name, <any>undefined, { urn })
            case "artifactory:index/localOpkgRepository:LocalOpkgRepository":
                return new LocalOpkgRepository(name, <any>undefined, { urn })
            case "artifactory:index/localPubRepository:LocalPubRepository":
                return new LocalPubRepository(name, <any>undefined, { urn })
            case "artifactory:index/localPuppetRepository:LocalPuppetRepository":
                return new LocalPuppetRepository(name, <any>undefined, { urn })
            case "artifactory:index/localPypiRepository:LocalPypiRepository":
                return new LocalPypiRepository(name, <any>undefined, { urn })
            case "artifactory:index/localRpmRepository:LocalRpmRepository":
                return new LocalRpmRepository(name, <any>undefined, { urn })
            case "artifactory:index/localSbtRepository:LocalSbtRepository":
                return new LocalSbtRepository(name, <any>undefined, { urn })
            case "artifactory:index/localSwiftRepository:LocalSwiftRepository":
                return new LocalSwiftRepository(name, <any>undefined, { urn })
            case "artifactory:index/localTerraformBackendRepository:LocalTerraformBackendRepository":
                return new LocalTerraformBackendRepository(name, <any>undefined, { urn })
            case "artifactory:index/localTerraformModuleRepository:LocalTerraformModuleRepository":
                return new LocalTerraformModuleRepository(name, <any>undefined, { urn })
            case "artifactory:index/localTerraformProviderRepository:LocalTerraformProviderRepository":
                return new LocalTerraformProviderRepository(name, <any>undefined, { urn })
            case "artifactory:index/localVagrantRepository:LocalVagrantRepository":
                return new LocalVagrantRepository(name, <any>undefined, { urn })
            case "artifactory:index/managedUser:ManagedUser":
                return new ManagedUser(name, <any>undefined, { urn })
            case "artifactory:index/mavenRepository:MavenRepository":
                return new MavenRepository(name, <any>undefined, { urn })
            case "artifactory:index/oauthSettings:OauthSettings":
                return new OauthSettings(name, <any>undefined, { urn })
            case "artifactory:index/permissionTarget:PermissionTarget":
                return new PermissionTarget(name, <any>undefined, { urn })
            case "artifactory:index/permissionTargets:PermissionTargets":
                return new PermissionTargets(name, <any>undefined, { urn })
            case "artifactory:index/propertySet:PropertySet":
                return new PropertySet(name, <any>undefined, { urn })
            case "artifactory:index/proxy:Proxy":
                return new Proxy(name, <any>undefined, { urn })
            case "artifactory:index/pullReplication:PullReplication":
                return new PullReplication(name, <any>undefined, { urn })
            case "artifactory:index/pushReplication:PushReplication":
                return new PushReplication(name, <any>undefined, { urn })
            case "artifactory:index/releaseBundleWebhook:ReleaseBundleWebhook":
                return new ReleaseBundleWebhook(name, <any>undefined, { urn })
            case "artifactory:index/remoteAlpineRepository:RemoteAlpineRepository":
                return new RemoteAlpineRepository(name, <any>undefined, { urn })
            case "artifactory:index/remoteBowerRepository:RemoteBowerRepository":
                return new RemoteBowerRepository(name, <any>undefined, { urn })
            case "artifactory:index/remoteCargoRepository:RemoteCargoRepository":
                return new RemoteCargoRepository(name, <any>undefined, { urn })
            case "artifactory:index/remoteChefRepository:RemoteChefRepository":
                return new RemoteChefRepository(name, <any>undefined, { urn })
            case "artifactory:index/remoteCocoapodsRepository:RemoteCocoapodsRepository":
                return new RemoteCocoapodsRepository(name, <any>undefined, { urn })
            case "artifactory:index/remoteComposerRepository:RemoteComposerRepository":
                return new RemoteComposerRepository(name, <any>undefined, { urn })
            case "artifactory:index/remoteConanRepository:RemoteConanRepository":
                return new RemoteConanRepository(name, <any>undefined, { urn })
            case "artifactory:index/remoteCondaRepository:RemoteCondaRepository":
                return new RemoteCondaRepository(name, <any>undefined, { urn })
            case "artifactory:index/remoteCranRepository:RemoteCranRepository":
                return new RemoteCranRepository(name, <any>undefined, { urn })
            case "artifactory:index/remoteDebianRepository:RemoteDebianRepository":
                return new RemoteDebianRepository(name, <any>undefined, { urn })
            case "artifactory:index/remoteDockerRepository:RemoteDockerRepository":
                return new RemoteDockerRepository(name, <any>undefined, { urn })
            case "artifactory:index/remoteGemsRepository:RemoteGemsRepository":
                return new RemoteGemsRepository(name, <any>undefined, { urn })
            case "artifactory:index/remoteGenericRepository:RemoteGenericRepository":
                return new RemoteGenericRepository(name, <any>undefined, { urn })
            case "artifactory:index/remoteGitlfsRepository:RemoteGitlfsRepository":
                return new RemoteGitlfsRepository(name, <any>undefined, { urn })
            case "artifactory:index/remoteGoRepository:RemoteGoRepository":
                return new RemoteGoRepository(name, <any>undefined, { urn })
            case "artifactory:index/remoteGradleRepository:RemoteGradleRepository":
                return new RemoteGradleRepository(name, <any>undefined, { urn })
            case "artifactory:index/remoteHelmRepository:RemoteHelmRepository":
                return new RemoteHelmRepository(name, <any>undefined, { urn })
            case "artifactory:index/remoteIvyRepository:RemoteIvyRepository":
                return new RemoteIvyRepository(name, <any>undefined, { urn })
            case "artifactory:index/remoteMavenRepository:RemoteMavenRepository":
                return new RemoteMavenRepository(name, <any>undefined, { urn })
            case "artifactory:index/remoteNpmRepository:RemoteNpmRepository":
                return new RemoteNpmRepository(name, <any>undefined, { urn })
            case "artifactory:index/remoteNugetRepository:RemoteNugetRepository":
                return new RemoteNugetRepository(name, <any>undefined, { urn })
            case "artifactory:index/remoteOpkgRepository:RemoteOpkgRepository":
                return new RemoteOpkgRepository(name, <any>undefined, { urn })
            case "artifactory:index/remoteP2Repository:RemoteP2Repository":
                return new RemoteP2Repository(name, <any>undefined, { urn })
            case "artifactory:index/remotePubRepository:RemotePubRepository":
                return new RemotePubRepository(name, <any>undefined, { urn })
            case "artifactory:index/remotePuppetRepository:RemotePuppetRepository":
                return new RemotePuppetRepository(name, <any>undefined, { urn })
            case "artifactory:index/remotePypiRepository:RemotePypiRepository":
                return new RemotePypiRepository(name, <any>undefined, { urn })
            case "artifactory:index/remoteRpmRepository:RemoteRpmRepository":
                return new RemoteRpmRepository(name, <any>undefined, { urn })
            case "artifactory:index/remoteSbtRepository:RemoteSbtRepository":
                return new RemoteSbtRepository(name, <any>undefined, { urn })
            case "artifactory:index/remoteSwiftRepository:RemoteSwiftRepository":
                return new RemoteSwiftRepository(name, <any>undefined, { urn })
            case "artifactory:index/remoteTerraformRepository:RemoteTerraformRepository":
                return new RemoteTerraformRepository(name, <any>undefined, { urn })
            case "artifactory:index/remoteVcsRepository:RemoteVcsRepository":
                return new RemoteVcsRepository(name, <any>undefined, { urn })
            case "artifactory:index/replicationConfig:ReplicationConfig":
                return new ReplicationConfig(name, <any>undefined, { urn })
            case "artifactory:index/repositoryLayout:RepositoryLayout":
                return new RepositoryLayout(name, <any>undefined, { urn })
            case "artifactory:index/samlSettings:SamlSettings":
                return new SamlSettings(name, <any>undefined, { urn })
            case "artifactory:index/scopedToken:ScopedToken":
                return new ScopedToken(name, <any>undefined, { urn })
            case "artifactory:index/singleReplicationConfig:SingleReplicationConfig":
                return new SingleReplicationConfig(name, <any>undefined, { urn })
            case "artifactory:index/unmanagedUser:UnmanagedUser":
                return new UnmanagedUser(name, <any>undefined, { urn })
            case "artifactory:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "artifactory:index/virtualAlpineRepository:VirtualAlpineRepository":
                return new VirtualAlpineRepository(name, <any>undefined, { urn })
            case "artifactory:index/virtualBowerRepository:VirtualBowerRepository":
                return new VirtualBowerRepository(name, <any>undefined, { urn })
            case "artifactory:index/virtualChefRepository:VirtualChefRepository":
                return new VirtualChefRepository(name, <any>undefined, { urn })
            case "artifactory:index/virtualComposerRepository:VirtualComposerRepository":
                return new VirtualComposerRepository(name, <any>undefined, { urn })
            case "artifactory:index/virtualConanRepository:VirtualConanRepository":
                return new VirtualConanRepository(name, <any>undefined, { urn })
            case "artifactory:index/virtualCondaRepository:VirtualCondaRepository":
                return new VirtualCondaRepository(name, <any>undefined, { urn })
            case "artifactory:index/virtualCranRepository:VirtualCranRepository":
                return new VirtualCranRepository(name, <any>undefined, { urn })
            case "artifactory:index/virtualDebianRepository:VirtualDebianRepository":
                return new VirtualDebianRepository(name, <any>undefined, { urn })
            case "artifactory:index/virtualDockerRepository:VirtualDockerRepository":
                return new VirtualDockerRepository(name, <any>undefined, { urn })
            case "artifactory:index/virtualGemsRepository:VirtualGemsRepository":
                return new VirtualGemsRepository(name, <any>undefined, { urn })
            case "artifactory:index/virtualGenericRepository:VirtualGenericRepository":
                return new VirtualGenericRepository(name, <any>undefined, { urn })
            case "artifactory:index/virtualGitlfsRepository:VirtualGitlfsRepository":
                return new VirtualGitlfsRepository(name, <any>undefined, { urn })
            case "artifactory:index/virtualGradleRepository:VirtualGradleRepository":
                return new VirtualGradleRepository(name, <any>undefined, { urn })
            case "artifactory:index/virtualHelmRepository:VirtualHelmRepository":
                return new VirtualHelmRepository(name, <any>undefined, { urn })
            case "artifactory:index/virtualIvyRepository:VirtualIvyRepository":
                return new VirtualIvyRepository(name, <any>undefined, { urn })
            case "artifactory:index/virtualNpmRepository:VirtualNpmRepository":
                return new VirtualNpmRepository(name, <any>undefined, { urn })
            case "artifactory:index/virtualNugetRepository:VirtualNugetRepository":
                return new VirtualNugetRepository(name, <any>undefined, { urn })
            case "artifactory:index/virtualP2Repository:VirtualP2Repository":
                return new VirtualP2Repository(name, <any>undefined, { urn })
            case "artifactory:index/virtualPubRepository:VirtualPubRepository":
                return new VirtualPubRepository(name, <any>undefined, { urn })
            case "artifactory:index/virtualPuppetRepository:VirtualPuppetRepository":
                return new VirtualPuppetRepository(name, <any>undefined, { urn })
            case "artifactory:index/virtualPypiRepository:VirtualPypiRepository":
                return new VirtualPypiRepository(name, <any>undefined, { urn })
            case "artifactory:index/virtualRpmRepository:VirtualRpmRepository":
                return new VirtualRpmRepository(name, <any>undefined, { urn })
            case "artifactory:index/virtualSbtRepository:VirtualSbtRepository":
                return new VirtualSbtRepository(name, <any>undefined, { urn })
            case "artifactory:index/virtualSwiftRepository:VirtualSwiftRepository":
                return new VirtualSwiftRepository(name, <any>undefined, { urn })
            case "artifactory:index/virtualTerraformRepository:VirtualTerraformRepository":
                return new VirtualTerraformRepository(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("artifactory", "index/accessToken", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/alpineRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/anonymousUser", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/apiKey", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/artifactPropertyWebhook", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/artifactWebhook", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/artifactoryReleaseBundleWebhook", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/backup", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/buildWebhook", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/certificate", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/debianRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/distributionWebhook", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/dockerV1Repository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/dockerV2Repository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/dockerWebhook", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/federatedAlpineRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/federatedBowerRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/federatedCargoRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/federatedChefRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/federatedCocoapodsRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/federatedComposerRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/federatedConanRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/federatedCondaRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/federatedCranRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/federatedDebianRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/federatedDockerRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/federatedDockerV1Repository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/federatedDockerV2Repository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/federatedGemsRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/federatedGenericRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/federatedGitltfsRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/federatedGoRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/federatedGradleRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/federatedHelmRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/federatedIvyRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/federatedMavenRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/federatedNpmRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/federatedNugetRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/federatedOpkgRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/federatedPuppetRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/federatedPypiRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/federatedRpmRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/federatedSbtRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/federatedSwiftRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/federatedTerraformModuleRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/federatedTerraformProviderRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/federatedVagrantRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/generalSecurity", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/goRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/group", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/keypair", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/ldapGroupSetting", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/ldapSetting", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/localBowerRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/localCargoRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/localChefRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/localCocoapodsRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/localComposerRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/localConanRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/localCondaRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/localCranRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/localGemsRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/localGenericRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/localGitltfsRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/localGoRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/localGradleRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/localHelmRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/localIvyRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/localMavenRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/localNpmRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/localNugetRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/localOpkgRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/localPubRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/localPuppetRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/localPypiRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/localRpmRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/localSbtRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/localSwiftRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/localTerraformBackendRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/localTerraformModuleRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/localTerraformProviderRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/localVagrantRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/managedUser", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/mavenRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/oauthSettings", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/permissionTarget", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/permissionTargets", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/propertySet", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/proxy", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/pullReplication", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/pushReplication", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/releaseBundleWebhook", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/remoteAlpineRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/remoteBowerRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/remoteCargoRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/remoteChefRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/remoteCocoapodsRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/remoteComposerRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/remoteConanRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/remoteCondaRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/remoteCranRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/remoteDebianRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/remoteDockerRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/remoteGemsRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/remoteGenericRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/remoteGitlfsRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/remoteGoRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/remoteGradleRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/remoteHelmRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/remoteIvyRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/remoteMavenRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/remoteNpmRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/remoteNugetRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/remoteOpkgRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/remoteP2Repository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/remotePubRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/remotePuppetRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/remotePypiRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/remoteRpmRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/remoteSbtRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/remoteSwiftRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/remoteTerraformRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/remoteVcsRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/replicationConfig", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/repositoryLayout", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/samlSettings", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/scopedToken", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/singleReplicationConfig", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/unmanagedUser", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/user", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/virtualAlpineRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/virtualBowerRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/virtualChefRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/virtualComposerRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/virtualConanRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/virtualCondaRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/virtualCranRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/virtualDebianRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/virtualDockerRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/virtualGemsRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/virtualGenericRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/virtualGitlfsRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/virtualGradleRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/virtualHelmRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/virtualIvyRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/virtualNpmRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/virtualNugetRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/virtualP2Repository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/virtualPubRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/virtualPuppetRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/virtualPypiRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/virtualRpmRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/virtualSbtRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/virtualSwiftRepository", _module)
pulumi.runtime.registerResourceModule("artifactory", "index/virtualTerraformRepository", _module)
pulumi.runtime.registerResourcePackage("artifactory", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:artifactory") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
