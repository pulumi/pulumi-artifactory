// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides an Artifactory custom webhook resource. This can be used to register and manage Artifactory webhook subscription which enables you to be notified or notify other users when such events take place in Artifactory.
 *
 * ## Example Usage
 *
 * .
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as artifactory from "@pulumi/artifactory";
 *
 * const user_custom_webhook = new artifactory.UserCustomWebhook("user-custom-webhook", {
 *     key: "user-custom-webhook",
 *     eventTypes: ["locked"],
 *     handlers: [{
 *         url: "https://tempurl.org",
 *         method: "POST",
 *         secrets: {
 *             secretName1: "value1",
 *             secretName2: "value2",
 *         },
 *         httpHeaders: {
 *             headerName1: "value1",
 *             headerName2: "value2",
 *         },
 *         payload: "{ \"ref\": \"main\" , \"inputs\": { \"artifact_path\": \"test-repo/repo-path\" } }",
 *     }],
 * });
 * ```
 */
export class UserCustomWebhook extends pulumi.CustomResource {
    /**
     * Get an existing UserCustomWebhook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserCustomWebhookState, opts?: pulumi.CustomResourceOptions): UserCustomWebhook {
        return new UserCustomWebhook(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'artifactory:index/userCustomWebhook:UserCustomWebhook';

    /**
     * Returns true if the given object is an instance of UserCustomWebhook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserCustomWebhook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserCustomWebhook.__pulumiType;
    }

    /**
     * Webhook description. Max length 1000 characters.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Status of webhook. Default to `true`
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * List of event triggers for the Webhook. Allow values: `locked`
     */
    declare public readonly eventTypes: pulumi.Output<string[]>;
    /**
     * At least one is required.
     */
    declare public readonly handlers: pulumi.Output<outputs.UserCustomWebhookHandler[] | undefined>;
    /**
     * The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.
     */
    declare public readonly key: pulumi.Output<string>;

    /**
     * Create a UserCustomWebhook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserCustomWebhookArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserCustomWebhookArgs | UserCustomWebhookState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserCustomWebhookState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["eventTypes"] = state?.eventTypes;
            resourceInputs["handlers"] = state?.handlers;
            resourceInputs["key"] = state?.key;
        } else {
            const args = argsOrState as UserCustomWebhookArgs | undefined;
            if (args?.eventTypes === undefined && !opts.urn) {
                throw new Error("Missing required property 'eventTypes'");
            }
            if (args?.key === undefined && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["eventTypes"] = args?.eventTypes;
            resourceInputs["handlers"] = args?.handlers;
            resourceInputs["key"] = args?.key;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserCustomWebhook.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserCustomWebhook resources.
 */
export interface UserCustomWebhookState {
    /**
     * Webhook description. Max length 1000 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Status of webhook. Default to `true`
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * List of event triggers for the Webhook. Allow values: `locked`
     */
    eventTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * At least one is required.
     */
    handlers?: pulumi.Input<pulumi.Input<inputs.UserCustomWebhookHandler>[]>;
    /**
     * The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.
     */
    key?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserCustomWebhook resource.
 */
export interface UserCustomWebhookArgs {
    /**
     * Webhook description. Max length 1000 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Status of webhook. Default to `true`
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * List of event triggers for the Webhook. Allow values: `locked`
     */
    eventTypes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * At least one is required.
     */
    handlers?: pulumi.Input<pulumi.Input<inputs.UserCustomWebhookHandler>[]>;
    /**
     * The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.
     */
    key: pulumi.Input<string>;
}
