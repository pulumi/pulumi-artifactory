// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Creates a local RPM repository.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as artifactory from "@pulumi/artifactory";
 * import * as std from "@pulumi/std";
 *
 * const some_keypair_gpg_1 = new artifactory.Keypair("some-keypair-gpg-1", {
 *     pairName: `some-keypair${randid.id}`,
 *     pairType: "GPG",
 *     alias: "foo-alias1",
 *     privateKey: std.file({
 *         input: "samples/gpg.priv",
 *     }).then(invoke => invoke.result),
 *     publicKey: std.file({
 *         input: "samples/gpg.pub",
 *     }).then(invoke => invoke.result),
 * });
 * const some_keypair_gpg_2 = new artifactory.Keypair("some-keypair-gpg-2", {
 *     pairName: `some-keypair${randid.id}`,
 *     pairType: "GPG",
 *     alias: "foo-alias2",
 *     privateKey: std.file({
 *         input: "samples/gpg.priv",
 *     }).then(invoke => invoke.result),
 *     publicKey: std.file({
 *         input: "samples/gpg.pub",
 *     }).then(invoke => invoke.result),
 * });
 * const terraform_local_test_rpm_repo_basic = new artifactory.LocalRpmRepository("terraform-local-test-rpm-repo-basic", {
 *     key: "terraform-local-test-rpm-repo-basic",
 *     yumRootDepth: 5,
 *     calculateYumMetadata: true,
 *     enableFileListsIndexing: true,
 *     yumGroupFileNames: "file-1.xml,file-2.xml",
 *     primaryKeypairRef: some_keypairGPG1.pairName,
 *     secondaryKeypairRef: some_keypairGPG2.pairName,
 * }, {
 *     dependsOn: [
 *         some_keypair_gpg_1,
 *         some_keypair_gpg_2,
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Local repositories can be imported using their name, e.g.
 *
 * ```sh
 * $ pulumi import artifactory:index/localRpmRepository:LocalRpmRepository terraform-local-test-rpm-repo-basic terraform-local-test-rpm-repo-basic
 * ```
 */
export class LocalRpmRepository extends pulumi.CustomResource {
    /**
     * Get an existing LocalRpmRepository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LocalRpmRepositoryState, opts?: pulumi.CustomResourceOptions): LocalRpmRepository {
        return new LocalRpmRepository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'artifactory:index/localRpmRepository:LocalRpmRepository';

    /**
     * Returns true if the given object is an instance of LocalRpmRepository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LocalRpmRepository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LocalRpmRepository.__pulumiType;
    }

    /**
     * When set, you may view content such as HTML or Javadoc files directly from Artifactory.
     * This may not be safe and therefore requires strict content moderation to prevent malicious users from uploading content that may compromise security (e.g., cross-site scripting attacks).
     */
    declare public readonly archiveBrowsingEnabled: pulumi.Output<boolean>;
    /**
     * When set, the repository does not participate in artifact resolution and new artifacts cannot be deployed.
     */
    declare public readonly blackedOut: pulumi.Output<boolean>;
    /**
     * Default: `false`.
     */
    declare public readonly calculateYumMetadata: pulumi.Output<boolean>;
    /**
     * When set, download requests to this repository will redirect the client to download the artifact directly from AWS CloudFront. Available in Enterprise+ and Edge licenses only. Default value is 'false'
     */
    declare public readonly cdnRedirect: pulumi.Output<boolean>;
    /**
     * Public description.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * When set, download requests to this repository will redirect the client to download the artifact directly from the cloud storage provider. Available in Enterprise+ and Edge licenses only.
     */
    declare public readonly downloadDirect: pulumi.Output<boolean>;
    /**
     * Default: `false`.
     */
    declare public readonly enableFileListsIndexing: pulumi.Output<boolean>;
    /**
     * List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**&#47;z/*`.By default no artifacts are excluded.
     */
    declare public readonly excludesPattern: pulumi.Output<string>;
    /**
     * List of comma-separated artifact patterns to include when evaluating artifact requests in the form of `x/y/**&#47;z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (`**&#47;*`).
     */
    declare public readonly includesPattern: pulumi.Output<string>;
    /**
     * the identity key of the repo.
     */
    declare public readonly key: pulumi.Output<string>;
    /**
     * Internal description.
     */
    declare public readonly notes: pulumi.Output<string>;
    /**
     * The primary GPG key to be used to sign packages.
     */
    declare public readonly primaryKeypairRef: pulumi.Output<string>;
    /**
     * Setting repositories with priority will cause metadata to be merged only from repositories set with this field
     */
    declare public readonly priorityResolution: pulumi.Output<boolean>;
    declare public readonly projectEnvironments: pulumi.Output<string[]>;
    /**
     * Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
     */
    declare public readonly projectKey: pulumi.Output<string>;
    /**
     * List of property set name
     */
    declare public readonly propertySets: pulumi.Output<string[] | undefined>;
    /**
     * Sets the layout that the repository should use for storing and identifying modules. A recommended layout that corresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.
     */
    declare public readonly repoLayoutRef: pulumi.Output<string>;
    /**
     * The secondary GPG key to be used to sign packages.
     */
    declare public readonly secondaryKeypairRef: pulumi.Output<string>;
    /**
     * Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.
     */
    declare public readonly xrayIndex: pulumi.Output<boolean>;
    /**
     * A comma separated list of XML file names containing RPM group component definitions. 
     * Artifactory includes the group definitions as part of the calculated RPM metadata, as well as automatically
     * generating a gzipped version of the group files, if required. Default is empty string.
     */
    declare public readonly yumGroupFileNames: pulumi.Output<string>;
    /**
     * The depth, relative to the repository's root folder, where RPM metadata is created. 
     * This is useful when your repository contains multiple RPM repositories under parallel hierarchies. For example, if
     * your RPMs are stored under 'fedora/linux/$releasever/$basearch', specify a depth of 4. Once the number of snapshots
     * exceeds this setting, older versions are removed. A value of 0 (default) indicates there is no limit, and unique
     * snapshots are not cleaned up.
     */
    declare public readonly yumRootDepth: pulumi.Output<number>;

    /**
     * Create a LocalRpmRepository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LocalRpmRepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LocalRpmRepositoryArgs | LocalRpmRepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LocalRpmRepositoryState | undefined;
            resourceInputs["archiveBrowsingEnabled"] = state?.archiveBrowsingEnabled;
            resourceInputs["blackedOut"] = state?.blackedOut;
            resourceInputs["calculateYumMetadata"] = state?.calculateYumMetadata;
            resourceInputs["cdnRedirect"] = state?.cdnRedirect;
            resourceInputs["description"] = state?.description;
            resourceInputs["downloadDirect"] = state?.downloadDirect;
            resourceInputs["enableFileListsIndexing"] = state?.enableFileListsIndexing;
            resourceInputs["excludesPattern"] = state?.excludesPattern;
            resourceInputs["includesPattern"] = state?.includesPattern;
            resourceInputs["key"] = state?.key;
            resourceInputs["notes"] = state?.notes;
            resourceInputs["primaryKeypairRef"] = state?.primaryKeypairRef;
            resourceInputs["priorityResolution"] = state?.priorityResolution;
            resourceInputs["projectEnvironments"] = state?.projectEnvironments;
            resourceInputs["projectKey"] = state?.projectKey;
            resourceInputs["propertySets"] = state?.propertySets;
            resourceInputs["repoLayoutRef"] = state?.repoLayoutRef;
            resourceInputs["secondaryKeypairRef"] = state?.secondaryKeypairRef;
            resourceInputs["xrayIndex"] = state?.xrayIndex;
            resourceInputs["yumGroupFileNames"] = state?.yumGroupFileNames;
            resourceInputs["yumRootDepth"] = state?.yumRootDepth;
        } else {
            const args = argsOrState as LocalRpmRepositoryArgs | undefined;
            if (args?.key === undefined && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            resourceInputs["archiveBrowsingEnabled"] = args?.archiveBrowsingEnabled;
            resourceInputs["blackedOut"] = args?.blackedOut;
            resourceInputs["calculateYumMetadata"] = args?.calculateYumMetadata;
            resourceInputs["cdnRedirect"] = args?.cdnRedirect;
            resourceInputs["description"] = args?.description;
            resourceInputs["downloadDirect"] = args?.downloadDirect;
            resourceInputs["enableFileListsIndexing"] = args?.enableFileListsIndexing;
            resourceInputs["excludesPattern"] = args?.excludesPattern;
            resourceInputs["includesPattern"] = args?.includesPattern;
            resourceInputs["key"] = args?.key;
            resourceInputs["notes"] = args?.notes;
            resourceInputs["primaryKeypairRef"] = args?.primaryKeypairRef;
            resourceInputs["priorityResolution"] = args?.priorityResolution;
            resourceInputs["projectEnvironments"] = args?.projectEnvironments;
            resourceInputs["projectKey"] = args?.projectKey;
            resourceInputs["propertySets"] = args?.propertySets;
            resourceInputs["repoLayoutRef"] = args?.repoLayoutRef;
            resourceInputs["secondaryKeypairRef"] = args?.secondaryKeypairRef;
            resourceInputs["xrayIndex"] = args?.xrayIndex;
            resourceInputs["yumGroupFileNames"] = args?.yumGroupFileNames;
            resourceInputs["yumRootDepth"] = args?.yumRootDepth;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LocalRpmRepository.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LocalRpmRepository resources.
 */
export interface LocalRpmRepositoryState {
    /**
     * When set, you may view content such as HTML or Javadoc files directly from Artifactory.
     * This may not be safe and therefore requires strict content moderation to prevent malicious users from uploading content that may compromise security (e.g., cross-site scripting attacks).
     */
    archiveBrowsingEnabled?: pulumi.Input<boolean>;
    /**
     * When set, the repository does not participate in artifact resolution and new artifacts cannot be deployed.
     */
    blackedOut?: pulumi.Input<boolean>;
    /**
     * Default: `false`.
     */
    calculateYumMetadata?: pulumi.Input<boolean>;
    /**
     * When set, download requests to this repository will redirect the client to download the artifact directly from AWS CloudFront. Available in Enterprise+ and Edge licenses only. Default value is 'false'
     */
    cdnRedirect?: pulumi.Input<boolean>;
    /**
     * Public description.
     */
    description?: pulumi.Input<string>;
    /**
     * When set, download requests to this repository will redirect the client to download the artifact directly from the cloud storage provider. Available in Enterprise+ and Edge licenses only.
     */
    downloadDirect?: pulumi.Input<boolean>;
    /**
     * Default: `false`.
     */
    enableFileListsIndexing?: pulumi.Input<boolean>;
    /**
     * List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**&#47;z/*`.By default no artifacts are excluded.
     */
    excludesPattern?: pulumi.Input<string>;
    /**
     * List of comma-separated artifact patterns to include when evaluating artifact requests in the form of `x/y/**&#47;z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (`**&#47;*`).
     */
    includesPattern?: pulumi.Input<string>;
    /**
     * the identity key of the repo.
     */
    key?: pulumi.Input<string>;
    /**
     * Internal description.
     */
    notes?: pulumi.Input<string>;
    /**
     * The primary GPG key to be used to sign packages.
     */
    primaryKeypairRef?: pulumi.Input<string>;
    /**
     * Setting repositories with priority will cause metadata to be merged only from repositories set with this field
     */
    priorityResolution?: pulumi.Input<boolean>;
    projectEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
     */
    projectKey?: pulumi.Input<string>;
    /**
     * List of property set name
     */
    propertySets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Sets the layout that the repository should use for storing and identifying modules. A recommended layout that corresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.
     */
    repoLayoutRef?: pulumi.Input<string>;
    /**
     * The secondary GPG key to be used to sign packages.
     */
    secondaryKeypairRef?: pulumi.Input<string>;
    /**
     * Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.
     */
    xrayIndex?: pulumi.Input<boolean>;
    /**
     * A comma separated list of XML file names containing RPM group component definitions. 
     * Artifactory includes the group definitions as part of the calculated RPM metadata, as well as automatically
     * generating a gzipped version of the group files, if required. Default is empty string.
     */
    yumGroupFileNames?: pulumi.Input<string>;
    /**
     * The depth, relative to the repository's root folder, where RPM metadata is created. 
     * This is useful when your repository contains multiple RPM repositories under parallel hierarchies. For example, if
     * your RPMs are stored under 'fedora/linux/$releasever/$basearch', specify a depth of 4. Once the number of snapshots
     * exceeds this setting, older versions are removed. A value of 0 (default) indicates there is no limit, and unique
     * snapshots are not cleaned up.
     */
    yumRootDepth?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a LocalRpmRepository resource.
 */
export interface LocalRpmRepositoryArgs {
    /**
     * When set, you may view content such as HTML or Javadoc files directly from Artifactory.
     * This may not be safe and therefore requires strict content moderation to prevent malicious users from uploading content that may compromise security (e.g., cross-site scripting attacks).
     */
    archiveBrowsingEnabled?: pulumi.Input<boolean>;
    /**
     * When set, the repository does not participate in artifact resolution and new artifacts cannot be deployed.
     */
    blackedOut?: pulumi.Input<boolean>;
    /**
     * Default: `false`.
     */
    calculateYumMetadata?: pulumi.Input<boolean>;
    /**
     * When set, download requests to this repository will redirect the client to download the artifact directly from AWS CloudFront. Available in Enterprise+ and Edge licenses only. Default value is 'false'
     */
    cdnRedirect?: pulumi.Input<boolean>;
    /**
     * Public description.
     */
    description?: pulumi.Input<string>;
    /**
     * When set, download requests to this repository will redirect the client to download the artifact directly from the cloud storage provider. Available in Enterprise+ and Edge licenses only.
     */
    downloadDirect?: pulumi.Input<boolean>;
    /**
     * Default: `false`.
     */
    enableFileListsIndexing?: pulumi.Input<boolean>;
    /**
     * List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**&#47;z/*`.By default no artifacts are excluded.
     */
    excludesPattern?: pulumi.Input<string>;
    /**
     * List of comma-separated artifact patterns to include when evaluating artifact requests in the form of `x/y/**&#47;z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (`**&#47;*`).
     */
    includesPattern?: pulumi.Input<string>;
    /**
     * the identity key of the repo.
     */
    key: pulumi.Input<string>;
    /**
     * Internal description.
     */
    notes?: pulumi.Input<string>;
    /**
     * The primary GPG key to be used to sign packages.
     */
    primaryKeypairRef?: pulumi.Input<string>;
    /**
     * Setting repositories with priority will cause metadata to be merged only from repositories set with this field
     */
    priorityResolution?: pulumi.Input<boolean>;
    projectEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
     */
    projectKey?: pulumi.Input<string>;
    /**
     * List of property set name
     */
    propertySets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Sets the layout that the repository should use for storing and identifying modules. A recommended layout that corresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.
     */
    repoLayoutRef?: pulumi.Input<string>;
    /**
     * The secondary GPG key to be used to sign packages.
     */
    secondaryKeypairRef?: pulumi.Input<string>;
    /**
     * Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.
     */
    xrayIndex?: pulumi.Input<boolean>;
    /**
     * A comma separated list of XML file names containing RPM group component definitions. 
     * Artifactory includes the group definitions as part of the calculated RPM metadata, as well as automatically
     * generating a gzipped version of the group files, if required. Default is empty string.
     */
    yumGroupFileNames?: pulumi.Input<string>;
    /**
     * The depth, relative to the repository's root folder, where RPM metadata is created. 
     * This is useful when your repository contains multiple RPM repositories under parallel hierarchies. For example, if
     * your RPMs are stored under 'fedora/linux/$releasever/$basearch', specify a depth of 4. Once the number of snapshots
     * exceeds this setting, older versions are removed. A value of 0 (default) indicates there is no limit, and unique
     * snapshots are not cleaned up.
     */
    yumRootDepth?: pulumi.Input<number>;
}
