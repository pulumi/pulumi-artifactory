// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Creates a virtual Alpine repository.
 * Official documentation can be found [here](https://www.jfrog.com/confluence/display/JFROG/Alpine+Linux+Repositories#AlpineLinuxRepositories-VirtualRepositorySettingupaVirtualRepository).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as artifactory from "@pulumi/artifactory";
 *
 * const foo_alpine = new artifactory.VirtualAlpineRepository("foo-alpine", {
 *     key: "foo-alpine",
 *     repositories: [],
 *     description: "A test virtual repo",
 *     notes: "Internal description",
 *     includesPattern: "com/jfrog/**,cloud/jfrog/**",
 *     excludesPattern: "com/google/**",
 * });
 * ```
 *
 * ## Import
 *
 * Virtual repositories can be imported using their name, e.g.
 *
 * ```sh
 * $ pulumi import artifactory:index/virtualAlpineRepository:VirtualAlpineRepository foo-alpine foo-alpine
 * ```
 */
export class VirtualAlpineRepository extends pulumi.CustomResource {
    /**
     * Get an existing VirtualAlpineRepository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualAlpineRepositoryState, opts?: pulumi.CustomResourceOptions): VirtualAlpineRepository {
        return new VirtualAlpineRepository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'artifactory:index/virtualAlpineRepository:VirtualAlpineRepository';

    /**
     * Returns true if the given object is an instance of VirtualAlpineRepository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualAlpineRepository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualAlpineRepository.__pulumiType;
    }

    /**
     * Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by another Artifactory instance.
     */
    declare public readonly artifactoryRequestsCanRetrieveRemoteArtifacts: pulumi.Output<boolean | undefined>;
    /**
     * Default repository to deploy artifacts.
     */
    declare public readonly defaultDeploymentRepo: pulumi.Output<string | undefined>;
    /**
     * Public description.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**&#47;z/*`.By default no artifacts are excluded.
     */
    declare public readonly excludesPattern: pulumi.Output<string | undefined>;
    /**
     * List of comma-separated artifact patterns to include when evaluating artifact requests in the form of `x/y/**&#47;z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (`**&#47;*`).
     */
    declare public readonly includesPattern: pulumi.Output<string | undefined>;
    /**
     * A mandatory identifier for the repository that must be unique. It cannot begin with a number or
     * contain spaces or special characters.
     */
    declare public readonly key: pulumi.Output<string>;
    /**
     * Internal description.
     */
    declare public readonly notes: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly packageType: pulumi.Output<string>;
    /**
     * Primary keypair used to sign artifacts. Default value is empty.
     */
    declare public readonly primaryKeypairRef: pulumi.Output<string | undefined>;
    declare public readonly projectEnvironments: pulumi.Output<string[]>;
    /**
     * Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
     */
    declare public readonly projectKey: pulumi.Output<string | undefined>;
    /**
     * Repository layout key for the virtual repository
     */
    declare public readonly repoLayoutRef: pulumi.Output<string | undefined>;
    /**
     * The effective list of actual repositories included in this virtual repository.
     */
    declare public readonly repositories: pulumi.Output<string[] | undefined>;
    /**
     * This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated repositories. A value of 0 indicates no caching.
     */
    declare public readonly retrievalCachePeriodSeconds: pulumi.Output<number | undefined>;

    /**
     * Create a VirtualAlpineRepository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualAlpineRepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualAlpineRepositoryArgs | VirtualAlpineRepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualAlpineRepositoryState | undefined;
            resourceInputs["artifactoryRequestsCanRetrieveRemoteArtifacts"] = state?.artifactoryRequestsCanRetrieveRemoteArtifacts;
            resourceInputs["defaultDeploymentRepo"] = state?.defaultDeploymentRepo;
            resourceInputs["description"] = state?.description;
            resourceInputs["excludesPattern"] = state?.excludesPattern;
            resourceInputs["includesPattern"] = state?.includesPattern;
            resourceInputs["key"] = state?.key;
            resourceInputs["notes"] = state?.notes;
            resourceInputs["packageType"] = state?.packageType;
            resourceInputs["primaryKeypairRef"] = state?.primaryKeypairRef;
            resourceInputs["projectEnvironments"] = state?.projectEnvironments;
            resourceInputs["projectKey"] = state?.projectKey;
            resourceInputs["repoLayoutRef"] = state?.repoLayoutRef;
            resourceInputs["repositories"] = state?.repositories;
            resourceInputs["retrievalCachePeriodSeconds"] = state?.retrievalCachePeriodSeconds;
        } else {
            const args = argsOrState as VirtualAlpineRepositoryArgs | undefined;
            if (args?.key === undefined && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            resourceInputs["artifactoryRequestsCanRetrieveRemoteArtifacts"] = args?.artifactoryRequestsCanRetrieveRemoteArtifacts;
            resourceInputs["defaultDeploymentRepo"] = args?.defaultDeploymentRepo;
            resourceInputs["description"] = args?.description;
            resourceInputs["excludesPattern"] = args?.excludesPattern;
            resourceInputs["includesPattern"] = args?.includesPattern;
            resourceInputs["key"] = args?.key;
            resourceInputs["notes"] = args?.notes;
            resourceInputs["primaryKeypairRef"] = args?.primaryKeypairRef;
            resourceInputs["projectEnvironments"] = args?.projectEnvironments;
            resourceInputs["projectKey"] = args?.projectKey;
            resourceInputs["repoLayoutRef"] = args?.repoLayoutRef;
            resourceInputs["repositories"] = args?.repositories;
            resourceInputs["retrievalCachePeriodSeconds"] = args?.retrievalCachePeriodSeconds;
            resourceInputs["packageType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VirtualAlpineRepository.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VirtualAlpineRepository resources.
 */
export interface VirtualAlpineRepositoryState {
    /**
     * Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by another Artifactory instance.
     */
    artifactoryRequestsCanRetrieveRemoteArtifacts?: pulumi.Input<boolean>;
    /**
     * Default repository to deploy artifacts.
     */
    defaultDeploymentRepo?: pulumi.Input<string>;
    /**
     * Public description.
     */
    description?: pulumi.Input<string>;
    /**
     * List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**&#47;z/*`.By default no artifacts are excluded.
     */
    excludesPattern?: pulumi.Input<string>;
    /**
     * List of comma-separated artifact patterns to include when evaluating artifact requests in the form of `x/y/**&#47;z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (`**&#47;*`).
     */
    includesPattern?: pulumi.Input<string>;
    /**
     * A mandatory identifier for the repository that must be unique. It cannot begin with a number or
     * contain spaces or special characters.
     */
    key?: pulumi.Input<string>;
    /**
     * Internal description.
     */
    notes?: pulumi.Input<string>;
    packageType?: pulumi.Input<string>;
    /**
     * Primary keypair used to sign artifacts. Default value is empty.
     */
    primaryKeypairRef?: pulumi.Input<string>;
    projectEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
     */
    projectKey?: pulumi.Input<string>;
    /**
     * Repository layout key for the virtual repository
     */
    repoLayoutRef?: pulumi.Input<string>;
    /**
     * The effective list of actual repositories included in this virtual repository.
     */
    repositories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated repositories. A value of 0 indicates no caching.
     */
    retrievalCachePeriodSeconds?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a VirtualAlpineRepository resource.
 */
export interface VirtualAlpineRepositoryArgs {
    /**
     * Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by another Artifactory instance.
     */
    artifactoryRequestsCanRetrieveRemoteArtifacts?: pulumi.Input<boolean>;
    /**
     * Default repository to deploy artifacts.
     */
    defaultDeploymentRepo?: pulumi.Input<string>;
    /**
     * Public description.
     */
    description?: pulumi.Input<string>;
    /**
     * List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**&#47;z/*`.By default no artifacts are excluded.
     */
    excludesPattern?: pulumi.Input<string>;
    /**
     * List of comma-separated artifact patterns to include when evaluating artifact requests in the form of `x/y/**&#47;z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (`**&#47;*`).
     */
    includesPattern?: pulumi.Input<string>;
    /**
     * A mandatory identifier for the repository that must be unique. It cannot begin with a number or
     * contain spaces or special characters.
     */
    key: pulumi.Input<string>;
    /**
     * Internal description.
     */
    notes?: pulumi.Input<string>;
    /**
     * Primary keypair used to sign artifacts. Default value is empty.
     */
    primaryKeypairRef?: pulumi.Input<string>;
    projectEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
     */
    projectKey?: pulumi.Input<string>;
    /**
     * Repository layout key for the virtual repository
     */
    repoLayoutRef?: pulumi.Input<string>;
    /**
     * The effective list of actual repositories included in this virtual repository.
     */
    repositories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated repositories. A value of 0 indicates no caching.
     */
    retrievalCachePeriodSeconds?: pulumi.Input<number>;
}
