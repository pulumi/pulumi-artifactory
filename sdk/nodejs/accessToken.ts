// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * Artifactory **does not** retain access tokens and cannot be imported into state.
 */
export class AccessToken extends pulumi.CustomResource {
    /**
     * Get an existing AccessToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccessTokenState, opts?: pulumi.CustomResourceOptions): AccessToken {
        return new AccessToken(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'artifactory:index/accessToken:AccessToken';

    /**
     * Returns true if the given object is an instance of AccessToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccessToken {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccessToken.__pulumiType;
    }

    /**
     * Returns the access token to authenciate to Artifactory
     */
    public /*out*/ readonly accessToken!: pulumi.Output<string>;
    /**
     * (Optional) Specify the `instanceId` in this block to grant this token admin privileges. This can only be created when the authenticated user is an admin. `adminToken` cannot be specified with `groups`.
     */
    public readonly adminToken!: pulumi.Output<outputs.AccessTokenAdminToken | undefined>;
    /**
     * (Optional) A space-separate list of the other Artifactory instances or services that should accept this token identified by their Artifactory Service IDs. You may set `"jfrt@*"` so the token to be accepted by all Artifactory instances.
     */
    public readonly audience!: pulumi.Output<string | undefined>;
    /**
     * (Optional) The end date which the token is valid until, formatted as a RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).
     */
    public readonly endDate!: pulumi.Output<string>;
    /**
     * (Optional) A relative duration for which the token is valid until, for example `240h` (10 days) or `2400h30m`. Valid time units are "s", "m", "h".
     */
    public readonly endDateRelative!: pulumi.Output<string | undefined>;
    /**
     * (Optional) List of groups. The token is granted access based on the permissions of the groups. Specify `["*"]` for all groups that the user belongs to. `groups` cannot be specified with `adminToken`.
     */
    public readonly groups!: pulumi.Output<string[] | undefined>;
    /**
     * Returns the refresh token when `refreshable` is true, or an empty string when `refreshable` is false
     */
    public /*out*/ readonly refreshToken!: pulumi.Output<string>;
    /**
     * (Optional) Is this token refreshable? Defaults to `false`
     */
    public readonly refreshable!: pulumi.Output<boolean | undefined>;
    /**
     * (Required) The username or subject for the token. A non-admin can only specify their own username. Admins can specify any existing username, or a new name for a temporary token. Temporary tokens require `groups` to be set.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a AccessToken resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccessTokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccessTokenArgs | AccessTokenState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccessTokenState | undefined;
            inputs["accessToken"] = state ? state.accessToken : undefined;
            inputs["adminToken"] = state ? state.adminToken : undefined;
            inputs["audience"] = state ? state.audience : undefined;
            inputs["endDate"] = state ? state.endDate : undefined;
            inputs["endDateRelative"] = state ? state.endDateRelative : undefined;
            inputs["groups"] = state ? state.groups : undefined;
            inputs["refreshToken"] = state ? state.refreshToken : undefined;
            inputs["refreshable"] = state ? state.refreshable : undefined;
            inputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as AccessTokenArgs | undefined;
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            inputs["adminToken"] = args ? args.adminToken : undefined;
            inputs["audience"] = args ? args.audience : undefined;
            inputs["endDate"] = args ? args.endDate : undefined;
            inputs["endDateRelative"] = args ? args.endDateRelative : undefined;
            inputs["groups"] = args ? args.groups : undefined;
            inputs["refreshable"] = args ? args.refreshable : undefined;
            inputs["username"] = args ? args.username : undefined;
            inputs["accessToken"] = undefined /*out*/;
            inputs["refreshToken"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(AccessToken.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AccessToken resources.
 */
export interface AccessTokenState {
    /**
     * Returns the access token to authenciate to Artifactory
     */
    accessToken?: pulumi.Input<string>;
    /**
     * (Optional) Specify the `instanceId` in this block to grant this token admin privileges. This can only be created when the authenticated user is an admin. `adminToken` cannot be specified with `groups`.
     */
    adminToken?: pulumi.Input<inputs.AccessTokenAdminToken>;
    /**
     * (Optional) A space-separate list of the other Artifactory instances or services that should accept this token identified by their Artifactory Service IDs. You may set `"jfrt@*"` so the token to be accepted by all Artifactory instances.
     */
    audience?: pulumi.Input<string>;
    /**
     * (Optional) The end date which the token is valid until, formatted as a RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).
     */
    endDate?: pulumi.Input<string>;
    /**
     * (Optional) A relative duration for which the token is valid until, for example `240h` (10 days) or `2400h30m`. Valid time units are "s", "m", "h".
     */
    endDateRelative?: pulumi.Input<string>;
    /**
     * (Optional) List of groups. The token is granted access based on the permissions of the groups. Specify `["*"]` for all groups that the user belongs to. `groups` cannot be specified with `adminToken`.
     */
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Returns the refresh token when `refreshable` is true, or an empty string when `refreshable` is false
     */
    refreshToken?: pulumi.Input<string>;
    /**
     * (Optional) Is this token refreshable? Defaults to `false`
     */
    refreshable?: pulumi.Input<boolean>;
    /**
     * (Required) The username or subject for the token. A non-admin can only specify their own username. Admins can specify any existing username, or a new name for a temporary token. Temporary tokens require `groups` to be set.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AccessToken resource.
 */
export interface AccessTokenArgs {
    /**
     * (Optional) Specify the `instanceId` in this block to grant this token admin privileges. This can only be created when the authenticated user is an admin. `adminToken` cannot be specified with `groups`.
     */
    adminToken?: pulumi.Input<inputs.AccessTokenAdminToken>;
    /**
     * (Optional) A space-separate list of the other Artifactory instances or services that should accept this token identified by their Artifactory Service IDs. You may set `"jfrt@*"` so the token to be accepted by all Artifactory instances.
     */
    audience?: pulumi.Input<string>;
    /**
     * (Optional) The end date which the token is valid until, formatted as a RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).
     */
    endDate?: pulumi.Input<string>;
    /**
     * (Optional) A relative duration for which the token is valid until, for example `240h` (10 days) or `2400h30m`. Valid time units are "s", "m", "h".
     */
    endDateRelative?: pulumi.Input<string>;
    /**
     * (Optional) List of groups. The token is granted access based on the permissions of the groups. Specify `["*"]` for all groups that the user belongs to. `groups` cannot be specified with `adminToken`.
     */
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Optional) Is this token refreshable? Defaults to `false`
     */
    refreshable?: pulumi.Input<boolean>;
    /**
     * (Required) The username or subject for the token. A non-admin can only specify their own username. Admins can specify any existing username, or a new name for a temporary token. Temporary tokens require `groups` to be set.
     */
    username: pulumi.Input<string>;
}
