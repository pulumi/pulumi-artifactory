// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides an Artifactory pull replication resource. This can be used to create and manage pull replication in Artifactory
 * for a local or remote repo. Pull replication provides a convenient way to proactively populate a remote cache, and is very useful
 * when waiting for new artifacts to arrive on demand (when first requested) is not desirable due to network latency.
 * See the [Official Documentation](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-PullReplication).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as artifactory from "@pulumi/artifactory";
 *
 * // Create a replication between two artifactory local repositories
 * const providerTestSource = new artifactory.LocalMavenRepository("providerTestSource", {key: "provider_test_source"});
 * const providerTestDest = new artifactory.RemoteMavenRepository("providerTestDest", {
 *     key: "provider_test_dest",
 *     password: "bar",
 *     url: `https://example.com/artifactory/${artifactory_local_maven_repository.artifactory_local_maven_repository.key}`,
 *     username: "foo",
 * });
 * const remote_rep = new artifactory.PullReplication("remote-rep", {
 *     cronExp: "0 0 * * * ?",
 *     enableEventReplication: true,
 *     repoKey: providerTestDest.key,
 * });
 * ```
 *
 * ## Import
 *
 * Pull replication config can be imported using its repo key, e.g.
 *
 * ```sh
 *  $ pulumi import artifactory:index/pullReplication:PullReplication foo-rep repository-key
 * ```
 */
export class PullReplication extends pulumi.CustomResource {
    /**
     * Get an existing PullReplication resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PullReplicationState, opts?: pulumi.CustomResourceOptions): PullReplication {
        return new PullReplication(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'artifactory:index/pullReplication:PullReplication';

    /**
     * Returns true if the given object is an instance of PullReplication.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PullReplication {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PullReplication.__pulumiType;
    }

    /**
     * When true, enables distributed checksum storage. For more information, see
     * [Optimizing Repository Replication with Checksum-Based Storage](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-OptimizingRepositoryReplicationUsingStorageLevelSynchronizationOptions).
     */
    public readonly checkBinaryExistenceInFilestore!: pulumi.Output<boolean | undefined>;
    /**
     * A valid CRON expression that you can use to control replication frequency. Eg: `0 0 12 * * ? *`, `0 0 2 ? * MON-SAT *`. Note: use 6 or 7 parts format - Seconds, Minutes Hours, Day Of Month, Month, Day Of Week, Year (optional). Specifying both a day-of-week AND a day-of-month parameter is not supported. One of them should be replaced by `?`. Incorrect: `* 5,7,9 14/2 * * WED,SAT *`, correct: `* 5,7,9 14/2 ? * WED,SAT *`. See details in [Cron Trigger Tutorial](http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html).
     */
    public readonly cronExp!: pulumi.Output<string | undefined>;
    /**
     * When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on artifact, e.g. added, deleted or property change.
     */
    public readonly enableEventReplication!: pulumi.Output<boolean | undefined>;
    /**
     * When set, this replication will be enabled when saved.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Required for local repository, but not needed for remote repository.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Only artifacts that located in path that matches the subpath within the remote repository will be replicated.
     */
    public readonly pathPrefix!: pulumi.Output<string | undefined>;
    /**
     * Proxy key from Artifactory Proxies setting
     */
    public readonly proxy!: pulumi.Output<string | undefined>;
    /**
     * Repository name.
     */
    public readonly repoKey!: pulumi.Output<string>;
    public readonly socketTimeoutMillis!: pulumi.Output<number>;
    /**
     * When set, items that were deleted locally should also be deleted remotely (also applies to properties metadata).
     */
    public readonly syncDeletes!: pulumi.Output<boolean>;
    /**
     * When set, the task also synchronizes the properties of replicated artifacts.
     */
    public readonly syncProperties!: pulumi.Output<boolean>;
    /**
     * When set, artifact download statistics will also be replicated. Set to avoid inadvertent cleanup at the target instance when setting up replication for disaster recovery.
     */
    public readonly syncStatistics!: pulumi.Output<boolean>;
    /**
     * The URL of the target local repository on a remote Artifactory server. For some package types, you need to prefix the repository key in the URL with api/<pkg>. 
     * For a list of package types where this is required, see the [note](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-anchorPREFIX).
     * Required for local repository, but not needed for remote repository.
     */
    public readonly url!: pulumi.Output<string | undefined>;
    /**
     * Required for local repository, but not needed for remote repository.
     */
    public readonly username!: pulumi.Output<string | undefined>;

    /**
     * Create a PullReplication resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PullReplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PullReplicationArgs | PullReplicationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PullReplicationState | undefined;
            resourceInputs["checkBinaryExistenceInFilestore"] = state ? state.checkBinaryExistenceInFilestore : undefined;
            resourceInputs["cronExp"] = state ? state.cronExp : undefined;
            resourceInputs["enableEventReplication"] = state ? state.enableEventReplication : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["pathPrefix"] = state ? state.pathPrefix : undefined;
            resourceInputs["proxy"] = state ? state.proxy : undefined;
            resourceInputs["repoKey"] = state ? state.repoKey : undefined;
            resourceInputs["socketTimeoutMillis"] = state ? state.socketTimeoutMillis : undefined;
            resourceInputs["syncDeletes"] = state ? state.syncDeletes : undefined;
            resourceInputs["syncProperties"] = state ? state.syncProperties : undefined;
            resourceInputs["syncStatistics"] = state ? state.syncStatistics : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as PullReplicationArgs | undefined;
            if ((!args || args.repoKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repoKey'");
            }
            resourceInputs["checkBinaryExistenceInFilestore"] = args ? args.checkBinaryExistenceInFilestore : undefined;
            resourceInputs["cronExp"] = args ? args.cronExp : undefined;
            resourceInputs["enableEventReplication"] = args ? args.enableEventReplication : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["pathPrefix"] = args ? args.pathPrefix : undefined;
            resourceInputs["proxy"] = args ? args.proxy : undefined;
            resourceInputs["repoKey"] = args ? args.repoKey : undefined;
            resourceInputs["socketTimeoutMillis"] = args ? args.socketTimeoutMillis : undefined;
            resourceInputs["syncDeletes"] = args ? args.syncDeletes : undefined;
            resourceInputs["syncProperties"] = args ? args.syncProperties : undefined;
            resourceInputs["syncStatistics"] = args ? args.syncStatistics : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(PullReplication.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PullReplication resources.
 */
export interface PullReplicationState {
    /**
     * When true, enables distributed checksum storage. For more information, see
     * [Optimizing Repository Replication with Checksum-Based Storage](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-OptimizingRepositoryReplicationUsingStorageLevelSynchronizationOptions).
     */
    checkBinaryExistenceInFilestore?: pulumi.Input<boolean>;
    /**
     * A valid CRON expression that you can use to control replication frequency. Eg: `0 0 12 * * ? *`, `0 0 2 ? * MON-SAT *`. Note: use 6 or 7 parts format - Seconds, Minutes Hours, Day Of Month, Month, Day Of Week, Year (optional). Specifying both a day-of-week AND a day-of-month parameter is not supported. One of them should be replaced by `?`. Incorrect: `* 5,7,9 14/2 * * WED,SAT *`, correct: `* 5,7,9 14/2 ? * WED,SAT *`. See details in [Cron Trigger Tutorial](http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html).
     */
    cronExp?: pulumi.Input<string>;
    /**
     * When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on artifact, e.g. added, deleted or property change.
     */
    enableEventReplication?: pulumi.Input<boolean>;
    /**
     * When set, this replication will be enabled when saved.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Required for local repository, but not needed for remote repository.
     */
    password?: pulumi.Input<string>;
    /**
     * Only artifacts that located in path that matches the subpath within the remote repository will be replicated.
     */
    pathPrefix?: pulumi.Input<string>;
    /**
     * Proxy key from Artifactory Proxies setting
     */
    proxy?: pulumi.Input<string>;
    /**
     * Repository name.
     */
    repoKey?: pulumi.Input<string>;
    socketTimeoutMillis?: pulumi.Input<number>;
    /**
     * When set, items that were deleted locally should also be deleted remotely (also applies to properties metadata).
     */
    syncDeletes?: pulumi.Input<boolean>;
    /**
     * When set, the task also synchronizes the properties of replicated artifacts.
     */
    syncProperties?: pulumi.Input<boolean>;
    /**
     * When set, artifact download statistics will also be replicated. Set to avoid inadvertent cleanup at the target instance when setting up replication for disaster recovery.
     */
    syncStatistics?: pulumi.Input<boolean>;
    /**
     * The URL of the target local repository on a remote Artifactory server. For some package types, you need to prefix the repository key in the URL with api/<pkg>. 
     * For a list of package types where this is required, see the [note](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-anchorPREFIX).
     * Required for local repository, but not needed for remote repository.
     */
    url?: pulumi.Input<string>;
    /**
     * Required for local repository, but not needed for remote repository.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PullReplication resource.
 */
export interface PullReplicationArgs {
    /**
     * When true, enables distributed checksum storage. For more information, see
     * [Optimizing Repository Replication with Checksum-Based Storage](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-OptimizingRepositoryReplicationUsingStorageLevelSynchronizationOptions).
     */
    checkBinaryExistenceInFilestore?: pulumi.Input<boolean>;
    /**
     * A valid CRON expression that you can use to control replication frequency. Eg: `0 0 12 * * ? *`, `0 0 2 ? * MON-SAT *`. Note: use 6 or 7 parts format - Seconds, Minutes Hours, Day Of Month, Month, Day Of Week, Year (optional). Specifying both a day-of-week AND a day-of-month parameter is not supported. One of them should be replaced by `?`. Incorrect: `* 5,7,9 14/2 * * WED,SAT *`, correct: `* 5,7,9 14/2 ? * WED,SAT *`. See details in [Cron Trigger Tutorial](http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html).
     */
    cronExp?: pulumi.Input<string>;
    /**
     * When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on artifact, e.g. added, deleted or property change.
     */
    enableEventReplication?: pulumi.Input<boolean>;
    /**
     * When set, this replication will be enabled when saved.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Required for local repository, but not needed for remote repository.
     */
    password?: pulumi.Input<string>;
    /**
     * Only artifacts that located in path that matches the subpath within the remote repository will be replicated.
     */
    pathPrefix?: pulumi.Input<string>;
    /**
     * Proxy key from Artifactory Proxies setting
     */
    proxy?: pulumi.Input<string>;
    /**
     * Repository name.
     */
    repoKey: pulumi.Input<string>;
    socketTimeoutMillis?: pulumi.Input<number>;
    /**
     * When set, items that were deleted locally should also be deleted remotely (also applies to properties metadata).
     */
    syncDeletes?: pulumi.Input<boolean>;
    /**
     * When set, the task also synchronizes the properties of replicated artifacts.
     */
    syncProperties?: pulumi.Input<boolean>;
    /**
     * When set, artifact download statistics will also be replicated. Set to avoid inadvertent cleanup at the target instance when setting up replication for disaster recovery.
     */
    syncStatistics?: pulumi.Input<boolean>;
    /**
     * The URL of the target local repository on a remote Artifactory server. For some package types, you need to prefix the repository key in the URL with api/<pkg>. 
     * For a list of package types where this is required, see the [note](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-anchorPREFIX).
     * Required for local repository, but not needed for remote repository.
     */
    url?: pulumi.Input<string>;
    /**
     * Required for local repository, but not needed for remote repository.
     */
    username?: pulumi.Input<string>;
}
