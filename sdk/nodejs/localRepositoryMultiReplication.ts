// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LocalRepositoryMultiReplication extends pulumi.CustomResource {
    /**
     * Get an existing LocalRepositoryMultiReplication resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LocalRepositoryMultiReplicationState, opts?: pulumi.CustomResourceOptions): LocalRepositoryMultiReplication {
        return new LocalRepositoryMultiReplication(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'artifactory:index/localRepositoryMultiReplication:LocalRepositoryMultiReplication';

    /**
     * Returns true if the given object is an instance of LocalRepositoryMultiReplication.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LocalRepositoryMultiReplication {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LocalRepositoryMultiReplication.__pulumiType;
    }

    /**
     * Cron expression to control the operation frequency.
     */
    public readonly cronExp!: pulumi.Output<string>;
    /**
     * When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on
     * artifact, e.g. add, deleted or property change. Default value is `false`.
     */
    public readonly enableEventReplication!: pulumi.Output<boolean | undefined>;
    public readonly replications!: pulumi.Output<outputs.LocalRepositoryMultiReplicationReplication[] | undefined>;
    /**
     * Repository name.
     */
    public readonly repoKey!: pulumi.Output<string>;

    /**
     * Create a LocalRepositoryMultiReplication resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LocalRepositoryMultiReplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LocalRepositoryMultiReplicationArgs | LocalRepositoryMultiReplicationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LocalRepositoryMultiReplicationState | undefined;
            resourceInputs["cronExp"] = state ? state.cronExp : undefined;
            resourceInputs["enableEventReplication"] = state ? state.enableEventReplication : undefined;
            resourceInputs["replications"] = state ? state.replications : undefined;
            resourceInputs["repoKey"] = state ? state.repoKey : undefined;
        } else {
            const args = argsOrState as LocalRepositoryMultiReplicationArgs | undefined;
            if ((!args || args.cronExp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cronExp'");
            }
            if ((!args || args.repoKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repoKey'");
            }
            resourceInputs["cronExp"] = args ? args.cronExp : undefined;
            resourceInputs["enableEventReplication"] = args ? args.enableEventReplication : undefined;
            resourceInputs["replications"] = args ? args.replications : undefined;
            resourceInputs["repoKey"] = args ? args.repoKey : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LocalRepositoryMultiReplication.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LocalRepositoryMultiReplication resources.
 */
export interface LocalRepositoryMultiReplicationState {
    /**
     * Cron expression to control the operation frequency.
     */
    cronExp?: pulumi.Input<string>;
    /**
     * When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on
     * artifact, e.g. add, deleted or property change. Default value is `false`.
     */
    enableEventReplication?: pulumi.Input<boolean>;
    replications?: pulumi.Input<pulumi.Input<inputs.LocalRepositoryMultiReplicationReplication>[]>;
    /**
     * Repository name.
     */
    repoKey?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LocalRepositoryMultiReplication resource.
 */
export interface LocalRepositoryMultiReplicationArgs {
    /**
     * Cron expression to control the operation frequency.
     */
    cronExp: pulumi.Input<string>;
    /**
     * When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on
     * artifact, e.g. add, deleted or property change. Default value is `false`.
     */
    enableEventReplication?: pulumi.Input<boolean>;
    replications?: pulumi.Input<pulumi.Input<inputs.LocalRepositoryMultiReplicationReplication>[]>;
    /**
     * Repository name.
     */
    repoKey: pulumi.Input<string>;
}
