// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getGroup(args: GetGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetGroupResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("artifactory:index/getGroup:getGroup", {
        "adminPrivileges": args.adminPrivileges,
        "autoJoin": args.autoJoin,
        "description": args.description,
        "externalId": args.externalId,
        "includeUsers": args.includeUsers,
        "name": args.name,
        "policyManager": args.policyManager,
        "realm": args.realm,
        "realmAttributes": args.realmAttributes,
        "reportsManager": args.reportsManager,
        "usersNames": args.usersNames,
        "watchManager": args.watchManager,
    }, opts);
}

/**
 * A collection of arguments for invoking getGroup.
 */
export interface GetGroupArgs {
    adminPrivileges?: boolean;
    autoJoin?: boolean;
    description?: string;
    externalId?: string;
    includeUsers?: string;
    name: string;
    policyManager?: boolean;
    realm?: string;
    realmAttributes?: string;
    reportsManager?: boolean;
    usersNames?: string[];
    watchManager?: boolean;
}

/**
 * A collection of values returned by getGroup.
 */
export interface GetGroupResult {
    readonly adminPrivileges: boolean;
    readonly autoJoin: boolean;
    readonly description?: string;
    readonly externalId?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly includeUsers?: string;
    readonly name: string;
    readonly policyManager?: boolean;
    readonly realm: string;
    readonly realmAttributes?: string;
    readonly reportsManager?: boolean;
    readonly usersNames?: string[];
    readonly watchManager?: boolean;
}
export function getGroupOutput(args: GetGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGroupResult> {
    return pulumi.output(args).apply((a: any) => getGroup(a, opts))
}

/**
 * A collection of arguments for invoking getGroup.
 */
export interface GetGroupOutputArgs {
    adminPrivileges?: pulumi.Input<boolean>;
    autoJoin?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    externalId?: pulumi.Input<string>;
    includeUsers?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    policyManager?: pulumi.Input<boolean>;
    realm?: pulumi.Input<string>;
    realmAttributes?: pulumi.Input<string>;
    reportsManager?: pulumi.Input<boolean>;
    usersNames?: pulumi.Input<pulumi.Input<string>[]>;
    watchManager?: pulumi.Input<boolean>;
}
