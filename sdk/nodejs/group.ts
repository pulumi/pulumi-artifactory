// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * ```sh
 * $ pulumi import artifactory:index/group:Group terraform-group mygroup
 * ```
 *
 * ~> `users_names` can't be imported due to API limitations.
 */
export class Group extends pulumi.CustomResource {
    /**
     * Get an existing Group resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupState, opts?: pulumi.CustomResourceOptions): Group {
        return new Group(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'artifactory:index/group:Group';

    /**
     * Returns true if the given object is an instance of Group.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Group {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Group.__pulumiType;
    }

    /**
     * Any users added to this group will automatically be assigned with admin privileges in the system.
     */
    declare public readonly adminPrivileges: pulumi.Output<boolean>;
    /**
     * When this parameter is set, any new users defined in the system are automatically assigned to this group.
     */
    declare public readonly autoJoin: pulumi.Output<boolean>;
    /**
     * A description for the group.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * When this is set to `true`, an empty or missing usernames array will detach all users from the group.
     */
    declare public readonly detachAllUsers: pulumi.Output<boolean | undefined>;
    /**
     * New external group ID used to configure the corresponding group in Azure AD.
     */
    declare public readonly externalId: pulumi.Output<string>;
    /**
     * Name of the group.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * When this override is set, User in the group can set Xray security and compliance policies. Default value is `false`.
     */
    declare public readonly policyManager: pulumi.Output<boolean>;
    /**
     * The realm for the group.
     */
    declare public readonly realm: pulumi.Output<string>;
    /**
     * The realm attributes for the group.
     */
    declare public readonly realmAttributes: pulumi.Output<string>;
    /**
     * When this override is set, User in the group can manage Xray Reports on any resource type. Default value is `false`.
     */
    declare public readonly reportsManager: pulumi.Output<boolean>;
    declare public readonly usersNames: pulumi.Output<string[]>;
    /**
     * When this override is set, User in the group can manage Xray Watches on any resource type. Default value is `false`.
     */
    declare public readonly watchManager: pulumi.Output<boolean>;

    /**
     * Create a Group resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: GroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupArgs | GroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroupState | undefined;
            resourceInputs["adminPrivileges"] = state?.adminPrivileges;
            resourceInputs["autoJoin"] = state?.autoJoin;
            resourceInputs["description"] = state?.description;
            resourceInputs["detachAllUsers"] = state?.detachAllUsers;
            resourceInputs["externalId"] = state?.externalId;
            resourceInputs["name"] = state?.name;
            resourceInputs["policyManager"] = state?.policyManager;
            resourceInputs["realm"] = state?.realm;
            resourceInputs["realmAttributes"] = state?.realmAttributes;
            resourceInputs["reportsManager"] = state?.reportsManager;
            resourceInputs["usersNames"] = state?.usersNames;
            resourceInputs["watchManager"] = state?.watchManager;
        } else {
            const args = argsOrState as GroupArgs | undefined;
            resourceInputs["adminPrivileges"] = args?.adminPrivileges;
            resourceInputs["autoJoin"] = args?.autoJoin;
            resourceInputs["description"] = args?.description;
            resourceInputs["detachAllUsers"] = args?.detachAllUsers;
            resourceInputs["externalId"] = args?.externalId;
            resourceInputs["name"] = args?.name;
            resourceInputs["policyManager"] = args?.policyManager;
            resourceInputs["realm"] = args?.realm;
            resourceInputs["realmAttributes"] = args?.realmAttributes;
            resourceInputs["reportsManager"] = args?.reportsManager;
            resourceInputs["usersNames"] = args?.usersNames;
            resourceInputs["watchManager"] = args?.watchManager;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Group.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Group resources.
 */
export interface GroupState {
    /**
     * Any users added to this group will automatically be assigned with admin privileges in the system.
     */
    adminPrivileges?: pulumi.Input<boolean>;
    /**
     * When this parameter is set, any new users defined in the system are automatically assigned to this group.
     */
    autoJoin?: pulumi.Input<boolean>;
    /**
     * A description for the group.
     */
    description?: pulumi.Input<string>;
    /**
     * When this is set to `true`, an empty or missing usernames array will detach all users from the group.
     */
    detachAllUsers?: pulumi.Input<boolean>;
    /**
     * New external group ID used to configure the corresponding group in Azure AD.
     */
    externalId?: pulumi.Input<string>;
    /**
     * Name of the group.
     */
    name?: pulumi.Input<string>;
    /**
     * When this override is set, User in the group can set Xray security and compliance policies. Default value is `false`.
     */
    policyManager?: pulumi.Input<boolean>;
    /**
     * The realm for the group.
     */
    realm?: pulumi.Input<string>;
    /**
     * The realm attributes for the group.
     */
    realmAttributes?: pulumi.Input<string>;
    /**
     * When this override is set, User in the group can manage Xray Reports on any resource type. Default value is `false`.
     */
    reportsManager?: pulumi.Input<boolean>;
    usersNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When this override is set, User in the group can manage Xray Watches on any resource type. Default value is `false`.
     */
    watchManager?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Group resource.
 */
export interface GroupArgs {
    /**
     * Any users added to this group will automatically be assigned with admin privileges in the system.
     */
    adminPrivileges?: pulumi.Input<boolean>;
    /**
     * When this parameter is set, any new users defined in the system are automatically assigned to this group.
     */
    autoJoin?: pulumi.Input<boolean>;
    /**
     * A description for the group.
     */
    description?: pulumi.Input<string>;
    /**
     * When this is set to `true`, an empty or missing usernames array will detach all users from the group.
     */
    detachAllUsers?: pulumi.Input<boolean>;
    /**
     * New external group ID used to configure the corresponding group in Azure AD.
     */
    externalId?: pulumi.Input<string>;
    /**
     * Name of the group.
     */
    name?: pulumi.Input<string>;
    /**
     * When this override is set, User in the group can set Xray security and compliance policies. Default value is `false`.
     */
    policyManager?: pulumi.Input<boolean>;
    /**
     * The realm for the group.
     */
    realm?: pulumi.Input<string>;
    /**
     * The realm attributes for the group.
     */
    realmAttributes?: pulumi.Input<string>;
    /**
     * When this override is set, User in the group can manage Xray Reports on any resource type. Default value is `false`.
     */
    reportsManager?: pulumi.Input<boolean>;
    usersNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When this override is set, User in the group can manage Xray Watches on any resource type. Default value is `false`.
     */
    watchManager?: pulumi.Input<boolean>;
}
