// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Retrieves a federated Rpm repository.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as artifactory from "@pulumi/artifactory";
 *
 * const federated-test-rpm-repo = artifactory.getFederatedRpmRepository({
 *     key: "federated-test-rpm-repo",
 * });
 * ```
 */
export function getFederatedRpmRepository(args: GetFederatedRpmRepositoryArgs, opts?: pulumi.InvokeOptions): Promise<GetFederatedRpmRepositoryResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("artifactory:index/getFederatedRpmRepository:getFederatedRpmRepository", {
        "archiveBrowsingEnabled": args.archiveBrowsingEnabled,
        "blackedOut": args.blackedOut,
        "calculateYumMetadata": args.calculateYumMetadata,
        "cdnRedirect": args.cdnRedirect,
        "description": args.description,
        "downloadDirect": args.downloadDirect,
        "enableFileListsIndexing": args.enableFileListsIndexing,
        "excludesPattern": args.excludesPattern,
        "includesPattern": args.includesPattern,
        "key": args.key,
        "members": args.members,
        "notes": args.notes,
        "primaryKeypairRef": args.primaryKeypairRef,
        "priorityResolution": args.priorityResolution,
        "projectEnvironments": args.projectEnvironments,
        "projectKey": args.projectKey,
        "propertySets": args.propertySets,
        "repoLayoutRef": args.repoLayoutRef,
        "secondaryKeypairRef": args.secondaryKeypairRef,
        "xrayIndex": args.xrayIndex,
        "yumGroupFileNames": args.yumGroupFileNames,
        "yumRootDepth": args.yumRootDepth,
    }, opts);
}

/**
 * A collection of arguments for invoking getFederatedRpmRepository.
 */
export interface GetFederatedRpmRepositoryArgs {
    archiveBrowsingEnabled?: boolean;
    blackedOut?: boolean;
    calculateYumMetadata?: boolean;
    cdnRedirect?: boolean;
    description?: string;
    downloadDirect?: boolean;
    enableFileListsIndexing?: boolean;
    excludesPattern?: string;
    includesPattern?: string;
    /**
     * the identity key of the repo.
     */
    key: string;
    /**
     * The list of Federated members and must contain this repository URL (configured base URL
     * `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set.
     * Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository)
     * to set up Federated repositories correctly.
     */
    members?: inputs.GetFederatedRpmRepositoryMember[];
    notes?: string;
    primaryKeypairRef?: string;
    priorityResolution?: boolean;
    projectEnvironments?: string[];
    projectKey?: string;
    propertySets?: string[];
    repoLayoutRef?: string;
    secondaryKeypairRef?: string;
    xrayIndex?: boolean;
    yumGroupFileNames?: string;
    yumRootDepth?: number;
}

/**
 * A collection of values returned by getFederatedRpmRepository.
 */
export interface GetFederatedRpmRepositoryResult {
    readonly archiveBrowsingEnabled?: boolean;
    readonly blackedOut?: boolean;
    readonly calculateYumMetadata?: boolean;
    readonly cdnRedirect?: boolean;
    readonly description?: string;
    readonly downloadDirect?: boolean;
    readonly enableFileListsIndexing?: boolean;
    readonly excludesPattern: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly includesPattern: string;
    readonly key: string;
    /**
     * The list of Federated members and must contain this repository URL (configured base URL
     * `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set.
     * Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository)
     * to set up Federated repositories correctly.
     */
    readonly members?: outputs.GetFederatedRpmRepositoryMember[];
    readonly notes?: string;
    readonly packageType: string;
    readonly primaryKeypairRef?: string;
    readonly priorityResolution?: boolean;
    readonly projectEnvironments: string[];
    readonly projectKey?: string;
    readonly propertySets?: string[];
    readonly repoLayoutRef?: string;
    readonly secondaryKeypairRef?: string;
    readonly xrayIndex?: boolean;
    readonly yumGroupFileNames?: string;
    readonly yumRootDepth?: number;
}
/**
 * Retrieves a federated Rpm repository.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as artifactory from "@pulumi/artifactory";
 *
 * const federated-test-rpm-repo = artifactory.getFederatedRpmRepository({
 *     key: "federated-test-rpm-repo",
 * });
 * ```
 */
export function getFederatedRpmRepositoryOutput(args: GetFederatedRpmRepositoryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFederatedRpmRepositoryResult> {
    return pulumi.output(args).apply((a: any) => getFederatedRpmRepository(a, opts))
}

/**
 * A collection of arguments for invoking getFederatedRpmRepository.
 */
export interface GetFederatedRpmRepositoryOutputArgs {
    archiveBrowsingEnabled?: pulumi.Input<boolean>;
    blackedOut?: pulumi.Input<boolean>;
    calculateYumMetadata?: pulumi.Input<boolean>;
    cdnRedirect?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    downloadDirect?: pulumi.Input<boolean>;
    enableFileListsIndexing?: pulumi.Input<boolean>;
    excludesPattern?: pulumi.Input<string>;
    includesPattern?: pulumi.Input<string>;
    /**
     * the identity key of the repo.
     */
    key: pulumi.Input<string>;
    /**
     * The list of Federated members and must contain this repository URL (configured base URL
     * `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set.
     * Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository)
     * to set up Federated repositories correctly.
     */
    members?: pulumi.Input<pulumi.Input<inputs.GetFederatedRpmRepositoryMemberArgs>[]>;
    notes?: pulumi.Input<string>;
    primaryKeypairRef?: pulumi.Input<string>;
    priorityResolution?: pulumi.Input<boolean>;
    projectEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    projectKey?: pulumi.Input<string>;
    propertySets?: pulumi.Input<pulumi.Input<string>[]>;
    repoLayoutRef?: pulumi.Input<string>;
    secondaryKeypairRef?: pulumi.Input<string>;
    xrayIndex?: pulumi.Input<boolean>;
    yumGroupFileNames?: pulumi.Input<string>;
    yumRootDepth?: pulumi.Input<number>;
}
