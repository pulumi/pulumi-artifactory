// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a remote repository replication resource, also referred to as Artifactory pull replication.
 * This resource provides a convenient way to proactively populate a remote cache, and is very useful when waiting for new artifacts to arrive on demand (when first requested) is not desirable due to network latency. See [official documentation](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-PullReplication).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as artifactory from "@pulumi/artifactory";
 *
 * const config = new pulumi.Config();
 * const artifactoryUrl = config.require("artifactoryUrl");
 * const providerTestSource = new artifactory.LocalMavenRepository("providerTestSource", {key: "provider_test_source"});
 * const providerTestDest = new artifactory.RemoteMavenRepository("providerTestDest", {
 *     key: "provider_test_dest",
 *     url: `${artifactoryUrl}/artifactory/${artifactory_local_maven_repository.artifactory_local_maven_repository.key}`,
 *     username: "foo",
 *     password: "bar",
 * });
 * const remote_rep = new artifactory.RemoteRepositoryReplication("remote-rep", {
 *     repoKey: providerTestDest.key,
 *     cronExp: "0 0 * * * ?",
 *     enableEventReplication: true,
 *     enabled: true,
 *     syncDeletes: false,
 *     syncProperties: true,
 *     includePathPrefixPattern: "/some-repo/",
 *     excludePathPrefixPattern: "/some-other-repo/",
 *     checkBinaryExistenceInFilestore: false,
 * });
 * ```
 *
 * ## Import
 *
 * Push replication configs can be imported using their repo key, e.g.
 *
 * ```sh
 *  $ pulumi import artifactory:index/remoteRepositoryReplication:RemoteRepositoryReplication foo-rep provider_test_source
 * ```
 */
export class RemoteRepositoryReplication extends pulumi.CustomResource {
    /**
     * Get an existing RemoteRepositoryReplication resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RemoteRepositoryReplicationState, opts?: pulumi.CustomResourceOptions): RemoteRepositoryReplication {
        return new RemoteRepositoryReplication(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'artifactory:index/remoteRepositoryReplication:RemoteRepositoryReplication';

    /**
     * Returns true if the given object is an instance of RemoteRepositoryReplication.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RemoteRepositoryReplication {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RemoteRepositoryReplication.__pulumiType;
    }

    /**
     * Enabling the `checkBinaryExistenceInFilestore` flag requires an Enterprise Plus license. When true, enables distributed checksum storage. For more information, see [Optimizing Repository Replication with Checksum-Based Storage](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-OptimizingRepositoryReplicationUsingStorageLevelSynchronizationOptions).
     */
    public readonly checkBinaryExistenceInFilestore!: pulumi.Output<boolean | undefined>;
    /**
     * A valid CRON expression that you can use to control replication frequency. Eg: `0 0 12 * * ? *`, `0 0 2 ? * MON-SAT *`. Note: use 6 or 7 parts format - Seconds, Minutes Hours, Day Of Month, Month, Day Of Week, Year (optional). Specifying both a day-of-week AND a day-of-month parameter is not supported. One of them should be replaced by `?`. Incorrect: `* 5,7,9 14/2 * * WED,SAT *`, correct: `* 5,7,9 14/2 ? * WED,SAT *`. See details in [Cron Trigger Tutorial](https://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html).
     */
    public readonly cronExp!: pulumi.Output<string | undefined>;
    /**
     * When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on artifact, e.g. add, deleted or property change. Default value is `false`.
     * com/confluence/display/JFROG/User+Profile#UserProfile-IdentityTokenidentitytoken).
     */
    public readonly enableEventReplication!: pulumi.Output<boolean | undefined>;
    /**
     * When set, enables replication of this repository to the target specified in `url` attribute. Default value is `true`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**&#47;z/*`. By default, no artifacts are excluded.
     */
    public readonly excludePathPrefixPattern!: pulumi.Output<string | undefined>;
    /**
     * List of artifact patterns to include when evaluating artifact requests in the form of `x/y/**&#47;z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included `(**&#47;*)`.
     */
    public readonly includePathPrefixPattern!: pulumi.Output<string | undefined>;
    /**
     * Replication ID, the value is unknown until the resource is created. Can't be set or updated.
     */
    public readonly replicationKey!: pulumi.Output<string>;
    /**
     * Repository name.
     */
    public readonly repoKey!: pulumi.Output<string>;
    /**
     * When set, items that were deleted locally should also be deleted remotely (also applies to properties metadata). Note that enabling this option, will delete artifacts on the target that do not exist in the source repository. Default value is `false`.
     */
    public readonly syncDeletes!: pulumi.Output<boolean | undefined>;
    /**
     * When set, the task also synchronizes the properties of replicated artifacts. Default value is `true`.
     */
    public readonly syncProperties!: pulumi.Output<boolean | undefined>;

    /**
     * Create a RemoteRepositoryReplication resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RemoteRepositoryReplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RemoteRepositoryReplicationArgs | RemoteRepositoryReplicationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RemoteRepositoryReplicationState | undefined;
            resourceInputs["checkBinaryExistenceInFilestore"] = state ? state.checkBinaryExistenceInFilestore : undefined;
            resourceInputs["cronExp"] = state ? state.cronExp : undefined;
            resourceInputs["enableEventReplication"] = state ? state.enableEventReplication : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["excludePathPrefixPattern"] = state ? state.excludePathPrefixPattern : undefined;
            resourceInputs["includePathPrefixPattern"] = state ? state.includePathPrefixPattern : undefined;
            resourceInputs["replicationKey"] = state ? state.replicationKey : undefined;
            resourceInputs["repoKey"] = state ? state.repoKey : undefined;
            resourceInputs["syncDeletes"] = state ? state.syncDeletes : undefined;
            resourceInputs["syncProperties"] = state ? state.syncProperties : undefined;
        } else {
            const args = argsOrState as RemoteRepositoryReplicationArgs | undefined;
            if ((!args || args.repoKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repoKey'");
            }
            resourceInputs["checkBinaryExistenceInFilestore"] = args ? args.checkBinaryExistenceInFilestore : undefined;
            resourceInputs["cronExp"] = args ? args.cronExp : undefined;
            resourceInputs["enableEventReplication"] = args ? args.enableEventReplication : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["excludePathPrefixPattern"] = args ? args.excludePathPrefixPattern : undefined;
            resourceInputs["includePathPrefixPattern"] = args ? args.includePathPrefixPattern : undefined;
            resourceInputs["replicationKey"] = args ? args.replicationKey : undefined;
            resourceInputs["repoKey"] = args ? args.repoKey : undefined;
            resourceInputs["syncDeletes"] = args ? args.syncDeletes : undefined;
            resourceInputs["syncProperties"] = args ? args.syncProperties : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RemoteRepositoryReplication.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RemoteRepositoryReplication resources.
 */
export interface RemoteRepositoryReplicationState {
    /**
     * Enabling the `checkBinaryExistenceInFilestore` flag requires an Enterprise Plus license. When true, enables distributed checksum storage. For more information, see [Optimizing Repository Replication with Checksum-Based Storage](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-OptimizingRepositoryReplicationUsingStorageLevelSynchronizationOptions).
     */
    checkBinaryExistenceInFilestore?: pulumi.Input<boolean>;
    /**
     * A valid CRON expression that you can use to control replication frequency. Eg: `0 0 12 * * ? *`, `0 0 2 ? * MON-SAT *`. Note: use 6 or 7 parts format - Seconds, Minutes Hours, Day Of Month, Month, Day Of Week, Year (optional). Specifying both a day-of-week AND a day-of-month parameter is not supported. One of them should be replaced by `?`. Incorrect: `* 5,7,9 14/2 * * WED,SAT *`, correct: `* 5,7,9 14/2 ? * WED,SAT *`. See details in [Cron Trigger Tutorial](https://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html).
     */
    cronExp?: pulumi.Input<string>;
    /**
     * When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on artifact, e.g. add, deleted or property change. Default value is `false`.
     * com/confluence/display/JFROG/User+Profile#UserProfile-IdentityTokenidentitytoken).
     */
    enableEventReplication?: pulumi.Input<boolean>;
    /**
     * When set, enables replication of this repository to the target specified in `url` attribute. Default value is `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**&#47;z/*`. By default, no artifacts are excluded.
     */
    excludePathPrefixPattern?: pulumi.Input<string>;
    /**
     * List of artifact patterns to include when evaluating artifact requests in the form of `x/y/**&#47;z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included `(**&#47;*)`.
     */
    includePathPrefixPattern?: pulumi.Input<string>;
    /**
     * Replication ID, the value is unknown until the resource is created. Can't be set or updated.
     */
    replicationKey?: pulumi.Input<string>;
    /**
     * Repository name.
     */
    repoKey?: pulumi.Input<string>;
    /**
     * When set, items that were deleted locally should also be deleted remotely (also applies to properties metadata). Note that enabling this option, will delete artifacts on the target that do not exist in the source repository. Default value is `false`.
     */
    syncDeletes?: pulumi.Input<boolean>;
    /**
     * When set, the task also synchronizes the properties of replicated artifacts. Default value is `true`.
     */
    syncProperties?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a RemoteRepositoryReplication resource.
 */
export interface RemoteRepositoryReplicationArgs {
    /**
     * Enabling the `checkBinaryExistenceInFilestore` flag requires an Enterprise Plus license. When true, enables distributed checksum storage. For more information, see [Optimizing Repository Replication with Checksum-Based Storage](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-OptimizingRepositoryReplicationUsingStorageLevelSynchronizationOptions).
     */
    checkBinaryExistenceInFilestore?: pulumi.Input<boolean>;
    /**
     * A valid CRON expression that you can use to control replication frequency. Eg: `0 0 12 * * ? *`, `0 0 2 ? * MON-SAT *`. Note: use 6 or 7 parts format - Seconds, Minutes Hours, Day Of Month, Month, Day Of Week, Year (optional). Specifying both a day-of-week AND a day-of-month parameter is not supported. One of them should be replaced by `?`. Incorrect: `* 5,7,9 14/2 * * WED,SAT *`, correct: `* 5,7,9 14/2 ? * WED,SAT *`. See details in [Cron Trigger Tutorial](https://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html).
     */
    cronExp?: pulumi.Input<string>;
    /**
     * When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on artifact, e.g. add, deleted or property change. Default value is `false`.
     * com/confluence/display/JFROG/User+Profile#UserProfile-IdentityTokenidentitytoken).
     */
    enableEventReplication?: pulumi.Input<boolean>;
    /**
     * When set, enables replication of this repository to the target specified in `url` attribute. Default value is `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**&#47;z/*`. By default, no artifacts are excluded.
     */
    excludePathPrefixPattern?: pulumi.Input<string>;
    /**
     * List of artifact patterns to include when evaluating artifact requests in the form of `x/y/**&#47;z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included `(**&#47;*)`.
     */
    includePathPrefixPattern?: pulumi.Input<string>;
    /**
     * Replication ID, the value is unknown until the resource is created. Can't be set or updated.
     */
    replicationKey?: pulumi.Input<string>;
    /**
     * Repository name.
     */
    repoKey: pulumi.Input<string>;
    /**
     * When set, items that were deleted locally should also be deleted remotely (also applies to properties metadata). Note that enabling this option, will delete artifacts on the target that do not exist in the source repository. Default value is `false`.
     */
    syncDeletes?: pulumi.Input<boolean>;
    /**
     * When set, the task also synchronizes the properties of replicated artifacts. Default value is `true`.
     */
    syncProperties?: pulumi.Input<boolean>;
}
