// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides an Artifactory Archive Policy resource. This resource enable system administrators to configure and maintain JFrog cleanup policies for Release Bundles V2. See [Cleanup Policies](https://jfrog.com/help/r/jfrog-rest-apis/cleanup-policies-release-bundles-v2-apis) for more details.
 *
 * ~>Release Bundles V2 Cleanup Policies APIs are supported on Artifactory version 7.104.2 and later.
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import artifactory:index/releaseBundleV2CleanupPolicy:ReleaseBundleV2CleanupPolicy my-cleanup-policy my-policy
 * ```
 */
export class ReleaseBundleV2CleanupPolicy extends pulumi.CustomResource {
    /**
     * Get an existing ReleaseBundleV2CleanupPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ReleaseBundleV2CleanupPolicyState, opts?: pulumi.CustomResourceOptions): ReleaseBundleV2CleanupPolicy {
        return new ReleaseBundleV2CleanupPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'artifactory:index/releaseBundleV2CleanupPolicy:ReleaseBundleV2CleanupPolicy';

    /**
     * Returns true if the given object is an instance of ReleaseBundleV2CleanupPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ReleaseBundleV2CleanupPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReleaseBundleV2CleanupPolicy.__pulumiType;
    }

    /**
     * The cron expression determines when the policy is run. This parameter is not mandatory, however if left empty the policy will not run automatically and can only be triggered manually.
     */
    declare public readonly cronExpression: pulumi.Output<string | undefined>;
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The maximum duration (in minutes) for policy execution, after which the policy will stop running even if not completed. While setting a maximum run duration for a policy is useful for adhering to a strict archive V2 schedule, it can cause the policy to stop before completion.
     */
    declare public readonly durationInMinutes: pulumi.Output<number | undefined>;
    /**
     * Enables or disabled the release bundles v2 cleanup policy. This allows the user to run the policy manually. If a policy has a valid cron expression, then it will be scheduled for execution based on it. If a policy is disabled, its future executions will be unscheduled. Defaults to `true`
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * Needs to be set to releaseBundle.
     */
    declare public readonly itemType: pulumi.Output<string>;
    /**
     * An ID that is used to identify the cleanup policy. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
     */
    declare public readonly key: pulumi.Output<string>;
    declare public readonly searchCriteria: pulumi.Output<outputs.ReleaseBundleV2CleanupPolicySearchCriteria>;

    /**
     * Create a ReleaseBundleV2CleanupPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ReleaseBundleV2CleanupPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ReleaseBundleV2CleanupPolicyArgs | ReleaseBundleV2CleanupPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ReleaseBundleV2CleanupPolicyState | undefined;
            resourceInputs["cronExpression"] = state?.cronExpression;
            resourceInputs["description"] = state?.description;
            resourceInputs["durationInMinutes"] = state?.durationInMinutes;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["itemType"] = state?.itemType;
            resourceInputs["key"] = state?.key;
            resourceInputs["searchCriteria"] = state?.searchCriteria;
        } else {
            const args = argsOrState as ReleaseBundleV2CleanupPolicyArgs | undefined;
            if (args?.key === undefined && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            if (args?.searchCriteria === undefined && !opts.urn) {
                throw new Error("Missing required property 'searchCriteria'");
            }
            resourceInputs["cronExpression"] = args?.cronExpression;
            resourceInputs["description"] = args?.description;
            resourceInputs["durationInMinutes"] = args?.durationInMinutes;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["itemType"] = args?.itemType;
            resourceInputs["key"] = args?.key;
            resourceInputs["searchCriteria"] = args?.searchCriteria;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ReleaseBundleV2CleanupPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ReleaseBundleV2CleanupPolicy resources.
 */
export interface ReleaseBundleV2CleanupPolicyState {
    /**
     * The cron expression determines when the policy is run. This parameter is not mandatory, however if left empty the policy will not run automatically and can only be triggered manually.
     */
    cronExpression?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    /**
     * The maximum duration (in minutes) for policy execution, after which the policy will stop running even if not completed. While setting a maximum run duration for a policy is useful for adhering to a strict archive V2 schedule, it can cause the policy to stop before completion.
     */
    durationInMinutes?: pulumi.Input<number>;
    /**
     * Enables or disabled the release bundles v2 cleanup policy. This allows the user to run the policy manually. If a policy has a valid cron expression, then it will be scheduled for execution based on it. If a policy is disabled, its future executions will be unscheduled. Defaults to `true`
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Needs to be set to releaseBundle.
     */
    itemType?: pulumi.Input<string>;
    /**
     * An ID that is used to identify the cleanup policy. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
     */
    key?: pulumi.Input<string>;
    searchCriteria?: pulumi.Input<inputs.ReleaseBundleV2CleanupPolicySearchCriteria>;
}

/**
 * The set of arguments for constructing a ReleaseBundleV2CleanupPolicy resource.
 */
export interface ReleaseBundleV2CleanupPolicyArgs {
    /**
     * The cron expression determines when the policy is run. This parameter is not mandatory, however if left empty the policy will not run automatically and can only be triggered manually.
     */
    cronExpression?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    /**
     * The maximum duration (in minutes) for policy execution, after which the policy will stop running even if not completed. While setting a maximum run duration for a policy is useful for adhering to a strict archive V2 schedule, it can cause the policy to stop before completion.
     */
    durationInMinutes?: pulumi.Input<number>;
    /**
     * Enables or disabled the release bundles v2 cleanup policy. This allows the user to run the policy manually. If a policy has a valid cron expression, then it will be scheduled for execution based on it. If a policy is disabled, its future executions will be unscheduled. Defaults to `true`
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Needs to be set to releaseBundle.
     */
    itemType?: pulumi.Input<string>;
    /**
     * An ID that is used to identify the cleanup policy. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
     */
    key: pulumi.Input<string>;
    searchCriteria: pulumi.Input<inputs.ReleaseBundleV2CleanupPolicySearchCriteria>;
}
