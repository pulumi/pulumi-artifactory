// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # Artifactory Virtual Repository Resource
 *
 * Provides an Artifactory virtual repository resource. This can be used to create and manage Artifactory virtual repositories.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as artifactory from "@pulumi/artifactory";
 *
 * const bar = new artifactory.LocalRepository("bar", {
 *     key: "bar",
 *     packageType: "maven",
 * });
 * const baz = new artifactory.LocalRepository("baz", {
 *     key: "baz",
 *     packageType: "maven",
 * });
 * const foo = new artifactory.VirtualRepository("foo", {
 *     key: "foo",
 *     packageType: "maven",
 *     repositories: [
 *         bar.key,
 *         baz.key,
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Virtual repositories can be imported using their name, e.g.
 *
 * ```sh
 *  $ pulumi import artifactory:index/virtualRepository:VirtualRepository foo foo
 * ```
 */
export class VirtualRepository extends pulumi.CustomResource {
    /**
     * Get an existing VirtualRepository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualRepositoryState, opts?: pulumi.CustomResourceOptions): VirtualRepository {
        return new VirtualRepository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'artifactory:index/virtualRepository:VirtualRepository';

    /**
     * Returns true if the given object is an instance of VirtualRepository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualRepository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualRepository.__pulumiType;
    }

    public readonly artifactoryRequestsCanRetrieveRemoteArtifacts!: pulumi.Output<boolean | undefined>;
    public readonly debianTrivialLayout!: pulumi.Output<boolean | undefined>;
    public readonly defaultDeploymentRepo!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly excludesPattern!: pulumi.Output<string | undefined>;
    public readonly forceNugetAuthentication!: pulumi.Output<boolean>;
    public readonly includesPattern!: pulumi.Output<string | undefined>;
    public readonly key!: pulumi.Output<string>;
    public readonly keyPair!: pulumi.Output<string | undefined>;
    public readonly notes!: pulumi.Output<string | undefined>;
    public readonly packageType!: pulumi.Output<string>;
    public readonly pomRepositoryReferencesCleanupPolicy!: pulumi.Output<string>;
    public readonly repoLayoutRef!: pulumi.Output<string>;
    public readonly repositories!: pulumi.Output<string[]>;

    /**
     * Create a VirtualRepository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualRepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualRepositoryArgs | VirtualRepositoryState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualRepositoryState | undefined;
            inputs["artifactoryRequestsCanRetrieveRemoteArtifacts"] = state ? state.artifactoryRequestsCanRetrieveRemoteArtifacts : undefined;
            inputs["debianTrivialLayout"] = state ? state.debianTrivialLayout : undefined;
            inputs["defaultDeploymentRepo"] = state ? state.defaultDeploymentRepo : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["excludesPattern"] = state ? state.excludesPattern : undefined;
            inputs["forceNugetAuthentication"] = state ? state.forceNugetAuthentication : undefined;
            inputs["includesPattern"] = state ? state.includesPattern : undefined;
            inputs["key"] = state ? state.key : undefined;
            inputs["keyPair"] = state ? state.keyPair : undefined;
            inputs["notes"] = state ? state.notes : undefined;
            inputs["packageType"] = state ? state.packageType : undefined;
            inputs["pomRepositoryReferencesCleanupPolicy"] = state ? state.pomRepositoryReferencesCleanupPolicy : undefined;
            inputs["repoLayoutRef"] = state ? state.repoLayoutRef : undefined;
            inputs["repositories"] = state ? state.repositories : undefined;
        } else {
            const args = argsOrState as VirtualRepositoryArgs | undefined;
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            if ((!args || args.packageType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'packageType'");
            }
            if ((!args || args.repositories === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repositories'");
            }
            inputs["artifactoryRequestsCanRetrieveRemoteArtifacts"] = args ? args.artifactoryRequestsCanRetrieveRemoteArtifacts : undefined;
            inputs["debianTrivialLayout"] = args ? args.debianTrivialLayout : undefined;
            inputs["defaultDeploymentRepo"] = args ? args.defaultDeploymentRepo : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["excludesPattern"] = args ? args.excludesPattern : undefined;
            inputs["forceNugetAuthentication"] = args ? args.forceNugetAuthentication : undefined;
            inputs["includesPattern"] = args ? args.includesPattern : undefined;
            inputs["key"] = args ? args.key : undefined;
            inputs["keyPair"] = args ? args.keyPair : undefined;
            inputs["notes"] = args ? args.notes : undefined;
            inputs["packageType"] = args ? args.packageType : undefined;
            inputs["pomRepositoryReferencesCleanupPolicy"] = args ? args.pomRepositoryReferencesCleanupPolicy : undefined;
            inputs["repoLayoutRef"] = args ? args.repoLayoutRef : undefined;
            inputs["repositories"] = args ? args.repositories : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(VirtualRepository.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VirtualRepository resources.
 */
export interface VirtualRepositoryState {
    artifactoryRequestsCanRetrieveRemoteArtifacts?: pulumi.Input<boolean>;
    debianTrivialLayout?: pulumi.Input<boolean>;
    defaultDeploymentRepo?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    excludesPattern?: pulumi.Input<string>;
    forceNugetAuthentication?: pulumi.Input<boolean>;
    includesPattern?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    keyPair?: pulumi.Input<string>;
    notes?: pulumi.Input<string>;
    packageType?: pulumi.Input<string>;
    pomRepositoryReferencesCleanupPolicy?: pulumi.Input<string>;
    repoLayoutRef?: pulumi.Input<string>;
    repositories?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a VirtualRepository resource.
 */
export interface VirtualRepositoryArgs {
    artifactoryRequestsCanRetrieveRemoteArtifacts?: pulumi.Input<boolean>;
    debianTrivialLayout?: pulumi.Input<boolean>;
    defaultDeploymentRepo?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    excludesPattern?: pulumi.Input<string>;
    forceNugetAuthentication?: pulumi.Input<boolean>;
    includesPattern?: pulumi.Input<string>;
    key: pulumi.Input<string>;
    keyPair?: pulumi.Input<string>;
    notes?: pulumi.Input<string>;
    packageType: pulumi.Input<string>;
    pomRepositoryReferencesCleanupPolicy?: pulumi.Input<string>;
    repoLayoutRef?: pulumi.Input<string>;
    repositories: pulumi.Input<pulumi.Input<string>[]>;
}
