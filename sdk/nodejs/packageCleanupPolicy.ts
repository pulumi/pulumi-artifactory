// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * ```sh
 * $ pulumi import artifactory:index/packageCleanupPolicy:PackageCleanupPolicy my-cleanup-policy my-policy
 * ```
 *
 * ```sh
 * $ pulumi import artifactory:index/packageCleanupPolicy:PackageCleanupPolicy my-cleanup-policy my-policy:myproj
 * ```
 */
export class PackageCleanupPolicy extends pulumi.CustomResource {
    /**
     * Get an existing PackageCleanupPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PackageCleanupPolicyState, opts?: pulumi.CustomResourceOptions): PackageCleanupPolicy {
        return new PackageCleanupPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'artifactory:index/packageCleanupPolicy:PackageCleanupPolicy';

    /**
     * Returns true if the given object is an instance of PackageCleanupPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PackageCleanupPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PackageCleanupPolicy.__pulumiType;
    }

    /**
     * The cron expression that determines when the policy is run, However if left empty the policy will not run automatically and can only be triggered manually.
     */
    declare public readonly cronExpression: pulumi.Output<string | undefined>;
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The maximum duration (in minutes) for policy execution, after which the policy will stop running even if not completed. While setting a maximum run duration for a policy is useful for adhering to a strict cleanup schedule, it can cause the policy to stop before completion.
     */
    declare public readonly durationInMinutes: pulumi.Output<number | undefined>;
    /**
     * A cleanup policy must be created inactive. But if used it must be set to `false`. If set to `true` when calling this API, the API call will fail and an error message is received. Defaults to `true`
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * An ID that is used to identify the cleanup policy. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
     */
    declare public readonly key: pulumi.Output<string>;
    declare public readonly searchCriteria: pulumi.Output<outputs.PackageCleanupPolicySearchCriteria>;
    /**
     * A true value means that when this policy is executed, packages will be permanently deleted. false means that when the policy is executed packages will be deleted to the Trash Can. Defaults to `false`.
     */
    declare public readonly skipTrashcan: pulumi.Output<boolean>;

    /**
     * Create a PackageCleanupPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PackageCleanupPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PackageCleanupPolicyArgs | PackageCleanupPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PackageCleanupPolicyState | undefined;
            resourceInputs["cronExpression"] = state?.cronExpression;
            resourceInputs["description"] = state?.description;
            resourceInputs["durationInMinutes"] = state?.durationInMinutes;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["key"] = state?.key;
            resourceInputs["searchCriteria"] = state?.searchCriteria;
            resourceInputs["skipTrashcan"] = state?.skipTrashcan;
        } else {
            const args = argsOrState as PackageCleanupPolicyArgs | undefined;
            if (args?.key === undefined && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            if (args?.searchCriteria === undefined && !opts.urn) {
                throw new Error("Missing required property 'searchCriteria'");
            }
            resourceInputs["cronExpression"] = args?.cronExpression;
            resourceInputs["description"] = args?.description;
            resourceInputs["durationInMinutes"] = args?.durationInMinutes;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["key"] = args?.key;
            resourceInputs["searchCriteria"] = args?.searchCriteria;
            resourceInputs["skipTrashcan"] = args?.skipTrashcan;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PackageCleanupPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PackageCleanupPolicy resources.
 */
export interface PackageCleanupPolicyState {
    /**
     * The cron expression that determines when the policy is run, However if left empty the policy will not run automatically and can only be triggered manually.
     */
    cronExpression?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    /**
     * The maximum duration (in minutes) for policy execution, after which the policy will stop running even if not completed. While setting a maximum run duration for a policy is useful for adhering to a strict cleanup schedule, it can cause the policy to stop before completion.
     */
    durationInMinutes?: pulumi.Input<number>;
    /**
     * A cleanup policy must be created inactive. But if used it must be set to `false`. If set to `true` when calling this API, the API call will fail and an error message is received. Defaults to `true`
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * An ID that is used to identify the cleanup policy. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
     */
    key?: pulumi.Input<string>;
    searchCriteria?: pulumi.Input<inputs.PackageCleanupPolicySearchCriteria>;
    /**
     * A true value means that when this policy is executed, packages will be permanently deleted. false means that when the policy is executed packages will be deleted to the Trash Can. Defaults to `false`.
     */
    skipTrashcan?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a PackageCleanupPolicy resource.
 */
export interface PackageCleanupPolicyArgs {
    /**
     * The cron expression that determines when the policy is run, However if left empty the policy will not run automatically and can only be triggered manually.
     */
    cronExpression?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    /**
     * The maximum duration (in minutes) for policy execution, after which the policy will stop running even if not completed. While setting a maximum run duration for a policy is useful for adhering to a strict cleanup schedule, it can cause the policy to stop before completion.
     */
    durationInMinutes?: pulumi.Input<number>;
    /**
     * A cleanup policy must be created inactive. But if used it must be set to `false`. If set to `true` when calling this API, the API call will fail and an error message is received. Defaults to `true`
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * An ID that is used to identify the cleanup policy. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
     */
    key: pulumi.Input<string>;
    searchCriteria: pulumi.Input<inputs.PackageCleanupPolicySearchCriteria>;
    /**
     * A true value means that when this policy is executed, packages will be permanently deleted. false means that when the policy is executed packages will be deleted to the Trash Can. Defaults to `false`.
     */
    skipTrashcan?: pulumi.Input<boolean>;
}
