// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides an Artifactory Package Cleanup Policy resource. This resource enable system administrators to define and customize policies based on specific criteria for removing unused binaries from across their JFrog platform. See [Rentation Policies](https://jfrog.com/help/r/jfrog-platform-administration-documentation/retention-policies) for more details.
 *
 * ~>Currently in beta and will be globally available in v7.98.x.
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import artifactory:index/packageCleanupPolicy:PackageCleanupPolicy my-cleanup-policy my-policy
 * ```
 *
 * ```sh
 * $ pulumi import artifactory:index/packageCleanupPolicy:PackageCleanupPolicy my-cleanup-policy my-policy:myproj
 * ```
 */
export class PackageCleanupPolicy extends pulumi.CustomResource {
    /**
     * Get an existing PackageCleanupPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PackageCleanupPolicyState, opts?: pulumi.CustomResourceOptions): PackageCleanupPolicy {
        return new PackageCleanupPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'artifactory:index/packageCleanupPolicy:PackageCleanupPolicy';

    /**
     * Returns true if the given object is an instance of PackageCleanupPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PackageCleanupPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PackageCleanupPolicy.__pulumiType;
    }

    /**
     * The Cron expression that sets the schedule of policy execution. For example, `0 0 2 * * ?` executes the policy every day at 02:00 AM. The minimum recurrent time for policy execution is 6 hours.
     */
    public readonly cronExpression!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Enable and select the maximum duration for policy execution. Note: using this setting can cause the policy to stop before completion.
     */
    public readonly durationInMinutes!: pulumi.Output<number | undefined>;
    /**
     * Enables or disabled the package cleanup policy. This allows the user to run the policy manually. If a policy has a valid cron expression, then it will be scheduled for execution based on it. If a policy is disabled, its future executions will be unscheduled. Defaults to `true`
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Policy key. It has to be unique. It should not be used for other policies and configuration entities like archive policies, key pairs, repo layouts, property sets, backups, proxies, reverse proxies etc. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * This attribute is used only for project-level cleanup policies, it is not used for global-level policies.
     */
    public readonly projectKey!: pulumi.Output<string | undefined>;
    public readonly searchCriteria!: pulumi.Output<outputs.PackageCleanupPolicySearchCriteria>;
    /**
     * Enabling this setting results in packages being permanently deleted from Artifactory after the cleanup policy is executed instead of going to the Trash Can repository. Defaults to `false`.
     */
    public readonly skipTrashcan!: pulumi.Output<boolean>;

    /**
     * Create a PackageCleanupPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PackageCleanupPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PackageCleanupPolicyArgs | PackageCleanupPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PackageCleanupPolicyState | undefined;
            resourceInputs["cronExpression"] = state ? state.cronExpression : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["durationInMinutes"] = state ? state.durationInMinutes : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["projectKey"] = state ? state.projectKey : undefined;
            resourceInputs["searchCriteria"] = state ? state.searchCriteria : undefined;
            resourceInputs["skipTrashcan"] = state ? state.skipTrashcan : undefined;
        } else {
            const args = argsOrState as PackageCleanupPolicyArgs | undefined;
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            if ((!args || args.searchCriteria === undefined) && !opts.urn) {
                throw new Error("Missing required property 'searchCriteria'");
            }
            resourceInputs["cronExpression"] = args ? args.cronExpression : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["durationInMinutes"] = args ? args.durationInMinutes : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["projectKey"] = args ? args.projectKey : undefined;
            resourceInputs["searchCriteria"] = args ? args.searchCriteria : undefined;
            resourceInputs["skipTrashcan"] = args ? args.skipTrashcan : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PackageCleanupPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PackageCleanupPolicy resources.
 */
export interface PackageCleanupPolicyState {
    /**
     * The Cron expression that sets the schedule of policy execution. For example, `0 0 2 * * ?` executes the policy every day at 02:00 AM. The minimum recurrent time for policy execution is 6 hours.
     */
    cronExpression?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    /**
     * Enable and select the maximum duration for policy execution. Note: using this setting can cause the policy to stop before completion.
     */
    durationInMinutes?: pulumi.Input<number>;
    /**
     * Enables or disabled the package cleanup policy. This allows the user to run the policy manually. If a policy has a valid cron expression, then it will be scheduled for execution based on it. If a policy is disabled, its future executions will be unscheduled. Defaults to `true`
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Policy key. It has to be unique. It should not be used for other policies and configuration entities like archive policies, key pairs, repo layouts, property sets, backups, proxies, reverse proxies etc. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
     */
    key?: pulumi.Input<string>;
    /**
     * This attribute is used only for project-level cleanup policies, it is not used for global-level policies.
     */
    projectKey?: pulumi.Input<string>;
    searchCriteria?: pulumi.Input<inputs.PackageCleanupPolicySearchCriteria>;
    /**
     * Enabling this setting results in packages being permanently deleted from Artifactory after the cleanup policy is executed instead of going to the Trash Can repository. Defaults to `false`.
     */
    skipTrashcan?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a PackageCleanupPolicy resource.
 */
export interface PackageCleanupPolicyArgs {
    /**
     * The Cron expression that sets the schedule of policy execution. For example, `0 0 2 * * ?` executes the policy every day at 02:00 AM. The minimum recurrent time for policy execution is 6 hours.
     */
    cronExpression?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    /**
     * Enable and select the maximum duration for policy execution. Note: using this setting can cause the policy to stop before completion.
     */
    durationInMinutes?: pulumi.Input<number>;
    /**
     * Enables or disabled the package cleanup policy. This allows the user to run the policy manually. If a policy has a valid cron expression, then it will be scheduled for execution based on it. If a policy is disabled, its future executions will be unscheduled. Defaults to `true`
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Policy key. It has to be unique. It should not be used for other policies and configuration entities like archive policies, key pairs, repo layouts, property sets, backups, proxies, reverse proxies etc. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
     */
    key: pulumi.Input<string>;
    /**
     * This attribute is used only for project-level cleanup policies, it is not used for global-level policies.
     */
    projectKey?: pulumi.Input<string>;
    searchCriteria: pulumi.Input<inputs.PackageCleanupPolicySearchCriteria>;
    /**
     * Enabling this setting results in packages being permanently deleted from Artifactory after the cleanup policy is executed instead of going to the Trash Can repository. Defaults to `false`.
     */
    skipTrashcan?: pulumi.Input<boolean>;
}
