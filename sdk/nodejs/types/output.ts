// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AccessTokenAdminToken {
    instanceId: string;
}

export interface ArtifactCustomWebhookCriteria {
    /**
     * Trigger on any federated repositories
     */
    anyFederated: boolean;
    /**
     * Trigger on any local repo.
     */
    anyLocal: boolean;
    /**
     * Trigger on any remote repo.
     */
    anyRemote: boolean;
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`.
     */
    excludePatterns?: string[];
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`.
     */
    includePatterns?: string[];
    /**
     * Trigger on this list of repo keys.
     */
    repoKeys: string[];
}

export interface ArtifactCustomWebhookHandler {
    /**
     * HTTP headers you wish to use to invoke the Webhook, comprise key/value pair.
     */
    httpHeaders?: {[key: string]: string};
    /**
     * This attribute is used to build the request body. Used in custom webhooks
     */
    payload?: string;
    /**
     * Proxy key from Artifactory UI (Administration > Proxies > Configuration).
     */
    proxy?: string;
    /**
     * Defines a set of sensitive values (such as, tokens and passwords) that can be injected in the headers and/or payload.Secrets’ values are encrypted. In the header/payload, the value can be invoked using the `{{.secrets.token}}` format, where token is the name provided for the secret value. Comprise key/value pair. **Note:** if multiple handlers are used, same secret name and different secret value for the same url won't work. Example: 
     */
    secrets?: {[key: string]: string};
    /**
     * Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
     */
    url: string;
}

export interface ArtifactLifecycleCustomWebhookHandler {
    /**
     * HTTP headers you wish to use to invoke the Webhook, comprise key/value pair.
     */
    httpHeaders?: {[key: string]: string};
    /**
     * This attribute is used to build the request body. Used in custom webhooks
     */
    payload?: string;
    /**
     * Proxy key from Artifactory UI (Administration > Proxies > Configuration).
     */
    proxy?: string;
    /**
     * Defines a set of sensitive values (such as, tokens and passwords) that can be injected in the headers and/or payload.Secrets’ values are encrypted. In the header/payload, the value can be invoked using the `{{.secrets.token}}` format, where token is the name provided for the secret value. Comprise key/value pair. **Note:** if multiple handlers are used, same secret name and different secret value for the same url won't work. Example:
     */
    secrets?: {[key: string]: string};
    /**
     * Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
     */
    url: string;
}

export interface ArtifactLifecycleWebhookHandler {
    /**
     * Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
     */
    customHttpHeaders?: {[key: string]: string};
    /**
     * Proxy key from Artifactory UI (Administration > Proxies > Configuration).
     */
    proxy?: string;
    /**
     * Secret authentication token that will be sent to the configured URL. The value will be sent as `x-jfrog-event-auth` header.
     */
    secret?: string;
    /**
     * Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
     */
    url: string;
    /**
     * When set to `true`, the secret will be used to sign the event payload, allowing the target to validate that the payload content has not been changed and will not be passed as part of the event. If left unset or set to `false`, the secret is passed through the `X-JFrog-Event-Auth` HTTP header.
     */
    useSecretForSigning?: boolean;
}

export interface ArtifactPropertyCustomWebhookCriteria {
    /**
     * Trigger on any federated repositories
     */
    anyFederated: boolean;
    /**
     * Trigger on any local repo.
     */
    anyLocal: boolean;
    /**
     * Trigger on any remote repo.
     */
    anyRemote: boolean;
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`.
     */
    excludePatterns?: string[];
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`.
     */
    includePatterns?: string[];
    /**
     * Trigger on this list of repo keys.
     */
    repoKeys: string[];
}

export interface ArtifactPropertyCustomWebhookHandler {
    /**
     * HTTP headers you wish to use to invoke the Webhook, comprise key/value pair.
     */
    httpHeaders?: {[key: string]: string};
    /**
     * This attribute is used to build the request body. Used in custom webhooks
     */
    payload?: string;
    /**
     * Proxy key from Artifactory UI (Administration > Proxies > Configuration).
     */
    proxy?: string;
    /**
     * Defines a set of sensitive values (such as, tokens and passwords) that can be injected in the headers and/or payload.Secrets’ values are encrypted. In the header/payload, the value can be invoked using the `{{.secrets.token}}` format, where token is the name provided for the secret value. Comprise key/value pair. **Note:** if multiple handlers are used, same secret name and different secret value for the same url won't work. Example:
     */
    secrets?: {[key: string]: string};
    /**
     * Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
     */
    url: string;
}

export interface ArtifactPropertyWebhookCriteria {
    /**
     * Trigger on any federated repo.
     */
    anyFederated: boolean;
    /**
     * Trigger on any local repo.
     */
    anyLocal: boolean;
    /**
     * Trigger on any remote repo.
     */
    anyRemote: boolean;
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`.
     */
    excludePatterns?: string[];
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`.
     */
    includePatterns?: string[];
    /**
     * Trigger on this list of repo keys.
     */
    repoKeys: string[];
}

export interface ArtifactPropertyWebhookHandler {
    /**
     * Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
     */
    customHttpHeaders?: {[key: string]: string};
    /**
     * Proxy key from Artifactory UI (Administration > Proxies > Configuration).
     */
    proxy?: string;
    /**
     * Secret authentication token that will be sent to the configured URL. The value will be sent as `x-jfrog-event-auth` header.
     */
    secret?: string;
    /**
     * Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
     */
    url: string;
    /**
     * When set to `true`, the secret will be used to sign the event payload, allowing the target to validate that the payload content has not been changed and will not be passed as part of the event. If left unset or set to `false`, the secret is passed through the `X-JFrog-Event-Auth` HTTP header.
     */
    useSecretForSigning?: boolean;
}

export interface ArtifactWebhookCriteria {
    /**
     * Trigger on any federated repo.
     */
    anyFederated: boolean;
    /**
     * Trigger on any local repo.
     */
    anyLocal: boolean;
    /**
     * Trigger on any remote repo.
     */
    anyRemote: boolean;
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`.
     */
    excludePatterns?: string[];
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`.
     */
    includePatterns?: string[];
    /**
     * Trigger on this list of repo keys.
     */
    repoKeys: string[];
}

export interface ArtifactWebhookHandler {
    /**
     * Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
     */
    customHttpHeaders?: {[key: string]: string};
    /**
     * Proxy key from Artifactory UI (Administration > Proxies > Configuration).
     */
    proxy?: string;
    /**
     * Secret authentication token that will be sent to the configured URL. The value will be sent as `x-jfrog-event-auth` header.
     */
    secret?: string;
    /**
     * Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
     */
    url: string;
    /**
     * When set to `true`, the secret will be used to sign the event payload, allowing the target to validate that the payload content has not been changed and will not be passed as part of the event. If left unset or set to `false`, the secret is passed through the `X-JFrog-Event-Auth` HTTP header.
     */
    useSecretForSigning?: boolean;
}

export interface ArtifactoryReleaseBundleCustomWebhookCriteria {
    /**
     * Trigger on any release bundle
     */
    anyReleaseBundle: boolean;
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`
     */
    excludePatterns?: string[];
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`
     */
    includePatterns?: string[];
    /**
     * Trigger on this list of release bundle names
     */
    registeredReleaseBundleNames: string[];
}

export interface ArtifactoryReleaseBundleCustomWebhookHandler {
    /**
     * HTTP headers you wish to use to invoke the Webhook, comprise key/value pair.
     */
    httpHeaders?: {[key: string]: string};
    /**
     * This attribute is used to build the request body. Used in custom webhooks
     */
    payload?: string;
    /**
     * Proxy key from Artifactory UI (Administration > Proxies > Configuration).
     */
    proxy?: string;
    /**
     * Defines a set of sensitive values (such as, tokens and passwords) that can be injected in the headers and/or payload.Secrets’ values are encrypted. In the header/payload, the value can be invoked using the `{{.secrets.token}}` format, where token is the name provided for the secret value. Comprise key/value pair. **Note:** if multiple handlers are used, same secret name and different secret value for the same url won't work. Example:
     */
    secrets?: {[key: string]: string};
    /**
     * Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
     */
    url: string;
}

export interface ArtifactoryReleaseBundleWebhookCriteria {
    /**
     * Trigger on any release bundle
     */
    anyReleaseBundle: boolean;
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`
     */
    excludePatterns?: string[];
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`
     */
    includePatterns?: string[];
    /**
     * Trigger on this list of release bundle names
     */
    registeredReleaseBundleNames: string[];
}

export interface ArtifactoryReleaseBundleWebhookHandler {
    /**
     * Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
     */
    customHttpHeaders?: {[key: string]: string};
    /**
     * Proxy key from Artifactory UI (Administration > Proxies > Configuration).
     */
    proxy?: string;
    /**
     * Secret authentication token that will be sent to the configured URL. The value will be sent as `x-jfrog-event-auth` header.
     */
    secret?: string;
    /**
     * Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
     */
    url: string;
    /**
     * When set to `true`, the secret will be used to sign the event payload, allowing the target to validate that the payload content has not been changed and will not be passed as part of the event. If left unset or set to `false`, the secret is passed through the `X-JFrog-Event-Auth` HTTP header.
     */
    useSecretForSigning?: boolean;
}

export interface BuildCustomWebhookCriteria {
    /**
     * Trigger on any build.
     */
    anyBuild: boolean;
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`.
     */
    excludePatterns?: string[];
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`.
     */
    includePatterns?: string[];
    /**
     * Trigger on this list of build names.
     */
    selectedBuilds: string[];
}

export interface BuildCustomWebhookHandler {
    /**
     * HTTP headers you wish to use to invoke the Webhook, comprise key/value pair.
     */
    httpHeaders?: {[key: string]: string};
    /**
     * This attribute is used to build the request body. Used in custom webhooks
     */
    payload?: string;
    /**
     * Proxy key from Artifactory UI (Administration > Proxies > Configuration).
     */
    proxy?: string;
    /**
     * Defines a set of sensitive values (such as, tokens and passwords) that can be injected in the headers and/or payload.Secrets’ values are encrypted. In the header/payload, the value can be invoked using the `{{.secrets.token}}` format, where token is the name provided for the secret value. Comprise key/value pair. **Note:** if multiple handlers are used, same secret name and different secret value for the same url won't work. Example:
     */
    secrets?: {[key: string]: string};
    /**
     * Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
     */
    url: string;
}

export interface BuildWebhookCriteria {
    /**
     * Trigger on any build.
     */
    anyBuild: boolean;
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`.
     */
    excludePatterns?: string[];
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`.
     */
    includePatterns?: string[];
    /**
     * Trigger on this list of build names.
     */
    selectedBuilds: string[];
}

export interface BuildWebhookHandler {
    /**
     * Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
     */
    customHttpHeaders?: {[key: string]: string};
    /**
     * Proxy key from Artifactory UI (Administration > Proxies > Configuration).
     */
    proxy?: string;
    /**
     * Secret authentication token that will be sent to the configured URL. The value will be sent as `x-jfrog-event-auth` header.
     */
    secret?: string;
    /**
     * Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
     */
    url: string;
    /**
     * When set to `true`, the secret will be used to sign the event payload, allowing the target to validate that the payload content has not been changed and will not be passed as part of the event. If left unset or set to `false`, the secret is passed through the `X-JFrog-Event-Auth` HTTP header.
     */
    useSecretForSigning?: boolean;
}

export interface DestinationCustomWebhookCriteria {
    /**
     * Trigger on any release bundle
     */
    anyReleaseBundle: boolean;
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`
     */
    excludePatterns?: string[];
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`
     */
    includePatterns?: string[];
    /**
     * Trigger on this list of release bundle names
     */
    registeredReleaseBundleNames: string[];
}

export interface DestinationCustomWebhookHandler {
    /**
     * HTTP headers you wish to use to invoke the Webhook, comprise key/value pair.
     */
    httpHeaders?: {[key: string]: string};
    /**
     * This attribute is used to build the request body. Used in custom webhooks
     */
    payload?: string;
    /**
     * Proxy key from Artifactory UI (Administration > Proxies > Configuration).
     */
    proxy?: string;
    /**
     * Defines a set of sensitive values (such as, tokens and passwords) that can be injected in the headers and/or payload.Secrets’ values are encrypted. In the header/payload, the value can be invoked using the `{{.secrets.token}}` format, where token is the name provided for the secret value. Comprise key/value pair. **Note:** if multiple handlers are used, same secret name and different secret value for the same url won't work. Example:
     */
    secrets?: {[key: string]: string};
    /**
     * Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
     */
    url: string;
}

export interface DestinationWebhookCriteria {
    /**
     * Trigger on any release bundle
     */
    anyReleaseBundle: boolean;
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`
     */
    excludePatterns?: string[];
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`
     */
    includePatterns?: string[];
    /**
     * Trigger on this list of release bundle names
     */
    registeredReleaseBundleNames: string[];
}

export interface DestinationWebhookHandler {
    /**
     * Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
     */
    customHttpHeaders?: {[key: string]: string};
    /**
     * Proxy key from Artifactory UI (Administration > Proxies > Configuration).
     */
    proxy?: string;
    /**
     * Secret authentication token that will be sent to the configured URL. The value will be sent as `x-jfrog-event-auth` header.
     */
    secret?: string;
    /**
     * Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
     */
    url: string;
    /**
     * When set to `true`, the secret will be used to sign the event payload, allowing the target to validate that the payload content has not been changed and will not be passed as part of the event. If left unset or set to `false`, the secret is passed through the `X-JFrog-Event-Auth` HTTP header.
     */
    useSecretForSigning?: boolean;
}

export interface DistributionCustomWebhookCriteria {
    /**
     * Trigger on any release bundle.
     */
    anyReleaseBundle: boolean;
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`.
     */
    excludePatterns?: string[];
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`.
     */
    includePatterns?: string[];
    /**
     * Trigger on this list of release bundle names.
     */
    registeredReleaseBundleNames: string[];
}

export interface DistributionCustomWebhookHandler {
    /**
     * HTTP headers you wish to use to invoke the Webhook, comprise key/value pair.
     */
    httpHeaders?: {[key: string]: string};
    /**
     * This attribute is used to build the request body. Used in custom webhooks
     */
    payload?: string;
    /**
     * Proxy key from Artifactory UI (Administration > Proxies > Configuration).
     */
    proxy?: string;
    /**
     * Defines a set of sensitive values (such as, tokens and passwords) that can be injected in the headers and/or payload.Secrets’ values are encrypted. In the header/payload, the value can be invoked using the `{{.secrets.token}}` format, where token is the name provided for the secret value. Comprise key/value pair. **Note:** if multiple handlers are used, same secret name and different secret value for the same url won't work. Example:
     */
    secrets?: {[key: string]: string};
    /**
     * Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
     */
    url: string;
}

export interface DistributionWebhookCriteria {
    /**
     * Trigger on any release bundle.
     */
    anyReleaseBundle: boolean;
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`.
     */
    excludePatterns?: string[];
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`.
     */
    includePatterns?: string[];
    /**
     * Trigger on this list of release bundle names.
     */
    registeredReleaseBundleNames: string[];
}

export interface DistributionWebhookHandler {
    /**
     * Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
     */
    customHttpHeaders?: {[key: string]: string};
    /**
     * Proxy key from Artifactory UI (Administration > Proxies > Configuration).
     */
    proxy?: string;
    /**
     * Secret authentication token that will be sent to the configured URL. The value will be sent as `x-jfrog-event-auth` header.
     */
    secret?: string;
    /**
     * Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
     */
    url: string;
    /**
     * When set to `true`, the secret will be used to sign the event payload, allowing the target to validate that the payload content has not been changed and will not be passed as part of the event. If left unset or set to `false`, the secret is passed through the `X-JFrog-Event-Auth` HTTP header.
     */
    useSecretForSigning?: boolean;
}

export interface DockerCustomWebhookCriteria {
    /**
     * Trigger on any federated repositories
     */
    anyFederated: boolean;
    /**
     * Trigger on any local repo.
     */
    anyLocal: boolean;
    /**
     * Trigger on any remote repo.
     */
    anyRemote: boolean;
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`.
     */
    excludePatterns?: string[];
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`.
     */
    includePatterns?: string[];
    /**
     * Trigger on this list of repo keys.
     */
    repoKeys: string[];
}

export interface DockerCustomWebhookHandler {
    /**
     * HTTP headers you wish to use to invoke the Webhook, comprise key/value pair.
     */
    httpHeaders?: {[key: string]: string};
    /**
     * This attribute is used to build the request body. Used in custom webhooks
     */
    payload?: string;
    /**
     * Proxy key from Artifactory UI (Administration > Proxies > Configuration).
     */
    proxy?: string;
    /**
     * Defines a set of sensitive values (such as, tokens and passwords) that can be injected in the headers and/or payload.Secrets’ values are encrypted. In the header/payload, the value can be invoked using the `{{.secrets.token}}` format, where token is the name provided for the secret value. Comprise key/value pair. **Note:** if multiple handlers are used, same secret name and different secret value for the same url won't work. Example:
     */
    secrets?: {[key: string]: string};
    /**
     * Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
     */
    url: string;
}

export interface DockerWebhookCriteria {
    /**
     * Trigger on any federated repo.
     */
    anyFederated: boolean;
    /**
     * Trigger on any local repo.
     */
    anyLocal: boolean;
    /**
     * Trigger on any remote repo.
     */
    anyRemote: boolean;
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`.
     */
    excludePatterns?: string[];
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: `org/apache/**`.
     */
    includePatterns?: string[];
    /**
     * Trigger on this list of repo keys.
     */
    repoKeys: string[];
}

export interface DockerWebhookHandler {
    /**
     * Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
     */
    customHttpHeaders?: {[key: string]: string};
    /**
     * Proxy key from Artifactory UI (Administration > Proxies > Configuration).
     */
    proxy?: string;
    /**
     * Secret authentication token that will be sent to the configured URL. The value will be sent as `x-jfrog-event-auth` header.
     */
    secret?: string;
    /**
     * Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
     */
    url: string;
    /**
     * When set to `true`, the secret will be used to sign the event payload, allowing the target to validate that the payload content has not been changed and will not be passed as part of the event. If left unset or set to `false`, the secret is passed through the `X-JFrog-Event-Auth` HTTP header.
     */
    useSecretForSigning?: boolean;
}

export interface FederatedAlpineRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface FederatedAnsibleRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface FederatedBowerRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface FederatedCargoRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface FederatedChefRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface FederatedCocoapodsRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface FederatedComposerRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface FederatedConanRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface FederatedCondaRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface FederatedCranRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface FederatedDebianRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface FederatedDockerRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface FederatedDockerV1RepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface FederatedDockerV2RepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface FederatedGemsRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface FederatedGenericRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface FederatedGitltfsRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface FederatedGoRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface FederatedGradleRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface FederatedHelmRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface FederatedHelmociRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface FederatedIvyRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface FederatedMavenRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface FederatedNpmRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface FederatedNugetRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface FederatedOciRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface FederatedOpkgRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface FederatedPuppetRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface FederatedPypiRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface FederatedRpmRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface FederatedSbtRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface FederatedSwiftRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface FederatedTerraformModuleRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface FederatedTerraformProviderRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface FederatedVagrantRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface GetFederatedAlpineRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface GetFederatedAnsibleRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface GetFederatedBowerRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface GetFederatedCargoRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface GetFederatedChefRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface GetFederatedCocoapodsRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface GetFederatedComposerRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface GetFederatedConanRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface GetFederatedCondaRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface GetFederatedCranRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface GetFederatedDebianRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface GetFederatedDockerRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repositoryName
     */
    url: string;
}

export interface GetFederatedDockerV1RepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface GetFederatedDockerV2RepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface GetFederatedGemsRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface GetFederatedGenericRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface GetFederatedGitlfsRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface GetFederatedGoRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface GetFederatedGradleRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface GetFederatedHelmRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface GetFederatedHelmociRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface GetFederatedIvyRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface GetFederatedMavenRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface GetFederatedNpmRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface GetFederatedNugetRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface GetFederatedOciRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface GetFederatedOpkgRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface GetFederatedPuppetRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface GetFederatedPypiRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface GetFederatedRpmRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface GetFederatedSbtRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface GetFederatedSwiftRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface GetFederatedTerraformModuleRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface GetFederatedTerraformProviderRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface GetFederatedVagrantRepositoryMember {
    /**
     * Admin access token for this member Artifactory instance. Used in conjunction with `cleanupOnDelete` attribute when Access Federation for access tokens is not enabled.
     */
    accessToken?: string;
    /**
     * Represents the active state of the federated member. It is supported to change the enabled
     * status of my own member. The config will be updated on the other federated members automatically.
     */
    enabled: boolean;
    /**
     * Full URL to ending with the repository name.
     */
    url: string;
}

export interface GetFileListFile {
    /**
     * Is this a folder
     */
    folder: boolean;
    /**
     * Last modified time
     */
    lastModified: string;
    /**
     * File metadata
     */
    metadataTimestamps: outputs.GetFileListFileMetadataTimestamps;
    /**
     * SHA-1 checksum
     */
    sha1: string;
    /**
     * SHA-256 checksum
     */
    sha2: string;
    /**
     * File size in bytes
     */
    size: number;
    /**
     * URL to file
     */
    uri: string;
}

export interface GetFileListFileMetadataTimestamps {
    /**
     * Properties timestamp
     */
    properties: string;
}

export interface GetPermissionTargetBuild {
    actions?: outputs.GetPermissionTargetBuildActions;
    /**
     * Pattern of artifacts to exclude.
     */
    excludesPatterns?: string[];
    /**
     * Pattern of artifacts to include.
     */
    includesPatterns?: string[];
    /**
     * List of repositories this permission target is applicable for. You can specify the
     * name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote
     * repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
     */
    repositories: string[];
}

export interface GetPermissionTargetBuildActions {
    /**
     * Groups this permission applies for.
     */
    groups?: outputs.GetPermissionTargetBuildActionsGroup[];
    /**
     * Users this permission target applies for.
     */
    users?: outputs.GetPermissionTargetBuildActionsUser[];
}

export interface GetPermissionTargetBuildActionsGroup {
    /**
     * Name of the permission target.
     */
    name: string;
    permissions: string[];
}

export interface GetPermissionTargetBuildActionsUser {
    /**
     * Name of the permission target.
     */
    name: string;
    permissions: string[];
}

export interface GetPermissionTargetReleaseBundle {
    actions?: outputs.GetPermissionTargetReleaseBundleActions;
    /**
     * Pattern of artifacts to exclude.
     */
    excludesPatterns?: string[];
    /**
     * Pattern of artifacts to include.
     */
    includesPatterns?: string[];
    /**
     * List of repositories this permission target is applicable for. You can specify the
     * name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote
     * repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
     */
    repositories: string[];
}

export interface GetPermissionTargetReleaseBundleActions {
    /**
     * Groups this permission applies for.
     */
    groups?: outputs.GetPermissionTargetReleaseBundleActionsGroup[];
    /**
     * Users this permission target applies for.
     */
    users?: outputs.GetPermissionTargetReleaseBundleActionsUser[];
}

export interface GetPermissionTargetReleaseBundleActionsGroup {
    /**
     * Name of the permission target.
     */
    name: string;
    permissions: string[];
}

export interface GetPermissionTargetReleaseBundleActionsUser {
    /**
     * Name of the permission target.
     */
    name: string;
    permissions: string[];
}

export interface GetPermissionTargetRepo {
    actions?: outputs.GetPermissionTargetRepoActions;
    /**
     * Pattern of artifacts to exclude.
     */
    excludesPatterns?: string[];
    /**
     * Pattern of artifacts to include.
     */
    includesPatterns?: string[];
    /**
     * List of repositories this permission target is applicable for. You can specify the
     * name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote
     * repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
     */
    repositories: string[];
}

export interface GetPermissionTargetRepoActions {
    /**
     * Groups this permission applies for.
     */
    groups?: outputs.GetPermissionTargetRepoActionsGroup[];
    /**
     * Users this permission target applies for.
     */
    users?: outputs.GetPermissionTargetRepoActionsUser[];
}

export interface GetPermissionTargetRepoActionsGroup {
    /**
     * Name of the permission target.
     */
    name: string;
    permissions: string[];
}

export interface GetPermissionTargetRepoActionsUser {
    /**
     * Name of the permission target.
     */
    name: string;
    permissions: string[];
}

export interface GetRemoteAlpineRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface GetRemoteAnsibleRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface GetRemoteBowerRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface GetRemoteCargoRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface GetRemoteChefRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface GetRemoteCocoapodsRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface GetRemoteComposerRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface GetRemoteConanRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface GetRemoteCondaRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface GetRemoteCranRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface GetRemoteDebianRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface GetRemoteDockerRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface GetRemoteGemsRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface GetRemoteGenericRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface GetRemoteGitlfsRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface GetRemoteGoRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface GetRemoteGradleRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface GetRemoteHelmRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface GetRemoteHelmociRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface GetRemoteIvyRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface GetRemoteMavenRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface GetRemoteNpmRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface GetRemoteNugetRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface GetRemoteOciRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface GetRemoteOpkgRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface GetRemoteP2RepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface GetRemotePubRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface GetRemotePuppetRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface GetRemotePypiRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface GetRemoteRpmRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface GetRemoteSbtRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface GetRemoteSwiftRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface GetRemoteTerraformRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface GetRemoteVcsRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface GetRepositoriesRepo {
    description: string;
    key: string;
    packageType: string;
    type: string;
    url: string;
}

export interface LocalRepositoryMultiReplicationReplication {
    /**
     * Enabling the `checkBinaryExistenceInFilestore` flag requires an Enterprise Plus license. When true, enables distributed checksum storage. For more information, see [Optimizing Repository Replication with Checksum-Based Storage](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-OptimizingRepositoryReplicationUsingStorageLevelSynchronizationOptions).
     */
    checkBinaryExistenceInFilestore: boolean;
    /**
     * When set, enables replication of this repository to the target specified in `url` attribute. Default value is `true`.
     */
    enabled: boolean;
    /**
     * List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**&#47;z/*`. By default, no artifacts are excluded.
     */
    excludePathPrefixPattern: string;
    /**
     * List of artifact patterns to include when evaluating artifact requests in the form of `x/y/**&#47;z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included `(**&#47;*)`.
     */
    includePathPrefixPattern: string;
    /**
     * Use either the HTTP authentication password or [identity token](https://www.jfrog.com/confluence/display/JFROG/User+Profile#UserProfile-IdentityTokenidentitytoken).
     */
    password: string;
    /**
     * Proxy key from Artifactory Proxies settings. The proxy configuration will be used when communicating with the remote instance.
     */
    proxy: string;
    /**
     * Replication ID, the value is unknown until the resource is created. Can't be set or updated.
     */
    replicationKey: string;
    /**
     * The network timeout in milliseconds to use for remote operations. Default value is `15000`.
     */
    socketTimeoutMillis: number;
    /**
     * When set, items that were deleted locally should also be deleted remotely (also applies to properties metadata). Note that enabling this option, will delete artifacts on the target that do not exist in the source repository. Default value is `false`.
     */
    syncDeletes: boolean;
    /**
     * When set, the task also synchronizes the properties of replicated artifacts. Default value is `true`.
     */
    syncProperties: boolean;
    /**
     * When set, the task also synchronizes artifact download statistics. Set to avoid inadvertent cleanup at the target instance when setting up replication for disaster recovery. Default value is `false`
     */
    syncStatistics: boolean;
    /**
     * The URL of the target local repository on a remote Artifactory server. Use the format `https://<artifactory_url>/artifactory/<repository_name>`.
     */
    url: string;
    /**
     * Username on the remote Artifactory instance.
     */
    username: string;
}

export interface ManagedUserPasswordPolicy {
    /**
     * Minimum number of digits that the password must contain
     */
    digit?: number;
    /**
     * Minimum length of the password
     */
    length?: number;
    /**
     * Minimum number of lowercase letters that the password must contain
     */
    lowercase?: number;
    /**
     * Minimum number of special char that the password must contain. Special chars list: `!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~`
     */
    specialChar?: number;
    /**
     * Minimum number of uppercase letters that the password must contain
     */
    uppercase?: number;
}

export interface OauthSettingsOauthProvider {
    /**
     * OAuth user info endpoint for the IdP.
     */
    apiUrl: string;
    /**
     * OAuth authorization endpoint for the IdP.
     */
    authUrl: string;
    /**
     * OAuth client ID configured on the IdP.
     */
    clientId: string;
    /**
     * OAuth client secret configured on the IdP.
     */
    clientSecret: string;
    /**
     * Enable the Artifactory OAuth provider.  Default value is `true`.
     */
    enabled?: boolean;
    /**
     * Name of the Artifactory OAuth provider.
     */
    name: string;
    /**
     * OAuth token endpoint for the IdP.
     */
    tokenUrl: string;
    /**
     * Type of OAuth provider. (e.g., `github`, `google`, `cloudfoundry`, or `openId`)
     */
    type: string;
}

export interface PackageCleanupPolicySearchCriteria {
    /**
     * Remove packages based on when they were created. For example, remove packages that were created more than a year ago. The default value is to remove packages created more than 2 years ago.
     */
    createdBeforeInMonths: number;
    /**
     * Specify explicit package names that you want excluded from the policy. Only Name explicit names (and not patterns) are accepted.
     */
    excludedPackages?: string[];
    /**
     * Specify patterns for repository names or explicit repository names that you want excluded from the cleanup policy.
     */
    excludedRepos?: string[];
    /**
     * Set this to `true` if you want the policy to run on all projects on the platform.
     */
    includeAllProjects?: boolean;
    /**
     * Specify a pattern for a package name or an explicit package name. It accept only single element which can be specific package or pattern, and for including all packages use `**`. Example: `includedPackages = ["**"]`
     */
    includedPackages: string[];
    /**
     * List of projects on which you want this policy to run. To include repositories that are not assigned to any project, enter the project key `default`.
     */
    includedProjects?: string[];
    /**
     * Select the number of latest versions to keep. The cleanup policy will remove all versions prior to the number you select here. The latest version is always excluded. Versions are determined by creation date.
     *
     * ~>Not all package types support this condition. For information on which package types support this condition, [learn more](https://jfrog.com/help/r/jfrog-platform-administration-documentation/retention-policies/package-types-coverage).
     */
    keepLastNVersions?: number;
    /**
     * Removes packages based on when they were last downloaded. For example, removes packages that were not downloaded in the past year. The default value is to remove packages that were downloaded more than 2 years ago.
     *
     * ~>If a package was never downloaded, the policy will remove it based only on the age-condition (`createdBeforeInMonths`).
     *
     * ~>JFrog recommends using the `lastDownloadedBeforeInMonths` condition to ensure that packages currently in use are not deleted.
     */
    lastDownloadedBeforeInMonths: number;
    /**
     * Types of packages to be removed. Support: conan, docker, generic, gradle, maven, npm, nuget, rpm.
     */
    packageTypes: string[];
    /**
     * Specify patterns for repository names or explicit repository names. For including all repos use `**`. Example: `repos = ["**"]`
     */
    repos: string[];
}

export interface PermissionTargetBuild {
    actions?: outputs.PermissionTargetBuildActions;
    /**
     * The default value will be [] if nothing is supplied
     */
    excludesPatterns?: string[];
    /**
     * The default value will be [""] if nothing is supplied
     */
    includesPatterns?: string[];
    /**
     * This can only be 1 value: "artifactory-build-info", and currently, validation of sets/lists is not allowed. Artifactory will reject the request if you change this
     */
    repositories: string[];
}

export interface PermissionTargetBuildActions {
    /**
     * Groups this permission applies for.
     */
    groups?: outputs.PermissionTargetBuildActionsGroup[];
    /**
     * Users this permission target applies for.
     */
    users?: outputs.PermissionTargetBuildActionsUser[];
}

export interface PermissionTargetBuildActionsGroup {
    /**
     * Name of permission.
     */
    name: string;
    permissions: string[];
}

export interface PermissionTargetBuildActionsUser {
    /**
     * Name of permission.
     */
    name: string;
    permissions: string[];
}

export interface PermissionTargetReleaseBundle {
    actions?: outputs.PermissionTargetReleaseBundleActions;
    /**
     * The default value will be [] if nothing is supplied
     */
    excludesPatterns?: string[];
    /**
     * The default value will be [""] if nothing is supplied
     */
    includesPatterns?: string[];
    /**
     * This can only be 1 value: "artifactory-build-info", and currently, validation of sets/lists is not allowed. Artifactory will reject the request if you change this
     */
    repositories: string[];
}

export interface PermissionTargetReleaseBundleActions {
    /**
     * Groups this permission applies for.
     */
    groups?: outputs.PermissionTargetReleaseBundleActionsGroup[];
    /**
     * Users this permission target applies for.
     */
    users?: outputs.PermissionTargetReleaseBundleActionsUser[];
}

export interface PermissionTargetReleaseBundleActionsGroup {
    /**
     * Name of permission.
     */
    name: string;
    permissions: string[];
}

export interface PermissionTargetReleaseBundleActionsUser {
    /**
     * Name of permission.
     */
    name: string;
    permissions: string[];
}

export interface PermissionTargetRepo {
    actions?: outputs.PermissionTargetRepoActions;
    /**
     * Pattern of artifacts to exclude.
     */
    excludesPatterns?: string[];
    /**
     * Pattern of artifacts to include.
     */
    includesPatterns?: string[];
    /**
     * List of repositories this permission target is applicable for. You can specify the name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
     */
    repositories: string[];
}

export interface PermissionTargetRepoActions {
    /**
     * Groups this permission applies for.
     */
    groups?: outputs.PermissionTargetRepoActionsGroup[];
    /**
     * Users this permission target applies for.
     */
    users?: outputs.PermissionTargetRepoActionsUser[];
}

export interface PermissionTargetRepoActionsGroup {
    /**
     * Name of permission.
     */
    name: string;
    permissions: string[];
}

export interface PermissionTargetRepoActionsUser {
    /**
     * Name of permission.
     */
    name: string;
    permissions: string[];
}

export interface PropertySetProperty {
    /**
     * Disables `multipleChoice` if set to `false` at the same time with multipleChoice set to `true`. Default value is `false`
     */
    closedPredefinedValues: boolean;
    /**
     * Defines if user can select multiple values. `closedPredefinedValues` should be set to `true`. Default value is `false`.
     */
    multipleChoice: boolean;
    /**
     * The name pf the property.
     */
    name: string;
    /**
     * Properties in the property set.
     */
    predefinedValues?: outputs.PropertySetPropertyPredefinedValue[];
}

export interface PropertySetPropertyPredefinedValue {
    /**
     * Whether the value is selected by default in the UI.
     */
    defaultValue: boolean;
    /**
     * Property set name.
     */
    name: string;
}

export interface PushReplicationReplication {
    /**
     * When true, enables distributed checksum storage. For more information, see
     * [Optimizing Repository Replication with Checksum-Based Storage](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-OptimizingRepositoryReplicationUsingStorageLevelSynchronizationOptions).
     */
    checkBinaryExistenceInFilestore?: boolean;
    /**
     * When set, this replication will be enabled when saved.
     */
    enabled: boolean;
    /**
     * Required for local repository, but not needed for remote repository.
     */
    password: string;
    /**
     * Only artifacts that located in path that matches the subpath within the remote repository will be replicated.
     */
    pathPrefix?: string;
    /**
     * Proxy key from Artifactory Proxies settings. The proxy configuration will be used when communicating with the remote instance.
     */
    proxy?: string;
    /**
     * The network timeout in milliseconds to use for remote operations.
     */
    socketTimeoutMillis: number;
    /**
     * When set, items that were deleted locally should also be deleted remotely (also applies to properties metadata).
     * Note that enabling this option, will delete artifacts on the target that do not exist in the source repository.
     */
    syncDeletes: boolean;
    /**
     * When set, the task also synchronizes the properties of replicated artifacts.
     */
    syncProperties: boolean;
    /**
     * When set, artifact download statistics will also be replicated. Set to avoid inadvertent cleanup at the target instance when setting up replication for disaster recovery.
     */
    syncStatistics: boolean;
    /**
     * The URL of the target local repository on a remote Artifactory server. Required for local repository, but not needed for remote repository.
     */
    url: string;
    /**
     * Required for local repository, but not needed for remote repository.
     */
    username: string;
}

export interface ReleaseBundleCustomWebhookCriteria {
    /**
     * Trigger on any release bundle.
     */
    anyReleaseBundle: boolean;
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: "org/apache/**".
     */
    excludePatterns?: string[];
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: "org/apache/**".
     */
    includePatterns?: string[];
    /**
     * Trigger on this list of release bundle names.
     */
    registeredReleaseBundleNames: string[];
}

export interface ReleaseBundleCustomWebhookHandler {
    /**
     * HTTP headers you wish to use to invoke the Webhook, comprise key/value pair.
     */
    httpHeaders?: {[key: string]: string};
    /**
     * This attribute is used to build the request body. Used in custom webhooks
     */
    payload?: string;
    /**
     * Proxy key from Artifactory UI (Administration > Proxies > Configuration).
     */
    proxy?: string;
    /**
     * Defines a set of sensitive values (such as, tokens and passwords) that can be injected in the headers and/or payload.Secrets’ values are encrypted. In the header/payload, the value can be invoked using the `{{.secrets.token}}` format, where token is the name provided for the secret value. Comprise key/value pair. **Note:** if multiple handlers are used, same secret name and different secret value for the same url won't work. Example:
     */
    secrets?: {[key: string]: string};
    /**
     * Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
     */
    url: string;
}

export interface ReleaseBundleV2CustomWebhookCriteria {
    /**
     * Trigger on any release bundle.
     */
    anyReleaseBundle: boolean;
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: "org/apache/**".
     */
    excludePatterns?: string[];
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: "org/apache/**".
     */
    includePatterns?: string[];
    /**
     * Trigger on this list of release bundle names.
     */
    selectedReleaseBundles: string[];
}

export interface ReleaseBundleV2CustomWebhookHandler {
    /**
     * HTTP headers you wish to use to invoke the Webhook, comprise key/value pair.
     */
    httpHeaders?: {[key: string]: string};
    /**
     * This attribute is used to build the request body. Used in custom webhooks
     */
    payload?: string;
    /**
     * Proxy key from Artifactory UI (Administration > Proxies > Configuration).
     */
    proxy?: string;
    /**
     * Defines a set of sensitive values (such as, tokens and passwords) that can be injected in the headers and/or payload.Secrets’ values are encrypted. In the header/payload, the value can be invoked using the `{{.secrets.token}}` format, where token is the name provided for the secret value. Comprise key/value pair. **Note:** if multiple handlers are used, same secret name and different secret value for the same url won't work. Example:
     */
    secrets?: {[key: string]: string};
    /**
     * Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
     */
    url: string;
}

export interface ReleaseBundleV2PromotionCustomWebhookCriteria {
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\nAnt-style path expressions are supported (*, **, ?).\nFor example: "org/apache/**"
     */
    excludePatterns?: string[];
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\nAnt-style path expressions are supported (*, **, ?).\nFor example: "org/apache/**"
     */
    includePatterns?: string[];
    /**
     * Trigger on this list of environment names.
     */
    selectedEnvironments: string[];
}

export interface ReleaseBundleV2PromotionCustomWebhookHandler {
    /**
     * HTTP headers you wish to use to invoke the Webhook, comprise key/value pair.
     */
    httpHeaders?: {[key: string]: string};
    /**
     * This attribute is used to build the request body. Used in custom webhooks
     */
    payload?: string;
    /**
     * Proxy key from Artifactory UI (Administration > Proxies > Configuration).
     */
    proxy?: string;
    /**
     * Defines a set of sensitive values (such as, tokens and passwords) that can be injected in the headers and/or payload.Secrets’ values are encrypted. In the header/payload, the value can be invoked using the `{{.secrets.token}}` format, where token is the name provided for the secret value. Comprise key/value pair. **Note:** if multiple handlers are used, same secret name and different secret value for the same url won't work. Example:
     */
    secrets?: {[key: string]: string};
    /**
     * Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
     */
    url: string;
}

export interface ReleaseBundleV2PromotionWebhookCriteria {
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\nAnt-style path expressions are supported (*, **, ?).\nFor example: "org/apache/**"
     */
    excludePatterns?: string[];
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\nAnt-style path expressions are supported (*, **, ?).\nFor example: "org/apache/**"
     */
    includePatterns?: string[];
    /**
     * Trigger on this list of environment names.
     */
    selectedEnvironments: string[];
}

export interface ReleaseBundleV2PromotionWebhookHandler {
    /**
     * Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
     */
    customHttpHeaders?: {[key: string]: string};
    /**
     * Proxy key from Artifactory UI (Administration > Proxies > Configuration).
     */
    proxy?: string;
    /**
     * Secret authentication token that will be sent to the configured URL. The value will be sent as `x-jfrog-event-auth` header.
     */
    secret?: string;
    /**
     * Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
     */
    url: string;
    /**
     * When set to `true`, the secret will be used to sign the event payload, allowing the target to validate that the payload content has not been changed and will not be passed as part of the event. If left unset or set to `false`, the secret is passed through the `X-JFrog-Event-Auth` HTTP header.
     */
    useSecretForSigning?: boolean;
}

export interface ReleaseBundleV2Source {
    /**
     * The contents of the AQL query.
     */
    aql?: string;
    /**
     * Source type to create a Release Bundle v2 version by collecting source artifacts from a list of path/checksum pairs.
     */
    artifacts?: outputs.ReleaseBundleV2SourceArtifact[];
    /**
     * Source type to create a Release Bundle v2 version by collecting source artifacts from one or multiple builds (also known as build-info).
     */
    builds?: outputs.ReleaseBundleV2SourceBuild[];
    /**
     * Source type to create a Release Bundle v2 version by collecting source artifacts from existing Release Bundle versions. Must match `sourceType` attribute value.
     */
    releaseBundles?: outputs.ReleaseBundleV2SourceReleaseBundle[];
}

export interface ReleaseBundleV2SourceArtifact {
    /**
     * The path for the artifact
     */
    path: string;
    /**
     * The SHA256 for the artifact
     */
    sha256?: string;
}

export interface ReleaseBundleV2SourceBuild {
    /**
     * Determines whether to include build dependencies in the Release Bundle. The default value is `false`.
     */
    includeDependencies: boolean;
    /**
     * Name of the build.
     */
    name: string;
    /**
     * Number (run) of the build.
     */
    number: string;
    /**
     * The repository key of the build. If omitted, the system uses the default built-in repository, `artifactory-build-info`.
     */
    repository?: string;
    /**
     * Timestamp when the build was created. If omitted, the system uses the latest build run, as identified by the `name` and `number` combination. The timestamp is provided according to the ISO 8601 standard.
     */
    started?: string;
}

export interface ReleaseBundleV2SourceReleaseBundle {
    /**
     * The name of the release bundle.
     */
    name: string;
    /**
     * Project key of the release bundle.
     */
    projectKey?: string;
    /**
     * The key of the release bundle repository.
     */
    repositoryKey?: string;
    /**
     * The version of the release bundle.
     */
    version: string;
}

export interface ReleaseBundleV2WebhookCriteria {
    /**
     * Trigger on any release bundle.
     */
    anyReleaseBundle: boolean;
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: "org/apache/**".
     */
    excludePatterns?: string[];
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: "org/apache/**".
     */
    includePatterns?: string[];
    /**
     * Trigger on this list of release bundle names.
     */
    selectedReleaseBundles: string[];
}

export interface ReleaseBundleV2WebhookHandler {
    /**
     * Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
     */
    customHttpHeaders?: {[key: string]: string};
    /**
     * Proxy key from Artifactory UI (Administration > Proxies > Configuration).
     */
    proxy?: string;
    /**
     * Secret authentication token that will be sent to the configured URL. The value will be sent as `x-jfrog-event-auth` header.
     */
    secret?: string;
    /**
     * Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
     */
    url: string;
    /**
     * When set to `true`, the secret will be used to sign the event payload, allowing the target to validate that the payload content has not been changed and will not be passed as part of the event. If left unset or set to `false`, the secret is passed through the `X-JFrog-Event-Auth` HTTP header.
     */
    useSecretForSigning?: boolean;
}

export interface ReleaseBundleWebhookCriteria {
    /**
     * Trigger on any release bundle.
     */
    anyReleaseBundle: boolean;
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: "org/apache/**".
     */
    excludePatterns?: string[];
    /**
     * Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, *\*, ?). For example: "org/apache/**".
     */
    includePatterns?: string[];
    /**
     * Trigger on this list of release bundle names.
     */
    registeredReleaseBundleNames: string[];
}

export interface ReleaseBundleWebhookHandler {
    /**
     * Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
     */
    customHttpHeaders?: {[key: string]: string};
    /**
     * Proxy key from Artifactory UI (Administration > Proxies > Configuration).
     */
    proxy?: string;
    /**
     * Secret authentication token that will be sent to the configured URL. The value will be sent as `x-jfrog-event-auth` header.
     */
    secret?: string;
    /**
     * Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
     */
    url: string;
    /**
     * When set to `true`, the secret will be used to sign the event payload, allowing the target to validate that the payload content has not been changed and will not be passed as part of the event. If left unset or set to `false`, the secret is passed through the `X-JFrog-Event-Auth` HTTP header.
     */
    useSecretForSigning?: boolean;
}

export interface RemoteAlpineRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface RemoteAnsibleRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface RemoteBowerRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface RemoteCargoRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface RemoteChefRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface RemoteCocoapodsRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface RemoteComposerRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface RemoteConanRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface RemoteCondaRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface RemoteCranRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface RemoteDebianRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface RemoteDockerRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface RemoteGemsRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface RemoteGenericRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface RemoteGitlfsRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface RemoteGoRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface RemoteGradleRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface RemoteHelmRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface RemoteHelmociRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface RemoteHuggingfacemlRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface RemoteIvyRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface RemoteMavenRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface RemoteNpmRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface RemoteNugetRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface RemoteOciRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface RemoteOpkgRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface RemoteP2RepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface RemotePubRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface RemotePuppetRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface RemotePypiRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface RemoteRpmRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface RemoteSbtRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface RemoteSwiftRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface RemoteTerraformRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface RemoteVcsRepositoryContentSynchronisation {
    /**
     * If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
     */
    enabled?: boolean;
    /**
     * If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
     */
    propertiesEnabled?: boolean;
    /**
     * If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
     */
    sourceOriginAbsenceDetection?: boolean;
    /**
     * If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
     */
    statisticsEnabled?: boolean;
}

export interface ReplicationConfigReplication {
    enabled: boolean;
    /**
     * Requires password encryption to be turned off `POST /api/system/decrypt`.
     */
    password: string;
    pathPrefix?: string;
    /**
     * Proxy key from Artifactory Proxies setting
     */
    proxy?: string;
    socketTimeoutMillis: number;
    syncDeletes: boolean;
    syncProperties: boolean;
    syncStatistics: boolean;
    url?: string;
    username?: string;
}

export interface UnmanagedUserPasswordPolicy {
    /**
     * Minimum number of digits that the password must contain
     */
    digit?: number;
    /**
     * Minimum length of the password
     */
    length?: number;
    /**
     * Minimum number of lowercase letters that the password must contain
     */
    lowercase?: number;
    /**
     * Minimum number of special char that the password must contain. Special chars list: ``!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~``
     */
    specialChar?: number;
    /**
     * Minimum number of uppercase letters that the password must contain
     */
    uppercase?: number;
}

export interface UserCustomWebhookHandler {
    /**
     * HTTP headers you wish to use to invoke the Webhook, comprise key/value pair.
     */
    httpHeaders?: {[key: string]: string};
    /**
     * This attribute is used to build the request body. Used in custom webhooks
     */
    payload?: string;
    /**
     * Proxy key from Artifactory UI (Administration > Proxies > Configuration).
     */
    proxy?: string;
    /**
     * Defines a set of sensitive values (such as, tokens and passwords) that can be injected in the headers and/or payload.Secrets’ values are encrypted. In the header/payload, the value can be invoked using the `{{.secrets.token}}` format, where token is the name provided for the secret value. Comprise key/value pair. **Note:** if multiple handlers are used, same secret name and different secret value for the same url won't work. Example:
     */
    secrets?: {[key: string]: string};
    /**
     * Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
     */
    url: string;
}

export interface UserPasswordPolicy {
    /**
     * Minimum number of digits that the password must contain
     */
    digit?: number;
    /**
     * Minimum length of the password
     */
    length?: number;
    /**
     * Minimum number of lowercase letters that the password must contain
     */
    lowercase?: number;
    /**
     * Minimum number of special char that the password must contain. Special chars list: `!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~`
     */
    specialChar?: number;
    /**
     * Minimum number of uppercase letters that the password must contain
     */
    uppercase?: number;
}

export interface UserWebhookHandler {
    /**
     * Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
     */
    customHttpHeaders?: {[key: string]: string};
    /**
     * Proxy key from Artifactory UI (Administration > Proxies > Configuration).
     */
    proxy?: string;
    /**
     * Secret authentication token that will be sent to the configured URL. The value will be sent as `x-jfrog-event-auth` header.
     */
    secret?: string;
    /**
     * Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
     */
    url: string;
    /**
     * When set to `true`, the secret will be used to sign the event payload, allowing the target to validate that the payload content has not been changed and will not be passed as part of the event. If left unset or set to `false`, the secret is passed through the `X-JFrog-Event-Auth` HTTP header.
     */
    useSecretForSigning?: boolean;
}

export interface VaultConfigurationConfig {
    auth: outputs.VaultConfigurationConfigAuth;
    mounts: outputs.VaultConfigurationConfigMount[];
    /**
     * The base URL of the Vault server.
     */
    url: string;
}

export interface VaultConfigurationConfigAuth {
    /**
     * Client certificate (in PEM format) for `Certificate` type.
     */
    certificate?: string;
    /**
     * Private key (in PEM format) for `Certificate` type.
     */
    certificateKey?: string;
    /**
     * Role ID for `AppRole` type
     */
    roleId?: string;
    /**
     * Secret ID for `AppRole` type
     */
    secretId?: string;
    type: string;
}

export interface VaultConfigurationConfigMount {
    /**
     * Vault secret engine path
     */
    path: string;
    /**
     * Vault supports several secret engines, each one has different capabilities. The supported secret engine types are: `KV1` and `KV2`.
     */
    type: string;
}

