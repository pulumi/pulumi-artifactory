// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * ## # Xray Policy Resource
 *
 * Provides an Xray policy resource. This can be used to create and manage Xray v1 policies.
 *
 * ## Import
 *
 * A policy can be imported by using the name, e.g.
 *
 * ```sh
 *  $ pulumi import artifactory:index/xrayPolicy:XrayPolicy example policy-name
 * ```
 */
export class XrayPolicy extends pulumi.CustomResource {
    /**
     * Get an existing XrayPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: XrayPolicyState, opts?: pulumi.CustomResourceOptions): XrayPolicy {
        return new XrayPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'artifactory:index/xrayPolicy:XrayPolicy';

    /**
     * Returns true if the given object is an instance of XrayPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is XrayPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === XrayPolicy.__pulumiType;
    }

    /**
     * (Optional) Name of the policy author
     */
    public /*out*/ readonly author!: pulumi.Output<string>;
    /**
     * Timestamp of when the policy was first created
     */
    public /*out*/ readonly created!: pulumi.Output<string>;
    /**
     * (Optional) More verbose description of the policy
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Timestamp of when the policy was last modified
     */
    public /*out*/ readonly modified!: pulumi.Output<string>;
    /**
     * (Required) Name of the rule
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * (Required) Nested block describing the policy rules. Described below.
     */
    public readonly rules!: pulumi.Output<outputs.XrayPolicyRule[]>;
    /**
     * (Required) Type of the policy
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a XrayPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: XrayPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: XrayPolicyArgs | XrayPolicyState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as XrayPolicyState | undefined;
            inputs["author"] = state ? state.author : undefined;
            inputs["created"] = state ? state.created : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["modified"] = state ? state.modified : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["rules"] = state ? state.rules : undefined;
            inputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as XrayPolicyArgs | undefined;
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["rules"] = args ? args.rules : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["author"] = undefined /*out*/;
            inputs["created"] = undefined /*out*/;
            inputs["modified"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(XrayPolicy.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering XrayPolicy resources.
 */
export interface XrayPolicyState {
    /**
     * (Optional) Name of the policy author
     */
    author?: pulumi.Input<string>;
    /**
     * Timestamp of when the policy was first created
     */
    created?: pulumi.Input<string>;
    /**
     * (Optional) More verbose description of the policy
     */
    description?: pulumi.Input<string>;
    /**
     * Timestamp of when the policy was last modified
     */
    modified?: pulumi.Input<string>;
    /**
     * (Required) Name of the rule
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) Nested block describing the policy rules. Described below.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.XrayPolicyRule>[]>;
    /**
     * (Required) Type of the policy
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a XrayPolicy resource.
 */
export interface XrayPolicyArgs {
    /**
     * (Optional) More verbose description of the policy
     */
    description?: pulumi.Input<string>;
    /**
     * (Required) Name of the rule
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) Nested block describing the policy rules. Described below.
     */
    rules: pulumi.Input<pulumi.Input<inputs.XrayPolicyRule>[]>;
    /**
     * (Required) Type of the policy
     */
    type: pulumi.Input<string>;
}
