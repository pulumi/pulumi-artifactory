// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a resource for managaing item (file, folder, or repository) properties. When a folder is used property attachment is recursive by default. See [JFrog documentation](https://jfrog.com/help/r/jfrog-artifactory-documentation/working-with-jfrog-properties) for more details.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as artifactory from "@pulumi/artifactory";
 *
 * const my_repo_properties = new artifactory.ItemProperties("my-repo-properties", {
 *     repoKey: "my-generic-local",
 *     properties: {
 *         key1: ["value1"],
 *         key2: [
 *             "value2",
 *             "value3",
 *         ],
 *     },
 *     isRecursive: true,
 * });
 * const my_folder_properties = new artifactory.ItemProperties("my-folder-properties", {
 *     repoKey: "my-generic-local",
 *     itemPath: "folder/subfolder",
 *     properties: {
 *         key1: ["value1"],
 *         key2: [
 *             "value2",
 *             "value3",
 *         ],
 *     },
 *     isRecursive: true,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import artifactory:index/itemProperties:ItemProperties my-repo-properties repo_key
 * ```
 *
 * ```sh
 * $ pulumi import artifactory:index/itemProperties:ItemProperties my-folder-properties repo_key:folder/subfolder
 * ```
 */
export class ItemProperties extends pulumi.CustomResource {
    /**
     * Get an existing ItemProperties resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ItemPropertiesState, opts?: pulumi.CustomResourceOptions): ItemProperties {
        return new ItemProperties(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'artifactory:index/itemProperties:ItemProperties';

    /**
     * Returns true if the given object is an instance of ItemProperties.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ItemProperties {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ItemProperties.__pulumiType;
    }

    /**
     * Add this property to the selected folder and to all of artifacts and folders under this folder. Default to `false`
     */
    public readonly isRecursive!: pulumi.Output<boolean>;
    /**
     * The relative path of the item (file/folder/repository). Leave unset for repository.
     */
    public readonly itemPath!: pulumi.Output<string | undefined>;
    /**
     * Map of key and list of values.
     */
    public readonly properties!: pulumi.Output<{[key: string]: string[]}>;
    /**
     * Respository key.
     */
    public readonly repoKey!: pulumi.Output<string>;

    /**
     * Create a ItemProperties resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ItemPropertiesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ItemPropertiesArgs | ItemPropertiesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ItemPropertiesState | undefined;
            resourceInputs["isRecursive"] = state ? state.isRecursive : undefined;
            resourceInputs["itemPath"] = state ? state.itemPath : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["repoKey"] = state ? state.repoKey : undefined;
        } else {
            const args = argsOrState as ItemPropertiesArgs | undefined;
            if ((!args || args.properties === undefined) && !opts.urn) {
                throw new Error("Missing required property 'properties'");
            }
            if ((!args || args.repoKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repoKey'");
            }
            resourceInputs["isRecursive"] = args ? args.isRecursive : undefined;
            resourceInputs["itemPath"] = args ? args.itemPath : undefined;
            resourceInputs["properties"] = args ? args.properties : undefined;
            resourceInputs["repoKey"] = args ? args.repoKey : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ItemProperties.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ItemProperties resources.
 */
export interface ItemPropertiesState {
    /**
     * Add this property to the selected folder and to all of artifacts and folders under this folder. Default to `false`
     */
    isRecursive?: pulumi.Input<boolean>;
    /**
     * The relative path of the item (file/folder/repository). Leave unset for repository.
     */
    itemPath?: pulumi.Input<string>;
    /**
     * Map of key and list of values.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<string>[]>}>;
    /**
     * Respository key.
     */
    repoKey?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ItemProperties resource.
 */
export interface ItemPropertiesArgs {
    /**
     * Add this property to the selected folder and to all of artifacts and folders under this folder. Default to `false`
     */
    isRecursive?: pulumi.Input<boolean>;
    /**
     * The relative path of the item (file/folder/repository). Leave unset for repository.
     */
    itemPath?: pulumi.Input<string>;
    /**
     * Map of key and list of values.
     */
    properties: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<string>[]>}>;
    /**
     * Respository key.
     */
    repoKey: pulumi.Input<string>;
}
