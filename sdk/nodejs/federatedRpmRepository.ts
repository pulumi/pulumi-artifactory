// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Creates a federated Rpm repository.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as artifactory from "@pulumi/artifactory";
 *
 * const terraform_federated_test_rpm_repo = new artifactory.FederatedRpmRepository("terraform-federated-test-rpm-repo", {
 *     key: "terraform-federated-test-rpm-repo",
 *     members: [
 *         {
 *             url: "http://tempurl.org/artifactory/terraform-federated-test-rpm-repo",
 *             enabled: true,
 *         },
 *         {
 *             url: "http://tempurl2.org/artifactory/terraform-federated-test-rpm-repo-2",
 *             enabled: true,
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Federated repositories can be imported using their name, e.g.
 *
 * ```sh
 * $ pulumi import artifactory:index/federatedRpmRepository:FederatedRpmRepository terraform-federated-test-rpm-repo terraform-federated-test-rpm-repo
 * ```
 */
export class FederatedRpmRepository extends pulumi.CustomResource {
    /**
     * Get an existing FederatedRpmRepository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FederatedRpmRepositoryState, opts?: pulumi.CustomResourceOptions): FederatedRpmRepository {
        return new FederatedRpmRepository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'artifactory:index/federatedRpmRepository:FederatedRpmRepository';

    /**
     * Returns true if the given object is an instance of FederatedRpmRepository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FederatedRpmRepository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FederatedRpmRepository.__pulumiType;
    }

    /**
     * When set, you may view content such as HTML or Javadoc files directly from Artifactory.
     * This may not be safe and therefore requires strict content moderation to prevent malicious users from uploading content that may compromise security (e.g., cross-site scripting attacks).
     */
    declare public readonly archiveBrowsingEnabled: pulumi.Output<boolean | undefined>;
    /**
     * When set, the repository does not participate in artifact resolution and new artifacts cannot be deployed.
     */
    declare public readonly blackedOut: pulumi.Output<boolean | undefined>;
    declare public readonly calculateYumMetadata: pulumi.Output<boolean | undefined>;
    /**
     * When set, download requests to this repository will redirect the client to download the artifact directly from AWS CloudFront. Available in Enterprise+ and Edge licenses only. Default value is 'false'
     */
    declare public readonly cdnRedirect: pulumi.Output<boolean | undefined>;
    declare public readonly cleanupOnDelete: pulumi.Output<boolean | undefined>;
    /**
     * Public description.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * When set to `true`, the proxy is disabled, and not returned in the API response body. If there is a default proxy set for the Artifactory instance, it will be ignored, too.
     */
    declare public readonly disableProxy: pulumi.Output<boolean | undefined>;
    /**
     * When set, download requests to this repository will redirect the client to download the artifact directly from the cloud storage provider. Available in Enterprise+ and Edge licenses only.
     */
    declare public readonly downloadDirect: pulumi.Output<boolean | undefined>;
    declare public readonly enableFileListsIndexing: pulumi.Output<boolean | undefined>;
    /**
     * List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**&#47;z/*`.By default no artifacts are excluded.
     */
    declare public readonly excludesPattern: pulumi.Output<string | undefined>;
    /**
     * List of comma-separated artifact patterns to include when evaluating artifact requests in the form of `x/y/**&#47;z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (`**&#47;*`).
     */
    declare public readonly includesPattern: pulumi.Output<string | undefined>;
    /**
     * the identity key of the repo.
     */
    declare public readonly key: pulumi.Output<string>;
    /**
     * The list of Federated members and must contain this repository URL (configured base URL
     * `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set.
     * Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository)
     * to set up Federated repositories correctly.
     */
    declare public readonly members: pulumi.Output<outputs.FederatedRpmRepositoryMember[]>;
    /**
     * Internal description.
     */
    declare public readonly notes: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly packageType: pulumi.Output<string>;
    /**
     * Primary keypair used to sign artifacts. Default value is empty.
     */
    declare public readonly primaryKeypairRef: pulumi.Output<string | undefined>;
    /**
     * Setting repositories with priority will cause metadata to be merged only from repositories set with this field
     */
    declare public readonly priorityResolution: pulumi.Output<boolean | undefined>;
    declare public readonly projectEnvironments: pulumi.Output<string[]>;
    /**
     * Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
     */
    declare public readonly projectKey: pulumi.Output<string | undefined>;
    /**
     * List of property set name
     */
    declare public readonly propertySets: pulumi.Output<string[] | undefined>;
    /**
     * Proxy key from Artifactory Proxies settings. Default is empty field. Can't be set if `disableProxy = true`.
     */
    declare public readonly proxy: pulumi.Output<string | undefined>;
    /**
     * Repository layout key for the federated repository
     */
    declare public readonly repoLayoutRef: pulumi.Output<string | undefined>;
    /**
     * Secondary keypair used to sign artifacts.
     */
    declare public readonly secondaryKeypairRef: pulumi.Output<string | undefined>;
    /**
     * Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.
     */
    declare public readonly xrayIndex: pulumi.Output<boolean | undefined>;
    /**
     * A comma separated list of XML file names containing RPM group component definitions. Artifactory includes the group definitions as part of the calculated RPM metadata, as well as automatically generating a gzipped version of the group files, if required.
     */
    declare public readonly yumGroupFileNames: pulumi.Output<string | undefined>;
    /**
     * The depth, relative to the repository's root folder, where RPM metadata is created. This is useful when your repository contains multiple RPM repositories under parallel hierarchies. For example, if your RPMs are stored under 'fedora/linux/$releasever/$basearch', specify a depth of 4.
     */
    declare public readonly yumRootDepth: pulumi.Output<number | undefined>;

    /**
     * Create a FederatedRpmRepository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FederatedRpmRepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FederatedRpmRepositoryArgs | FederatedRpmRepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FederatedRpmRepositoryState | undefined;
            resourceInputs["archiveBrowsingEnabled"] = state?.archiveBrowsingEnabled;
            resourceInputs["blackedOut"] = state?.blackedOut;
            resourceInputs["calculateYumMetadata"] = state?.calculateYumMetadata;
            resourceInputs["cdnRedirect"] = state?.cdnRedirect;
            resourceInputs["cleanupOnDelete"] = state?.cleanupOnDelete;
            resourceInputs["description"] = state?.description;
            resourceInputs["disableProxy"] = state?.disableProxy;
            resourceInputs["downloadDirect"] = state?.downloadDirect;
            resourceInputs["enableFileListsIndexing"] = state?.enableFileListsIndexing;
            resourceInputs["excludesPattern"] = state?.excludesPattern;
            resourceInputs["includesPattern"] = state?.includesPattern;
            resourceInputs["key"] = state?.key;
            resourceInputs["members"] = state?.members;
            resourceInputs["notes"] = state?.notes;
            resourceInputs["packageType"] = state?.packageType;
            resourceInputs["primaryKeypairRef"] = state?.primaryKeypairRef;
            resourceInputs["priorityResolution"] = state?.priorityResolution;
            resourceInputs["projectEnvironments"] = state?.projectEnvironments;
            resourceInputs["projectKey"] = state?.projectKey;
            resourceInputs["propertySets"] = state?.propertySets;
            resourceInputs["proxy"] = state?.proxy;
            resourceInputs["repoLayoutRef"] = state?.repoLayoutRef;
            resourceInputs["secondaryKeypairRef"] = state?.secondaryKeypairRef;
            resourceInputs["xrayIndex"] = state?.xrayIndex;
            resourceInputs["yumGroupFileNames"] = state?.yumGroupFileNames;
            resourceInputs["yumRootDepth"] = state?.yumRootDepth;
        } else {
            const args = argsOrState as FederatedRpmRepositoryArgs | undefined;
            if (args?.key === undefined && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            if (args?.members === undefined && !opts.urn) {
                throw new Error("Missing required property 'members'");
            }
            resourceInputs["archiveBrowsingEnabled"] = args?.archiveBrowsingEnabled;
            resourceInputs["blackedOut"] = args?.blackedOut;
            resourceInputs["calculateYumMetadata"] = args?.calculateYumMetadata;
            resourceInputs["cdnRedirect"] = args?.cdnRedirect;
            resourceInputs["cleanupOnDelete"] = args?.cleanupOnDelete;
            resourceInputs["description"] = args?.description;
            resourceInputs["disableProxy"] = args?.disableProxy;
            resourceInputs["downloadDirect"] = args?.downloadDirect;
            resourceInputs["enableFileListsIndexing"] = args?.enableFileListsIndexing;
            resourceInputs["excludesPattern"] = args?.excludesPattern;
            resourceInputs["includesPattern"] = args?.includesPattern;
            resourceInputs["key"] = args?.key;
            resourceInputs["members"] = args?.members;
            resourceInputs["notes"] = args?.notes;
            resourceInputs["primaryKeypairRef"] = args?.primaryKeypairRef;
            resourceInputs["priorityResolution"] = args?.priorityResolution;
            resourceInputs["projectEnvironments"] = args?.projectEnvironments;
            resourceInputs["projectKey"] = args?.projectKey;
            resourceInputs["propertySets"] = args?.propertySets;
            resourceInputs["proxy"] = args?.proxy;
            resourceInputs["repoLayoutRef"] = args?.repoLayoutRef;
            resourceInputs["secondaryKeypairRef"] = args?.secondaryKeypairRef;
            resourceInputs["xrayIndex"] = args?.xrayIndex;
            resourceInputs["yumGroupFileNames"] = args?.yumGroupFileNames;
            resourceInputs["yumRootDepth"] = args?.yumRootDepth;
            resourceInputs["packageType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FederatedRpmRepository.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FederatedRpmRepository resources.
 */
export interface FederatedRpmRepositoryState {
    /**
     * When set, you may view content such as HTML or Javadoc files directly from Artifactory.
     * This may not be safe and therefore requires strict content moderation to prevent malicious users from uploading content that may compromise security (e.g., cross-site scripting attacks).
     */
    archiveBrowsingEnabled?: pulumi.Input<boolean>;
    /**
     * When set, the repository does not participate in artifact resolution and new artifacts cannot be deployed.
     */
    blackedOut?: pulumi.Input<boolean>;
    calculateYumMetadata?: pulumi.Input<boolean>;
    /**
     * When set, download requests to this repository will redirect the client to download the artifact directly from AWS CloudFront. Available in Enterprise+ and Edge licenses only. Default value is 'false'
     */
    cdnRedirect?: pulumi.Input<boolean>;
    cleanupOnDelete?: pulumi.Input<boolean>;
    /**
     * Public description.
     */
    description?: pulumi.Input<string>;
    /**
     * When set to `true`, the proxy is disabled, and not returned in the API response body. If there is a default proxy set for the Artifactory instance, it will be ignored, too.
     */
    disableProxy?: pulumi.Input<boolean>;
    /**
     * When set, download requests to this repository will redirect the client to download the artifact directly from the cloud storage provider. Available in Enterprise+ and Edge licenses only.
     */
    downloadDirect?: pulumi.Input<boolean>;
    enableFileListsIndexing?: pulumi.Input<boolean>;
    /**
     * List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**&#47;z/*`.By default no artifacts are excluded.
     */
    excludesPattern?: pulumi.Input<string>;
    /**
     * List of comma-separated artifact patterns to include when evaluating artifact requests in the form of `x/y/**&#47;z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (`**&#47;*`).
     */
    includesPattern?: pulumi.Input<string>;
    /**
     * the identity key of the repo.
     */
    key?: pulumi.Input<string>;
    /**
     * The list of Federated members and must contain this repository URL (configured base URL
     * `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set.
     * Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository)
     * to set up Federated repositories correctly.
     */
    members?: pulumi.Input<pulumi.Input<inputs.FederatedRpmRepositoryMember>[]>;
    /**
     * Internal description.
     */
    notes?: pulumi.Input<string>;
    packageType?: pulumi.Input<string>;
    /**
     * Primary keypair used to sign artifacts. Default value is empty.
     */
    primaryKeypairRef?: pulumi.Input<string>;
    /**
     * Setting repositories with priority will cause metadata to be merged only from repositories set with this field
     */
    priorityResolution?: pulumi.Input<boolean>;
    projectEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
     */
    projectKey?: pulumi.Input<string>;
    /**
     * List of property set name
     */
    propertySets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Proxy key from Artifactory Proxies settings. Default is empty field. Can't be set if `disableProxy = true`.
     */
    proxy?: pulumi.Input<string>;
    /**
     * Repository layout key for the federated repository
     */
    repoLayoutRef?: pulumi.Input<string>;
    /**
     * Secondary keypair used to sign artifacts.
     */
    secondaryKeypairRef?: pulumi.Input<string>;
    /**
     * Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.
     */
    xrayIndex?: pulumi.Input<boolean>;
    /**
     * A comma separated list of XML file names containing RPM group component definitions. Artifactory includes the group definitions as part of the calculated RPM metadata, as well as automatically generating a gzipped version of the group files, if required.
     */
    yumGroupFileNames?: pulumi.Input<string>;
    /**
     * The depth, relative to the repository's root folder, where RPM metadata is created. This is useful when your repository contains multiple RPM repositories under parallel hierarchies. For example, if your RPMs are stored under 'fedora/linux/$releasever/$basearch', specify a depth of 4.
     */
    yumRootDepth?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a FederatedRpmRepository resource.
 */
export interface FederatedRpmRepositoryArgs {
    /**
     * When set, you may view content such as HTML or Javadoc files directly from Artifactory.
     * This may not be safe and therefore requires strict content moderation to prevent malicious users from uploading content that may compromise security (e.g., cross-site scripting attacks).
     */
    archiveBrowsingEnabled?: pulumi.Input<boolean>;
    /**
     * When set, the repository does not participate in artifact resolution and new artifacts cannot be deployed.
     */
    blackedOut?: pulumi.Input<boolean>;
    calculateYumMetadata?: pulumi.Input<boolean>;
    /**
     * When set, download requests to this repository will redirect the client to download the artifact directly from AWS CloudFront. Available in Enterprise+ and Edge licenses only. Default value is 'false'
     */
    cdnRedirect?: pulumi.Input<boolean>;
    cleanupOnDelete?: pulumi.Input<boolean>;
    /**
     * Public description.
     */
    description?: pulumi.Input<string>;
    /**
     * When set to `true`, the proxy is disabled, and not returned in the API response body. If there is a default proxy set for the Artifactory instance, it will be ignored, too.
     */
    disableProxy?: pulumi.Input<boolean>;
    /**
     * When set, download requests to this repository will redirect the client to download the artifact directly from the cloud storage provider. Available in Enterprise+ and Edge licenses only.
     */
    downloadDirect?: pulumi.Input<boolean>;
    enableFileListsIndexing?: pulumi.Input<boolean>;
    /**
     * List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**&#47;z/*`.By default no artifacts are excluded.
     */
    excludesPattern?: pulumi.Input<string>;
    /**
     * List of comma-separated artifact patterns to include when evaluating artifact requests in the form of `x/y/**&#47;z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (`**&#47;*`).
     */
    includesPattern?: pulumi.Input<string>;
    /**
     * the identity key of the repo.
     */
    key: pulumi.Input<string>;
    /**
     * The list of Federated members and must contain this repository URL (configured base URL
     * `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set.
     * Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository)
     * to set up Federated repositories correctly.
     */
    members: pulumi.Input<pulumi.Input<inputs.FederatedRpmRepositoryMember>[]>;
    /**
     * Internal description.
     */
    notes?: pulumi.Input<string>;
    /**
     * Primary keypair used to sign artifacts. Default value is empty.
     */
    primaryKeypairRef?: pulumi.Input<string>;
    /**
     * Setting repositories with priority will cause metadata to be merged only from repositories set with this field
     */
    priorityResolution?: pulumi.Input<boolean>;
    projectEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
     */
    projectKey?: pulumi.Input<string>;
    /**
     * List of property set name
     */
    propertySets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Proxy key from Artifactory Proxies settings. Default is empty field. Can't be set if `disableProxy = true`.
     */
    proxy?: pulumi.Input<string>;
    /**
     * Repository layout key for the federated repository
     */
    repoLayoutRef?: pulumi.Input<string>;
    /**
     * Secondary keypair used to sign artifacts.
     */
    secondaryKeypairRef?: pulumi.Input<string>;
    /**
     * Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.
     */
    xrayIndex?: pulumi.Input<boolean>;
    /**
     * A comma separated list of XML file names containing RPM group component definitions. Artifactory includes the group definitions as part of the calculated RPM metadata, as well as automatically generating a gzipped version of the group files, if required.
     */
    yumGroupFileNames?: pulumi.Input<string>;
    /**
     * The depth, relative to the repository's root folder, where RPM metadata is created. This is useful when your repository contains multiple RPM repositories under parallel hierarchies. For example, if your RPMs are stored under 'fedora/linux/$releasever/$basearch', specify a depth of 4.
     */
    yumRootDepth?: pulumi.Input<number>;
}
