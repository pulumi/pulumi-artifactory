// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a global environment resource. This can be used to create and manage global environment.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as artifactory from "@pulumi/artifactory";
 *
 * const test_env = new artifactory.GlobalEnvironment("test-env", {name: "test-env"});
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import artifactory:index/globalEnvironment:GlobalEnvironment dev-env myenv
 * ```
 */
export class GlobalEnvironment extends pulumi.CustomResource {
    /**
     * Get an existing GlobalEnvironment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GlobalEnvironmentState, opts?: pulumi.CustomResourceOptions): GlobalEnvironment {
        return new GlobalEnvironment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'artifactory:index/globalEnvironment:GlobalEnvironment';

    /**
     * Returns true if the given object is an instance of GlobalEnvironment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GlobalEnvironment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlobalEnvironment.__pulumiType;
    }

    /**
     * Name must start with a letter and contain letters, digits and `-` character. The maximum length is 32 characters
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a GlobalEnvironment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: GlobalEnvironmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GlobalEnvironmentArgs | GlobalEnvironmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GlobalEnvironmentState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as GlobalEnvironmentArgs | undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GlobalEnvironment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GlobalEnvironment resources.
 */
export interface GlobalEnvironmentState {
    /**
     * Name must start with a letter and contain letters, digits and `-` character. The maximum length is 32 characters
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GlobalEnvironment resource.
 */
export interface GlobalEnvironmentArgs {
    /**
     * Name must start with a letter and contain letters, digits and `-` character. The maximum length is 32 characters
     */
    name?: pulumi.Input<string>;
}
