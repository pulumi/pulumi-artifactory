// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource can be used to manage Artifactory's LDAP Group settings for user authentication.
 *
 * LDAP Groups Add-on allows you to synchronize your LDAP groups with the system and leverage your existing organizational
 * structure for managing group-based permissions.
 *
 * ~>The `artifactory.LdapGroupSetting` resource utilizes endpoints which are blocked/removed in SaaS environments (i.e. in Artifactory online), rendering this resource incompatible with Artifactory SaaS environments.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as artifactory from "@pulumi/artifactory";
 *
 * // Configure Artifactory LDAP setting
 * const ldapGroupName = new artifactory.LdapGroupSetting("ldap_group_name", {
 *     name: "ldap_group_name",
 *     ldapSettingKey: "ldap_name",
 *     groupBaseDn: "",
 *     groupNameAttribute: "cn",
 *     groupMemberAttribute: "uniqueMember",
 *     subTree: true,
 *     filter: "(objectClass=groupOfNames)",
 *     descriptionAttribute: "description",
 *     strategy: "STATIC",
 * });
 * ```
 * Note: `Name` argument has to match to the resource name.\
 * Reference Link: [JFrog LDAP](https://www.jfrog.com/confluence/display/JFROG/LDAP)
 *
 * ## Import
 *
 * LDAP Group setting can be imported using the key, e.g.
 *
 * ```sh
 * $ pulumi import artifactory:index/ldapGroupSetting:LdapGroupSetting ldap_group_name ldap_group_name
 * ```
 */
export class LdapGroupSetting extends pulumi.CustomResource {
    /**
     * Get an existing LdapGroupSetting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LdapGroupSettingState, opts?: pulumi.CustomResourceOptions): LdapGroupSetting {
        return new LdapGroupSetting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'artifactory:index/ldapGroupSetting:LdapGroupSetting';

    /**
     * Returns true if the given object is an instance of LdapGroupSetting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LdapGroupSetting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LdapGroupSetting.__pulumiType;
    }

    /**
     * An attribute on the group entry which denoting the group description. Used when importing groups.
     */
    declare public readonly descriptionAttribute: pulumi.Output<string>;
    /**
     * The LDAP filter used to search for group entries. Used for importing groups.
     */
    declare public readonly filter: pulumi.Output<string>;
    /**
     * A search base for group entry DNs, relative to the DN on the LDAP server’s URL (and not relative to the LDAP Setting’s “Search Base”). Used when importing groups.
     */
    declare public readonly groupBaseDn: pulumi.Output<string | undefined>;
    /**
     * A multi-value attribute on the group entry containing user DNs or IDs of the group members (e.g., uniqueMember,member).
     */
    declare public readonly groupMemberAttribute: pulumi.Output<string>;
    /**
     * Attribute on the group entry denoting the group name. Used when importing groups.
     */
    declare public readonly groupNameAttribute: pulumi.Output<string>;
    /**
     * The LDAP setting key you want to use for group retrieval. The value for this field corresponds to 'enabledLdap' field of the ldap group setting XML block of system configuration.
     */
    declare public readonly ldapSettingKey: pulumi.Output<string>;
    /**
     * Ldap group setting name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The JFrog Platform Deployment (JPD) supports three ways of mapping groups to LDAP schemas:
     * - STATIC: Group objects are aware of their members, however, the users are not aware of the groups they belong to. Each group object such as groupOfNames or groupOfUniqueNames holds its respective member attributes, typically member or uniqueMember, which is a user DN.
     * - DYNAMIC: User objects are aware of what groups they belong to, but the group objects are not aware of their members. Each user object contains a custom attribute, such as group, that holds the group DNs or group names of which the user is a member.
     * - HIERARCHICAL: The user's DN is indicative of the groups the user belongs to by using group names as part of user DN hierarchy. Each user DN contains a list of ou's or custom attributes that make up the group association. For example, uid=user1,ou=developers,ou=uk,dc=jfrog,dc=org indicates that user1 belongs to two groups: uk and developers.
     */
    declare public readonly strategy: pulumi.Output<string>;
    /**
     * When set, enables deep search through the sub-tree of the LDAP URL + Search Base. True by default.
     */
    declare public readonly subTree: pulumi.Output<boolean | undefined>;

    /**
     * Create a LdapGroupSetting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LdapGroupSettingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LdapGroupSettingArgs | LdapGroupSettingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LdapGroupSettingState | undefined;
            resourceInputs["descriptionAttribute"] = state?.descriptionAttribute;
            resourceInputs["filter"] = state?.filter;
            resourceInputs["groupBaseDn"] = state?.groupBaseDn;
            resourceInputs["groupMemberAttribute"] = state?.groupMemberAttribute;
            resourceInputs["groupNameAttribute"] = state?.groupNameAttribute;
            resourceInputs["ldapSettingKey"] = state?.ldapSettingKey;
            resourceInputs["name"] = state?.name;
            resourceInputs["strategy"] = state?.strategy;
            resourceInputs["subTree"] = state?.subTree;
        } else {
            const args = argsOrState as LdapGroupSettingArgs | undefined;
            if (args?.descriptionAttribute === undefined && !opts.urn) {
                throw new Error("Missing required property 'descriptionAttribute'");
            }
            if (args?.filter === undefined && !opts.urn) {
                throw new Error("Missing required property 'filter'");
            }
            if (args?.groupMemberAttribute === undefined && !opts.urn) {
                throw new Error("Missing required property 'groupMemberAttribute'");
            }
            if (args?.groupNameAttribute === undefined && !opts.urn) {
                throw new Error("Missing required property 'groupNameAttribute'");
            }
            if (args?.ldapSettingKey === undefined && !opts.urn) {
                throw new Error("Missing required property 'ldapSettingKey'");
            }
            if (args?.strategy === undefined && !opts.urn) {
                throw new Error("Missing required property 'strategy'");
            }
            resourceInputs["descriptionAttribute"] = args?.descriptionAttribute;
            resourceInputs["filter"] = args?.filter;
            resourceInputs["groupBaseDn"] = args?.groupBaseDn;
            resourceInputs["groupMemberAttribute"] = args?.groupMemberAttribute;
            resourceInputs["groupNameAttribute"] = args?.groupNameAttribute;
            resourceInputs["ldapSettingKey"] = args?.ldapSettingKey;
            resourceInputs["name"] = args?.name;
            resourceInputs["strategy"] = args?.strategy;
            resourceInputs["subTree"] = args?.subTree;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LdapGroupSetting.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LdapGroupSetting resources.
 */
export interface LdapGroupSettingState {
    /**
     * An attribute on the group entry which denoting the group description. Used when importing groups.
     */
    descriptionAttribute?: pulumi.Input<string>;
    /**
     * The LDAP filter used to search for group entries. Used for importing groups.
     */
    filter?: pulumi.Input<string>;
    /**
     * A search base for group entry DNs, relative to the DN on the LDAP server’s URL (and not relative to the LDAP Setting’s “Search Base”). Used when importing groups.
     */
    groupBaseDn?: pulumi.Input<string>;
    /**
     * A multi-value attribute on the group entry containing user DNs or IDs of the group members (e.g., uniqueMember,member).
     */
    groupMemberAttribute?: pulumi.Input<string>;
    /**
     * Attribute on the group entry denoting the group name. Used when importing groups.
     */
    groupNameAttribute?: pulumi.Input<string>;
    /**
     * The LDAP setting key you want to use for group retrieval. The value for this field corresponds to 'enabledLdap' field of the ldap group setting XML block of system configuration.
     */
    ldapSettingKey?: pulumi.Input<string>;
    /**
     * Ldap group setting name.
     */
    name?: pulumi.Input<string>;
    /**
     * The JFrog Platform Deployment (JPD) supports three ways of mapping groups to LDAP schemas:
     * - STATIC: Group objects are aware of their members, however, the users are not aware of the groups they belong to. Each group object such as groupOfNames or groupOfUniqueNames holds its respective member attributes, typically member or uniqueMember, which is a user DN.
     * - DYNAMIC: User objects are aware of what groups they belong to, but the group objects are not aware of their members. Each user object contains a custom attribute, such as group, that holds the group DNs or group names of which the user is a member.
     * - HIERARCHICAL: The user's DN is indicative of the groups the user belongs to by using group names as part of user DN hierarchy. Each user DN contains a list of ou's or custom attributes that make up the group association. For example, uid=user1,ou=developers,ou=uk,dc=jfrog,dc=org indicates that user1 belongs to two groups: uk and developers.
     */
    strategy?: pulumi.Input<string>;
    /**
     * When set, enables deep search through the sub-tree of the LDAP URL + Search Base. True by default.
     */
    subTree?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a LdapGroupSetting resource.
 */
export interface LdapGroupSettingArgs {
    /**
     * An attribute on the group entry which denoting the group description. Used when importing groups.
     */
    descriptionAttribute: pulumi.Input<string>;
    /**
     * The LDAP filter used to search for group entries. Used for importing groups.
     */
    filter: pulumi.Input<string>;
    /**
     * A search base for group entry DNs, relative to the DN on the LDAP server’s URL (and not relative to the LDAP Setting’s “Search Base”). Used when importing groups.
     */
    groupBaseDn?: pulumi.Input<string>;
    /**
     * A multi-value attribute on the group entry containing user DNs or IDs of the group members (e.g., uniqueMember,member).
     */
    groupMemberAttribute: pulumi.Input<string>;
    /**
     * Attribute on the group entry denoting the group name. Used when importing groups.
     */
    groupNameAttribute: pulumi.Input<string>;
    /**
     * The LDAP setting key you want to use for group retrieval. The value for this field corresponds to 'enabledLdap' field of the ldap group setting XML block of system configuration.
     */
    ldapSettingKey: pulumi.Input<string>;
    /**
     * Ldap group setting name.
     */
    name?: pulumi.Input<string>;
    /**
     * The JFrog Platform Deployment (JPD) supports three ways of mapping groups to LDAP schemas:
     * - STATIC: Group objects are aware of their members, however, the users are not aware of the groups they belong to. Each group object such as groupOfNames or groupOfUniqueNames holds its respective member attributes, typically member or uniqueMember, which is a user DN.
     * - DYNAMIC: User objects are aware of what groups they belong to, but the group objects are not aware of their members. Each user object contains a custom attribute, such as group, that holds the group DNs or group names of which the user is a member.
     * - HIERARCHICAL: The user's DN is indicative of the groups the user belongs to by using group names as part of user DN hierarchy. Each user DN contains a list of ou's or custom attributes that make up the group association. For example, uid=user1,ou=developers,ou=uk,dc=jfrog,dc=org indicates that user1 belongs to two groups: uk and developers.
     */
    strategy: pulumi.Input<string>;
    /**
     * When set, enables deep search through the sub-tree of the LDAP URL + Search Base. True by default.
     */
    subTree?: pulumi.Input<boolean>;
}
