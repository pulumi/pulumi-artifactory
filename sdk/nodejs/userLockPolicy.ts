// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides an Artifactory User Lock Policy resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as artifactory from "@pulumi/artifactory";
 *
 * const my_user_lock_policy = new artifactory.UserLockPolicy("my-user-lock-policy", {
 *     name: "my-user-lock-policy",
 *     enabled: true,
 *     loginAttempts: 10,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import artifactory:index/userLockPolicy:UserLockPolicy my-user-lock-policy my-user-lock-policy
 * ```
 */
export class UserLockPolicy extends pulumi.CustomResource {
    /**
     * Get an existing UserLockPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserLockPolicyState, opts?: pulumi.CustomResourceOptions): UserLockPolicy {
        return new UserLockPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'artifactory:index/userLockPolicy:UserLockPolicy';

    /**
     * Returns true if the given object is an instance of UserLockPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserLockPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserLockPolicy.__pulumiType;
    }

    /**
     * Enable User Lock Policy. Lock user after exceeding max failed login attempts.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Max failed login attempts.
     */
    public readonly loginAttempts!: pulumi.Output<number>;
    /**
     * Name of the resource. Only used for importing.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a UserLockPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserLockPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserLockPolicyArgs | UserLockPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserLockPolicyState | undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["loginAttempts"] = state ? state.loginAttempts : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as UserLockPolicyArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.loginAttempts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loginAttempts'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["loginAttempts"] = args ? args.loginAttempts : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserLockPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserLockPolicy resources.
 */
export interface UserLockPolicyState {
    /**
     * Enable User Lock Policy. Lock user after exceeding max failed login attempts.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Max failed login attempts.
     */
    loginAttempts?: pulumi.Input<number>;
    /**
     * Name of the resource. Only used for importing.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserLockPolicy resource.
 */
export interface UserLockPolicyArgs {
    /**
     * Enable User Lock Policy. Lock user after exceeding max failed login attempts.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Max failed login attempts.
     */
    loginAttempts: pulumi.Input<number>;
    /**
     * Name of the resource. Only used for importing.
     */
    name?: pulumi.Input<string>;
}
