// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource enables you to creates a new Release Bundle v2, uniquely identified by a combination of repository key, name, and version. For more information, see [Understanding Release Bundles v2](https://jfrog.com/help/r/jfrog-artifactory-documentation/understanding-release-bundles-v2) and [REST API](https://jfrog.com/help/r/jfrog-rest-apis/create-release-bundle-v2-version).
 */
export class ReleaseBundleV2 extends pulumi.CustomResource {
    /**
     * Get an existing ReleaseBundleV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ReleaseBundleV2State, opts?: pulumi.CustomResourceOptions): ReleaseBundleV2 {
        return new ReleaseBundleV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'artifactory:index/releaseBundleV2:ReleaseBundleV2';

    /**
     * Returns true if the given object is an instance of ReleaseBundleV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ReleaseBundleV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReleaseBundleV2.__pulumiType;
    }

    /**
     * Timestamp when the new version was created (ISO 8601 standard).
     */
    public /*out*/ readonly created!: pulumi.Output<string>;
    /**
     * The user who created the Release Bundle.
     */
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    /**
     * Key-pair name to use for signature creation
     */
    public readonly keypairName!: pulumi.Output<string>;
    /**
     * Name of Release Bundle
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Project key the Release Bundle belongs to
     */
    public readonly projectKey!: pulumi.Output<string | undefined>;
    /**
     * The unique identifier of the Artifactory instance where the Release Bundle was created.
     */
    public /*out*/ readonly serviceId!: pulumi.Output<string>;
    /**
     * Determines whether to skip the resolution of the Docker manifest, which adds the image layers to the Release Bundle. The default value is `false` (the manifest is resolved and image layers are included).
     */
    public readonly skipDockerManifestResolution!: pulumi.Output<boolean>;
    /**
     * Defines specific repositories to include in the promotion. If this property is left undefined, all repositories (except those specifically excluded) are included in the promotion. Important: If one or more repositories are specifically included, all other repositories are excluded (regardless of what is defined in `excludedRepositoryKeys`).
     */
    public readonly source!: pulumi.Output<outputs.ReleaseBundleV2Source>;
    /**
     * Source type. Valid values: `aql`, `artifacts`, `builds`, `releaseBundles`
     */
    public readonly sourceType!: pulumi.Output<string>;
    /**
     * Version to promote
     */
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a ReleaseBundleV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ReleaseBundleV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ReleaseBundleV2Args | ReleaseBundleV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ReleaseBundleV2State | undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["keypairName"] = state ? state.keypairName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectKey"] = state ? state.projectKey : undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
            resourceInputs["skipDockerManifestResolution"] = state ? state.skipDockerManifestResolution : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["sourceType"] = state ? state.sourceType : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as ReleaseBundleV2Args | undefined;
            if ((!args || args.keypairName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keypairName'");
            }
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            if ((!args || args.sourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceType'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["keypairName"] = args ? args.keypairName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectKey"] = args ? args.projectKey : undefined;
            resourceInputs["skipDockerManifestResolution"] = args ? args.skipDockerManifestResolution : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["sourceType"] = args ? args.sourceType : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["serviceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ReleaseBundleV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ReleaseBundleV2 resources.
 */
export interface ReleaseBundleV2State {
    /**
     * Timestamp when the new version was created (ISO 8601 standard).
     */
    created?: pulumi.Input<string>;
    /**
     * The user who created the Release Bundle.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Key-pair name to use for signature creation
     */
    keypairName?: pulumi.Input<string>;
    /**
     * Name of Release Bundle
     */
    name?: pulumi.Input<string>;
    /**
     * Project key the Release Bundle belongs to
     */
    projectKey?: pulumi.Input<string>;
    /**
     * The unique identifier of the Artifactory instance where the Release Bundle was created.
     */
    serviceId?: pulumi.Input<string>;
    /**
     * Determines whether to skip the resolution of the Docker manifest, which adds the image layers to the Release Bundle. The default value is `false` (the manifest is resolved and image layers are included).
     */
    skipDockerManifestResolution?: pulumi.Input<boolean>;
    /**
     * Defines specific repositories to include in the promotion. If this property is left undefined, all repositories (except those specifically excluded) are included in the promotion. Important: If one or more repositories are specifically included, all other repositories are excluded (regardless of what is defined in `excludedRepositoryKeys`).
     */
    source?: pulumi.Input<inputs.ReleaseBundleV2Source>;
    /**
     * Source type. Valid values: `aql`, `artifacts`, `builds`, `releaseBundles`
     */
    sourceType?: pulumi.Input<string>;
    /**
     * Version to promote
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ReleaseBundleV2 resource.
 */
export interface ReleaseBundleV2Args {
    /**
     * Key-pair name to use for signature creation
     */
    keypairName: pulumi.Input<string>;
    /**
     * Name of Release Bundle
     */
    name?: pulumi.Input<string>;
    /**
     * Project key the Release Bundle belongs to
     */
    projectKey?: pulumi.Input<string>;
    /**
     * Determines whether to skip the resolution of the Docker manifest, which adds the image layers to the Release Bundle. The default value is `false` (the manifest is resolved and image layers are included).
     */
    skipDockerManifestResolution?: pulumi.Input<boolean>;
    /**
     * Defines specific repositories to include in the promotion. If this property is left undefined, all repositories (except those specifically excluded) are included in the promotion. Important: If one or more repositories are specifically included, all other repositories are excluded (regardless of what is defined in `excludedRepositoryKeys`).
     */
    source: pulumi.Input<inputs.ReleaseBundleV2Source>;
    /**
     * Source type. Valid values: `aql`, `artifacts`, `builds`, `releaseBundles`
     */
    sourceType: pulumi.Input<string>;
    /**
     * Version to promote
     */
    version: pulumi.Input<string>;
}
