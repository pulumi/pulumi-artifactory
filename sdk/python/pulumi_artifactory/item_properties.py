# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ItemPropertiesArgs', 'ItemProperties']

@pulumi.input_type
class ItemPropertiesArgs:
    def __init__(__self__, *,
                 properties: pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]],
                 repo_key: pulumi.Input[str],
                 is_recursive: Optional[pulumi.Input[bool]] = None,
                 item_path: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ItemProperties resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]] properties: Map of key and list of values.
        :param pulumi.Input[str] repo_key: Respository key.
        :param pulumi.Input[bool] is_recursive: Add this property to the selected folder and to all of artifacts and folders under this folder. Default to `false`
        :param pulumi.Input[str] item_path: The relative path of the item (file/folder/repository). Leave unset for repository.
        """
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "repo_key", repo_key)
        if is_recursive is not None:
            pulumi.set(__self__, "is_recursive", is_recursive)
        if item_path is not None:
            pulumi.set(__self__, "item_path", item_path)

    @property
    @pulumi.getter
    def properties(self) -> pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]:
        """
        Map of key and list of values.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="repoKey")
    def repo_key(self) -> pulumi.Input[str]:
        """
        Respository key.
        """
        return pulumi.get(self, "repo_key")

    @repo_key.setter
    def repo_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "repo_key", value)

    @property
    @pulumi.getter(name="isRecursive")
    def is_recursive(self) -> Optional[pulumi.Input[bool]]:
        """
        Add this property to the selected folder and to all of artifacts and folders under this folder. Default to `false`
        """
        return pulumi.get(self, "is_recursive")

    @is_recursive.setter
    def is_recursive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_recursive", value)

    @property
    @pulumi.getter(name="itemPath")
    def item_path(self) -> Optional[pulumi.Input[str]]:
        """
        The relative path of the item (file/folder/repository). Leave unset for repository.
        """
        return pulumi.get(self, "item_path")

    @item_path.setter
    def item_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "item_path", value)


@pulumi.input_type
class _ItemPropertiesState:
    def __init__(__self__, *,
                 is_recursive: Optional[pulumi.Input[bool]] = None,
                 item_path: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
                 repo_key: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ItemProperties resources.
        :param pulumi.Input[bool] is_recursive: Add this property to the selected folder and to all of artifacts and folders under this folder. Default to `false`
        :param pulumi.Input[str] item_path: The relative path of the item (file/folder/repository). Leave unset for repository.
        :param pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]] properties: Map of key and list of values.
        :param pulumi.Input[str] repo_key: Respository key.
        """
        if is_recursive is not None:
            pulumi.set(__self__, "is_recursive", is_recursive)
        if item_path is not None:
            pulumi.set(__self__, "item_path", item_path)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if repo_key is not None:
            pulumi.set(__self__, "repo_key", repo_key)

    @property
    @pulumi.getter(name="isRecursive")
    def is_recursive(self) -> Optional[pulumi.Input[bool]]:
        """
        Add this property to the selected folder and to all of artifacts and folders under this folder. Default to `false`
        """
        return pulumi.get(self, "is_recursive")

    @is_recursive.setter
    def is_recursive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_recursive", value)

    @property
    @pulumi.getter(name="itemPath")
    def item_path(self) -> Optional[pulumi.Input[str]]:
        """
        The relative path of the item (file/folder/repository). Leave unset for repository.
        """
        return pulumi.get(self, "item_path")

    @item_path.setter
    def item_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "item_path", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]:
        """
        Map of key and list of values.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="repoKey")
    def repo_key(self) -> Optional[pulumi.Input[str]]:
        """
        Respository key.
        """
        return pulumi.get(self, "repo_key")

    @repo_key.setter
    def repo_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_key", value)


class ItemProperties(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 is_recursive: Optional[pulumi.Input[bool]] = None,
                 item_path: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
                 repo_key: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource for managaing item (file, folder, or repository) properties. When a folder is used property attachment is recursive by default. See [JFrog documentation](https://jfrog.com/help/r/jfrog-artifactory-documentation/working-with-jfrog-properties) for more details.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_artifactory as artifactory

        my_repo_properties = artifactory.ItemProperties("my-repo-properties",
            repo_key="my-generic-local",
            properties={
                "key1": ["value1"],
                "key2": [
                    "value2",
                    "value3",
                ],
            },
            is_recursive=True)
        my_folder_properties = artifactory.ItemProperties("my-folder-properties",
            repo_key="my-generic-local",
            item_path="folder/subfolder",
            properties={
                "key1": ["value1"],
                "key2": [
                    "value2",
                    "value3",
                ],
            },
            is_recursive=True)
        ```

        ## Import

        ```sh
        $ pulumi import artifactory:index/itemProperties:ItemProperties my-repo-properties repo_key
        ```

        ```sh
        $ pulumi import artifactory:index/itemProperties:ItemProperties my-folder-properties repo_key:folder/subfolder
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] is_recursive: Add this property to the selected folder and to all of artifacts and folders under this folder. Default to `false`
        :param pulumi.Input[str] item_path: The relative path of the item (file/folder/repository). Leave unset for repository.
        :param pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]] properties: Map of key and list of values.
        :param pulumi.Input[str] repo_key: Respository key.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ItemPropertiesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource for managaing item (file, folder, or repository) properties. When a folder is used property attachment is recursive by default. See [JFrog documentation](https://jfrog.com/help/r/jfrog-artifactory-documentation/working-with-jfrog-properties) for more details.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_artifactory as artifactory

        my_repo_properties = artifactory.ItemProperties("my-repo-properties",
            repo_key="my-generic-local",
            properties={
                "key1": ["value1"],
                "key2": [
                    "value2",
                    "value3",
                ],
            },
            is_recursive=True)
        my_folder_properties = artifactory.ItemProperties("my-folder-properties",
            repo_key="my-generic-local",
            item_path="folder/subfolder",
            properties={
                "key1": ["value1"],
                "key2": [
                    "value2",
                    "value3",
                ],
            },
            is_recursive=True)
        ```

        ## Import

        ```sh
        $ pulumi import artifactory:index/itemProperties:ItemProperties my-repo-properties repo_key
        ```

        ```sh
        $ pulumi import artifactory:index/itemProperties:ItemProperties my-folder-properties repo_key:folder/subfolder
        ```

        :param str resource_name: The name of the resource.
        :param ItemPropertiesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ItemPropertiesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 is_recursive: Optional[pulumi.Input[bool]] = None,
                 item_path: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
                 repo_key: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ItemPropertiesArgs.__new__(ItemPropertiesArgs)

            __props__.__dict__["is_recursive"] = is_recursive
            __props__.__dict__["item_path"] = item_path
            if properties is None and not opts.urn:
                raise TypeError("Missing required property 'properties'")
            __props__.__dict__["properties"] = properties
            if repo_key is None and not opts.urn:
                raise TypeError("Missing required property 'repo_key'")
            __props__.__dict__["repo_key"] = repo_key
        super(ItemProperties, __self__).__init__(
            'artifactory:index/itemProperties:ItemProperties',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            is_recursive: Optional[pulumi.Input[bool]] = None,
            item_path: Optional[pulumi.Input[str]] = None,
            properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
            repo_key: Optional[pulumi.Input[str]] = None) -> 'ItemProperties':
        """
        Get an existing ItemProperties resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] is_recursive: Add this property to the selected folder and to all of artifacts and folders under this folder. Default to `false`
        :param pulumi.Input[str] item_path: The relative path of the item (file/folder/repository). Leave unset for repository.
        :param pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]] properties: Map of key and list of values.
        :param pulumi.Input[str] repo_key: Respository key.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ItemPropertiesState.__new__(_ItemPropertiesState)

        __props__.__dict__["is_recursive"] = is_recursive
        __props__.__dict__["item_path"] = item_path
        __props__.__dict__["properties"] = properties
        __props__.__dict__["repo_key"] = repo_key
        return ItemProperties(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="isRecursive")
    def is_recursive(self) -> pulumi.Output[bool]:
        """
        Add this property to the selected folder and to all of artifacts and folders under this folder. Default to `false`
        """
        return pulumi.get(self, "is_recursive")

    @property
    @pulumi.getter(name="itemPath")
    def item_path(self) -> pulumi.Output[Optional[str]]:
        """
        The relative path of the item (file/folder/repository). Leave unset for repository.
        """
        return pulumi.get(self, "item_path")

    @property
    @pulumi.getter
    def properties(self) -> pulumi.Output[Mapping[str, Sequence[str]]]:
        """
        Map of key and list of values.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="repoKey")
    def repo_key(self) -> pulumi.Output[str]:
        """
        Respository key.
        """
        return pulumi.get(self, "repo_key")

