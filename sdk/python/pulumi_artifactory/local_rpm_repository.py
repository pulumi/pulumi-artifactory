# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['LocalRpmRepositoryArgs', 'LocalRpmRepository']

@pulumi.input_type
class LocalRpmRepositoryArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 archive_browsing_enabled: Optional[pulumi.Input[bool]] = None,
                 blacked_out: Optional[pulumi.Input[bool]] = None,
                 calculate_yum_metadata: Optional[pulumi.Input[bool]] = None,
                 cdn_redirect: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 download_direct: Optional[pulumi.Input[bool]] = None,
                 enable_file_lists_indexing: Optional[pulumi.Input[bool]] = None,
                 excludes_pattern: Optional[pulumi.Input[str]] = None,
                 includes_pattern: Optional[pulumi.Input[str]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 primary_keypair_ref: Optional[pulumi.Input[str]] = None,
                 priority_resolution: Optional[pulumi.Input[bool]] = None,
                 project_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 project_key: Optional[pulumi.Input[str]] = None,
                 property_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 repo_layout_ref: Optional[pulumi.Input[str]] = None,
                 secondary_keypair_ref: Optional[pulumi.Input[str]] = None,
                 xray_index: Optional[pulumi.Input[bool]] = None,
                 yum_group_file_names: Optional[pulumi.Input[str]] = None,
                 yum_root_depth: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a LocalRpmRepository resource.
        :param pulumi.Input[str] key: the identity key of the repo.
        :param pulumi.Input[bool] archive_browsing_enabled: When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and
               therefore requires strict content moderation to prevent malicious users from uploading content that may compromise
               security (e.g., cross-site scripting attacks).
        :param pulumi.Input[bool] blacked_out: When set, the repository does not participate in artifact resolution and new artifacts cannot be deployed.
        :param pulumi.Input[bool] calculate_yum_metadata: Default: `false`.
        :param pulumi.Input[bool] cdn_redirect: When set, download requests to this repository will redirect the client to download the artifact directly from AWS
               CloudFront. Available in Enterprise+ and Edge licenses only. Default value is 'false'
        :param pulumi.Input[str] description: Public description.
        :param pulumi.Input[bool] download_direct: When set, download requests to this repository will redirect the client to download the artifact directly from the cloud
               storage provider. Available in Enterprise+ and Edge licenses only.
        :param pulumi.Input[bool] enable_file_lists_indexing: Default: `false`.
        :param pulumi.Input[str] excludes_pattern: List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*. By default no
               artifacts are excluded.
        :param pulumi.Input[str] includes_pattern: List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only
               artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
        :param pulumi.Input[str] notes: Internal description.
        :param pulumi.Input[str] primary_keypair_ref: The primary GPG key to be used to sign packages.
        :param pulumi.Input[bool] priority_resolution: Setting repositories with priority will cause metadata to be merged only from repositories set with this field
        :param pulumi.Input[Sequence[pulumi.Input[str]]] project_environments: Project environment for assigning this repository to. Allow values: "DEV", "PROD", or one of custom environment. Before
               Artifactory 7.53.1, up to 2 values ("DEV" and "PROD") are allowed. From 7.53.1 onward, only one value is allowed. The
               attribute should only be used if the repository is already assigned to the existing project. If not, the attribute will
               be ignored by Artifactory, but will remain in the Terraform state, which will create state drift during the update.
        :param pulumi.Input[str] project_key: Project key for assigning this repository to. Must be 2 - 20 lowercase alphanumeric and hyphen characters. When
               assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] property_sets: List of property set name
        :param pulumi.Input[str] repo_layout_ref: Repository layout key for the local repository
        :param pulumi.Input[str] secondary_keypair_ref: The secondary GPG key to be used to sign packages.
        :param pulumi.Input[bool] xray_index: Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
               Xray settings.
        :param pulumi.Input[str] yum_group_file_names: A comma separated list of XML file names containing RPM group component definitions. 
               Artifactory includes the group definitions as part of the calculated RPM metadata, as well as automatically
               generating a gzipped version of the group files, if required. Default is empty string.
        :param pulumi.Input[int] yum_root_depth: The depth, relative to the repository's root folder, where RPM metadata is created. 
               This is useful when your repository contains multiple RPM repositories under parallel hierarchies. For example, if
               your RPMs are stored under 'fedora/linux/$releasever/$basearch', specify a depth of 4. Once the number of snapshots
               exceeds this setting, older versions are removed. A value of 0 (default) indicates there is no limit, and unique
               snapshots are not cleaned up.
        """
        LocalRpmRepositoryArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            archive_browsing_enabled=archive_browsing_enabled,
            blacked_out=blacked_out,
            calculate_yum_metadata=calculate_yum_metadata,
            cdn_redirect=cdn_redirect,
            description=description,
            download_direct=download_direct,
            enable_file_lists_indexing=enable_file_lists_indexing,
            excludes_pattern=excludes_pattern,
            includes_pattern=includes_pattern,
            notes=notes,
            primary_keypair_ref=primary_keypair_ref,
            priority_resolution=priority_resolution,
            project_environments=project_environments,
            project_key=project_key,
            property_sets=property_sets,
            repo_layout_ref=repo_layout_ref,
            secondary_keypair_ref=secondary_keypair_ref,
            xray_index=xray_index,
            yum_group_file_names=yum_group_file_names,
            yum_root_depth=yum_root_depth,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             archive_browsing_enabled: Optional[pulumi.Input[bool]] = None,
             blacked_out: Optional[pulumi.Input[bool]] = None,
             calculate_yum_metadata: Optional[pulumi.Input[bool]] = None,
             cdn_redirect: Optional[pulumi.Input[bool]] = None,
             description: Optional[pulumi.Input[str]] = None,
             download_direct: Optional[pulumi.Input[bool]] = None,
             enable_file_lists_indexing: Optional[pulumi.Input[bool]] = None,
             excludes_pattern: Optional[pulumi.Input[str]] = None,
             includes_pattern: Optional[pulumi.Input[str]] = None,
             notes: Optional[pulumi.Input[str]] = None,
             primary_keypair_ref: Optional[pulumi.Input[str]] = None,
             priority_resolution: Optional[pulumi.Input[bool]] = None,
             project_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             project_key: Optional[pulumi.Input[str]] = None,
             property_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             repo_layout_ref: Optional[pulumi.Input[str]] = None,
             secondary_keypair_ref: Optional[pulumi.Input[str]] = None,
             xray_index: Optional[pulumi.Input[bool]] = None,
             yum_group_file_names: Optional[pulumi.Input[str]] = None,
             yum_root_depth: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        if archive_browsing_enabled is not None:
            _setter("archive_browsing_enabled", archive_browsing_enabled)
        if blacked_out is not None:
            _setter("blacked_out", blacked_out)
        if calculate_yum_metadata is not None:
            _setter("calculate_yum_metadata", calculate_yum_metadata)
        if cdn_redirect is not None:
            _setter("cdn_redirect", cdn_redirect)
        if description is not None:
            _setter("description", description)
        if download_direct is not None:
            _setter("download_direct", download_direct)
        if enable_file_lists_indexing is not None:
            _setter("enable_file_lists_indexing", enable_file_lists_indexing)
        if excludes_pattern is not None:
            _setter("excludes_pattern", excludes_pattern)
        if includes_pattern is not None:
            _setter("includes_pattern", includes_pattern)
        if notes is not None:
            _setter("notes", notes)
        if primary_keypair_ref is not None:
            _setter("primary_keypair_ref", primary_keypair_ref)
        if priority_resolution is not None:
            _setter("priority_resolution", priority_resolution)
        if project_environments is not None:
            _setter("project_environments", project_environments)
        if project_key is not None:
            _setter("project_key", project_key)
        if property_sets is not None:
            _setter("property_sets", property_sets)
        if repo_layout_ref is not None:
            _setter("repo_layout_ref", repo_layout_ref)
        if secondary_keypair_ref is not None:
            _setter("secondary_keypair_ref", secondary_keypair_ref)
        if xray_index is not None:
            _setter("xray_index", xray_index)
        if yum_group_file_names is not None:
            _setter("yum_group_file_names", yum_group_file_names)
        if yum_root_depth is not None:
            _setter("yum_root_depth", yum_root_depth)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        the identity key of the repo.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="archiveBrowsingEnabled")
    def archive_browsing_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and
        therefore requires strict content moderation to prevent malicious users from uploading content that may compromise
        security (e.g., cross-site scripting attacks).
        """
        return pulumi.get(self, "archive_browsing_enabled")

    @archive_browsing_enabled.setter
    def archive_browsing_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "archive_browsing_enabled", value)

    @property
    @pulumi.getter(name="blackedOut")
    def blacked_out(self) -> Optional[pulumi.Input[bool]]:
        """
        When set, the repository does not participate in artifact resolution and new artifacts cannot be deployed.
        """
        return pulumi.get(self, "blacked_out")

    @blacked_out.setter
    def blacked_out(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "blacked_out", value)

    @property
    @pulumi.getter(name="calculateYumMetadata")
    def calculate_yum_metadata(self) -> Optional[pulumi.Input[bool]]:
        """
        Default: `false`.
        """
        return pulumi.get(self, "calculate_yum_metadata")

    @calculate_yum_metadata.setter
    def calculate_yum_metadata(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "calculate_yum_metadata", value)

    @property
    @pulumi.getter(name="cdnRedirect")
    def cdn_redirect(self) -> Optional[pulumi.Input[bool]]:
        """
        When set, download requests to this repository will redirect the client to download the artifact directly from AWS
        CloudFront. Available in Enterprise+ and Edge licenses only. Default value is 'false'
        """
        return pulumi.get(self, "cdn_redirect")

    @cdn_redirect.setter
    def cdn_redirect(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cdn_redirect", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Public description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="downloadDirect")
    def download_direct(self) -> Optional[pulumi.Input[bool]]:
        """
        When set, download requests to this repository will redirect the client to download the artifact directly from the cloud
        storage provider. Available in Enterprise+ and Edge licenses only.
        """
        return pulumi.get(self, "download_direct")

    @download_direct.setter
    def download_direct(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "download_direct", value)

    @property
    @pulumi.getter(name="enableFileListsIndexing")
    def enable_file_lists_indexing(self) -> Optional[pulumi.Input[bool]]:
        """
        Default: `false`.
        """
        return pulumi.get(self, "enable_file_lists_indexing")

    @enable_file_lists_indexing.setter
    def enable_file_lists_indexing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_file_lists_indexing", value)

    @property
    @pulumi.getter(name="excludesPattern")
    def excludes_pattern(self) -> Optional[pulumi.Input[str]]:
        """
        List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*. By default no
        artifacts are excluded.
        """
        return pulumi.get(self, "excludes_pattern")

    @excludes_pattern.setter
    def excludes_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "excludes_pattern", value)

    @property
    @pulumi.getter(name="includesPattern")
    def includes_pattern(self) -> Optional[pulumi.Input[str]]:
        """
        List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only
        artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
        """
        return pulumi.get(self, "includes_pattern")

    @includes_pattern.setter
    def includes_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "includes_pattern", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        """
        Internal description.
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter(name="primaryKeypairRef")
    def primary_keypair_ref(self) -> Optional[pulumi.Input[str]]:
        """
        The primary GPG key to be used to sign packages.
        """
        return pulumi.get(self, "primary_keypair_ref")

    @primary_keypair_ref.setter
    def primary_keypair_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_keypair_ref", value)

    @property
    @pulumi.getter(name="priorityResolution")
    def priority_resolution(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting repositories with priority will cause metadata to be merged only from repositories set with this field
        """
        return pulumi.get(self, "priority_resolution")

    @priority_resolution.setter
    def priority_resolution(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "priority_resolution", value)

    @property
    @pulumi.getter(name="projectEnvironments")
    def project_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Project environment for assigning this repository to. Allow values: "DEV", "PROD", or one of custom environment. Before
        Artifactory 7.53.1, up to 2 values ("DEV" and "PROD") are allowed. From 7.53.1 onward, only one value is allowed. The
        attribute should only be used if the repository is already assigned to the existing project. If not, the attribute will
        be ignored by Artifactory, but will remain in the Terraform state, which will create state drift during the update.
        """
        return pulumi.get(self, "project_environments")

    @project_environments.setter
    def project_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "project_environments", value)

    @property
    @pulumi.getter(name="projectKey")
    def project_key(self) -> Optional[pulumi.Input[str]]:
        """
        Project key for assigning this repository to. Must be 2 - 20 lowercase alphanumeric and hyphen characters. When
        assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
        """
        return pulumi.get(self, "project_key")

    @project_key.setter
    def project_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_key", value)

    @property
    @pulumi.getter(name="propertySets")
    def property_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of property set name
        """
        return pulumi.get(self, "property_sets")

    @property_sets.setter
    def property_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "property_sets", value)

    @property
    @pulumi.getter(name="repoLayoutRef")
    def repo_layout_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Repository layout key for the local repository
        """
        return pulumi.get(self, "repo_layout_ref")

    @repo_layout_ref.setter
    def repo_layout_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_layout_ref", value)

    @property
    @pulumi.getter(name="secondaryKeypairRef")
    def secondary_keypair_ref(self) -> Optional[pulumi.Input[str]]:
        """
        The secondary GPG key to be used to sign packages.
        """
        return pulumi.get(self, "secondary_keypair_ref")

    @secondary_keypair_ref.setter
    def secondary_keypair_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_keypair_ref", value)

    @property
    @pulumi.getter(name="xrayIndex")
    def xray_index(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
        Xray settings.
        """
        return pulumi.get(self, "xray_index")

    @xray_index.setter
    def xray_index(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "xray_index", value)

    @property
    @pulumi.getter(name="yumGroupFileNames")
    def yum_group_file_names(self) -> Optional[pulumi.Input[str]]:
        """
        A comma separated list of XML file names containing RPM group component definitions. 
        Artifactory includes the group definitions as part of the calculated RPM metadata, as well as automatically
        generating a gzipped version of the group files, if required. Default is empty string.
        """
        return pulumi.get(self, "yum_group_file_names")

    @yum_group_file_names.setter
    def yum_group_file_names(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "yum_group_file_names", value)

    @property
    @pulumi.getter(name="yumRootDepth")
    def yum_root_depth(self) -> Optional[pulumi.Input[int]]:
        """
        The depth, relative to the repository's root folder, where RPM metadata is created. 
        This is useful when your repository contains multiple RPM repositories under parallel hierarchies. For example, if
        your RPMs are stored under 'fedora/linux/$releasever/$basearch', specify a depth of 4. Once the number of snapshots
        exceeds this setting, older versions are removed. A value of 0 (default) indicates there is no limit, and unique
        snapshots are not cleaned up.
        """
        return pulumi.get(self, "yum_root_depth")

    @yum_root_depth.setter
    def yum_root_depth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "yum_root_depth", value)


@pulumi.input_type
class _LocalRpmRepositoryState:
    def __init__(__self__, *,
                 archive_browsing_enabled: Optional[pulumi.Input[bool]] = None,
                 blacked_out: Optional[pulumi.Input[bool]] = None,
                 calculate_yum_metadata: Optional[pulumi.Input[bool]] = None,
                 cdn_redirect: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 download_direct: Optional[pulumi.Input[bool]] = None,
                 enable_file_lists_indexing: Optional[pulumi.Input[bool]] = None,
                 excludes_pattern: Optional[pulumi.Input[str]] = None,
                 includes_pattern: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 package_type: Optional[pulumi.Input[str]] = None,
                 primary_keypair_ref: Optional[pulumi.Input[str]] = None,
                 priority_resolution: Optional[pulumi.Input[bool]] = None,
                 project_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 project_key: Optional[pulumi.Input[str]] = None,
                 property_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 repo_layout_ref: Optional[pulumi.Input[str]] = None,
                 secondary_keypair_ref: Optional[pulumi.Input[str]] = None,
                 xray_index: Optional[pulumi.Input[bool]] = None,
                 yum_group_file_names: Optional[pulumi.Input[str]] = None,
                 yum_root_depth: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering LocalRpmRepository resources.
        :param pulumi.Input[bool] archive_browsing_enabled: When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and
               therefore requires strict content moderation to prevent malicious users from uploading content that may compromise
               security (e.g., cross-site scripting attacks).
        :param pulumi.Input[bool] blacked_out: When set, the repository does not participate in artifact resolution and new artifacts cannot be deployed.
        :param pulumi.Input[bool] calculate_yum_metadata: Default: `false`.
        :param pulumi.Input[bool] cdn_redirect: When set, download requests to this repository will redirect the client to download the artifact directly from AWS
               CloudFront. Available in Enterprise+ and Edge licenses only. Default value is 'false'
        :param pulumi.Input[str] description: Public description.
        :param pulumi.Input[bool] download_direct: When set, download requests to this repository will redirect the client to download the artifact directly from the cloud
               storage provider. Available in Enterprise+ and Edge licenses only.
        :param pulumi.Input[bool] enable_file_lists_indexing: Default: `false`.
        :param pulumi.Input[str] excludes_pattern: List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*. By default no
               artifacts are excluded.
        :param pulumi.Input[str] includes_pattern: List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only
               artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
        :param pulumi.Input[str] key: the identity key of the repo.
        :param pulumi.Input[str] notes: Internal description.
        :param pulumi.Input[str] primary_keypair_ref: The primary GPG key to be used to sign packages.
        :param pulumi.Input[bool] priority_resolution: Setting repositories with priority will cause metadata to be merged only from repositories set with this field
        :param pulumi.Input[Sequence[pulumi.Input[str]]] project_environments: Project environment for assigning this repository to. Allow values: "DEV", "PROD", or one of custom environment. Before
               Artifactory 7.53.1, up to 2 values ("DEV" and "PROD") are allowed. From 7.53.1 onward, only one value is allowed. The
               attribute should only be used if the repository is already assigned to the existing project. If not, the attribute will
               be ignored by Artifactory, but will remain in the Terraform state, which will create state drift during the update.
        :param pulumi.Input[str] project_key: Project key for assigning this repository to. Must be 2 - 20 lowercase alphanumeric and hyphen characters. When
               assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] property_sets: List of property set name
        :param pulumi.Input[str] repo_layout_ref: Repository layout key for the local repository
        :param pulumi.Input[str] secondary_keypair_ref: The secondary GPG key to be used to sign packages.
        :param pulumi.Input[bool] xray_index: Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
               Xray settings.
        :param pulumi.Input[str] yum_group_file_names: A comma separated list of XML file names containing RPM group component definitions. 
               Artifactory includes the group definitions as part of the calculated RPM metadata, as well as automatically
               generating a gzipped version of the group files, if required. Default is empty string.
        :param pulumi.Input[int] yum_root_depth: The depth, relative to the repository's root folder, where RPM metadata is created. 
               This is useful when your repository contains multiple RPM repositories under parallel hierarchies. For example, if
               your RPMs are stored under 'fedora/linux/$releasever/$basearch', specify a depth of 4. Once the number of snapshots
               exceeds this setting, older versions are removed. A value of 0 (default) indicates there is no limit, and unique
               snapshots are not cleaned up.
        """
        _LocalRpmRepositoryState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            archive_browsing_enabled=archive_browsing_enabled,
            blacked_out=blacked_out,
            calculate_yum_metadata=calculate_yum_metadata,
            cdn_redirect=cdn_redirect,
            description=description,
            download_direct=download_direct,
            enable_file_lists_indexing=enable_file_lists_indexing,
            excludes_pattern=excludes_pattern,
            includes_pattern=includes_pattern,
            key=key,
            notes=notes,
            package_type=package_type,
            primary_keypair_ref=primary_keypair_ref,
            priority_resolution=priority_resolution,
            project_environments=project_environments,
            project_key=project_key,
            property_sets=property_sets,
            repo_layout_ref=repo_layout_ref,
            secondary_keypair_ref=secondary_keypair_ref,
            xray_index=xray_index,
            yum_group_file_names=yum_group_file_names,
            yum_root_depth=yum_root_depth,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             archive_browsing_enabled: Optional[pulumi.Input[bool]] = None,
             blacked_out: Optional[pulumi.Input[bool]] = None,
             calculate_yum_metadata: Optional[pulumi.Input[bool]] = None,
             cdn_redirect: Optional[pulumi.Input[bool]] = None,
             description: Optional[pulumi.Input[str]] = None,
             download_direct: Optional[pulumi.Input[bool]] = None,
             enable_file_lists_indexing: Optional[pulumi.Input[bool]] = None,
             excludes_pattern: Optional[pulumi.Input[str]] = None,
             includes_pattern: Optional[pulumi.Input[str]] = None,
             key: Optional[pulumi.Input[str]] = None,
             notes: Optional[pulumi.Input[str]] = None,
             package_type: Optional[pulumi.Input[str]] = None,
             primary_keypair_ref: Optional[pulumi.Input[str]] = None,
             priority_resolution: Optional[pulumi.Input[bool]] = None,
             project_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             project_key: Optional[pulumi.Input[str]] = None,
             property_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             repo_layout_ref: Optional[pulumi.Input[str]] = None,
             secondary_keypair_ref: Optional[pulumi.Input[str]] = None,
             xray_index: Optional[pulumi.Input[bool]] = None,
             yum_group_file_names: Optional[pulumi.Input[str]] = None,
             yum_root_depth: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if archive_browsing_enabled is not None:
            _setter("archive_browsing_enabled", archive_browsing_enabled)
        if blacked_out is not None:
            _setter("blacked_out", blacked_out)
        if calculate_yum_metadata is not None:
            _setter("calculate_yum_metadata", calculate_yum_metadata)
        if cdn_redirect is not None:
            _setter("cdn_redirect", cdn_redirect)
        if description is not None:
            _setter("description", description)
        if download_direct is not None:
            _setter("download_direct", download_direct)
        if enable_file_lists_indexing is not None:
            _setter("enable_file_lists_indexing", enable_file_lists_indexing)
        if excludes_pattern is not None:
            _setter("excludes_pattern", excludes_pattern)
        if includes_pattern is not None:
            _setter("includes_pattern", includes_pattern)
        if key is not None:
            _setter("key", key)
        if notes is not None:
            _setter("notes", notes)
        if package_type is not None:
            _setter("package_type", package_type)
        if primary_keypair_ref is not None:
            _setter("primary_keypair_ref", primary_keypair_ref)
        if priority_resolution is not None:
            _setter("priority_resolution", priority_resolution)
        if project_environments is not None:
            _setter("project_environments", project_environments)
        if project_key is not None:
            _setter("project_key", project_key)
        if property_sets is not None:
            _setter("property_sets", property_sets)
        if repo_layout_ref is not None:
            _setter("repo_layout_ref", repo_layout_ref)
        if secondary_keypair_ref is not None:
            _setter("secondary_keypair_ref", secondary_keypair_ref)
        if xray_index is not None:
            _setter("xray_index", xray_index)
        if yum_group_file_names is not None:
            _setter("yum_group_file_names", yum_group_file_names)
        if yum_root_depth is not None:
            _setter("yum_root_depth", yum_root_depth)

    @property
    @pulumi.getter(name="archiveBrowsingEnabled")
    def archive_browsing_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and
        therefore requires strict content moderation to prevent malicious users from uploading content that may compromise
        security (e.g., cross-site scripting attacks).
        """
        return pulumi.get(self, "archive_browsing_enabled")

    @archive_browsing_enabled.setter
    def archive_browsing_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "archive_browsing_enabled", value)

    @property
    @pulumi.getter(name="blackedOut")
    def blacked_out(self) -> Optional[pulumi.Input[bool]]:
        """
        When set, the repository does not participate in artifact resolution and new artifacts cannot be deployed.
        """
        return pulumi.get(self, "blacked_out")

    @blacked_out.setter
    def blacked_out(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "blacked_out", value)

    @property
    @pulumi.getter(name="calculateYumMetadata")
    def calculate_yum_metadata(self) -> Optional[pulumi.Input[bool]]:
        """
        Default: `false`.
        """
        return pulumi.get(self, "calculate_yum_metadata")

    @calculate_yum_metadata.setter
    def calculate_yum_metadata(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "calculate_yum_metadata", value)

    @property
    @pulumi.getter(name="cdnRedirect")
    def cdn_redirect(self) -> Optional[pulumi.Input[bool]]:
        """
        When set, download requests to this repository will redirect the client to download the artifact directly from AWS
        CloudFront. Available in Enterprise+ and Edge licenses only. Default value is 'false'
        """
        return pulumi.get(self, "cdn_redirect")

    @cdn_redirect.setter
    def cdn_redirect(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cdn_redirect", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Public description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="downloadDirect")
    def download_direct(self) -> Optional[pulumi.Input[bool]]:
        """
        When set, download requests to this repository will redirect the client to download the artifact directly from the cloud
        storage provider. Available in Enterprise+ and Edge licenses only.
        """
        return pulumi.get(self, "download_direct")

    @download_direct.setter
    def download_direct(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "download_direct", value)

    @property
    @pulumi.getter(name="enableFileListsIndexing")
    def enable_file_lists_indexing(self) -> Optional[pulumi.Input[bool]]:
        """
        Default: `false`.
        """
        return pulumi.get(self, "enable_file_lists_indexing")

    @enable_file_lists_indexing.setter
    def enable_file_lists_indexing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_file_lists_indexing", value)

    @property
    @pulumi.getter(name="excludesPattern")
    def excludes_pattern(self) -> Optional[pulumi.Input[str]]:
        """
        List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*. By default no
        artifacts are excluded.
        """
        return pulumi.get(self, "excludes_pattern")

    @excludes_pattern.setter
    def excludes_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "excludes_pattern", value)

    @property
    @pulumi.getter(name="includesPattern")
    def includes_pattern(self) -> Optional[pulumi.Input[str]]:
        """
        List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only
        artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
        """
        return pulumi.get(self, "includes_pattern")

    @includes_pattern.setter
    def includes_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "includes_pattern", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        the identity key of the repo.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        """
        Internal description.
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter(name="packageType")
    def package_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "package_type")

    @package_type.setter
    def package_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_type", value)

    @property
    @pulumi.getter(name="primaryKeypairRef")
    def primary_keypair_ref(self) -> Optional[pulumi.Input[str]]:
        """
        The primary GPG key to be used to sign packages.
        """
        return pulumi.get(self, "primary_keypair_ref")

    @primary_keypair_ref.setter
    def primary_keypair_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_keypair_ref", value)

    @property
    @pulumi.getter(name="priorityResolution")
    def priority_resolution(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting repositories with priority will cause metadata to be merged only from repositories set with this field
        """
        return pulumi.get(self, "priority_resolution")

    @priority_resolution.setter
    def priority_resolution(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "priority_resolution", value)

    @property
    @pulumi.getter(name="projectEnvironments")
    def project_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Project environment for assigning this repository to. Allow values: "DEV", "PROD", or one of custom environment. Before
        Artifactory 7.53.1, up to 2 values ("DEV" and "PROD") are allowed. From 7.53.1 onward, only one value is allowed. The
        attribute should only be used if the repository is already assigned to the existing project. If not, the attribute will
        be ignored by Artifactory, but will remain in the Terraform state, which will create state drift during the update.
        """
        return pulumi.get(self, "project_environments")

    @project_environments.setter
    def project_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "project_environments", value)

    @property
    @pulumi.getter(name="projectKey")
    def project_key(self) -> Optional[pulumi.Input[str]]:
        """
        Project key for assigning this repository to. Must be 2 - 20 lowercase alphanumeric and hyphen characters. When
        assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
        """
        return pulumi.get(self, "project_key")

    @project_key.setter
    def project_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_key", value)

    @property
    @pulumi.getter(name="propertySets")
    def property_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of property set name
        """
        return pulumi.get(self, "property_sets")

    @property_sets.setter
    def property_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "property_sets", value)

    @property
    @pulumi.getter(name="repoLayoutRef")
    def repo_layout_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Repository layout key for the local repository
        """
        return pulumi.get(self, "repo_layout_ref")

    @repo_layout_ref.setter
    def repo_layout_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_layout_ref", value)

    @property
    @pulumi.getter(name="secondaryKeypairRef")
    def secondary_keypair_ref(self) -> Optional[pulumi.Input[str]]:
        """
        The secondary GPG key to be used to sign packages.
        """
        return pulumi.get(self, "secondary_keypair_ref")

    @secondary_keypair_ref.setter
    def secondary_keypair_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_keypair_ref", value)

    @property
    @pulumi.getter(name="xrayIndex")
    def xray_index(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
        Xray settings.
        """
        return pulumi.get(self, "xray_index")

    @xray_index.setter
    def xray_index(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "xray_index", value)

    @property
    @pulumi.getter(name="yumGroupFileNames")
    def yum_group_file_names(self) -> Optional[pulumi.Input[str]]:
        """
        A comma separated list of XML file names containing RPM group component definitions. 
        Artifactory includes the group definitions as part of the calculated RPM metadata, as well as automatically
        generating a gzipped version of the group files, if required. Default is empty string.
        """
        return pulumi.get(self, "yum_group_file_names")

    @yum_group_file_names.setter
    def yum_group_file_names(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "yum_group_file_names", value)

    @property
    @pulumi.getter(name="yumRootDepth")
    def yum_root_depth(self) -> Optional[pulumi.Input[int]]:
        """
        The depth, relative to the repository's root folder, where RPM metadata is created. 
        This is useful when your repository contains multiple RPM repositories under parallel hierarchies. For example, if
        your RPMs are stored under 'fedora/linux/$releasever/$basearch', specify a depth of 4. Once the number of snapshots
        exceeds this setting, older versions are removed. A value of 0 (default) indicates there is no limit, and unique
        snapshots are not cleaned up.
        """
        return pulumi.get(self, "yum_root_depth")

    @yum_root_depth.setter
    def yum_root_depth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "yum_root_depth", value)


class LocalRpmRepository(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 archive_browsing_enabled: Optional[pulumi.Input[bool]] = None,
                 blacked_out: Optional[pulumi.Input[bool]] = None,
                 calculate_yum_metadata: Optional[pulumi.Input[bool]] = None,
                 cdn_redirect: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 download_direct: Optional[pulumi.Input[bool]] = None,
                 enable_file_lists_indexing: Optional[pulumi.Input[bool]] = None,
                 excludes_pattern: Optional[pulumi.Input[str]] = None,
                 includes_pattern: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 primary_keypair_ref: Optional[pulumi.Input[str]] = None,
                 priority_resolution: Optional[pulumi.Input[bool]] = None,
                 project_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 project_key: Optional[pulumi.Input[str]] = None,
                 property_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 repo_layout_ref: Optional[pulumi.Input[str]] = None,
                 secondary_keypair_ref: Optional[pulumi.Input[str]] = None,
                 xray_index: Optional[pulumi.Input[bool]] = None,
                 yum_group_file_names: Optional[pulumi.Input[str]] = None,
                 yum_root_depth: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Creates a local RPM repository.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_artifactory as artifactory

        some_keypair_gpg_1 = artifactory.Keypair("some-keypair-gpg-1",
            pair_name=f"some-keypair{random_id['randid']['id']}",
            pair_type="GPG",
            alias="foo-alias1",
            private_key=(lambda path: open(path).read())("samples/gpg.priv"),
            public_key=(lambda path: open(path).read())("samples/gpg.pub"))
        some_keypair_gpg_2 = artifactory.Keypair("some-keypair-gpg-2",
            pair_name=f"some-keypair{random_id['randid']['id']}",
            pair_type="GPG",
            alias="foo-alias2",
            private_key=(lambda path: open(path).read())("samples/gpg.priv"),
            public_key=(lambda path: open(path).read())("samples/gpg.pub"))
        terraform_local_test_rpm_repo_basic = artifactory.LocalRpmRepository("terraform-local-test-rpm-repo-basic",
            key="terraform-local-test-rpm-repo-basic",
            yum_root_depth=5,
            calculate_yum_metadata=True,
            enable_file_lists_indexing=True,
            yum_group_file_names="file-1.xml,file-2.xml",
            primary_keypair_ref=artifactory_keypair["some-keypairGPG1"]["pair_name"],
            secondary_keypair_ref=artifactory_keypair["some-keypairGPG2"]["pair_name"],
            opts=pulumi.ResourceOptions(depends_on=[
                    some_keypair_gpg_1,
                    some_keypair_gpg_2,
                ]))
        ```

        ## Import

        Local repositories can be imported using their name, e.g.

        ```sh
         $ pulumi import artifactory:index/localRpmRepository:LocalRpmRepository terraform-local-test-rpm-repo-basic terraform-local-test-rpm-repo-basic
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] archive_browsing_enabled: When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and
               therefore requires strict content moderation to prevent malicious users from uploading content that may compromise
               security (e.g., cross-site scripting attacks).
        :param pulumi.Input[bool] blacked_out: When set, the repository does not participate in artifact resolution and new artifacts cannot be deployed.
        :param pulumi.Input[bool] calculate_yum_metadata: Default: `false`.
        :param pulumi.Input[bool] cdn_redirect: When set, download requests to this repository will redirect the client to download the artifact directly from AWS
               CloudFront. Available in Enterprise+ and Edge licenses only. Default value is 'false'
        :param pulumi.Input[str] description: Public description.
        :param pulumi.Input[bool] download_direct: When set, download requests to this repository will redirect the client to download the artifact directly from the cloud
               storage provider. Available in Enterprise+ and Edge licenses only.
        :param pulumi.Input[bool] enable_file_lists_indexing: Default: `false`.
        :param pulumi.Input[str] excludes_pattern: List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*. By default no
               artifacts are excluded.
        :param pulumi.Input[str] includes_pattern: List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only
               artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
        :param pulumi.Input[str] key: the identity key of the repo.
        :param pulumi.Input[str] notes: Internal description.
        :param pulumi.Input[str] primary_keypair_ref: The primary GPG key to be used to sign packages.
        :param pulumi.Input[bool] priority_resolution: Setting repositories with priority will cause metadata to be merged only from repositories set with this field
        :param pulumi.Input[Sequence[pulumi.Input[str]]] project_environments: Project environment for assigning this repository to. Allow values: "DEV", "PROD", or one of custom environment. Before
               Artifactory 7.53.1, up to 2 values ("DEV" and "PROD") are allowed. From 7.53.1 onward, only one value is allowed. The
               attribute should only be used if the repository is already assigned to the existing project. If not, the attribute will
               be ignored by Artifactory, but will remain in the Terraform state, which will create state drift during the update.
        :param pulumi.Input[str] project_key: Project key for assigning this repository to. Must be 2 - 20 lowercase alphanumeric and hyphen characters. When
               assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] property_sets: List of property set name
        :param pulumi.Input[str] repo_layout_ref: Repository layout key for the local repository
        :param pulumi.Input[str] secondary_keypair_ref: The secondary GPG key to be used to sign packages.
        :param pulumi.Input[bool] xray_index: Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
               Xray settings.
        :param pulumi.Input[str] yum_group_file_names: A comma separated list of XML file names containing RPM group component definitions. 
               Artifactory includes the group definitions as part of the calculated RPM metadata, as well as automatically
               generating a gzipped version of the group files, if required. Default is empty string.
        :param pulumi.Input[int] yum_root_depth: The depth, relative to the repository's root folder, where RPM metadata is created. 
               This is useful when your repository contains multiple RPM repositories under parallel hierarchies. For example, if
               your RPMs are stored under 'fedora/linux/$releasever/$basearch', specify a depth of 4. Once the number of snapshots
               exceeds this setting, older versions are removed. A value of 0 (default) indicates there is no limit, and unique
               snapshots are not cleaned up.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LocalRpmRepositoryArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a local RPM repository.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_artifactory as artifactory

        some_keypair_gpg_1 = artifactory.Keypair("some-keypair-gpg-1",
            pair_name=f"some-keypair{random_id['randid']['id']}",
            pair_type="GPG",
            alias="foo-alias1",
            private_key=(lambda path: open(path).read())("samples/gpg.priv"),
            public_key=(lambda path: open(path).read())("samples/gpg.pub"))
        some_keypair_gpg_2 = artifactory.Keypair("some-keypair-gpg-2",
            pair_name=f"some-keypair{random_id['randid']['id']}",
            pair_type="GPG",
            alias="foo-alias2",
            private_key=(lambda path: open(path).read())("samples/gpg.priv"),
            public_key=(lambda path: open(path).read())("samples/gpg.pub"))
        terraform_local_test_rpm_repo_basic = artifactory.LocalRpmRepository("terraform-local-test-rpm-repo-basic",
            key="terraform-local-test-rpm-repo-basic",
            yum_root_depth=5,
            calculate_yum_metadata=True,
            enable_file_lists_indexing=True,
            yum_group_file_names="file-1.xml,file-2.xml",
            primary_keypair_ref=artifactory_keypair["some-keypairGPG1"]["pair_name"],
            secondary_keypair_ref=artifactory_keypair["some-keypairGPG2"]["pair_name"],
            opts=pulumi.ResourceOptions(depends_on=[
                    some_keypair_gpg_1,
                    some_keypair_gpg_2,
                ]))
        ```

        ## Import

        Local repositories can be imported using their name, e.g.

        ```sh
         $ pulumi import artifactory:index/localRpmRepository:LocalRpmRepository terraform-local-test-rpm-repo-basic terraform-local-test-rpm-repo-basic
        ```

        :param str resource_name: The name of the resource.
        :param LocalRpmRepositoryArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LocalRpmRepositoryArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            LocalRpmRepositoryArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 archive_browsing_enabled: Optional[pulumi.Input[bool]] = None,
                 blacked_out: Optional[pulumi.Input[bool]] = None,
                 calculate_yum_metadata: Optional[pulumi.Input[bool]] = None,
                 cdn_redirect: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 download_direct: Optional[pulumi.Input[bool]] = None,
                 enable_file_lists_indexing: Optional[pulumi.Input[bool]] = None,
                 excludes_pattern: Optional[pulumi.Input[str]] = None,
                 includes_pattern: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 primary_keypair_ref: Optional[pulumi.Input[str]] = None,
                 priority_resolution: Optional[pulumi.Input[bool]] = None,
                 project_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 project_key: Optional[pulumi.Input[str]] = None,
                 property_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 repo_layout_ref: Optional[pulumi.Input[str]] = None,
                 secondary_keypair_ref: Optional[pulumi.Input[str]] = None,
                 xray_index: Optional[pulumi.Input[bool]] = None,
                 yum_group_file_names: Optional[pulumi.Input[str]] = None,
                 yum_root_depth: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LocalRpmRepositoryArgs.__new__(LocalRpmRepositoryArgs)

            __props__.__dict__["archive_browsing_enabled"] = archive_browsing_enabled
            __props__.__dict__["blacked_out"] = blacked_out
            __props__.__dict__["calculate_yum_metadata"] = calculate_yum_metadata
            __props__.__dict__["cdn_redirect"] = cdn_redirect
            __props__.__dict__["description"] = description
            __props__.__dict__["download_direct"] = download_direct
            __props__.__dict__["enable_file_lists_indexing"] = enable_file_lists_indexing
            __props__.__dict__["excludes_pattern"] = excludes_pattern
            __props__.__dict__["includes_pattern"] = includes_pattern
            if key is None and not opts.urn:
                raise TypeError("Missing required property 'key'")
            __props__.__dict__["key"] = key
            __props__.__dict__["notes"] = notes
            __props__.__dict__["primary_keypair_ref"] = primary_keypair_ref
            __props__.__dict__["priority_resolution"] = priority_resolution
            __props__.__dict__["project_environments"] = project_environments
            __props__.__dict__["project_key"] = project_key
            __props__.__dict__["property_sets"] = property_sets
            __props__.__dict__["repo_layout_ref"] = repo_layout_ref
            __props__.__dict__["secondary_keypair_ref"] = secondary_keypair_ref
            __props__.__dict__["xray_index"] = xray_index
            __props__.__dict__["yum_group_file_names"] = yum_group_file_names
            __props__.__dict__["yum_root_depth"] = yum_root_depth
            __props__.__dict__["package_type"] = None
        super(LocalRpmRepository, __self__).__init__(
            'artifactory:index/localRpmRepository:LocalRpmRepository',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            archive_browsing_enabled: Optional[pulumi.Input[bool]] = None,
            blacked_out: Optional[pulumi.Input[bool]] = None,
            calculate_yum_metadata: Optional[pulumi.Input[bool]] = None,
            cdn_redirect: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            download_direct: Optional[pulumi.Input[bool]] = None,
            enable_file_lists_indexing: Optional[pulumi.Input[bool]] = None,
            excludes_pattern: Optional[pulumi.Input[str]] = None,
            includes_pattern: Optional[pulumi.Input[str]] = None,
            key: Optional[pulumi.Input[str]] = None,
            notes: Optional[pulumi.Input[str]] = None,
            package_type: Optional[pulumi.Input[str]] = None,
            primary_keypair_ref: Optional[pulumi.Input[str]] = None,
            priority_resolution: Optional[pulumi.Input[bool]] = None,
            project_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            project_key: Optional[pulumi.Input[str]] = None,
            property_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            repo_layout_ref: Optional[pulumi.Input[str]] = None,
            secondary_keypair_ref: Optional[pulumi.Input[str]] = None,
            xray_index: Optional[pulumi.Input[bool]] = None,
            yum_group_file_names: Optional[pulumi.Input[str]] = None,
            yum_root_depth: Optional[pulumi.Input[int]] = None) -> 'LocalRpmRepository':
        """
        Get an existing LocalRpmRepository resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] archive_browsing_enabled: When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and
               therefore requires strict content moderation to prevent malicious users from uploading content that may compromise
               security (e.g., cross-site scripting attacks).
        :param pulumi.Input[bool] blacked_out: When set, the repository does not participate in artifact resolution and new artifacts cannot be deployed.
        :param pulumi.Input[bool] calculate_yum_metadata: Default: `false`.
        :param pulumi.Input[bool] cdn_redirect: When set, download requests to this repository will redirect the client to download the artifact directly from AWS
               CloudFront. Available in Enterprise+ and Edge licenses only. Default value is 'false'
        :param pulumi.Input[str] description: Public description.
        :param pulumi.Input[bool] download_direct: When set, download requests to this repository will redirect the client to download the artifact directly from the cloud
               storage provider. Available in Enterprise+ and Edge licenses only.
        :param pulumi.Input[bool] enable_file_lists_indexing: Default: `false`.
        :param pulumi.Input[str] excludes_pattern: List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*. By default no
               artifacts are excluded.
        :param pulumi.Input[str] includes_pattern: List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only
               artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
        :param pulumi.Input[str] key: the identity key of the repo.
        :param pulumi.Input[str] notes: Internal description.
        :param pulumi.Input[str] primary_keypair_ref: The primary GPG key to be used to sign packages.
        :param pulumi.Input[bool] priority_resolution: Setting repositories with priority will cause metadata to be merged only from repositories set with this field
        :param pulumi.Input[Sequence[pulumi.Input[str]]] project_environments: Project environment for assigning this repository to. Allow values: "DEV", "PROD", or one of custom environment. Before
               Artifactory 7.53.1, up to 2 values ("DEV" and "PROD") are allowed. From 7.53.1 onward, only one value is allowed. The
               attribute should only be used if the repository is already assigned to the existing project. If not, the attribute will
               be ignored by Artifactory, but will remain in the Terraform state, which will create state drift during the update.
        :param pulumi.Input[str] project_key: Project key for assigning this repository to. Must be 2 - 20 lowercase alphanumeric and hyphen characters. When
               assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] property_sets: List of property set name
        :param pulumi.Input[str] repo_layout_ref: Repository layout key for the local repository
        :param pulumi.Input[str] secondary_keypair_ref: The secondary GPG key to be used to sign packages.
        :param pulumi.Input[bool] xray_index: Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
               Xray settings.
        :param pulumi.Input[str] yum_group_file_names: A comma separated list of XML file names containing RPM group component definitions. 
               Artifactory includes the group definitions as part of the calculated RPM metadata, as well as automatically
               generating a gzipped version of the group files, if required. Default is empty string.
        :param pulumi.Input[int] yum_root_depth: The depth, relative to the repository's root folder, where RPM metadata is created. 
               This is useful when your repository contains multiple RPM repositories under parallel hierarchies. For example, if
               your RPMs are stored under 'fedora/linux/$releasever/$basearch', specify a depth of 4. Once the number of snapshots
               exceeds this setting, older versions are removed. A value of 0 (default) indicates there is no limit, and unique
               snapshots are not cleaned up.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LocalRpmRepositoryState.__new__(_LocalRpmRepositoryState)

        __props__.__dict__["archive_browsing_enabled"] = archive_browsing_enabled
        __props__.__dict__["blacked_out"] = blacked_out
        __props__.__dict__["calculate_yum_metadata"] = calculate_yum_metadata
        __props__.__dict__["cdn_redirect"] = cdn_redirect
        __props__.__dict__["description"] = description
        __props__.__dict__["download_direct"] = download_direct
        __props__.__dict__["enable_file_lists_indexing"] = enable_file_lists_indexing
        __props__.__dict__["excludes_pattern"] = excludes_pattern
        __props__.__dict__["includes_pattern"] = includes_pattern
        __props__.__dict__["key"] = key
        __props__.__dict__["notes"] = notes
        __props__.__dict__["package_type"] = package_type
        __props__.__dict__["primary_keypair_ref"] = primary_keypair_ref
        __props__.__dict__["priority_resolution"] = priority_resolution
        __props__.__dict__["project_environments"] = project_environments
        __props__.__dict__["project_key"] = project_key
        __props__.__dict__["property_sets"] = property_sets
        __props__.__dict__["repo_layout_ref"] = repo_layout_ref
        __props__.__dict__["secondary_keypair_ref"] = secondary_keypair_ref
        __props__.__dict__["xray_index"] = xray_index
        __props__.__dict__["yum_group_file_names"] = yum_group_file_names
        __props__.__dict__["yum_root_depth"] = yum_root_depth
        return LocalRpmRepository(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="archiveBrowsingEnabled")
    def archive_browsing_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and
        therefore requires strict content moderation to prevent malicious users from uploading content that may compromise
        security (e.g., cross-site scripting attacks).
        """
        return pulumi.get(self, "archive_browsing_enabled")

    @property
    @pulumi.getter(name="blackedOut")
    def blacked_out(self) -> pulumi.Output[Optional[bool]]:
        """
        When set, the repository does not participate in artifact resolution and new artifacts cannot be deployed.
        """
        return pulumi.get(self, "blacked_out")

    @property
    @pulumi.getter(name="calculateYumMetadata")
    def calculate_yum_metadata(self) -> pulumi.Output[Optional[bool]]:
        """
        Default: `false`.
        """
        return pulumi.get(self, "calculate_yum_metadata")

    @property
    @pulumi.getter(name="cdnRedirect")
    def cdn_redirect(self) -> pulumi.Output[Optional[bool]]:
        """
        When set, download requests to this repository will redirect the client to download the artifact directly from AWS
        CloudFront. Available in Enterprise+ and Edge licenses only. Default value is 'false'
        """
        return pulumi.get(self, "cdn_redirect")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Public description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="downloadDirect")
    def download_direct(self) -> pulumi.Output[Optional[bool]]:
        """
        When set, download requests to this repository will redirect the client to download the artifact directly from the cloud
        storage provider. Available in Enterprise+ and Edge licenses only.
        """
        return pulumi.get(self, "download_direct")

    @property
    @pulumi.getter(name="enableFileListsIndexing")
    def enable_file_lists_indexing(self) -> pulumi.Output[Optional[bool]]:
        """
        Default: `false`.
        """
        return pulumi.get(self, "enable_file_lists_indexing")

    @property
    @pulumi.getter(name="excludesPattern")
    def excludes_pattern(self) -> pulumi.Output[str]:
        """
        List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*. By default no
        artifacts are excluded.
        """
        return pulumi.get(self, "excludes_pattern")

    @property
    @pulumi.getter(name="includesPattern")
    def includes_pattern(self) -> pulumi.Output[str]:
        """
        List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only
        artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
        """
        return pulumi.get(self, "includes_pattern")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[str]:
        """
        the identity key of the repo.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def notes(self) -> pulumi.Output[Optional[str]]:
        """
        Internal description.
        """
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter(name="packageType")
    def package_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "package_type")

    @property
    @pulumi.getter(name="primaryKeypairRef")
    def primary_keypair_ref(self) -> pulumi.Output[Optional[str]]:
        """
        The primary GPG key to be used to sign packages.
        """
        return pulumi.get(self, "primary_keypair_ref")

    @property
    @pulumi.getter(name="priorityResolution")
    def priority_resolution(self) -> pulumi.Output[Optional[bool]]:
        """
        Setting repositories with priority will cause metadata to be merged only from repositories set with this field
        """
        return pulumi.get(self, "priority_resolution")

    @property
    @pulumi.getter(name="projectEnvironments")
    def project_environments(self) -> pulumi.Output[Sequence[str]]:
        """
        Project environment for assigning this repository to. Allow values: "DEV", "PROD", or one of custom environment. Before
        Artifactory 7.53.1, up to 2 values ("DEV" and "PROD") are allowed. From 7.53.1 onward, only one value is allowed. The
        attribute should only be used if the repository is already assigned to the existing project. If not, the attribute will
        be ignored by Artifactory, but will remain in the Terraform state, which will create state drift during the update.
        """
        return pulumi.get(self, "project_environments")

    @property
    @pulumi.getter(name="projectKey")
    def project_key(self) -> pulumi.Output[Optional[str]]:
        """
        Project key for assigning this repository to. Must be 2 - 20 lowercase alphanumeric and hyphen characters. When
        assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
        """
        return pulumi.get(self, "project_key")

    @property
    @pulumi.getter(name="propertySets")
    def property_sets(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of property set name
        """
        return pulumi.get(self, "property_sets")

    @property
    @pulumi.getter(name="repoLayoutRef")
    def repo_layout_ref(self) -> pulumi.Output[Optional[str]]:
        """
        Repository layout key for the local repository
        """
        return pulumi.get(self, "repo_layout_ref")

    @property
    @pulumi.getter(name="secondaryKeypairRef")
    def secondary_keypair_ref(self) -> pulumi.Output[Optional[str]]:
        """
        The secondary GPG key to be used to sign packages.
        """
        return pulumi.get(self, "secondary_keypair_ref")

    @property
    @pulumi.getter(name="xrayIndex")
    def xray_index(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
        Xray settings.
        """
        return pulumi.get(self, "xray_index")

    @property
    @pulumi.getter(name="yumGroupFileNames")
    def yum_group_file_names(self) -> pulumi.Output[Optional[str]]:
        """
        A comma separated list of XML file names containing RPM group component definitions. 
        Artifactory includes the group definitions as part of the calculated RPM metadata, as well as automatically
        generating a gzipped version of the group files, if required. Default is empty string.
        """
        return pulumi.get(self, "yum_group_file_names")

    @property
    @pulumi.getter(name="yumRootDepth")
    def yum_root_depth(self) -> pulumi.Output[Optional[int]]:
        """
        The depth, relative to the repository's root folder, where RPM metadata is created. 
        This is useful when your repository contains multiple RPM repositories under parallel hierarchies. For example, if
        your RPMs are stored under 'fedora/linux/$releasever/$basearch', specify a depth of 4. Once the number of snapshots
        exceeds this setting, older versions are removed. A value of 0 (default) indicates there is no limit, and unique
        snapshots are not cleaned up.
        """
        return pulumi.get(self, "yum_root_depth")

