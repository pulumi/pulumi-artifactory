# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['LocalRepositoryArgs', 'LocalRepository']

@pulumi.input_type
class LocalRepositoryArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 archive_browsing_enabled: Optional[pulumi.Input[bool]] = None,
                 blacked_out: Optional[pulumi.Input[bool]] = None,
                 calculate_yum_metadata: Optional[pulumi.Input[bool]] = None,
                 checksum_policy_type: Optional[pulumi.Input[str]] = None,
                 debian_trivial_layout: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 docker_api_version: Optional[pulumi.Input[str]] = None,
                 enable_file_lists_indexing: Optional[pulumi.Input[bool]] = None,
                 excludes_pattern: Optional[pulumi.Input[str]] = None,
                 force_nuget_authentication: Optional[pulumi.Input[bool]] = None,
                 handle_releases: Optional[pulumi.Input[bool]] = None,
                 handle_snapshots: Optional[pulumi.Input[bool]] = None,
                 includes_pattern: Optional[pulumi.Input[str]] = None,
                 max_unique_snapshots: Optional[pulumi.Input[int]] = None,
                 max_unique_tags: Optional[pulumi.Input[int]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 package_type: Optional[pulumi.Input[str]] = None,
                 property_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 repo_layout_ref: Optional[pulumi.Input[str]] = None,
                 snapshot_version_behavior: Optional[pulumi.Input[str]] = None,
                 suppress_pom_consistency_checks: Optional[pulumi.Input[bool]] = None,
                 xray_index: Optional[pulumi.Input[bool]] = None,
                 yum_root_depth: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a LocalRepository resource.
        """
        pulumi.set(__self__, "key", key)
        if archive_browsing_enabled is not None:
            pulumi.set(__self__, "archive_browsing_enabled", archive_browsing_enabled)
        if blacked_out is not None:
            pulumi.set(__self__, "blacked_out", blacked_out)
        if calculate_yum_metadata is not None:
            pulumi.set(__self__, "calculate_yum_metadata", calculate_yum_metadata)
        if checksum_policy_type is not None:
            pulumi.set(__self__, "checksum_policy_type", checksum_policy_type)
        if debian_trivial_layout is not None:
            pulumi.set(__self__, "debian_trivial_layout", debian_trivial_layout)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if docker_api_version is not None:
            pulumi.set(__self__, "docker_api_version", docker_api_version)
        if enable_file_lists_indexing is not None:
            pulumi.set(__self__, "enable_file_lists_indexing", enable_file_lists_indexing)
        if excludes_pattern is not None:
            pulumi.set(__self__, "excludes_pattern", excludes_pattern)
        if force_nuget_authentication is not None:
            pulumi.set(__self__, "force_nuget_authentication", force_nuget_authentication)
        if handle_releases is not None:
            pulumi.set(__self__, "handle_releases", handle_releases)
        if handle_snapshots is not None:
            pulumi.set(__self__, "handle_snapshots", handle_snapshots)
        if includes_pattern is not None:
            pulumi.set(__self__, "includes_pattern", includes_pattern)
        if max_unique_snapshots is not None:
            pulumi.set(__self__, "max_unique_snapshots", max_unique_snapshots)
        if max_unique_tags is not None:
            pulumi.set(__self__, "max_unique_tags", max_unique_tags)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if package_type is not None:
            pulumi.set(__self__, "package_type", package_type)
        if property_sets is not None:
            pulumi.set(__self__, "property_sets", property_sets)
        if repo_layout_ref is not None:
            pulumi.set(__self__, "repo_layout_ref", repo_layout_ref)
        if snapshot_version_behavior is not None:
            pulumi.set(__self__, "snapshot_version_behavior", snapshot_version_behavior)
        if suppress_pom_consistency_checks is not None:
            pulumi.set(__self__, "suppress_pom_consistency_checks", suppress_pom_consistency_checks)
        if xray_index is not None:
            pulumi.set(__self__, "xray_index", xray_index)
        if yum_root_depth is not None:
            pulumi.set(__self__, "yum_root_depth", yum_root_depth)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="archiveBrowsingEnabled")
    def archive_browsing_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "archive_browsing_enabled")

    @archive_browsing_enabled.setter
    def archive_browsing_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "archive_browsing_enabled", value)

    @property
    @pulumi.getter(name="blackedOut")
    def blacked_out(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "blacked_out")

    @blacked_out.setter
    def blacked_out(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "blacked_out", value)

    @property
    @pulumi.getter(name="calculateYumMetadata")
    def calculate_yum_metadata(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "calculate_yum_metadata")

    @calculate_yum_metadata.setter
    def calculate_yum_metadata(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "calculate_yum_metadata", value)

    @property
    @pulumi.getter(name="checksumPolicyType")
    def checksum_policy_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "checksum_policy_type")

    @checksum_policy_type.setter
    def checksum_policy_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "checksum_policy_type", value)

    @property
    @pulumi.getter(name="debianTrivialLayout")
    def debian_trivial_layout(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "debian_trivial_layout")

    @debian_trivial_layout.setter
    def debian_trivial_layout(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debian_trivial_layout", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dockerApiVersion")
    def docker_api_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "docker_api_version")

    @docker_api_version.setter
    def docker_api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_api_version", value)

    @property
    @pulumi.getter(name="enableFileListsIndexing")
    def enable_file_lists_indexing(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_file_lists_indexing")

    @enable_file_lists_indexing.setter
    def enable_file_lists_indexing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_file_lists_indexing", value)

    @property
    @pulumi.getter(name="excludesPattern")
    def excludes_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "excludes_pattern")

    @excludes_pattern.setter
    def excludes_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "excludes_pattern", value)

    @property
    @pulumi.getter(name="forceNugetAuthentication")
    def force_nuget_authentication(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "force_nuget_authentication")

    @force_nuget_authentication.setter
    def force_nuget_authentication(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_nuget_authentication", value)

    @property
    @pulumi.getter(name="handleReleases")
    def handle_releases(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "handle_releases")

    @handle_releases.setter
    def handle_releases(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "handle_releases", value)

    @property
    @pulumi.getter(name="handleSnapshots")
    def handle_snapshots(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "handle_snapshots")

    @handle_snapshots.setter
    def handle_snapshots(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "handle_snapshots", value)

    @property
    @pulumi.getter(name="includesPattern")
    def includes_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "includes_pattern")

    @includes_pattern.setter
    def includes_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "includes_pattern", value)

    @property
    @pulumi.getter(name="maxUniqueSnapshots")
    def max_unique_snapshots(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_unique_snapshots")

    @max_unique_snapshots.setter
    def max_unique_snapshots(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_unique_snapshots", value)

    @property
    @pulumi.getter(name="maxUniqueTags")
    def max_unique_tags(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_unique_tags")

    @max_unique_tags.setter
    def max_unique_tags(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_unique_tags", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter(name="packageType")
    def package_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "package_type")

    @package_type.setter
    def package_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_type", value)

    @property
    @pulumi.getter(name="propertySets")
    def property_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "property_sets")

    @property_sets.setter
    def property_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "property_sets", value)

    @property
    @pulumi.getter(name="repoLayoutRef")
    def repo_layout_ref(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "repo_layout_ref")

    @repo_layout_ref.setter
    def repo_layout_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_layout_ref", value)

    @property
    @pulumi.getter(name="snapshotVersionBehavior")
    def snapshot_version_behavior(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snapshot_version_behavior")

    @snapshot_version_behavior.setter
    def snapshot_version_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_version_behavior", value)

    @property
    @pulumi.getter(name="suppressPomConsistencyChecks")
    def suppress_pom_consistency_checks(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "suppress_pom_consistency_checks")

    @suppress_pom_consistency_checks.setter
    def suppress_pom_consistency_checks(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_pom_consistency_checks", value)

    @property
    @pulumi.getter(name="xrayIndex")
    def xray_index(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "xray_index")

    @xray_index.setter
    def xray_index(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "xray_index", value)

    @property
    @pulumi.getter(name="yumRootDepth")
    def yum_root_depth(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "yum_root_depth")

    @yum_root_depth.setter
    def yum_root_depth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "yum_root_depth", value)


@pulumi.input_type
class _LocalRepositoryState:
    def __init__(__self__, *,
                 archive_browsing_enabled: Optional[pulumi.Input[bool]] = None,
                 blacked_out: Optional[pulumi.Input[bool]] = None,
                 calculate_yum_metadata: Optional[pulumi.Input[bool]] = None,
                 checksum_policy_type: Optional[pulumi.Input[str]] = None,
                 debian_trivial_layout: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 docker_api_version: Optional[pulumi.Input[str]] = None,
                 enable_file_lists_indexing: Optional[pulumi.Input[bool]] = None,
                 excludes_pattern: Optional[pulumi.Input[str]] = None,
                 force_nuget_authentication: Optional[pulumi.Input[bool]] = None,
                 handle_releases: Optional[pulumi.Input[bool]] = None,
                 handle_snapshots: Optional[pulumi.Input[bool]] = None,
                 includes_pattern: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 max_unique_snapshots: Optional[pulumi.Input[int]] = None,
                 max_unique_tags: Optional[pulumi.Input[int]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 package_type: Optional[pulumi.Input[str]] = None,
                 property_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 repo_layout_ref: Optional[pulumi.Input[str]] = None,
                 snapshot_version_behavior: Optional[pulumi.Input[str]] = None,
                 suppress_pom_consistency_checks: Optional[pulumi.Input[bool]] = None,
                 xray_index: Optional[pulumi.Input[bool]] = None,
                 yum_root_depth: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering LocalRepository resources.
        """
        if archive_browsing_enabled is not None:
            pulumi.set(__self__, "archive_browsing_enabled", archive_browsing_enabled)
        if blacked_out is not None:
            pulumi.set(__self__, "blacked_out", blacked_out)
        if calculate_yum_metadata is not None:
            pulumi.set(__self__, "calculate_yum_metadata", calculate_yum_metadata)
        if checksum_policy_type is not None:
            pulumi.set(__self__, "checksum_policy_type", checksum_policy_type)
        if debian_trivial_layout is not None:
            pulumi.set(__self__, "debian_trivial_layout", debian_trivial_layout)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if docker_api_version is not None:
            pulumi.set(__self__, "docker_api_version", docker_api_version)
        if enable_file_lists_indexing is not None:
            pulumi.set(__self__, "enable_file_lists_indexing", enable_file_lists_indexing)
        if excludes_pattern is not None:
            pulumi.set(__self__, "excludes_pattern", excludes_pattern)
        if force_nuget_authentication is not None:
            pulumi.set(__self__, "force_nuget_authentication", force_nuget_authentication)
        if handle_releases is not None:
            pulumi.set(__self__, "handle_releases", handle_releases)
        if handle_snapshots is not None:
            pulumi.set(__self__, "handle_snapshots", handle_snapshots)
        if includes_pattern is not None:
            pulumi.set(__self__, "includes_pattern", includes_pattern)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if max_unique_snapshots is not None:
            pulumi.set(__self__, "max_unique_snapshots", max_unique_snapshots)
        if max_unique_tags is not None:
            pulumi.set(__self__, "max_unique_tags", max_unique_tags)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if package_type is not None:
            pulumi.set(__self__, "package_type", package_type)
        if property_sets is not None:
            pulumi.set(__self__, "property_sets", property_sets)
        if repo_layout_ref is not None:
            pulumi.set(__self__, "repo_layout_ref", repo_layout_ref)
        if snapshot_version_behavior is not None:
            pulumi.set(__self__, "snapshot_version_behavior", snapshot_version_behavior)
        if suppress_pom_consistency_checks is not None:
            pulumi.set(__self__, "suppress_pom_consistency_checks", suppress_pom_consistency_checks)
        if xray_index is not None:
            pulumi.set(__self__, "xray_index", xray_index)
        if yum_root_depth is not None:
            pulumi.set(__self__, "yum_root_depth", yum_root_depth)

    @property
    @pulumi.getter(name="archiveBrowsingEnabled")
    def archive_browsing_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "archive_browsing_enabled")

    @archive_browsing_enabled.setter
    def archive_browsing_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "archive_browsing_enabled", value)

    @property
    @pulumi.getter(name="blackedOut")
    def blacked_out(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "blacked_out")

    @blacked_out.setter
    def blacked_out(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "blacked_out", value)

    @property
    @pulumi.getter(name="calculateYumMetadata")
    def calculate_yum_metadata(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "calculate_yum_metadata")

    @calculate_yum_metadata.setter
    def calculate_yum_metadata(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "calculate_yum_metadata", value)

    @property
    @pulumi.getter(name="checksumPolicyType")
    def checksum_policy_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "checksum_policy_type")

    @checksum_policy_type.setter
    def checksum_policy_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "checksum_policy_type", value)

    @property
    @pulumi.getter(name="debianTrivialLayout")
    def debian_trivial_layout(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "debian_trivial_layout")

    @debian_trivial_layout.setter
    def debian_trivial_layout(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debian_trivial_layout", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dockerApiVersion")
    def docker_api_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "docker_api_version")

    @docker_api_version.setter
    def docker_api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_api_version", value)

    @property
    @pulumi.getter(name="enableFileListsIndexing")
    def enable_file_lists_indexing(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_file_lists_indexing")

    @enable_file_lists_indexing.setter
    def enable_file_lists_indexing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_file_lists_indexing", value)

    @property
    @pulumi.getter(name="excludesPattern")
    def excludes_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "excludes_pattern")

    @excludes_pattern.setter
    def excludes_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "excludes_pattern", value)

    @property
    @pulumi.getter(name="forceNugetAuthentication")
    def force_nuget_authentication(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "force_nuget_authentication")

    @force_nuget_authentication.setter
    def force_nuget_authentication(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_nuget_authentication", value)

    @property
    @pulumi.getter(name="handleReleases")
    def handle_releases(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "handle_releases")

    @handle_releases.setter
    def handle_releases(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "handle_releases", value)

    @property
    @pulumi.getter(name="handleSnapshots")
    def handle_snapshots(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "handle_snapshots")

    @handle_snapshots.setter
    def handle_snapshots(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "handle_snapshots", value)

    @property
    @pulumi.getter(name="includesPattern")
    def includes_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "includes_pattern")

    @includes_pattern.setter
    def includes_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "includes_pattern", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="maxUniqueSnapshots")
    def max_unique_snapshots(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_unique_snapshots")

    @max_unique_snapshots.setter
    def max_unique_snapshots(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_unique_snapshots", value)

    @property
    @pulumi.getter(name="maxUniqueTags")
    def max_unique_tags(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_unique_tags")

    @max_unique_tags.setter
    def max_unique_tags(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_unique_tags", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter(name="packageType")
    def package_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "package_type")

    @package_type.setter
    def package_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_type", value)

    @property
    @pulumi.getter(name="propertySets")
    def property_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "property_sets")

    @property_sets.setter
    def property_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "property_sets", value)

    @property
    @pulumi.getter(name="repoLayoutRef")
    def repo_layout_ref(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "repo_layout_ref")

    @repo_layout_ref.setter
    def repo_layout_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_layout_ref", value)

    @property
    @pulumi.getter(name="snapshotVersionBehavior")
    def snapshot_version_behavior(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snapshot_version_behavior")

    @snapshot_version_behavior.setter
    def snapshot_version_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_version_behavior", value)

    @property
    @pulumi.getter(name="suppressPomConsistencyChecks")
    def suppress_pom_consistency_checks(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "suppress_pom_consistency_checks")

    @suppress_pom_consistency_checks.setter
    def suppress_pom_consistency_checks(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_pom_consistency_checks", value)

    @property
    @pulumi.getter(name="xrayIndex")
    def xray_index(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "xray_index")

    @xray_index.setter
    def xray_index(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "xray_index", value)

    @property
    @pulumi.getter(name="yumRootDepth")
    def yum_root_depth(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "yum_root_depth")

    @yum_root_depth.setter
    def yum_root_depth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "yum_root_depth", value)


class LocalRepository(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 archive_browsing_enabled: Optional[pulumi.Input[bool]] = None,
                 blacked_out: Optional[pulumi.Input[bool]] = None,
                 calculate_yum_metadata: Optional[pulumi.Input[bool]] = None,
                 checksum_policy_type: Optional[pulumi.Input[str]] = None,
                 debian_trivial_layout: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 docker_api_version: Optional[pulumi.Input[str]] = None,
                 enable_file_lists_indexing: Optional[pulumi.Input[bool]] = None,
                 excludes_pattern: Optional[pulumi.Input[str]] = None,
                 force_nuget_authentication: Optional[pulumi.Input[bool]] = None,
                 handle_releases: Optional[pulumi.Input[bool]] = None,
                 handle_snapshots: Optional[pulumi.Input[bool]] = None,
                 includes_pattern: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 max_unique_snapshots: Optional[pulumi.Input[int]] = None,
                 max_unique_tags: Optional[pulumi.Input[int]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 package_type: Optional[pulumi.Input[str]] = None,
                 property_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 repo_layout_ref: Optional[pulumi.Input[str]] = None,
                 snapshot_version_behavior: Optional[pulumi.Input[str]] = None,
                 suppress_pom_consistency_checks: Optional[pulumi.Input[bool]] = None,
                 xray_index: Optional[pulumi.Input[bool]] = None,
                 yum_root_depth: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        ## # Artifactory Local Repository Resource

        Provides an Artifactory local repository resource. This can be used to create and manage Artifactory local repositories.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_artifactory as artifactory

        # Create a new Artifactory local repository called my-local
        my_local = artifactory.LocalRepository("my-local",
            key="my-local",
            package_type="npm")
        ```

        ## Import

        Local repositories can be imported using their name, e.g.

        ```sh
         $ pulumi import artifactory:index/localRepository:LocalRepository my-local my-local
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LocalRepositoryArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## # Artifactory Local Repository Resource

        Provides an Artifactory local repository resource. This can be used to create and manage Artifactory local repositories.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_artifactory as artifactory

        # Create a new Artifactory local repository called my-local
        my_local = artifactory.LocalRepository("my-local",
            key="my-local",
            package_type="npm")
        ```

        ## Import

        Local repositories can be imported using their name, e.g.

        ```sh
         $ pulumi import artifactory:index/localRepository:LocalRepository my-local my-local
        ```

        :param str resource_name: The name of the resource.
        :param LocalRepositoryArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LocalRepositoryArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 archive_browsing_enabled: Optional[pulumi.Input[bool]] = None,
                 blacked_out: Optional[pulumi.Input[bool]] = None,
                 calculate_yum_metadata: Optional[pulumi.Input[bool]] = None,
                 checksum_policy_type: Optional[pulumi.Input[str]] = None,
                 debian_trivial_layout: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 docker_api_version: Optional[pulumi.Input[str]] = None,
                 enable_file_lists_indexing: Optional[pulumi.Input[bool]] = None,
                 excludes_pattern: Optional[pulumi.Input[str]] = None,
                 force_nuget_authentication: Optional[pulumi.Input[bool]] = None,
                 handle_releases: Optional[pulumi.Input[bool]] = None,
                 handle_snapshots: Optional[pulumi.Input[bool]] = None,
                 includes_pattern: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 max_unique_snapshots: Optional[pulumi.Input[int]] = None,
                 max_unique_tags: Optional[pulumi.Input[int]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 package_type: Optional[pulumi.Input[str]] = None,
                 property_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 repo_layout_ref: Optional[pulumi.Input[str]] = None,
                 snapshot_version_behavior: Optional[pulumi.Input[str]] = None,
                 suppress_pom_consistency_checks: Optional[pulumi.Input[bool]] = None,
                 xray_index: Optional[pulumi.Input[bool]] = None,
                 yum_root_depth: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LocalRepositoryArgs.__new__(LocalRepositoryArgs)

            __props__.__dict__["archive_browsing_enabled"] = archive_browsing_enabled
            __props__.__dict__["blacked_out"] = blacked_out
            __props__.__dict__["calculate_yum_metadata"] = calculate_yum_metadata
            __props__.__dict__["checksum_policy_type"] = checksum_policy_type
            __props__.__dict__["debian_trivial_layout"] = debian_trivial_layout
            __props__.__dict__["description"] = description
            __props__.__dict__["docker_api_version"] = docker_api_version
            __props__.__dict__["enable_file_lists_indexing"] = enable_file_lists_indexing
            __props__.__dict__["excludes_pattern"] = excludes_pattern
            __props__.__dict__["force_nuget_authentication"] = force_nuget_authentication
            __props__.__dict__["handle_releases"] = handle_releases
            __props__.__dict__["handle_snapshots"] = handle_snapshots
            __props__.__dict__["includes_pattern"] = includes_pattern
            if key is None and not opts.urn:
                raise TypeError("Missing required property 'key'")
            __props__.__dict__["key"] = key
            __props__.__dict__["max_unique_snapshots"] = max_unique_snapshots
            __props__.__dict__["max_unique_tags"] = max_unique_tags
            __props__.__dict__["notes"] = notes
            __props__.__dict__["package_type"] = package_type
            __props__.__dict__["property_sets"] = property_sets
            __props__.__dict__["repo_layout_ref"] = repo_layout_ref
            __props__.__dict__["snapshot_version_behavior"] = snapshot_version_behavior
            __props__.__dict__["suppress_pom_consistency_checks"] = suppress_pom_consistency_checks
            __props__.__dict__["xray_index"] = xray_index
            __props__.__dict__["yum_root_depth"] = yum_root_depth
        super(LocalRepository, __self__).__init__(
            'artifactory:index/localRepository:LocalRepository',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            archive_browsing_enabled: Optional[pulumi.Input[bool]] = None,
            blacked_out: Optional[pulumi.Input[bool]] = None,
            calculate_yum_metadata: Optional[pulumi.Input[bool]] = None,
            checksum_policy_type: Optional[pulumi.Input[str]] = None,
            debian_trivial_layout: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            docker_api_version: Optional[pulumi.Input[str]] = None,
            enable_file_lists_indexing: Optional[pulumi.Input[bool]] = None,
            excludes_pattern: Optional[pulumi.Input[str]] = None,
            force_nuget_authentication: Optional[pulumi.Input[bool]] = None,
            handle_releases: Optional[pulumi.Input[bool]] = None,
            handle_snapshots: Optional[pulumi.Input[bool]] = None,
            includes_pattern: Optional[pulumi.Input[str]] = None,
            key: Optional[pulumi.Input[str]] = None,
            max_unique_snapshots: Optional[pulumi.Input[int]] = None,
            max_unique_tags: Optional[pulumi.Input[int]] = None,
            notes: Optional[pulumi.Input[str]] = None,
            package_type: Optional[pulumi.Input[str]] = None,
            property_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            repo_layout_ref: Optional[pulumi.Input[str]] = None,
            snapshot_version_behavior: Optional[pulumi.Input[str]] = None,
            suppress_pom_consistency_checks: Optional[pulumi.Input[bool]] = None,
            xray_index: Optional[pulumi.Input[bool]] = None,
            yum_root_depth: Optional[pulumi.Input[int]] = None) -> 'LocalRepository':
        """
        Get an existing LocalRepository resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LocalRepositoryState.__new__(_LocalRepositoryState)

        __props__.__dict__["archive_browsing_enabled"] = archive_browsing_enabled
        __props__.__dict__["blacked_out"] = blacked_out
        __props__.__dict__["calculate_yum_metadata"] = calculate_yum_metadata
        __props__.__dict__["checksum_policy_type"] = checksum_policy_type
        __props__.__dict__["debian_trivial_layout"] = debian_trivial_layout
        __props__.__dict__["description"] = description
        __props__.__dict__["docker_api_version"] = docker_api_version
        __props__.__dict__["enable_file_lists_indexing"] = enable_file_lists_indexing
        __props__.__dict__["excludes_pattern"] = excludes_pattern
        __props__.__dict__["force_nuget_authentication"] = force_nuget_authentication
        __props__.__dict__["handle_releases"] = handle_releases
        __props__.__dict__["handle_snapshots"] = handle_snapshots
        __props__.__dict__["includes_pattern"] = includes_pattern
        __props__.__dict__["key"] = key
        __props__.__dict__["max_unique_snapshots"] = max_unique_snapshots
        __props__.__dict__["max_unique_tags"] = max_unique_tags
        __props__.__dict__["notes"] = notes
        __props__.__dict__["package_type"] = package_type
        __props__.__dict__["property_sets"] = property_sets
        __props__.__dict__["repo_layout_ref"] = repo_layout_ref
        __props__.__dict__["snapshot_version_behavior"] = snapshot_version_behavior
        __props__.__dict__["suppress_pom_consistency_checks"] = suppress_pom_consistency_checks
        __props__.__dict__["xray_index"] = xray_index
        __props__.__dict__["yum_root_depth"] = yum_root_depth
        return LocalRepository(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="archiveBrowsingEnabled")
    def archive_browsing_enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "archive_browsing_enabled")

    @property
    @pulumi.getter(name="blackedOut")
    def blacked_out(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "blacked_out")

    @property
    @pulumi.getter(name="calculateYumMetadata")
    def calculate_yum_metadata(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "calculate_yum_metadata")

    @property
    @pulumi.getter(name="checksumPolicyType")
    def checksum_policy_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "checksum_policy_type")

    @property
    @pulumi.getter(name="debianTrivialLayout")
    def debian_trivial_layout(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "debian_trivial_layout")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dockerApiVersion")
    def docker_api_version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "docker_api_version")

    @property
    @pulumi.getter(name="enableFileListsIndexing")
    def enable_file_lists_indexing(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "enable_file_lists_indexing")

    @property
    @pulumi.getter(name="excludesPattern")
    def excludes_pattern(self) -> pulumi.Output[str]:
        return pulumi.get(self, "excludes_pattern")

    @property
    @pulumi.getter(name="forceNugetAuthentication")
    def force_nuget_authentication(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "force_nuget_authentication")

    @property
    @pulumi.getter(name="handleReleases")
    def handle_releases(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "handle_releases")

    @property
    @pulumi.getter(name="handleSnapshots")
    def handle_snapshots(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "handle_snapshots")

    @property
    @pulumi.getter(name="includesPattern")
    def includes_pattern(self) -> pulumi.Output[str]:
        return pulumi.get(self, "includes_pattern")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="maxUniqueSnapshots")
    def max_unique_snapshots(self) -> pulumi.Output[int]:
        return pulumi.get(self, "max_unique_snapshots")

    @property
    @pulumi.getter(name="maxUniqueTags")
    def max_unique_tags(self) -> pulumi.Output[int]:
        return pulumi.get(self, "max_unique_tags")

    @property
    @pulumi.getter
    def notes(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter(name="packageType")
    def package_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "package_type")

    @property
    @pulumi.getter(name="propertySets")
    def property_sets(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "property_sets")

    @property
    @pulumi.getter(name="repoLayoutRef")
    def repo_layout_ref(self) -> pulumi.Output[str]:
        return pulumi.get(self, "repo_layout_ref")

    @property
    @pulumi.getter(name="snapshotVersionBehavior")
    def snapshot_version_behavior(self) -> pulumi.Output[str]:
        return pulumi.get(self, "snapshot_version_behavior")

    @property
    @pulumi.getter(name="suppressPomConsistencyChecks")
    def suppress_pom_consistency_checks(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "suppress_pom_consistency_checks")

    @property
    @pulumi.getter(name="xrayIndex")
    def xray_index(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "xray_index")

    @property
    @pulumi.getter(name="yumRootDepth")
    def yum_root_depth(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "yum_root_depth")

