# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RemoteRepositoryArgs', 'RemoteRepository']

@pulumi.input_type
class RemoteRepositoryArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 url: pulumi.Input[str],
                 allow_any_host_auth: Optional[pulumi.Input[bool]] = None,
                 blacked_out: Optional[pulumi.Input[bool]] = None,
                 block_mismatching_mime_types: Optional[pulumi.Input[bool]] = None,
                 bower_registry_url: Optional[pulumi.Input[str]] = None,
                 bypass_head_requests: Optional[pulumi.Input[bool]] = None,
                 client_tls_certificate: Optional[pulumi.Input[str]] = None,
                 content_synchronisation: Optional[pulumi.Input['RemoteRepositoryContentSynchronisationArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 download_context_path: Optional[pulumi.Input[str]] = None,
                 enable_cookie_management: Optional[pulumi.Input[bool]] = None,
                 enable_token_authentication: Optional[pulumi.Input[bool]] = None,
                 excludes_pattern: Optional[pulumi.Input[str]] = None,
                 feed_context_path: Optional[pulumi.Input[str]] = None,
                 fetch_jars_eagerly: Optional[pulumi.Input[bool]] = None,
                 fetch_sources_eagerly: Optional[pulumi.Input[bool]] = None,
                 force_nuget_authentication: Optional[pulumi.Input[bool]] = None,
                 handle_releases: Optional[pulumi.Input[bool]] = None,
                 handle_snapshots: Optional[pulumi.Input[bool]] = None,
                 hard_fail: Optional[pulumi.Input[bool]] = None,
                 includes_pattern: Optional[pulumi.Input[str]] = None,
                 local_address: Optional[pulumi.Input[str]] = None,
                 max_unique_snapshots: Optional[pulumi.Input[int]] = None,
                 missed_cache_period_seconds: Optional[pulumi.Input[int]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 offline: Optional[pulumi.Input[bool]] = None,
                 package_type: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 propagate_query_params: Optional[pulumi.Input[bool]] = None,
                 property_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 proxy: Optional[pulumi.Input[str]] = None,
                 pypi_registry_url: Optional[pulumi.Input[str]] = None,
                 remote_repo_checksum_policy_type: Optional[pulumi.Input[str]] = None,
                 repo_layout_ref: Optional[pulumi.Input[str]] = None,
                 retrieval_cache_period_seconds: Optional[pulumi.Input[int]] = None,
                 share_configuration: Optional[pulumi.Input[bool]] = None,
                 socket_timeout_millis: Optional[pulumi.Input[int]] = None,
                 store_artifacts_locally: Optional[pulumi.Input[bool]] = None,
                 suppress_pom_consistency_checks: Optional[pulumi.Input[bool]] = None,
                 synchronize_properties: Optional[pulumi.Input[bool]] = None,
                 unused_artifacts_cleanup_period_hours: Optional[pulumi.Input[int]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 v3_feed_url: Optional[pulumi.Input[str]] = None,
                 vcs_git_download_url: Optional[pulumi.Input[str]] = None,
                 vcs_git_provider: Optional[pulumi.Input[str]] = None,
                 vcs_type: Optional[pulumi.Input[str]] = None,
                 xray_index: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a RemoteRepository resource.
        :param pulumi.Input[str] password: Requires password encryption to be turned off `POST /api/system/decrypt`
        :param pulumi.Input[int] retrieval_cache_period_seconds: The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "url", url)
        if allow_any_host_auth is not None:
            pulumi.set(__self__, "allow_any_host_auth", allow_any_host_auth)
        if blacked_out is not None:
            pulumi.set(__self__, "blacked_out", blacked_out)
        if block_mismatching_mime_types is not None:
            pulumi.set(__self__, "block_mismatching_mime_types", block_mismatching_mime_types)
        if bower_registry_url is not None:
            pulumi.set(__self__, "bower_registry_url", bower_registry_url)
        if bypass_head_requests is not None:
            pulumi.set(__self__, "bypass_head_requests", bypass_head_requests)
        if client_tls_certificate is not None:
            pulumi.set(__self__, "client_tls_certificate", client_tls_certificate)
        if content_synchronisation is not None:
            pulumi.set(__self__, "content_synchronisation", content_synchronisation)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if download_context_path is not None:
            pulumi.set(__self__, "download_context_path", download_context_path)
        if enable_cookie_management is not None:
            pulumi.set(__self__, "enable_cookie_management", enable_cookie_management)
        if enable_token_authentication is not None:
            pulumi.set(__self__, "enable_token_authentication", enable_token_authentication)
        if excludes_pattern is not None:
            pulumi.set(__self__, "excludes_pattern", excludes_pattern)
        if feed_context_path is not None:
            pulumi.set(__self__, "feed_context_path", feed_context_path)
        if fetch_jars_eagerly is not None:
            pulumi.set(__self__, "fetch_jars_eagerly", fetch_jars_eagerly)
        if fetch_sources_eagerly is not None:
            pulumi.set(__self__, "fetch_sources_eagerly", fetch_sources_eagerly)
        if force_nuget_authentication is not None:
            pulumi.set(__self__, "force_nuget_authentication", force_nuget_authentication)
        if handle_releases is not None:
            pulumi.set(__self__, "handle_releases", handle_releases)
        if handle_snapshots is not None:
            pulumi.set(__self__, "handle_snapshots", handle_snapshots)
        if hard_fail is not None:
            pulumi.set(__self__, "hard_fail", hard_fail)
        if includes_pattern is not None:
            pulumi.set(__self__, "includes_pattern", includes_pattern)
        if local_address is not None:
            pulumi.set(__self__, "local_address", local_address)
        if max_unique_snapshots is not None:
            pulumi.set(__self__, "max_unique_snapshots", max_unique_snapshots)
        if missed_cache_period_seconds is not None:
            pulumi.set(__self__, "missed_cache_period_seconds", missed_cache_period_seconds)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if offline is not None:
            pulumi.set(__self__, "offline", offline)
        if package_type is not None:
            pulumi.set(__self__, "package_type", package_type)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if propagate_query_params is not None:
            pulumi.set(__self__, "propagate_query_params", propagate_query_params)
        if property_sets is not None:
            pulumi.set(__self__, "property_sets", property_sets)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if pypi_registry_url is not None:
            pulumi.set(__self__, "pypi_registry_url", pypi_registry_url)
        if remote_repo_checksum_policy_type is not None:
            pulumi.set(__self__, "remote_repo_checksum_policy_type", remote_repo_checksum_policy_type)
        if repo_layout_ref is not None:
            pulumi.set(__self__, "repo_layout_ref", repo_layout_ref)
        if retrieval_cache_period_seconds is not None:
            pulumi.set(__self__, "retrieval_cache_period_seconds", retrieval_cache_period_seconds)
        if share_configuration is not None:
            pulumi.set(__self__, "share_configuration", share_configuration)
        if socket_timeout_millis is not None:
            pulumi.set(__self__, "socket_timeout_millis", socket_timeout_millis)
        if store_artifacts_locally is not None:
            pulumi.set(__self__, "store_artifacts_locally", store_artifacts_locally)
        if suppress_pom_consistency_checks is not None:
            pulumi.set(__self__, "suppress_pom_consistency_checks", suppress_pom_consistency_checks)
        if synchronize_properties is not None:
            pulumi.set(__self__, "synchronize_properties", synchronize_properties)
        if unused_artifacts_cleanup_period_hours is not None:
            pulumi.set(__self__, "unused_artifacts_cleanup_period_hours", unused_artifacts_cleanup_period_hours)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if v3_feed_url is not None:
            pulumi.set(__self__, "v3_feed_url", v3_feed_url)
        if vcs_git_download_url is not None:
            pulumi.set(__self__, "vcs_git_download_url", vcs_git_download_url)
        if vcs_git_provider is not None:
            pulumi.set(__self__, "vcs_git_provider", vcs_git_provider)
        if vcs_type is not None:
            pulumi.set(__self__, "vcs_type", vcs_type)
        if xray_index is not None:
            pulumi.set(__self__, "xray_index", xray_index)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="allowAnyHostAuth")
    def allow_any_host_auth(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_any_host_auth")

    @allow_any_host_auth.setter
    def allow_any_host_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_any_host_auth", value)

    @property
    @pulumi.getter(name="blackedOut")
    def blacked_out(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "blacked_out")

    @blacked_out.setter
    def blacked_out(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "blacked_out", value)

    @property
    @pulumi.getter(name="blockMismatchingMimeTypes")
    def block_mismatching_mime_types(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "block_mismatching_mime_types")

    @block_mismatching_mime_types.setter
    def block_mismatching_mime_types(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "block_mismatching_mime_types", value)

    @property
    @pulumi.getter(name="bowerRegistryUrl")
    def bower_registry_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bower_registry_url")

    @bower_registry_url.setter
    def bower_registry_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bower_registry_url", value)

    @property
    @pulumi.getter(name="bypassHeadRequests")
    def bypass_head_requests(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "bypass_head_requests")

    @bypass_head_requests.setter
    def bypass_head_requests(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bypass_head_requests", value)

    @property
    @pulumi.getter(name="clientTlsCertificate")
    def client_tls_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_tls_certificate")

    @client_tls_certificate.setter
    def client_tls_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_tls_certificate", value)

    @property
    @pulumi.getter(name="contentSynchronisation")
    def content_synchronisation(self) -> Optional[pulumi.Input['RemoteRepositoryContentSynchronisationArgs']]:
        return pulumi.get(self, "content_synchronisation")

    @content_synchronisation.setter
    def content_synchronisation(self, value: Optional[pulumi.Input['RemoteRepositoryContentSynchronisationArgs']]):
        pulumi.set(self, "content_synchronisation", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="downloadContextPath")
    def download_context_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "download_context_path")

    @download_context_path.setter
    def download_context_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "download_context_path", value)

    @property
    @pulumi.getter(name="enableCookieManagement")
    def enable_cookie_management(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_cookie_management")

    @enable_cookie_management.setter
    def enable_cookie_management(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_cookie_management", value)

    @property
    @pulumi.getter(name="enableTokenAuthentication")
    def enable_token_authentication(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_token_authentication")

    @enable_token_authentication.setter
    def enable_token_authentication(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_token_authentication", value)

    @property
    @pulumi.getter(name="excludesPattern")
    def excludes_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "excludes_pattern")

    @excludes_pattern.setter
    def excludes_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "excludes_pattern", value)

    @property
    @pulumi.getter(name="feedContextPath")
    def feed_context_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_context_path")

    @feed_context_path.setter
    def feed_context_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_context_path", value)

    @property
    @pulumi.getter(name="fetchJarsEagerly")
    def fetch_jars_eagerly(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fetch_jars_eagerly")

    @fetch_jars_eagerly.setter
    def fetch_jars_eagerly(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_jars_eagerly", value)

    @property
    @pulumi.getter(name="fetchSourcesEagerly")
    def fetch_sources_eagerly(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fetch_sources_eagerly")

    @fetch_sources_eagerly.setter
    def fetch_sources_eagerly(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_sources_eagerly", value)

    @property
    @pulumi.getter(name="forceNugetAuthentication")
    def force_nuget_authentication(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "force_nuget_authentication")

    @force_nuget_authentication.setter
    def force_nuget_authentication(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_nuget_authentication", value)

    @property
    @pulumi.getter(name="handleReleases")
    def handle_releases(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "handle_releases")

    @handle_releases.setter
    def handle_releases(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "handle_releases", value)

    @property
    @pulumi.getter(name="handleSnapshots")
    def handle_snapshots(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "handle_snapshots")

    @handle_snapshots.setter
    def handle_snapshots(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "handle_snapshots", value)

    @property
    @pulumi.getter(name="hardFail")
    def hard_fail(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hard_fail")

    @hard_fail.setter
    def hard_fail(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hard_fail", value)

    @property
    @pulumi.getter(name="includesPattern")
    def includes_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "includes_pattern")

    @includes_pattern.setter
    def includes_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "includes_pattern", value)

    @property
    @pulumi.getter(name="localAddress")
    def local_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_address")

    @local_address.setter
    def local_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_address", value)

    @property
    @pulumi.getter(name="maxUniqueSnapshots")
    def max_unique_snapshots(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_unique_snapshots")

    @max_unique_snapshots.setter
    def max_unique_snapshots(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_unique_snapshots", value)

    @property
    @pulumi.getter(name="missedCachePeriodSeconds")
    def missed_cache_period_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "missed_cache_period_seconds")

    @missed_cache_period_seconds.setter
    def missed_cache_period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "missed_cache_period_seconds", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def offline(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "offline")

    @offline.setter
    def offline(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "offline", value)

    @property
    @pulumi.getter(name="packageType")
    def package_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "package_type")

    @package_type.setter
    def package_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_type", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Requires password encryption to be turned off `POST /api/system/decrypt`
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="propagateQueryParams")
    def propagate_query_params(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "propagate_query_params")

    @propagate_query_params.setter
    def propagate_query_params(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "propagate_query_params", value)

    @property
    @pulumi.getter(name="propertySets")
    def property_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "property_sets")

    @property_sets.setter
    def property_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "property_sets", value)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter(name="pypiRegistryUrl")
    def pypi_registry_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pypi_registry_url")

    @pypi_registry_url.setter
    def pypi_registry_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pypi_registry_url", value)

    @property
    @pulumi.getter(name="remoteRepoChecksumPolicyType")
    def remote_repo_checksum_policy_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_repo_checksum_policy_type")

    @remote_repo_checksum_policy_type.setter
    def remote_repo_checksum_policy_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_repo_checksum_policy_type", value)

    @property
    @pulumi.getter(name="repoLayoutRef")
    def repo_layout_ref(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "repo_layout_ref")

    @repo_layout_ref.setter
    def repo_layout_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_layout_ref", value)

    @property
    @pulumi.getter(name="retrievalCachePeriodSeconds")
    def retrieval_cache_period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.
        """
        return pulumi.get(self, "retrieval_cache_period_seconds")

    @retrieval_cache_period_seconds.setter
    def retrieval_cache_period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retrieval_cache_period_seconds", value)

    @property
    @pulumi.getter(name="shareConfiguration")
    def share_configuration(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "share_configuration")

    @share_configuration.setter
    def share_configuration(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "share_configuration", value)

    @property
    @pulumi.getter(name="socketTimeoutMillis")
    def socket_timeout_millis(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "socket_timeout_millis")

    @socket_timeout_millis.setter
    def socket_timeout_millis(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "socket_timeout_millis", value)

    @property
    @pulumi.getter(name="storeArtifactsLocally")
    def store_artifacts_locally(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "store_artifacts_locally")

    @store_artifacts_locally.setter
    def store_artifacts_locally(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "store_artifacts_locally", value)

    @property
    @pulumi.getter(name="suppressPomConsistencyChecks")
    def suppress_pom_consistency_checks(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "suppress_pom_consistency_checks")

    @suppress_pom_consistency_checks.setter
    def suppress_pom_consistency_checks(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_pom_consistency_checks", value)

    @property
    @pulumi.getter(name="synchronizeProperties")
    def synchronize_properties(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "synchronize_properties")

    @synchronize_properties.setter
    def synchronize_properties(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "synchronize_properties", value)

    @property
    @pulumi.getter(name="unusedArtifactsCleanupPeriodHours")
    def unused_artifacts_cleanup_period_hours(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "unused_artifacts_cleanup_period_hours")

    @unused_artifacts_cleanup_period_hours.setter
    def unused_artifacts_cleanup_period_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unused_artifacts_cleanup_period_hours", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="v3FeedUrl")
    def v3_feed_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "v3_feed_url")

    @v3_feed_url.setter
    def v3_feed_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v3_feed_url", value)

    @property
    @pulumi.getter(name="vcsGitDownloadUrl")
    def vcs_git_download_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vcs_git_download_url")

    @vcs_git_download_url.setter
    def vcs_git_download_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vcs_git_download_url", value)

    @property
    @pulumi.getter(name="vcsGitProvider")
    def vcs_git_provider(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vcs_git_provider")

    @vcs_git_provider.setter
    def vcs_git_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vcs_git_provider", value)

    @property
    @pulumi.getter(name="vcsType")
    def vcs_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vcs_type")

    @vcs_type.setter
    def vcs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vcs_type", value)

    @property
    @pulumi.getter(name="xrayIndex")
    def xray_index(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "xray_index")

    @xray_index.setter
    def xray_index(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "xray_index", value)


@pulumi.input_type
class _RemoteRepositoryState:
    def __init__(__self__, *,
                 allow_any_host_auth: Optional[pulumi.Input[bool]] = None,
                 blacked_out: Optional[pulumi.Input[bool]] = None,
                 block_mismatching_mime_types: Optional[pulumi.Input[bool]] = None,
                 bower_registry_url: Optional[pulumi.Input[str]] = None,
                 bypass_head_requests: Optional[pulumi.Input[bool]] = None,
                 client_tls_certificate: Optional[pulumi.Input[str]] = None,
                 content_synchronisation: Optional[pulumi.Input['RemoteRepositoryContentSynchronisationArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 download_context_path: Optional[pulumi.Input[str]] = None,
                 enable_cookie_management: Optional[pulumi.Input[bool]] = None,
                 enable_token_authentication: Optional[pulumi.Input[bool]] = None,
                 excludes_pattern: Optional[pulumi.Input[str]] = None,
                 feed_context_path: Optional[pulumi.Input[str]] = None,
                 fetch_jars_eagerly: Optional[pulumi.Input[bool]] = None,
                 fetch_sources_eagerly: Optional[pulumi.Input[bool]] = None,
                 force_nuget_authentication: Optional[pulumi.Input[bool]] = None,
                 handle_releases: Optional[pulumi.Input[bool]] = None,
                 handle_snapshots: Optional[pulumi.Input[bool]] = None,
                 hard_fail: Optional[pulumi.Input[bool]] = None,
                 includes_pattern: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 local_address: Optional[pulumi.Input[str]] = None,
                 max_unique_snapshots: Optional[pulumi.Input[int]] = None,
                 missed_cache_period_seconds: Optional[pulumi.Input[int]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 offline: Optional[pulumi.Input[bool]] = None,
                 package_type: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 propagate_query_params: Optional[pulumi.Input[bool]] = None,
                 property_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 proxy: Optional[pulumi.Input[str]] = None,
                 pypi_registry_url: Optional[pulumi.Input[str]] = None,
                 remote_repo_checksum_policy_type: Optional[pulumi.Input[str]] = None,
                 repo_layout_ref: Optional[pulumi.Input[str]] = None,
                 retrieval_cache_period_seconds: Optional[pulumi.Input[int]] = None,
                 share_configuration: Optional[pulumi.Input[bool]] = None,
                 socket_timeout_millis: Optional[pulumi.Input[int]] = None,
                 store_artifacts_locally: Optional[pulumi.Input[bool]] = None,
                 suppress_pom_consistency_checks: Optional[pulumi.Input[bool]] = None,
                 synchronize_properties: Optional[pulumi.Input[bool]] = None,
                 unused_artifacts_cleanup_period_hours: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 v3_feed_url: Optional[pulumi.Input[str]] = None,
                 vcs_git_download_url: Optional[pulumi.Input[str]] = None,
                 vcs_git_provider: Optional[pulumi.Input[str]] = None,
                 vcs_type: Optional[pulumi.Input[str]] = None,
                 xray_index: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering RemoteRepository resources.
        :param pulumi.Input[str] password: Requires password encryption to be turned off `POST /api/system/decrypt`
        :param pulumi.Input[int] retrieval_cache_period_seconds: The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.
        """
        if allow_any_host_auth is not None:
            pulumi.set(__self__, "allow_any_host_auth", allow_any_host_auth)
        if blacked_out is not None:
            pulumi.set(__self__, "blacked_out", blacked_out)
        if block_mismatching_mime_types is not None:
            pulumi.set(__self__, "block_mismatching_mime_types", block_mismatching_mime_types)
        if bower_registry_url is not None:
            pulumi.set(__self__, "bower_registry_url", bower_registry_url)
        if bypass_head_requests is not None:
            pulumi.set(__self__, "bypass_head_requests", bypass_head_requests)
        if client_tls_certificate is not None:
            pulumi.set(__self__, "client_tls_certificate", client_tls_certificate)
        if content_synchronisation is not None:
            pulumi.set(__self__, "content_synchronisation", content_synchronisation)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if download_context_path is not None:
            pulumi.set(__self__, "download_context_path", download_context_path)
        if enable_cookie_management is not None:
            pulumi.set(__self__, "enable_cookie_management", enable_cookie_management)
        if enable_token_authentication is not None:
            pulumi.set(__self__, "enable_token_authentication", enable_token_authentication)
        if excludes_pattern is not None:
            pulumi.set(__self__, "excludes_pattern", excludes_pattern)
        if feed_context_path is not None:
            pulumi.set(__self__, "feed_context_path", feed_context_path)
        if fetch_jars_eagerly is not None:
            pulumi.set(__self__, "fetch_jars_eagerly", fetch_jars_eagerly)
        if fetch_sources_eagerly is not None:
            pulumi.set(__self__, "fetch_sources_eagerly", fetch_sources_eagerly)
        if force_nuget_authentication is not None:
            pulumi.set(__self__, "force_nuget_authentication", force_nuget_authentication)
        if handle_releases is not None:
            pulumi.set(__self__, "handle_releases", handle_releases)
        if handle_snapshots is not None:
            pulumi.set(__self__, "handle_snapshots", handle_snapshots)
        if hard_fail is not None:
            pulumi.set(__self__, "hard_fail", hard_fail)
        if includes_pattern is not None:
            pulumi.set(__self__, "includes_pattern", includes_pattern)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if local_address is not None:
            pulumi.set(__self__, "local_address", local_address)
        if max_unique_snapshots is not None:
            pulumi.set(__self__, "max_unique_snapshots", max_unique_snapshots)
        if missed_cache_period_seconds is not None:
            pulumi.set(__self__, "missed_cache_period_seconds", missed_cache_period_seconds)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if offline is not None:
            pulumi.set(__self__, "offline", offline)
        if package_type is not None:
            pulumi.set(__self__, "package_type", package_type)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if propagate_query_params is not None:
            pulumi.set(__self__, "propagate_query_params", propagate_query_params)
        if property_sets is not None:
            pulumi.set(__self__, "property_sets", property_sets)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if pypi_registry_url is not None:
            pulumi.set(__self__, "pypi_registry_url", pypi_registry_url)
        if remote_repo_checksum_policy_type is not None:
            pulumi.set(__self__, "remote_repo_checksum_policy_type", remote_repo_checksum_policy_type)
        if repo_layout_ref is not None:
            pulumi.set(__self__, "repo_layout_ref", repo_layout_ref)
        if retrieval_cache_period_seconds is not None:
            pulumi.set(__self__, "retrieval_cache_period_seconds", retrieval_cache_period_seconds)
        if share_configuration is not None:
            pulumi.set(__self__, "share_configuration", share_configuration)
        if socket_timeout_millis is not None:
            pulumi.set(__self__, "socket_timeout_millis", socket_timeout_millis)
        if store_artifacts_locally is not None:
            pulumi.set(__self__, "store_artifacts_locally", store_artifacts_locally)
        if suppress_pom_consistency_checks is not None:
            pulumi.set(__self__, "suppress_pom_consistency_checks", suppress_pom_consistency_checks)
        if synchronize_properties is not None:
            pulumi.set(__self__, "synchronize_properties", synchronize_properties)
        if unused_artifacts_cleanup_period_hours is not None:
            pulumi.set(__self__, "unused_artifacts_cleanup_period_hours", unused_artifacts_cleanup_period_hours)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if v3_feed_url is not None:
            pulumi.set(__self__, "v3_feed_url", v3_feed_url)
        if vcs_git_download_url is not None:
            pulumi.set(__self__, "vcs_git_download_url", vcs_git_download_url)
        if vcs_git_provider is not None:
            pulumi.set(__self__, "vcs_git_provider", vcs_git_provider)
        if vcs_type is not None:
            pulumi.set(__self__, "vcs_type", vcs_type)
        if xray_index is not None:
            pulumi.set(__self__, "xray_index", xray_index)

    @property
    @pulumi.getter(name="allowAnyHostAuth")
    def allow_any_host_auth(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_any_host_auth")

    @allow_any_host_auth.setter
    def allow_any_host_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_any_host_auth", value)

    @property
    @pulumi.getter(name="blackedOut")
    def blacked_out(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "blacked_out")

    @blacked_out.setter
    def blacked_out(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "blacked_out", value)

    @property
    @pulumi.getter(name="blockMismatchingMimeTypes")
    def block_mismatching_mime_types(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "block_mismatching_mime_types")

    @block_mismatching_mime_types.setter
    def block_mismatching_mime_types(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "block_mismatching_mime_types", value)

    @property
    @pulumi.getter(name="bowerRegistryUrl")
    def bower_registry_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bower_registry_url")

    @bower_registry_url.setter
    def bower_registry_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bower_registry_url", value)

    @property
    @pulumi.getter(name="bypassHeadRequests")
    def bypass_head_requests(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "bypass_head_requests")

    @bypass_head_requests.setter
    def bypass_head_requests(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bypass_head_requests", value)

    @property
    @pulumi.getter(name="clientTlsCertificate")
    def client_tls_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_tls_certificate")

    @client_tls_certificate.setter
    def client_tls_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_tls_certificate", value)

    @property
    @pulumi.getter(name="contentSynchronisation")
    def content_synchronisation(self) -> Optional[pulumi.Input['RemoteRepositoryContentSynchronisationArgs']]:
        return pulumi.get(self, "content_synchronisation")

    @content_synchronisation.setter
    def content_synchronisation(self, value: Optional[pulumi.Input['RemoteRepositoryContentSynchronisationArgs']]):
        pulumi.set(self, "content_synchronisation", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="downloadContextPath")
    def download_context_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "download_context_path")

    @download_context_path.setter
    def download_context_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "download_context_path", value)

    @property
    @pulumi.getter(name="enableCookieManagement")
    def enable_cookie_management(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_cookie_management")

    @enable_cookie_management.setter
    def enable_cookie_management(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_cookie_management", value)

    @property
    @pulumi.getter(name="enableTokenAuthentication")
    def enable_token_authentication(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_token_authentication")

    @enable_token_authentication.setter
    def enable_token_authentication(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_token_authentication", value)

    @property
    @pulumi.getter(name="excludesPattern")
    def excludes_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "excludes_pattern")

    @excludes_pattern.setter
    def excludes_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "excludes_pattern", value)

    @property
    @pulumi.getter(name="feedContextPath")
    def feed_context_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_context_path")

    @feed_context_path.setter
    def feed_context_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_context_path", value)

    @property
    @pulumi.getter(name="fetchJarsEagerly")
    def fetch_jars_eagerly(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fetch_jars_eagerly")

    @fetch_jars_eagerly.setter
    def fetch_jars_eagerly(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_jars_eagerly", value)

    @property
    @pulumi.getter(name="fetchSourcesEagerly")
    def fetch_sources_eagerly(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fetch_sources_eagerly")

    @fetch_sources_eagerly.setter
    def fetch_sources_eagerly(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_sources_eagerly", value)

    @property
    @pulumi.getter(name="forceNugetAuthentication")
    def force_nuget_authentication(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "force_nuget_authentication")

    @force_nuget_authentication.setter
    def force_nuget_authentication(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_nuget_authentication", value)

    @property
    @pulumi.getter(name="handleReleases")
    def handle_releases(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "handle_releases")

    @handle_releases.setter
    def handle_releases(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "handle_releases", value)

    @property
    @pulumi.getter(name="handleSnapshots")
    def handle_snapshots(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "handle_snapshots")

    @handle_snapshots.setter
    def handle_snapshots(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "handle_snapshots", value)

    @property
    @pulumi.getter(name="hardFail")
    def hard_fail(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hard_fail")

    @hard_fail.setter
    def hard_fail(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hard_fail", value)

    @property
    @pulumi.getter(name="includesPattern")
    def includes_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "includes_pattern")

    @includes_pattern.setter
    def includes_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "includes_pattern", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="localAddress")
    def local_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_address")

    @local_address.setter
    def local_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_address", value)

    @property
    @pulumi.getter(name="maxUniqueSnapshots")
    def max_unique_snapshots(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_unique_snapshots")

    @max_unique_snapshots.setter
    def max_unique_snapshots(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_unique_snapshots", value)

    @property
    @pulumi.getter(name="missedCachePeriodSeconds")
    def missed_cache_period_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "missed_cache_period_seconds")

    @missed_cache_period_seconds.setter
    def missed_cache_period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "missed_cache_period_seconds", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def offline(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "offline")

    @offline.setter
    def offline(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "offline", value)

    @property
    @pulumi.getter(name="packageType")
    def package_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "package_type")

    @package_type.setter
    def package_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_type", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Requires password encryption to be turned off `POST /api/system/decrypt`
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="propagateQueryParams")
    def propagate_query_params(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "propagate_query_params")

    @propagate_query_params.setter
    def propagate_query_params(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "propagate_query_params", value)

    @property
    @pulumi.getter(name="propertySets")
    def property_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "property_sets")

    @property_sets.setter
    def property_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "property_sets", value)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter(name="pypiRegistryUrl")
    def pypi_registry_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pypi_registry_url")

    @pypi_registry_url.setter
    def pypi_registry_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pypi_registry_url", value)

    @property
    @pulumi.getter(name="remoteRepoChecksumPolicyType")
    def remote_repo_checksum_policy_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_repo_checksum_policy_type")

    @remote_repo_checksum_policy_type.setter
    def remote_repo_checksum_policy_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_repo_checksum_policy_type", value)

    @property
    @pulumi.getter(name="repoLayoutRef")
    def repo_layout_ref(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "repo_layout_ref")

    @repo_layout_ref.setter
    def repo_layout_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_layout_ref", value)

    @property
    @pulumi.getter(name="retrievalCachePeriodSeconds")
    def retrieval_cache_period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.
        """
        return pulumi.get(self, "retrieval_cache_period_seconds")

    @retrieval_cache_period_seconds.setter
    def retrieval_cache_period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retrieval_cache_period_seconds", value)

    @property
    @pulumi.getter(name="shareConfiguration")
    def share_configuration(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "share_configuration")

    @share_configuration.setter
    def share_configuration(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "share_configuration", value)

    @property
    @pulumi.getter(name="socketTimeoutMillis")
    def socket_timeout_millis(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "socket_timeout_millis")

    @socket_timeout_millis.setter
    def socket_timeout_millis(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "socket_timeout_millis", value)

    @property
    @pulumi.getter(name="storeArtifactsLocally")
    def store_artifacts_locally(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "store_artifacts_locally")

    @store_artifacts_locally.setter
    def store_artifacts_locally(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "store_artifacts_locally", value)

    @property
    @pulumi.getter(name="suppressPomConsistencyChecks")
    def suppress_pom_consistency_checks(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "suppress_pom_consistency_checks")

    @suppress_pom_consistency_checks.setter
    def suppress_pom_consistency_checks(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_pom_consistency_checks", value)

    @property
    @pulumi.getter(name="synchronizeProperties")
    def synchronize_properties(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "synchronize_properties")

    @synchronize_properties.setter
    def synchronize_properties(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "synchronize_properties", value)

    @property
    @pulumi.getter(name="unusedArtifactsCleanupPeriodHours")
    def unused_artifacts_cleanup_period_hours(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "unused_artifacts_cleanup_period_hours")

    @unused_artifacts_cleanup_period_hours.setter
    def unused_artifacts_cleanup_period_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unused_artifacts_cleanup_period_hours", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="v3FeedUrl")
    def v3_feed_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "v3_feed_url")

    @v3_feed_url.setter
    def v3_feed_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v3_feed_url", value)

    @property
    @pulumi.getter(name="vcsGitDownloadUrl")
    def vcs_git_download_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vcs_git_download_url")

    @vcs_git_download_url.setter
    def vcs_git_download_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vcs_git_download_url", value)

    @property
    @pulumi.getter(name="vcsGitProvider")
    def vcs_git_provider(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vcs_git_provider")

    @vcs_git_provider.setter
    def vcs_git_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vcs_git_provider", value)

    @property
    @pulumi.getter(name="vcsType")
    def vcs_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vcs_type")

    @vcs_type.setter
    def vcs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vcs_type", value)

    @property
    @pulumi.getter(name="xrayIndex")
    def xray_index(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "xray_index")

    @xray_index.setter
    def xray_index(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "xray_index", value)


class RemoteRepository(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_any_host_auth: Optional[pulumi.Input[bool]] = None,
                 blacked_out: Optional[pulumi.Input[bool]] = None,
                 block_mismatching_mime_types: Optional[pulumi.Input[bool]] = None,
                 bower_registry_url: Optional[pulumi.Input[str]] = None,
                 bypass_head_requests: Optional[pulumi.Input[bool]] = None,
                 client_tls_certificate: Optional[pulumi.Input[str]] = None,
                 content_synchronisation: Optional[pulumi.Input[pulumi.InputType['RemoteRepositoryContentSynchronisationArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 download_context_path: Optional[pulumi.Input[str]] = None,
                 enable_cookie_management: Optional[pulumi.Input[bool]] = None,
                 enable_token_authentication: Optional[pulumi.Input[bool]] = None,
                 excludes_pattern: Optional[pulumi.Input[str]] = None,
                 feed_context_path: Optional[pulumi.Input[str]] = None,
                 fetch_jars_eagerly: Optional[pulumi.Input[bool]] = None,
                 fetch_sources_eagerly: Optional[pulumi.Input[bool]] = None,
                 force_nuget_authentication: Optional[pulumi.Input[bool]] = None,
                 handle_releases: Optional[pulumi.Input[bool]] = None,
                 handle_snapshots: Optional[pulumi.Input[bool]] = None,
                 hard_fail: Optional[pulumi.Input[bool]] = None,
                 includes_pattern: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 local_address: Optional[pulumi.Input[str]] = None,
                 max_unique_snapshots: Optional[pulumi.Input[int]] = None,
                 missed_cache_period_seconds: Optional[pulumi.Input[int]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 offline: Optional[pulumi.Input[bool]] = None,
                 package_type: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 propagate_query_params: Optional[pulumi.Input[bool]] = None,
                 property_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 proxy: Optional[pulumi.Input[str]] = None,
                 pypi_registry_url: Optional[pulumi.Input[str]] = None,
                 remote_repo_checksum_policy_type: Optional[pulumi.Input[str]] = None,
                 repo_layout_ref: Optional[pulumi.Input[str]] = None,
                 retrieval_cache_period_seconds: Optional[pulumi.Input[int]] = None,
                 share_configuration: Optional[pulumi.Input[bool]] = None,
                 socket_timeout_millis: Optional[pulumi.Input[int]] = None,
                 store_artifacts_locally: Optional[pulumi.Input[bool]] = None,
                 suppress_pom_consistency_checks: Optional[pulumi.Input[bool]] = None,
                 synchronize_properties: Optional[pulumi.Input[bool]] = None,
                 unused_artifacts_cleanup_period_hours: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 v3_feed_url: Optional[pulumi.Input[str]] = None,
                 vcs_git_download_url: Optional[pulumi.Input[str]] = None,
                 vcs_git_provider: Optional[pulumi.Input[str]] = None,
                 vcs_type: Optional[pulumi.Input[str]] = None,
                 xray_index: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        ## Import

        Remote repositories can be imported using their name, e.g.

        ```sh
         $ pulumi import artifactory:index/remoteRepository:RemoteRepository my-remote my-remote
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] password: Requires password encryption to be turned off `POST /api/system/decrypt`
        :param pulumi.Input[int] retrieval_cache_period_seconds: The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RemoteRepositoryArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Import

        Remote repositories can be imported using their name, e.g.

        ```sh
         $ pulumi import artifactory:index/remoteRepository:RemoteRepository my-remote my-remote
        ```

        :param str resource_name: The name of the resource.
        :param RemoteRepositoryArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RemoteRepositoryArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_any_host_auth: Optional[pulumi.Input[bool]] = None,
                 blacked_out: Optional[pulumi.Input[bool]] = None,
                 block_mismatching_mime_types: Optional[pulumi.Input[bool]] = None,
                 bower_registry_url: Optional[pulumi.Input[str]] = None,
                 bypass_head_requests: Optional[pulumi.Input[bool]] = None,
                 client_tls_certificate: Optional[pulumi.Input[str]] = None,
                 content_synchronisation: Optional[pulumi.Input[pulumi.InputType['RemoteRepositoryContentSynchronisationArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 download_context_path: Optional[pulumi.Input[str]] = None,
                 enable_cookie_management: Optional[pulumi.Input[bool]] = None,
                 enable_token_authentication: Optional[pulumi.Input[bool]] = None,
                 excludes_pattern: Optional[pulumi.Input[str]] = None,
                 feed_context_path: Optional[pulumi.Input[str]] = None,
                 fetch_jars_eagerly: Optional[pulumi.Input[bool]] = None,
                 fetch_sources_eagerly: Optional[pulumi.Input[bool]] = None,
                 force_nuget_authentication: Optional[pulumi.Input[bool]] = None,
                 handle_releases: Optional[pulumi.Input[bool]] = None,
                 handle_snapshots: Optional[pulumi.Input[bool]] = None,
                 hard_fail: Optional[pulumi.Input[bool]] = None,
                 includes_pattern: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 local_address: Optional[pulumi.Input[str]] = None,
                 max_unique_snapshots: Optional[pulumi.Input[int]] = None,
                 missed_cache_period_seconds: Optional[pulumi.Input[int]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 offline: Optional[pulumi.Input[bool]] = None,
                 package_type: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 propagate_query_params: Optional[pulumi.Input[bool]] = None,
                 property_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 proxy: Optional[pulumi.Input[str]] = None,
                 pypi_registry_url: Optional[pulumi.Input[str]] = None,
                 remote_repo_checksum_policy_type: Optional[pulumi.Input[str]] = None,
                 repo_layout_ref: Optional[pulumi.Input[str]] = None,
                 retrieval_cache_period_seconds: Optional[pulumi.Input[int]] = None,
                 share_configuration: Optional[pulumi.Input[bool]] = None,
                 socket_timeout_millis: Optional[pulumi.Input[int]] = None,
                 store_artifacts_locally: Optional[pulumi.Input[bool]] = None,
                 suppress_pom_consistency_checks: Optional[pulumi.Input[bool]] = None,
                 synchronize_properties: Optional[pulumi.Input[bool]] = None,
                 unused_artifacts_cleanup_period_hours: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 v3_feed_url: Optional[pulumi.Input[str]] = None,
                 vcs_git_download_url: Optional[pulumi.Input[str]] = None,
                 vcs_git_provider: Optional[pulumi.Input[str]] = None,
                 vcs_type: Optional[pulumi.Input[str]] = None,
                 xray_index: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RemoteRepositoryArgs.__new__(RemoteRepositoryArgs)

            __props__.__dict__["allow_any_host_auth"] = allow_any_host_auth
            __props__.__dict__["blacked_out"] = blacked_out
            __props__.__dict__["block_mismatching_mime_types"] = block_mismatching_mime_types
            __props__.__dict__["bower_registry_url"] = bower_registry_url
            __props__.__dict__["bypass_head_requests"] = bypass_head_requests
            __props__.__dict__["client_tls_certificate"] = client_tls_certificate
            __props__.__dict__["content_synchronisation"] = content_synchronisation
            __props__.__dict__["description"] = description
            __props__.__dict__["download_context_path"] = download_context_path
            __props__.__dict__["enable_cookie_management"] = enable_cookie_management
            __props__.__dict__["enable_token_authentication"] = enable_token_authentication
            __props__.__dict__["excludes_pattern"] = excludes_pattern
            __props__.__dict__["feed_context_path"] = feed_context_path
            __props__.__dict__["fetch_jars_eagerly"] = fetch_jars_eagerly
            __props__.__dict__["fetch_sources_eagerly"] = fetch_sources_eagerly
            __props__.__dict__["force_nuget_authentication"] = force_nuget_authentication
            __props__.__dict__["handle_releases"] = handle_releases
            __props__.__dict__["handle_snapshots"] = handle_snapshots
            __props__.__dict__["hard_fail"] = hard_fail
            __props__.__dict__["includes_pattern"] = includes_pattern
            if key is None and not opts.urn:
                raise TypeError("Missing required property 'key'")
            __props__.__dict__["key"] = key
            __props__.__dict__["local_address"] = local_address
            __props__.__dict__["max_unique_snapshots"] = max_unique_snapshots
            __props__.__dict__["missed_cache_period_seconds"] = missed_cache_period_seconds
            __props__.__dict__["notes"] = notes
            __props__.__dict__["offline"] = offline
            __props__.__dict__["package_type"] = package_type
            __props__.__dict__["password"] = password
            __props__.__dict__["propagate_query_params"] = propagate_query_params
            __props__.__dict__["property_sets"] = property_sets
            __props__.__dict__["proxy"] = proxy
            __props__.__dict__["pypi_registry_url"] = pypi_registry_url
            __props__.__dict__["remote_repo_checksum_policy_type"] = remote_repo_checksum_policy_type
            __props__.__dict__["repo_layout_ref"] = repo_layout_ref
            __props__.__dict__["retrieval_cache_period_seconds"] = retrieval_cache_period_seconds
            __props__.__dict__["share_configuration"] = share_configuration
            __props__.__dict__["socket_timeout_millis"] = socket_timeout_millis
            __props__.__dict__["store_artifacts_locally"] = store_artifacts_locally
            __props__.__dict__["suppress_pom_consistency_checks"] = suppress_pom_consistency_checks
            __props__.__dict__["synchronize_properties"] = synchronize_properties
            __props__.__dict__["unused_artifacts_cleanup_period_hours"] = unused_artifacts_cleanup_period_hours
            if url is None and not opts.urn:
                raise TypeError("Missing required property 'url'")
            __props__.__dict__["url"] = url
            __props__.__dict__["username"] = username
            __props__.__dict__["v3_feed_url"] = v3_feed_url
            __props__.__dict__["vcs_git_download_url"] = vcs_git_download_url
            __props__.__dict__["vcs_git_provider"] = vcs_git_provider
            __props__.__dict__["vcs_type"] = vcs_type
            __props__.__dict__["xray_index"] = xray_index
        super(RemoteRepository, __self__).__init__(
            'artifactory:index/remoteRepository:RemoteRepository',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_any_host_auth: Optional[pulumi.Input[bool]] = None,
            blacked_out: Optional[pulumi.Input[bool]] = None,
            block_mismatching_mime_types: Optional[pulumi.Input[bool]] = None,
            bower_registry_url: Optional[pulumi.Input[str]] = None,
            bypass_head_requests: Optional[pulumi.Input[bool]] = None,
            client_tls_certificate: Optional[pulumi.Input[str]] = None,
            content_synchronisation: Optional[pulumi.Input[pulumi.InputType['RemoteRepositoryContentSynchronisationArgs']]] = None,
            description: Optional[pulumi.Input[str]] = None,
            download_context_path: Optional[pulumi.Input[str]] = None,
            enable_cookie_management: Optional[pulumi.Input[bool]] = None,
            enable_token_authentication: Optional[pulumi.Input[bool]] = None,
            excludes_pattern: Optional[pulumi.Input[str]] = None,
            feed_context_path: Optional[pulumi.Input[str]] = None,
            fetch_jars_eagerly: Optional[pulumi.Input[bool]] = None,
            fetch_sources_eagerly: Optional[pulumi.Input[bool]] = None,
            force_nuget_authentication: Optional[pulumi.Input[bool]] = None,
            handle_releases: Optional[pulumi.Input[bool]] = None,
            handle_snapshots: Optional[pulumi.Input[bool]] = None,
            hard_fail: Optional[pulumi.Input[bool]] = None,
            includes_pattern: Optional[pulumi.Input[str]] = None,
            key: Optional[pulumi.Input[str]] = None,
            local_address: Optional[pulumi.Input[str]] = None,
            max_unique_snapshots: Optional[pulumi.Input[int]] = None,
            missed_cache_period_seconds: Optional[pulumi.Input[int]] = None,
            notes: Optional[pulumi.Input[str]] = None,
            offline: Optional[pulumi.Input[bool]] = None,
            package_type: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            propagate_query_params: Optional[pulumi.Input[bool]] = None,
            property_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            proxy: Optional[pulumi.Input[str]] = None,
            pypi_registry_url: Optional[pulumi.Input[str]] = None,
            remote_repo_checksum_policy_type: Optional[pulumi.Input[str]] = None,
            repo_layout_ref: Optional[pulumi.Input[str]] = None,
            retrieval_cache_period_seconds: Optional[pulumi.Input[int]] = None,
            share_configuration: Optional[pulumi.Input[bool]] = None,
            socket_timeout_millis: Optional[pulumi.Input[int]] = None,
            store_artifacts_locally: Optional[pulumi.Input[bool]] = None,
            suppress_pom_consistency_checks: Optional[pulumi.Input[bool]] = None,
            synchronize_properties: Optional[pulumi.Input[bool]] = None,
            unused_artifacts_cleanup_period_hours: Optional[pulumi.Input[int]] = None,
            url: Optional[pulumi.Input[str]] = None,
            username: Optional[pulumi.Input[str]] = None,
            v3_feed_url: Optional[pulumi.Input[str]] = None,
            vcs_git_download_url: Optional[pulumi.Input[str]] = None,
            vcs_git_provider: Optional[pulumi.Input[str]] = None,
            vcs_type: Optional[pulumi.Input[str]] = None,
            xray_index: Optional[pulumi.Input[bool]] = None) -> 'RemoteRepository':
        """
        Get an existing RemoteRepository resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] password: Requires password encryption to be turned off `POST /api/system/decrypt`
        :param pulumi.Input[int] retrieval_cache_period_seconds: The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RemoteRepositoryState.__new__(_RemoteRepositoryState)

        __props__.__dict__["allow_any_host_auth"] = allow_any_host_auth
        __props__.__dict__["blacked_out"] = blacked_out
        __props__.__dict__["block_mismatching_mime_types"] = block_mismatching_mime_types
        __props__.__dict__["bower_registry_url"] = bower_registry_url
        __props__.__dict__["bypass_head_requests"] = bypass_head_requests
        __props__.__dict__["client_tls_certificate"] = client_tls_certificate
        __props__.__dict__["content_synchronisation"] = content_synchronisation
        __props__.__dict__["description"] = description
        __props__.__dict__["download_context_path"] = download_context_path
        __props__.__dict__["enable_cookie_management"] = enable_cookie_management
        __props__.__dict__["enable_token_authentication"] = enable_token_authentication
        __props__.__dict__["excludes_pattern"] = excludes_pattern
        __props__.__dict__["feed_context_path"] = feed_context_path
        __props__.__dict__["fetch_jars_eagerly"] = fetch_jars_eagerly
        __props__.__dict__["fetch_sources_eagerly"] = fetch_sources_eagerly
        __props__.__dict__["force_nuget_authentication"] = force_nuget_authentication
        __props__.__dict__["handle_releases"] = handle_releases
        __props__.__dict__["handle_snapshots"] = handle_snapshots
        __props__.__dict__["hard_fail"] = hard_fail
        __props__.__dict__["includes_pattern"] = includes_pattern
        __props__.__dict__["key"] = key
        __props__.__dict__["local_address"] = local_address
        __props__.__dict__["max_unique_snapshots"] = max_unique_snapshots
        __props__.__dict__["missed_cache_period_seconds"] = missed_cache_period_seconds
        __props__.__dict__["notes"] = notes
        __props__.__dict__["offline"] = offline
        __props__.__dict__["package_type"] = package_type
        __props__.__dict__["password"] = password
        __props__.__dict__["propagate_query_params"] = propagate_query_params
        __props__.__dict__["property_sets"] = property_sets
        __props__.__dict__["proxy"] = proxy
        __props__.__dict__["pypi_registry_url"] = pypi_registry_url
        __props__.__dict__["remote_repo_checksum_policy_type"] = remote_repo_checksum_policy_type
        __props__.__dict__["repo_layout_ref"] = repo_layout_ref
        __props__.__dict__["retrieval_cache_period_seconds"] = retrieval_cache_period_seconds
        __props__.__dict__["share_configuration"] = share_configuration
        __props__.__dict__["socket_timeout_millis"] = socket_timeout_millis
        __props__.__dict__["store_artifacts_locally"] = store_artifacts_locally
        __props__.__dict__["suppress_pom_consistency_checks"] = suppress_pom_consistency_checks
        __props__.__dict__["synchronize_properties"] = synchronize_properties
        __props__.__dict__["unused_artifacts_cleanup_period_hours"] = unused_artifacts_cleanup_period_hours
        __props__.__dict__["url"] = url
        __props__.__dict__["username"] = username
        __props__.__dict__["v3_feed_url"] = v3_feed_url
        __props__.__dict__["vcs_git_download_url"] = vcs_git_download_url
        __props__.__dict__["vcs_git_provider"] = vcs_git_provider
        __props__.__dict__["vcs_type"] = vcs_type
        __props__.__dict__["xray_index"] = xray_index
        return RemoteRepository(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowAnyHostAuth")
    def allow_any_host_auth(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "allow_any_host_auth")

    @property
    @pulumi.getter(name="blackedOut")
    def blacked_out(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "blacked_out")

    @property
    @pulumi.getter(name="blockMismatchingMimeTypes")
    def block_mismatching_mime_types(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "block_mismatching_mime_types")

    @property
    @pulumi.getter(name="bowerRegistryUrl")
    def bower_registry_url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "bower_registry_url")

    @property
    @pulumi.getter(name="bypassHeadRequests")
    def bypass_head_requests(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "bypass_head_requests")

    @property
    @pulumi.getter(name="clientTlsCertificate")
    def client_tls_certificate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "client_tls_certificate")

    @property
    @pulumi.getter(name="contentSynchronisation")
    def content_synchronisation(self) -> pulumi.Output['outputs.RemoteRepositoryContentSynchronisation']:
        return pulumi.get(self, "content_synchronisation")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="downloadContextPath")
    def download_context_path(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "download_context_path")

    @property
    @pulumi.getter(name="enableCookieManagement")
    def enable_cookie_management(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "enable_cookie_management")

    @property
    @pulumi.getter(name="enableTokenAuthentication")
    def enable_token_authentication(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "enable_token_authentication")

    @property
    @pulumi.getter(name="excludesPattern")
    def excludes_pattern(self) -> pulumi.Output[str]:
        return pulumi.get(self, "excludes_pattern")

    @property
    @pulumi.getter(name="feedContextPath")
    def feed_context_path(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "feed_context_path")

    @property
    @pulumi.getter(name="fetchJarsEagerly")
    def fetch_jars_eagerly(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "fetch_jars_eagerly")

    @property
    @pulumi.getter(name="fetchSourcesEagerly")
    def fetch_sources_eagerly(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "fetch_sources_eagerly")

    @property
    @pulumi.getter(name="forceNugetAuthentication")
    def force_nuget_authentication(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "force_nuget_authentication")

    @property
    @pulumi.getter(name="handleReleases")
    def handle_releases(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "handle_releases")

    @property
    @pulumi.getter(name="handleSnapshots")
    def handle_snapshots(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "handle_snapshots")

    @property
    @pulumi.getter(name="hardFail")
    def hard_fail(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "hard_fail")

    @property
    @pulumi.getter(name="includesPattern")
    def includes_pattern(self) -> pulumi.Output[str]:
        return pulumi.get(self, "includes_pattern")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="localAddress")
    def local_address(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "local_address")

    @property
    @pulumi.getter(name="maxUniqueSnapshots")
    def max_unique_snapshots(self) -> pulumi.Output[int]:
        return pulumi.get(self, "max_unique_snapshots")

    @property
    @pulumi.getter(name="missedCachePeriodSeconds")
    def missed_cache_period_seconds(self) -> pulumi.Output[int]:
        return pulumi.get(self, "missed_cache_period_seconds")

    @property
    @pulumi.getter
    def notes(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def offline(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "offline")

    @property
    @pulumi.getter(name="packageType")
    def package_type(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "package_type")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        Requires password encryption to be turned off `POST /api/system/decrypt`
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="propagateQueryParams")
    def propagate_query_params(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "propagate_query_params")

    @property
    @pulumi.getter(name="propertySets")
    def property_sets(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "property_sets")

    @property
    @pulumi.getter
    def proxy(self) -> pulumi.Output[str]:
        return pulumi.get(self, "proxy")

    @property
    @pulumi.getter(name="pypiRegistryUrl")
    def pypi_registry_url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "pypi_registry_url")

    @property
    @pulumi.getter(name="remoteRepoChecksumPolicyType")
    def remote_repo_checksum_policy_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "remote_repo_checksum_policy_type")

    @property
    @pulumi.getter(name="repoLayoutRef")
    def repo_layout_ref(self) -> pulumi.Output[str]:
        return pulumi.get(self, "repo_layout_ref")

    @property
    @pulumi.getter(name="retrievalCachePeriodSeconds")
    def retrieval_cache_period_seconds(self) -> pulumi.Output[int]:
        """
        The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.
        """
        return pulumi.get(self, "retrieval_cache_period_seconds")

    @property
    @pulumi.getter(name="shareConfiguration")
    def share_configuration(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "share_configuration")

    @property
    @pulumi.getter(name="socketTimeoutMillis")
    def socket_timeout_millis(self) -> pulumi.Output[int]:
        return pulumi.get(self, "socket_timeout_millis")

    @property
    @pulumi.getter(name="storeArtifactsLocally")
    def store_artifacts_locally(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "store_artifacts_locally")

    @property
    @pulumi.getter(name="suppressPomConsistencyChecks")
    def suppress_pom_consistency_checks(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "suppress_pom_consistency_checks")

    @property
    @pulumi.getter(name="synchronizeProperties")
    def synchronize_properties(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "synchronize_properties")

    @property
    @pulumi.getter(name="unusedArtifactsCleanupPeriodHours")
    def unused_artifacts_cleanup_period_hours(self) -> pulumi.Output[int]:
        return pulumi.get(self, "unused_artifacts_cleanup_period_hours")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="v3FeedUrl")
    def v3_feed_url(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "v3_feed_url")

    @property
    @pulumi.getter(name="vcsGitDownloadUrl")
    def vcs_git_download_url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "vcs_git_download_url")

    @property
    @pulumi.getter(name="vcsGitProvider")
    def vcs_git_provider(self) -> pulumi.Output[str]:
        return pulumi.get(self, "vcs_git_provider")

    @property
    @pulumi.getter(name="vcsType")
    def vcs_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "vcs_type")

    @property
    @pulumi.getter(name="xrayIndex")
    def xray_index(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "xray_index")

