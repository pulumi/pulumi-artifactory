# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['XrayPolicyArgs', 'XrayPolicy']

@pulumi.input_type
class XrayPolicyArgs:
    def __init__(__self__, *,
                 rules: pulumi.Input[Sequence[pulumi.Input['XrayPolicyRuleArgs']]],
                 type: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a XrayPolicy resource.
        :param pulumi.Input[Sequence[pulumi.Input['XrayPolicyRuleArgs']]] rules: (Required) Nested block describing the policy rules. Described below.
        :param pulumi.Input[str] type: (Required) Type of the policy
        :param pulumi.Input[str] description: (Optional) More verbose description of the policy
        :param pulumi.Input[str] name: (Required) Name of the rule
        """
        pulumi.set(__self__, "rules", rules)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['XrayPolicyRuleArgs']]]:
        """
        (Required) Nested block describing the policy rules. Described below.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['XrayPolicyRuleArgs']]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Required) Type of the policy
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) More verbose description of the policy
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) Name of the rule
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _XrayPolicyState:
    def __init__(__self__, *,
                 author: Optional[pulumi.Input[str]] = None,
                 created: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 modified: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['XrayPolicyRuleArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering XrayPolicy resources.
        :param pulumi.Input[str] author: (Optional) Name of the policy author
        :param pulumi.Input[str] created: Timestamp of when the policy was first created
        :param pulumi.Input[str] description: (Optional) More verbose description of the policy
        :param pulumi.Input[str] modified: Timestamp of when the policy was last modified
        :param pulumi.Input[str] name: (Required) Name of the rule
        :param pulumi.Input[Sequence[pulumi.Input['XrayPolicyRuleArgs']]] rules: (Required) Nested block describing the policy rules. Described below.
        :param pulumi.Input[str] type: (Required) Type of the policy
        """
        if author is not None:
            pulumi.set(__self__, "author", author)
        if created is not None:
            pulumi.set(__self__, "created", created)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if modified is not None:
            pulumi.set(__self__, "modified", modified)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def author(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Name of the policy author
        """
        return pulumi.get(self, "author")

    @author.setter
    def author(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "author", value)

    @property
    @pulumi.getter
    def created(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp of when the policy was first created
        """
        return pulumi.get(self, "created")

    @created.setter
    def created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) More verbose description of the policy
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def modified(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp of when the policy was last modified
        """
        return pulumi.get(self, "modified")

    @modified.setter
    def modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modified", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) Name of the rule
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['XrayPolicyRuleArgs']]]]:
        """
        (Required) Nested block describing the policy rules. Described below.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['XrayPolicyRuleArgs']]]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) Type of the policy
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class XrayPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['XrayPolicyRuleArgs']]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## # Xray Policy Resource

        Provides an Xray policy resource. This can be used to create and manage Xray v1 policies.

        ## Import

        A policy can be imported by using the name, e.g.

        ```sh
         $ pulumi import artifactory:index/xrayPolicy:XrayPolicy example policy-name
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: (Optional) More verbose description of the policy
        :param pulumi.Input[str] name: (Required) Name of the rule
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['XrayPolicyRuleArgs']]]] rules: (Required) Nested block describing the policy rules. Described below.
        :param pulumi.Input[str] type: (Required) Type of the policy
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: XrayPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## # Xray Policy Resource

        Provides an Xray policy resource. This can be used to create and manage Xray v1 policies.

        ## Import

        A policy can be imported by using the name, e.g.

        ```sh
         $ pulumi import artifactory:index/xrayPolicy:XrayPolicy example policy-name
        ```

        :param str resource_name: The name of the resource.
        :param XrayPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(XrayPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['XrayPolicyRuleArgs']]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = XrayPolicyArgs.__new__(XrayPolicyArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            if rules is None and not opts.urn:
                raise TypeError("Missing required property 'rules'")
            __props__.__dict__["rules"] = rules
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["author"] = None
            __props__.__dict__["created"] = None
            __props__.__dict__["modified"] = None
        super(XrayPolicy, __self__).__init__(
            'artifactory:index/xrayPolicy:XrayPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            author: Optional[pulumi.Input[str]] = None,
            created: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            modified: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['XrayPolicyRuleArgs']]]]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'XrayPolicy':
        """
        Get an existing XrayPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] author: (Optional) Name of the policy author
        :param pulumi.Input[str] created: Timestamp of when the policy was first created
        :param pulumi.Input[str] description: (Optional) More verbose description of the policy
        :param pulumi.Input[str] modified: Timestamp of when the policy was last modified
        :param pulumi.Input[str] name: (Required) Name of the rule
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['XrayPolicyRuleArgs']]]] rules: (Required) Nested block describing the policy rules. Described below.
        :param pulumi.Input[str] type: (Required) Type of the policy
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _XrayPolicyState.__new__(_XrayPolicyState)

        __props__.__dict__["author"] = author
        __props__.__dict__["created"] = created
        __props__.__dict__["description"] = description
        __props__.__dict__["modified"] = modified
        __props__.__dict__["name"] = name
        __props__.__dict__["rules"] = rules
        __props__.__dict__["type"] = type
        return XrayPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def author(self) -> pulumi.Output[str]:
        """
        (Optional) Name of the policy author
        """
        return pulumi.get(self, "author")

    @property
    @pulumi.getter
    def created(self) -> pulumi.Output[str]:
        """
        Timestamp of when the policy was first created
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        (Optional) More verbose description of the policy
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def modified(self) -> pulumi.Output[str]:
        """
        Timestamp of when the policy was last modified
        """
        return pulumi.get(self, "modified")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        (Required) Name of the rule
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Output[Sequence['outputs.XrayPolicyRule']]:
        """
        (Required) Nested block describing the policy rules. Described below.
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        (Required) Type of the policy
        """
        return pulumi.get(self, "type")

