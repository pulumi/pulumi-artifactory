# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ReleaseBundleV2Args', 'ReleaseBundleV2']

@pulumi.input_type
class ReleaseBundleV2Args:
    def __init__(__self__, *,
                 keypair_name: pulumi.Input[_builtins.str],
                 source: pulumi.Input['ReleaseBundleV2SourceArgs'],
                 source_type: pulumi.Input[_builtins.str],
                 version: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 project_key: Optional[pulumi.Input[_builtins.str]] = None,
                 skip_docker_manifest_resolution: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a ReleaseBundleV2 resource.
        :param pulumi.Input[_builtins.str] keypair_name: Key-pair name to use for signature creation
        :param pulumi.Input['ReleaseBundleV2SourceArgs'] source: Defines specific repositories to include in the promotion. If this property is left undefined, all repositories (except those specifically excluded) are included in the promotion. Important: If one or more repositories are specifically included, all other repositories are excluded (regardless of what is defined in `excluded_repository_keys`).
        :param pulumi.Input[_builtins.str] source_type: Source type. Valid values: `aql`, `artifacts`, `builds`, `release_bundles`
        :param pulumi.Input[_builtins.str] version: Version to promote
        :param pulumi.Input[_builtins.str] name: Name of Release Bundle
        :param pulumi.Input[_builtins.str] project_key: Project key the Release Bundle belongs to
        :param pulumi.Input[_builtins.bool] skip_docker_manifest_resolution: Determines whether to skip the resolution of the Docker manifest, which adds the image layers to the Release Bundle. The default value is `false` (the manifest is resolved and image layers are included).
        """
        pulumi.set(__self__, "keypair_name", keypair_name)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "version", version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project_key is not None:
            pulumi.set(__self__, "project_key", project_key)
        if skip_docker_manifest_resolution is not None:
            pulumi.set(__self__, "skip_docker_manifest_resolution", skip_docker_manifest_resolution)

    @_builtins.property
    @pulumi.getter(name="keypairName")
    def keypair_name(self) -> pulumi.Input[_builtins.str]:
        """
        Key-pair name to use for signature creation
        """
        return pulumi.get(self, "keypair_name")

    @keypair_name.setter
    def keypair_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "keypair_name", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> pulumi.Input['ReleaseBundleV2SourceArgs']:
        """
        Defines specific repositories to include in the promotion. If this property is left undefined, all repositories (except those specifically excluded) are included in the promotion. Important: If one or more repositories are specifically included, all other repositories are excluded (regardless of what is defined in `excluded_repository_keys`).
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input['ReleaseBundleV2SourceArgs']):
        pulumi.set(self, "source", value)

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[_builtins.str]:
        """
        Source type. Valid values: `aql`, `artifacts`, `builds`, `release_bundles`
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "source_type", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Input[_builtins.str]:
        """
        Version to promote
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of Release Bundle
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="projectKey")
    def project_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Project key the Release Bundle belongs to
        """
        return pulumi.get(self, "project_key")

    @project_key.setter
    def project_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_key", value)

    @_builtins.property
    @pulumi.getter(name="skipDockerManifestResolution")
    def skip_docker_manifest_resolution(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Determines whether to skip the resolution of the Docker manifest, which adds the image layers to the Release Bundle. The default value is `false` (the manifest is resolved and image layers are included).
        """
        return pulumi.get(self, "skip_docker_manifest_resolution")

    @skip_docker_manifest_resolution.setter
    def skip_docker_manifest_resolution(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "skip_docker_manifest_resolution", value)


@pulumi.input_type
class _ReleaseBundleV2State:
    def __init__(__self__, *,
                 created: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 keypair_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 project_key: Optional[pulumi.Input[_builtins.str]] = None,
                 service_id: Optional[pulumi.Input[_builtins.str]] = None,
                 skip_docker_manifest_resolution: Optional[pulumi.Input[_builtins.bool]] = None,
                 source: Optional[pulumi.Input['ReleaseBundleV2SourceArgs']] = None,
                 source_type: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ReleaseBundleV2 resources.
        :param pulumi.Input[_builtins.str] created: Timestamp when the new version was created (ISO 8601 standard).
        :param pulumi.Input[_builtins.str] created_by: The user who created the Release Bundle.
        :param pulumi.Input[_builtins.str] keypair_name: Key-pair name to use for signature creation
        :param pulumi.Input[_builtins.str] name: Name of Release Bundle
        :param pulumi.Input[_builtins.str] project_key: Project key the Release Bundle belongs to
        :param pulumi.Input[_builtins.str] service_id: The unique identifier of the Artifactory instance where the Release Bundle was created.
        :param pulumi.Input[_builtins.bool] skip_docker_manifest_resolution: Determines whether to skip the resolution of the Docker manifest, which adds the image layers to the Release Bundle. The default value is `false` (the manifest is resolved and image layers are included).
        :param pulumi.Input['ReleaseBundleV2SourceArgs'] source: Defines specific repositories to include in the promotion. If this property is left undefined, all repositories (except those specifically excluded) are included in the promotion. Important: If one or more repositories are specifically included, all other repositories are excluded (regardless of what is defined in `excluded_repository_keys`).
        :param pulumi.Input[_builtins.str] source_type: Source type. Valid values: `aql`, `artifacts`, `builds`, `release_bundles`
        :param pulumi.Input[_builtins.str] version: Version to promote
        """
        if created is not None:
            pulumi.set(__self__, "created", created)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if keypair_name is not None:
            pulumi.set(__self__, "keypair_name", keypair_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project_key is not None:
            pulumi.set(__self__, "project_key", project_key)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if skip_docker_manifest_resolution is not None:
            pulumi.set(__self__, "skip_docker_manifest_resolution", skip_docker_manifest_resolution)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def created(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Timestamp when the new version was created (ISO 8601 standard).
        """
        return pulumi.get(self, "created")

    @created.setter
    def created(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user who created the Release Bundle.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter(name="keypairName")
    def keypair_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Key-pair name to use for signature creation
        """
        return pulumi.get(self, "keypair_name")

    @keypair_name.setter
    def keypair_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "keypair_name", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of Release Bundle
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="projectKey")
    def project_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Project key the Release Bundle belongs to
        """
        return pulumi.get(self, "project_key")

    @project_key.setter
    def project_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_key", value)

    @_builtins.property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier of the Artifactory instance where the Release Bundle was created.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_id", value)

    @_builtins.property
    @pulumi.getter(name="skipDockerManifestResolution")
    def skip_docker_manifest_resolution(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Determines whether to skip the resolution of the Docker manifest, which adds the image layers to the Release Bundle. The default value is `false` (the manifest is resolved and image layers are included).
        """
        return pulumi.get(self, "skip_docker_manifest_resolution")

    @skip_docker_manifest_resolution.setter
    def skip_docker_manifest_resolution(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "skip_docker_manifest_resolution", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input['ReleaseBundleV2SourceArgs']]:
        """
        Defines specific repositories to include in the promotion. If this property is left undefined, all repositories (except those specifically excluded) are included in the promotion. Important: If one or more repositories are specifically included, all other repositories are excluded (regardless of what is defined in `excluded_repository_keys`).
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input['ReleaseBundleV2SourceArgs']]):
        pulumi.set(self, "source", value)

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source type. Valid values: `aql`, `artifacts`, `builds`, `release_bundles`
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_type", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Version to promote
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("artifactory:index/releaseBundleV2:ReleaseBundleV2")
class ReleaseBundleV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 keypair_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 project_key: Optional[pulumi.Input[_builtins.str]] = None,
                 skip_docker_manifest_resolution: Optional[pulumi.Input[_builtins.bool]] = None,
                 source: Optional[pulumi.Input[Union['ReleaseBundleV2SourceArgs', 'ReleaseBundleV2SourceArgsDict']]] = None,
                 source_type: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        This resource enables you to creates a new Release Bundle v2, uniquely identified by a combination of repository key, name, and version. For more information, see [Understanding Release Bundles v2](https://jfrog.com/help/r/jfrog-artifactory-documentation/understanding-release-bundles-v2) and [REST API](https://jfrog.com/help/r/jfrog-rest-apis/create-release-bundle-v2-version).

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] keypair_name: Key-pair name to use for signature creation
        :param pulumi.Input[_builtins.str] name: Name of Release Bundle
        :param pulumi.Input[_builtins.str] project_key: Project key the Release Bundle belongs to
        :param pulumi.Input[_builtins.bool] skip_docker_manifest_resolution: Determines whether to skip the resolution of the Docker manifest, which adds the image layers to the Release Bundle. The default value is `false` (the manifest is resolved and image layers are included).
        :param pulumi.Input[Union['ReleaseBundleV2SourceArgs', 'ReleaseBundleV2SourceArgsDict']] source: Defines specific repositories to include in the promotion. If this property is left undefined, all repositories (except those specifically excluded) are included in the promotion. Important: If one or more repositories are specifically included, all other repositories are excluded (regardless of what is defined in `excluded_repository_keys`).
        :param pulumi.Input[_builtins.str] source_type: Source type. Valid values: `aql`, `artifacts`, `builds`, `release_bundles`
        :param pulumi.Input[_builtins.str] version: Version to promote
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ReleaseBundleV2Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource enables you to creates a new Release Bundle v2, uniquely identified by a combination of repository key, name, and version. For more information, see [Understanding Release Bundles v2](https://jfrog.com/help/r/jfrog-artifactory-documentation/understanding-release-bundles-v2) and [REST API](https://jfrog.com/help/r/jfrog-rest-apis/create-release-bundle-v2-version).

        :param str resource_name: The name of the resource.
        :param ReleaseBundleV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ReleaseBundleV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 keypair_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 project_key: Optional[pulumi.Input[_builtins.str]] = None,
                 skip_docker_manifest_resolution: Optional[pulumi.Input[_builtins.bool]] = None,
                 source: Optional[pulumi.Input[Union['ReleaseBundleV2SourceArgs', 'ReleaseBundleV2SourceArgsDict']]] = None,
                 source_type: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ReleaseBundleV2Args.__new__(ReleaseBundleV2Args)

            if keypair_name is None and not opts.urn:
                raise TypeError("Missing required property 'keypair_name'")
            __props__.__dict__["keypair_name"] = keypair_name
            __props__.__dict__["name"] = name
            __props__.__dict__["project_key"] = project_key
            __props__.__dict__["skip_docker_manifest_resolution"] = skip_docker_manifest_resolution
            if source is None and not opts.urn:
                raise TypeError("Missing required property 'source'")
            __props__.__dict__["source"] = source
            if source_type is None and not opts.urn:
                raise TypeError("Missing required property 'source_type'")
            __props__.__dict__["source_type"] = source_type
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__.__dict__["version"] = version
            __props__.__dict__["created"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["service_id"] = None
        super(ReleaseBundleV2, __self__).__init__(
            'artifactory:index/releaseBundleV2:ReleaseBundleV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created: Optional[pulumi.Input[_builtins.str]] = None,
            created_by: Optional[pulumi.Input[_builtins.str]] = None,
            keypair_name: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            project_key: Optional[pulumi.Input[_builtins.str]] = None,
            service_id: Optional[pulumi.Input[_builtins.str]] = None,
            skip_docker_manifest_resolution: Optional[pulumi.Input[_builtins.bool]] = None,
            source: Optional[pulumi.Input[Union['ReleaseBundleV2SourceArgs', 'ReleaseBundleV2SourceArgsDict']]] = None,
            source_type: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None) -> 'ReleaseBundleV2':
        """
        Get an existing ReleaseBundleV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created: Timestamp when the new version was created (ISO 8601 standard).
        :param pulumi.Input[_builtins.str] created_by: The user who created the Release Bundle.
        :param pulumi.Input[_builtins.str] keypair_name: Key-pair name to use for signature creation
        :param pulumi.Input[_builtins.str] name: Name of Release Bundle
        :param pulumi.Input[_builtins.str] project_key: Project key the Release Bundle belongs to
        :param pulumi.Input[_builtins.str] service_id: The unique identifier of the Artifactory instance where the Release Bundle was created.
        :param pulumi.Input[_builtins.bool] skip_docker_manifest_resolution: Determines whether to skip the resolution of the Docker manifest, which adds the image layers to the Release Bundle. The default value is `false` (the manifest is resolved and image layers are included).
        :param pulumi.Input[Union['ReleaseBundleV2SourceArgs', 'ReleaseBundleV2SourceArgsDict']] source: Defines specific repositories to include in the promotion. If this property is left undefined, all repositories (except those specifically excluded) are included in the promotion. Important: If one or more repositories are specifically included, all other repositories are excluded (regardless of what is defined in `excluded_repository_keys`).
        :param pulumi.Input[_builtins.str] source_type: Source type. Valid values: `aql`, `artifacts`, `builds`, `release_bundles`
        :param pulumi.Input[_builtins.str] version: Version to promote
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ReleaseBundleV2State.__new__(_ReleaseBundleV2State)

        __props__.__dict__["created"] = created
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["keypair_name"] = keypair_name
        __props__.__dict__["name"] = name
        __props__.__dict__["project_key"] = project_key
        __props__.__dict__["service_id"] = service_id
        __props__.__dict__["skip_docker_manifest_resolution"] = skip_docker_manifest_resolution
        __props__.__dict__["source"] = source
        __props__.__dict__["source_type"] = source_type
        __props__.__dict__["version"] = version
        return ReleaseBundleV2(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def created(self) -> pulumi.Output[_builtins.str]:
        """
        Timestamp when the new version was created (ISO 8601 standard).
        """
        return pulumi.get(self, "created")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[_builtins.str]:
        """
        The user who created the Release Bundle.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="keypairName")
    def keypair_name(self) -> pulumi.Output[_builtins.str]:
        """
        Key-pair name to use for signature creation
        """
        return pulumi.get(self, "keypair_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of Release Bundle
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectKey")
    def project_key(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Project key the Release Bundle belongs to
        """
        return pulumi.get(self, "project_key")

    @_builtins.property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier of the Artifactory instance where the Release Bundle was created.
        """
        return pulumi.get(self, "service_id")

    @_builtins.property
    @pulumi.getter(name="skipDockerManifestResolution")
    def skip_docker_manifest_resolution(self) -> pulumi.Output[_builtins.bool]:
        """
        Determines whether to skip the resolution of the Docker manifest, which adds the image layers to the Release Bundle. The default value is `false` (the manifest is resolved and image layers are included).
        """
        return pulumi.get(self, "skip_docker_manifest_resolution")

    @_builtins.property
    @pulumi.getter
    def source(self) -> pulumi.Output['outputs.ReleaseBundleV2Source']:
        """
        Defines specific repositories to include in the promotion. If this property is left undefined, all repositories (except those specifically excluded) are included in the promotion. Important: If one or more repositories are specifically included, all other repositories are excluded (regardless of what is defined in `excluded_repository_keys`).
        """
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Output[_builtins.str]:
        """
        Source type. Valid values: `aql`, `artifacts`, `builds`, `release_bundles`
        """
        return pulumi.get(self, "source_type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        """
        Version to promote
        """
        return pulumi.get(self, "version")

