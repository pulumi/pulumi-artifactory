# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetGroupResult',
    'AwaitableGetGroupResult',
    'get_group',
    'get_group_output',
]

@pulumi.output_type
class GetGroupResult:
    """
    A collection of values returned by getGroup.
    """
    def __init__(__self__, admin_privileges=None, auto_join=None, description=None, external_id=None, id=None, include_users=None, name=None, policy_manager=None, realm=None, realm_attributes=None, reports_manager=None, users_names=None, watch_manager=None):
        if admin_privileges and not isinstance(admin_privileges, bool):
            raise TypeError("Expected argument 'admin_privileges' to be a bool")
        pulumi.set(__self__, "admin_privileges", admin_privileges)
        if auto_join and not isinstance(auto_join, bool):
            raise TypeError("Expected argument 'auto_join' to be a bool")
        pulumi.set(__self__, "auto_join", auto_join)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if external_id and not isinstance(external_id, str):
            raise TypeError("Expected argument 'external_id' to be a str")
        pulumi.set(__self__, "external_id", external_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if include_users and not isinstance(include_users, str):
            raise TypeError("Expected argument 'include_users' to be a str")
        pulumi.set(__self__, "include_users", include_users)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if policy_manager and not isinstance(policy_manager, bool):
            raise TypeError("Expected argument 'policy_manager' to be a bool")
        pulumi.set(__self__, "policy_manager", policy_manager)
        if realm and not isinstance(realm, str):
            raise TypeError("Expected argument 'realm' to be a str")
        pulumi.set(__self__, "realm", realm)
        if realm_attributes and not isinstance(realm_attributes, str):
            raise TypeError("Expected argument 'realm_attributes' to be a str")
        pulumi.set(__self__, "realm_attributes", realm_attributes)
        if reports_manager and not isinstance(reports_manager, bool):
            raise TypeError("Expected argument 'reports_manager' to be a bool")
        pulumi.set(__self__, "reports_manager", reports_manager)
        if users_names and not isinstance(users_names, list):
            raise TypeError("Expected argument 'users_names' to be a list")
        pulumi.set(__self__, "users_names", users_names)
        if watch_manager and not isinstance(watch_manager, bool):
            raise TypeError("Expected argument 'watch_manager' to be a bool")
        pulumi.set(__self__, "watch_manager", watch_manager)

    @_builtins.property
    @pulumi.getter(name="adminPrivileges")
    def admin_privileges(self) -> _builtins.bool:
        """
        Any users added to this group will automatically be assigned with admin privileges in the system.
        """
        return pulumi.get(self, "admin_privileges")

    @_builtins.property
    @pulumi.getter(name="autoJoin")
    def auto_join(self) -> _builtins.bool:
        """
        When this parameter is set, any new users defined in the system are automatically assigned to this group.
        """
        return pulumi.get(self, "auto_join")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        A description for the group
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[_builtins.str]:
        """
        New external group ID used to configure the corresponding group in Azure AD.
        """
        return pulumi.get(self, "external_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="includeUsers")
    def include_users(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "include_users")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="policyManager")
    def policy_manager(self) -> Optional[_builtins.bool]:
        """
        When this override is set, User in the group can set Xray security and compliance policies. Default value is `false`.
        """
        return pulumi.get(self, "policy_manager")

    @_builtins.property
    @pulumi.getter
    def realm(self) -> _builtins.str:
        """
        The realm for the group.
        """
        return pulumi.get(self, "realm")

    @_builtins.property
    @pulumi.getter(name="realmAttributes")
    def realm_attributes(self) -> Optional[_builtins.str]:
        """
        The realm attributes for the group.
        """
        return pulumi.get(self, "realm_attributes")

    @_builtins.property
    @pulumi.getter(name="reportsManager")
    def reports_manager(self) -> Optional[_builtins.bool]:
        """
        When this override is set, User in the group can manage Xray Reports on any resource type. Default value is `false`.
        """
        return pulumi.get(self, "reports_manager")

    @_builtins.property
    @pulumi.getter(name="usersNames")
    def users_names(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of users assigned to the group. Set include_users to `true` to retrieve this list.
        """
        return pulumi.get(self, "users_names")

    @_builtins.property
    @pulumi.getter(name="watchManager")
    def watch_manager(self) -> Optional[_builtins.bool]:
        """
        When this override is set, User in the group can manage Xray Watches on any resource type. Default value is `false`.
        """
        return pulumi.get(self, "watch_manager")


class AwaitableGetGroupResult(GetGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGroupResult(
            admin_privileges=self.admin_privileges,
            auto_join=self.auto_join,
            description=self.description,
            external_id=self.external_id,
            id=self.id,
            include_users=self.include_users,
            name=self.name,
            policy_manager=self.policy_manager,
            realm=self.realm,
            realm_attributes=self.realm_attributes,
            reports_manager=self.reports_manager,
            users_names=self.users_names,
            watch_manager=self.watch_manager)


def get_group(admin_privileges: Optional[_builtins.bool] = None,
              auto_join: Optional[_builtins.bool] = None,
              description: Optional[_builtins.str] = None,
              external_id: Optional[_builtins.str] = None,
              include_users: Optional[_builtins.str] = None,
              name: Optional[_builtins.str] = None,
              policy_manager: Optional[_builtins.bool] = None,
              realm: Optional[_builtins.str] = None,
              realm_attributes: Optional[_builtins.str] = None,
              reports_manager: Optional[_builtins.bool] = None,
              users_names: Optional[Sequence[_builtins.str]] = None,
              watch_manager: Optional[_builtins.bool] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGroupResult:
    """
    ## # Artifactory Group Data Source

    Provides an Artifactory group datasource. This can be used to read the configuration of groups in artifactory.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_artifactory as artifactory

    #
    my_group = artifactory.get_group(name="my_group",
        include_users="true")
    ```


    :param _builtins.bool admin_privileges: Any users added to this group will automatically be assigned with admin privileges in the system.
    :param _builtins.bool auto_join: When this parameter is set, any new users defined in the system are automatically assigned to this group.
    :param _builtins.str description: A description for the group
    :param _builtins.str external_id: New external group ID used to configure the corresponding group in Azure AD.
    :param _builtins.str include_users: Determines if the group's associated user list will return as an attribute. Default is `false`.
    :param _builtins.str name: Name of the group.
    :param _builtins.bool policy_manager: When this override is set, User in the group can set Xray security and compliance policies. Default value is `false`.
    :param _builtins.str realm: The realm for the group.
    :param _builtins.str realm_attributes: The realm attributes for the group.
    :param _builtins.bool reports_manager: When this override is set, User in the group can manage Xray Reports on any resource type. Default value is `false`.
    :param Sequence[_builtins.str] users_names: List of users assigned to the group. Set include_users to `true` to retrieve this list.
    :param _builtins.bool watch_manager: When this override is set, User in the group can manage Xray Watches on any resource type. Default value is `false`.
    """
    __args__ = dict()
    __args__['adminPrivileges'] = admin_privileges
    __args__['autoJoin'] = auto_join
    __args__['description'] = description
    __args__['externalId'] = external_id
    __args__['includeUsers'] = include_users
    __args__['name'] = name
    __args__['policyManager'] = policy_manager
    __args__['realm'] = realm
    __args__['realmAttributes'] = realm_attributes
    __args__['reportsManager'] = reports_manager
    __args__['usersNames'] = users_names
    __args__['watchManager'] = watch_manager
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('artifactory:index/getGroup:getGroup', __args__, opts=opts, typ=GetGroupResult).value

    return AwaitableGetGroupResult(
        admin_privileges=pulumi.get(__ret__, 'admin_privileges'),
        auto_join=pulumi.get(__ret__, 'auto_join'),
        description=pulumi.get(__ret__, 'description'),
        external_id=pulumi.get(__ret__, 'external_id'),
        id=pulumi.get(__ret__, 'id'),
        include_users=pulumi.get(__ret__, 'include_users'),
        name=pulumi.get(__ret__, 'name'),
        policy_manager=pulumi.get(__ret__, 'policy_manager'),
        realm=pulumi.get(__ret__, 'realm'),
        realm_attributes=pulumi.get(__ret__, 'realm_attributes'),
        reports_manager=pulumi.get(__ret__, 'reports_manager'),
        users_names=pulumi.get(__ret__, 'users_names'),
        watch_manager=pulumi.get(__ret__, 'watch_manager'))
def get_group_output(admin_privileges: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                     auto_join: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                     description: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     external_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     include_users: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     name: Optional[pulumi.Input[_builtins.str]] = None,
                     policy_manager: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                     realm: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     realm_attributes: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     reports_manager: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                     users_names: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                     watch_manager: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGroupResult]:
    """
    ## # Artifactory Group Data Source

    Provides an Artifactory group datasource. This can be used to read the configuration of groups in artifactory.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_artifactory as artifactory

    #
    my_group = artifactory.get_group(name="my_group",
        include_users="true")
    ```


    :param _builtins.bool admin_privileges: Any users added to this group will automatically be assigned with admin privileges in the system.
    :param _builtins.bool auto_join: When this parameter is set, any new users defined in the system are automatically assigned to this group.
    :param _builtins.str description: A description for the group
    :param _builtins.str external_id: New external group ID used to configure the corresponding group in Azure AD.
    :param _builtins.str include_users: Determines if the group's associated user list will return as an attribute. Default is `false`.
    :param _builtins.str name: Name of the group.
    :param _builtins.bool policy_manager: When this override is set, User in the group can set Xray security and compliance policies. Default value is `false`.
    :param _builtins.str realm: The realm for the group.
    :param _builtins.str realm_attributes: The realm attributes for the group.
    :param _builtins.bool reports_manager: When this override is set, User in the group can manage Xray Reports on any resource type. Default value is `false`.
    :param Sequence[_builtins.str] users_names: List of users assigned to the group. Set include_users to `true` to retrieve this list.
    :param _builtins.bool watch_manager: When this override is set, User in the group can manage Xray Watches on any resource type. Default value is `false`.
    """
    __args__ = dict()
    __args__['adminPrivileges'] = admin_privileges
    __args__['autoJoin'] = auto_join
    __args__['description'] = description
    __args__['externalId'] = external_id
    __args__['includeUsers'] = include_users
    __args__['name'] = name
    __args__['policyManager'] = policy_manager
    __args__['realm'] = realm
    __args__['realmAttributes'] = realm_attributes
    __args__['reportsManager'] = reports_manager
    __args__['usersNames'] = users_names
    __args__['watchManager'] = watch_manager
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('artifactory:index/getGroup:getGroup', __args__, opts=opts, typ=GetGroupResult)
    return __ret__.apply(lambda __response__: GetGroupResult(
        admin_privileges=pulumi.get(__response__, 'admin_privileges'),
        auto_join=pulumi.get(__response__, 'auto_join'),
        description=pulumi.get(__response__, 'description'),
        external_id=pulumi.get(__response__, 'external_id'),
        id=pulumi.get(__response__, 'id'),
        include_users=pulumi.get(__response__, 'include_users'),
        name=pulumi.get(__response__, 'name'),
        policy_manager=pulumi.get(__response__, 'policy_manager'),
        realm=pulumi.get(__response__, 'realm'),
        realm_attributes=pulumi.get(__response__, 'realm_attributes'),
        reports_manager=pulumi.get(__response__, 'reports_manager'),
        users_names=pulumi.get(__response__, 'users_names'),
        watch_manager=pulumi.get(__response__, 'watch_manager')))
