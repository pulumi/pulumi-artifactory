# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['XrayWatchArgs', 'XrayWatch']

@pulumi.input_type
class XrayWatchArgs:
    def __init__(__self__, *,
                 assigned_policies: pulumi.Input[Sequence[pulumi.Input['XrayWatchAssignedPolicyArgs']]],
                 resources: pulumi.Input[Sequence[pulumi.Input['XrayWatchResourceArgs']]],
                 active: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 watch_recipients: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a XrayWatch resource.
        :param pulumi.Input[Sequence[pulumi.Input['XrayWatchAssignedPolicyArgs']]] assigned_policies: Nested argument describing policies that will be applied. Defined below.
        :param pulumi.Input[Sequence[pulumi.Input['XrayWatchResourceArgs']]] resources: Nested argument describing the resources to be watched. Defined below.
        :param pulumi.Input[bool] active: Whether or not the watch will be active
        :param pulumi.Input[str] description: Description of the watch
        :param pulumi.Input[str] name: Name of the watch (must be unique)
        """
        pulumi.set(__self__, "assigned_policies", assigned_policies)
        pulumi.set(__self__, "resources", resources)
        if active is not None:
            pulumi.set(__self__, "active", active)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if watch_recipients is not None:
            pulumi.set(__self__, "watch_recipients", watch_recipients)

    @property
    @pulumi.getter(name="assignedPolicies")
    def assigned_policies(self) -> pulumi.Input[Sequence[pulumi.Input['XrayWatchAssignedPolicyArgs']]]:
        """
        Nested argument describing policies that will be applied. Defined below.
        """
        return pulumi.get(self, "assigned_policies")

    @assigned_policies.setter
    def assigned_policies(self, value: pulumi.Input[Sequence[pulumi.Input['XrayWatchAssignedPolicyArgs']]]):
        pulumi.set(self, "assigned_policies", value)

    @property
    @pulumi.getter
    def resources(self) -> pulumi.Input[Sequence[pulumi.Input['XrayWatchResourceArgs']]]:
        """
        Nested argument describing the resources to be watched. Defined below.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: pulumi.Input[Sequence[pulumi.Input['XrayWatchResourceArgs']]]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not the watch will be active
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the watch
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the watch (must be unique)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="watchRecipients")
    def watch_recipients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "watch_recipients")

    @watch_recipients.setter
    def watch_recipients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "watch_recipients", value)


@pulumi.input_type
class _XrayWatchState:
    def __init__(__self__, *,
                 active: Optional[pulumi.Input[bool]] = None,
                 assigned_policies: Optional[pulumi.Input[Sequence[pulumi.Input['XrayWatchAssignedPolicyArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['XrayWatchResourceArgs']]]] = None,
                 watch_recipients: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering XrayWatch resources.
        :param pulumi.Input[bool] active: Whether or not the watch will be active
        :param pulumi.Input[Sequence[pulumi.Input['XrayWatchAssignedPolicyArgs']]] assigned_policies: Nested argument describing policies that will be applied. Defined below.
        :param pulumi.Input[str] description: Description of the watch
        :param pulumi.Input[str] name: Name of the watch (must be unique)
        :param pulumi.Input[Sequence[pulumi.Input['XrayWatchResourceArgs']]] resources: Nested argument describing the resources to be watched. Defined below.
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if assigned_policies is not None:
            pulumi.set(__self__, "assigned_policies", assigned_policies)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if watch_recipients is not None:
            pulumi.set(__self__, "watch_recipients", watch_recipients)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not the watch will be active
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="assignedPolicies")
    def assigned_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['XrayWatchAssignedPolicyArgs']]]]:
        """
        Nested argument describing policies that will be applied. Defined below.
        """
        return pulumi.get(self, "assigned_policies")

    @assigned_policies.setter
    def assigned_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['XrayWatchAssignedPolicyArgs']]]]):
        pulumi.set(self, "assigned_policies", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the watch
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the watch (must be unique)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['XrayWatchResourceArgs']]]]:
        """
        Nested argument describing the resources to be watched. Defined below.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['XrayWatchResourceArgs']]]]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="watchRecipients")
    def watch_recipients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "watch_recipients")

    @watch_recipients.setter
    def watch_recipients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "watch_recipients", value)


class XrayWatch(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active: Optional[pulumi.Input[bool]] = None,
                 assigned_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['XrayWatchAssignedPolicyArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['XrayWatchResourceArgs']]]]] = None,
                 watch_recipients: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        ## # Xray Watch Resource

        Provides a Xray watch resource.

        ## Import

        Watches can be imported using their name, e.g.

        ```sh
         $ pulumi import artifactory:index/xrayWatch:XrayWatch example watch-name
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] active: Whether or not the watch will be active
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['XrayWatchAssignedPolicyArgs']]]] assigned_policies: Nested argument describing policies that will be applied. Defined below.
        :param pulumi.Input[str] description: Description of the watch
        :param pulumi.Input[str] name: Name of the watch (must be unique)
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['XrayWatchResourceArgs']]]] resources: Nested argument describing the resources to be watched. Defined below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: XrayWatchArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## # Xray Watch Resource

        Provides a Xray watch resource.

        ## Import

        Watches can be imported using their name, e.g.

        ```sh
         $ pulumi import artifactory:index/xrayWatch:XrayWatch example watch-name
        ```

        :param str resource_name: The name of the resource.
        :param XrayWatchArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(XrayWatchArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active: Optional[pulumi.Input[bool]] = None,
                 assigned_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['XrayWatchAssignedPolicyArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['XrayWatchResourceArgs']]]]] = None,
                 watch_recipients: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = XrayWatchArgs.__new__(XrayWatchArgs)

            __props__.__dict__["active"] = active
            if assigned_policies is None and not opts.urn:
                raise TypeError("Missing required property 'assigned_policies'")
            __props__.__dict__["assigned_policies"] = assigned_policies
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            if resources is None and not opts.urn:
                raise TypeError("Missing required property 'resources'")
            __props__.__dict__["resources"] = resources
            __props__.__dict__["watch_recipients"] = watch_recipients
        super(XrayWatch, __self__).__init__(
            'artifactory:index/xrayWatch:XrayWatch',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            active: Optional[pulumi.Input[bool]] = None,
            assigned_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['XrayWatchAssignedPolicyArgs']]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            resources: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['XrayWatchResourceArgs']]]]] = None,
            watch_recipients: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'XrayWatch':
        """
        Get an existing XrayWatch resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] active: Whether or not the watch will be active
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['XrayWatchAssignedPolicyArgs']]]] assigned_policies: Nested argument describing policies that will be applied. Defined below.
        :param pulumi.Input[str] description: Description of the watch
        :param pulumi.Input[str] name: Name of the watch (must be unique)
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['XrayWatchResourceArgs']]]] resources: Nested argument describing the resources to be watched. Defined below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _XrayWatchState.__new__(_XrayWatchState)

        __props__.__dict__["active"] = active
        __props__.__dict__["assigned_policies"] = assigned_policies
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["resources"] = resources
        __props__.__dict__["watch_recipients"] = watch_recipients
        return XrayWatch(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether or not the watch will be active
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="assignedPolicies")
    def assigned_policies(self) -> pulumi.Output[Sequence['outputs.XrayWatchAssignedPolicy']]:
        """
        Nested argument describing policies that will be applied. Defined below.
        """
        return pulumi.get(self, "assigned_policies")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the watch
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the watch (must be unique)
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resources(self) -> pulumi.Output[Sequence['outputs.XrayWatchResource']]:
        """
        Nested argument describing the resources to be watched. Defined below.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="watchRecipients")
    def watch_recipients(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "watch_recipients")

