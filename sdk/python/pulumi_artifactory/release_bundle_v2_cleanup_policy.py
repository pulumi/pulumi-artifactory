# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ReleaseBundleV2CleanupPolicyArgs', 'ReleaseBundleV2CleanupPolicy']

@pulumi.input_type
class ReleaseBundleV2CleanupPolicyArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[builtins.str],
                 search_criteria: pulumi.Input['ReleaseBundleV2CleanupPolicySearchCriteriaArgs'],
                 cron_expression: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 duration_in_minutes: Optional[pulumi.Input[builtins.int]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 item_type: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a ReleaseBundleV2CleanupPolicy resource.
        :param pulumi.Input[builtins.str] key: An ID that is used to identify the cleanup policy. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
        :param pulumi.Input[builtins.str] cron_expression: The cron expression determines when the policy is run. This parameter is not mandatory, however if left empty the policy will not run automatically and can only be triggered manually.
        :param pulumi.Input[builtins.int] duration_in_minutes: The maximum duration (in minutes) for policy execution, after which the policy will stop running even if not completed. While setting a maximum run duration for a policy is useful for adhering to a strict archive V2 schedule, it can cause the policy to stop before completion.
        :param pulumi.Input[builtins.bool] enabled: Enables or disabled the release bundles v2 cleanup policy. This allows the user to run the policy manually. If a policy has a valid cron expression, then it will be scheduled for execution based on it. If a policy is disabled, its future executions will be unscheduled. Defaults to `true`
        :param pulumi.Input[builtins.str] item_type: Needs to be set to releaseBundle.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "search_criteria", search_criteria)
        if cron_expression is not None:
            pulumi.set(__self__, "cron_expression", cron_expression)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if duration_in_minutes is not None:
            pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if item_type is not None:
            pulumi.set(__self__, "item_type", item_type)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[builtins.str]:
        """
        An ID that is used to identify the cleanup policy. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="searchCriteria")
    def search_criteria(self) -> pulumi.Input['ReleaseBundleV2CleanupPolicySearchCriteriaArgs']:
        return pulumi.get(self, "search_criteria")

    @search_criteria.setter
    def search_criteria(self, value: pulumi.Input['ReleaseBundleV2CleanupPolicySearchCriteriaArgs']):
        pulumi.set(self, "search_criteria", value)

    @property
    @pulumi.getter(name="cronExpression")
    def cron_expression(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The cron expression determines when the policy is run. This parameter is not mandatory, however if left empty the policy will not run automatically and can only be triggered manually.
        """
        return pulumi.get(self, "cron_expression")

    @cron_expression.setter
    def cron_expression(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cron_expression", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The maximum duration (in minutes) for policy execution, after which the policy will stop running even if not completed. While setting a maximum run duration for a policy is useful for adhering to a strict archive V2 schedule, it can cause the policy to stop before completion.
        """
        return pulumi.get(self, "duration_in_minutes")

    @duration_in_minutes.setter
    def duration_in_minutes(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "duration_in_minutes", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enables or disabled the release bundles v2 cleanup policy. This allows the user to run the policy manually. If a policy has a valid cron expression, then it will be scheduled for execution based on it. If a policy is disabled, its future executions will be unscheduled. Defaults to `true`
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="itemType")
    def item_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Needs to be set to releaseBundle.
        """
        return pulumi.get(self, "item_type")

    @item_type.setter
    def item_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "item_type", value)


@pulumi.input_type
class _ReleaseBundleV2CleanupPolicyState:
    def __init__(__self__, *,
                 cron_expression: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 duration_in_minutes: Optional[pulumi.Input[builtins.int]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 item_type: Optional[pulumi.Input[builtins.str]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 search_criteria: Optional[pulumi.Input['ReleaseBundleV2CleanupPolicySearchCriteriaArgs']] = None):
        """
        Input properties used for looking up and filtering ReleaseBundleV2CleanupPolicy resources.
        :param pulumi.Input[builtins.str] cron_expression: The cron expression determines when the policy is run. This parameter is not mandatory, however if left empty the policy will not run automatically and can only be triggered manually.
        :param pulumi.Input[builtins.int] duration_in_minutes: The maximum duration (in minutes) for policy execution, after which the policy will stop running even if not completed. While setting a maximum run duration for a policy is useful for adhering to a strict archive V2 schedule, it can cause the policy to stop before completion.
        :param pulumi.Input[builtins.bool] enabled: Enables or disabled the release bundles v2 cleanup policy. This allows the user to run the policy manually. If a policy has a valid cron expression, then it will be scheduled for execution based on it. If a policy is disabled, its future executions will be unscheduled. Defaults to `true`
        :param pulumi.Input[builtins.str] item_type: Needs to be set to releaseBundle.
        :param pulumi.Input[builtins.str] key: An ID that is used to identify the cleanup policy. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
        """
        if cron_expression is not None:
            pulumi.set(__self__, "cron_expression", cron_expression)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if duration_in_minutes is not None:
            pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if item_type is not None:
            pulumi.set(__self__, "item_type", item_type)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if search_criteria is not None:
            pulumi.set(__self__, "search_criteria", search_criteria)

    @property
    @pulumi.getter(name="cronExpression")
    def cron_expression(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The cron expression determines when the policy is run. This parameter is not mandatory, however if left empty the policy will not run automatically and can only be triggered manually.
        """
        return pulumi.get(self, "cron_expression")

    @cron_expression.setter
    def cron_expression(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cron_expression", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The maximum duration (in minutes) for policy execution, after which the policy will stop running even if not completed. While setting a maximum run duration for a policy is useful for adhering to a strict archive V2 schedule, it can cause the policy to stop before completion.
        """
        return pulumi.get(self, "duration_in_minutes")

    @duration_in_minutes.setter
    def duration_in_minutes(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "duration_in_minutes", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enables or disabled the release bundles v2 cleanup policy. This allows the user to run the policy manually. If a policy has a valid cron expression, then it will be scheduled for execution based on it. If a policy is disabled, its future executions will be unscheduled. Defaults to `true`
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="itemType")
    def item_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Needs to be set to releaseBundle.
        """
        return pulumi.get(self, "item_type")

    @item_type.setter
    def item_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "item_type", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        An ID that is used to identify the cleanup policy. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="searchCriteria")
    def search_criteria(self) -> Optional[pulumi.Input['ReleaseBundleV2CleanupPolicySearchCriteriaArgs']]:
        return pulumi.get(self, "search_criteria")

    @search_criteria.setter
    def search_criteria(self, value: Optional[pulumi.Input['ReleaseBundleV2CleanupPolicySearchCriteriaArgs']]):
        pulumi.set(self, "search_criteria", value)


@pulumi.type_token("artifactory:index/releaseBundleV2CleanupPolicy:ReleaseBundleV2CleanupPolicy")
class ReleaseBundleV2CleanupPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cron_expression: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 duration_in_minutes: Optional[pulumi.Input[builtins.int]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 item_type: Optional[pulumi.Input[builtins.str]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 search_criteria: Optional[pulumi.Input[Union['ReleaseBundleV2CleanupPolicySearchCriteriaArgs', 'ReleaseBundleV2CleanupPolicySearchCriteriaArgsDict']]] = None,
                 __props__=None):
        """
        Provides an Artifactory Archive Policy resource. This resource enable system administrators to configure and maintain JFrog cleanup policies for Release Bundles V2. See [Cleanup Policies](https://jfrog.com/help/r/jfrog-rest-apis/cleanup-policies-release-bundles-v2-apis) for more details.

        ~>Release Bundles V2 Cleanup Policies APIs are supported on Artifactory version 7.104.2 and later.

        ## Import

        ```sh
        $ pulumi import artifactory:index/releaseBundleV2CleanupPolicy:ReleaseBundleV2CleanupPolicy my-cleanup-policy my-policy
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] cron_expression: The cron expression determines when the policy is run. This parameter is not mandatory, however if left empty the policy will not run automatically and can only be triggered manually.
        :param pulumi.Input[builtins.int] duration_in_minutes: The maximum duration (in minutes) for policy execution, after which the policy will stop running even if not completed. While setting a maximum run duration for a policy is useful for adhering to a strict archive V2 schedule, it can cause the policy to stop before completion.
        :param pulumi.Input[builtins.bool] enabled: Enables or disabled the release bundles v2 cleanup policy. This allows the user to run the policy manually. If a policy has a valid cron expression, then it will be scheduled for execution based on it. If a policy is disabled, its future executions will be unscheduled. Defaults to `true`
        :param pulumi.Input[builtins.str] item_type: Needs to be set to releaseBundle.
        :param pulumi.Input[builtins.str] key: An ID that is used to identify the cleanup policy. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ReleaseBundleV2CleanupPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides an Artifactory Archive Policy resource. This resource enable system administrators to configure and maintain JFrog cleanup policies for Release Bundles V2. See [Cleanup Policies](https://jfrog.com/help/r/jfrog-rest-apis/cleanup-policies-release-bundles-v2-apis) for more details.

        ~>Release Bundles V2 Cleanup Policies APIs are supported on Artifactory version 7.104.2 and later.

        ## Import

        ```sh
        $ pulumi import artifactory:index/releaseBundleV2CleanupPolicy:ReleaseBundleV2CleanupPolicy my-cleanup-policy my-policy
        ```

        :param str resource_name: The name of the resource.
        :param ReleaseBundleV2CleanupPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ReleaseBundleV2CleanupPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cron_expression: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 duration_in_minutes: Optional[pulumi.Input[builtins.int]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 item_type: Optional[pulumi.Input[builtins.str]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 search_criteria: Optional[pulumi.Input[Union['ReleaseBundleV2CleanupPolicySearchCriteriaArgs', 'ReleaseBundleV2CleanupPolicySearchCriteriaArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ReleaseBundleV2CleanupPolicyArgs.__new__(ReleaseBundleV2CleanupPolicyArgs)

            __props__.__dict__["cron_expression"] = cron_expression
            __props__.__dict__["description"] = description
            __props__.__dict__["duration_in_minutes"] = duration_in_minutes
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["item_type"] = item_type
            if key is None and not opts.urn:
                raise TypeError("Missing required property 'key'")
            __props__.__dict__["key"] = key
            if search_criteria is None and not opts.urn:
                raise TypeError("Missing required property 'search_criteria'")
            __props__.__dict__["search_criteria"] = search_criteria
        super(ReleaseBundleV2CleanupPolicy, __self__).__init__(
            'artifactory:index/releaseBundleV2CleanupPolicy:ReleaseBundleV2CleanupPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cron_expression: Optional[pulumi.Input[builtins.str]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            duration_in_minutes: Optional[pulumi.Input[builtins.int]] = None,
            enabled: Optional[pulumi.Input[builtins.bool]] = None,
            item_type: Optional[pulumi.Input[builtins.str]] = None,
            key: Optional[pulumi.Input[builtins.str]] = None,
            search_criteria: Optional[pulumi.Input[Union['ReleaseBundleV2CleanupPolicySearchCriteriaArgs', 'ReleaseBundleV2CleanupPolicySearchCriteriaArgsDict']]] = None) -> 'ReleaseBundleV2CleanupPolicy':
        """
        Get an existing ReleaseBundleV2CleanupPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] cron_expression: The cron expression determines when the policy is run. This parameter is not mandatory, however if left empty the policy will not run automatically and can only be triggered manually.
        :param pulumi.Input[builtins.int] duration_in_minutes: The maximum duration (in minutes) for policy execution, after which the policy will stop running even if not completed. While setting a maximum run duration for a policy is useful for adhering to a strict archive V2 schedule, it can cause the policy to stop before completion.
        :param pulumi.Input[builtins.bool] enabled: Enables or disabled the release bundles v2 cleanup policy. This allows the user to run the policy manually. If a policy has a valid cron expression, then it will be scheduled for execution based on it. If a policy is disabled, its future executions will be unscheduled. Defaults to `true`
        :param pulumi.Input[builtins.str] item_type: Needs to be set to releaseBundle.
        :param pulumi.Input[builtins.str] key: An ID that is used to identify the cleanup policy. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ReleaseBundleV2CleanupPolicyState.__new__(_ReleaseBundleV2CleanupPolicyState)

        __props__.__dict__["cron_expression"] = cron_expression
        __props__.__dict__["description"] = description
        __props__.__dict__["duration_in_minutes"] = duration_in_minutes
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["item_type"] = item_type
        __props__.__dict__["key"] = key
        __props__.__dict__["search_criteria"] = search_criteria
        return ReleaseBundleV2CleanupPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cronExpression")
    def cron_expression(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The cron expression determines when the policy is run. This parameter is not mandatory, however if left empty the policy will not run automatically and can only be triggered manually.
        """
        return pulumi.get(self, "cron_expression")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        The maximum duration (in minutes) for policy execution, after which the policy will stop running even if not completed. While setting a maximum run duration for a policy is useful for adhering to a strict archive V2 schedule, it can cause the policy to stop before completion.
        """
        return pulumi.get(self, "duration_in_minutes")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[builtins.bool]:
        """
        Enables or disabled the release bundles v2 cleanup policy. This allows the user to run the policy manually. If a policy has a valid cron expression, then it will be scheduled for execution based on it. If a policy is disabled, its future executions will be unscheduled. Defaults to `true`
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="itemType")
    def item_type(self) -> pulumi.Output[builtins.str]:
        """
        Needs to be set to releaseBundle.
        """
        return pulumi.get(self, "item_type")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[builtins.str]:
        """
        An ID that is used to identify the cleanup policy. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="searchCriteria")
    def search_criteria(self) -> pulumi.Output['outputs.ReleaseBundleV2CleanupPolicySearchCriteria']:
        return pulumi.get(self, "search_criteria")

