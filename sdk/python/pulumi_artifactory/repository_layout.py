# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['RepositoryLayoutArgs', 'RepositoryLayout']

@pulumi.input_type
class RepositoryLayoutArgs:
    def __init__(__self__, *,
                 artifact_path_pattern: pulumi.Input[str],
                 file_integration_revision_regexp: pulumi.Input[str],
                 folder_integration_revision_regexp: pulumi.Input[str],
                 descriptor_path_pattern: Optional[pulumi.Input[str]] = None,
                 distinctive_descriptor_path_pattern: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RepositoryLayout resource.
        :param pulumi.Input[str] artifact_path_pattern: Please refer to: [Path
               Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-ModulesandPathPatternsusedbyRepositoryLayouts)
               in the Artifactory Wiki documentation.
        :param pulumi.Input[str] file_integration_revision_regexp: A regular expression matching the integration revision string appearing in a file name as part of the artifact's path.
               For example, 'SNAPSHOT|(?:(?:[0-9]{8}.[0-9]{6})-(?:[0-9]+))', in Maven. Note! Take care not to introduce any regexp
               capturing groups within this expression. If not applicable use '.*'
        :param pulumi.Input[str] folder_integration_revision_regexp: A regular expression matching the integration revision string appearing in a folder name as part of the artifact's path.
               For example, 'SNAPSHOT', in Maven. Note! Take care not to introduce any regexp capturing groups within this expression.
               If not applicable use '.*'
        :param pulumi.Input[str] descriptor_path_pattern: Please refer to: [Descriptor Path
               Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-DescriptorPathPatterns) in
               the Artifactory Wiki documentation.
        :param pulumi.Input[bool] distinctive_descriptor_path_pattern: When set, 'descriptor_path_pattern' will be used. Default to 'false'.
        :param pulumi.Input[str] name: Layout name
        """
        RepositoryLayoutArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            artifact_path_pattern=artifact_path_pattern,
            file_integration_revision_regexp=file_integration_revision_regexp,
            folder_integration_revision_regexp=folder_integration_revision_regexp,
            descriptor_path_pattern=descriptor_path_pattern,
            distinctive_descriptor_path_pattern=distinctive_descriptor_path_pattern,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             artifact_path_pattern: pulumi.Input[str],
             file_integration_revision_regexp: pulumi.Input[str],
             folder_integration_revision_regexp: pulumi.Input[str],
             descriptor_path_pattern: Optional[pulumi.Input[str]] = None,
             distinctive_descriptor_path_pattern: Optional[pulumi.Input[bool]] = None,
             name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'artifactPathPattern' in kwargs:
            artifact_path_pattern = kwargs['artifactPathPattern']
        if 'fileIntegrationRevisionRegexp' in kwargs:
            file_integration_revision_regexp = kwargs['fileIntegrationRevisionRegexp']
        if 'folderIntegrationRevisionRegexp' in kwargs:
            folder_integration_revision_regexp = kwargs['folderIntegrationRevisionRegexp']
        if 'descriptorPathPattern' in kwargs:
            descriptor_path_pattern = kwargs['descriptorPathPattern']
        if 'distinctiveDescriptorPathPattern' in kwargs:
            distinctive_descriptor_path_pattern = kwargs['distinctiveDescriptorPathPattern']

        _setter("artifact_path_pattern", artifact_path_pattern)
        _setter("file_integration_revision_regexp", file_integration_revision_regexp)
        _setter("folder_integration_revision_regexp", folder_integration_revision_regexp)
        if descriptor_path_pattern is not None:
            _setter("descriptor_path_pattern", descriptor_path_pattern)
        if distinctive_descriptor_path_pattern is not None:
            _setter("distinctive_descriptor_path_pattern", distinctive_descriptor_path_pattern)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter(name="artifactPathPattern")
    def artifact_path_pattern(self) -> pulumi.Input[str]:
        """
        Please refer to: [Path
        Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-ModulesandPathPatternsusedbyRepositoryLayouts)
        in the Artifactory Wiki documentation.
        """
        return pulumi.get(self, "artifact_path_pattern")

    @artifact_path_pattern.setter
    def artifact_path_pattern(self, value: pulumi.Input[str]):
        pulumi.set(self, "artifact_path_pattern", value)

    @property
    @pulumi.getter(name="fileIntegrationRevisionRegexp")
    def file_integration_revision_regexp(self) -> pulumi.Input[str]:
        """
        A regular expression matching the integration revision string appearing in a file name as part of the artifact's path.
        For example, 'SNAPSHOT|(?:(?:[0-9]{8}.[0-9]{6})-(?:[0-9]+))', in Maven. Note! Take care not to introduce any regexp
        capturing groups within this expression. If not applicable use '.*'
        """
        return pulumi.get(self, "file_integration_revision_regexp")

    @file_integration_revision_regexp.setter
    def file_integration_revision_regexp(self, value: pulumi.Input[str]):
        pulumi.set(self, "file_integration_revision_regexp", value)

    @property
    @pulumi.getter(name="folderIntegrationRevisionRegexp")
    def folder_integration_revision_regexp(self) -> pulumi.Input[str]:
        """
        A regular expression matching the integration revision string appearing in a folder name as part of the artifact's path.
        For example, 'SNAPSHOT', in Maven. Note! Take care not to introduce any regexp capturing groups within this expression.
        If not applicable use '.*'
        """
        return pulumi.get(self, "folder_integration_revision_regexp")

    @folder_integration_revision_regexp.setter
    def folder_integration_revision_regexp(self, value: pulumi.Input[str]):
        pulumi.set(self, "folder_integration_revision_regexp", value)

    @property
    @pulumi.getter(name="descriptorPathPattern")
    def descriptor_path_pattern(self) -> Optional[pulumi.Input[str]]:
        """
        Please refer to: [Descriptor Path
        Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-DescriptorPathPatterns) in
        the Artifactory Wiki documentation.
        """
        return pulumi.get(self, "descriptor_path_pattern")

    @descriptor_path_pattern.setter
    def descriptor_path_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "descriptor_path_pattern", value)

    @property
    @pulumi.getter(name="distinctiveDescriptorPathPattern")
    def distinctive_descriptor_path_pattern(self) -> Optional[pulumi.Input[bool]]:
        """
        When set, 'descriptor_path_pattern' will be used. Default to 'false'.
        """
        return pulumi.get(self, "distinctive_descriptor_path_pattern")

    @distinctive_descriptor_path_pattern.setter
    def distinctive_descriptor_path_pattern(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "distinctive_descriptor_path_pattern", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Layout name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _RepositoryLayoutState:
    def __init__(__self__, *,
                 artifact_path_pattern: Optional[pulumi.Input[str]] = None,
                 descriptor_path_pattern: Optional[pulumi.Input[str]] = None,
                 distinctive_descriptor_path_pattern: Optional[pulumi.Input[bool]] = None,
                 file_integration_revision_regexp: Optional[pulumi.Input[str]] = None,
                 folder_integration_revision_regexp: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RepositoryLayout resources.
        :param pulumi.Input[str] artifact_path_pattern: Please refer to: [Path
               Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-ModulesandPathPatternsusedbyRepositoryLayouts)
               in the Artifactory Wiki documentation.
        :param pulumi.Input[str] descriptor_path_pattern: Please refer to: [Descriptor Path
               Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-DescriptorPathPatterns) in
               the Artifactory Wiki documentation.
        :param pulumi.Input[bool] distinctive_descriptor_path_pattern: When set, 'descriptor_path_pattern' will be used. Default to 'false'.
        :param pulumi.Input[str] file_integration_revision_regexp: A regular expression matching the integration revision string appearing in a file name as part of the artifact's path.
               For example, 'SNAPSHOT|(?:(?:[0-9]{8}.[0-9]{6})-(?:[0-9]+))', in Maven. Note! Take care not to introduce any regexp
               capturing groups within this expression. If not applicable use '.*'
        :param pulumi.Input[str] folder_integration_revision_regexp: A regular expression matching the integration revision string appearing in a folder name as part of the artifact's path.
               For example, 'SNAPSHOT', in Maven. Note! Take care not to introduce any regexp capturing groups within this expression.
               If not applicable use '.*'
        :param pulumi.Input[str] name: Layout name
        """
        _RepositoryLayoutState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            artifact_path_pattern=artifact_path_pattern,
            descriptor_path_pattern=descriptor_path_pattern,
            distinctive_descriptor_path_pattern=distinctive_descriptor_path_pattern,
            file_integration_revision_regexp=file_integration_revision_regexp,
            folder_integration_revision_regexp=folder_integration_revision_regexp,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             artifact_path_pattern: Optional[pulumi.Input[str]] = None,
             descriptor_path_pattern: Optional[pulumi.Input[str]] = None,
             distinctive_descriptor_path_pattern: Optional[pulumi.Input[bool]] = None,
             file_integration_revision_regexp: Optional[pulumi.Input[str]] = None,
             folder_integration_revision_regexp: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'artifactPathPattern' in kwargs:
            artifact_path_pattern = kwargs['artifactPathPattern']
        if 'descriptorPathPattern' in kwargs:
            descriptor_path_pattern = kwargs['descriptorPathPattern']
        if 'distinctiveDescriptorPathPattern' in kwargs:
            distinctive_descriptor_path_pattern = kwargs['distinctiveDescriptorPathPattern']
        if 'fileIntegrationRevisionRegexp' in kwargs:
            file_integration_revision_regexp = kwargs['fileIntegrationRevisionRegexp']
        if 'folderIntegrationRevisionRegexp' in kwargs:
            folder_integration_revision_regexp = kwargs['folderIntegrationRevisionRegexp']

        if artifact_path_pattern is not None:
            _setter("artifact_path_pattern", artifact_path_pattern)
        if descriptor_path_pattern is not None:
            _setter("descriptor_path_pattern", descriptor_path_pattern)
        if distinctive_descriptor_path_pattern is not None:
            _setter("distinctive_descriptor_path_pattern", distinctive_descriptor_path_pattern)
        if file_integration_revision_regexp is not None:
            _setter("file_integration_revision_regexp", file_integration_revision_regexp)
        if folder_integration_revision_regexp is not None:
            _setter("folder_integration_revision_regexp", folder_integration_revision_regexp)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter(name="artifactPathPattern")
    def artifact_path_pattern(self) -> Optional[pulumi.Input[str]]:
        """
        Please refer to: [Path
        Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-ModulesandPathPatternsusedbyRepositoryLayouts)
        in the Artifactory Wiki documentation.
        """
        return pulumi.get(self, "artifact_path_pattern")

    @artifact_path_pattern.setter
    def artifact_path_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "artifact_path_pattern", value)

    @property
    @pulumi.getter(name="descriptorPathPattern")
    def descriptor_path_pattern(self) -> Optional[pulumi.Input[str]]:
        """
        Please refer to: [Descriptor Path
        Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-DescriptorPathPatterns) in
        the Artifactory Wiki documentation.
        """
        return pulumi.get(self, "descriptor_path_pattern")

    @descriptor_path_pattern.setter
    def descriptor_path_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "descriptor_path_pattern", value)

    @property
    @pulumi.getter(name="distinctiveDescriptorPathPattern")
    def distinctive_descriptor_path_pattern(self) -> Optional[pulumi.Input[bool]]:
        """
        When set, 'descriptor_path_pattern' will be used. Default to 'false'.
        """
        return pulumi.get(self, "distinctive_descriptor_path_pattern")

    @distinctive_descriptor_path_pattern.setter
    def distinctive_descriptor_path_pattern(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "distinctive_descriptor_path_pattern", value)

    @property
    @pulumi.getter(name="fileIntegrationRevisionRegexp")
    def file_integration_revision_regexp(self) -> Optional[pulumi.Input[str]]:
        """
        A regular expression matching the integration revision string appearing in a file name as part of the artifact's path.
        For example, 'SNAPSHOT|(?:(?:[0-9]{8}.[0-9]{6})-(?:[0-9]+))', in Maven. Note! Take care not to introduce any regexp
        capturing groups within this expression. If not applicable use '.*'
        """
        return pulumi.get(self, "file_integration_revision_regexp")

    @file_integration_revision_regexp.setter
    def file_integration_revision_regexp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_integration_revision_regexp", value)

    @property
    @pulumi.getter(name="folderIntegrationRevisionRegexp")
    def folder_integration_revision_regexp(self) -> Optional[pulumi.Input[str]]:
        """
        A regular expression matching the integration revision string appearing in a folder name as part of the artifact's path.
        For example, 'SNAPSHOT', in Maven. Note! Take care not to introduce any regexp capturing groups within this expression.
        If not applicable use '.*'
        """
        return pulumi.get(self, "folder_integration_revision_regexp")

    @folder_integration_revision_regexp.setter
    def folder_integration_revision_regexp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder_integration_revision_regexp", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Layout name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


class RepositoryLayout(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 artifact_path_pattern: Optional[pulumi.Input[str]] = None,
                 descriptor_path_pattern: Optional[pulumi.Input[str]] = None,
                 distinctive_descriptor_path_pattern: Optional[pulumi.Input[bool]] = None,
                 file_integration_revision_regexp: Optional[pulumi.Input[str]] = None,
                 folder_integration_revision_regexp: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a RepositoryLayout resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] artifact_path_pattern: Please refer to: [Path
               Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-ModulesandPathPatternsusedbyRepositoryLayouts)
               in the Artifactory Wiki documentation.
        :param pulumi.Input[str] descriptor_path_pattern: Please refer to: [Descriptor Path
               Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-DescriptorPathPatterns) in
               the Artifactory Wiki documentation.
        :param pulumi.Input[bool] distinctive_descriptor_path_pattern: When set, 'descriptor_path_pattern' will be used. Default to 'false'.
        :param pulumi.Input[str] file_integration_revision_regexp: A regular expression matching the integration revision string appearing in a file name as part of the artifact's path.
               For example, 'SNAPSHOT|(?:(?:[0-9]{8}.[0-9]{6})-(?:[0-9]+))', in Maven. Note! Take care not to introduce any regexp
               capturing groups within this expression. If not applicable use '.*'
        :param pulumi.Input[str] folder_integration_revision_regexp: A regular expression matching the integration revision string appearing in a folder name as part of the artifact's path.
               For example, 'SNAPSHOT', in Maven. Note! Take care not to introduce any regexp capturing groups within this expression.
               If not applicable use '.*'
        :param pulumi.Input[str] name: Layout name
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RepositoryLayoutArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a RepositoryLayout resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RepositoryLayoutArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RepositoryLayoutArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            RepositoryLayoutArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 artifact_path_pattern: Optional[pulumi.Input[str]] = None,
                 descriptor_path_pattern: Optional[pulumi.Input[str]] = None,
                 distinctive_descriptor_path_pattern: Optional[pulumi.Input[bool]] = None,
                 file_integration_revision_regexp: Optional[pulumi.Input[str]] = None,
                 folder_integration_revision_regexp: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RepositoryLayoutArgs.__new__(RepositoryLayoutArgs)

            if artifact_path_pattern is None and not opts.urn:
                raise TypeError("Missing required property 'artifact_path_pattern'")
            __props__.__dict__["artifact_path_pattern"] = artifact_path_pattern
            __props__.__dict__["descriptor_path_pattern"] = descriptor_path_pattern
            __props__.__dict__["distinctive_descriptor_path_pattern"] = distinctive_descriptor_path_pattern
            if file_integration_revision_regexp is None and not opts.urn:
                raise TypeError("Missing required property 'file_integration_revision_regexp'")
            __props__.__dict__["file_integration_revision_regexp"] = file_integration_revision_regexp
            if folder_integration_revision_regexp is None and not opts.urn:
                raise TypeError("Missing required property 'folder_integration_revision_regexp'")
            __props__.__dict__["folder_integration_revision_regexp"] = folder_integration_revision_regexp
            __props__.__dict__["name"] = name
        super(RepositoryLayout, __self__).__init__(
            'artifactory:index/repositoryLayout:RepositoryLayout',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            artifact_path_pattern: Optional[pulumi.Input[str]] = None,
            descriptor_path_pattern: Optional[pulumi.Input[str]] = None,
            distinctive_descriptor_path_pattern: Optional[pulumi.Input[bool]] = None,
            file_integration_revision_regexp: Optional[pulumi.Input[str]] = None,
            folder_integration_revision_regexp: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None) -> 'RepositoryLayout':
        """
        Get an existing RepositoryLayout resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] artifact_path_pattern: Please refer to: [Path
               Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-ModulesandPathPatternsusedbyRepositoryLayouts)
               in the Artifactory Wiki documentation.
        :param pulumi.Input[str] descriptor_path_pattern: Please refer to: [Descriptor Path
               Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-DescriptorPathPatterns) in
               the Artifactory Wiki documentation.
        :param pulumi.Input[bool] distinctive_descriptor_path_pattern: When set, 'descriptor_path_pattern' will be used. Default to 'false'.
        :param pulumi.Input[str] file_integration_revision_regexp: A regular expression matching the integration revision string appearing in a file name as part of the artifact's path.
               For example, 'SNAPSHOT|(?:(?:[0-9]{8}.[0-9]{6})-(?:[0-9]+))', in Maven. Note! Take care not to introduce any regexp
               capturing groups within this expression. If not applicable use '.*'
        :param pulumi.Input[str] folder_integration_revision_regexp: A regular expression matching the integration revision string appearing in a folder name as part of the artifact's path.
               For example, 'SNAPSHOT', in Maven. Note! Take care not to introduce any regexp capturing groups within this expression.
               If not applicable use '.*'
        :param pulumi.Input[str] name: Layout name
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RepositoryLayoutState.__new__(_RepositoryLayoutState)

        __props__.__dict__["artifact_path_pattern"] = artifact_path_pattern
        __props__.__dict__["descriptor_path_pattern"] = descriptor_path_pattern
        __props__.__dict__["distinctive_descriptor_path_pattern"] = distinctive_descriptor_path_pattern
        __props__.__dict__["file_integration_revision_regexp"] = file_integration_revision_regexp
        __props__.__dict__["folder_integration_revision_regexp"] = folder_integration_revision_regexp
        __props__.__dict__["name"] = name
        return RepositoryLayout(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="artifactPathPattern")
    def artifact_path_pattern(self) -> pulumi.Output[str]:
        """
        Please refer to: [Path
        Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-ModulesandPathPatternsusedbyRepositoryLayouts)
        in the Artifactory Wiki documentation.
        """
        return pulumi.get(self, "artifact_path_pattern")

    @property
    @pulumi.getter(name="descriptorPathPattern")
    def descriptor_path_pattern(self) -> pulumi.Output[Optional[str]]:
        """
        Please refer to: [Descriptor Path
        Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-DescriptorPathPatterns) in
        the Artifactory Wiki documentation.
        """
        return pulumi.get(self, "descriptor_path_pattern")

    @property
    @pulumi.getter(name="distinctiveDescriptorPathPattern")
    def distinctive_descriptor_path_pattern(self) -> pulumi.Output[Optional[bool]]:
        """
        When set, 'descriptor_path_pattern' will be used. Default to 'false'.
        """
        return pulumi.get(self, "distinctive_descriptor_path_pattern")

    @property
    @pulumi.getter(name="fileIntegrationRevisionRegexp")
    def file_integration_revision_regexp(self) -> pulumi.Output[str]:
        """
        A regular expression matching the integration revision string appearing in a file name as part of the artifact's path.
        For example, 'SNAPSHOT|(?:(?:[0-9]{8}.[0-9]{6})-(?:[0-9]+))', in Maven. Note! Take care not to introduce any regexp
        capturing groups within this expression. If not applicable use '.*'
        """
        return pulumi.get(self, "file_integration_revision_regexp")

    @property
    @pulumi.getter(name="folderIntegrationRevisionRegexp")
    def folder_integration_revision_regexp(self) -> pulumi.Output[str]:
        """
        A regular expression matching the integration revision string appearing in a folder name as part of the artifact's path.
        For example, 'SNAPSHOT', in Maven. Note! Take care not to introduce any regexp capturing groups within this expression.
        If not applicable use '.*'
        """
        return pulumi.get(self, "folder_integration_revision_regexp")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Layout name
        """
        return pulumi.get(self, "name")

