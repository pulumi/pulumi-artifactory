// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Artifactory.Inputs
{

    public sealed class PackageCleanupPolicySearchCriteriaArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Remove packages based on when they were created.
        /// </summary>
        [Input("createdBeforeInMonths")]
        public Input<int>? CreatedBeforeInMonths { get; set; }

        [Input("excludedPackages")]
        private InputList<string>? _excludedPackages;

        /// <summary>
        /// Specify explicit package names that you want excluded from the policy.
        /// </summary>
        public InputList<string> ExcludedPackages
        {
            get => _excludedPackages ?? (_excludedPackages = new InputList<string>());
            set => _excludedPackages = value;
        }

        [Input("excludedRepos")]
        private InputList<string>? _excludedRepos;

        /// <summary>
        /// Specify patterns for repository names or explicit repository names that you want excluded from the policy. It can not accept any pattern only list of specific repositories.
        /// </summary>
        public InputList<string> ExcludedRepos
        {
            get => _excludedRepos ?? (_excludedRepos = new InputList<string>());
            set => _excludedRepos = value;
        }

        [Input("includeAllProjects")]
        public Input<bool>? IncludeAllProjects { get; set; }

        [Input("includedPackages", required: true)]
        private InputList<string>? _includedPackages;

        /// <summary>
        /// Specify a pattern for a package name or an explicit package name. It accept only single element which can be specific package or pattern, and for including all packages use `**`. Example: `included_packages = ["**"]`
        /// </summary>
        public InputList<string> IncludedPackages
        {
            get => _includedPackages ?? (_includedPackages = new InputList<string>());
            set => _includedPackages = value;
        }

        [Input("includedProjects")]
        private InputList<string>? _includedProjects;

        /// <summary>
        /// List of projects name(s) to apply the policy to.
        /// </summary>
        public InputList<string> IncludedProjects
        {
            get => _includedProjects ?? (_includedProjects = new InputList<string>());
            set => _includedProjects = value;
        }

        /// <summary>
        /// Select the number of latest version to keep. The policy will remove all versions (based on creation date) prior to the selected number. Some package types may not be supported. [Learn more](https://jfrog.com/help/r/jfrog-platform-administration-documentation/retention-policies/package-types-coverage)
        /// </summary>
        [Input("keepLastNVersions")]
        public Input<int>? KeepLastNVersions { get; set; }

        /// <summary>
        /// Remove packages based on when they were last downloaded.
        /// </summary>
        [Input("lastDownloadedBeforeInMonths")]
        public Input<int>? LastDownloadedBeforeInMonths { get; set; }

        [Input("packageTypes", required: true)]
        private InputList<string>? _packageTypes;

        /// <summary>
        /// Types of packages to be removed. Support: conan, docker, generic, gradle, maven, npm, nuget, rpm.
        /// </summary>
        public InputList<string> PackageTypes
        {
            get => _packageTypes ?? (_packageTypes = new InputList<string>());
            set => _packageTypes = value;
        }

        [Input("repos", required: true)]
        private InputList<string>? _repos;

        /// <summary>
        /// Specify patterns for repository names or explicit repository names. For including all repos use `**`. Example: `repos = ["**"]`
        /// </summary>
        public InputList<string> Repos
        {
            get => _repos ?? (_repos = new InputList<string>());
            set => _repos = value;
        }

        public PackageCleanupPolicySearchCriteriaArgs()
        {
        }
        public static new PackageCleanupPolicySearchCriteriaArgs Empty => new PackageCleanupPolicySearchCriteriaArgs();
    }
}
