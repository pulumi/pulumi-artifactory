// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Artifactory.Inputs
{

    public sealed class PackageCleanupPolicySearchCriteriaGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Remove packages based on when they were created. For example, remove packages that were created more than a year ago. The default value is to remove packages created more than 2 years ago.
        /// </summary>
        [Input("createdBeforeInMonths")]
        public Input<int>? CreatedBeforeInMonths { get; set; }

        [Input("excludedPackages")]
        private InputList<string>? _excludedPackages;

        /// <summary>
        /// Specify explicit package names that you want excluded from the policy. Only Name explicit names (and not patterns) are accepted.
        /// </summary>
        public InputList<string> ExcludedPackages
        {
            get => _excludedPackages ?? (_excludedPackages = new InputList<string>());
            set => _excludedPackages = value;
        }

        [Input("excludedRepos")]
        private InputList<string>? _excludedRepos;

        /// <summary>
        /// Specify patterns for repository names or explicit repository names that you want excluded from the cleanup policy.
        /// </summary>
        public InputList<string> ExcludedRepos
        {
            get => _excludedRepos ?? (_excludedRepos = new InputList<string>());
            set => _excludedRepos = value;
        }

        /// <summary>
        /// Set this to `true` if you want the policy to run on all projects on the platform.
        /// </summary>
        [Input("includeAllProjects")]
        public Input<bool>? IncludeAllProjects { get; set; }

        [Input("includedPackages", required: true)]
        private InputList<string>? _includedPackages;

        /// <summary>
        /// Specify a pattern for a package name or an explicit package name. It accept only single element which can be specific package or pattern, and for including all packages use `**`. Example: `included_packages = ["**"]`
        /// </summary>
        public InputList<string> IncludedPackages
        {
            get => _includedPackages ?? (_includedPackages = new InputList<string>());
            set => _includedPackages = value;
        }

        [Input("includedProjects")]
        private InputList<string>? _includedProjects;

        /// <summary>
        /// List of projects on which you want this policy to run. To include repositories that are not assigned to any project, enter the project key `default`.
        /// </summary>
        public InputList<string> IncludedProjects
        {
            get => _includedProjects ?? (_includedProjects = new InputList<string>());
            set => _includedProjects = value;
        }

        /// <summary>
        /// Select the number of latest versions to keep. The cleanup policy will remove all versions prior to the number you select here. The latest version is always excluded. Versions are determined by creation date.
        /// 
        /// ~&gt;Not all package types support this condition. For information on which package types support this condition, [learn more](https://jfrog.com/help/r/jfrog-platform-administration-documentation/retention-policies/package-types-coverage).
        /// </summary>
        [Input("keepLastNVersions")]
        public Input<int>? KeepLastNVersions { get; set; }

        /// <summary>
        /// Removes packages based on when they were last downloaded. For example, removes packages that were not downloaded in the past year. The default value is to remove packages that were downloaded more than 2 years ago.
        /// 
        /// ~&gt;If a package was never downloaded, the policy will remove it based only on the age-condition (`created_before_in_months`).
        /// 
        /// ~&gt;JFrog recommends using the `last_downloaded_before_in_months` condition to ensure that packages currently in use are not deleted.
        /// </summary>
        [Input("lastDownloadedBeforeInMonths")]
        public Input<int>? LastDownloadedBeforeInMonths { get; set; }

        [Input("packageTypes", required: true)]
        private InputList<string>? _packageTypes;
        public InputList<string> PackageTypes
        {
            get => _packageTypes ?? (_packageTypes = new InputList<string>());
            set => _packageTypes = value;
        }

        [Input("repos", required: true)]
        private InputList<string>? _repos;

        /// <summary>
        /// Specify patterns for repository names or explicit repository names. For including all repos use `**`. Example: `repos = ["**"]`
        /// </summary>
        public InputList<string> Repos
        {
            get => _repos ?? (_repos = new InputList<string>());
            set => _repos = value;
        }

        public PackageCleanupPolicySearchCriteriaGetArgs()
        {
        }
        public static new PackageCleanupPolicySearchCriteriaGetArgs Empty => new PackageCleanupPolicySearchCriteriaGetArgs();
    }
}
