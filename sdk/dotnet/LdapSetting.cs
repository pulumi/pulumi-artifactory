// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Artifactory
{
    /// <summary>
    /// This resource can be used to manage Artifactory's LDAP settings for user authentication.
    /// 
    /// When specified LDAP setting is active, Artifactory first attempts to authenticate the user against the LDAP server.
    /// If LDAP authentication fails, it then tries to authenticate via its internal database.
    /// 
    /// ~&gt;The `artifactory.LdapSetting` resource utilizes endpoints which are blocked/removed in SaaS environments (i.e. in Artifactory online), rendering this resource incompatible with Artifactory SaaS environments.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Artifactory = Pulumi.Artifactory;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Configure Artifactory LDAP setting
    ///     var ldapName = new Artifactory.LdapSetting("ldapName", new()
    ///     {
    ///         AllowUserToAccessProfile = false,
    ///         AutoCreateUser = true,
    ///         EmailAttribute = "mail",
    ///         Enabled = true,
    ///         Key = "ldap_name",
    ///         LdapPoisoningProtection = true,
    ///         LdapUrl = "ldap://ldap_server_url",
    ///         ManagerDn = "mgr_dn",
    ///         ManagerPassword = "mgr_passwd_random",
    ///         PagingSupportEnabled = false,
    ///         SearchBase = "ou=users",
    ///         SearchFilter = "(uid={0})",
    ///         SearchSubTree = true,
    ///         UserDnPattern = "uid={0},ou=People",
    ///     });
    /// 
    /// });
    /// ```
    /// Note: `Key` argument has to match to the resource name.\
    /// Reference Link: [JFrog LDAP](https://www.jfrog.com/confluence/display/JFROG/LDAP)
    /// 
    /// ## Import
    /// 
    /// LDAP setting can be imported using the key, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import artifactory:index/ldapSetting:LdapSetting ldap_name ldap_name
    /// ```
    /// </summary>
    [ArtifactoryResourceType("artifactory:index/ldapSetting:LdapSetting")]
    public partial class LdapSetting : global::Pulumi.CustomResource
    {
        /// <summary>
        /// When set, users created after logging in using LDAP will be able to access their profile page.  Default value is `false`.
        /// </summary>
        [Output("allowUserToAccessProfile")]
        public Output<bool?> AllowUserToAccessProfile { get; private set; } = null!;

        /// <summary>
        /// When set, the system will automatically create new users for those who have logged in using LDAP, and assign them to the default groups.  Default value is `true`.
        /// </summary>
        [Output("autoCreateUser")]
        public Output<bool?> AutoCreateUser { get; private set; } = null!;

        /// <summary>
        /// An attribute that can be used to map a user's email address to a user created automatically in Artifactory. Default value is `mail`.
        /// - Note: If blank/empty string input was set for email_attribute, Default value `mail` takes effect. This is to match with Artifactory behavior.
        /// </summary>
        [Output("emailAttribute")]
        public Output<string?> EmailAttribute { get; private set; } = null!;

        /// <summary>
        /// When set, these settings are enabled. Default value is `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The unique ID of the LDAP setting.
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// Protects against LDAP poisoning by filtering out users exposed to vulnerabilities.  Default value is `true`.
        /// </summary>
        [Output("ldapPoisoningProtection")]
        public Output<bool?> LdapPoisoningProtection { get; private set; } = null!;

        /// <summary>
        /// Location of the LDAP server in the following format: ldap://myserver:myport/dc=sampledomain,dc=com. The URL should include the base DN used to search for and/or authenticate users.
        /// </summary>
        [Output("ldapUrl")]
        public Output<string> LdapUrl { get; private set; } = null!;

        /// <summary>
        /// The full DN of a user with permissions that allow querying the LDAP server. When working with LDAP Groups, the user should have permissions for any extra group attributes such as memberOf.
        /// </summary>
        [Output("managerDn")]
        public Output<string?> ManagerDn { get; private set; } = null!;

        /// <summary>
        /// The password of the user binding to the LDAP server when using "search" authentication.
        /// </summary>
        [Output("managerPassword")]
        public Output<string> ManagerPassword { get; private set; } = null!;

        /// <summary>
        /// When set, supports paging results for the LDAP server. This feature requires that the LDAP Server supports a PagedResultsControl configuration.  Default value is `true`.
        /// </summary>
        [Output("pagingSupportEnabled")]
        public Output<bool?> PagingSupportEnabled { get; private set; } = null!;

        /// <summary>
        /// The Context name in which to search relative to the base DN in the LDAP URL. Multiple search bases may be specified separated by a pipe ( | ).
        /// </summary>
        [Output("searchBase")]
        public Output<string?> SearchBase { get; private set; } = null!;

        /// <summary>
        /// A filter expression used to search for the user DN that is used in LDAP authentication. This is an LDAP search filter (as defined in 'RFC 2254') with optional arguments. In this case, the username is the only argument, denoted by '{0}'. Possible examples are: uid={0}) - this would search for a username match on the uid attribute. Authentication using LDAP is performed from the DN found if successful. Default value is blank/empty.
        /// - Note: LDAP settings should provide a userDnPattern or a searchFilter (or both)
        /// </summary>
        [Output("searchFilter")]
        public Output<string?> SearchFilter { get; private set; } = null!;

        /// <summary>
        /// When set, enables deep search through the sub-tree of the LDAP URL + Search Base.  Default value is `true`.
        /// </summary>
        [Output("searchSubTree")]
        public Output<bool?> SearchSubTree { get; private set; } = null!;

        /// <summary>
        /// A DN pattern used to log users directly in to the LDAP database. This pattern is used to create a DN string for "direct" user authentication, and is relative to the base DN in the LDAP URL. The pattern argument {0} is replaced with the username at runtime. This only works if anonymous binding is allowed and a direct user DN can be used (which is not the default case for Active Directory). For example: uid={0},ou=People. Default value is blank/empty.
        /// - Note: LDAP settings should provide a userDnPattern or a searchFilter (or both).
        /// </summary>
        [Output("userDnPattern")]
        public Output<string?> UserDnPattern { get; private set; } = null!;


        /// <summary>
        /// Create a LdapSetting resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LdapSetting(string name, LdapSettingArgs args, CustomResourceOptions? options = null)
            : base("artifactory:index/ldapSetting:LdapSetting", name, args ?? new LdapSettingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LdapSetting(string name, Input<string> id, LdapSettingState? state = null, CustomResourceOptions? options = null)
            : base("artifactory:index/ldapSetting:LdapSetting", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "managerPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LdapSetting resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LdapSetting Get(string name, Input<string> id, LdapSettingState? state = null, CustomResourceOptions? options = null)
        {
            return new LdapSetting(name, id, state, options);
        }
    }

    public sealed class LdapSettingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When set, users created after logging in using LDAP will be able to access their profile page.  Default value is `false`.
        /// </summary>
        [Input("allowUserToAccessProfile")]
        public Input<bool>? AllowUserToAccessProfile { get; set; }

        /// <summary>
        /// When set, the system will automatically create new users for those who have logged in using LDAP, and assign them to the default groups.  Default value is `true`.
        /// </summary>
        [Input("autoCreateUser")]
        public Input<bool>? AutoCreateUser { get; set; }

        /// <summary>
        /// An attribute that can be used to map a user's email address to a user created automatically in Artifactory. Default value is `mail`.
        /// - Note: If blank/empty string input was set for email_attribute, Default value `mail` takes effect. This is to match with Artifactory behavior.
        /// </summary>
        [Input("emailAttribute")]
        public Input<string>? EmailAttribute { get; set; }

        /// <summary>
        /// When set, these settings are enabled. Default value is `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The unique ID of the LDAP setting.
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        /// <summary>
        /// Protects against LDAP poisoning by filtering out users exposed to vulnerabilities.  Default value is `true`.
        /// </summary>
        [Input("ldapPoisoningProtection")]
        public Input<bool>? LdapPoisoningProtection { get; set; }

        /// <summary>
        /// Location of the LDAP server in the following format: ldap://myserver:myport/dc=sampledomain,dc=com. The URL should include the base DN used to search for and/or authenticate users.
        /// </summary>
        [Input("ldapUrl", required: true)]
        public Input<string> LdapUrl { get; set; } = null!;

        /// <summary>
        /// The full DN of a user with permissions that allow querying the LDAP server. When working with LDAP Groups, the user should have permissions for any extra group attributes such as memberOf.
        /// </summary>
        [Input("managerDn")]
        public Input<string>? ManagerDn { get; set; }

        [Input("managerPassword")]
        private Input<string>? _managerPassword;

        /// <summary>
        /// The password of the user binding to the LDAP server when using "search" authentication.
        /// </summary>
        public Input<string>? ManagerPassword
        {
            get => _managerPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _managerPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// When set, supports paging results for the LDAP server. This feature requires that the LDAP Server supports a PagedResultsControl configuration.  Default value is `true`.
        /// </summary>
        [Input("pagingSupportEnabled")]
        public Input<bool>? PagingSupportEnabled { get; set; }

        /// <summary>
        /// The Context name in which to search relative to the base DN in the LDAP URL. Multiple search bases may be specified separated by a pipe ( | ).
        /// </summary>
        [Input("searchBase")]
        public Input<string>? SearchBase { get; set; }

        /// <summary>
        /// A filter expression used to search for the user DN that is used in LDAP authentication. This is an LDAP search filter (as defined in 'RFC 2254') with optional arguments. In this case, the username is the only argument, denoted by '{0}'. Possible examples are: uid={0}) - this would search for a username match on the uid attribute. Authentication using LDAP is performed from the DN found if successful. Default value is blank/empty.
        /// - Note: LDAP settings should provide a userDnPattern or a searchFilter (or both)
        /// </summary>
        [Input("searchFilter")]
        public Input<string>? SearchFilter { get; set; }

        /// <summary>
        /// When set, enables deep search through the sub-tree of the LDAP URL + Search Base.  Default value is `true`.
        /// </summary>
        [Input("searchSubTree")]
        public Input<bool>? SearchSubTree { get; set; }

        /// <summary>
        /// A DN pattern used to log users directly in to the LDAP database. This pattern is used to create a DN string for "direct" user authentication, and is relative to the base DN in the LDAP URL. The pattern argument {0} is replaced with the username at runtime. This only works if anonymous binding is allowed and a direct user DN can be used (which is not the default case for Active Directory). For example: uid={0},ou=People. Default value is blank/empty.
        /// - Note: LDAP settings should provide a userDnPattern or a searchFilter (or both).
        /// </summary>
        [Input("userDnPattern")]
        public Input<string>? UserDnPattern { get; set; }

        public LdapSettingArgs()
        {
        }
        public static new LdapSettingArgs Empty => new LdapSettingArgs();
    }

    public sealed class LdapSettingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When set, users created after logging in using LDAP will be able to access their profile page.  Default value is `false`.
        /// </summary>
        [Input("allowUserToAccessProfile")]
        public Input<bool>? AllowUserToAccessProfile { get; set; }

        /// <summary>
        /// When set, the system will automatically create new users for those who have logged in using LDAP, and assign them to the default groups.  Default value is `true`.
        /// </summary>
        [Input("autoCreateUser")]
        public Input<bool>? AutoCreateUser { get; set; }

        /// <summary>
        /// An attribute that can be used to map a user's email address to a user created automatically in Artifactory. Default value is `mail`.
        /// - Note: If blank/empty string input was set for email_attribute, Default value `mail` takes effect. This is to match with Artifactory behavior.
        /// </summary>
        [Input("emailAttribute")]
        public Input<string>? EmailAttribute { get; set; }

        /// <summary>
        /// When set, these settings are enabled. Default value is `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The unique ID of the LDAP setting.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// Protects against LDAP poisoning by filtering out users exposed to vulnerabilities.  Default value is `true`.
        /// </summary>
        [Input("ldapPoisoningProtection")]
        public Input<bool>? LdapPoisoningProtection { get; set; }

        /// <summary>
        /// Location of the LDAP server in the following format: ldap://myserver:myport/dc=sampledomain,dc=com. The URL should include the base DN used to search for and/or authenticate users.
        /// </summary>
        [Input("ldapUrl")]
        public Input<string>? LdapUrl { get; set; }

        /// <summary>
        /// The full DN of a user with permissions that allow querying the LDAP server. When working with LDAP Groups, the user should have permissions for any extra group attributes such as memberOf.
        /// </summary>
        [Input("managerDn")]
        public Input<string>? ManagerDn { get; set; }

        [Input("managerPassword")]
        private Input<string>? _managerPassword;

        /// <summary>
        /// The password of the user binding to the LDAP server when using "search" authentication.
        /// </summary>
        public Input<string>? ManagerPassword
        {
            get => _managerPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _managerPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// When set, supports paging results for the LDAP server. This feature requires that the LDAP Server supports a PagedResultsControl configuration.  Default value is `true`.
        /// </summary>
        [Input("pagingSupportEnabled")]
        public Input<bool>? PagingSupportEnabled { get; set; }

        /// <summary>
        /// The Context name in which to search relative to the base DN in the LDAP URL. Multiple search bases may be specified separated by a pipe ( | ).
        /// </summary>
        [Input("searchBase")]
        public Input<string>? SearchBase { get; set; }

        /// <summary>
        /// A filter expression used to search for the user DN that is used in LDAP authentication. This is an LDAP search filter (as defined in 'RFC 2254') with optional arguments. In this case, the username is the only argument, denoted by '{0}'. Possible examples are: uid={0}) - this would search for a username match on the uid attribute. Authentication using LDAP is performed from the DN found if successful. Default value is blank/empty.
        /// - Note: LDAP settings should provide a userDnPattern or a searchFilter (or both)
        /// </summary>
        [Input("searchFilter")]
        public Input<string>? SearchFilter { get; set; }

        /// <summary>
        /// When set, enables deep search through the sub-tree of the LDAP URL + Search Base.  Default value is `true`.
        /// </summary>
        [Input("searchSubTree")]
        public Input<bool>? SearchSubTree { get; set; }

        /// <summary>
        /// A DN pattern used to log users directly in to the LDAP database. This pattern is used to create a DN string for "direct" user authentication, and is relative to the base DN in the LDAP URL. The pattern argument {0} is replaced with the username at runtime. This only works if anonymous binding is allowed and a direct user DN can be used (which is not the default case for Active Directory). For example: uid={0},ou=People. Default value is blank/empty.
        /// - Note: LDAP settings should provide a userDnPattern or a searchFilter (or both).
        /// </summary>
        [Input("userDnPattern")]
        public Input<string>? UserDnPattern { get; set; }

        public LdapSettingState()
        {
        }
        public static new LdapSettingState Empty => new LdapSettingState();
    }
}
