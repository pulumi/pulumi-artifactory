// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Artifactory
{
    /// <summary>
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import artifactory:index/packageCleanupPolicy:PackageCleanupPolicy my-cleanup-policy my-policy
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import artifactory:index/packageCleanupPolicy:PackageCleanupPolicy my-cleanup-policy my-policy:myproj
    /// ```
    /// </summary>
    [ArtifactoryResourceType("artifactory:index/packageCleanupPolicy:PackageCleanupPolicy")]
    public partial class PackageCleanupPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The cron expression that determines when the policy is run, However if left empty the policy will not run automatically and can only be triggered manually.
        /// </summary>
        [Output("cronExpression")]
        public Output<string?> CronExpression { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The maximum duration (in minutes) for policy execution, after which the policy will stop running even if not completed. While setting a maximum run duration for a policy is useful for adhering to a strict cleanup schedule, it can cause the policy to stop before completion.
        /// </summary>
        [Output("durationInMinutes")]
        public Output<int> DurationInMinutes { get; private set; } = null!;

        /// <summary>
        /// A cleanup policy must be created inactive. But if used it must be set to `false`. If set to `true` when calling this API, the API call will fail and an error message is received. Defaults to `true`
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// An ID that is used to identify the cleanup policy. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// This attribute is used only for project-level cleanup policies, it is not used for global-level policies. When specified, the policy will be scoped to the specified project. Note: The policy `key` must start with this project key value as a prefix (e.g., if `project_key` is `"myproj"`, the `key` should be `"myproj-policy-name"`).
        /// </summary>
        [Output("projectKey")]
        public Output<string?> ProjectKey { get; private set; } = null!;

        [Output("searchCriteria")]
        public Output<Outputs.PackageCleanupPolicySearchCriteria> SearchCriteria { get; private set; } = null!;

        /// <summary>
        /// A true value means that when this policy is executed, packages will be permanently deleted. false means that when the policy is executed packages will be deleted to the Trash Can. Defaults to `false`.
        /// </summary>
        [Output("skipTrashcan")]
        public Output<bool> SkipTrashcan { get; private set; } = null!;


        /// <summary>
        /// Create a PackageCleanupPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PackageCleanupPolicy(string name, PackageCleanupPolicyArgs args, CustomResourceOptions? options = null)
            : base("artifactory:index/packageCleanupPolicy:PackageCleanupPolicy", name, args ?? new PackageCleanupPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PackageCleanupPolicy(string name, Input<string> id, PackageCleanupPolicyState? state = null, CustomResourceOptions? options = null)
            : base("artifactory:index/packageCleanupPolicy:PackageCleanupPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PackageCleanupPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PackageCleanupPolicy Get(string name, Input<string> id, PackageCleanupPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new PackageCleanupPolicy(name, id, state, options);
        }
    }

    public sealed class PackageCleanupPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The cron expression that determines when the policy is run, However if left empty the policy will not run automatically and can only be triggered manually.
        /// </summary>
        [Input("cronExpression")]
        public Input<string>? CronExpression { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The maximum duration (in minutes) for policy execution, after which the policy will stop running even if not completed. While setting a maximum run duration for a policy is useful for adhering to a strict cleanup schedule, it can cause the policy to stop before completion.
        /// </summary>
        [Input("durationInMinutes")]
        public Input<int>? DurationInMinutes { get; set; }

        /// <summary>
        /// A cleanup policy must be created inactive. But if used it must be set to `false`. If set to `true` when calling this API, the API call will fail and an error message is received. Defaults to `true`
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// An ID that is used to identify the cleanup policy. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        /// <summary>
        /// This attribute is used only for project-level cleanup policies, it is not used for global-level policies. When specified, the policy will be scoped to the specified project. Note: The policy `key` must start with this project key value as a prefix (e.g., if `project_key` is `"myproj"`, the `key` should be `"myproj-policy-name"`).
        /// </summary>
        [Input("projectKey")]
        public Input<string>? ProjectKey { get; set; }

        [Input("searchCriteria", required: true)]
        public Input<Inputs.PackageCleanupPolicySearchCriteriaArgs> SearchCriteria { get; set; } = null!;

        /// <summary>
        /// A true value means that when this policy is executed, packages will be permanently deleted. false means that when the policy is executed packages will be deleted to the Trash Can. Defaults to `false`.
        /// </summary>
        [Input("skipTrashcan")]
        public Input<bool>? SkipTrashcan { get; set; }

        public PackageCleanupPolicyArgs()
        {
        }
        public static new PackageCleanupPolicyArgs Empty => new PackageCleanupPolicyArgs();
    }

    public sealed class PackageCleanupPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The cron expression that determines when the policy is run, However if left empty the policy will not run automatically and can only be triggered manually.
        /// </summary>
        [Input("cronExpression")]
        public Input<string>? CronExpression { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The maximum duration (in minutes) for policy execution, after which the policy will stop running even if not completed. While setting a maximum run duration for a policy is useful for adhering to a strict cleanup schedule, it can cause the policy to stop before completion.
        /// </summary>
        [Input("durationInMinutes")]
        public Input<int>? DurationInMinutes { get; set; }

        /// <summary>
        /// A cleanup policy must be created inactive. But if used it must be set to `false`. If set to `true` when calling this API, the API call will fail and an error message is received. Defaults to `true`
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// An ID that is used to identify the cleanup policy. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// This attribute is used only for project-level cleanup policies, it is not used for global-level policies. When specified, the policy will be scoped to the specified project. Note: The policy `key` must start with this project key value as a prefix (e.g., if `project_key` is `"myproj"`, the `key` should be `"myproj-policy-name"`).
        /// </summary>
        [Input("projectKey")]
        public Input<string>? ProjectKey { get; set; }

        [Input("searchCriteria")]
        public Input<Inputs.PackageCleanupPolicySearchCriteriaGetArgs>? SearchCriteria { get; set; }

        /// <summary>
        /// A true value means that when this policy is executed, packages will be permanently deleted. false means that when the policy is executed packages will be deleted to the Trash Can. Defaults to `false`.
        /// </summary>
        [Input("skipTrashcan")]
        public Input<bool>? SkipTrashcan { get; set; }

        public PackageCleanupPolicyState()
        {
        }
        public static new PackageCleanupPolicyState Empty => new PackageCleanupPolicyState();
    }
}
