// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Artifactory
{
    /// <summary>
    /// Provides an Artifactory Package Cleanup Policy resource. This resource enable system administrators to define and customize policies based on specific criteria for removing unused binaries from across their JFrog platform. See [Rentation Policies](https://jfrog.com/help/r/jfrog-platform-administration-documentation/retention-policies) for more details.
    /// 
    /// -&gt;Only available for Artifactory 7.90.1 or later.
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import artifactory:index/packageCleanupPolicy:PackageCleanupPolicy my-cleanup-policy my-policy
    /// ```
    /// </summary>
    [ArtifactoryResourceType("artifactory:index/packageCleanupPolicy:PackageCleanupPolicy")]
    public partial class PackageCleanupPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Cron expression that sets the schedule of policy execution. For example, `0 0 2 * * ?` executes the policy every day at 02:00 AM. The minimum recurrent time for policy execution is 6 hours.
        /// </summary>
        [Output("cronExpression")]
        public Output<string?> CronExpression { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Enable and select the maximum duration for policy execution. Note: using this setting can cause the policy to stop before completion.
        /// </summary>
        [Output("durationInMinutes")]
        public Output<int?> DurationInMinutes { get; private set; } = null!;

        /// <summary>
        /// Enables or disabled the package cleanup policy. This allows the user to run the policy manually. If a policy has a valid cron expression, then it will be scheduled for execution based on it. If a policy is disabled, its future executions will be unscheduled. Defaults to `true`
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Policy key. It has to be unique. It should not be used for other policies and configuration entities like archive policies, key pairs, repo layouts, property sets, backups, proxies, reverse proxies etc.
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        [Output("searchCriteria")]
        public Output<Outputs.PackageCleanupPolicySearchCriteria> SearchCriteria { get; private set; } = null!;

        /// <summary>
        /// When enabled, deleted packages are permanently removed from Artifactory without an option to restore them. Defaults to `false`
        /// </summary>
        [Output("skipTrashcan")]
        public Output<bool> SkipTrashcan { get; private set; } = null!;


        /// <summary>
        /// Create a PackageCleanupPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PackageCleanupPolicy(string name, PackageCleanupPolicyArgs args, CustomResourceOptions? options = null)
            : base("artifactory:index/packageCleanupPolicy:PackageCleanupPolicy", name, args ?? new PackageCleanupPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PackageCleanupPolicy(string name, Input<string> id, PackageCleanupPolicyState? state = null, CustomResourceOptions? options = null)
            : base("artifactory:index/packageCleanupPolicy:PackageCleanupPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PackageCleanupPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PackageCleanupPolicy Get(string name, Input<string> id, PackageCleanupPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new PackageCleanupPolicy(name, id, state, options);
        }
    }

    public sealed class PackageCleanupPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Cron expression that sets the schedule of policy execution. For example, `0 0 2 * * ?` executes the policy every day at 02:00 AM. The minimum recurrent time for policy execution is 6 hours.
        /// </summary>
        [Input("cronExpression")]
        public Input<string>? CronExpression { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable and select the maximum duration for policy execution. Note: using this setting can cause the policy to stop before completion.
        /// </summary>
        [Input("durationInMinutes")]
        public Input<int>? DurationInMinutes { get; set; }

        /// <summary>
        /// Enables or disabled the package cleanup policy. This allows the user to run the policy manually. If a policy has a valid cron expression, then it will be scheduled for execution based on it. If a policy is disabled, its future executions will be unscheduled. Defaults to `true`
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Policy key. It has to be unique. It should not be used for other policies and configuration entities like archive policies, key pairs, repo layouts, property sets, backups, proxies, reverse proxies etc.
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        [Input("searchCriteria", required: true)]
        public Input<Inputs.PackageCleanupPolicySearchCriteriaArgs> SearchCriteria { get; set; } = null!;

        /// <summary>
        /// When enabled, deleted packages are permanently removed from Artifactory without an option to restore them. Defaults to `false`
        /// </summary>
        [Input("skipTrashcan")]
        public Input<bool>? SkipTrashcan { get; set; }

        public PackageCleanupPolicyArgs()
        {
        }
        public static new PackageCleanupPolicyArgs Empty => new PackageCleanupPolicyArgs();
    }

    public sealed class PackageCleanupPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Cron expression that sets the schedule of policy execution. For example, `0 0 2 * * ?` executes the policy every day at 02:00 AM. The minimum recurrent time for policy execution is 6 hours.
        /// </summary>
        [Input("cronExpression")]
        public Input<string>? CronExpression { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable and select the maximum duration for policy execution. Note: using this setting can cause the policy to stop before completion.
        /// </summary>
        [Input("durationInMinutes")]
        public Input<int>? DurationInMinutes { get; set; }

        /// <summary>
        /// Enables or disabled the package cleanup policy. This allows the user to run the policy manually. If a policy has a valid cron expression, then it will be scheduled for execution based on it. If a policy is disabled, its future executions will be unscheduled. Defaults to `true`
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Policy key. It has to be unique. It should not be used for other policies and configuration entities like archive policies, key pairs, repo layouts, property sets, backups, proxies, reverse proxies etc.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        [Input("searchCriteria")]
        public Input<Inputs.PackageCleanupPolicySearchCriteriaGetArgs>? SearchCriteria { get; set; }

        /// <summary>
        /// When enabled, deleted packages are permanently removed from Artifactory without an option to restore them. Defaults to `false`
        /// </summary>
        [Input("skipTrashcan")]
        public Input<bool>? SkipTrashcan { get; set; }

        public PackageCleanupPolicyState()
        {
        }
        public static new PackageCleanupPolicyState Empty => new PackageCleanupPolicyState();
    }
}
