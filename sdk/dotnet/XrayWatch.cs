// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Artifactory
{
    /// <summary>
    /// ## # Xray Watch Resource
    /// 
    /// Provides a Xray watch resource.
    /// 
    /// ## Import
    /// 
    /// Watches can be imported using their name, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import artifactory:index/xrayWatch:XrayWatch example watch-name
    /// ```
    /// </summary>
    [ArtifactoryResourceType("artifactory:index/xrayWatch:XrayWatch")]
    public partial class XrayWatch : Pulumi.CustomResource
    {
        /// <summary>
        /// Whether or not the watch will be active
        /// </summary>
        [Output("active")]
        public Output<bool?> Active { get; private set; } = null!;

        /// <summary>
        /// Nested argument describing policies that will be applied. Defined below.
        /// </summary>
        [Output("assignedPolicies")]
        public Output<ImmutableArray<Outputs.XrayWatchAssignedPolicy>> AssignedPolicies { get; private set; } = null!;

        /// <summary>
        /// Description of the watch
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Name of the watch (must be unique)
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Nested argument describing the resources to be watched. Defined below.
        /// </summary>
        [Output("resources")]
        public Output<ImmutableArray<Outputs.XrayWatchResource>> Resources { get; private set; } = null!;

        [Output("watchRecipients")]
        public Output<ImmutableArray<string>> WatchRecipients { get; private set; } = null!;


        /// <summary>
        /// Create a XrayWatch resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public XrayWatch(string name, XrayWatchArgs args, CustomResourceOptions? options = null)
            : base("artifactory:index/xrayWatch:XrayWatch", name, args ?? new XrayWatchArgs(), MakeResourceOptions(options, ""))
        {
        }

        private XrayWatch(string name, Input<string> id, XrayWatchState? state = null, CustomResourceOptions? options = null)
            : base("artifactory:index/xrayWatch:XrayWatch", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing XrayWatch resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static XrayWatch Get(string name, Input<string> id, XrayWatchState? state = null, CustomResourceOptions? options = null)
        {
            return new XrayWatch(name, id, state, options);
        }
    }

    public sealed class XrayWatchArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether or not the watch will be active
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        [Input("assignedPolicies", required: true)]
        private InputList<Inputs.XrayWatchAssignedPolicyArgs>? _assignedPolicies;

        /// <summary>
        /// Nested argument describing policies that will be applied. Defined below.
        /// </summary>
        public InputList<Inputs.XrayWatchAssignedPolicyArgs> AssignedPolicies
        {
            get => _assignedPolicies ?? (_assignedPolicies = new InputList<Inputs.XrayWatchAssignedPolicyArgs>());
            set => _assignedPolicies = value;
        }

        /// <summary>
        /// Description of the watch
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the watch (must be unique)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("resources", required: true)]
        private InputList<Inputs.XrayWatchResourceArgs>? _resources;

        /// <summary>
        /// Nested argument describing the resources to be watched. Defined below.
        /// </summary>
        public InputList<Inputs.XrayWatchResourceArgs> Resources
        {
            get => _resources ?? (_resources = new InputList<Inputs.XrayWatchResourceArgs>());
            set => _resources = value;
        }

        [Input("watchRecipients")]
        private InputList<string>? _watchRecipients;
        public InputList<string> WatchRecipients
        {
            get => _watchRecipients ?? (_watchRecipients = new InputList<string>());
            set => _watchRecipients = value;
        }

        public XrayWatchArgs()
        {
        }
    }

    public sealed class XrayWatchState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether or not the watch will be active
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        [Input("assignedPolicies")]
        private InputList<Inputs.XrayWatchAssignedPolicyGetArgs>? _assignedPolicies;

        /// <summary>
        /// Nested argument describing policies that will be applied. Defined below.
        /// </summary>
        public InputList<Inputs.XrayWatchAssignedPolicyGetArgs> AssignedPolicies
        {
            get => _assignedPolicies ?? (_assignedPolicies = new InputList<Inputs.XrayWatchAssignedPolicyGetArgs>());
            set => _assignedPolicies = value;
        }

        /// <summary>
        /// Description of the watch
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the watch (must be unique)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("resources")]
        private InputList<Inputs.XrayWatchResourceGetArgs>? _resources;

        /// <summary>
        /// Nested argument describing the resources to be watched. Defined below.
        /// </summary>
        public InputList<Inputs.XrayWatchResourceGetArgs> Resources
        {
            get => _resources ?? (_resources = new InputList<Inputs.XrayWatchResourceGetArgs>());
            set => _resources = value;
        }

        [Input("watchRecipients")]
        private InputList<string>? _watchRecipients;
        public InputList<string> WatchRecipients
        {
            get => _watchRecipients ?? (_watchRecipients = new InputList<string>());
            set => _watchRecipients = value;
        }

        public XrayWatchState()
        {
        }
    }
}
