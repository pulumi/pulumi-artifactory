// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Artifactory
{
    /// <summary>
    /// Provides an Artifactory Mail Server resource. This can be used to create and manage Artifactory mail server configuration.
    /// 
    /// ## Example Usage
    /// ### S
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Artifactory = Pulumi.Artifactory;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var mymailserver = new Artifactory.MailServer("mymailserver", new()
    ///     {
    ///         ArtifactoryUrl = "http://tempurl.org",
    ///         Enabled = true,
    ///         From = "test@jfrog.com",
    ///         Host = "http://tempurl.org",
    ///         Password = "test-password",
    ///         Port = 25,
    ///         SubjectPrefix = "[Test]",
    ///         UseSsl = true,
    ///         UseTls = true,
    ///         Username = "test-user",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import artifactory:index/mailServer:MailServer my-mail-server mymailserver
    /// ```
    /// 
    ///  ~&gt;The `password` attribute is not retrievable from Artifactory thus there will be state drift after importing this resource.
    /// </summary>
    [ArtifactoryResourceType("artifactory:index/mailServer:MailServer")]
    public partial class MailServer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Artifactory URL to to link to in all outgoing messages.
        /// </summary>
        [Output("artifactoryUrl")]
        public Output<string?> ArtifactoryUrl { get; private set; } = null!;

        /// <summary>
        /// When set, mail notifications are enabled.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The 'from' address header to use in all outgoing messages.
        /// </summary>
        [Output("from")]
        public Output<string?> From { get; private set; } = null!;

        /// <summary>
        /// The mail server IP address / DNS.
        /// </summary>
        [Output("host")]
        public Output<string> Host { get; private set; } = null!;

        /// <summary>
        /// The password for authentication with the mail server.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// The port number of the mail server.
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// A prefix to use for the subject of all outgoing mails.
        /// </summary>
        [Output("subjectPrefix")]
        public Output<string?> SubjectPrefix { get; private set; } = null!;

        /// <summary>
        /// When set to 'true', uses a secure connection to the mail server.
        /// </summary>
        [Output("useSsl")]
        public Output<bool> UseSsl { get; private set; } = null!;

        /// <summary>
        /// When set to 'true', uses Transport Layer Security when connecting to the mail server.
        /// </summary>
        [Output("useTls")]
        public Output<bool> UseTls { get; private set; } = null!;

        /// <summary>
        /// The username for authentication with the mail server.
        /// </summary>
        [Output("username")]
        public Output<string?> Username { get; private set; } = null!;


        /// <summary>
        /// Create a MailServer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MailServer(string name, MailServerArgs args, CustomResourceOptions? options = null)
            : base("artifactory:index/mailServer:MailServer", name, args ?? new MailServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MailServer(string name, Input<string> id, MailServerState? state = null, CustomResourceOptions? options = null)
            : base("artifactory:index/mailServer:MailServer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MailServer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MailServer Get(string name, Input<string> id, MailServerState? state = null, CustomResourceOptions? options = null)
        {
            return new MailServer(name, id, state, options);
        }
    }

    public sealed class MailServerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Artifactory URL to to link to in all outgoing messages.
        /// </summary>
        [Input("artifactoryUrl")]
        public Input<string>? ArtifactoryUrl { get; set; }

        /// <summary>
        /// When set, mail notifications are enabled.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// The 'from' address header to use in all outgoing messages.
        /// </summary>
        [Input("from")]
        public Input<string>? From { get; set; }

        /// <summary>
        /// The mail server IP address / DNS.
        /// </summary>
        [Input("host", required: true)]
        public Input<string> Host { get; set; } = null!;

        /// <summary>
        /// The password for authentication with the mail server.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// The port number of the mail server.
        /// </summary>
        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        /// <summary>
        /// A prefix to use for the subject of all outgoing mails.
        /// </summary>
        [Input("subjectPrefix")]
        public Input<string>? SubjectPrefix { get; set; }

        /// <summary>
        /// When set to 'true', uses a secure connection to the mail server.
        /// </summary>
        [Input("useSsl")]
        public Input<bool>? UseSsl { get; set; }

        /// <summary>
        /// When set to 'true', uses Transport Layer Security when connecting to the mail server.
        /// </summary>
        [Input("useTls")]
        public Input<bool>? UseTls { get; set; }

        /// <summary>
        /// The username for authentication with the mail server.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public MailServerArgs()
        {
        }
        public static new MailServerArgs Empty => new MailServerArgs();
    }

    public sealed class MailServerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Artifactory URL to to link to in all outgoing messages.
        /// </summary>
        [Input("artifactoryUrl")]
        public Input<string>? ArtifactoryUrl { get; set; }

        /// <summary>
        /// When set, mail notifications are enabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The 'from' address header to use in all outgoing messages.
        /// </summary>
        [Input("from")]
        public Input<string>? From { get; set; }

        /// <summary>
        /// The mail server IP address / DNS.
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// The password for authentication with the mail server.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// The port number of the mail server.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// A prefix to use for the subject of all outgoing mails.
        /// </summary>
        [Input("subjectPrefix")]
        public Input<string>? SubjectPrefix { get; set; }

        /// <summary>
        /// When set to 'true', uses a secure connection to the mail server.
        /// </summary>
        [Input("useSsl")]
        public Input<bool>? UseSsl { get; set; }

        /// <summary>
        /// When set to 'true', uses Transport Layer Security when connecting to the mail server.
        /// </summary>
        [Input("useTls")]
        public Input<bool>? UseTls { get; set; }

        /// <summary>
        /// The username for authentication with the mail server.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public MailServerState()
        {
        }
        public static new MailServerState Empty => new MailServerState();
    }
}
