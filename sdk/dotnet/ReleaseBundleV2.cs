// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Artifactory
{
    /// <summary>
    /// This resource enables you to creates a new Release Bundle v2, uniquely identified by a combination of repository key, name, and version. For more information, see [Understanding Release Bundles v2](https://jfrog.com/help/r/jfrog-artifactory-documentation/understanding-release-bundles-v2) and [REST API](https://jfrog.com/help/r/jfrog-rest-apis/create-release-bundle-v2-version).
    /// </summary>
    [ArtifactoryResourceType("artifactory:index/releaseBundleV2:ReleaseBundleV2")]
    public partial class ReleaseBundleV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Timestamp when the new version was created (ISO 8601 standard).
        /// </summary>
        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        /// <summary>
        /// The user who created the Release Bundle.
        /// </summary>
        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// Key-pair name to use for signature creation
        /// </summary>
        [Output("keypairName")]
        public Output<string> KeypairName { get; private set; } = null!;

        /// <summary>
        /// Name of Release Bundle
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Project key the Release Bundle belongs to
        /// </summary>
        [Output("projectKey")]
        public Output<string?> ProjectKey { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the Artifactory instance where the Release Bundle was created.
        /// </summary>
        [Output("serviceId")]
        public Output<string> ServiceId { get; private set; } = null!;

        /// <summary>
        /// Determines whether to skip the resolution of the Docker manifest, which adds the image layers to the Release Bundle. The default value is `false` (the manifest is resolved and image layers are included).
        /// </summary>
        [Output("skipDockerManifestResolution")]
        public Output<bool> SkipDockerManifestResolution { get; private set; } = null!;

        /// <summary>
        /// Defines specific repositories to include in the promotion. If this property is left undefined, all repositories (except those specifically excluded) are included in the promotion. Important: If one or more repositories are specifically included, all other repositories are excluded (regardless of what is defined in `excluded_repository_keys`).
        /// </summary>
        [Output("source")]
        public Output<Outputs.ReleaseBundleV2Source> Source { get; private set; } = null!;

        /// <summary>
        /// Source type. Valid values: `aql`, `artifacts`, `builds`, `release_bundles`
        /// </summary>
        [Output("sourceType")]
        public Output<string> SourceType { get; private set; } = null!;

        /// <summary>
        /// Version to promote
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a ReleaseBundleV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ReleaseBundleV2(string name, ReleaseBundleV2Args args, CustomResourceOptions? options = null)
            : base("artifactory:index/releaseBundleV2:ReleaseBundleV2", name, args ?? new ReleaseBundleV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private ReleaseBundleV2(string name, Input<string> id, ReleaseBundleV2State? state = null, CustomResourceOptions? options = null)
            : base("artifactory:index/releaseBundleV2:ReleaseBundleV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ReleaseBundleV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ReleaseBundleV2 Get(string name, Input<string> id, ReleaseBundleV2State? state = null, CustomResourceOptions? options = null)
        {
            return new ReleaseBundleV2(name, id, state, options);
        }
    }

    public sealed class ReleaseBundleV2Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Key-pair name to use for signature creation
        /// </summary>
        [Input("keypairName", required: true)]
        public Input<string> KeypairName { get; set; } = null!;

        /// <summary>
        /// Name of Release Bundle
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Project key the Release Bundle belongs to
        /// </summary>
        [Input("projectKey")]
        public Input<string>? ProjectKey { get; set; }

        /// <summary>
        /// Determines whether to skip the resolution of the Docker manifest, which adds the image layers to the Release Bundle. The default value is `false` (the manifest is resolved and image layers are included).
        /// </summary>
        [Input("skipDockerManifestResolution")]
        public Input<bool>? SkipDockerManifestResolution { get; set; }

        /// <summary>
        /// Defines specific repositories to include in the promotion. If this property is left undefined, all repositories (except those specifically excluded) are included in the promotion. Important: If one or more repositories are specifically included, all other repositories are excluded (regardless of what is defined in `excluded_repository_keys`).
        /// </summary>
        [Input("source", required: true)]
        public Input<Inputs.ReleaseBundleV2SourceArgs> Source { get; set; } = null!;

        /// <summary>
        /// Source type. Valid values: `aql`, `artifacts`, `builds`, `release_bundles`
        /// </summary>
        [Input("sourceType", required: true)]
        public Input<string> SourceType { get; set; } = null!;

        /// <summary>
        /// Version to promote
        /// </summary>
        [Input("version", required: true)]
        public Input<string> Version { get; set; } = null!;

        public ReleaseBundleV2Args()
        {
        }
        public static new ReleaseBundleV2Args Empty => new ReleaseBundleV2Args();
    }

    public sealed class ReleaseBundleV2State : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Timestamp when the new version was created (ISO 8601 standard).
        /// </summary>
        [Input("created")]
        public Input<string>? Created { get; set; }

        /// <summary>
        /// The user who created the Release Bundle.
        /// </summary>
        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// Key-pair name to use for signature creation
        /// </summary>
        [Input("keypairName")]
        public Input<string>? KeypairName { get; set; }

        /// <summary>
        /// Name of Release Bundle
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Project key the Release Bundle belongs to
        /// </summary>
        [Input("projectKey")]
        public Input<string>? ProjectKey { get; set; }

        /// <summary>
        /// The unique identifier of the Artifactory instance where the Release Bundle was created.
        /// </summary>
        [Input("serviceId")]
        public Input<string>? ServiceId { get; set; }

        /// <summary>
        /// Determines whether to skip the resolution of the Docker manifest, which adds the image layers to the Release Bundle. The default value is `false` (the manifest is resolved and image layers are included).
        /// </summary>
        [Input("skipDockerManifestResolution")]
        public Input<bool>? SkipDockerManifestResolution { get; set; }

        /// <summary>
        /// Defines specific repositories to include in the promotion. If this property is left undefined, all repositories (except those specifically excluded) are included in the promotion. Important: If one or more repositories are specifically included, all other repositories are excluded (regardless of what is defined in `excluded_repository_keys`).
        /// </summary>
        [Input("source")]
        public Input<Inputs.ReleaseBundleV2SourceGetArgs>? Source { get; set; }

        /// <summary>
        /// Source type. Valid values: `aql`, `artifacts`, `builds`, `release_bundles`
        /// </summary>
        [Input("sourceType")]
        public Input<string>? SourceType { get; set; }

        /// <summary>
        /// Version to promote
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public ReleaseBundleV2State()
        {
        }
        public static new ReleaseBundleV2State Empty => new ReleaseBundleV2State();
    }
}
