// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Artifactory
{
    /// <summary>
    /// ## # Artifactory keypair Resource
    /// 
    /// Creates an RSA Keypair resource - suitable for signing alpine indices.
    /// - Currently, only RSA is supported.
    /// - Passphrases are not currently supported, though they exist in the API
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.IO;
    /// using Pulumi;
    /// using Artifactory = Pulumi.Artifactory;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var some_keypair6543461672124900137 = new Artifactory.Keypair("some-keypair6543461672124900137", new Artifactory.KeypairArgs
    ///         {
    ///             PairName = "some-keypair6543461672124900137",
    ///             PairType = "RSA",
    ///             Alias = "foo-alias6543461672124900137",
    ///             PrivateKey = File.ReadAllText("samples/rsa.priv"),
    ///             PublicKey = File.ReadAllText("samples/rsa.pub"),
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [ArtifactoryResourceType("artifactory:index/keypair:Keypair")]
    public partial class Keypair : Pulumi.CustomResource
    {
        /// <summary>
        /// Required but for unknown reasons
        /// </summary>
        [Output("alias")]
        public Output<string> Alias { get; private set; } = null!;

        /// <summary>
        /// name of the key pair and the identity of the resource.
        /// </summary>
        [Output("pairName")]
        public Output<string> PairName { get; private set; } = null!;

        /// <summary>
        /// RT requires this - presumably for verification purposes.
        /// </summary>
        [Output("pairType")]
        public Output<string> PairType { get; private set; } = null!;

        /// <summary>
        /// - This will be used to decrypt the private key. Validated server side.
        /// </summary>
        [Output("passphrase")]
        public Output<string?> Passphrase { get; private set; } = null!;

        /// <summary>
        /// - duh! This will have it's pem format validated
        /// </summary>
        [Output("privateKey")]
        public Output<string> PrivateKey { get; private set; } = null!;

        /// <summary>
        /// - duh! This will have it's pem format validated
        /// </summary>
        [Output("publicKey")]
        public Output<string> PublicKey { get; private set; } = null!;

        /// <summary>
        /// - it's unknown what this does, but, it's returned in the payload and there is no known place to set it in the UI
        /// </summary>
        [Output("unavailable")]
        public Output<bool> Unavailable { get; private set; } = null!;


        /// <summary>
        /// Create a Keypair resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Keypair(string name, KeypairArgs args, CustomResourceOptions? options = null)
            : base("artifactory:index/keypair:Keypair", name, args ?? new KeypairArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Keypair(string name, Input<string> id, KeypairState? state = null, CustomResourceOptions? options = null)
            : base("artifactory:index/keypair:Keypair", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Keypair resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Keypair Get(string name, Input<string> id, KeypairState? state = null, CustomResourceOptions? options = null)
        {
            return new Keypair(name, id, state, options);
        }
    }

    public sealed class KeypairArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Required but for unknown reasons
        /// </summary>
        [Input("alias", required: true)]
        public Input<string> Alias { get; set; } = null!;

        /// <summary>
        /// name of the key pair and the identity of the resource.
        /// </summary>
        [Input("pairName", required: true)]
        public Input<string> PairName { get; set; } = null!;

        /// <summary>
        /// RT requires this - presumably for verification purposes.
        /// </summary>
        [Input("pairType", required: true)]
        public Input<string> PairType { get; set; } = null!;

        /// <summary>
        /// - This will be used to decrypt the private key. Validated server side.
        /// </summary>
        [Input("passphrase")]
        public Input<string>? Passphrase { get; set; }

        /// <summary>
        /// - duh! This will have it's pem format validated
        /// </summary>
        [Input("privateKey", required: true)]
        public Input<string> PrivateKey { get; set; } = null!;

        /// <summary>
        /// - duh! This will have it's pem format validated
        /// </summary>
        [Input("publicKey", required: true)]
        public Input<string> PublicKey { get; set; } = null!;

        public KeypairArgs()
        {
        }
    }

    public sealed class KeypairState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Required but for unknown reasons
        /// </summary>
        [Input("alias")]
        public Input<string>? Alias { get; set; }

        /// <summary>
        /// name of the key pair and the identity of the resource.
        /// </summary>
        [Input("pairName")]
        public Input<string>? PairName { get; set; }

        /// <summary>
        /// RT requires this - presumably for verification purposes.
        /// </summary>
        [Input("pairType")]
        public Input<string>? PairType { get; set; }

        /// <summary>
        /// - This will be used to decrypt the private key. Validated server side.
        /// </summary>
        [Input("passphrase")]
        public Input<string>? Passphrase { get; set; }

        /// <summary>
        /// - duh! This will have it's pem format validated
        /// </summary>
        [Input("privateKey")]
        public Input<string>? PrivateKey { get; set; }

        /// <summary>
        /// - duh! This will have it's pem format validated
        /// </summary>
        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        /// <summary>
        /// - it's unknown what this does, but, it's returned in the payload and there is no known place to set it in the UI
        /// </summary>
        [Input("unavailable")]
        public Input<bool>? Unavailable { get; set; }

        public KeypairState()
        {
        }
    }
}
