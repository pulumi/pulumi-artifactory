// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Artifactory
{
    /// <summary>
    /// Provides an Artifactory Archive Policy resource. This resource enable system administrators to configure and maintain JFrog cleanup policies for Release Bundles V2. See [Cleanup Policies](https://jfrog.com/help/r/jfrog-rest-apis/cleanup-policies-release-bundles-v2-apis) for more details.
    /// 
    /// ~&gt;Release Bundles V2 Cleanup Policies APIs are supported on Artifactory version 7.104.2 and later.
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import artifactory:index/releaseBundleV2CleanupPolicy:ReleaseBundleV2CleanupPolicy my-cleanup-policy my-policy
    /// ```
    /// </summary>
    [ArtifactoryResourceType("artifactory:index/releaseBundleV2CleanupPolicy:ReleaseBundleV2CleanupPolicy")]
    public partial class ReleaseBundleV2CleanupPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The cron expression determines when the policy is run. This parameter is not mandatory, however if left empty the policy will not run automatically and can only be triggered manually.
        /// </summary>
        [Output("cronExpression")]
        public Output<string?> CronExpression { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The maximum duration (in minutes) for policy execution, after which the policy will stop running even if not completed. While setting a maximum run duration for a policy is useful for adhering to a strict archive V2 schedule, it can cause the policy to stop before completion.
        /// </summary>
        [Output("durationInMinutes")]
        public Output<int?> DurationInMinutes { get; private set; } = null!;

        /// <summary>
        /// Enables or disabled the release bundles v2 cleanup policy. This allows the user to run the policy manually. If a policy has a valid cron expression, then it will be scheduled for execution based on it. If a policy is disabled, its future executions will be unscheduled. Defaults to `True`
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Needs to be set to releaseBundle.
        /// </summary>
        [Output("itemType")]
        public Output<string> ItemType { get; private set; } = null!;

        /// <summary>
        /// An ID that is used to identify the cleanup policy. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        [Output("searchCriteria")]
        public Output<Outputs.ReleaseBundleV2CleanupPolicySearchCriteria> SearchCriteria { get; private set; } = null!;


        /// <summary>
        /// Create a ReleaseBundleV2CleanupPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ReleaseBundleV2CleanupPolicy(string name, ReleaseBundleV2CleanupPolicyArgs args, CustomResourceOptions? options = null)
            : base("artifactory:index/releaseBundleV2CleanupPolicy:ReleaseBundleV2CleanupPolicy", name, args ?? new ReleaseBundleV2CleanupPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ReleaseBundleV2CleanupPolicy(string name, Input<string> id, ReleaseBundleV2CleanupPolicyState? state = null, CustomResourceOptions? options = null)
            : base("artifactory:index/releaseBundleV2CleanupPolicy:ReleaseBundleV2CleanupPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ReleaseBundleV2CleanupPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ReleaseBundleV2CleanupPolicy Get(string name, Input<string> id, ReleaseBundleV2CleanupPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new ReleaseBundleV2CleanupPolicy(name, id, state, options);
        }
    }

    public sealed class ReleaseBundleV2CleanupPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The cron expression determines when the policy is run. This parameter is not mandatory, however if left empty the policy will not run automatically and can only be triggered manually.
        /// </summary>
        [Input("cronExpression")]
        public Input<string>? CronExpression { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The maximum duration (in minutes) for policy execution, after which the policy will stop running even if not completed. While setting a maximum run duration for a policy is useful for adhering to a strict archive V2 schedule, it can cause the policy to stop before completion.
        /// </summary>
        [Input("durationInMinutes")]
        public Input<int>? DurationInMinutes { get; set; }

        /// <summary>
        /// Enables or disabled the release bundles v2 cleanup policy. This allows the user to run the policy manually. If a policy has a valid cron expression, then it will be scheduled for execution based on it. If a policy is disabled, its future executions will be unscheduled. Defaults to `True`
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Needs to be set to releaseBundle.
        /// </summary>
        [Input("itemType")]
        public Input<string>? ItemType { get; set; }

        /// <summary>
        /// An ID that is used to identify the cleanup policy. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        [Input("searchCriteria", required: true)]
        public Input<Inputs.ReleaseBundleV2CleanupPolicySearchCriteriaArgs> SearchCriteria { get; set; } = null!;

        public ReleaseBundleV2CleanupPolicyArgs()
        {
        }
        public static new ReleaseBundleV2CleanupPolicyArgs Empty => new ReleaseBundleV2CleanupPolicyArgs();
    }

    public sealed class ReleaseBundleV2CleanupPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The cron expression determines when the policy is run. This parameter is not mandatory, however if left empty the policy will not run automatically and can only be triggered manually.
        /// </summary>
        [Input("cronExpression")]
        public Input<string>? CronExpression { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The maximum duration (in minutes) for policy execution, after which the policy will stop running even if not completed. While setting a maximum run duration for a policy is useful for adhering to a strict archive V2 schedule, it can cause the policy to stop before completion.
        /// </summary>
        [Input("durationInMinutes")]
        public Input<int>? DurationInMinutes { get; set; }

        /// <summary>
        /// Enables or disabled the release bundles v2 cleanup policy. This allows the user to run the policy manually. If a policy has a valid cron expression, then it will be scheduled for execution based on it. If a policy is disabled, its future executions will be unscheduled. Defaults to `True`
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Needs to be set to releaseBundle.
        /// </summary>
        [Input("itemType")]
        public Input<string>? ItemType { get; set; }

        /// <summary>
        /// An ID that is used to identify the cleanup policy. A minimum of three characters is required and can include letters, numbers, underscore and hyphen.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        [Input("searchCriteria")]
        public Input<Inputs.ReleaseBundleV2CleanupPolicySearchCriteriaGetArgs>? SearchCriteria { get; set; }

        public ReleaseBundleV2CleanupPolicyState()
        {
        }
        public static new ReleaseBundleV2CleanupPolicyState Empty => new ReleaseBundleV2CleanupPolicyState();
    }
}
