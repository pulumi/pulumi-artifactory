// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Artifactory
{
    public static class GetLocalRpmRepository
    {
        /// <summary>
        /// Retrieves a local RPM repository.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Artifactory = Pulumi.Artifactory;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var local_test_rpm_repo_basic = Artifactory.GetLocalRpmRepository.Invoke(new()
        ///     {
        ///         Key = "local-test-rpm-repo-basic",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetLocalRpmRepositoryResult> InvokeAsync(GetLocalRpmRepositoryArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLocalRpmRepositoryResult>("artifactory:index/getLocalRpmRepository:getLocalRpmRepository", args ?? new GetLocalRpmRepositoryArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves a local RPM repository.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Artifactory = Pulumi.Artifactory;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var local_test_rpm_repo_basic = Artifactory.GetLocalRpmRepository.Invoke(new()
        ///     {
        ///         Key = "local-test-rpm-repo-basic",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLocalRpmRepositoryResult> Invoke(GetLocalRpmRepositoryInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLocalRpmRepositoryResult>("artifactory:index/getLocalRpmRepository:getLocalRpmRepository", args ?? new GetLocalRpmRepositoryInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLocalRpmRepositoryArgs : global::Pulumi.InvokeArgs
    {
        [Input("archiveBrowsingEnabled")]
        public bool? ArchiveBrowsingEnabled { get; set; }

        [Input("blackedOut")]
        public bool? BlackedOut { get; set; }

        /// <summary>
        /// Default: `false`.
        /// </summary>
        [Input("calculateYumMetadata")]
        public bool? CalculateYumMetadata { get; set; }

        [Input("cdnRedirect")]
        public bool? CdnRedirect { get; set; }

        [Input("description")]
        public string? Description { get; set; }

        [Input("downloadDirect")]
        public bool? DownloadDirect { get; set; }

        /// <summary>
        /// Default: `false`.
        /// </summary>
        [Input("enableFileListsIndexing")]
        public bool? EnableFileListsIndexing { get; set; }

        [Input("excludesPattern")]
        public string? ExcludesPattern { get; set; }

        [Input("includesPattern")]
        public string? IncludesPattern { get; set; }

        /// <summary>
        /// the identity key of the repo.
        /// </summary>
        [Input("key", required: true)]
        public string Key { get; set; } = null!;

        [Input("notes")]
        public string? Notes { get; set; }

        /// <summary>
        /// The primary GPG key to be used to sign packages.
        /// </summary>
        [Input("primaryKeypairRef")]
        public string? PrimaryKeypairRef { get; set; }

        [Input("priorityResolution")]
        public bool? PriorityResolution { get; set; }

        [Input("projectEnvironments")]
        private List<string>? _projectEnvironments;
        public List<string> ProjectEnvironments
        {
            get => _projectEnvironments ?? (_projectEnvironments = new List<string>());
            set => _projectEnvironments = value;
        }

        [Input("projectKey")]
        public string? ProjectKey { get; set; }

        [Input("propertySets")]
        private List<string>? _propertySets;
        public List<string> PropertySets
        {
            get => _propertySets ?? (_propertySets = new List<string>());
            set => _propertySets = value;
        }

        [Input("repoLayoutRef")]
        public string? RepoLayoutRef { get; set; }

        /// <summary>
        /// The secondary GPG key to be used to sign packages.
        /// </summary>
        [Input("secondaryKeypairRef")]
        public string? SecondaryKeypairRef { get; set; }

        [Input("xrayIndex")]
        public bool? XrayIndex { get; set; }

        /// <summary>
        /// A comma separated list of XML file names containing RPM group component
        /// definitions. Artifactory includes the group definitions as part of the calculated RPM metadata, as well as
        /// automatically generating a gzipped version of the group files, if required. Default is empty string.
        /// </summary>
        [Input("yumGroupFileNames")]
        public string? YumGroupFileNames { get; set; }

        /// <summary>
        /// The depth, relative to the repository's root folder, where RPM metadata is created. This
        /// is useful when your repository contains multiple RPM repositories under parallel hierarchies. For example, if your
        /// RPMs are stored under 'fedora/linux/$releasever/$basearch', specify a depth of 4. Once the number of snapshots exceeds
        /// this setting, older versions are removed. A value of 0 (default) indicates there is no limit, and unique snapshots are
        /// not cleaned up.
        /// </summary>
        [Input("yumRootDepth")]
        public int? YumRootDepth { get; set; }

        public GetLocalRpmRepositoryArgs()
        {
        }
        public static new GetLocalRpmRepositoryArgs Empty => new GetLocalRpmRepositoryArgs();
    }

    public sealed class GetLocalRpmRepositoryInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("archiveBrowsingEnabled")]
        public Input<bool>? ArchiveBrowsingEnabled { get; set; }

        [Input("blackedOut")]
        public Input<bool>? BlackedOut { get; set; }

        /// <summary>
        /// Default: `false`.
        /// </summary>
        [Input("calculateYumMetadata")]
        public Input<bool>? CalculateYumMetadata { get; set; }

        [Input("cdnRedirect")]
        public Input<bool>? CdnRedirect { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("downloadDirect")]
        public Input<bool>? DownloadDirect { get; set; }

        /// <summary>
        /// Default: `false`.
        /// </summary>
        [Input("enableFileListsIndexing")]
        public Input<bool>? EnableFileListsIndexing { get; set; }

        [Input("excludesPattern")]
        public Input<string>? ExcludesPattern { get; set; }

        [Input("includesPattern")]
        public Input<string>? IncludesPattern { get; set; }

        /// <summary>
        /// the identity key of the repo.
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        [Input("notes")]
        public Input<string>? Notes { get; set; }

        /// <summary>
        /// The primary GPG key to be used to sign packages.
        /// </summary>
        [Input("primaryKeypairRef")]
        public Input<string>? PrimaryKeypairRef { get; set; }

        [Input("priorityResolution")]
        public Input<bool>? PriorityResolution { get; set; }

        [Input("projectEnvironments")]
        private InputList<string>? _projectEnvironments;
        public InputList<string> ProjectEnvironments
        {
            get => _projectEnvironments ?? (_projectEnvironments = new InputList<string>());
            set => _projectEnvironments = value;
        }

        [Input("projectKey")]
        public Input<string>? ProjectKey { get; set; }

        [Input("propertySets")]
        private InputList<string>? _propertySets;
        public InputList<string> PropertySets
        {
            get => _propertySets ?? (_propertySets = new InputList<string>());
            set => _propertySets = value;
        }

        [Input("repoLayoutRef")]
        public Input<string>? RepoLayoutRef { get; set; }

        /// <summary>
        /// The secondary GPG key to be used to sign packages.
        /// </summary>
        [Input("secondaryKeypairRef")]
        public Input<string>? SecondaryKeypairRef { get; set; }

        [Input("xrayIndex")]
        public Input<bool>? XrayIndex { get; set; }

        /// <summary>
        /// A comma separated list of XML file names containing RPM group component
        /// definitions. Artifactory includes the group definitions as part of the calculated RPM metadata, as well as
        /// automatically generating a gzipped version of the group files, if required. Default is empty string.
        /// </summary>
        [Input("yumGroupFileNames")]
        public Input<string>? YumGroupFileNames { get; set; }

        /// <summary>
        /// The depth, relative to the repository's root folder, where RPM metadata is created. This
        /// is useful when your repository contains multiple RPM repositories under parallel hierarchies. For example, if your
        /// RPMs are stored under 'fedora/linux/$releasever/$basearch', specify a depth of 4. Once the number of snapshots exceeds
        /// this setting, older versions are removed. A value of 0 (default) indicates there is no limit, and unique snapshots are
        /// not cleaned up.
        /// </summary>
        [Input("yumRootDepth")]
        public Input<int>? YumRootDepth { get; set; }

        public GetLocalRpmRepositoryInvokeArgs()
        {
        }
        public static new GetLocalRpmRepositoryInvokeArgs Empty => new GetLocalRpmRepositoryInvokeArgs();
    }


    [OutputType]
    public sealed class GetLocalRpmRepositoryResult
    {
        public readonly bool? ArchiveBrowsingEnabled;
        public readonly bool? BlackedOut;
        /// <summary>
        /// Default: `false`.
        /// </summary>
        public readonly bool? CalculateYumMetadata;
        public readonly bool? CdnRedirect;
        public readonly string? Description;
        public readonly bool? DownloadDirect;
        /// <summary>
        /// Default: `false`.
        /// </summary>
        public readonly bool? EnableFileListsIndexing;
        public readonly string? ExcludesPattern;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? IncludesPattern;
        public readonly string Key;
        public readonly string? Notes;
        public readonly string PackageType;
        /// <summary>
        /// The primary GPG key to be used to sign packages.
        /// </summary>
        public readonly string? PrimaryKeypairRef;
        public readonly bool? PriorityResolution;
        public readonly ImmutableArray<string> ProjectEnvironments;
        public readonly string? ProjectKey;
        public readonly ImmutableArray<string> PropertySets;
        public readonly string? RepoLayoutRef;
        /// <summary>
        /// The secondary GPG key to be used to sign packages.
        /// </summary>
        public readonly string? SecondaryKeypairRef;
        public readonly bool? XrayIndex;
        /// <summary>
        /// A comma separated list of XML file names containing RPM group component
        /// definitions. Artifactory includes the group definitions as part of the calculated RPM metadata, as well as
        /// automatically generating a gzipped version of the group files, if required. Default is empty string.
        /// </summary>
        public readonly string? YumGroupFileNames;
        /// <summary>
        /// The depth, relative to the repository's root folder, where RPM metadata is created. This
        /// is useful when your repository contains multiple RPM repositories under parallel hierarchies. For example, if your
        /// RPMs are stored under 'fedora/linux/$releasever/$basearch', specify a depth of 4. Once the number of snapshots exceeds
        /// this setting, older versions are removed. A value of 0 (default) indicates there is no limit, and unique snapshots are
        /// not cleaned up.
        /// </summary>
        public readonly int? YumRootDepth;

        [OutputConstructor]
        private GetLocalRpmRepositoryResult(
            bool? archiveBrowsingEnabled,

            bool? blackedOut,

            bool? calculateYumMetadata,

            bool? cdnRedirect,

            string? description,

            bool? downloadDirect,

            bool? enableFileListsIndexing,

            string? excludesPattern,

            string id,

            string? includesPattern,

            string key,

            string? notes,

            string packageType,

            string? primaryKeypairRef,

            bool? priorityResolution,

            ImmutableArray<string> projectEnvironments,

            string? projectKey,

            ImmutableArray<string> propertySets,

            string? repoLayoutRef,

            string? secondaryKeypairRef,

            bool? xrayIndex,

            string? yumGroupFileNames,

            int? yumRootDepth)
        {
            ArchiveBrowsingEnabled = archiveBrowsingEnabled;
            BlackedOut = blackedOut;
            CalculateYumMetadata = calculateYumMetadata;
            CdnRedirect = cdnRedirect;
            Description = description;
            DownloadDirect = downloadDirect;
            EnableFileListsIndexing = enableFileListsIndexing;
            ExcludesPattern = excludesPattern;
            Id = id;
            IncludesPattern = includesPattern;
            Key = key;
            Notes = notes;
            PackageType = packageType;
            PrimaryKeypairRef = primaryKeypairRef;
            PriorityResolution = priorityResolution;
            ProjectEnvironments = projectEnvironments;
            ProjectKey = projectKey;
            PropertySets = propertySets;
            RepoLayoutRef = repoLayoutRef;
            SecondaryKeypairRef = secondaryKeypairRef;
            XrayIndex = xrayIndex;
            YumGroupFileNames = yumGroupFileNames;
            YumRootDepth = yumRootDepth;
        }
    }
}
