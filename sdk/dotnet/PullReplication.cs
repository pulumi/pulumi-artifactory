// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Artifactory
{
    [ArtifactoryResourceType("artifactory:index/pullReplication:PullReplication")]
    public partial class PullReplication : global::Pulumi.CustomResource
    {
        /// <summary>
        /// When true, enables distributed checksum storage. For more information, see [Optimizing Repository Replication with
        /// Checksum-Based
        /// Storage](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-OptimizingRepositoryReplicationUsingStorageLevelSynchronizationOptions).
        /// </summary>
        [Output("checkBinaryExistenceInFilestore")]
        public Output<bool?> CheckBinaryExistenceInFilestore { get; private set; } = null!;

        /// <summary>
        /// The Cron expression that determines when the next replication will be triggered.
        /// </summary>
        [Output("cronExp")]
        public Output<string?> CronExp { get; private set; } = null!;

        /// <summary>
        /// When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on
        /// artifact, e.g. add, deleted or property change. Default value is `false`.
        /// </summary>
        [Output("enableEventReplication")]
        public Output<bool?> EnableEventReplication { get; private set; } = null!;

        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Password for local repository replication. Required for local repository, but not needed for remote repository.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        [Output("pathPrefix")]
        public Output<string?> PathPrefix { get; private set; } = null!;

        /// <summary>
        /// Proxy key from Artifactory Proxies setting
        /// </summary>
        [Output("proxy")]
        public Output<string?> Proxy { get; private set; } = null!;

        /// <summary>
        /// Repository name.
        /// </summary>
        [Output("repoKey")]
        public Output<string> RepoKey { get; private set; } = null!;

        [Output("socketTimeoutMillis")]
        public Output<int> SocketTimeoutMillis { get; private set; } = null!;

        [Output("syncDeletes")]
        public Output<bool> SyncDeletes { get; private set; } = null!;

        [Output("syncProperties")]
        public Output<bool> SyncProperties { get; private set; } = null!;

        [Output("syncStatistics")]
        public Output<bool> SyncStatistics { get; private set; } = null!;

        /// <summary>
        /// URL for local repository replication. Required for local repository, but not needed for remote repository.
        /// </summary>
        [Output("url")]
        public Output<string?> Url { get; private set; } = null!;

        /// <summary>
        /// Username for local repository replication. Required for local repository, but not needed for remote repository.
        /// </summary>
        [Output("username")]
        public Output<string?> Username { get; private set; } = null!;


        /// <summary>
        /// Create a PullReplication resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PullReplication(string name, PullReplicationArgs args, CustomResourceOptions? options = null)
            : base("artifactory:index/pullReplication:PullReplication", name, args ?? new PullReplicationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PullReplication(string name, Input<string> id, PullReplicationState? state = null, CustomResourceOptions? options = null)
            : base("artifactory:index/pullReplication:PullReplication", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PullReplication resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PullReplication Get(string name, Input<string> id, PullReplicationState? state = null, CustomResourceOptions? options = null)
        {
            return new PullReplication(name, id, state, options);
        }
    }

    public sealed class PullReplicationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When true, enables distributed checksum storage. For more information, see [Optimizing Repository Replication with
        /// Checksum-Based
        /// Storage](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-OptimizingRepositoryReplicationUsingStorageLevelSynchronizationOptions).
        /// </summary>
        [Input("checkBinaryExistenceInFilestore")]
        public Input<bool>? CheckBinaryExistenceInFilestore { get; set; }

        /// <summary>
        /// The Cron expression that determines when the next replication will be triggered.
        /// </summary>
        [Input("cronExp")]
        public Input<string>? CronExp { get; set; }

        /// <summary>
        /// When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on
        /// artifact, e.g. add, deleted or property change. Default value is `false`.
        /// </summary>
        [Input("enableEventReplication")]
        public Input<bool>? EnableEventReplication { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Password for local repository replication. Required for local repository, but not needed for remote repository.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("pathPrefix")]
        public Input<string>? PathPrefix { get; set; }

        /// <summary>
        /// Proxy key from Artifactory Proxies setting
        /// </summary>
        [Input("proxy")]
        public Input<string>? Proxy { get; set; }

        /// <summary>
        /// Repository name.
        /// </summary>
        [Input("repoKey", required: true)]
        public Input<string> RepoKey { get; set; } = null!;

        [Input("socketTimeoutMillis")]
        public Input<int>? SocketTimeoutMillis { get; set; }

        [Input("syncDeletes")]
        public Input<bool>? SyncDeletes { get; set; }

        [Input("syncProperties")]
        public Input<bool>? SyncProperties { get; set; }

        [Input("syncStatistics")]
        public Input<bool>? SyncStatistics { get; set; }

        /// <summary>
        /// URL for local repository replication. Required for local repository, but not needed for remote repository.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        /// <summary>
        /// Username for local repository replication. Required for local repository, but not needed for remote repository.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public PullReplicationArgs()
        {
        }
        public static new PullReplicationArgs Empty => new PullReplicationArgs();
    }

    public sealed class PullReplicationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When true, enables distributed checksum storage. For more information, see [Optimizing Repository Replication with
        /// Checksum-Based
        /// Storage](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-OptimizingRepositoryReplicationUsingStorageLevelSynchronizationOptions).
        /// </summary>
        [Input("checkBinaryExistenceInFilestore")]
        public Input<bool>? CheckBinaryExistenceInFilestore { get; set; }

        /// <summary>
        /// The Cron expression that determines when the next replication will be triggered.
        /// </summary>
        [Input("cronExp")]
        public Input<string>? CronExp { get; set; }

        /// <summary>
        /// When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on
        /// artifact, e.g. add, deleted or property change. Default value is `false`.
        /// </summary>
        [Input("enableEventReplication")]
        public Input<bool>? EnableEventReplication { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Password for local repository replication. Required for local repository, but not needed for remote repository.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("pathPrefix")]
        public Input<string>? PathPrefix { get; set; }

        /// <summary>
        /// Proxy key from Artifactory Proxies setting
        /// </summary>
        [Input("proxy")]
        public Input<string>? Proxy { get; set; }

        /// <summary>
        /// Repository name.
        /// </summary>
        [Input("repoKey")]
        public Input<string>? RepoKey { get; set; }

        [Input("socketTimeoutMillis")]
        public Input<int>? SocketTimeoutMillis { get; set; }

        [Input("syncDeletes")]
        public Input<bool>? SyncDeletes { get; set; }

        [Input("syncProperties")]
        public Input<bool>? SyncProperties { get; set; }

        [Input("syncStatistics")]
        public Input<bool>? SyncStatistics { get; set; }

        /// <summary>
        /// URL for local repository replication. Required for local repository, but not needed for remote repository.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        /// <summary>
        /// Username for local repository replication. Required for local repository, but not needed for remote repository.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public PullReplicationState()
        {
        }
        public static new PullReplicationState Empty => new PullReplicationState();
    }
}
