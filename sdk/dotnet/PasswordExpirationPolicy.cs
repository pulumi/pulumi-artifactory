// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Artifactory
{
    /// <summary>
    /// Provides an Artifactory Password Expiration Policy resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Artifactory = Pulumi.Artifactory;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var my_password_expiration_policy = new Artifactory.PasswordExpirationPolicy("my-password-expiration-policy", new()
    ///     {
    ///         Name = "my-password-expiration-policy",
    ///         Enabled = true,
    ///         PasswordMaxAge = 120,
    ///         NotifyByEmail = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import artifactory:index/passwordExpirationPolicy:PasswordExpirationPolicy my-password-expiration-policy my-password-expiration-policy
    /// ```
    /// </summary>
    [ArtifactoryResourceType("artifactory:index/passwordExpirationPolicy:PasswordExpirationPolicy")]
    public partial class PasswordExpirationPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable Password Expiration Policy. This only applies to internal user passwords.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Name of the resource. Only used for importing.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Send mail notification before password expiration. Users will receive an email notification X days before password will expire. Mail server must be enabled and configured correctly.
        /// </summary>
        [Output("notifyByEmail")]
        public Output<bool> NotifyByEmail { get; private set; } = null!;

        /// <summary>
        /// Password expires every N days. The time interval in which users will be obligated to change their password.
        /// </summary>
        [Output("passwordMaxAge")]
        public Output<int> PasswordMaxAge { get; private set; } = null!;


        /// <summary>
        /// Create a PasswordExpirationPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PasswordExpirationPolicy(string name, PasswordExpirationPolicyArgs args, CustomResourceOptions? options = null)
            : base("artifactory:index/passwordExpirationPolicy:PasswordExpirationPolicy", name, args ?? new PasswordExpirationPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PasswordExpirationPolicy(string name, Input<string> id, PasswordExpirationPolicyState? state = null, CustomResourceOptions? options = null)
            : base("artifactory:index/passwordExpirationPolicy:PasswordExpirationPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PasswordExpirationPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PasswordExpirationPolicy Get(string name, Input<string> id, PasswordExpirationPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new PasswordExpirationPolicy(name, id, state, options);
        }
    }

    public sealed class PasswordExpirationPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable Password Expiration Policy. This only applies to internal user passwords.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// Name of the resource. Only used for importing.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Send mail notification before password expiration. Users will receive an email notification X days before password will expire. Mail server must be enabled and configured correctly.
        /// </summary>
        [Input("notifyByEmail", required: true)]
        public Input<bool> NotifyByEmail { get; set; } = null!;

        /// <summary>
        /// Password expires every N days. The time interval in which users will be obligated to change their password.
        /// </summary>
        [Input("passwordMaxAge", required: true)]
        public Input<int> PasswordMaxAge { get; set; } = null!;

        public PasswordExpirationPolicyArgs()
        {
        }
        public static new PasswordExpirationPolicyArgs Empty => new PasswordExpirationPolicyArgs();
    }

    public sealed class PasswordExpirationPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable Password Expiration Policy. This only applies to internal user passwords.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Name of the resource. Only used for importing.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Send mail notification before password expiration. Users will receive an email notification X days before password will expire. Mail server must be enabled and configured correctly.
        /// </summary>
        [Input("notifyByEmail")]
        public Input<bool>? NotifyByEmail { get; set; }

        /// <summary>
        /// Password expires every N days. The time interval in which users will be obligated to change their password.
        /// </summary>
        [Input("passwordMaxAge")]
        public Input<int>? PasswordMaxAge { get; set; }

        public PasswordExpirationPolicyState()
        {
        }
        public static new PasswordExpirationPolicyState Empty => new PasswordExpirationPolicyState();
    }
}
