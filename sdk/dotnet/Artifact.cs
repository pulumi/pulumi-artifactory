// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Artifactory
{
    /// <summary>
    /// Provides a resource for deploying artifact to Artifactory repository. Support deploying a single artifact only. Changes to `repository` or `path` attributes will trigger a recreation of the resource (i.e. delete then create). See [JFrog documentation](https://jfrog.com/help/r/jfrog-artifactory-documentation/deploy-a-single-artifact) for more details.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Artifactory = Pulumi.Artifactory;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var my_artifact = new Artifactory.Artifact("my-artifact", new()
    ///     {
    ///         Repository = "my-generic-local",
    ///         Path = "/my-path/my-file.zip",
    ///         FilePath = "/path/to/my-file.zip",
    ///     });
    /// 
    ///     var my_base64_artifact = new Artifactory.Artifact("my-base64-artifact", new()
    ///     {
    ///         Repository = "my-generic-local",
    ///         Path = "/my-path/my-file.zip",
    ///         ContentBase64 = "UEsDBAoAAAAAALl8alQAAAAAAAAAAAAAAAAJAAAATUVUQS1JTkYvUEsDBAoAAAAIALh8alTmUEsubQAAAIMAAAAUAAAATUVUQS1JTkYvTUFOSUZFU1QuTUbzTczLTEstLtENSy0qzszPs1Iw1DPg5XIsSs7ILEstQggH5KRWlBYrwCR4uZyLUhNLUlN0nSqtFBwLEpMzUhV8E8tS8xSM9cz0jHm5nEozc0rAsilAO1JzcjMhYim6XinZQGuA9uiZ83LxcgEAUEsDBAoAAAAAALh8alQAAAAAAAAAAAAAAAAMAAAAYXJ0aWZhY3RvcnkvUEsDBAoAAAAAALh8alQAAAAAAAAAAAAAAAARAAAAYXJ0aWZhY3RvcnkvdGVzdC9QSwMECgAAAAgAuHxqVMgzPcxdAQAALAIAAB0AAABhcnRpZmFjdG9yeS90ZXN0L011bHRpMS5jbGFzc3VRy07CQBQ9w6OlpQqCgPgEV+jCxsTEBcaNiXFRHwkGF66GOuKQPkyZmvBZutDEhR/gRxlvCwkxwVnck3vunXPPnfn++fwCcIRdExpWDdRQL6BhYg1NHes6Nhi0ExlIdcqQ7ez1GXJn4YNgKDkyEFexPxDRLR94xFSc0OVen0cyyWdkTj3JMUPT4ZGSj9xVYTSxlRgr+zL2lDzsUovPZcBQ79w7I/7CbY8HQ7unIhkMu+lAHg1JorqgzGD2wjhyxblMhhWnmgdJnwUdBR2bFrawzWBdCM8LW3dh5D20dexYaKHN0PjHFkN5Pux6MBKu+kP1JmMlfHqSMKZCbepMhvYN2VJkTnCfzFUX0Az6c5J5tHKts2hjtJGnz0hOBixZg6JBmU3ICPP7H2CvadmkqKWkhiJFa9pAuERoYBml2eXjVIy4N2Qq2Xfk5gImIWhKgRrnIgbKWCGkj007q79QSwECFAMKAAAAAAC5fGpUAAAAAAAAAAAAAAAACQAAAAAAAAAAABAA7UEAAAAATUVUQS1JTkYvUEsBAhQDCgAAAAgAuHxqVOZQSy5tAAAAgwAAABQAAAAAAAAAAAAAAKSBJwAAAE1FVEEtSU5GL01BTklGRVNULk1GUEsBAhQDCgAAAAAAuHxqVAAAAAAAAAAAAAAAAAwAAAAAAAAAAAAQAO1BxgAAAGFydGlmYWN0b3J5L1BLAQIUAwoAAAAAALh8alQAAAAAAAAAAAAAAAARAAAAAAAAAAAAEADtQfAAAABhcnRpZmFjdG9yeS90ZXN0L1BLAQIUAwoAAAAIALh8alTIMz3MXQEAACwCAAAdAAAAAAAAAAAAAACkgR8BAABhcnRpZmFjdG9yeS90ZXN0L011bHRpMS5jbGFzc1BLBQYAAAAABQAFAD0BAAC3AgAAAAA=",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [ArtifactoryResourceType("artifactory:index/artifact:Artifact")]
    public partial class Artifact : global::Pulumi.CustomResource
    {
        /// <summary>
        /// MD5 checksum of the artifact.
        /// </summary>
        [Output("checksumMd5")]
        public Output<string> ChecksumMd5 { get; private set; } = null!;

        /// <summary>
        /// SHA1 checksum of the artifact.
        /// </summary>
        [Output("checksumSha1")]
        public Output<string> ChecksumSha1 { get; private set; } = null!;

        /// <summary>
        /// SHA256 checksum of the artifact.
        /// </summary>
        [Output("checksumSha256")]
        public Output<string> ChecksumSha256 { get; private set; } = null!;

        /// <summary>
        /// Base64 content of the source file. Conflicts with `file_path`. Either one of these attribute must be set.
        /// </summary>
        [Output("contentBase64")]
        public Output<string?> ContentBase64 { get; private set; } = null!;

        /// <summary>
        /// Timestamp when artifact is created.
        /// </summary>
        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        /// <summary>
        /// User who deploys the artifact.
        /// </summary>
        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// Download URI of the artifact.
        /// </summary>
        [Output("downloadUri")]
        public Output<string> DownloadUri { get; private set; } = null!;

        /// <summary>
        /// Path to the source file. Conflicts with `content_base64`. Either one of these attribute must be set.
        /// </summary>
        [Output("filePath")]
        public Output<string?> FilePath { get; private set; } = null!;

        /// <summary>
        /// MIME type of the artifact.
        /// </summary>
        [Output("mimeType")]
        public Output<string> MimeType { get; private set; } = null!;

        /// <summary>
        /// The relative path in the target repository. Must begin with a '/'. You can add key-value matrix parameters to deploy the artifacts with properties. For more details, please refer to [Introducing Matrix Parameters](https://jfrog.com/help/r/jfrog-artifactory-documentation/using-properties-in-deployment-and-resolution).
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        /// <summary>
        /// Name of the respository.
        /// </summary>
        [Output("repository")]
        public Output<string> Repository { get; private set; } = null!;

        /// <summary>
        /// Size of the artifact, in bytes.
        /// </summary>
        [Output("size")]
        public Output<int> Size { get; private set; } = null!;

        /// <summary>
        /// URI of the artifact.
        /// </summary>
        [Output("uri")]
        public Output<string> Uri { get; private set; } = null!;


        /// <summary>
        /// Create a Artifact resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Artifact(string name, ArtifactArgs args, CustomResourceOptions? options = null)
            : base("artifactory:index/artifact:Artifact", name, args ?? new ArtifactArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Artifact(string name, Input<string> id, ArtifactState? state = null, CustomResourceOptions? options = null)
            : base("artifactory:index/artifact:Artifact", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Artifact resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Artifact Get(string name, Input<string> id, ArtifactState? state = null, CustomResourceOptions? options = null)
        {
            return new Artifact(name, id, state, options);
        }
    }

    public sealed class ArtifactArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Base64 content of the source file. Conflicts with `file_path`. Either one of these attribute must be set.
        /// </summary>
        [Input("contentBase64")]
        public Input<string>? ContentBase64 { get; set; }

        /// <summary>
        /// Path to the source file. Conflicts with `content_base64`. Either one of these attribute must be set.
        /// </summary>
        [Input("filePath")]
        public Input<string>? FilePath { get; set; }

        /// <summary>
        /// The relative path in the target repository. Must begin with a '/'. You can add key-value matrix parameters to deploy the artifacts with properties. For more details, please refer to [Introducing Matrix Parameters](https://jfrog.com/help/r/jfrog-artifactory-documentation/using-properties-in-deployment-and-resolution).
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        /// <summary>
        /// Name of the respository.
        /// </summary>
        [Input("repository", required: true)]
        public Input<string> Repository { get; set; } = null!;

        public ArtifactArgs()
        {
        }
        public static new ArtifactArgs Empty => new ArtifactArgs();
    }

    public sealed class ArtifactState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// MD5 checksum of the artifact.
        /// </summary>
        [Input("checksumMd5")]
        public Input<string>? ChecksumMd5 { get; set; }

        /// <summary>
        /// SHA1 checksum of the artifact.
        /// </summary>
        [Input("checksumSha1")]
        public Input<string>? ChecksumSha1 { get; set; }

        /// <summary>
        /// SHA256 checksum of the artifact.
        /// </summary>
        [Input("checksumSha256")]
        public Input<string>? ChecksumSha256 { get; set; }

        /// <summary>
        /// Base64 content of the source file. Conflicts with `file_path`. Either one of these attribute must be set.
        /// </summary>
        [Input("contentBase64")]
        public Input<string>? ContentBase64 { get; set; }

        /// <summary>
        /// Timestamp when artifact is created.
        /// </summary>
        [Input("created")]
        public Input<string>? Created { get; set; }

        /// <summary>
        /// User who deploys the artifact.
        /// </summary>
        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// Download URI of the artifact.
        /// </summary>
        [Input("downloadUri")]
        public Input<string>? DownloadUri { get; set; }

        /// <summary>
        /// Path to the source file. Conflicts with `content_base64`. Either one of these attribute must be set.
        /// </summary>
        [Input("filePath")]
        public Input<string>? FilePath { get; set; }

        /// <summary>
        /// MIME type of the artifact.
        /// </summary>
        [Input("mimeType")]
        public Input<string>? MimeType { get; set; }

        /// <summary>
        /// The relative path in the target repository. Must begin with a '/'. You can add key-value matrix parameters to deploy the artifacts with properties. For more details, please refer to [Introducing Matrix Parameters](https://jfrog.com/help/r/jfrog-artifactory-documentation/using-properties-in-deployment-and-resolution).
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// Name of the respository.
        /// </summary>
        [Input("repository")]
        public Input<string>? Repository { get; set; }

        /// <summary>
        /// Size of the artifact, in bytes.
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        /// <summary>
        /// URI of the artifact.
        /// </summary>
        [Input("uri")]
        public Input<string>? Uri { get; set; }

        public ArtifactState()
        {
        }
        public static new ArtifactState Empty => new ArtifactState();
    }
}
