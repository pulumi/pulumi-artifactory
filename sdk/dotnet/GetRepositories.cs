// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Artifactory
{
    public static class GetRepositories
    {
        /// <summary>
        /// Returns a list of minimal repository details for all repositories of the specified type.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Artifactory = Pulumi.Artifactory;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all_alpine_local = Artifactory.GetRepositories.Invoke(new()
        ///     {
        ///         PackageType = "alpine",
        ///         RepositoryType = "local",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetRepositoriesResult> InvokeAsync(GetRepositoriesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRepositoriesResult>("artifactory:index/getRepositories:getRepositories", args ?? new GetRepositoriesArgs(), options.WithDefaults());

        /// <summary>
        /// Returns a list of minimal repository details for all repositories of the specified type.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Artifactory = Pulumi.Artifactory;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all_alpine_local = Artifactory.GetRepositories.Invoke(new()
        ///     {
        ///         PackageType = "alpine",
        ///         RepositoryType = "local",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetRepositoriesResult> Invoke(GetRepositoriesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRepositoriesResult>("artifactory:index/getRepositories:getRepositories", args ?? new GetRepositoriesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRepositoriesArgs : global::Pulumi.InvokeArgs
    {
        [Input("packageType")]
        public string? PackageType { get; set; }

        /// <summary>
        /// Filter for repositories assigned to a specific project.
        /// </summary>
        [Input("projectKey")]
        public string? ProjectKey { get; set; }

        /// <summary>
        /// Filter for repositories of a specific type. Allowed values are: local, remote, virtual, federated, distribution
        /// </summary>
        [Input("repositoryType")]
        public string? RepositoryType { get; set; }

        public GetRepositoriesArgs()
        {
        }
        public static new GetRepositoriesArgs Empty => new GetRepositoriesArgs();
    }

    public sealed class GetRepositoriesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("packageType")]
        public Input<string>? PackageType { get; set; }

        /// <summary>
        /// Filter for repositories assigned to a specific project.
        /// </summary>
        [Input("projectKey")]
        public Input<string>? ProjectKey { get; set; }

        /// <summary>
        /// Filter for repositories of a specific type. Allowed values are: local, remote, virtual, federated, distribution
        /// </summary>
        [Input("repositoryType")]
        public Input<string>? RepositoryType { get; set; }

        public GetRepositoriesInvokeArgs()
        {
        }
        public static new GetRepositoriesInvokeArgs Empty => new GetRepositoriesInvokeArgs();
    }


    [OutputType]
    public sealed class GetRepositoriesResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? PackageType;
        /// <summary>
        /// Filter for repositories assigned to a specific project.
        /// </summary>
        public readonly string? ProjectKey;
        /// <summary>
        /// A list of repositories.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRepositoriesRepoResult> Repos;
        /// <summary>
        /// Filter for repositories of a specific type. Allowed values are: local, remote, virtual, federated, distribution
        /// </summary>
        public readonly string? RepositoryType;

        [OutputConstructor]
        private GetRepositoriesResult(
            string id,

            string? packageType,

            string? projectKey,

            ImmutableArray<Outputs.GetRepositoriesRepoResult> repos,

            string? repositoryType)
        {
            Id = id;
            PackageType = packageType;
            ProjectKey = projectKey;
            Repos = repos;
            RepositoryType = repositoryType;
        }
    }
}
