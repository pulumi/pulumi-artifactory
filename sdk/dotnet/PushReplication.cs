// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Artifactory
{
    [ArtifactoryResourceType("artifactory:index/pushReplication:PushReplication")]
    public partial class PushReplication : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Cron expression to control the operation frequency.
        /// </summary>
        [Output("cronExp")]
        public Output<string> CronExp { get; private set; } = null!;

        /// <summary>
        /// When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on
        /// artifact, e.g. add, deleted or property change. Default value is `false`.
        /// </summary>
        [Output("enableEventReplication")]
        public Output<bool?> EnableEventReplication { get; private set; } = null!;

        [Output("replications")]
        public Output<ImmutableArray<Outputs.PushReplicationReplication>> Replications { get; private set; } = null!;

        [Output("repoKey")]
        public Output<string> RepoKey { get; private set; } = null!;


        /// <summary>
        /// Create a PushReplication resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PushReplication(string name, PushReplicationArgs args, CustomResourceOptions? options = null)
            : base("artifactory:index/pushReplication:PushReplication", name, args ?? new PushReplicationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PushReplication(string name, Input<string> id, PushReplicationState? state = null, CustomResourceOptions? options = null)
            : base("artifactory:index/pushReplication:PushReplication", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PushReplication resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PushReplication Get(string name, Input<string> id, PushReplicationState? state = null, CustomResourceOptions? options = null)
        {
            return new PushReplication(name, id, state, options);
        }
    }

    public sealed class PushReplicationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cron expression to control the operation frequency.
        /// </summary>
        [Input("cronExp", required: true)]
        public Input<string> CronExp { get; set; } = null!;

        /// <summary>
        /// When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on
        /// artifact, e.g. add, deleted or property change. Default value is `false`.
        /// </summary>
        [Input("enableEventReplication")]
        public Input<bool>? EnableEventReplication { get; set; }

        [Input("replications")]
        private InputList<Inputs.PushReplicationReplicationArgs>? _replications;
        public InputList<Inputs.PushReplicationReplicationArgs> Replications
        {
            get => _replications ?? (_replications = new InputList<Inputs.PushReplicationReplicationArgs>());
            set => _replications = value;
        }

        [Input("repoKey", required: true)]
        public Input<string> RepoKey { get; set; } = null!;

        public PushReplicationArgs()
        {
        }
        public static new PushReplicationArgs Empty => new PushReplicationArgs();
    }

    public sealed class PushReplicationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cron expression to control the operation frequency.
        /// </summary>
        [Input("cronExp")]
        public Input<string>? CronExp { get; set; }

        /// <summary>
        /// When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on
        /// artifact, e.g. add, deleted or property change. Default value is `false`.
        /// </summary>
        [Input("enableEventReplication")]
        public Input<bool>? EnableEventReplication { get; set; }

        [Input("replications")]
        private InputList<Inputs.PushReplicationReplicationGetArgs>? _replications;
        public InputList<Inputs.PushReplicationReplicationGetArgs> Replications
        {
            get => _replications ?? (_replications = new InputList<Inputs.PushReplicationReplicationGetArgs>());
            set => _replications = value;
        }

        [Input("repoKey")]
        public Input<string>? RepoKey { get; set; }

        public PushReplicationState()
        {
        }
        public static new PushReplicationState Empty => new PushReplicationState();
    }
}
