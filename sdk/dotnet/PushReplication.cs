// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Artifactory
{
    /// <summary>
    /// Provides an Artifactory push replication resource. This can be used to create and manage Artifactory push replications.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Artifactory = Pulumi.Artifactory;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         // Create a replication between two artifactory local repositories
    ///         var providerTestSource = new Artifactory.LocalMavenRepository("providerTestSource", new Artifactory.LocalMavenRepositoryArgs
    ///         {
    ///             Key = "provider_test_source",
    ///         });
    ///         var providerTestDest = new Artifactory.LocalMavenRepository("providerTestDest", new Artifactory.LocalMavenRepositoryArgs
    ///         {
    ///             Key = "provider_test_dest",
    ///         });
    ///         var foo_rep = new Artifactory.PushReplication("foo-rep", new Artifactory.PushReplicationArgs
    ///         {
    ///             CronExp = "0 0 * * * ?",
    ///             EnableEventReplication = true,
    ///             Replications = 
    ///             {
    ///                 new Artifactory.Inputs.PushReplicationReplicationArgs
    ///                 {
    ///                     Password = "$var.artifactory_password",
    ///                     Url = "$var.artifactory_url",
    ///                     Username = "$var.artifactory_username",
    ///                 },
    ///             },
    ///             RepoKey = providerTestSource.Key,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Push replication configs can be imported using their repo key, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import artifactory:index/pushReplication:PushReplication foo-rep provider_test_source
    /// ```
    /// </summary>
    [ArtifactoryResourceType("artifactory:index/pushReplication:PushReplication")]
    public partial class PushReplication : Pulumi.CustomResource
    {
        [Output("cronExp")]
        public Output<string> CronExp { get; private set; } = null!;

        [Output("enableEventReplication")]
        public Output<bool> EnableEventReplication { get; private set; } = null!;

        [Output("replications")]
        public Output<ImmutableArray<Outputs.PushReplicationReplication>> Replications { get; private set; } = null!;

        [Output("repoKey")]
        public Output<string> RepoKey { get; private set; } = null!;


        /// <summary>
        /// Create a PushReplication resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PushReplication(string name, PushReplicationArgs args, CustomResourceOptions? options = null)
            : base("artifactory:index/pushReplication:PushReplication", name, args ?? new PushReplicationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PushReplication(string name, Input<string> id, PushReplicationState? state = null, CustomResourceOptions? options = null)
            : base("artifactory:index/pushReplication:PushReplication", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PushReplication resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PushReplication Get(string name, Input<string> id, PushReplicationState? state = null, CustomResourceOptions? options = null)
        {
            return new PushReplication(name, id, state, options);
        }
    }

    public sealed class PushReplicationArgs : Pulumi.ResourceArgs
    {
        [Input("cronExp", required: true)]
        public Input<string> CronExp { get; set; } = null!;

        [Input("enableEventReplication")]
        public Input<bool>? EnableEventReplication { get; set; }

        [Input("replications")]
        private InputList<Inputs.PushReplicationReplicationArgs>? _replications;
        public InputList<Inputs.PushReplicationReplicationArgs> Replications
        {
            get => _replications ?? (_replications = new InputList<Inputs.PushReplicationReplicationArgs>());
            set => _replications = value;
        }

        [Input("repoKey", required: true)]
        public Input<string> RepoKey { get; set; } = null!;

        public PushReplicationArgs()
        {
        }
    }

    public sealed class PushReplicationState : Pulumi.ResourceArgs
    {
        [Input("cronExp")]
        public Input<string>? CronExp { get; set; }

        [Input("enableEventReplication")]
        public Input<bool>? EnableEventReplication { get; set; }

        [Input("replications")]
        private InputList<Inputs.PushReplicationReplicationGetArgs>? _replications;
        public InputList<Inputs.PushReplicationReplicationGetArgs> Replications
        {
            get => _replications ?? (_replications = new InputList<Inputs.PushReplicationReplicationGetArgs>());
            set => _replications = value;
        }

        [Input("repoKey")]
        public Input<string>? RepoKey { get; set; }

        public PushReplicationState()
        {
        }
    }
}
