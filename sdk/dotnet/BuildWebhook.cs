// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Artifactory
{
    [ArtifactoryResourceType("artifactory:index/buildWebhook:BuildWebhook")]
    public partial class BuildWebhook : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies where the webhook will be applied on which builds.
        /// </summary>
        [Output("criteria")]
        public Output<Outputs.BuildWebhookCriteria> Criteria { get; private set; } = null!;

        /// <summary>
        /// Description of webhook. Max length 1000 characters.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Status of webhook. Default to 'true'
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow
        /// values: uploaded, deleted, promoted
        /// </summary>
        [Output("eventTypes")]
        public Output<ImmutableArray<string>> EventTypes { get; private set; } = null!;

        [Output("handlers")]
        public Output<ImmutableArray<Outputs.BuildWebhookHandler>> Handlers { get; private set; } = null!;

        /// <summary>
        /// Key of webhook. Must be between 2 and 200 characters. Cannot contain spaces.
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;


        /// <summary>
        /// Create a BuildWebhook resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BuildWebhook(string name, BuildWebhookArgs args, CustomResourceOptions? options = null)
            : base("artifactory:index/buildWebhook:BuildWebhook", name, args ?? new BuildWebhookArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BuildWebhook(string name, Input<string> id, BuildWebhookState? state = null, CustomResourceOptions? options = null)
            : base("artifactory:index/buildWebhook:BuildWebhook", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BuildWebhook resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BuildWebhook Get(string name, Input<string> id, BuildWebhookState? state = null, CustomResourceOptions? options = null)
        {
            return new BuildWebhook(name, id, state, options);
        }
    }

    public sealed class BuildWebhookArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies where the webhook will be applied on which builds.
        /// </summary>
        [Input("criteria", required: true)]
        public Input<Inputs.BuildWebhookCriteriaArgs> Criteria { get; set; } = null!;

        /// <summary>
        /// Description of webhook. Max length 1000 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Status of webhook. Default to 'true'
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("eventTypes", required: true)]
        private InputList<string>? _eventTypes;

        /// <summary>
        /// List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow
        /// values: uploaded, deleted, promoted
        /// </summary>
        public InputList<string> EventTypes
        {
            get => _eventTypes ?? (_eventTypes = new InputList<string>());
            set => _eventTypes = value;
        }

        [Input("handlers", required: true)]
        private InputList<Inputs.BuildWebhookHandlerArgs>? _handlers;
        public InputList<Inputs.BuildWebhookHandlerArgs> Handlers
        {
            get => _handlers ?? (_handlers = new InputList<Inputs.BuildWebhookHandlerArgs>());
            set => _handlers = value;
        }

        /// <summary>
        /// Key of webhook. Must be between 2 and 200 characters. Cannot contain spaces.
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        public BuildWebhookArgs()
        {
        }
        public static new BuildWebhookArgs Empty => new BuildWebhookArgs();
    }

    public sealed class BuildWebhookState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies where the webhook will be applied on which builds.
        /// </summary>
        [Input("criteria")]
        public Input<Inputs.BuildWebhookCriteriaGetArgs>? Criteria { get; set; }

        /// <summary>
        /// Description of webhook. Max length 1000 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Status of webhook. Default to 'true'
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("eventTypes")]
        private InputList<string>? _eventTypes;

        /// <summary>
        /// List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow
        /// values: uploaded, deleted, promoted
        /// </summary>
        public InputList<string> EventTypes
        {
            get => _eventTypes ?? (_eventTypes = new InputList<string>());
            set => _eventTypes = value;
        }

        [Input("handlers")]
        private InputList<Inputs.BuildWebhookHandlerGetArgs>? _handlers;
        public InputList<Inputs.BuildWebhookHandlerGetArgs> Handlers
        {
            get => _handlers ?? (_handlers = new InputList<Inputs.BuildWebhookHandlerGetArgs>());
            set => _handlers = value;
        }

        /// <summary>
        /// Key of webhook. Must be between 2 and 200 characters. Cannot contain spaces.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        public BuildWebhookState()
        {
        }
        public static new BuildWebhookState Empty => new BuildWebhookState();
    }
}
