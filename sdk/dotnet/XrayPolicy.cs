// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Artifactory
{
    /// <summary>
    /// ## # Xray Policy Resource
    /// 
    /// Provides an Xray policy resource. This can be used to create and manage Xray v1 policies.
    /// 
    /// ## Import
    /// 
    /// A policy can be imported by using the name, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import artifactory:index/xrayPolicy:XrayPolicy example policy-name
    /// ```
    /// </summary>
    [ArtifactoryResourceType("artifactory:index/xrayPolicy:XrayPolicy")]
    public partial class XrayPolicy : Pulumi.CustomResource
    {
        /// <summary>
        /// (Optional) Name of the policy author
        /// </summary>
        [Output("author")]
        public Output<string> Author { get; private set; } = null!;

        /// <summary>
        /// Timestamp of when the policy was first created
        /// </summary>
        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        /// <summary>
        /// (Optional) More verbose description of the policy
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Timestamp of when the policy was last modified
        /// </summary>
        [Output("modified")]
        public Output<string> Modified { get; private set; } = null!;

        /// <summary>
        /// (Required) Name of the rule
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// (Required) Nested block describing the policy rules. Described below.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.XrayPolicyRule>> Rules { get; private set; } = null!;

        /// <summary>
        /// (Required) Type of the policy
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a XrayPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public XrayPolicy(string name, XrayPolicyArgs args, CustomResourceOptions? options = null)
            : base("artifactory:index/xrayPolicy:XrayPolicy", name, args ?? new XrayPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private XrayPolicy(string name, Input<string> id, XrayPolicyState? state = null, CustomResourceOptions? options = null)
            : base("artifactory:index/xrayPolicy:XrayPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing XrayPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static XrayPolicy Get(string name, Input<string> id, XrayPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new XrayPolicy(name, id, state, options);
        }
    }

    public sealed class XrayPolicyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Optional) More verbose description of the policy
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Required) Name of the rule
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("rules", required: true)]
        private InputList<Inputs.XrayPolicyRuleArgs>? _rules;

        /// <summary>
        /// (Required) Nested block describing the policy rules. Described below.
        /// </summary>
        public InputList<Inputs.XrayPolicyRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.XrayPolicyRuleArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// (Required) Type of the policy
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public XrayPolicyArgs()
        {
        }
    }

    public sealed class XrayPolicyState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Optional) Name of the policy author
        /// </summary>
        [Input("author")]
        public Input<string>? Author { get; set; }

        /// <summary>
        /// Timestamp of when the policy was first created
        /// </summary>
        [Input("created")]
        public Input<string>? Created { get; set; }

        /// <summary>
        /// (Optional) More verbose description of the policy
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Timestamp of when the policy was last modified
        /// </summary>
        [Input("modified")]
        public Input<string>? Modified { get; set; }

        /// <summary>
        /// (Required) Name of the rule
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("rules")]
        private InputList<Inputs.XrayPolicyRuleGetArgs>? _rules;

        /// <summary>
        /// (Required) Nested block describing the policy rules. Described below.
        /// </summary>
        public InputList<Inputs.XrayPolicyRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.XrayPolicyRuleGetArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// (Required) Type of the policy
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public XrayPolicyState()
        {
        }
    }
}
