// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Artifactory
{
    /// <summary>
    /// Provides a resource for managaing item (file, folder, or repository) properties. When a folder is used property attachment is recursive by default. See [JFrog documentation](https://jfrog.com/help/r/jfrog-artifactory-documentation/working-with-jfrog-properties) for more details.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Artifactory = Pulumi.Artifactory;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var my_repo_properties = new Artifactory.ItemProperties("my-repo-properties", new()
    ///     {
    ///         RepoKey = "my-generic-local",
    ///         Properties = 
    ///         {
    ///             { "key1", new[]
    ///             {
    ///                 "value1",
    ///             } },
    ///             { "key2", new[]
    ///             {
    ///                 "value2",
    ///                 "value3",
    ///             } },
    ///         },
    ///         IsRecursive = true,
    ///     });
    /// 
    ///     var my_folder_properties = new Artifactory.ItemProperties("my-folder-properties", new()
    ///     {
    ///         RepoKey = "my-generic-local",
    ///         ItemPath = "folder/subfolder",
    ///         Properties = 
    ///         {
    ///             { "key1", new[]
    ///             {
    ///                 "value1",
    ///             } },
    ///             { "key2", new[]
    ///             {
    ///                 "value2",
    ///                 "value3",
    ///             } },
    ///         },
    ///         IsRecursive = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import artifactory:index/itemProperties:ItemProperties my-repo-properties repo_key
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import artifactory:index/itemProperties:ItemProperties my-folder-properties repo_key:folder/subfolder
    /// ```
    /// </summary>
    [ArtifactoryResourceType("artifactory:index/itemProperties:ItemProperties")]
    public partial class ItemProperties : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Add this property to the selected folder and to all of artifacts and folders under this folder. Default to `false`
        /// </summary>
        [Output("isRecursive")]
        public Output<bool> IsRecursive { get; private set; } = null!;

        /// <summary>
        /// The relative path of the item (file/folder/repository). Leave unset for repository.
        /// </summary>
        [Output("itemPath")]
        public Output<string?> ItemPath { get; private set; } = null!;

        /// <summary>
        /// Map of key and list of values.
        /// </summary>
        [Output("properties")]
        public Output<ImmutableDictionary<string, ImmutableArray<string>>> Properties { get; private set; } = null!;

        /// <summary>
        /// Respository key.
        /// </summary>
        [Output("repoKey")]
        public Output<string> RepoKey { get; private set; } = null!;


        /// <summary>
        /// Create a ItemProperties resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ItemProperties(string name, ItemPropertiesArgs args, CustomResourceOptions? options = null)
            : base("artifactory:index/itemProperties:ItemProperties", name, args ?? new ItemPropertiesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ItemProperties(string name, Input<string> id, ItemPropertiesState? state = null, CustomResourceOptions? options = null)
            : base("artifactory:index/itemProperties:ItemProperties", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ItemProperties resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ItemProperties Get(string name, Input<string> id, ItemPropertiesState? state = null, CustomResourceOptions? options = null)
        {
            return new ItemProperties(name, id, state, options);
        }
    }

    public sealed class ItemPropertiesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Add this property to the selected folder and to all of artifacts and folders under this folder. Default to `false`
        /// </summary>
        [Input("isRecursive")]
        public Input<bool>? IsRecursive { get; set; }

        /// <summary>
        /// The relative path of the item (file/folder/repository). Leave unset for repository.
        /// </summary>
        [Input("itemPath")]
        public Input<string>? ItemPath { get; set; }

        [Input("properties", required: true)]
        private InputMap<ImmutableArray<string>>? _properties;

        /// <summary>
        /// Map of key and list of values.
        /// </summary>
        public InputMap<ImmutableArray<string>> Properties
        {
            get => _properties ?? (_properties = new InputMap<ImmutableArray<string>>());
            set => _properties = value;
        }

        /// <summary>
        /// Respository key.
        /// </summary>
        [Input("repoKey", required: true)]
        public Input<string> RepoKey { get; set; } = null!;

        public ItemPropertiesArgs()
        {
        }
        public static new ItemPropertiesArgs Empty => new ItemPropertiesArgs();
    }

    public sealed class ItemPropertiesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Add this property to the selected folder and to all of artifacts and folders under this folder. Default to `false`
        /// </summary>
        [Input("isRecursive")]
        public Input<bool>? IsRecursive { get; set; }

        /// <summary>
        /// The relative path of the item (file/folder/repository). Leave unset for repository.
        /// </summary>
        [Input("itemPath")]
        public Input<string>? ItemPath { get; set; }

        [Input("properties")]
        private InputMap<ImmutableArray<string>>? _properties;

        /// <summary>
        /// Map of key and list of values.
        /// </summary>
        public InputMap<ImmutableArray<string>> Properties
        {
            get => _properties ?? (_properties = new InputMap<ImmutableArray<string>>());
            set => _properties = value;
        }

        /// <summary>
        /// Respository key.
        /// </summary>
        [Input("repoKey")]
        public Input<string>? RepoKey { get; set; }

        public ItemPropertiesState()
        {
        }
        public static new ItemPropertiesState Empty => new ItemPropertiesState();
    }
}
