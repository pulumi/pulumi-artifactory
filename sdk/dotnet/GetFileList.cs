// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Artifactory
{
    public static class GetFileList
    {
        /// <summary>
        /// Get a flat (the default) or deep listing of the files and folders (not included by default) within a folder. For deep listing you can specify an optional depth to limit the results. Optionally include a map of metadata timestamp values as part of the result.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Artifactory = Pulumi.Artifactory;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_repo_file_list = Artifactory.GetFileList.Invoke(new()
        ///     {
        ///         RepositoryKey = "my-generic-local",
        ///         FolderPath = "path/to/artifact",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetFileListResult> InvokeAsync(GetFileListArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFileListResult>("artifactory:index/getFileList:getFileList", args ?? new GetFileListArgs(), options.WithDefaults());

        /// <summary>
        /// Get a flat (the default) or deep listing of the files and folders (not included by default) within a folder. For deep listing you can specify an optional depth to limit the results. Optionally include a map of metadata timestamp values as part of the result.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Artifactory = Pulumi.Artifactory;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_repo_file_list = Artifactory.GetFileList.Invoke(new()
        ///     {
        ///         RepositoryKey = "my-generic-local",
        ///         FolderPath = "path/to/artifact",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetFileListResult> Invoke(GetFileListInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFileListResult>("artifactory:index/getFileList:getFileList", args ?? new GetFileListInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFileListArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Get deep listing
        /// </summary>
        [Input("deepListing")]
        public bool? DeepListing { get; set; }

        /// <summary>
        /// Depth of the deep listing
        /// </summary>
        [Input("depth")]
        public int? Depth { get; set; }

        /// <summary>
        /// Path of the folder
        /// </summary>
        [Input("folderPath", required: true)]
        public string FolderPath { get; set; } = null!;

        /// <summary>
        /// Include root path
        /// </summary>
        [Input("includeRootPath")]
        public bool? IncludeRootPath { get; set; }

        /// <summary>
        /// Include folders
        /// </summary>
        [Input("listFolders")]
        public bool? ListFolders { get; set; }

        /// <summary>
        /// File metadata
        /// </summary>
        [Input("metadataTimestamps")]
        public bool? MetadataTimestamps { get; set; }

        /// <summary>
        /// Repository key
        /// </summary>
        [Input("repositoryKey", required: true)]
        public string RepositoryKey { get; set; } = null!;

        public GetFileListArgs()
        {
        }
        public static new GetFileListArgs Empty => new GetFileListArgs();
    }

    public sealed class GetFileListInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Get deep listing
        /// </summary>
        [Input("deepListing")]
        public Input<bool>? DeepListing { get; set; }

        /// <summary>
        /// Depth of the deep listing
        /// </summary>
        [Input("depth")]
        public Input<int>? Depth { get; set; }

        /// <summary>
        /// Path of the folder
        /// </summary>
        [Input("folderPath", required: true)]
        public Input<string> FolderPath { get; set; } = null!;

        /// <summary>
        /// Include root path
        /// </summary>
        [Input("includeRootPath")]
        public Input<bool>? IncludeRootPath { get; set; }

        /// <summary>
        /// Include folders
        /// </summary>
        [Input("listFolders")]
        public Input<bool>? ListFolders { get; set; }

        /// <summary>
        /// File metadata
        /// </summary>
        [Input("metadataTimestamps")]
        public Input<bool>? MetadataTimestamps { get; set; }

        /// <summary>
        /// Repository key
        /// </summary>
        [Input("repositoryKey", required: true)]
        public Input<string> RepositoryKey { get; set; } = null!;

        public GetFileListInvokeArgs()
        {
        }
        public static new GetFileListInvokeArgs Empty => new GetFileListInvokeArgs();
    }


    [OutputType]
    public sealed class GetFileListResult
    {
        /// <summary>
        /// Creation time
        /// </summary>
        public readonly string Created;
        /// <summary>
        /// Get deep listing
        /// </summary>
        public readonly bool? DeepListing;
        /// <summary>
        /// Depth of the deep listing
        /// </summary>
        public readonly int? Depth;
        /// <summary>
        /// A list of files.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFileListFileResult> Files;
        /// <summary>
        /// Path of the folder
        /// </summary>
        public readonly string FolderPath;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Include root path
        /// </summary>
        public readonly bool? IncludeRootPath;
        /// <summary>
        /// Include folders
        /// </summary>
        public readonly bool? ListFolders;
        /// <summary>
        /// Include metadata timestamps
        /// </summary>
        public readonly bool? MetadataTimestamps;
        /// <summary>
        /// Repository key
        /// </summary>
        public readonly string RepositoryKey;
        /// <summary>
        /// URL to file/path
        /// </summary>
        public readonly string Uri;

        [OutputConstructor]
        private GetFileListResult(
            string created,

            bool? deepListing,

            int? depth,

            ImmutableArray<Outputs.GetFileListFileResult> files,

            string folderPath,

            string id,

            bool? includeRootPath,

            bool? listFolders,

            bool? metadataTimestamps,

            string repositoryKey,

            string uri)
        {
            Created = created;
            DeepListing = deepListing;
            Depth = depth;
            Files = files;
            FolderPath = folderPath;
            Id = id;
            IncludeRootPath = includeRootPath;
            ListFolders = listFolders;
            MetadataTimestamps = metadataTimestamps;
            RepositoryKey = repositoryKey;
            Uri = uri;
        }
    }
}
