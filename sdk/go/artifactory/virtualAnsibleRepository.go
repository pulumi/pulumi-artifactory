// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-artifactory/sdk/v8/go/artifactory/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a virtual Ansible repository.
//
// Official documentation can be found [here](https://jfrog.com/help/r/jfrog-artifactory-documentation/create-virtual-ansible-repositories).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-artifactory/sdk/v8/go/artifactory"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := artifactory.NewVirtualAnsibleRepository(ctx, "my-ansible-virtual", &artifactory.VirtualAnsibleRepositoryArgs{
//				Key:             pulumi.String("my-ansible-virtual"),
//				Repositories:    pulumi.StringArray{},
//				Description:     pulumi.String("A test virtual repo"),
//				Notes:           pulumi.String("Internal description"),
//				IncludesPattern: pulumi.String("com/jfrog/**,cloud/jfrog/**"),
//				ExcludesPattern: pulumi.String("com/google/**"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Virtual repositories can be imported using their name, e.g.
//
// ```sh
// $ pulumi import artifactory:index/virtualAnsibleRepository:VirtualAnsibleRepository my-ansible-virtual my-ansible-virtual
// ```
type VirtualAnsibleRepository struct {
	pulumi.CustomResourceState

	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
	// another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts pulumi.BoolPtrOutput `pulumi:"artifactoryRequestsCanRetrieveRemoteArtifacts"`
	// Default repository to deploy artifacts.
	DefaultDeploymentRepo pulumi.StringPtrOutput `pulumi:"defaultDeploymentRepo"`
	// Public description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
	// artifacts are excluded.
	ExcludesPattern pulumi.StringPtrOutput `pulumi:"excludesPattern"`
	// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When
	// used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern pulumi.StringPtrOutput `pulumi:"includesPattern"`
	// A mandatory identifier for the repository that must be unique. It cannot begin with a number or
	// contain spaces or special characters.
	Key pulumi.StringOutput `pulumi:"key"`
	// Internal description.
	Notes               pulumi.StringPtrOutput   `pulumi:"notes"`
	PackageType         pulumi.StringOutput      `pulumi:"packageType"`
	ProjectEnvironments pulumi.StringArrayOutput `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When
	// assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey pulumi.StringPtrOutput `pulumi:"projectKey"`
	// Repository layout key for the virtual repository
	RepoLayoutRef pulumi.StringPtrOutput `pulumi:"repoLayoutRef"`
	// The effective list of actual repositories included in this virtual repository.
	Repositories pulumi.StringArrayOutput `pulumi:"repositories"`
	// This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated repositories. A value of 0 indicates no caching.
	RetrievalCachePeriodSeconds pulumi.IntPtrOutput `pulumi:"retrievalCachePeriodSeconds"`
}

// NewVirtualAnsibleRepository registers a new resource with the given unique name, arguments, and options.
func NewVirtualAnsibleRepository(ctx *pulumi.Context,
	name string, args *VirtualAnsibleRepositoryArgs, opts ...pulumi.ResourceOption) (*VirtualAnsibleRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VirtualAnsibleRepository
	err := ctx.RegisterResource("artifactory:index/virtualAnsibleRepository:VirtualAnsibleRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualAnsibleRepository gets an existing VirtualAnsibleRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualAnsibleRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualAnsibleRepositoryState, opts ...pulumi.ResourceOption) (*VirtualAnsibleRepository, error) {
	var resource VirtualAnsibleRepository
	err := ctx.ReadResource("artifactory:index/virtualAnsibleRepository:VirtualAnsibleRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualAnsibleRepository resources.
type virtualAnsibleRepositoryState struct {
	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
	// another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts *bool `pulumi:"artifactoryRequestsCanRetrieveRemoteArtifacts"`
	// Default repository to deploy artifacts.
	DefaultDeploymentRepo *string `pulumi:"defaultDeploymentRepo"`
	// Public description.
	Description *string `pulumi:"description"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
	// artifacts are excluded.
	ExcludesPattern *string `pulumi:"excludesPattern"`
	// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When
	// used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern *string `pulumi:"includesPattern"`
	// A mandatory identifier for the repository that must be unique. It cannot begin with a number or
	// contain spaces or special characters.
	Key *string `pulumi:"key"`
	// Internal description.
	Notes               *string  `pulumi:"notes"`
	PackageType         *string  `pulumi:"packageType"`
	ProjectEnvironments []string `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When
	// assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey *string `pulumi:"projectKey"`
	// Repository layout key for the virtual repository
	RepoLayoutRef *string `pulumi:"repoLayoutRef"`
	// The effective list of actual repositories included in this virtual repository.
	Repositories []string `pulumi:"repositories"`
	// This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated repositories. A value of 0 indicates no caching.
	RetrievalCachePeriodSeconds *int `pulumi:"retrievalCachePeriodSeconds"`
}

type VirtualAnsibleRepositoryState struct {
	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
	// another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts pulumi.BoolPtrInput
	// Default repository to deploy artifacts.
	DefaultDeploymentRepo pulumi.StringPtrInput
	// Public description.
	Description pulumi.StringPtrInput
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
	// artifacts are excluded.
	ExcludesPattern pulumi.StringPtrInput
	// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When
	// used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern pulumi.StringPtrInput
	// A mandatory identifier for the repository that must be unique. It cannot begin with a number or
	// contain spaces or special characters.
	Key pulumi.StringPtrInput
	// Internal description.
	Notes               pulumi.StringPtrInput
	PackageType         pulumi.StringPtrInput
	ProjectEnvironments pulumi.StringArrayInput
	// Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When
	// assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey pulumi.StringPtrInput
	// Repository layout key for the virtual repository
	RepoLayoutRef pulumi.StringPtrInput
	// The effective list of actual repositories included in this virtual repository.
	Repositories pulumi.StringArrayInput
	// This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated repositories. A value of 0 indicates no caching.
	RetrievalCachePeriodSeconds pulumi.IntPtrInput
}

func (VirtualAnsibleRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualAnsibleRepositoryState)(nil)).Elem()
}

type virtualAnsibleRepositoryArgs struct {
	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
	// another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts *bool `pulumi:"artifactoryRequestsCanRetrieveRemoteArtifacts"`
	// Default repository to deploy artifacts.
	DefaultDeploymentRepo *string `pulumi:"defaultDeploymentRepo"`
	// Public description.
	Description *string `pulumi:"description"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
	// artifacts are excluded.
	ExcludesPattern *string `pulumi:"excludesPattern"`
	// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When
	// used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern *string `pulumi:"includesPattern"`
	// A mandatory identifier for the repository that must be unique. It cannot begin with a number or
	// contain spaces or special characters.
	Key string `pulumi:"key"`
	// Internal description.
	Notes               *string  `pulumi:"notes"`
	ProjectEnvironments []string `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When
	// assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey *string `pulumi:"projectKey"`
	// Repository layout key for the virtual repository
	RepoLayoutRef *string `pulumi:"repoLayoutRef"`
	// The effective list of actual repositories included in this virtual repository.
	Repositories []string `pulumi:"repositories"`
	// This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated repositories. A value of 0 indicates no caching.
	RetrievalCachePeriodSeconds *int `pulumi:"retrievalCachePeriodSeconds"`
}

// The set of arguments for constructing a VirtualAnsibleRepository resource.
type VirtualAnsibleRepositoryArgs struct {
	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
	// another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts pulumi.BoolPtrInput
	// Default repository to deploy artifacts.
	DefaultDeploymentRepo pulumi.StringPtrInput
	// Public description.
	Description pulumi.StringPtrInput
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
	// artifacts are excluded.
	ExcludesPattern pulumi.StringPtrInput
	// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When
	// used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern pulumi.StringPtrInput
	// A mandatory identifier for the repository that must be unique. It cannot begin with a number or
	// contain spaces or special characters.
	Key pulumi.StringInput
	// Internal description.
	Notes               pulumi.StringPtrInput
	ProjectEnvironments pulumi.StringArrayInput
	// Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When
	// assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey pulumi.StringPtrInput
	// Repository layout key for the virtual repository
	RepoLayoutRef pulumi.StringPtrInput
	// The effective list of actual repositories included in this virtual repository.
	Repositories pulumi.StringArrayInput
	// This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated repositories. A value of 0 indicates no caching.
	RetrievalCachePeriodSeconds pulumi.IntPtrInput
}

func (VirtualAnsibleRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualAnsibleRepositoryArgs)(nil)).Elem()
}

type VirtualAnsibleRepositoryInput interface {
	pulumi.Input

	ToVirtualAnsibleRepositoryOutput() VirtualAnsibleRepositoryOutput
	ToVirtualAnsibleRepositoryOutputWithContext(ctx context.Context) VirtualAnsibleRepositoryOutput
}

func (*VirtualAnsibleRepository) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualAnsibleRepository)(nil)).Elem()
}

func (i *VirtualAnsibleRepository) ToVirtualAnsibleRepositoryOutput() VirtualAnsibleRepositoryOutput {
	return i.ToVirtualAnsibleRepositoryOutputWithContext(context.Background())
}

func (i *VirtualAnsibleRepository) ToVirtualAnsibleRepositoryOutputWithContext(ctx context.Context) VirtualAnsibleRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualAnsibleRepositoryOutput)
}

// VirtualAnsibleRepositoryArrayInput is an input type that accepts VirtualAnsibleRepositoryArray and VirtualAnsibleRepositoryArrayOutput values.
// You can construct a concrete instance of `VirtualAnsibleRepositoryArrayInput` via:
//
//	VirtualAnsibleRepositoryArray{ VirtualAnsibleRepositoryArgs{...} }
type VirtualAnsibleRepositoryArrayInput interface {
	pulumi.Input

	ToVirtualAnsibleRepositoryArrayOutput() VirtualAnsibleRepositoryArrayOutput
	ToVirtualAnsibleRepositoryArrayOutputWithContext(context.Context) VirtualAnsibleRepositoryArrayOutput
}

type VirtualAnsibleRepositoryArray []VirtualAnsibleRepositoryInput

func (VirtualAnsibleRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualAnsibleRepository)(nil)).Elem()
}

func (i VirtualAnsibleRepositoryArray) ToVirtualAnsibleRepositoryArrayOutput() VirtualAnsibleRepositoryArrayOutput {
	return i.ToVirtualAnsibleRepositoryArrayOutputWithContext(context.Background())
}

func (i VirtualAnsibleRepositoryArray) ToVirtualAnsibleRepositoryArrayOutputWithContext(ctx context.Context) VirtualAnsibleRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualAnsibleRepositoryArrayOutput)
}

// VirtualAnsibleRepositoryMapInput is an input type that accepts VirtualAnsibleRepositoryMap and VirtualAnsibleRepositoryMapOutput values.
// You can construct a concrete instance of `VirtualAnsibleRepositoryMapInput` via:
//
//	VirtualAnsibleRepositoryMap{ "key": VirtualAnsibleRepositoryArgs{...} }
type VirtualAnsibleRepositoryMapInput interface {
	pulumi.Input

	ToVirtualAnsibleRepositoryMapOutput() VirtualAnsibleRepositoryMapOutput
	ToVirtualAnsibleRepositoryMapOutputWithContext(context.Context) VirtualAnsibleRepositoryMapOutput
}

type VirtualAnsibleRepositoryMap map[string]VirtualAnsibleRepositoryInput

func (VirtualAnsibleRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualAnsibleRepository)(nil)).Elem()
}

func (i VirtualAnsibleRepositoryMap) ToVirtualAnsibleRepositoryMapOutput() VirtualAnsibleRepositoryMapOutput {
	return i.ToVirtualAnsibleRepositoryMapOutputWithContext(context.Background())
}

func (i VirtualAnsibleRepositoryMap) ToVirtualAnsibleRepositoryMapOutputWithContext(ctx context.Context) VirtualAnsibleRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualAnsibleRepositoryMapOutput)
}

type VirtualAnsibleRepositoryOutput struct{ *pulumi.OutputState }

func (VirtualAnsibleRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualAnsibleRepository)(nil)).Elem()
}

func (o VirtualAnsibleRepositoryOutput) ToVirtualAnsibleRepositoryOutput() VirtualAnsibleRepositoryOutput {
	return o
}

func (o VirtualAnsibleRepositoryOutput) ToVirtualAnsibleRepositoryOutputWithContext(ctx context.Context) VirtualAnsibleRepositoryOutput {
	return o
}

// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
// another Artifactory instance.
func (o VirtualAnsibleRepositoryOutput) ArtifactoryRequestsCanRetrieveRemoteArtifacts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualAnsibleRepository) pulumi.BoolPtrOutput {
		return v.ArtifactoryRequestsCanRetrieveRemoteArtifacts
	}).(pulumi.BoolPtrOutput)
}

// Default repository to deploy artifacts.
func (o VirtualAnsibleRepositoryOutput) DefaultDeploymentRepo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualAnsibleRepository) pulumi.StringPtrOutput { return v.DefaultDeploymentRepo }).(pulumi.StringPtrOutput)
}

// Public description.
func (o VirtualAnsibleRepositoryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualAnsibleRepository) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
// artifacts are excluded.
func (o VirtualAnsibleRepositoryOutput) ExcludesPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualAnsibleRepository) pulumi.StringPtrOutput { return v.ExcludesPattern }).(pulumi.StringPtrOutput)
}

// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When
// used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
func (o VirtualAnsibleRepositoryOutput) IncludesPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualAnsibleRepository) pulumi.StringPtrOutput { return v.IncludesPattern }).(pulumi.StringPtrOutput)
}

// A mandatory identifier for the repository that must be unique. It cannot begin with a number or
// contain spaces or special characters.
func (o VirtualAnsibleRepositoryOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualAnsibleRepository) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// Internal description.
func (o VirtualAnsibleRepositoryOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualAnsibleRepository) pulumi.StringPtrOutput { return v.Notes }).(pulumi.StringPtrOutput)
}

func (o VirtualAnsibleRepositoryOutput) PackageType() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualAnsibleRepository) pulumi.StringOutput { return v.PackageType }).(pulumi.StringOutput)
}

func (o VirtualAnsibleRepositoryOutput) ProjectEnvironments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualAnsibleRepository) pulumi.StringArrayOutput { return v.ProjectEnvironments }).(pulumi.StringArrayOutput)
}

// Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When
// assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
func (o VirtualAnsibleRepositoryOutput) ProjectKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualAnsibleRepository) pulumi.StringPtrOutput { return v.ProjectKey }).(pulumi.StringPtrOutput)
}

// Repository layout key for the virtual repository
func (o VirtualAnsibleRepositoryOutput) RepoLayoutRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualAnsibleRepository) pulumi.StringPtrOutput { return v.RepoLayoutRef }).(pulumi.StringPtrOutput)
}

// The effective list of actual repositories included in this virtual repository.
func (o VirtualAnsibleRepositoryOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualAnsibleRepository) pulumi.StringArrayOutput { return v.Repositories }).(pulumi.StringArrayOutput)
}

// This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated repositories. A value of 0 indicates no caching.
func (o VirtualAnsibleRepositoryOutput) RetrievalCachePeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualAnsibleRepository) pulumi.IntPtrOutput { return v.RetrievalCachePeriodSeconds }).(pulumi.IntPtrOutput)
}

type VirtualAnsibleRepositoryArrayOutput struct{ *pulumi.OutputState }

func (VirtualAnsibleRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualAnsibleRepository)(nil)).Elem()
}

func (o VirtualAnsibleRepositoryArrayOutput) ToVirtualAnsibleRepositoryArrayOutput() VirtualAnsibleRepositoryArrayOutput {
	return o
}

func (o VirtualAnsibleRepositoryArrayOutput) ToVirtualAnsibleRepositoryArrayOutputWithContext(ctx context.Context) VirtualAnsibleRepositoryArrayOutput {
	return o
}

func (o VirtualAnsibleRepositoryArrayOutput) Index(i pulumi.IntInput) VirtualAnsibleRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VirtualAnsibleRepository {
		return vs[0].([]*VirtualAnsibleRepository)[vs[1].(int)]
	}).(VirtualAnsibleRepositoryOutput)
}

type VirtualAnsibleRepositoryMapOutput struct{ *pulumi.OutputState }

func (VirtualAnsibleRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualAnsibleRepository)(nil)).Elem()
}

func (o VirtualAnsibleRepositoryMapOutput) ToVirtualAnsibleRepositoryMapOutput() VirtualAnsibleRepositoryMapOutput {
	return o
}

func (o VirtualAnsibleRepositoryMapOutput) ToVirtualAnsibleRepositoryMapOutputWithContext(ctx context.Context) VirtualAnsibleRepositoryMapOutput {
	return o
}

func (o VirtualAnsibleRepositoryMapOutput) MapIndex(k pulumi.StringInput) VirtualAnsibleRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VirtualAnsibleRepository {
		return vs[0].(map[string]*VirtualAnsibleRepository)[vs[1].(string)]
	}).(VirtualAnsibleRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualAnsibleRepositoryInput)(nil)).Elem(), &VirtualAnsibleRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualAnsibleRepositoryArrayInput)(nil)).Elem(), VirtualAnsibleRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualAnsibleRepositoryMapInput)(nil)).Elem(), VirtualAnsibleRepositoryMap{})
	pulumi.RegisterOutputType(VirtualAnsibleRepositoryOutput{})
	pulumi.RegisterOutputType(VirtualAnsibleRepositoryArrayOutput{})
	pulumi.RegisterOutputType(VirtualAnsibleRepositoryMapOutput{})
}
