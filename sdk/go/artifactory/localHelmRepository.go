// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-artifactory/sdk/v8/go/artifactory/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a local Helm repository.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-artifactory/sdk/v8/go/artifactory"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := artifactory.NewLocalHelmRepository(ctx, "terraform-local-test-helm-repo", &artifactory.LocalHelmRepositoryArgs{
//				Key:                      pulumi.String("terraform-local-test-helm-repo"),
//				ForceNonDuplicateChart:   pulumi.Bool(true),
//				ForceMetadataNameVersion: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Local repositories can be imported using their name, e.g.
//
// ```sh
// $ pulumi import artifactory:index/localHelmRepository:LocalHelmRepository terraform-local-test-helm-repo terraform-local-test-helm-repo
// ```
type LocalHelmRepository struct {
	pulumi.CustomResourceState

	// When set, you may view content such as HTML or Javadoc files directly from Artifactory.
	// This may not be safe and therefore requires strict content moderation to prevent malicious users from uploading content that may compromise security (e.g., cross-site scripting attacks).
	ArchiveBrowsingEnabled pulumi.BoolOutput `pulumi:"archiveBrowsingEnabled"`
	// When set, the repository does not participate in artifact resolution and new artifacts cannot be deployed.
	BlackedOut pulumi.BoolOutput `pulumi:"blackedOut"`
	// When set, download requests to this repository will redirect the client to download the artifact directly from AWS CloudFront. Available in Enterprise+ and Edge licenses only. Default value is 'false'
	CdnRedirect pulumi.BoolOutput `pulumi:"cdnRedirect"`
	// Public description.
	Description pulumi.StringOutput `pulumi:"description"`
	// When set, download requests to this repository will redirect the client to download the artifact directly from the cloud storage provider. Available in Enterprise+ and Edge licenses only.
	DownloadDirect pulumi.BoolOutput `pulumi:"downloadDirect"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**/z/*`.By default no artifacts are excluded.
	ExcludesPattern pulumi.StringOutput `pulumi:"excludesPattern"`
	// Ensures that the chart name and version in the file name match the values in Chart.yaml and adhere to SemVer standards. Only available for 7.104.5 onward. Cannot be updated after it is set.
	ForceMetadataNameVersion pulumi.BoolOutput `pulumi:"forceMetadataNameVersion"`
	// Prevents the deployment of charts with the same name and version in different repository paths. Only available for 7.104.5 onward. Cannot be updated after it is set.
	ForceNonDuplicateChart pulumi.BoolOutput `pulumi:"forceNonDuplicateChart"`
	// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of `x/y/**/z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (`**/*`).
	IncludesPattern pulumi.StringOutput `pulumi:"includesPattern"`
	// the identity key of the repo.
	Key pulumi.StringOutput `pulumi:"key"`
	// Internal description.
	Notes pulumi.StringOutput `pulumi:"notes"`
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution  pulumi.BoolOutput        `pulumi:"priorityResolution"`
	ProjectEnvironments pulumi.StringArrayOutput `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey pulumi.StringOutput `pulumi:"projectKey"`
	// List of property set name
	PropertySets pulumi.StringArrayOutput `pulumi:"propertySets"`
	// Sets the layout that the repository should use for storing and identifying modules. A recommended layout that corresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.
	RepoLayoutRef pulumi.StringOutput `pulumi:"repoLayoutRef"`
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.
	XrayIndex pulumi.BoolOutput `pulumi:"xrayIndex"`
}

// NewLocalHelmRepository registers a new resource with the given unique name, arguments, and options.
func NewLocalHelmRepository(ctx *pulumi.Context,
	name string, args *LocalHelmRepositoryArgs, opts ...pulumi.ResourceOption) (*LocalHelmRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LocalHelmRepository
	err := ctx.RegisterResource("artifactory:index/localHelmRepository:LocalHelmRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLocalHelmRepository gets an existing LocalHelmRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLocalHelmRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LocalHelmRepositoryState, opts ...pulumi.ResourceOption) (*LocalHelmRepository, error) {
	var resource LocalHelmRepository
	err := ctx.ReadResource("artifactory:index/localHelmRepository:LocalHelmRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LocalHelmRepository resources.
type localHelmRepositoryState struct {
	// When set, you may view content such as HTML or Javadoc files directly from Artifactory.
	// This may not be safe and therefore requires strict content moderation to prevent malicious users from uploading content that may compromise security (e.g., cross-site scripting attacks).
	ArchiveBrowsingEnabled *bool `pulumi:"archiveBrowsingEnabled"`
	// When set, the repository does not participate in artifact resolution and new artifacts cannot be deployed.
	BlackedOut *bool `pulumi:"blackedOut"`
	// When set, download requests to this repository will redirect the client to download the artifact directly from AWS CloudFront. Available in Enterprise+ and Edge licenses only. Default value is 'false'
	CdnRedirect *bool `pulumi:"cdnRedirect"`
	// Public description.
	Description *string `pulumi:"description"`
	// When set, download requests to this repository will redirect the client to download the artifact directly from the cloud storage provider. Available in Enterprise+ and Edge licenses only.
	DownloadDirect *bool `pulumi:"downloadDirect"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**/z/*`.By default no artifacts are excluded.
	ExcludesPattern *string `pulumi:"excludesPattern"`
	// Ensures that the chart name and version in the file name match the values in Chart.yaml and adhere to SemVer standards. Only available for 7.104.5 onward. Cannot be updated after it is set.
	ForceMetadataNameVersion *bool `pulumi:"forceMetadataNameVersion"`
	// Prevents the deployment of charts with the same name and version in different repository paths. Only available for 7.104.5 onward. Cannot be updated after it is set.
	ForceNonDuplicateChart *bool `pulumi:"forceNonDuplicateChart"`
	// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of `x/y/**/z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (`**/*`).
	IncludesPattern *string `pulumi:"includesPattern"`
	// the identity key of the repo.
	Key *string `pulumi:"key"`
	// Internal description.
	Notes *string `pulumi:"notes"`
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution  *bool    `pulumi:"priorityResolution"`
	ProjectEnvironments []string `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey *string `pulumi:"projectKey"`
	// List of property set name
	PropertySets []string `pulumi:"propertySets"`
	// Sets the layout that the repository should use for storing and identifying modules. A recommended layout that corresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.
	RepoLayoutRef *string `pulumi:"repoLayoutRef"`
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.
	XrayIndex *bool `pulumi:"xrayIndex"`
}

type LocalHelmRepositoryState struct {
	// When set, you may view content such as HTML or Javadoc files directly from Artifactory.
	// This may not be safe and therefore requires strict content moderation to prevent malicious users from uploading content that may compromise security (e.g., cross-site scripting attacks).
	ArchiveBrowsingEnabled pulumi.BoolPtrInput
	// When set, the repository does not participate in artifact resolution and new artifacts cannot be deployed.
	BlackedOut pulumi.BoolPtrInput
	// When set, download requests to this repository will redirect the client to download the artifact directly from AWS CloudFront. Available in Enterprise+ and Edge licenses only. Default value is 'false'
	CdnRedirect pulumi.BoolPtrInput
	// Public description.
	Description pulumi.StringPtrInput
	// When set, download requests to this repository will redirect the client to download the artifact directly from the cloud storage provider. Available in Enterprise+ and Edge licenses only.
	DownloadDirect pulumi.BoolPtrInput
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**/z/*`.By default no artifacts are excluded.
	ExcludesPattern pulumi.StringPtrInput
	// Ensures that the chart name and version in the file name match the values in Chart.yaml and adhere to SemVer standards. Only available for 7.104.5 onward. Cannot be updated after it is set.
	ForceMetadataNameVersion pulumi.BoolPtrInput
	// Prevents the deployment of charts with the same name and version in different repository paths. Only available for 7.104.5 onward. Cannot be updated after it is set.
	ForceNonDuplicateChart pulumi.BoolPtrInput
	// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of `x/y/**/z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (`**/*`).
	IncludesPattern pulumi.StringPtrInput
	// the identity key of the repo.
	Key pulumi.StringPtrInput
	// Internal description.
	Notes pulumi.StringPtrInput
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution  pulumi.BoolPtrInput
	ProjectEnvironments pulumi.StringArrayInput
	// Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey pulumi.StringPtrInput
	// List of property set name
	PropertySets pulumi.StringArrayInput
	// Sets the layout that the repository should use for storing and identifying modules. A recommended layout that corresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.
	RepoLayoutRef pulumi.StringPtrInput
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.
	XrayIndex pulumi.BoolPtrInput
}

func (LocalHelmRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*localHelmRepositoryState)(nil)).Elem()
}

type localHelmRepositoryArgs struct {
	// When set, you may view content such as HTML or Javadoc files directly from Artifactory.
	// This may not be safe and therefore requires strict content moderation to prevent malicious users from uploading content that may compromise security (e.g., cross-site scripting attacks).
	ArchiveBrowsingEnabled *bool `pulumi:"archiveBrowsingEnabled"`
	// When set, the repository does not participate in artifact resolution and new artifacts cannot be deployed.
	BlackedOut *bool `pulumi:"blackedOut"`
	// When set, download requests to this repository will redirect the client to download the artifact directly from AWS CloudFront. Available in Enterprise+ and Edge licenses only. Default value is 'false'
	CdnRedirect *bool `pulumi:"cdnRedirect"`
	// Public description.
	Description *string `pulumi:"description"`
	// When set, download requests to this repository will redirect the client to download the artifact directly from the cloud storage provider. Available in Enterprise+ and Edge licenses only.
	DownloadDirect *bool `pulumi:"downloadDirect"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**/z/*`.By default no artifacts are excluded.
	ExcludesPattern *string `pulumi:"excludesPattern"`
	// Ensures that the chart name and version in the file name match the values in Chart.yaml and adhere to SemVer standards. Only available for 7.104.5 onward. Cannot be updated after it is set.
	ForceMetadataNameVersion *bool `pulumi:"forceMetadataNameVersion"`
	// Prevents the deployment of charts with the same name and version in different repository paths. Only available for 7.104.5 onward. Cannot be updated after it is set.
	ForceNonDuplicateChart *bool `pulumi:"forceNonDuplicateChart"`
	// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of `x/y/**/z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (`**/*`).
	IncludesPattern *string `pulumi:"includesPattern"`
	// the identity key of the repo.
	Key string `pulumi:"key"`
	// Internal description.
	Notes *string `pulumi:"notes"`
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution  *bool    `pulumi:"priorityResolution"`
	ProjectEnvironments []string `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey *string `pulumi:"projectKey"`
	// List of property set name
	PropertySets []string `pulumi:"propertySets"`
	// Sets the layout that the repository should use for storing and identifying modules. A recommended layout that corresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.
	RepoLayoutRef *string `pulumi:"repoLayoutRef"`
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.
	XrayIndex *bool `pulumi:"xrayIndex"`
}

// The set of arguments for constructing a LocalHelmRepository resource.
type LocalHelmRepositoryArgs struct {
	// When set, you may view content such as HTML or Javadoc files directly from Artifactory.
	// This may not be safe and therefore requires strict content moderation to prevent malicious users from uploading content that may compromise security (e.g., cross-site scripting attacks).
	ArchiveBrowsingEnabled pulumi.BoolPtrInput
	// When set, the repository does not participate in artifact resolution and new artifacts cannot be deployed.
	BlackedOut pulumi.BoolPtrInput
	// When set, download requests to this repository will redirect the client to download the artifact directly from AWS CloudFront. Available in Enterprise+ and Edge licenses only. Default value is 'false'
	CdnRedirect pulumi.BoolPtrInput
	// Public description.
	Description pulumi.StringPtrInput
	// When set, download requests to this repository will redirect the client to download the artifact directly from the cloud storage provider. Available in Enterprise+ and Edge licenses only.
	DownloadDirect pulumi.BoolPtrInput
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**/z/*`.By default no artifacts are excluded.
	ExcludesPattern pulumi.StringPtrInput
	// Ensures that the chart name and version in the file name match the values in Chart.yaml and adhere to SemVer standards. Only available for 7.104.5 onward. Cannot be updated after it is set.
	ForceMetadataNameVersion pulumi.BoolPtrInput
	// Prevents the deployment of charts with the same name and version in different repository paths. Only available for 7.104.5 onward. Cannot be updated after it is set.
	ForceNonDuplicateChart pulumi.BoolPtrInput
	// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of `x/y/**/z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (`**/*`).
	IncludesPattern pulumi.StringPtrInput
	// the identity key of the repo.
	Key pulumi.StringInput
	// Internal description.
	Notes pulumi.StringPtrInput
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution  pulumi.BoolPtrInput
	ProjectEnvironments pulumi.StringArrayInput
	// Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey pulumi.StringPtrInput
	// List of property set name
	PropertySets pulumi.StringArrayInput
	// Sets the layout that the repository should use for storing and identifying modules. A recommended layout that corresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.
	RepoLayoutRef pulumi.StringPtrInput
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.
	XrayIndex pulumi.BoolPtrInput
}

func (LocalHelmRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*localHelmRepositoryArgs)(nil)).Elem()
}

type LocalHelmRepositoryInput interface {
	pulumi.Input

	ToLocalHelmRepositoryOutput() LocalHelmRepositoryOutput
	ToLocalHelmRepositoryOutputWithContext(ctx context.Context) LocalHelmRepositoryOutput
}

func (*LocalHelmRepository) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalHelmRepository)(nil)).Elem()
}

func (i *LocalHelmRepository) ToLocalHelmRepositoryOutput() LocalHelmRepositoryOutput {
	return i.ToLocalHelmRepositoryOutputWithContext(context.Background())
}

func (i *LocalHelmRepository) ToLocalHelmRepositoryOutputWithContext(ctx context.Context) LocalHelmRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalHelmRepositoryOutput)
}

// LocalHelmRepositoryArrayInput is an input type that accepts LocalHelmRepositoryArray and LocalHelmRepositoryArrayOutput values.
// You can construct a concrete instance of `LocalHelmRepositoryArrayInput` via:
//
//	LocalHelmRepositoryArray{ LocalHelmRepositoryArgs{...} }
type LocalHelmRepositoryArrayInput interface {
	pulumi.Input

	ToLocalHelmRepositoryArrayOutput() LocalHelmRepositoryArrayOutput
	ToLocalHelmRepositoryArrayOutputWithContext(context.Context) LocalHelmRepositoryArrayOutput
}

type LocalHelmRepositoryArray []LocalHelmRepositoryInput

func (LocalHelmRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LocalHelmRepository)(nil)).Elem()
}

func (i LocalHelmRepositoryArray) ToLocalHelmRepositoryArrayOutput() LocalHelmRepositoryArrayOutput {
	return i.ToLocalHelmRepositoryArrayOutputWithContext(context.Background())
}

func (i LocalHelmRepositoryArray) ToLocalHelmRepositoryArrayOutputWithContext(ctx context.Context) LocalHelmRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalHelmRepositoryArrayOutput)
}

// LocalHelmRepositoryMapInput is an input type that accepts LocalHelmRepositoryMap and LocalHelmRepositoryMapOutput values.
// You can construct a concrete instance of `LocalHelmRepositoryMapInput` via:
//
//	LocalHelmRepositoryMap{ "key": LocalHelmRepositoryArgs{...} }
type LocalHelmRepositoryMapInput interface {
	pulumi.Input

	ToLocalHelmRepositoryMapOutput() LocalHelmRepositoryMapOutput
	ToLocalHelmRepositoryMapOutputWithContext(context.Context) LocalHelmRepositoryMapOutput
}

type LocalHelmRepositoryMap map[string]LocalHelmRepositoryInput

func (LocalHelmRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LocalHelmRepository)(nil)).Elem()
}

func (i LocalHelmRepositoryMap) ToLocalHelmRepositoryMapOutput() LocalHelmRepositoryMapOutput {
	return i.ToLocalHelmRepositoryMapOutputWithContext(context.Background())
}

func (i LocalHelmRepositoryMap) ToLocalHelmRepositoryMapOutputWithContext(ctx context.Context) LocalHelmRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalHelmRepositoryMapOutput)
}

type LocalHelmRepositoryOutput struct{ *pulumi.OutputState }

func (LocalHelmRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalHelmRepository)(nil)).Elem()
}

func (o LocalHelmRepositoryOutput) ToLocalHelmRepositoryOutput() LocalHelmRepositoryOutput {
	return o
}

func (o LocalHelmRepositoryOutput) ToLocalHelmRepositoryOutputWithContext(ctx context.Context) LocalHelmRepositoryOutput {
	return o
}

// When set, you may view content such as HTML or Javadoc files directly from Artifactory.
// This may not be safe and therefore requires strict content moderation to prevent malicious users from uploading content that may compromise security (e.g., cross-site scripting attacks).
func (o LocalHelmRepositoryOutput) ArchiveBrowsingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *LocalHelmRepository) pulumi.BoolOutput { return v.ArchiveBrowsingEnabled }).(pulumi.BoolOutput)
}

// When set, the repository does not participate in artifact resolution and new artifacts cannot be deployed.
func (o LocalHelmRepositoryOutput) BlackedOut() pulumi.BoolOutput {
	return o.ApplyT(func(v *LocalHelmRepository) pulumi.BoolOutput { return v.BlackedOut }).(pulumi.BoolOutput)
}

// When set, download requests to this repository will redirect the client to download the artifact directly from AWS CloudFront. Available in Enterprise+ and Edge licenses only. Default value is 'false'
func (o LocalHelmRepositoryOutput) CdnRedirect() pulumi.BoolOutput {
	return o.ApplyT(func(v *LocalHelmRepository) pulumi.BoolOutput { return v.CdnRedirect }).(pulumi.BoolOutput)
}

// Public description.
func (o LocalHelmRepositoryOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *LocalHelmRepository) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// When set, download requests to this repository will redirect the client to download the artifact directly from the cloud storage provider. Available in Enterprise+ and Edge licenses only.
func (o LocalHelmRepositoryOutput) DownloadDirect() pulumi.BoolOutput {
	return o.ApplyT(func(v *LocalHelmRepository) pulumi.BoolOutput { return v.DownloadDirect }).(pulumi.BoolOutput)
}

// List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**/z/*`.By default no artifacts are excluded.
func (o LocalHelmRepositoryOutput) ExcludesPattern() pulumi.StringOutput {
	return o.ApplyT(func(v *LocalHelmRepository) pulumi.StringOutput { return v.ExcludesPattern }).(pulumi.StringOutput)
}

// Ensures that the chart name and version in the file name match the values in Chart.yaml and adhere to SemVer standards. Only available for 7.104.5 onward. Cannot be updated after it is set.
func (o LocalHelmRepositoryOutput) ForceMetadataNameVersion() pulumi.BoolOutput {
	return o.ApplyT(func(v *LocalHelmRepository) pulumi.BoolOutput { return v.ForceMetadataNameVersion }).(pulumi.BoolOutput)
}

// Prevents the deployment of charts with the same name and version in different repository paths. Only available for 7.104.5 onward. Cannot be updated after it is set.
func (o LocalHelmRepositoryOutput) ForceNonDuplicateChart() pulumi.BoolOutput {
	return o.ApplyT(func(v *LocalHelmRepository) pulumi.BoolOutput { return v.ForceNonDuplicateChart }).(pulumi.BoolOutput)
}

// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of `x/y/**/z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (`**/*`).
func (o LocalHelmRepositoryOutput) IncludesPattern() pulumi.StringOutput {
	return o.ApplyT(func(v *LocalHelmRepository) pulumi.StringOutput { return v.IncludesPattern }).(pulumi.StringOutput)
}

// the identity key of the repo.
func (o LocalHelmRepositoryOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *LocalHelmRepository) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// Internal description.
func (o LocalHelmRepositoryOutput) Notes() pulumi.StringOutput {
	return o.ApplyT(func(v *LocalHelmRepository) pulumi.StringOutput { return v.Notes }).(pulumi.StringOutput)
}

// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
func (o LocalHelmRepositoryOutput) PriorityResolution() pulumi.BoolOutput {
	return o.ApplyT(func(v *LocalHelmRepository) pulumi.BoolOutput { return v.PriorityResolution }).(pulumi.BoolOutput)
}

func (o LocalHelmRepositoryOutput) ProjectEnvironments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LocalHelmRepository) pulumi.StringArrayOutput { return v.ProjectEnvironments }).(pulumi.StringArrayOutput)
}

// Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
func (o LocalHelmRepositoryOutput) ProjectKey() pulumi.StringOutput {
	return o.ApplyT(func(v *LocalHelmRepository) pulumi.StringOutput { return v.ProjectKey }).(pulumi.StringOutput)
}

// List of property set name
func (o LocalHelmRepositoryOutput) PropertySets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LocalHelmRepository) pulumi.StringArrayOutput { return v.PropertySets }).(pulumi.StringArrayOutput)
}

// Sets the layout that the repository should use for storing and identifying modules. A recommended layout that corresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.
func (o LocalHelmRepositoryOutput) RepoLayoutRef() pulumi.StringOutput {
	return o.ApplyT(func(v *LocalHelmRepository) pulumi.StringOutput { return v.RepoLayoutRef }).(pulumi.StringOutput)
}

// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.
func (o LocalHelmRepositoryOutput) XrayIndex() pulumi.BoolOutput {
	return o.ApplyT(func(v *LocalHelmRepository) pulumi.BoolOutput { return v.XrayIndex }).(pulumi.BoolOutput)
}

type LocalHelmRepositoryArrayOutput struct{ *pulumi.OutputState }

func (LocalHelmRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LocalHelmRepository)(nil)).Elem()
}

func (o LocalHelmRepositoryArrayOutput) ToLocalHelmRepositoryArrayOutput() LocalHelmRepositoryArrayOutput {
	return o
}

func (o LocalHelmRepositoryArrayOutput) ToLocalHelmRepositoryArrayOutputWithContext(ctx context.Context) LocalHelmRepositoryArrayOutput {
	return o
}

func (o LocalHelmRepositoryArrayOutput) Index(i pulumi.IntInput) LocalHelmRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LocalHelmRepository {
		return vs[0].([]*LocalHelmRepository)[vs[1].(int)]
	}).(LocalHelmRepositoryOutput)
}

type LocalHelmRepositoryMapOutput struct{ *pulumi.OutputState }

func (LocalHelmRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LocalHelmRepository)(nil)).Elem()
}

func (o LocalHelmRepositoryMapOutput) ToLocalHelmRepositoryMapOutput() LocalHelmRepositoryMapOutput {
	return o
}

func (o LocalHelmRepositoryMapOutput) ToLocalHelmRepositoryMapOutputWithContext(ctx context.Context) LocalHelmRepositoryMapOutput {
	return o
}

func (o LocalHelmRepositoryMapOutput) MapIndex(k pulumi.StringInput) LocalHelmRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LocalHelmRepository {
		return vs[0].(map[string]*LocalHelmRepository)[vs[1].(string)]
	}).(LocalHelmRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LocalHelmRepositoryInput)(nil)).Elem(), &LocalHelmRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalHelmRepositoryArrayInput)(nil)).Elem(), LocalHelmRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalHelmRepositoryMapInput)(nil)).Elem(), LocalHelmRepositoryMap{})
	pulumi.RegisterOutputType(LocalHelmRepositoryOutput{})
	pulumi.RegisterOutputType(LocalHelmRepositoryArrayOutput{})
	pulumi.RegisterOutputType(LocalHelmRepositoryMapOutput{})
}
