// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-artifactory/sdk/v7/go/artifactory/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource for managaing item (file, folder, or repository) properties. When a folder is used property attachment is recursive by default. See [JFrog documentation](https://jfrog.com/help/r/jfrog-artifactory-documentation/working-with-jfrog-properties) for more details.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-artifactory/sdk/v7/go/artifactory"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := artifactory.NewItemProperties(ctx, "my-repo-properties", &artifactory.ItemPropertiesArgs{
//				RepoKey: pulumi.String("my-generic-local"),
//				Properties: pulumi.StringArrayMap{
//					"key1": pulumi.StringArray{
//						pulumi.String("value1"),
//					},
//					"key2": pulumi.StringArray{
//						pulumi.String("value2"),
//						pulumi.String("value3"),
//					},
//				},
//				IsRecursive: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = artifactory.NewItemProperties(ctx, "my-folder-properties", &artifactory.ItemPropertiesArgs{
//				RepoKey:  pulumi.String("my-generic-local"),
//				ItemPath: pulumi.String("folder/subfolder"),
//				Properties: pulumi.StringArrayMap{
//					"key1": pulumi.StringArray{
//						pulumi.String("value1"),
//					},
//					"key2": pulumi.StringArray{
//						pulumi.String("value2"),
//						pulumi.String("value3"),
//					},
//				},
//				IsRecursive: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import artifactory:index/itemProperties:ItemProperties my-repo-properties repo_key
// ```
//
// ```sh
// $ pulumi import artifactory:index/itemProperties:ItemProperties my-folder-properties repo_key:folder/subfolder
// ```
type ItemProperties struct {
	pulumi.CustomResourceState

	// Add this property to the selected folder and to all of artifacts and folders under this folder. Default to `false`
	IsRecursive pulumi.BoolOutput `pulumi:"isRecursive"`
	// The relative path of the item (file/folder/repository). Leave unset for repository.
	ItemPath pulumi.StringPtrOutput `pulumi:"itemPath"`
	// Map of key and list of values.
	Properties pulumi.StringArrayMapOutput `pulumi:"properties"`
	// Respository key.
	RepoKey pulumi.StringOutput `pulumi:"repoKey"`
}

// NewItemProperties registers a new resource with the given unique name, arguments, and options.
func NewItemProperties(ctx *pulumi.Context,
	name string, args *ItemPropertiesArgs, opts ...pulumi.ResourceOption) (*ItemProperties, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Properties == nil {
		return nil, errors.New("invalid value for required argument 'Properties'")
	}
	if args.RepoKey == nil {
		return nil, errors.New("invalid value for required argument 'RepoKey'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ItemProperties
	err := ctx.RegisterResource("artifactory:index/itemProperties:ItemProperties", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetItemProperties gets an existing ItemProperties resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetItemProperties(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ItemPropertiesState, opts ...pulumi.ResourceOption) (*ItemProperties, error) {
	var resource ItemProperties
	err := ctx.ReadResource("artifactory:index/itemProperties:ItemProperties", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ItemProperties resources.
type itemPropertiesState struct {
	// Add this property to the selected folder and to all of artifacts and folders under this folder. Default to `false`
	IsRecursive *bool `pulumi:"isRecursive"`
	// The relative path of the item (file/folder/repository). Leave unset for repository.
	ItemPath *string `pulumi:"itemPath"`
	// Map of key and list of values.
	Properties map[string][]string `pulumi:"properties"`
	// Respository key.
	RepoKey *string `pulumi:"repoKey"`
}

type ItemPropertiesState struct {
	// Add this property to the selected folder and to all of artifacts and folders under this folder. Default to `false`
	IsRecursive pulumi.BoolPtrInput
	// The relative path of the item (file/folder/repository). Leave unset for repository.
	ItemPath pulumi.StringPtrInput
	// Map of key and list of values.
	Properties pulumi.StringArrayMapInput
	// Respository key.
	RepoKey pulumi.StringPtrInput
}

func (ItemPropertiesState) ElementType() reflect.Type {
	return reflect.TypeOf((*itemPropertiesState)(nil)).Elem()
}

type itemPropertiesArgs struct {
	// Add this property to the selected folder and to all of artifacts and folders under this folder. Default to `false`
	IsRecursive *bool `pulumi:"isRecursive"`
	// The relative path of the item (file/folder/repository). Leave unset for repository.
	ItemPath *string `pulumi:"itemPath"`
	// Map of key and list of values.
	Properties map[string][]string `pulumi:"properties"`
	// Respository key.
	RepoKey string `pulumi:"repoKey"`
}

// The set of arguments for constructing a ItemProperties resource.
type ItemPropertiesArgs struct {
	// Add this property to the selected folder and to all of artifacts and folders under this folder. Default to `false`
	IsRecursive pulumi.BoolPtrInput
	// The relative path of the item (file/folder/repository). Leave unset for repository.
	ItemPath pulumi.StringPtrInput
	// Map of key and list of values.
	Properties pulumi.StringArrayMapInput
	// Respository key.
	RepoKey pulumi.StringInput
}

func (ItemPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*itemPropertiesArgs)(nil)).Elem()
}

type ItemPropertiesInput interface {
	pulumi.Input

	ToItemPropertiesOutput() ItemPropertiesOutput
	ToItemPropertiesOutputWithContext(ctx context.Context) ItemPropertiesOutput
}

func (*ItemProperties) ElementType() reflect.Type {
	return reflect.TypeOf((**ItemProperties)(nil)).Elem()
}

func (i *ItemProperties) ToItemPropertiesOutput() ItemPropertiesOutput {
	return i.ToItemPropertiesOutputWithContext(context.Background())
}

func (i *ItemProperties) ToItemPropertiesOutputWithContext(ctx context.Context) ItemPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ItemPropertiesOutput)
}

// ItemPropertiesArrayInput is an input type that accepts ItemPropertiesArray and ItemPropertiesArrayOutput values.
// You can construct a concrete instance of `ItemPropertiesArrayInput` via:
//
//	ItemPropertiesArray{ ItemPropertiesArgs{...} }
type ItemPropertiesArrayInput interface {
	pulumi.Input

	ToItemPropertiesArrayOutput() ItemPropertiesArrayOutput
	ToItemPropertiesArrayOutputWithContext(context.Context) ItemPropertiesArrayOutput
}

type ItemPropertiesArray []ItemPropertiesInput

func (ItemPropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ItemProperties)(nil)).Elem()
}

func (i ItemPropertiesArray) ToItemPropertiesArrayOutput() ItemPropertiesArrayOutput {
	return i.ToItemPropertiesArrayOutputWithContext(context.Background())
}

func (i ItemPropertiesArray) ToItemPropertiesArrayOutputWithContext(ctx context.Context) ItemPropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ItemPropertiesArrayOutput)
}

// ItemPropertiesMapInput is an input type that accepts ItemPropertiesMap and ItemPropertiesMapOutput values.
// You can construct a concrete instance of `ItemPropertiesMapInput` via:
//
//	ItemPropertiesMap{ "key": ItemPropertiesArgs{...} }
type ItemPropertiesMapInput interface {
	pulumi.Input

	ToItemPropertiesMapOutput() ItemPropertiesMapOutput
	ToItemPropertiesMapOutputWithContext(context.Context) ItemPropertiesMapOutput
}

type ItemPropertiesMap map[string]ItemPropertiesInput

func (ItemPropertiesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ItemProperties)(nil)).Elem()
}

func (i ItemPropertiesMap) ToItemPropertiesMapOutput() ItemPropertiesMapOutput {
	return i.ToItemPropertiesMapOutputWithContext(context.Background())
}

func (i ItemPropertiesMap) ToItemPropertiesMapOutputWithContext(ctx context.Context) ItemPropertiesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ItemPropertiesMapOutput)
}

type ItemPropertiesOutput struct{ *pulumi.OutputState }

func (ItemPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ItemProperties)(nil)).Elem()
}

func (o ItemPropertiesOutput) ToItemPropertiesOutput() ItemPropertiesOutput {
	return o
}

func (o ItemPropertiesOutput) ToItemPropertiesOutputWithContext(ctx context.Context) ItemPropertiesOutput {
	return o
}

// Add this property to the selected folder and to all of artifacts and folders under this folder. Default to `false`
func (o ItemPropertiesOutput) IsRecursive() pulumi.BoolOutput {
	return o.ApplyT(func(v *ItemProperties) pulumi.BoolOutput { return v.IsRecursive }).(pulumi.BoolOutput)
}

// The relative path of the item (file/folder/repository). Leave unset for repository.
func (o ItemPropertiesOutput) ItemPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ItemProperties) pulumi.StringPtrOutput { return v.ItemPath }).(pulumi.StringPtrOutput)
}

// Map of key and list of values.
func (o ItemPropertiesOutput) Properties() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v *ItemProperties) pulumi.StringArrayMapOutput { return v.Properties }).(pulumi.StringArrayMapOutput)
}

// Respository key.
func (o ItemPropertiesOutput) RepoKey() pulumi.StringOutput {
	return o.ApplyT(func(v *ItemProperties) pulumi.StringOutput { return v.RepoKey }).(pulumi.StringOutput)
}

type ItemPropertiesArrayOutput struct{ *pulumi.OutputState }

func (ItemPropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ItemProperties)(nil)).Elem()
}

func (o ItemPropertiesArrayOutput) ToItemPropertiesArrayOutput() ItemPropertiesArrayOutput {
	return o
}

func (o ItemPropertiesArrayOutput) ToItemPropertiesArrayOutputWithContext(ctx context.Context) ItemPropertiesArrayOutput {
	return o
}

func (o ItemPropertiesArrayOutput) Index(i pulumi.IntInput) ItemPropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ItemProperties {
		return vs[0].([]*ItemProperties)[vs[1].(int)]
	}).(ItemPropertiesOutput)
}

type ItemPropertiesMapOutput struct{ *pulumi.OutputState }

func (ItemPropertiesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ItemProperties)(nil)).Elem()
}

func (o ItemPropertiesMapOutput) ToItemPropertiesMapOutput() ItemPropertiesMapOutput {
	return o
}

func (o ItemPropertiesMapOutput) ToItemPropertiesMapOutputWithContext(ctx context.Context) ItemPropertiesMapOutput {
	return o
}

func (o ItemPropertiesMapOutput) MapIndex(k pulumi.StringInput) ItemPropertiesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ItemProperties {
		return vs[0].(map[string]*ItemProperties)[vs[1].(string)]
	}).(ItemPropertiesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ItemPropertiesInput)(nil)).Elem(), &ItemProperties{})
	pulumi.RegisterInputType(reflect.TypeOf((*ItemPropertiesArrayInput)(nil)).Elem(), ItemPropertiesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ItemPropertiesMapInput)(nil)).Elem(), ItemPropertiesMap{})
	pulumi.RegisterOutputType(ItemPropertiesOutput{})
	pulumi.RegisterOutputType(ItemPropertiesArrayOutput{})
	pulumi.RegisterOutputType(ItemPropertiesMapOutput{})
}
