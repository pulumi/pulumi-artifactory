// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Xray Policy Resource
//
// Provides an Xray policy resource. This can be used to create and manage Xray v1 policies.
//
// ## Import
//
// A policy can be imported by using the name, e.g.
//
// ```sh
//  $ pulumi import artifactory:index/xrayPolicy:XrayPolicy example policy-name
// ```
type XrayPolicy struct {
	pulumi.CustomResourceState

	// (Optional) Name of the policy author
	Author pulumi.StringOutput `pulumi:"author"`
	// Timestamp of when the policy was first created
	Created pulumi.StringOutput `pulumi:"created"`
	// (Optional) More verbose description of the policy
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Timestamp of when the policy was last modified
	Modified pulumi.StringOutput `pulumi:"modified"`
	// (Required) Name of the rule
	Name pulumi.StringOutput `pulumi:"name"`
	// (Required) Nested block describing the policy rules. Described below.
	Rules XrayPolicyRuleArrayOutput `pulumi:"rules"`
	// (Required) Type of the policy
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewXrayPolicy registers a new resource with the given unique name, arguments, and options.
func NewXrayPolicy(ctx *pulumi.Context,
	name string, args *XrayPolicyArgs, opts ...pulumi.ResourceOption) (*XrayPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource XrayPolicy
	err := ctx.RegisterResource("artifactory:index/xrayPolicy:XrayPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetXrayPolicy gets an existing XrayPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetXrayPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *XrayPolicyState, opts ...pulumi.ResourceOption) (*XrayPolicy, error) {
	var resource XrayPolicy
	err := ctx.ReadResource("artifactory:index/xrayPolicy:XrayPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering XrayPolicy resources.
type xrayPolicyState struct {
	// (Optional) Name of the policy author
	Author *string `pulumi:"author"`
	// Timestamp of when the policy was first created
	Created *string `pulumi:"created"`
	// (Optional) More verbose description of the policy
	Description *string `pulumi:"description"`
	// Timestamp of when the policy was last modified
	Modified *string `pulumi:"modified"`
	// (Required) Name of the rule
	Name *string `pulumi:"name"`
	// (Required) Nested block describing the policy rules. Described below.
	Rules []XrayPolicyRule `pulumi:"rules"`
	// (Required) Type of the policy
	Type *string `pulumi:"type"`
}

type XrayPolicyState struct {
	// (Optional) Name of the policy author
	Author pulumi.StringPtrInput
	// Timestamp of when the policy was first created
	Created pulumi.StringPtrInput
	// (Optional) More verbose description of the policy
	Description pulumi.StringPtrInput
	// Timestamp of when the policy was last modified
	Modified pulumi.StringPtrInput
	// (Required) Name of the rule
	Name pulumi.StringPtrInput
	// (Required) Nested block describing the policy rules. Described below.
	Rules XrayPolicyRuleArrayInput
	// (Required) Type of the policy
	Type pulumi.StringPtrInput
}

func (XrayPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*xrayPolicyState)(nil)).Elem()
}

type xrayPolicyArgs struct {
	// (Optional) More verbose description of the policy
	Description *string `pulumi:"description"`
	// (Required) Name of the rule
	Name *string `pulumi:"name"`
	// (Required) Nested block describing the policy rules. Described below.
	Rules []XrayPolicyRule `pulumi:"rules"`
	// (Required) Type of the policy
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a XrayPolicy resource.
type XrayPolicyArgs struct {
	// (Optional) More verbose description of the policy
	Description pulumi.StringPtrInput
	// (Required) Name of the rule
	Name pulumi.StringPtrInput
	// (Required) Nested block describing the policy rules. Described below.
	Rules XrayPolicyRuleArrayInput
	// (Required) Type of the policy
	Type pulumi.StringInput
}

func (XrayPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*xrayPolicyArgs)(nil)).Elem()
}

type XrayPolicyInput interface {
	pulumi.Input

	ToXrayPolicyOutput() XrayPolicyOutput
	ToXrayPolicyOutputWithContext(ctx context.Context) XrayPolicyOutput
}

func (*XrayPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**XrayPolicy)(nil)).Elem()
}

func (i *XrayPolicy) ToXrayPolicyOutput() XrayPolicyOutput {
	return i.ToXrayPolicyOutputWithContext(context.Background())
}

func (i *XrayPolicy) ToXrayPolicyOutputWithContext(ctx context.Context) XrayPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XrayPolicyOutput)
}

// XrayPolicyArrayInput is an input type that accepts XrayPolicyArray and XrayPolicyArrayOutput values.
// You can construct a concrete instance of `XrayPolicyArrayInput` via:
//
//          XrayPolicyArray{ XrayPolicyArgs{...} }
type XrayPolicyArrayInput interface {
	pulumi.Input

	ToXrayPolicyArrayOutput() XrayPolicyArrayOutput
	ToXrayPolicyArrayOutputWithContext(context.Context) XrayPolicyArrayOutput
}

type XrayPolicyArray []XrayPolicyInput

func (XrayPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*XrayPolicy)(nil)).Elem()
}

func (i XrayPolicyArray) ToXrayPolicyArrayOutput() XrayPolicyArrayOutput {
	return i.ToXrayPolicyArrayOutputWithContext(context.Background())
}

func (i XrayPolicyArray) ToXrayPolicyArrayOutputWithContext(ctx context.Context) XrayPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XrayPolicyArrayOutput)
}

// XrayPolicyMapInput is an input type that accepts XrayPolicyMap and XrayPolicyMapOutput values.
// You can construct a concrete instance of `XrayPolicyMapInput` via:
//
//          XrayPolicyMap{ "key": XrayPolicyArgs{...} }
type XrayPolicyMapInput interface {
	pulumi.Input

	ToXrayPolicyMapOutput() XrayPolicyMapOutput
	ToXrayPolicyMapOutputWithContext(context.Context) XrayPolicyMapOutput
}

type XrayPolicyMap map[string]XrayPolicyInput

func (XrayPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*XrayPolicy)(nil)).Elem()
}

func (i XrayPolicyMap) ToXrayPolicyMapOutput() XrayPolicyMapOutput {
	return i.ToXrayPolicyMapOutputWithContext(context.Background())
}

func (i XrayPolicyMap) ToXrayPolicyMapOutputWithContext(ctx context.Context) XrayPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XrayPolicyMapOutput)
}

type XrayPolicyOutput struct{ *pulumi.OutputState }

func (XrayPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**XrayPolicy)(nil)).Elem()
}

func (o XrayPolicyOutput) ToXrayPolicyOutput() XrayPolicyOutput {
	return o
}

func (o XrayPolicyOutput) ToXrayPolicyOutputWithContext(ctx context.Context) XrayPolicyOutput {
	return o
}

type XrayPolicyArrayOutput struct{ *pulumi.OutputState }

func (XrayPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*XrayPolicy)(nil)).Elem()
}

func (o XrayPolicyArrayOutput) ToXrayPolicyArrayOutput() XrayPolicyArrayOutput {
	return o
}

func (o XrayPolicyArrayOutput) ToXrayPolicyArrayOutputWithContext(ctx context.Context) XrayPolicyArrayOutput {
	return o
}

func (o XrayPolicyArrayOutput) Index(i pulumi.IntInput) XrayPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *XrayPolicy {
		return vs[0].([]*XrayPolicy)[vs[1].(int)]
	}).(XrayPolicyOutput)
}

type XrayPolicyMapOutput struct{ *pulumi.OutputState }

func (XrayPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*XrayPolicy)(nil)).Elem()
}

func (o XrayPolicyMapOutput) ToXrayPolicyMapOutput() XrayPolicyMapOutput {
	return o
}

func (o XrayPolicyMapOutput) ToXrayPolicyMapOutputWithContext(ctx context.Context) XrayPolicyMapOutput {
	return o
}

func (o XrayPolicyMapOutput) MapIndex(k pulumi.StringInput) XrayPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *XrayPolicy {
		return vs[0].(map[string]*XrayPolicy)[vs[1].(string)]
	}).(XrayPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*XrayPolicyInput)(nil)).Elem(), &XrayPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*XrayPolicyArrayInput)(nil)).Elem(), XrayPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*XrayPolicyMapInput)(nil)).Elem(), XrayPolicyMap{})
	pulumi.RegisterOutputType(XrayPolicyOutput{})
	pulumi.RegisterOutputType(XrayPolicyArrayOutput{})
	pulumi.RegisterOutputType(XrayPolicyMapOutput{})
}
