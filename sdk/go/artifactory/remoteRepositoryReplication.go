// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a remote repository replication resource, also referred to as Artifactory pull replication.
// This resource provides a convenient way to proactively populate a remote cache, and is very useful when waiting for new artifacts to arrive on demand (when first requested) is not desirable due to network latency. See [official documentation](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-PullReplication).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-artifactory/sdk/v3/go/artifactory"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			artifactoryUrl := cfg.Require("artifactoryUrl")
//			_, err := artifactory.NewLocalMavenRepository(ctx, "providerTestSource", &artifactory.LocalMavenRepositoryArgs{
//				Key: pulumi.String("provider_test_source"),
//			})
//			if err != nil {
//				return err
//			}
//			providerTestDest, err := artifactory.NewRemoteMavenRepository(ctx, "providerTestDest", &artifactory.RemoteMavenRepositoryArgs{
//				Key:      pulumi.String("provider_test_dest"),
//				Url:      pulumi.String(fmt.Sprintf("%v/artifactory/%v", artifactoryUrl, artifactory_local_maven_repository.Artifactory_local_maven_repository.Key)),
//				Username: pulumi.String("foo"),
//				Password: pulumi.String("bar"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = artifactory.NewRemoteRepositoryReplication(ctx, "remote-rep", &artifactory.RemoteRepositoryReplicationArgs{
//				RepoKey:                         providerTestDest.Key,
//				CronExp:                         pulumi.String("0 0 * * * ?"),
//				EnableEventReplication:          pulumi.Bool(true),
//				Enabled:                         pulumi.Bool(true),
//				SyncDeletes:                     pulumi.Bool(false),
//				SyncProperties:                  pulumi.Bool(true),
//				IncludePathPrefixPattern:        pulumi.String("/some-repo/"),
//				ExcludePathPrefixPattern:        pulumi.String("/some-other-repo/"),
//				CheckBinaryExistenceInFilestore: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Push replication configs can be imported using their repo key, e.g.
//
// ```sh
//
//	$ pulumi import artifactory:index/remoteRepositoryReplication:RemoteRepositoryReplication foo-rep provider_test_source
//
// ```
type RemoteRepositoryReplication struct {
	pulumi.CustomResourceState

	// Enabling the `checkBinaryExistenceInFilestore` flag requires an Enterprise Plus license. When true, enables distributed checksum storage. For more information, see [Optimizing Repository Replication with Checksum-Based Storage](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-OptimizingRepositoryReplicationUsingStorageLevelSynchronizationOptions).
	CheckBinaryExistenceInFilestore pulumi.BoolPtrOutput `pulumi:"checkBinaryExistenceInFilestore"`
	// A valid CRON expression that you can use to control replication frequency. Eg: `0 0 12 * * ? *`, `0 0 2 ? * MON-SAT *`. Note: use 6 or 7 parts format - Seconds, Minutes Hours, Day Of Month, Month, Day Of Week, Year (optional). Specifying both a day-of-week AND a day-of-month parameter is not supported. One of them should be replaced by `?`. Incorrect: `* 5,7,9 14/2 * * WED,SAT *`, correct: `* 5,7,9 14/2 ? * WED,SAT *`. See details in [Cron Trigger Tutorial](https://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html).
	CronExp pulumi.StringPtrOutput `pulumi:"cronExp"`
	// When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on artifact, e.g. add, deleted or property change. Default value is `false`.
	// com/confluence/display/JFROG/User+Profile#UserProfile-IdentityTokenidentitytoken).
	EnableEventReplication pulumi.BoolPtrOutput `pulumi:"enableEventReplication"`
	// When set, enables replication of this repository to the target specified in `url` attribute. Default value is `true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**/z/*`. By default, no artifacts are excluded.
	ExcludePathPrefixPattern pulumi.StringPtrOutput `pulumi:"excludePathPrefixPattern"`
	// List of artifact patterns to include when evaluating artifact requests in the form of `x/y/**/z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included `(**/*)`.
	IncludePathPrefixPattern pulumi.StringPtrOutput `pulumi:"includePathPrefixPattern"`
	// Replication ID, the value is unknown until the resource is created. Can't be set or updated.
	ReplicationKey pulumi.StringOutput `pulumi:"replicationKey"`
	// Repository name.
	RepoKey pulumi.StringOutput `pulumi:"repoKey"`
	// When set, items that were deleted locally should also be deleted remotely (also applies to properties metadata). Note that enabling this option, will delete artifacts on the target that do not exist in the source repository. Default value is `false`.
	SyncDeletes pulumi.BoolPtrOutput `pulumi:"syncDeletes"`
	// When set, the task also synchronizes the properties of replicated artifacts. Default value is `true`.
	SyncProperties pulumi.BoolPtrOutput `pulumi:"syncProperties"`
}

// NewRemoteRepositoryReplication registers a new resource with the given unique name, arguments, and options.
func NewRemoteRepositoryReplication(ctx *pulumi.Context,
	name string, args *RemoteRepositoryReplicationArgs, opts ...pulumi.ResourceOption) (*RemoteRepositoryReplication, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RepoKey == nil {
		return nil, errors.New("invalid value for required argument 'RepoKey'")
	}
	var resource RemoteRepositoryReplication
	err := ctx.RegisterResource("artifactory:index/remoteRepositoryReplication:RemoteRepositoryReplication", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRemoteRepositoryReplication gets an existing RemoteRepositoryReplication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRemoteRepositoryReplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RemoteRepositoryReplicationState, opts ...pulumi.ResourceOption) (*RemoteRepositoryReplication, error) {
	var resource RemoteRepositoryReplication
	err := ctx.ReadResource("artifactory:index/remoteRepositoryReplication:RemoteRepositoryReplication", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RemoteRepositoryReplication resources.
type remoteRepositoryReplicationState struct {
	// Enabling the `checkBinaryExistenceInFilestore` flag requires an Enterprise Plus license. When true, enables distributed checksum storage. For more information, see [Optimizing Repository Replication with Checksum-Based Storage](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-OptimizingRepositoryReplicationUsingStorageLevelSynchronizationOptions).
	CheckBinaryExistenceInFilestore *bool `pulumi:"checkBinaryExistenceInFilestore"`
	// A valid CRON expression that you can use to control replication frequency. Eg: `0 0 12 * * ? *`, `0 0 2 ? * MON-SAT *`. Note: use 6 or 7 parts format - Seconds, Minutes Hours, Day Of Month, Month, Day Of Week, Year (optional). Specifying both a day-of-week AND a day-of-month parameter is not supported. One of them should be replaced by `?`. Incorrect: `* 5,7,9 14/2 * * WED,SAT *`, correct: `* 5,7,9 14/2 ? * WED,SAT *`. See details in [Cron Trigger Tutorial](https://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html).
	CronExp *string `pulumi:"cronExp"`
	// When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on artifact, e.g. add, deleted or property change. Default value is `false`.
	// com/confluence/display/JFROG/User+Profile#UserProfile-IdentityTokenidentitytoken).
	EnableEventReplication *bool `pulumi:"enableEventReplication"`
	// When set, enables replication of this repository to the target specified in `url` attribute. Default value is `true`.
	Enabled *bool `pulumi:"enabled"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**/z/*`. By default, no artifacts are excluded.
	ExcludePathPrefixPattern *string `pulumi:"excludePathPrefixPattern"`
	// List of artifact patterns to include when evaluating artifact requests in the form of `x/y/**/z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included `(**/*)`.
	IncludePathPrefixPattern *string `pulumi:"includePathPrefixPattern"`
	// Replication ID, the value is unknown until the resource is created. Can't be set or updated.
	ReplicationKey *string `pulumi:"replicationKey"`
	// Repository name.
	RepoKey *string `pulumi:"repoKey"`
	// When set, items that were deleted locally should also be deleted remotely (also applies to properties metadata). Note that enabling this option, will delete artifacts on the target that do not exist in the source repository. Default value is `false`.
	SyncDeletes *bool `pulumi:"syncDeletes"`
	// When set, the task also synchronizes the properties of replicated artifacts. Default value is `true`.
	SyncProperties *bool `pulumi:"syncProperties"`
}

type RemoteRepositoryReplicationState struct {
	// Enabling the `checkBinaryExistenceInFilestore` flag requires an Enterprise Plus license. When true, enables distributed checksum storage. For more information, see [Optimizing Repository Replication with Checksum-Based Storage](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-OptimizingRepositoryReplicationUsingStorageLevelSynchronizationOptions).
	CheckBinaryExistenceInFilestore pulumi.BoolPtrInput
	// A valid CRON expression that you can use to control replication frequency. Eg: `0 0 12 * * ? *`, `0 0 2 ? * MON-SAT *`. Note: use 6 or 7 parts format - Seconds, Minutes Hours, Day Of Month, Month, Day Of Week, Year (optional). Specifying both a day-of-week AND a day-of-month parameter is not supported. One of them should be replaced by `?`. Incorrect: `* 5,7,9 14/2 * * WED,SAT *`, correct: `* 5,7,9 14/2 ? * WED,SAT *`. See details in [Cron Trigger Tutorial](https://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html).
	CronExp pulumi.StringPtrInput
	// When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on artifact, e.g. add, deleted or property change. Default value is `false`.
	// com/confluence/display/JFROG/User+Profile#UserProfile-IdentityTokenidentitytoken).
	EnableEventReplication pulumi.BoolPtrInput
	// When set, enables replication of this repository to the target specified in `url` attribute. Default value is `true`.
	Enabled pulumi.BoolPtrInput
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**/z/*`. By default, no artifacts are excluded.
	ExcludePathPrefixPattern pulumi.StringPtrInput
	// List of artifact patterns to include when evaluating artifact requests in the form of `x/y/**/z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included `(**/*)`.
	IncludePathPrefixPattern pulumi.StringPtrInput
	// Replication ID, the value is unknown until the resource is created. Can't be set or updated.
	ReplicationKey pulumi.StringPtrInput
	// Repository name.
	RepoKey pulumi.StringPtrInput
	// When set, items that were deleted locally should also be deleted remotely (also applies to properties metadata). Note that enabling this option, will delete artifacts on the target that do not exist in the source repository. Default value is `false`.
	SyncDeletes pulumi.BoolPtrInput
	// When set, the task also synchronizes the properties of replicated artifacts. Default value is `true`.
	SyncProperties pulumi.BoolPtrInput
}

func (RemoteRepositoryReplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*remoteRepositoryReplicationState)(nil)).Elem()
}

type remoteRepositoryReplicationArgs struct {
	// Enabling the `checkBinaryExistenceInFilestore` flag requires an Enterprise Plus license. When true, enables distributed checksum storage. For more information, see [Optimizing Repository Replication with Checksum-Based Storage](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-OptimizingRepositoryReplicationUsingStorageLevelSynchronizationOptions).
	CheckBinaryExistenceInFilestore *bool `pulumi:"checkBinaryExistenceInFilestore"`
	// A valid CRON expression that you can use to control replication frequency. Eg: `0 0 12 * * ? *`, `0 0 2 ? * MON-SAT *`. Note: use 6 or 7 parts format - Seconds, Minutes Hours, Day Of Month, Month, Day Of Week, Year (optional). Specifying both a day-of-week AND a day-of-month parameter is not supported. One of them should be replaced by `?`. Incorrect: `* 5,7,9 14/2 * * WED,SAT *`, correct: `* 5,7,9 14/2 ? * WED,SAT *`. See details in [Cron Trigger Tutorial](https://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html).
	CronExp *string `pulumi:"cronExp"`
	// When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on artifact, e.g. add, deleted or property change. Default value is `false`.
	// com/confluence/display/JFROG/User+Profile#UserProfile-IdentityTokenidentitytoken).
	EnableEventReplication *bool `pulumi:"enableEventReplication"`
	// When set, enables replication of this repository to the target specified in `url` attribute. Default value is `true`.
	Enabled *bool `pulumi:"enabled"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**/z/*`. By default, no artifacts are excluded.
	ExcludePathPrefixPattern *string `pulumi:"excludePathPrefixPattern"`
	// List of artifact patterns to include when evaluating artifact requests in the form of `x/y/**/z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included `(**/*)`.
	IncludePathPrefixPattern *string `pulumi:"includePathPrefixPattern"`
	// Replication ID, the value is unknown until the resource is created. Can't be set or updated.
	ReplicationKey *string `pulumi:"replicationKey"`
	// Repository name.
	RepoKey string `pulumi:"repoKey"`
	// When set, items that were deleted locally should also be deleted remotely (also applies to properties metadata). Note that enabling this option, will delete artifacts on the target that do not exist in the source repository. Default value is `false`.
	SyncDeletes *bool `pulumi:"syncDeletes"`
	// When set, the task also synchronizes the properties of replicated artifacts. Default value is `true`.
	SyncProperties *bool `pulumi:"syncProperties"`
}

// The set of arguments for constructing a RemoteRepositoryReplication resource.
type RemoteRepositoryReplicationArgs struct {
	// Enabling the `checkBinaryExistenceInFilestore` flag requires an Enterprise Plus license. When true, enables distributed checksum storage. For more information, see [Optimizing Repository Replication with Checksum-Based Storage](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-OptimizingRepositoryReplicationUsingStorageLevelSynchronizationOptions).
	CheckBinaryExistenceInFilestore pulumi.BoolPtrInput
	// A valid CRON expression that you can use to control replication frequency. Eg: `0 0 12 * * ? *`, `0 0 2 ? * MON-SAT *`. Note: use 6 or 7 parts format - Seconds, Minutes Hours, Day Of Month, Month, Day Of Week, Year (optional). Specifying both a day-of-week AND a day-of-month parameter is not supported. One of them should be replaced by `?`. Incorrect: `* 5,7,9 14/2 * * WED,SAT *`, correct: `* 5,7,9 14/2 ? * WED,SAT *`. See details in [Cron Trigger Tutorial](https://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html).
	CronExp pulumi.StringPtrInput
	// When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on artifact, e.g. add, deleted or property change. Default value is `false`.
	// com/confluence/display/JFROG/User+Profile#UserProfile-IdentityTokenidentitytoken).
	EnableEventReplication pulumi.BoolPtrInput
	// When set, enables replication of this repository to the target specified in `url` attribute. Default value is `true`.
	Enabled pulumi.BoolPtrInput
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**/z/*`. By default, no artifacts are excluded.
	ExcludePathPrefixPattern pulumi.StringPtrInput
	// List of artifact patterns to include when evaluating artifact requests in the form of `x/y/**/z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included `(**/*)`.
	IncludePathPrefixPattern pulumi.StringPtrInput
	// Replication ID, the value is unknown until the resource is created. Can't be set or updated.
	ReplicationKey pulumi.StringPtrInput
	// Repository name.
	RepoKey pulumi.StringInput
	// When set, items that were deleted locally should also be deleted remotely (also applies to properties metadata). Note that enabling this option, will delete artifacts on the target that do not exist in the source repository. Default value is `false`.
	SyncDeletes pulumi.BoolPtrInput
	// When set, the task also synchronizes the properties of replicated artifacts. Default value is `true`.
	SyncProperties pulumi.BoolPtrInput
}

func (RemoteRepositoryReplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*remoteRepositoryReplicationArgs)(nil)).Elem()
}

type RemoteRepositoryReplicationInput interface {
	pulumi.Input

	ToRemoteRepositoryReplicationOutput() RemoteRepositoryReplicationOutput
	ToRemoteRepositoryReplicationOutputWithContext(ctx context.Context) RemoteRepositoryReplicationOutput
}

func (*RemoteRepositoryReplication) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteRepositoryReplication)(nil)).Elem()
}

func (i *RemoteRepositoryReplication) ToRemoteRepositoryReplicationOutput() RemoteRepositoryReplicationOutput {
	return i.ToRemoteRepositoryReplicationOutputWithContext(context.Background())
}

func (i *RemoteRepositoryReplication) ToRemoteRepositoryReplicationOutputWithContext(ctx context.Context) RemoteRepositoryReplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteRepositoryReplicationOutput)
}

// RemoteRepositoryReplicationArrayInput is an input type that accepts RemoteRepositoryReplicationArray and RemoteRepositoryReplicationArrayOutput values.
// You can construct a concrete instance of `RemoteRepositoryReplicationArrayInput` via:
//
//	RemoteRepositoryReplicationArray{ RemoteRepositoryReplicationArgs{...} }
type RemoteRepositoryReplicationArrayInput interface {
	pulumi.Input

	ToRemoteRepositoryReplicationArrayOutput() RemoteRepositoryReplicationArrayOutput
	ToRemoteRepositoryReplicationArrayOutputWithContext(context.Context) RemoteRepositoryReplicationArrayOutput
}

type RemoteRepositoryReplicationArray []RemoteRepositoryReplicationInput

func (RemoteRepositoryReplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RemoteRepositoryReplication)(nil)).Elem()
}

func (i RemoteRepositoryReplicationArray) ToRemoteRepositoryReplicationArrayOutput() RemoteRepositoryReplicationArrayOutput {
	return i.ToRemoteRepositoryReplicationArrayOutputWithContext(context.Background())
}

func (i RemoteRepositoryReplicationArray) ToRemoteRepositoryReplicationArrayOutputWithContext(ctx context.Context) RemoteRepositoryReplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteRepositoryReplicationArrayOutput)
}

// RemoteRepositoryReplicationMapInput is an input type that accepts RemoteRepositoryReplicationMap and RemoteRepositoryReplicationMapOutput values.
// You can construct a concrete instance of `RemoteRepositoryReplicationMapInput` via:
//
//	RemoteRepositoryReplicationMap{ "key": RemoteRepositoryReplicationArgs{...} }
type RemoteRepositoryReplicationMapInput interface {
	pulumi.Input

	ToRemoteRepositoryReplicationMapOutput() RemoteRepositoryReplicationMapOutput
	ToRemoteRepositoryReplicationMapOutputWithContext(context.Context) RemoteRepositoryReplicationMapOutput
}

type RemoteRepositoryReplicationMap map[string]RemoteRepositoryReplicationInput

func (RemoteRepositoryReplicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RemoteRepositoryReplication)(nil)).Elem()
}

func (i RemoteRepositoryReplicationMap) ToRemoteRepositoryReplicationMapOutput() RemoteRepositoryReplicationMapOutput {
	return i.ToRemoteRepositoryReplicationMapOutputWithContext(context.Background())
}

func (i RemoteRepositoryReplicationMap) ToRemoteRepositoryReplicationMapOutputWithContext(ctx context.Context) RemoteRepositoryReplicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteRepositoryReplicationMapOutput)
}

type RemoteRepositoryReplicationOutput struct{ *pulumi.OutputState }

func (RemoteRepositoryReplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteRepositoryReplication)(nil)).Elem()
}

func (o RemoteRepositoryReplicationOutput) ToRemoteRepositoryReplicationOutput() RemoteRepositoryReplicationOutput {
	return o
}

func (o RemoteRepositoryReplicationOutput) ToRemoteRepositoryReplicationOutputWithContext(ctx context.Context) RemoteRepositoryReplicationOutput {
	return o
}

// Enabling the `checkBinaryExistenceInFilestore` flag requires an Enterprise Plus license. When true, enables distributed checksum storage. For more information, see [Optimizing Repository Replication with Checksum-Based Storage](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-OptimizingRepositoryReplicationUsingStorageLevelSynchronizationOptions).
func (o RemoteRepositoryReplicationOutput) CheckBinaryExistenceInFilestore() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteRepositoryReplication) pulumi.BoolPtrOutput { return v.CheckBinaryExistenceInFilestore }).(pulumi.BoolPtrOutput)
}

// A valid CRON expression that you can use to control replication frequency. Eg: `0 0 12 * * ? *`, `0 0 2 ? * MON-SAT *`. Note: use 6 or 7 parts format - Seconds, Minutes Hours, Day Of Month, Month, Day Of Week, Year (optional). Specifying both a day-of-week AND a day-of-month parameter is not supported. One of them should be replaced by `?`. Incorrect: `* 5,7,9 14/2 * * WED,SAT *`, correct: `* 5,7,9 14/2 ? * WED,SAT *`. See details in [Cron Trigger Tutorial](https://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html).
func (o RemoteRepositoryReplicationOutput) CronExp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteRepositoryReplication) pulumi.StringPtrOutput { return v.CronExp }).(pulumi.StringPtrOutput)
}

// When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on artifact, e.g. add, deleted or property change. Default value is `false`.
// com/confluence/display/JFROG/User+Profile#UserProfile-IdentityTokenidentitytoken).
func (o RemoteRepositoryReplicationOutput) EnableEventReplication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteRepositoryReplication) pulumi.BoolPtrOutput { return v.EnableEventReplication }).(pulumi.BoolPtrOutput)
}

// When set, enables replication of this repository to the target specified in `url` attribute. Default value is `true`.
func (o RemoteRepositoryReplicationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteRepositoryReplication) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**/z/*`. By default, no artifacts are excluded.
func (o RemoteRepositoryReplicationOutput) ExcludePathPrefixPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteRepositoryReplication) pulumi.StringPtrOutput { return v.ExcludePathPrefixPattern }).(pulumi.StringPtrOutput)
}

// List of artifact patterns to include when evaluating artifact requests in the form of `x/y/**/z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included `(**/*)`.
func (o RemoteRepositoryReplicationOutput) IncludePathPrefixPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteRepositoryReplication) pulumi.StringPtrOutput { return v.IncludePathPrefixPattern }).(pulumi.StringPtrOutput)
}

// Replication ID, the value is unknown until the resource is created. Can't be set or updated.
func (o RemoteRepositoryReplicationOutput) ReplicationKey() pulumi.StringOutput {
	return o.ApplyT(func(v *RemoteRepositoryReplication) pulumi.StringOutput { return v.ReplicationKey }).(pulumi.StringOutput)
}

// Repository name.
func (o RemoteRepositoryReplicationOutput) RepoKey() pulumi.StringOutput {
	return o.ApplyT(func(v *RemoteRepositoryReplication) pulumi.StringOutput { return v.RepoKey }).(pulumi.StringOutput)
}

// When set, items that were deleted locally should also be deleted remotely (also applies to properties metadata). Note that enabling this option, will delete artifacts on the target that do not exist in the source repository. Default value is `false`.
func (o RemoteRepositoryReplicationOutput) SyncDeletes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteRepositoryReplication) pulumi.BoolPtrOutput { return v.SyncDeletes }).(pulumi.BoolPtrOutput)
}

// When set, the task also synchronizes the properties of replicated artifacts. Default value is `true`.
func (o RemoteRepositoryReplicationOutput) SyncProperties() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteRepositoryReplication) pulumi.BoolPtrOutput { return v.SyncProperties }).(pulumi.BoolPtrOutput)
}

type RemoteRepositoryReplicationArrayOutput struct{ *pulumi.OutputState }

func (RemoteRepositoryReplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RemoteRepositoryReplication)(nil)).Elem()
}

func (o RemoteRepositoryReplicationArrayOutput) ToRemoteRepositoryReplicationArrayOutput() RemoteRepositoryReplicationArrayOutput {
	return o
}

func (o RemoteRepositoryReplicationArrayOutput) ToRemoteRepositoryReplicationArrayOutputWithContext(ctx context.Context) RemoteRepositoryReplicationArrayOutput {
	return o
}

func (o RemoteRepositoryReplicationArrayOutput) Index(i pulumi.IntInput) RemoteRepositoryReplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RemoteRepositoryReplication {
		return vs[0].([]*RemoteRepositoryReplication)[vs[1].(int)]
	}).(RemoteRepositoryReplicationOutput)
}

type RemoteRepositoryReplicationMapOutput struct{ *pulumi.OutputState }

func (RemoteRepositoryReplicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RemoteRepositoryReplication)(nil)).Elem()
}

func (o RemoteRepositoryReplicationMapOutput) ToRemoteRepositoryReplicationMapOutput() RemoteRepositoryReplicationMapOutput {
	return o
}

func (o RemoteRepositoryReplicationMapOutput) ToRemoteRepositoryReplicationMapOutputWithContext(ctx context.Context) RemoteRepositoryReplicationMapOutput {
	return o
}

func (o RemoteRepositoryReplicationMapOutput) MapIndex(k pulumi.StringInput) RemoteRepositoryReplicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RemoteRepositoryReplication {
		return vs[0].(map[string]*RemoteRepositoryReplication)[vs[1].(string)]
	}).(RemoteRepositoryReplicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteRepositoryReplicationInput)(nil)).Elem(), &RemoteRepositoryReplication{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteRepositoryReplicationArrayInput)(nil)).Elem(), RemoteRepositoryReplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteRepositoryReplicationMapInput)(nil)).Elem(), RemoteRepositoryReplicationMap{})
	pulumi.RegisterOutputType(RemoteRepositoryReplicationOutput{})
	pulumi.RegisterOutputType(RemoteRepositoryReplicationArrayOutput{})
	pulumi.RegisterOutputType(RemoteRepositoryReplicationMapOutput{})
}
