// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Backup struct {
	pulumi.CustomResourceState

	// (Optional) If set to true, backups will be created within a Zip archive (Slow and CPU intensive). Default value is
	// 'false'
	CreateArchive pulumi.BoolPtrOutput `pulumi:"createArchive"`
	// (Required) Cron expression to control the backup frequency.
	CronExp pulumi.StringOutput `pulumi:"cronExp"`
	// (Optional) Flag to enable or disable the backup config. Default value is "true".
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// (Optional) When set to true, new repositories will not be automatically added to the backup. Default value is 'false'.
	ExcludeNewRepositories pulumi.BoolPtrOutput `pulumi:"excludeNewRepositories"`
	// (Optional) list of excluded repositories from the backup. Default is empty list.
	ExcludedRepositories pulumi.StringArrayOutput `pulumi:"excludedRepositories"`
	// (Required) Backup config name.
	Key pulumi.StringOutput `pulumi:"key"`
	// (Optional) The number of hours to keep a backup before Artifactory will clean it up to free up disk space. Applicable
	// only to non-incremental backups. Default value is 168 hours ie: 7 days.
	RetentionPeriodHours pulumi.IntPtrOutput `pulumi:"retentionPeriodHours"`
	// (Optional) If set to true, all Artifactory administrators will be notified by email if any problem is encountered during
	// backup. Default value is 'true'.
	SendMailOnError pulumi.BoolPtrOutput `pulumi:"sendMailOnError"`
}

// NewBackup registers a new resource with the given unique name, arguments, and options.
func NewBackup(ctx *pulumi.Context,
	name string, args *BackupArgs, opts ...pulumi.ResourceOption) (*Backup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CronExp == nil {
		return nil, errors.New("invalid value for required argument 'CronExp'")
	}
	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	var resource Backup
	err := ctx.RegisterResource("artifactory:index/backup:Backup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackup gets an existing Backup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackupState, opts ...pulumi.ResourceOption) (*Backup, error) {
	var resource Backup
	err := ctx.ReadResource("artifactory:index/backup:Backup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Backup resources.
type backupState struct {
	// (Optional) If set to true, backups will be created within a Zip archive (Slow and CPU intensive). Default value is
	// 'false'
	CreateArchive *bool `pulumi:"createArchive"`
	// (Required) Cron expression to control the backup frequency.
	CronExp *string `pulumi:"cronExp"`
	// (Optional) Flag to enable or disable the backup config. Default value is "true".
	Enabled *bool `pulumi:"enabled"`
	// (Optional) When set to true, new repositories will not be automatically added to the backup. Default value is 'false'.
	ExcludeNewRepositories *bool `pulumi:"excludeNewRepositories"`
	// (Optional) list of excluded repositories from the backup. Default is empty list.
	ExcludedRepositories []string `pulumi:"excludedRepositories"`
	// (Required) Backup config name.
	Key *string `pulumi:"key"`
	// (Optional) The number of hours to keep a backup before Artifactory will clean it up to free up disk space. Applicable
	// only to non-incremental backups. Default value is 168 hours ie: 7 days.
	RetentionPeriodHours *int `pulumi:"retentionPeriodHours"`
	// (Optional) If set to true, all Artifactory administrators will be notified by email if any problem is encountered during
	// backup. Default value is 'true'.
	SendMailOnError *bool `pulumi:"sendMailOnError"`
}

type BackupState struct {
	// (Optional) If set to true, backups will be created within a Zip archive (Slow and CPU intensive). Default value is
	// 'false'
	CreateArchive pulumi.BoolPtrInput
	// (Required) Cron expression to control the backup frequency.
	CronExp pulumi.StringPtrInput
	// (Optional) Flag to enable or disable the backup config. Default value is "true".
	Enabled pulumi.BoolPtrInput
	// (Optional) When set to true, new repositories will not be automatically added to the backup. Default value is 'false'.
	ExcludeNewRepositories pulumi.BoolPtrInput
	// (Optional) list of excluded repositories from the backup. Default is empty list.
	ExcludedRepositories pulumi.StringArrayInput
	// (Required) Backup config name.
	Key pulumi.StringPtrInput
	// (Optional) The number of hours to keep a backup before Artifactory will clean it up to free up disk space. Applicable
	// only to non-incremental backups. Default value is 168 hours ie: 7 days.
	RetentionPeriodHours pulumi.IntPtrInput
	// (Optional) If set to true, all Artifactory administrators will be notified by email if any problem is encountered during
	// backup. Default value is 'true'.
	SendMailOnError pulumi.BoolPtrInput
}

func (BackupState) ElementType() reflect.Type {
	return reflect.TypeOf((*backupState)(nil)).Elem()
}

type backupArgs struct {
	// (Optional) If set to true, backups will be created within a Zip archive (Slow and CPU intensive). Default value is
	// 'false'
	CreateArchive *bool `pulumi:"createArchive"`
	// (Required) Cron expression to control the backup frequency.
	CronExp string `pulumi:"cronExp"`
	// (Optional) Flag to enable or disable the backup config. Default value is "true".
	Enabled *bool `pulumi:"enabled"`
	// (Optional) When set to true, new repositories will not be automatically added to the backup. Default value is 'false'.
	ExcludeNewRepositories *bool `pulumi:"excludeNewRepositories"`
	// (Optional) list of excluded repositories from the backup. Default is empty list.
	ExcludedRepositories []string `pulumi:"excludedRepositories"`
	// (Required) Backup config name.
	Key string `pulumi:"key"`
	// (Optional) The number of hours to keep a backup before Artifactory will clean it up to free up disk space. Applicable
	// only to non-incremental backups. Default value is 168 hours ie: 7 days.
	RetentionPeriodHours *int `pulumi:"retentionPeriodHours"`
	// (Optional) If set to true, all Artifactory administrators will be notified by email if any problem is encountered during
	// backup. Default value is 'true'.
	SendMailOnError *bool `pulumi:"sendMailOnError"`
}

// The set of arguments for constructing a Backup resource.
type BackupArgs struct {
	// (Optional) If set to true, backups will be created within a Zip archive (Slow and CPU intensive). Default value is
	// 'false'
	CreateArchive pulumi.BoolPtrInput
	// (Required) Cron expression to control the backup frequency.
	CronExp pulumi.StringInput
	// (Optional) Flag to enable or disable the backup config. Default value is "true".
	Enabled pulumi.BoolPtrInput
	// (Optional) When set to true, new repositories will not be automatically added to the backup. Default value is 'false'.
	ExcludeNewRepositories pulumi.BoolPtrInput
	// (Optional) list of excluded repositories from the backup. Default is empty list.
	ExcludedRepositories pulumi.StringArrayInput
	// (Required) Backup config name.
	Key pulumi.StringInput
	// (Optional) The number of hours to keep a backup before Artifactory will clean it up to free up disk space. Applicable
	// only to non-incremental backups. Default value is 168 hours ie: 7 days.
	RetentionPeriodHours pulumi.IntPtrInput
	// (Optional) If set to true, all Artifactory administrators will be notified by email if any problem is encountered during
	// backup. Default value is 'true'.
	SendMailOnError pulumi.BoolPtrInput
}

func (BackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backupArgs)(nil)).Elem()
}

type BackupInput interface {
	pulumi.Input

	ToBackupOutput() BackupOutput
	ToBackupOutputWithContext(ctx context.Context) BackupOutput
}

func (*Backup) ElementType() reflect.Type {
	return reflect.TypeOf((**Backup)(nil)).Elem()
}

func (i *Backup) ToBackupOutput() BackupOutput {
	return i.ToBackupOutputWithContext(context.Background())
}

func (i *Backup) ToBackupOutputWithContext(ctx context.Context) BackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupOutput)
}

// BackupArrayInput is an input type that accepts BackupArray and BackupArrayOutput values.
// You can construct a concrete instance of `BackupArrayInput` via:
//
//          BackupArray{ BackupArgs{...} }
type BackupArrayInput interface {
	pulumi.Input

	ToBackupArrayOutput() BackupArrayOutput
	ToBackupArrayOutputWithContext(context.Context) BackupArrayOutput
}

type BackupArray []BackupInput

func (BackupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Backup)(nil)).Elem()
}

func (i BackupArray) ToBackupArrayOutput() BackupArrayOutput {
	return i.ToBackupArrayOutputWithContext(context.Background())
}

func (i BackupArray) ToBackupArrayOutputWithContext(ctx context.Context) BackupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupArrayOutput)
}

// BackupMapInput is an input type that accepts BackupMap and BackupMapOutput values.
// You can construct a concrete instance of `BackupMapInput` via:
//
//          BackupMap{ "key": BackupArgs{...} }
type BackupMapInput interface {
	pulumi.Input

	ToBackupMapOutput() BackupMapOutput
	ToBackupMapOutputWithContext(context.Context) BackupMapOutput
}

type BackupMap map[string]BackupInput

func (BackupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Backup)(nil)).Elem()
}

func (i BackupMap) ToBackupMapOutput() BackupMapOutput {
	return i.ToBackupMapOutputWithContext(context.Background())
}

func (i BackupMap) ToBackupMapOutputWithContext(ctx context.Context) BackupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupMapOutput)
}

type BackupOutput struct{ *pulumi.OutputState }

func (BackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Backup)(nil)).Elem()
}

func (o BackupOutput) ToBackupOutput() BackupOutput {
	return o
}

func (o BackupOutput) ToBackupOutputWithContext(ctx context.Context) BackupOutput {
	return o
}

type BackupArrayOutput struct{ *pulumi.OutputState }

func (BackupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Backup)(nil)).Elem()
}

func (o BackupArrayOutput) ToBackupArrayOutput() BackupArrayOutput {
	return o
}

func (o BackupArrayOutput) ToBackupArrayOutputWithContext(ctx context.Context) BackupArrayOutput {
	return o
}

func (o BackupArrayOutput) Index(i pulumi.IntInput) BackupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Backup {
		return vs[0].([]*Backup)[vs[1].(int)]
	}).(BackupOutput)
}

type BackupMapOutput struct{ *pulumi.OutputState }

func (BackupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Backup)(nil)).Elem()
}

func (o BackupMapOutput) ToBackupMapOutput() BackupMapOutput {
	return o
}

func (o BackupMapOutput) ToBackupMapOutputWithContext(ctx context.Context) BackupMapOutput {
	return o
}

func (o BackupMapOutput) MapIndex(k pulumi.StringInput) BackupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Backup {
		return vs[0].(map[string]*Backup)[vs[1].(string)]
	}).(BackupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackupInput)(nil)).Elem(), &Backup{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupArrayInput)(nil)).Elem(), BackupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupMapInput)(nil)).Elem(), BackupMap{})
	pulumi.RegisterOutputType(BackupOutput{})
	pulumi.RegisterOutputType(BackupArrayOutput{})
	pulumi.RegisterOutputType(BackupMapOutput{})
}
