// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Artifactory Virtual Conan Repository Resource
//
// Provides an Artifactory virtual repository resource, but with specific conan features. This should be preferred over the original
// one-size-fits-all `VirtualRepository`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := artifactory.NewVirtualConanRepository(ctx, "foo-conan", &artifactory.VirtualConanRepositoryArgs{
// 			Description:     pulumi.String("A test virtual repo"),
// 			ExcludesPattern: pulumi.String("com/google/**"),
// 			IncludesPattern: pulumi.String("com/jfrog/**,cloud/jfrog/**"),
// 			Key:             pulumi.String("foo-conan"),
// 			Notes:           pulumi.String("Internal description"),
// 			RepoLayoutRef:   pulumi.String("conan-default"),
// 			Repositories:    pulumi.StringArray{},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Virtual repositories can be imported using their name, e.g.
//
// ```sh
//  $ pulumi import artifactory:index/virtualConanRepository:VirtualConanRepository foo foo
// ```
type VirtualConanRepository struct {
	pulumi.CustomResourceState

	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
	// another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts pulumi.BoolPtrOutput `pulumi:"artifactoryRequestsCanRetrieveRemoteArtifacts"`
	// Default repository to deploy artifacts.
	DefaultDeploymentRepo pulumi.StringPtrOutput `pulumi:"defaultDeploymentRepo"`
	// A free text field that describes the content and purpose of the repository. If you choose to insert a link into this
	// field, clicking the link will prompt the user to confirm that they might be redirected to a new domain.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
	// artifacts are excluded.
	ExcludesPattern pulumi.StringPtrOutput `pulumi:"excludesPattern"`
	// List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only
	// artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern pulumi.StringPtrOutput `pulumi:"includesPattern"`
	// The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or
	// contain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.
	// 'libs-release-local').
	Key pulumi.StringOutput `pulumi:"key"`
	// A free text field to add additional notes about the repository. These are only visible to the administrator.
	Notes pulumi.StringPtrOutput `pulumi:"notes"`
	// The Package Type. This must be specified when the repository is created, and once set, cannot be changed.
	PackageType pulumi.StringOutput `pulumi:"packageType"`
	// Sets the layout that the repository should use for storing and identifying modules. A recommended layout that
	// corresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.
	RepoLayoutRef pulumi.StringOutput `pulumi:"repoLayoutRef"`
	// The effective list of actual repositories included in this virtual repository.
	Repositories pulumi.StringArrayOutput `pulumi:"repositories"`
	// - This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated repositories. A value of 0 indicates no caching. Default: 7200 seconds.
	RetrievalCachePeriodSeconds pulumi.IntPtrOutput `pulumi:"retrievalCachePeriodSeconds"`
}

// NewVirtualConanRepository registers a new resource with the given unique name, arguments, and options.
func NewVirtualConanRepository(ctx *pulumi.Context,
	name string, args *VirtualConanRepositoryArgs, opts ...pulumi.ResourceOption) (*VirtualConanRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	var resource VirtualConanRepository
	err := ctx.RegisterResource("artifactory:index/virtualConanRepository:VirtualConanRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualConanRepository gets an existing VirtualConanRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualConanRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualConanRepositoryState, opts ...pulumi.ResourceOption) (*VirtualConanRepository, error) {
	var resource VirtualConanRepository
	err := ctx.ReadResource("artifactory:index/virtualConanRepository:VirtualConanRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualConanRepository resources.
type virtualConanRepositoryState struct {
	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
	// another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts *bool `pulumi:"artifactoryRequestsCanRetrieveRemoteArtifacts"`
	// Default repository to deploy artifacts.
	DefaultDeploymentRepo *string `pulumi:"defaultDeploymentRepo"`
	// A free text field that describes the content and purpose of the repository. If you choose to insert a link into this
	// field, clicking the link will prompt the user to confirm that they might be redirected to a new domain.
	Description *string `pulumi:"description"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
	// artifacts are excluded.
	ExcludesPattern *string `pulumi:"excludesPattern"`
	// List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only
	// artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern *string `pulumi:"includesPattern"`
	// The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or
	// contain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.
	// 'libs-release-local').
	Key *string `pulumi:"key"`
	// A free text field to add additional notes about the repository. These are only visible to the administrator.
	Notes *string `pulumi:"notes"`
	// The Package Type. This must be specified when the repository is created, and once set, cannot be changed.
	PackageType *string `pulumi:"packageType"`
	// Sets the layout that the repository should use for storing and identifying modules. A recommended layout that
	// corresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.
	RepoLayoutRef *string `pulumi:"repoLayoutRef"`
	// The effective list of actual repositories included in this virtual repository.
	Repositories []string `pulumi:"repositories"`
	// - This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated repositories. A value of 0 indicates no caching. Default: 7200 seconds.
	RetrievalCachePeriodSeconds *int `pulumi:"retrievalCachePeriodSeconds"`
}

type VirtualConanRepositoryState struct {
	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
	// another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts pulumi.BoolPtrInput
	// Default repository to deploy artifacts.
	DefaultDeploymentRepo pulumi.StringPtrInput
	// A free text field that describes the content and purpose of the repository. If you choose to insert a link into this
	// field, clicking the link will prompt the user to confirm that they might be redirected to a new domain.
	Description pulumi.StringPtrInput
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
	// artifacts are excluded.
	ExcludesPattern pulumi.StringPtrInput
	// List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only
	// artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern pulumi.StringPtrInput
	// The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or
	// contain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.
	// 'libs-release-local').
	Key pulumi.StringPtrInput
	// A free text field to add additional notes about the repository. These are only visible to the administrator.
	Notes pulumi.StringPtrInput
	// The Package Type. This must be specified when the repository is created, and once set, cannot be changed.
	PackageType pulumi.StringPtrInput
	// Sets the layout that the repository should use for storing and identifying modules. A recommended layout that
	// corresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.
	RepoLayoutRef pulumi.StringPtrInput
	// The effective list of actual repositories included in this virtual repository.
	Repositories pulumi.StringArrayInput
	// - This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated repositories. A value of 0 indicates no caching. Default: 7200 seconds.
	RetrievalCachePeriodSeconds pulumi.IntPtrInput
}

func (VirtualConanRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualConanRepositoryState)(nil)).Elem()
}

type virtualConanRepositoryArgs struct {
	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
	// another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts *bool `pulumi:"artifactoryRequestsCanRetrieveRemoteArtifacts"`
	// Default repository to deploy artifacts.
	DefaultDeploymentRepo *string `pulumi:"defaultDeploymentRepo"`
	// A free text field that describes the content and purpose of the repository. If you choose to insert a link into this
	// field, clicking the link will prompt the user to confirm that they might be redirected to a new domain.
	Description *string `pulumi:"description"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
	// artifacts are excluded.
	ExcludesPattern *string `pulumi:"excludesPattern"`
	// List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only
	// artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern *string `pulumi:"includesPattern"`
	// The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or
	// contain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.
	// 'libs-release-local').
	Key string `pulumi:"key"`
	// A free text field to add additional notes about the repository. These are only visible to the administrator.
	Notes *string `pulumi:"notes"`
	// Sets the layout that the repository should use for storing and identifying modules. A recommended layout that
	// corresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.
	RepoLayoutRef *string `pulumi:"repoLayoutRef"`
	// The effective list of actual repositories included in this virtual repository.
	Repositories []string `pulumi:"repositories"`
	// - This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated repositories. A value of 0 indicates no caching. Default: 7200 seconds.
	RetrievalCachePeriodSeconds *int `pulumi:"retrievalCachePeriodSeconds"`
}

// The set of arguments for constructing a VirtualConanRepository resource.
type VirtualConanRepositoryArgs struct {
	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
	// another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts pulumi.BoolPtrInput
	// Default repository to deploy artifacts.
	DefaultDeploymentRepo pulumi.StringPtrInput
	// A free text field that describes the content and purpose of the repository. If you choose to insert a link into this
	// field, clicking the link will prompt the user to confirm that they might be redirected to a new domain.
	Description pulumi.StringPtrInput
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
	// artifacts are excluded.
	ExcludesPattern pulumi.StringPtrInput
	// List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only
	// artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern pulumi.StringPtrInput
	// The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or
	// contain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.
	// 'libs-release-local').
	Key pulumi.StringInput
	// A free text field to add additional notes about the repository. These are only visible to the administrator.
	Notes pulumi.StringPtrInput
	// Sets the layout that the repository should use for storing and identifying modules. A recommended layout that
	// corresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.
	RepoLayoutRef pulumi.StringPtrInput
	// The effective list of actual repositories included in this virtual repository.
	Repositories pulumi.StringArrayInput
	// - This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated repositories. A value of 0 indicates no caching. Default: 7200 seconds.
	RetrievalCachePeriodSeconds pulumi.IntPtrInput
}

func (VirtualConanRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualConanRepositoryArgs)(nil)).Elem()
}

type VirtualConanRepositoryInput interface {
	pulumi.Input

	ToVirtualConanRepositoryOutput() VirtualConanRepositoryOutput
	ToVirtualConanRepositoryOutputWithContext(ctx context.Context) VirtualConanRepositoryOutput
}

func (*VirtualConanRepository) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualConanRepository)(nil)).Elem()
}

func (i *VirtualConanRepository) ToVirtualConanRepositoryOutput() VirtualConanRepositoryOutput {
	return i.ToVirtualConanRepositoryOutputWithContext(context.Background())
}

func (i *VirtualConanRepository) ToVirtualConanRepositoryOutputWithContext(ctx context.Context) VirtualConanRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualConanRepositoryOutput)
}

// VirtualConanRepositoryArrayInput is an input type that accepts VirtualConanRepositoryArray and VirtualConanRepositoryArrayOutput values.
// You can construct a concrete instance of `VirtualConanRepositoryArrayInput` via:
//
//          VirtualConanRepositoryArray{ VirtualConanRepositoryArgs{...} }
type VirtualConanRepositoryArrayInput interface {
	pulumi.Input

	ToVirtualConanRepositoryArrayOutput() VirtualConanRepositoryArrayOutput
	ToVirtualConanRepositoryArrayOutputWithContext(context.Context) VirtualConanRepositoryArrayOutput
}

type VirtualConanRepositoryArray []VirtualConanRepositoryInput

func (VirtualConanRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualConanRepository)(nil)).Elem()
}

func (i VirtualConanRepositoryArray) ToVirtualConanRepositoryArrayOutput() VirtualConanRepositoryArrayOutput {
	return i.ToVirtualConanRepositoryArrayOutputWithContext(context.Background())
}

func (i VirtualConanRepositoryArray) ToVirtualConanRepositoryArrayOutputWithContext(ctx context.Context) VirtualConanRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualConanRepositoryArrayOutput)
}

// VirtualConanRepositoryMapInput is an input type that accepts VirtualConanRepositoryMap and VirtualConanRepositoryMapOutput values.
// You can construct a concrete instance of `VirtualConanRepositoryMapInput` via:
//
//          VirtualConanRepositoryMap{ "key": VirtualConanRepositoryArgs{...} }
type VirtualConanRepositoryMapInput interface {
	pulumi.Input

	ToVirtualConanRepositoryMapOutput() VirtualConanRepositoryMapOutput
	ToVirtualConanRepositoryMapOutputWithContext(context.Context) VirtualConanRepositoryMapOutput
}

type VirtualConanRepositoryMap map[string]VirtualConanRepositoryInput

func (VirtualConanRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualConanRepository)(nil)).Elem()
}

func (i VirtualConanRepositoryMap) ToVirtualConanRepositoryMapOutput() VirtualConanRepositoryMapOutput {
	return i.ToVirtualConanRepositoryMapOutputWithContext(context.Background())
}

func (i VirtualConanRepositoryMap) ToVirtualConanRepositoryMapOutputWithContext(ctx context.Context) VirtualConanRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualConanRepositoryMapOutput)
}

type VirtualConanRepositoryOutput struct{ *pulumi.OutputState }

func (VirtualConanRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualConanRepository)(nil)).Elem()
}

func (o VirtualConanRepositoryOutput) ToVirtualConanRepositoryOutput() VirtualConanRepositoryOutput {
	return o
}

func (o VirtualConanRepositoryOutput) ToVirtualConanRepositoryOutputWithContext(ctx context.Context) VirtualConanRepositoryOutput {
	return o
}

type VirtualConanRepositoryArrayOutput struct{ *pulumi.OutputState }

func (VirtualConanRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualConanRepository)(nil)).Elem()
}

func (o VirtualConanRepositoryArrayOutput) ToVirtualConanRepositoryArrayOutput() VirtualConanRepositoryArrayOutput {
	return o
}

func (o VirtualConanRepositoryArrayOutput) ToVirtualConanRepositoryArrayOutputWithContext(ctx context.Context) VirtualConanRepositoryArrayOutput {
	return o
}

func (o VirtualConanRepositoryArrayOutput) Index(i pulumi.IntInput) VirtualConanRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VirtualConanRepository {
		return vs[0].([]*VirtualConanRepository)[vs[1].(int)]
	}).(VirtualConanRepositoryOutput)
}

type VirtualConanRepositoryMapOutput struct{ *pulumi.OutputState }

func (VirtualConanRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualConanRepository)(nil)).Elem()
}

func (o VirtualConanRepositoryMapOutput) ToVirtualConanRepositoryMapOutput() VirtualConanRepositoryMapOutput {
	return o
}

func (o VirtualConanRepositoryMapOutput) ToVirtualConanRepositoryMapOutputWithContext(ctx context.Context) VirtualConanRepositoryMapOutput {
	return o
}

func (o VirtualConanRepositoryMapOutput) MapIndex(k pulumi.StringInput) VirtualConanRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VirtualConanRepository {
		return vs[0].(map[string]*VirtualConanRepository)[vs[1].(string)]
	}).(VirtualConanRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualConanRepositoryInput)(nil)).Elem(), &VirtualConanRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualConanRepositoryArrayInput)(nil)).Elem(), VirtualConanRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualConanRepositoryMapInput)(nil)).Elem(), VirtualConanRepositoryMap{})
	pulumi.RegisterOutputType(VirtualConanRepositoryOutput{})
	pulumi.RegisterOutputType(VirtualConanRepositoryArrayOutput{})
	pulumi.RegisterOutputType(VirtualConanRepositoryMapOutput{})
}
