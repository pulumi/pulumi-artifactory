// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-artifactory/sdk/v8/go/artifactory/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves a local RPM repository.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-artifactory/sdk/v8/go/artifactory"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := artifactory.LookupLocalRpmRepository(ctx, &artifactory.LookupLocalRpmRepositoryArgs{
//				Key: "local-test-rpm-repo-basic",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupLocalRpmRepository(ctx *pulumi.Context, args *LookupLocalRpmRepositoryArgs, opts ...pulumi.InvokeOption) (*LookupLocalRpmRepositoryResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLocalRpmRepositoryResult
	err := ctx.Invoke("artifactory:index/getLocalRpmRepository:getLocalRpmRepository", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLocalRpmRepository.
type LookupLocalRpmRepositoryArgs struct {
	ArchiveBrowsingEnabled *bool `pulumi:"archiveBrowsingEnabled"`
	BlackedOut             *bool `pulumi:"blackedOut"`
	// Default: `false`.
	CalculateYumMetadata *bool   `pulumi:"calculateYumMetadata"`
	CdnRedirect          *bool   `pulumi:"cdnRedirect"`
	Description          *string `pulumi:"description"`
	DownloadDirect       *bool   `pulumi:"downloadDirect"`
	// Default: `false`.
	EnableFileListsIndexing *bool   `pulumi:"enableFileListsIndexing"`
	ExcludesPattern         *string `pulumi:"excludesPattern"`
	IncludesPattern         *string `pulumi:"includesPattern"`
	// the identity key of the repo.
	Key   string  `pulumi:"key"`
	Notes *string `pulumi:"notes"`
	// The primary GPG key to be used to sign packages.
	PrimaryKeypairRef   *string  `pulumi:"primaryKeypairRef"`
	PriorityResolution  *bool    `pulumi:"priorityResolution"`
	ProjectEnvironments []string `pulumi:"projectEnvironments"`
	ProjectKey          *string  `pulumi:"projectKey"`
	PropertySets        []string `pulumi:"propertySets"`
	RepoLayoutRef       *string  `pulumi:"repoLayoutRef"`
	// The secondary GPG key to be used to sign packages.
	SecondaryKeypairRef *string `pulumi:"secondaryKeypairRef"`
	XrayIndex           *bool   `pulumi:"xrayIndex"`
	// A comma separated list of XML file names containing RPM group component
	// definitions. Artifactory includes the group definitions as part of the calculated RPM metadata, as well as
	// automatically generating a gzipped version of the group files, if required. Default is empty string.
	YumGroupFileNames *string `pulumi:"yumGroupFileNames"`
	// The depth, relative to the repository's root folder, where RPM metadata is created. This
	// is useful when your repository contains multiple RPM repositories under parallel hierarchies. For example, if your
	// RPMs are stored under 'fedora/linux/$releasever/$basearch', specify a depth of 4. Once the number of snapshots exceeds
	// this setting, older versions are removed. A value of 0 (default) indicates there is no limit, and unique snapshots are
	// not cleaned up.
	YumRootDepth *int `pulumi:"yumRootDepth"`
}

// A collection of values returned by getLocalRpmRepository.
type LookupLocalRpmRepositoryResult struct {
	ArchiveBrowsingEnabled *bool `pulumi:"archiveBrowsingEnabled"`
	BlackedOut             *bool `pulumi:"blackedOut"`
	// Default: `false`.
	CalculateYumMetadata *bool   `pulumi:"calculateYumMetadata"`
	CdnRedirect          *bool   `pulumi:"cdnRedirect"`
	Description          *string `pulumi:"description"`
	DownloadDirect       *bool   `pulumi:"downloadDirect"`
	// Default: `false`.
	EnableFileListsIndexing *bool   `pulumi:"enableFileListsIndexing"`
	ExcludesPattern         *string `pulumi:"excludesPattern"`
	// The provider-assigned unique ID for this managed resource.
	Id              string  `pulumi:"id"`
	IncludesPattern *string `pulumi:"includesPattern"`
	Key             string  `pulumi:"key"`
	Notes           *string `pulumi:"notes"`
	PackageType     string  `pulumi:"packageType"`
	// The primary GPG key to be used to sign packages.
	PrimaryKeypairRef   *string  `pulumi:"primaryKeypairRef"`
	PriorityResolution  *bool    `pulumi:"priorityResolution"`
	ProjectEnvironments []string `pulumi:"projectEnvironments"`
	ProjectKey          *string  `pulumi:"projectKey"`
	PropertySets        []string `pulumi:"propertySets"`
	RepoLayoutRef       *string  `pulumi:"repoLayoutRef"`
	// The secondary GPG key to be used to sign packages.
	SecondaryKeypairRef *string `pulumi:"secondaryKeypairRef"`
	XrayIndex           *bool   `pulumi:"xrayIndex"`
	// A comma separated list of XML file names containing RPM group component
	// definitions. Artifactory includes the group definitions as part of the calculated RPM metadata, as well as
	// automatically generating a gzipped version of the group files, if required. Default is empty string.
	YumGroupFileNames *string `pulumi:"yumGroupFileNames"`
	// The depth, relative to the repository's root folder, where RPM metadata is created. This
	// is useful when your repository contains multiple RPM repositories under parallel hierarchies. For example, if your
	// RPMs are stored under 'fedora/linux/$releasever/$basearch', specify a depth of 4. Once the number of snapshots exceeds
	// this setting, older versions are removed. A value of 0 (default) indicates there is no limit, and unique snapshots are
	// not cleaned up.
	YumRootDepth *int `pulumi:"yumRootDepth"`
}

func LookupLocalRpmRepositoryOutput(ctx *pulumi.Context, args LookupLocalRpmRepositoryOutputArgs, opts ...pulumi.InvokeOption) LookupLocalRpmRepositoryResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupLocalRpmRepositoryResultOutput, error) {
			args := v.(LookupLocalRpmRepositoryArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("artifactory:index/getLocalRpmRepository:getLocalRpmRepository", args, LookupLocalRpmRepositoryResultOutput{}, options).(LookupLocalRpmRepositoryResultOutput), nil
		}).(LookupLocalRpmRepositoryResultOutput)
}

// A collection of arguments for invoking getLocalRpmRepository.
type LookupLocalRpmRepositoryOutputArgs struct {
	ArchiveBrowsingEnabled pulumi.BoolPtrInput `pulumi:"archiveBrowsingEnabled"`
	BlackedOut             pulumi.BoolPtrInput `pulumi:"blackedOut"`
	// Default: `false`.
	CalculateYumMetadata pulumi.BoolPtrInput   `pulumi:"calculateYumMetadata"`
	CdnRedirect          pulumi.BoolPtrInput   `pulumi:"cdnRedirect"`
	Description          pulumi.StringPtrInput `pulumi:"description"`
	DownloadDirect       pulumi.BoolPtrInput   `pulumi:"downloadDirect"`
	// Default: `false`.
	EnableFileListsIndexing pulumi.BoolPtrInput   `pulumi:"enableFileListsIndexing"`
	ExcludesPattern         pulumi.StringPtrInput `pulumi:"excludesPattern"`
	IncludesPattern         pulumi.StringPtrInput `pulumi:"includesPattern"`
	// the identity key of the repo.
	Key   pulumi.StringInput    `pulumi:"key"`
	Notes pulumi.StringPtrInput `pulumi:"notes"`
	// The primary GPG key to be used to sign packages.
	PrimaryKeypairRef   pulumi.StringPtrInput   `pulumi:"primaryKeypairRef"`
	PriorityResolution  pulumi.BoolPtrInput     `pulumi:"priorityResolution"`
	ProjectEnvironments pulumi.StringArrayInput `pulumi:"projectEnvironments"`
	ProjectKey          pulumi.StringPtrInput   `pulumi:"projectKey"`
	PropertySets        pulumi.StringArrayInput `pulumi:"propertySets"`
	RepoLayoutRef       pulumi.StringPtrInput   `pulumi:"repoLayoutRef"`
	// The secondary GPG key to be used to sign packages.
	SecondaryKeypairRef pulumi.StringPtrInput `pulumi:"secondaryKeypairRef"`
	XrayIndex           pulumi.BoolPtrInput   `pulumi:"xrayIndex"`
	// A comma separated list of XML file names containing RPM group component
	// definitions. Artifactory includes the group definitions as part of the calculated RPM metadata, as well as
	// automatically generating a gzipped version of the group files, if required. Default is empty string.
	YumGroupFileNames pulumi.StringPtrInput `pulumi:"yumGroupFileNames"`
	// The depth, relative to the repository's root folder, where RPM metadata is created. This
	// is useful when your repository contains multiple RPM repositories under parallel hierarchies. For example, if your
	// RPMs are stored under 'fedora/linux/$releasever/$basearch', specify a depth of 4. Once the number of snapshots exceeds
	// this setting, older versions are removed. A value of 0 (default) indicates there is no limit, and unique snapshots are
	// not cleaned up.
	YumRootDepth pulumi.IntPtrInput `pulumi:"yumRootDepth"`
}

func (LookupLocalRpmRepositoryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLocalRpmRepositoryArgs)(nil)).Elem()
}

// A collection of values returned by getLocalRpmRepository.
type LookupLocalRpmRepositoryResultOutput struct{ *pulumi.OutputState }

func (LookupLocalRpmRepositoryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLocalRpmRepositoryResult)(nil)).Elem()
}

func (o LookupLocalRpmRepositoryResultOutput) ToLookupLocalRpmRepositoryResultOutput() LookupLocalRpmRepositoryResultOutput {
	return o
}

func (o LookupLocalRpmRepositoryResultOutput) ToLookupLocalRpmRepositoryResultOutputWithContext(ctx context.Context) LookupLocalRpmRepositoryResultOutput {
	return o
}

func (o LookupLocalRpmRepositoryResultOutput) ArchiveBrowsingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupLocalRpmRepositoryResult) *bool { return v.ArchiveBrowsingEnabled }).(pulumi.BoolPtrOutput)
}

func (o LookupLocalRpmRepositoryResultOutput) BlackedOut() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupLocalRpmRepositoryResult) *bool { return v.BlackedOut }).(pulumi.BoolPtrOutput)
}

// Default: `false`.
func (o LookupLocalRpmRepositoryResultOutput) CalculateYumMetadata() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupLocalRpmRepositoryResult) *bool { return v.CalculateYumMetadata }).(pulumi.BoolPtrOutput)
}

func (o LookupLocalRpmRepositoryResultOutput) CdnRedirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupLocalRpmRepositoryResult) *bool { return v.CdnRedirect }).(pulumi.BoolPtrOutput)
}

func (o LookupLocalRpmRepositoryResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLocalRpmRepositoryResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o LookupLocalRpmRepositoryResultOutput) DownloadDirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupLocalRpmRepositoryResult) *bool { return v.DownloadDirect }).(pulumi.BoolPtrOutput)
}

// Default: `false`.
func (o LookupLocalRpmRepositoryResultOutput) EnableFileListsIndexing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupLocalRpmRepositoryResult) *bool { return v.EnableFileListsIndexing }).(pulumi.BoolPtrOutput)
}

func (o LookupLocalRpmRepositoryResultOutput) ExcludesPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLocalRpmRepositoryResult) *string { return v.ExcludesPattern }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupLocalRpmRepositoryResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLocalRpmRepositoryResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupLocalRpmRepositoryResultOutput) IncludesPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLocalRpmRepositoryResult) *string { return v.IncludesPattern }).(pulumi.StringPtrOutput)
}

func (o LookupLocalRpmRepositoryResultOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLocalRpmRepositoryResult) string { return v.Key }).(pulumi.StringOutput)
}

func (o LookupLocalRpmRepositoryResultOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLocalRpmRepositoryResult) *string { return v.Notes }).(pulumi.StringPtrOutput)
}

func (o LookupLocalRpmRepositoryResultOutput) PackageType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLocalRpmRepositoryResult) string { return v.PackageType }).(pulumi.StringOutput)
}

// The primary GPG key to be used to sign packages.
func (o LookupLocalRpmRepositoryResultOutput) PrimaryKeypairRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLocalRpmRepositoryResult) *string { return v.PrimaryKeypairRef }).(pulumi.StringPtrOutput)
}

func (o LookupLocalRpmRepositoryResultOutput) PriorityResolution() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupLocalRpmRepositoryResult) *bool { return v.PriorityResolution }).(pulumi.BoolPtrOutput)
}

func (o LookupLocalRpmRepositoryResultOutput) ProjectEnvironments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupLocalRpmRepositoryResult) []string { return v.ProjectEnvironments }).(pulumi.StringArrayOutput)
}

func (o LookupLocalRpmRepositoryResultOutput) ProjectKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLocalRpmRepositoryResult) *string { return v.ProjectKey }).(pulumi.StringPtrOutput)
}

func (o LookupLocalRpmRepositoryResultOutput) PropertySets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupLocalRpmRepositoryResult) []string { return v.PropertySets }).(pulumi.StringArrayOutput)
}

func (o LookupLocalRpmRepositoryResultOutput) RepoLayoutRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLocalRpmRepositoryResult) *string { return v.RepoLayoutRef }).(pulumi.StringPtrOutput)
}

// The secondary GPG key to be used to sign packages.
func (o LookupLocalRpmRepositoryResultOutput) SecondaryKeypairRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLocalRpmRepositoryResult) *string { return v.SecondaryKeypairRef }).(pulumi.StringPtrOutput)
}

func (o LookupLocalRpmRepositoryResultOutput) XrayIndex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupLocalRpmRepositoryResult) *bool { return v.XrayIndex }).(pulumi.BoolPtrOutput)
}

// A comma separated list of XML file names containing RPM group component
// definitions. Artifactory includes the group definitions as part of the calculated RPM metadata, as well as
// automatically generating a gzipped version of the group files, if required. Default is empty string.
func (o LookupLocalRpmRepositoryResultOutput) YumGroupFileNames() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLocalRpmRepositoryResult) *string { return v.YumGroupFileNames }).(pulumi.StringPtrOutput)
}

// The depth, relative to the repository's root folder, where RPM metadata is created. This
// is useful when your repository contains multiple RPM repositories under parallel hierarchies. For example, if your
// RPMs are stored under 'fedora/linux/$releasever/$basearch', specify a depth of 4. Once the number of snapshots exceeds
// this setting, older versions are removed. A value of 0 (default) indicates there is no limit, and unique snapshots are
// not cleaned up.
func (o LookupLocalRpmRepositoryResultOutput) YumRootDepth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupLocalRpmRepositoryResult) *int { return v.YumRootDepth }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLocalRpmRepositoryResultOutput{})
}
