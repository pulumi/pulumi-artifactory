// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Artifactory SAML SSO Settings Resource
//
// This resource can be used to manage Artifactory's SAML SSO settings.
//
// Only a single `SamlSettings` resource is meant to be defined.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-artifactory/sdk/v2/go/artifactory"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := artifactory.NewSamlSettings(ctx, "saml", &artifactory.SamlSettingsArgs{
// 			AllowUserToAccessProfile:  pulumi.Bool(true),
// 			AutoRedirect:              pulumi.Bool(true),
// 			Certificate:               pulumi.String("test-certificate"),
// 			EmailAttribute:            pulumi.String("email"),
// 			Enable:                    pulumi.Bool(true),
// 			GroupAttribute:            pulumi.String("groups"),
// 			LoginUrl:                  pulumi.String("test-login-url"),
// 			LogoutUrl:                 pulumi.String("test-logout-url"),
// 			NoAutoUserCreation:        pulumi.Bool(false),
// 			ServiceProviderName:       pulumi.String("okta"),
// 			SyncGroups:                pulumi.Bool(true),
// 			UseEncryptedAssertion:     pulumi.Bool(false),
// 			VerifyAudienceRestriction: pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Current SAML SSO settings can be imported using `saml_settings` as the `ID`, e.g.
//
// ```sh
//  $ pulumi import artifactory:index/samlSettings:SamlSettings saml saml_settings
// ```
type SamlSettings struct {
	pulumi.CustomResourceState

	// Allow persisted users to access their profile.  Default value is `true`.
	AllowUserToAccessProfile pulumi.BoolPtrOutput `pulumi:"allowUserToAccessProfile"`
	// Auto redirect to login through the IdP when clicking on Artifactory's login link.  Default value is `false`.
	AutoRedirect pulumi.BoolPtrOutput `pulumi:"autoRedirect"`
	// SAML certificate that contains the public key for the IdP service provider.  Used by Artifactory to verify sign-in requests. Default value is ``.
	Certificate pulumi.StringPtrOutput `pulumi:"certificate"`
	// Name of the attribute in the SAML response from the IdP that contains the user's email. Default value is ``.
	EmailAttribute pulumi.StringPtrOutput `pulumi:"emailAttribute"`
	// Enable SAML SSO.  Default value is `true`.
	Enable pulumi.BoolPtrOutput `pulumi:"enable"`
	// Name of the attribute in the SAML response from the IdP that contains the user's group memberships. Default value is ``.
	GroupAttribute pulumi.StringPtrOutput `pulumi:"groupAttribute"`
	// Service provider login url configured on the IdP.
	LoginUrl pulumi.StringOutput `pulumi:"loginUrl"`
	// Service provider logout url, or where to redirect after user logs out.
	LogoutUrl pulumi.StringOutput `pulumi:"logoutUrl"`
	// When automatic user creation is off, authenticated users are not automatically created inside Artifactory. Instead, for every request from an SSO user, the user is temporarily associated with default groups (if such groups are defined), and the permissions for these groups apply. Without auto-user creation, you must manually create the user inside Artifactory to manage user permissions not attached to their default groups. Default value is `false`.
	NoAutoUserCreation pulumi.BoolPtrOutput `pulumi:"noAutoUserCreation"`
	// The SAML service provider name. This should be a URI that is also known as the entityID, providerID, or entity identity.
	ServiceProviderName pulumi.StringOutput `pulumi:"serviceProviderName"`
	// Associate user with Artifactory groups based on the `groupAttribute` provided in the SAML response from the identity provider.  Default value is `false`.
	SyncGroups pulumi.BoolPtrOutput `pulumi:"syncGroups"`
	// When set, an X.509 public certificate will be created by Artifactory. Download this certificate and upload it to your IDP and choose your own encryption algorithm. This process will let you encrypt the assertion section in your SAML response. Default value is `false`.
	UseEncryptedAssertion pulumi.BoolPtrOutput `pulumi:"useEncryptedAssertion"`
	// Enable "audience", or who the SAML assertion is intended for.  Ensures that the correct service provider intended for Artifactory is used on the IdP.  Default value is `true`.
	VerifyAudienceRestriction pulumi.BoolPtrOutput `pulumi:"verifyAudienceRestriction"`
}

// NewSamlSettings registers a new resource with the given unique name, arguments, and options.
func NewSamlSettings(ctx *pulumi.Context,
	name string, args *SamlSettingsArgs, opts ...pulumi.ResourceOption) (*SamlSettings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LoginUrl == nil {
		return nil, errors.New("invalid value for required argument 'LoginUrl'")
	}
	if args.LogoutUrl == nil {
		return nil, errors.New("invalid value for required argument 'LogoutUrl'")
	}
	if args.ServiceProviderName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceProviderName'")
	}
	var resource SamlSettings
	err := ctx.RegisterResource("artifactory:index/samlSettings:SamlSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSamlSettings gets an existing SamlSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSamlSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SamlSettingsState, opts ...pulumi.ResourceOption) (*SamlSettings, error) {
	var resource SamlSettings
	err := ctx.ReadResource("artifactory:index/samlSettings:SamlSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SamlSettings resources.
type samlSettingsState struct {
	// Allow persisted users to access their profile.  Default value is `true`.
	AllowUserToAccessProfile *bool `pulumi:"allowUserToAccessProfile"`
	// Auto redirect to login through the IdP when clicking on Artifactory's login link.  Default value is `false`.
	AutoRedirect *bool `pulumi:"autoRedirect"`
	// SAML certificate that contains the public key for the IdP service provider.  Used by Artifactory to verify sign-in requests. Default value is ``.
	Certificate *string `pulumi:"certificate"`
	// Name of the attribute in the SAML response from the IdP that contains the user's email. Default value is ``.
	EmailAttribute *string `pulumi:"emailAttribute"`
	// Enable SAML SSO.  Default value is `true`.
	Enable *bool `pulumi:"enable"`
	// Name of the attribute in the SAML response from the IdP that contains the user's group memberships. Default value is ``.
	GroupAttribute *string `pulumi:"groupAttribute"`
	// Service provider login url configured on the IdP.
	LoginUrl *string `pulumi:"loginUrl"`
	// Service provider logout url, or where to redirect after user logs out.
	LogoutUrl *string `pulumi:"logoutUrl"`
	// When automatic user creation is off, authenticated users are not automatically created inside Artifactory. Instead, for every request from an SSO user, the user is temporarily associated with default groups (if such groups are defined), and the permissions for these groups apply. Without auto-user creation, you must manually create the user inside Artifactory to manage user permissions not attached to their default groups. Default value is `false`.
	NoAutoUserCreation *bool `pulumi:"noAutoUserCreation"`
	// The SAML service provider name. This should be a URI that is also known as the entityID, providerID, or entity identity.
	ServiceProviderName *string `pulumi:"serviceProviderName"`
	// Associate user with Artifactory groups based on the `groupAttribute` provided in the SAML response from the identity provider.  Default value is `false`.
	SyncGroups *bool `pulumi:"syncGroups"`
	// When set, an X.509 public certificate will be created by Artifactory. Download this certificate and upload it to your IDP and choose your own encryption algorithm. This process will let you encrypt the assertion section in your SAML response. Default value is `false`.
	UseEncryptedAssertion *bool `pulumi:"useEncryptedAssertion"`
	// Enable "audience", or who the SAML assertion is intended for.  Ensures that the correct service provider intended for Artifactory is used on the IdP.  Default value is `true`.
	VerifyAudienceRestriction *bool `pulumi:"verifyAudienceRestriction"`
}

type SamlSettingsState struct {
	// Allow persisted users to access their profile.  Default value is `true`.
	AllowUserToAccessProfile pulumi.BoolPtrInput
	// Auto redirect to login through the IdP when clicking on Artifactory's login link.  Default value is `false`.
	AutoRedirect pulumi.BoolPtrInput
	// SAML certificate that contains the public key for the IdP service provider.  Used by Artifactory to verify sign-in requests. Default value is ``.
	Certificate pulumi.StringPtrInput
	// Name of the attribute in the SAML response from the IdP that contains the user's email. Default value is ``.
	EmailAttribute pulumi.StringPtrInput
	// Enable SAML SSO.  Default value is `true`.
	Enable pulumi.BoolPtrInput
	// Name of the attribute in the SAML response from the IdP that contains the user's group memberships. Default value is ``.
	GroupAttribute pulumi.StringPtrInput
	// Service provider login url configured on the IdP.
	LoginUrl pulumi.StringPtrInput
	// Service provider logout url, or where to redirect after user logs out.
	LogoutUrl pulumi.StringPtrInput
	// When automatic user creation is off, authenticated users are not automatically created inside Artifactory. Instead, for every request from an SSO user, the user is temporarily associated with default groups (if such groups are defined), and the permissions for these groups apply. Without auto-user creation, you must manually create the user inside Artifactory to manage user permissions not attached to their default groups. Default value is `false`.
	NoAutoUserCreation pulumi.BoolPtrInput
	// The SAML service provider name. This should be a URI that is also known as the entityID, providerID, or entity identity.
	ServiceProviderName pulumi.StringPtrInput
	// Associate user with Artifactory groups based on the `groupAttribute` provided in the SAML response from the identity provider.  Default value is `false`.
	SyncGroups pulumi.BoolPtrInput
	// When set, an X.509 public certificate will be created by Artifactory. Download this certificate and upload it to your IDP and choose your own encryption algorithm. This process will let you encrypt the assertion section in your SAML response. Default value is `false`.
	UseEncryptedAssertion pulumi.BoolPtrInput
	// Enable "audience", or who the SAML assertion is intended for.  Ensures that the correct service provider intended for Artifactory is used on the IdP.  Default value is `true`.
	VerifyAudienceRestriction pulumi.BoolPtrInput
}

func (SamlSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*samlSettingsState)(nil)).Elem()
}

type samlSettingsArgs struct {
	// Allow persisted users to access their profile.  Default value is `true`.
	AllowUserToAccessProfile *bool `pulumi:"allowUserToAccessProfile"`
	// Auto redirect to login through the IdP when clicking on Artifactory's login link.  Default value is `false`.
	AutoRedirect *bool `pulumi:"autoRedirect"`
	// SAML certificate that contains the public key for the IdP service provider.  Used by Artifactory to verify sign-in requests. Default value is ``.
	Certificate *string `pulumi:"certificate"`
	// Name of the attribute in the SAML response from the IdP that contains the user's email. Default value is ``.
	EmailAttribute *string `pulumi:"emailAttribute"`
	// Enable SAML SSO.  Default value is `true`.
	Enable *bool `pulumi:"enable"`
	// Name of the attribute in the SAML response from the IdP that contains the user's group memberships. Default value is ``.
	GroupAttribute *string `pulumi:"groupAttribute"`
	// Service provider login url configured on the IdP.
	LoginUrl string `pulumi:"loginUrl"`
	// Service provider logout url, or where to redirect after user logs out.
	LogoutUrl string `pulumi:"logoutUrl"`
	// When automatic user creation is off, authenticated users are not automatically created inside Artifactory. Instead, for every request from an SSO user, the user is temporarily associated with default groups (if such groups are defined), and the permissions for these groups apply. Without auto-user creation, you must manually create the user inside Artifactory to manage user permissions not attached to their default groups. Default value is `false`.
	NoAutoUserCreation *bool `pulumi:"noAutoUserCreation"`
	// The SAML service provider name. This should be a URI that is also known as the entityID, providerID, or entity identity.
	ServiceProviderName string `pulumi:"serviceProviderName"`
	// Associate user with Artifactory groups based on the `groupAttribute` provided in the SAML response from the identity provider.  Default value is `false`.
	SyncGroups *bool `pulumi:"syncGroups"`
	// When set, an X.509 public certificate will be created by Artifactory. Download this certificate and upload it to your IDP and choose your own encryption algorithm. This process will let you encrypt the assertion section in your SAML response. Default value is `false`.
	UseEncryptedAssertion *bool `pulumi:"useEncryptedAssertion"`
	// Enable "audience", or who the SAML assertion is intended for.  Ensures that the correct service provider intended for Artifactory is used on the IdP.  Default value is `true`.
	VerifyAudienceRestriction *bool `pulumi:"verifyAudienceRestriction"`
}

// The set of arguments for constructing a SamlSettings resource.
type SamlSettingsArgs struct {
	// Allow persisted users to access their profile.  Default value is `true`.
	AllowUserToAccessProfile pulumi.BoolPtrInput
	// Auto redirect to login through the IdP when clicking on Artifactory's login link.  Default value is `false`.
	AutoRedirect pulumi.BoolPtrInput
	// SAML certificate that contains the public key for the IdP service provider.  Used by Artifactory to verify sign-in requests. Default value is ``.
	Certificate pulumi.StringPtrInput
	// Name of the attribute in the SAML response from the IdP that contains the user's email. Default value is ``.
	EmailAttribute pulumi.StringPtrInput
	// Enable SAML SSO.  Default value is `true`.
	Enable pulumi.BoolPtrInput
	// Name of the attribute in the SAML response from the IdP that contains the user's group memberships. Default value is ``.
	GroupAttribute pulumi.StringPtrInput
	// Service provider login url configured on the IdP.
	LoginUrl pulumi.StringInput
	// Service provider logout url, or where to redirect after user logs out.
	LogoutUrl pulumi.StringInput
	// When automatic user creation is off, authenticated users are not automatically created inside Artifactory. Instead, for every request from an SSO user, the user is temporarily associated with default groups (if such groups are defined), and the permissions for these groups apply. Without auto-user creation, you must manually create the user inside Artifactory to manage user permissions not attached to their default groups. Default value is `false`.
	NoAutoUserCreation pulumi.BoolPtrInput
	// The SAML service provider name. This should be a URI that is also known as the entityID, providerID, or entity identity.
	ServiceProviderName pulumi.StringInput
	// Associate user with Artifactory groups based on the `groupAttribute` provided in the SAML response from the identity provider.  Default value is `false`.
	SyncGroups pulumi.BoolPtrInput
	// When set, an X.509 public certificate will be created by Artifactory. Download this certificate and upload it to your IDP and choose your own encryption algorithm. This process will let you encrypt the assertion section in your SAML response. Default value is `false`.
	UseEncryptedAssertion pulumi.BoolPtrInput
	// Enable "audience", or who the SAML assertion is intended for.  Ensures that the correct service provider intended for Artifactory is used on the IdP.  Default value is `true`.
	VerifyAudienceRestriction pulumi.BoolPtrInput
}

func (SamlSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*samlSettingsArgs)(nil)).Elem()
}

type SamlSettingsInput interface {
	pulumi.Input

	ToSamlSettingsOutput() SamlSettingsOutput
	ToSamlSettingsOutputWithContext(ctx context.Context) SamlSettingsOutput
}

func (*SamlSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**SamlSettings)(nil)).Elem()
}

func (i *SamlSettings) ToSamlSettingsOutput() SamlSettingsOutput {
	return i.ToSamlSettingsOutputWithContext(context.Background())
}

func (i *SamlSettings) ToSamlSettingsOutputWithContext(ctx context.Context) SamlSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlSettingsOutput)
}

// SamlSettingsArrayInput is an input type that accepts SamlSettingsArray and SamlSettingsArrayOutput values.
// You can construct a concrete instance of `SamlSettingsArrayInput` via:
//
//          SamlSettingsArray{ SamlSettingsArgs{...} }
type SamlSettingsArrayInput interface {
	pulumi.Input

	ToSamlSettingsArrayOutput() SamlSettingsArrayOutput
	ToSamlSettingsArrayOutputWithContext(context.Context) SamlSettingsArrayOutput
}

type SamlSettingsArray []SamlSettingsInput

func (SamlSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SamlSettings)(nil)).Elem()
}

func (i SamlSettingsArray) ToSamlSettingsArrayOutput() SamlSettingsArrayOutput {
	return i.ToSamlSettingsArrayOutputWithContext(context.Background())
}

func (i SamlSettingsArray) ToSamlSettingsArrayOutputWithContext(ctx context.Context) SamlSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlSettingsArrayOutput)
}

// SamlSettingsMapInput is an input type that accepts SamlSettingsMap and SamlSettingsMapOutput values.
// You can construct a concrete instance of `SamlSettingsMapInput` via:
//
//          SamlSettingsMap{ "key": SamlSettingsArgs{...} }
type SamlSettingsMapInput interface {
	pulumi.Input

	ToSamlSettingsMapOutput() SamlSettingsMapOutput
	ToSamlSettingsMapOutputWithContext(context.Context) SamlSettingsMapOutput
}

type SamlSettingsMap map[string]SamlSettingsInput

func (SamlSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SamlSettings)(nil)).Elem()
}

func (i SamlSettingsMap) ToSamlSettingsMapOutput() SamlSettingsMapOutput {
	return i.ToSamlSettingsMapOutputWithContext(context.Background())
}

func (i SamlSettingsMap) ToSamlSettingsMapOutputWithContext(ctx context.Context) SamlSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlSettingsMapOutput)
}

type SamlSettingsOutput struct{ *pulumi.OutputState }

func (SamlSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SamlSettings)(nil)).Elem()
}

func (o SamlSettingsOutput) ToSamlSettingsOutput() SamlSettingsOutput {
	return o
}

func (o SamlSettingsOutput) ToSamlSettingsOutputWithContext(ctx context.Context) SamlSettingsOutput {
	return o
}

type SamlSettingsArrayOutput struct{ *pulumi.OutputState }

func (SamlSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SamlSettings)(nil)).Elem()
}

func (o SamlSettingsArrayOutput) ToSamlSettingsArrayOutput() SamlSettingsArrayOutput {
	return o
}

func (o SamlSettingsArrayOutput) ToSamlSettingsArrayOutputWithContext(ctx context.Context) SamlSettingsArrayOutput {
	return o
}

func (o SamlSettingsArrayOutput) Index(i pulumi.IntInput) SamlSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SamlSettings {
		return vs[0].([]*SamlSettings)[vs[1].(int)]
	}).(SamlSettingsOutput)
}

type SamlSettingsMapOutput struct{ *pulumi.OutputState }

func (SamlSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SamlSettings)(nil)).Elem()
}

func (o SamlSettingsMapOutput) ToSamlSettingsMapOutput() SamlSettingsMapOutput {
	return o
}

func (o SamlSettingsMapOutput) ToSamlSettingsMapOutputWithContext(ctx context.Context) SamlSettingsMapOutput {
	return o
}

func (o SamlSettingsMapOutput) MapIndex(k pulumi.StringInput) SamlSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SamlSettings {
		return vs[0].(map[string]*SamlSettings)[vs[1].(string)]
	}).(SamlSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SamlSettingsInput)(nil)).Elem(), &SamlSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*SamlSettingsArrayInput)(nil)).Elem(), SamlSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SamlSettingsMapInput)(nil)).Elem(), SamlSettingsMap{})
	pulumi.RegisterOutputType(SamlSettingsOutput{})
	pulumi.RegisterOutputType(SamlSettingsArrayOutput{})
	pulumi.RegisterOutputType(SamlSettingsMapOutput{})
}
