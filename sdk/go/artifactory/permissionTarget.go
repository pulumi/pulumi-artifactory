// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PermissionTarget struct {
	pulumi.CustomResourceState

	Build         PermissionTargetBuildPtrOutput         `pulumi:"build"`
	Name          pulumi.StringOutput                    `pulumi:"name"`
	ReleaseBundle PermissionTargetReleaseBundlePtrOutput `pulumi:"releaseBundle"`
	Repo          PermissionTargetRepoPtrOutput          `pulumi:"repo"`
}

// NewPermissionTarget registers a new resource with the given unique name, arguments, and options.
func NewPermissionTarget(ctx *pulumi.Context,
	name string, args *PermissionTargetArgs, opts ...pulumi.ResourceOption) (*PermissionTarget, error) {
	if args == nil {
		args = &PermissionTargetArgs{}
	}

	var resource PermissionTarget
	err := ctx.RegisterResource("artifactory:index/permissionTarget:PermissionTarget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPermissionTarget gets an existing PermissionTarget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPermissionTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PermissionTargetState, opts ...pulumi.ResourceOption) (*PermissionTarget, error) {
	var resource PermissionTarget
	err := ctx.ReadResource("artifactory:index/permissionTarget:PermissionTarget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PermissionTarget resources.
type permissionTargetState struct {
	Build         *PermissionTargetBuild         `pulumi:"build"`
	Name          *string                        `pulumi:"name"`
	ReleaseBundle *PermissionTargetReleaseBundle `pulumi:"releaseBundle"`
	Repo          *PermissionTargetRepo          `pulumi:"repo"`
}

type PermissionTargetState struct {
	Build         PermissionTargetBuildPtrInput
	Name          pulumi.StringPtrInput
	ReleaseBundle PermissionTargetReleaseBundlePtrInput
	Repo          PermissionTargetRepoPtrInput
}

func (PermissionTargetState) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionTargetState)(nil)).Elem()
}

type permissionTargetArgs struct {
	Build         *PermissionTargetBuild         `pulumi:"build"`
	Name          *string                        `pulumi:"name"`
	ReleaseBundle *PermissionTargetReleaseBundle `pulumi:"releaseBundle"`
	Repo          *PermissionTargetRepo          `pulumi:"repo"`
}

// The set of arguments for constructing a PermissionTarget resource.
type PermissionTargetArgs struct {
	Build         PermissionTargetBuildPtrInput
	Name          pulumi.StringPtrInput
	ReleaseBundle PermissionTargetReleaseBundlePtrInput
	Repo          PermissionTargetRepoPtrInput
}

func (PermissionTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionTargetArgs)(nil)).Elem()
}

type PermissionTargetInput interface {
	pulumi.Input

	ToPermissionTargetOutput() PermissionTargetOutput
	ToPermissionTargetOutputWithContext(ctx context.Context) PermissionTargetOutput
}

func (*PermissionTarget) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTarget)(nil)).Elem()
}

func (i *PermissionTarget) ToPermissionTargetOutput() PermissionTargetOutput {
	return i.ToPermissionTargetOutputWithContext(context.Background())
}

func (i *PermissionTarget) ToPermissionTargetOutputWithContext(ctx context.Context) PermissionTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetOutput)
}

// PermissionTargetArrayInput is an input type that accepts PermissionTargetArray and PermissionTargetArrayOutput values.
// You can construct a concrete instance of `PermissionTargetArrayInput` via:
//
//          PermissionTargetArray{ PermissionTargetArgs{...} }
type PermissionTargetArrayInput interface {
	pulumi.Input

	ToPermissionTargetArrayOutput() PermissionTargetArrayOutput
	ToPermissionTargetArrayOutputWithContext(context.Context) PermissionTargetArrayOutput
}

type PermissionTargetArray []PermissionTargetInput

func (PermissionTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PermissionTarget)(nil)).Elem()
}

func (i PermissionTargetArray) ToPermissionTargetArrayOutput() PermissionTargetArrayOutput {
	return i.ToPermissionTargetArrayOutputWithContext(context.Background())
}

func (i PermissionTargetArray) ToPermissionTargetArrayOutputWithContext(ctx context.Context) PermissionTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetArrayOutput)
}

// PermissionTargetMapInput is an input type that accepts PermissionTargetMap and PermissionTargetMapOutput values.
// You can construct a concrete instance of `PermissionTargetMapInput` via:
//
//          PermissionTargetMap{ "key": PermissionTargetArgs{...} }
type PermissionTargetMapInput interface {
	pulumi.Input

	ToPermissionTargetMapOutput() PermissionTargetMapOutput
	ToPermissionTargetMapOutputWithContext(context.Context) PermissionTargetMapOutput
}

type PermissionTargetMap map[string]PermissionTargetInput

func (PermissionTargetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PermissionTarget)(nil)).Elem()
}

func (i PermissionTargetMap) ToPermissionTargetMapOutput() PermissionTargetMapOutput {
	return i.ToPermissionTargetMapOutputWithContext(context.Background())
}

func (i PermissionTargetMap) ToPermissionTargetMapOutputWithContext(ctx context.Context) PermissionTargetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetMapOutput)
}

type PermissionTargetOutput struct{ *pulumi.OutputState }

func (PermissionTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTarget)(nil)).Elem()
}

func (o PermissionTargetOutput) ToPermissionTargetOutput() PermissionTargetOutput {
	return o
}

func (o PermissionTargetOutput) ToPermissionTargetOutputWithContext(ctx context.Context) PermissionTargetOutput {
	return o
}

type PermissionTargetArrayOutput struct{ *pulumi.OutputState }

func (PermissionTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PermissionTarget)(nil)).Elem()
}

func (o PermissionTargetArrayOutput) ToPermissionTargetArrayOutput() PermissionTargetArrayOutput {
	return o
}

func (o PermissionTargetArrayOutput) ToPermissionTargetArrayOutputWithContext(ctx context.Context) PermissionTargetArrayOutput {
	return o
}

func (o PermissionTargetArrayOutput) Index(i pulumi.IntInput) PermissionTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PermissionTarget {
		return vs[0].([]*PermissionTarget)[vs[1].(int)]
	}).(PermissionTargetOutput)
}

type PermissionTargetMapOutput struct{ *pulumi.OutputState }

func (PermissionTargetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PermissionTarget)(nil)).Elem()
}

func (o PermissionTargetMapOutput) ToPermissionTargetMapOutput() PermissionTargetMapOutput {
	return o
}

func (o PermissionTargetMapOutput) ToPermissionTargetMapOutputWithContext(ctx context.Context) PermissionTargetMapOutput {
	return o
}

func (o PermissionTargetMapOutput) MapIndex(k pulumi.StringInput) PermissionTargetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PermissionTarget {
		return vs[0].(map[string]*PermissionTarget)[vs[1].(string)]
	}).(PermissionTargetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetInput)(nil)).Elem(), &PermissionTarget{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetArrayInput)(nil)).Elem(), PermissionTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetMapInput)(nil)).Elem(), PermissionTargetMap{})
	pulumi.RegisterOutputType(PermissionTargetOutput{})
	pulumi.RegisterOutputType(PermissionTargetArrayOutput{})
	pulumi.RegisterOutputType(PermissionTargetMapOutput{})
}
