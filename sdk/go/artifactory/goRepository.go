// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Artifactory Virtual Go Repository Resource
//
// Provides an Artifactory virtual repository resource, but with specific go lang features. This should be preferred over the original
// one-size-fits-all `VirtualRepository`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := artifactory.NewGoRepository(ctx, "baz_go", &artifactory.GoRepositoryArgs{
// 			Description:                 pulumi.String("A test virtual repo"),
// 			ExcludesPattern:             pulumi.String("com/google/**"),
// 			ExternalDependenciesEnabled: pulumi.Bool(true),
// 			ExternalDependenciesPatterns: pulumi.StringArray{
// 				pulumi.String("**/github.com/**"),
// 				pulumi.String("**/go.googlesource.com/**"),
// 			},
// 			IncludesPattern: pulumi.String("com/jfrog/**,cloud/jfrog/**"),
// 			Key:             pulumi.String("baz-go"),
// 			Notes:           pulumi.String("Internal description"),
// 			RepoLayoutRef:   pulumi.String("go-default"),
// 			Repositories:    pulumi.StringArray{},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Virtual repositories can be imported using their name, e.g.
//
// ```sh
//  $ pulumi import artifactory:index/goRepository:GoRepository foo foo
// ```
type GoRepository struct {
	pulumi.CustomResourceState

	ArtifactoryRequestsCanRetrieveRemoteArtifacts pulumi.BoolPtrOutput   `pulumi:"artifactoryRequestsCanRetrieveRemoteArtifacts"`
	DefaultDeploymentRepo                         pulumi.StringPtrOutput `pulumi:"defaultDeploymentRepo"`
	Description                                   pulumi.StringPtrOutput `pulumi:"description"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
	// artifacts are excluded.
	ExcludesPattern pulumi.StringPtrOutput `pulumi:"excludesPattern"`
	// . Shorthand for "Enable 'go-import' Meta Tags" on the UI. This must be set to true in order to use the allow list
	ExternalDependenciesEnabled pulumi.BoolOutput `pulumi:"externalDependenciesEnabled"`
	// - 'go-import' Allow List on the UI.
	ExternalDependenciesPatterns pulumi.StringArrayOutput `pulumi:"externalDependenciesPatterns"`
	// List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only
	// artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern pulumi.StringPtrOutput   `pulumi:"includesPattern"`
	Key             pulumi.StringOutput      `pulumi:"key"`
	Notes           pulumi.StringPtrOutput   `pulumi:"notes"`
	PackageType     pulumi.StringOutput      `pulumi:"packageType"`
	RepoLayoutRef   pulumi.StringOutput      `pulumi:"repoLayoutRef"`
	Repositories    pulumi.StringArrayOutput `pulumi:"repositories"`
}

// NewGoRepository registers a new resource with the given unique name, arguments, and options.
func NewGoRepository(ctx *pulumi.Context,
	name string, args *GoRepositoryArgs, opts ...pulumi.ResourceOption) (*GoRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.Repositories == nil {
		return nil, errors.New("invalid value for required argument 'Repositories'")
	}
	var resource GoRepository
	err := ctx.RegisterResource("artifactory:index/goRepository:GoRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGoRepository gets an existing GoRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGoRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GoRepositoryState, opts ...pulumi.ResourceOption) (*GoRepository, error) {
	var resource GoRepository
	err := ctx.ReadResource("artifactory:index/goRepository:GoRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GoRepository resources.
type goRepositoryState struct {
	ArtifactoryRequestsCanRetrieveRemoteArtifacts *bool   `pulumi:"artifactoryRequestsCanRetrieveRemoteArtifacts"`
	DefaultDeploymentRepo                         *string `pulumi:"defaultDeploymentRepo"`
	Description                                   *string `pulumi:"description"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
	// artifacts are excluded.
	ExcludesPattern *string `pulumi:"excludesPattern"`
	// . Shorthand for "Enable 'go-import' Meta Tags" on the UI. This must be set to true in order to use the allow list
	ExternalDependenciesEnabled *bool `pulumi:"externalDependenciesEnabled"`
	// - 'go-import' Allow List on the UI.
	ExternalDependenciesPatterns []string `pulumi:"externalDependenciesPatterns"`
	// List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only
	// artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern *string  `pulumi:"includesPattern"`
	Key             *string  `pulumi:"key"`
	Notes           *string  `pulumi:"notes"`
	PackageType     *string  `pulumi:"packageType"`
	RepoLayoutRef   *string  `pulumi:"repoLayoutRef"`
	Repositories    []string `pulumi:"repositories"`
}

type GoRepositoryState struct {
	ArtifactoryRequestsCanRetrieveRemoteArtifacts pulumi.BoolPtrInput
	DefaultDeploymentRepo                         pulumi.StringPtrInput
	Description                                   pulumi.StringPtrInput
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
	// artifacts are excluded.
	ExcludesPattern pulumi.StringPtrInput
	// . Shorthand for "Enable 'go-import' Meta Tags" on the UI. This must be set to true in order to use the allow list
	ExternalDependenciesEnabled pulumi.BoolPtrInput
	// - 'go-import' Allow List on the UI.
	ExternalDependenciesPatterns pulumi.StringArrayInput
	// List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only
	// artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern pulumi.StringPtrInput
	Key             pulumi.StringPtrInput
	Notes           pulumi.StringPtrInput
	PackageType     pulumi.StringPtrInput
	RepoLayoutRef   pulumi.StringPtrInput
	Repositories    pulumi.StringArrayInput
}

func (GoRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*goRepositoryState)(nil)).Elem()
}

type goRepositoryArgs struct {
	ArtifactoryRequestsCanRetrieveRemoteArtifacts *bool   `pulumi:"artifactoryRequestsCanRetrieveRemoteArtifacts"`
	DefaultDeploymentRepo                         *string `pulumi:"defaultDeploymentRepo"`
	Description                                   *string `pulumi:"description"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
	// artifacts are excluded.
	ExcludesPattern *string `pulumi:"excludesPattern"`
	// . Shorthand for "Enable 'go-import' Meta Tags" on the UI. This must be set to true in order to use the allow list
	ExternalDependenciesEnabled *bool `pulumi:"externalDependenciesEnabled"`
	// - 'go-import' Allow List on the UI.
	ExternalDependenciesPatterns []string `pulumi:"externalDependenciesPatterns"`
	// List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only
	// artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern *string  `pulumi:"includesPattern"`
	Key             string   `pulumi:"key"`
	Notes           *string  `pulumi:"notes"`
	RepoLayoutRef   *string  `pulumi:"repoLayoutRef"`
	Repositories    []string `pulumi:"repositories"`
}

// The set of arguments for constructing a GoRepository resource.
type GoRepositoryArgs struct {
	ArtifactoryRequestsCanRetrieveRemoteArtifacts pulumi.BoolPtrInput
	DefaultDeploymentRepo                         pulumi.StringPtrInput
	Description                                   pulumi.StringPtrInput
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
	// artifacts are excluded.
	ExcludesPattern pulumi.StringPtrInput
	// . Shorthand for "Enable 'go-import' Meta Tags" on the UI. This must be set to true in order to use the allow list
	ExternalDependenciesEnabled pulumi.BoolPtrInput
	// - 'go-import' Allow List on the UI.
	ExternalDependenciesPatterns pulumi.StringArrayInput
	// List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only
	// artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern pulumi.StringPtrInput
	Key             pulumi.StringInput
	Notes           pulumi.StringPtrInput
	RepoLayoutRef   pulumi.StringPtrInput
	Repositories    pulumi.StringArrayInput
}

func (GoRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*goRepositoryArgs)(nil)).Elem()
}

type GoRepositoryInput interface {
	pulumi.Input

	ToGoRepositoryOutput() GoRepositoryOutput
	ToGoRepositoryOutputWithContext(ctx context.Context) GoRepositoryOutput
}

func (*GoRepository) ElementType() reflect.Type {
	return reflect.TypeOf((*GoRepository)(nil))
}

func (i *GoRepository) ToGoRepositoryOutput() GoRepositoryOutput {
	return i.ToGoRepositoryOutputWithContext(context.Background())
}

func (i *GoRepository) ToGoRepositoryOutputWithContext(ctx context.Context) GoRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoRepositoryOutput)
}

func (i *GoRepository) ToGoRepositoryPtrOutput() GoRepositoryPtrOutput {
	return i.ToGoRepositoryPtrOutputWithContext(context.Background())
}

func (i *GoRepository) ToGoRepositoryPtrOutputWithContext(ctx context.Context) GoRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoRepositoryPtrOutput)
}

type GoRepositoryPtrInput interface {
	pulumi.Input

	ToGoRepositoryPtrOutput() GoRepositoryPtrOutput
	ToGoRepositoryPtrOutputWithContext(ctx context.Context) GoRepositoryPtrOutput
}

type goRepositoryPtrType GoRepositoryArgs

func (*goRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoRepository)(nil))
}

func (i *goRepositoryPtrType) ToGoRepositoryPtrOutput() GoRepositoryPtrOutput {
	return i.ToGoRepositoryPtrOutputWithContext(context.Background())
}

func (i *goRepositoryPtrType) ToGoRepositoryPtrOutputWithContext(ctx context.Context) GoRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoRepositoryPtrOutput)
}

// GoRepositoryArrayInput is an input type that accepts GoRepositoryArray and GoRepositoryArrayOutput values.
// You can construct a concrete instance of `GoRepositoryArrayInput` via:
//
//          GoRepositoryArray{ GoRepositoryArgs{...} }
type GoRepositoryArrayInput interface {
	pulumi.Input

	ToGoRepositoryArrayOutput() GoRepositoryArrayOutput
	ToGoRepositoryArrayOutputWithContext(context.Context) GoRepositoryArrayOutput
}

type GoRepositoryArray []GoRepositoryInput

func (GoRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GoRepository)(nil)).Elem()
}

func (i GoRepositoryArray) ToGoRepositoryArrayOutput() GoRepositoryArrayOutput {
	return i.ToGoRepositoryArrayOutputWithContext(context.Background())
}

func (i GoRepositoryArray) ToGoRepositoryArrayOutputWithContext(ctx context.Context) GoRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoRepositoryArrayOutput)
}

// GoRepositoryMapInput is an input type that accepts GoRepositoryMap and GoRepositoryMapOutput values.
// You can construct a concrete instance of `GoRepositoryMapInput` via:
//
//          GoRepositoryMap{ "key": GoRepositoryArgs{...} }
type GoRepositoryMapInput interface {
	pulumi.Input

	ToGoRepositoryMapOutput() GoRepositoryMapOutput
	ToGoRepositoryMapOutputWithContext(context.Context) GoRepositoryMapOutput
}

type GoRepositoryMap map[string]GoRepositoryInput

func (GoRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GoRepository)(nil)).Elem()
}

func (i GoRepositoryMap) ToGoRepositoryMapOutput() GoRepositoryMapOutput {
	return i.ToGoRepositoryMapOutputWithContext(context.Background())
}

func (i GoRepositoryMap) ToGoRepositoryMapOutputWithContext(ctx context.Context) GoRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoRepositoryMapOutput)
}

type GoRepositoryOutput struct{ *pulumi.OutputState }

func (GoRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoRepository)(nil))
}

func (o GoRepositoryOutput) ToGoRepositoryOutput() GoRepositoryOutput {
	return o
}

func (o GoRepositoryOutput) ToGoRepositoryOutputWithContext(ctx context.Context) GoRepositoryOutput {
	return o
}

func (o GoRepositoryOutput) ToGoRepositoryPtrOutput() GoRepositoryPtrOutput {
	return o.ToGoRepositoryPtrOutputWithContext(context.Background())
}

func (o GoRepositoryOutput) ToGoRepositoryPtrOutputWithContext(ctx context.Context) GoRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoRepository) *GoRepository {
		return &v
	}).(GoRepositoryPtrOutput)
}

type GoRepositoryPtrOutput struct{ *pulumi.OutputState }

func (GoRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoRepository)(nil))
}

func (o GoRepositoryPtrOutput) ToGoRepositoryPtrOutput() GoRepositoryPtrOutput {
	return o
}

func (o GoRepositoryPtrOutput) ToGoRepositoryPtrOutputWithContext(ctx context.Context) GoRepositoryPtrOutput {
	return o
}

func (o GoRepositoryPtrOutput) Elem() GoRepositoryOutput {
	return o.ApplyT(func(v *GoRepository) GoRepository {
		if v != nil {
			return *v
		}
		var ret GoRepository
		return ret
	}).(GoRepositoryOutput)
}

type GoRepositoryArrayOutput struct{ *pulumi.OutputState }

func (GoRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoRepository)(nil))
}

func (o GoRepositoryArrayOutput) ToGoRepositoryArrayOutput() GoRepositoryArrayOutput {
	return o
}

func (o GoRepositoryArrayOutput) ToGoRepositoryArrayOutputWithContext(ctx context.Context) GoRepositoryArrayOutput {
	return o
}

func (o GoRepositoryArrayOutput) Index(i pulumi.IntInput) GoRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoRepository {
		return vs[0].([]GoRepository)[vs[1].(int)]
	}).(GoRepositoryOutput)
}

type GoRepositoryMapOutput struct{ *pulumi.OutputState }

func (GoRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GoRepository)(nil))
}

func (o GoRepositoryMapOutput) ToGoRepositoryMapOutput() GoRepositoryMapOutput {
	return o
}

func (o GoRepositoryMapOutput) ToGoRepositoryMapOutputWithContext(ctx context.Context) GoRepositoryMapOutput {
	return o
}

func (o GoRepositoryMapOutput) MapIndex(k pulumi.StringInput) GoRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GoRepository {
		return vs[0].(map[string]GoRepository)[vs[1].(string)]
	}).(GoRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GoRepositoryInput)(nil)).Elem(), &GoRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoRepositoryPtrInput)(nil)).Elem(), &GoRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoRepositoryArrayInput)(nil)).Elem(), GoRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoRepositoryMapInput)(nil)).Elem(), GoRepositoryMap{})
	pulumi.RegisterOutputType(GoRepositoryOutput{})
	pulumi.RegisterOutputType(GoRepositoryPtrOutput{})
	pulumi.RegisterOutputType(GoRepositoryArrayOutput{})
	pulumi.RegisterOutputType(GoRepositoryMapOutput{})
}
