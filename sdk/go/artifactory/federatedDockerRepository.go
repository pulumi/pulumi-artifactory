// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Artifactory Federated Docker Repository Resource
//
// Creates a federated Docker repository
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := artifactory.NewFederatedDockerRepository(ctx, "terraform-federated-test-docker-repo", &artifactory.FederatedDockerRepositoryArgs{
// 			Key: pulumi.String("terraform-federated-test-docker-repo"),
// 			Members: FederatedDockerRepositoryMemberArray{
// 				&FederatedDockerRepositoryMemberArgs{
// 					Enable: true,
// 					Url:    pulumi.String("http://tempurl.org/artifactory/terraform-federated-test-docker-repo"),
// 				},
// 				&FederatedDockerRepositoryMemberArgs{
// 					Enable: true,
// 					Url:    pulumi.String("http://tempurl2.org/artifactory/terraform-federated-test-docker-repo-2"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type FederatedDockerRepository struct {
	pulumi.CustomResourceState

	// When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and
	// therefore requires strict content moderation to prevent malicious users from uploading content that may compromise
	// security (e.g., cross-site scripting attacks).
	ArchiveBrowsingEnabled pulumi.BoolPtrOutput   `pulumi:"archiveBrowsingEnabled"`
	BlackedOut             pulumi.BoolPtrOutput   `pulumi:"blackedOut"`
	Description            pulumi.StringPtrOutput `pulumi:"description"`
	DownloadDirect         pulumi.BoolPtrOutput   `pulumi:"downloadDirect"`
	ExcludesPattern        pulumi.StringOutput    `pulumi:"excludesPattern"`
	IncludesPattern        pulumi.StringOutput    `pulumi:"includesPattern"`
	// - the identity key of the repo
	Key pulumi.StringOutput `pulumi:"key"`
	// - The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.
	Members     FederatedDockerRepositoryMemberArrayOutput `pulumi:"members"`
	Notes       pulumi.StringPtrOutput                     `pulumi:"notes"`
	PackageType pulumi.StringOutput                        `pulumi:"packageType"`
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution pulumi.BoolPtrOutput `pulumi:"priorityResolution"`
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments pulumi.StringArrayOutput `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed
	// with project key, separated by a dash.
	ProjectKey    pulumi.StringPtrOutput   `pulumi:"projectKey"`
	PropertySets  pulumi.StringArrayOutput `pulumi:"propertySets"`
	RepoLayoutRef pulumi.StringOutput      `pulumi:"repoLayoutRef"`
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
	// Xray settings.
	XrayIndex pulumi.BoolPtrOutput `pulumi:"xrayIndex"`
}

// NewFederatedDockerRepository registers a new resource with the given unique name, arguments, and options.
func NewFederatedDockerRepository(ctx *pulumi.Context,
	name string, args *FederatedDockerRepositoryArgs, opts ...pulumi.ResourceOption) (*FederatedDockerRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	var resource FederatedDockerRepository
	err := ctx.RegisterResource("artifactory:index/federatedDockerRepository:FederatedDockerRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFederatedDockerRepository gets an existing FederatedDockerRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFederatedDockerRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FederatedDockerRepositoryState, opts ...pulumi.ResourceOption) (*FederatedDockerRepository, error) {
	var resource FederatedDockerRepository
	err := ctx.ReadResource("artifactory:index/federatedDockerRepository:FederatedDockerRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FederatedDockerRepository resources.
type federatedDockerRepositoryState struct {
	// When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and
	// therefore requires strict content moderation to prevent malicious users from uploading content that may compromise
	// security (e.g., cross-site scripting attacks).
	ArchiveBrowsingEnabled *bool   `pulumi:"archiveBrowsingEnabled"`
	BlackedOut             *bool   `pulumi:"blackedOut"`
	Description            *string `pulumi:"description"`
	DownloadDirect         *bool   `pulumi:"downloadDirect"`
	ExcludesPattern        *string `pulumi:"excludesPattern"`
	IncludesPattern        *string `pulumi:"includesPattern"`
	// - the identity key of the repo
	Key *string `pulumi:"key"`
	// - The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.
	Members     []FederatedDockerRepositoryMember `pulumi:"members"`
	Notes       *string                           `pulumi:"notes"`
	PackageType *string                           `pulumi:"packageType"`
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution *bool `pulumi:"priorityResolution"`
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments []string `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed
	// with project key, separated by a dash.
	ProjectKey    *string  `pulumi:"projectKey"`
	PropertySets  []string `pulumi:"propertySets"`
	RepoLayoutRef *string  `pulumi:"repoLayoutRef"`
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
	// Xray settings.
	XrayIndex *bool `pulumi:"xrayIndex"`
}

type FederatedDockerRepositoryState struct {
	// When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and
	// therefore requires strict content moderation to prevent malicious users from uploading content that may compromise
	// security (e.g., cross-site scripting attacks).
	ArchiveBrowsingEnabled pulumi.BoolPtrInput
	BlackedOut             pulumi.BoolPtrInput
	Description            pulumi.StringPtrInput
	DownloadDirect         pulumi.BoolPtrInput
	ExcludesPattern        pulumi.StringPtrInput
	IncludesPattern        pulumi.StringPtrInput
	// - the identity key of the repo
	Key pulumi.StringPtrInput
	// - The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.
	Members     FederatedDockerRepositoryMemberArrayInput
	Notes       pulumi.StringPtrInput
	PackageType pulumi.StringPtrInput
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution pulumi.BoolPtrInput
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments pulumi.StringArrayInput
	// Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed
	// with project key, separated by a dash.
	ProjectKey    pulumi.StringPtrInput
	PropertySets  pulumi.StringArrayInput
	RepoLayoutRef pulumi.StringPtrInput
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
	// Xray settings.
	XrayIndex pulumi.BoolPtrInput
}

func (FederatedDockerRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*federatedDockerRepositoryState)(nil)).Elem()
}

type federatedDockerRepositoryArgs struct {
	// When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and
	// therefore requires strict content moderation to prevent malicious users from uploading content that may compromise
	// security (e.g., cross-site scripting attacks).
	ArchiveBrowsingEnabled *bool   `pulumi:"archiveBrowsingEnabled"`
	BlackedOut             *bool   `pulumi:"blackedOut"`
	Description            *string `pulumi:"description"`
	DownloadDirect         *bool   `pulumi:"downloadDirect"`
	ExcludesPattern        *string `pulumi:"excludesPattern"`
	IncludesPattern        *string `pulumi:"includesPattern"`
	// - the identity key of the repo
	Key string `pulumi:"key"`
	// - The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.
	Members []FederatedDockerRepositoryMember `pulumi:"members"`
	Notes   *string                           `pulumi:"notes"`
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution *bool `pulumi:"priorityResolution"`
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments []string `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed
	// with project key, separated by a dash.
	ProjectKey    *string  `pulumi:"projectKey"`
	PropertySets  []string `pulumi:"propertySets"`
	RepoLayoutRef *string  `pulumi:"repoLayoutRef"`
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
	// Xray settings.
	XrayIndex *bool `pulumi:"xrayIndex"`
}

// The set of arguments for constructing a FederatedDockerRepository resource.
type FederatedDockerRepositoryArgs struct {
	// When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and
	// therefore requires strict content moderation to prevent malicious users from uploading content that may compromise
	// security (e.g., cross-site scripting attacks).
	ArchiveBrowsingEnabled pulumi.BoolPtrInput
	BlackedOut             pulumi.BoolPtrInput
	Description            pulumi.StringPtrInput
	DownloadDirect         pulumi.BoolPtrInput
	ExcludesPattern        pulumi.StringPtrInput
	IncludesPattern        pulumi.StringPtrInput
	// - the identity key of the repo
	Key pulumi.StringInput
	// - The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.
	Members FederatedDockerRepositoryMemberArrayInput
	Notes   pulumi.StringPtrInput
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution pulumi.BoolPtrInput
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments pulumi.StringArrayInput
	// Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed
	// with project key, separated by a dash.
	ProjectKey    pulumi.StringPtrInput
	PropertySets  pulumi.StringArrayInput
	RepoLayoutRef pulumi.StringPtrInput
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
	// Xray settings.
	XrayIndex pulumi.BoolPtrInput
}

func (FederatedDockerRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*federatedDockerRepositoryArgs)(nil)).Elem()
}

type FederatedDockerRepositoryInput interface {
	pulumi.Input

	ToFederatedDockerRepositoryOutput() FederatedDockerRepositoryOutput
	ToFederatedDockerRepositoryOutputWithContext(ctx context.Context) FederatedDockerRepositoryOutput
}

func (*FederatedDockerRepository) ElementType() reflect.Type {
	return reflect.TypeOf((**FederatedDockerRepository)(nil)).Elem()
}

func (i *FederatedDockerRepository) ToFederatedDockerRepositoryOutput() FederatedDockerRepositoryOutput {
	return i.ToFederatedDockerRepositoryOutputWithContext(context.Background())
}

func (i *FederatedDockerRepository) ToFederatedDockerRepositoryOutputWithContext(ctx context.Context) FederatedDockerRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedDockerRepositoryOutput)
}

// FederatedDockerRepositoryArrayInput is an input type that accepts FederatedDockerRepositoryArray and FederatedDockerRepositoryArrayOutput values.
// You can construct a concrete instance of `FederatedDockerRepositoryArrayInput` via:
//
//          FederatedDockerRepositoryArray{ FederatedDockerRepositoryArgs{...} }
type FederatedDockerRepositoryArrayInput interface {
	pulumi.Input

	ToFederatedDockerRepositoryArrayOutput() FederatedDockerRepositoryArrayOutput
	ToFederatedDockerRepositoryArrayOutputWithContext(context.Context) FederatedDockerRepositoryArrayOutput
}

type FederatedDockerRepositoryArray []FederatedDockerRepositoryInput

func (FederatedDockerRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FederatedDockerRepository)(nil)).Elem()
}

func (i FederatedDockerRepositoryArray) ToFederatedDockerRepositoryArrayOutput() FederatedDockerRepositoryArrayOutput {
	return i.ToFederatedDockerRepositoryArrayOutputWithContext(context.Background())
}

func (i FederatedDockerRepositoryArray) ToFederatedDockerRepositoryArrayOutputWithContext(ctx context.Context) FederatedDockerRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedDockerRepositoryArrayOutput)
}

// FederatedDockerRepositoryMapInput is an input type that accepts FederatedDockerRepositoryMap and FederatedDockerRepositoryMapOutput values.
// You can construct a concrete instance of `FederatedDockerRepositoryMapInput` via:
//
//          FederatedDockerRepositoryMap{ "key": FederatedDockerRepositoryArgs{...} }
type FederatedDockerRepositoryMapInput interface {
	pulumi.Input

	ToFederatedDockerRepositoryMapOutput() FederatedDockerRepositoryMapOutput
	ToFederatedDockerRepositoryMapOutputWithContext(context.Context) FederatedDockerRepositoryMapOutput
}

type FederatedDockerRepositoryMap map[string]FederatedDockerRepositoryInput

func (FederatedDockerRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FederatedDockerRepository)(nil)).Elem()
}

func (i FederatedDockerRepositoryMap) ToFederatedDockerRepositoryMapOutput() FederatedDockerRepositoryMapOutput {
	return i.ToFederatedDockerRepositoryMapOutputWithContext(context.Background())
}

func (i FederatedDockerRepositoryMap) ToFederatedDockerRepositoryMapOutputWithContext(ctx context.Context) FederatedDockerRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedDockerRepositoryMapOutput)
}

type FederatedDockerRepositoryOutput struct{ *pulumi.OutputState }

func (FederatedDockerRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FederatedDockerRepository)(nil)).Elem()
}

func (o FederatedDockerRepositoryOutput) ToFederatedDockerRepositoryOutput() FederatedDockerRepositoryOutput {
	return o
}

func (o FederatedDockerRepositoryOutput) ToFederatedDockerRepositoryOutputWithContext(ctx context.Context) FederatedDockerRepositoryOutput {
	return o
}

type FederatedDockerRepositoryArrayOutput struct{ *pulumi.OutputState }

func (FederatedDockerRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FederatedDockerRepository)(nil)).Elem()
}

func (o FederatedDockerRepositoryArrayOutput) ToFederatedDockerRepositoryArrayOutput() FederatedDockerRepositoryArrayOutput {
	return o
}

func (o FederatedDockerRepositoryArrayOutput) ToFederatedDockerRepositoryArrayOutputWithContext(ctx context.Context) FederatedDockerRepositoryArrayOutput {
	return o
}

func (o FederatedDockerRepositoryArrayOutput) Index(i pulumi.IntInput) FederatedDockerRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FederatedDockerRepository {
		return vs[0].([]*FederatedDockerRepository)[vs[1].(int)]
	}).(FederatedDockerRepositoryOutput)
}

type FederatedDockerRepositoryMapOutput struct{ *pulumi.OutputState }

func (FederatedDockerRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FederatedDockerRepository)(nil)).Elem()
}

func (o FederatedDockerRepositoryMapOutput) ToFederatedDockerRepositoryMapOutput() FederatedDockerRepositoryMapOutput {
	return o
}

func (o FederatedDockerRepositoryMapOutput) ToFederatedDockerRepositoryMapOutputWithContext(ctx context.Context) FederatedDockerRepositoryMapOutput {
	return o
}

func (o FederatedDockerRepositoryMapOutput) MapIndex(k pulumi.StringInput) FederatedDockerRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FederatedDockerRepository {
		return vs[0].(map[string]*FederatedDockerRepository)[vs[1].(string)]
	}).(FederatedDockerRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedDockerRepositoryInput)(nil)).Elem(), &FederatedDockerRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedDockerRepositoryArrayInput)(nil)).Elem(), FederatedDockerRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedDockerRepositoryMapInput)(nil)).Elem(), FederatedDockerRepositoryMap{})
	pulumi.RegisterOutputType(FederatedDockerRepositoryOutput{})
	pulumi.RegisterOutputType(FederatedDockerRepositoryArrayOutput{})
	pulumi.RegisterOutputType(FederatedDockerRepositoryMapOutput{})
}
