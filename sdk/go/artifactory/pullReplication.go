// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Artifactory Pull Replication Resource
//
// Provides an Artifactory pull replication resource. This can be used to create and manage pull replication in Artifactory
// for a remote repo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := artifactory.NewLocalRepository(ctx, "providerTestSource", &artifactory.LocalRepositoryArgs{
// 			Key:         pulumi.String("provider_test_source"),
// 			PackageType: pulumi.String("maven"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		providerTestDest, err := artifactory.NewRemoteRepository(ctx, "providerTestDest", &artifactory.RemoteRepositoryArgs{
// 			Key:         pulumi.String("provider_test_dest"),
// 			PackageType: pulumi.String("maven"),
// 			Password:    pulumi.String("bar"),
// 			Url:         pulumi.String(fmt.Sprintf("%v%v", "https://example.com/artifactory/", artifactory_local_repository.Artifactory_local_repository.Key)),
// 			Username:    pulumi.String("foo"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = artifactory.NewPullReplication(ctx, "foo_rep", &artifactory.PullReplicationArgs{
// 			CronExp:                pulumi.String("0 0 * * * ?"),
// 			EnableEventReplication: pulumi.Bool(true),
// 			RepoKey:                providerTestDest.Key,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Pull replication config can be imported using its repo key, e.g.
//
// ```sh
//  $ pulumi import artifactory:index/pullReplication:PullReplication foo-rep repository-key
// ```
type PullReplication struct {
	pulumi.CustomResourceState

	CronExp                pulumi.StringOutput `pulumi:"cronExp"`
	EnableEventReplication pulumi.BoolOutput   `pulumi:"enableEventReplication"`
	Enabled                pulumi.BoolOutput   `pulumi:"enabled"`
	// If a password is used to create the resource, it will be returned as encrypted and this will become the new
	// state.Practically speaking, what this means is that, the password can only be set, not gotten.
	Password            pulumi.StringOutput    `pulumi:"password"`
	PathPrefix          pulumi.StringPtrOutput `pulumi:"pathPrefix"`
	RepoKey             pulumi.StringOutput    `pulumi:"repoKey"`
	SocketTimeoutMillis pulumi.IntOutput       `pulumi:"socketTimeoutMillis"`
	SyncDeletes         pulumi.BoolOutput      `pulumi:"syncDeletes"`
	SyncProperties      pulumi.BoolOutput      `pulumi:"syncProperties"`
	SyncStatistics      pulumi.BoolOutput      `pulumi:"syncStatistics"`
	Url                 pulumi.StringPtrOutput `pulumi:"url"`
	Username            pulumi.StringPtrOutput `pulumi:"username"`
}

// NewPullReplication registers a new resource with the given unique name, arguments, and options.
func NewPullReplication(ctx *pulumi.Context,
	name string, args *PullReplicationArgs, opts ...pulumi.ResourceOption) (*PullReplication, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CronExp == nil {
		return nil, errors.New("invalid value for required argument 'CronExp'")
	}
	if args.RepoKey == nil {
		return nil, errors.New("invalid value for required argument 'RepoKey'")
	}
	var resource PullReplication
	err := ctx.RegisterResource("artifactory:index/pullReplication:PullReplication", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPullReplication gets an existing PullReplication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPullReplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PullReplicationState, opts ...pulumi.ResourceOption) (*PullReplication, error) {
	var resource PullReplication
	err := ctx.ReadResource("artifactory:index/pullReplication:PullReplication", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PullReplication resources.
type pullReplicationState struct {
	CronExp                *string `pulumi:"cronExp"`
	EnableEventReplication *bool   `pulumi:"enableEventReplication"`
	Enabled                *bool   `pulumi:"enabled"`
	// If a password is used to create the resource, it will be returned as encrypted and this will become the new
	// state.Practically speaking, what this means is that, the password can only be set, not gotten.
	Password            *string `pulumi:"password"`
	PathPrefix          *string `pulumi:"pathPrefix"`
	RepoKey             *string `pulumi:"repoKey"`
	SocketTimeoutMillis *int    `pulumi:"socketTimeoutMillis"`
	SyncDeletes         *bool   `pulumi:"syncDeletes"`
	SyncProperties      *bool   `pulumi:"syncProperties"`
	SyncStatistics      *bool   `pulumi:"syncStatistics"`
	Url                 *string `pulumi:"url"`
	Username            *string `pulumi:"username"`
}

type PullReplicationState struct {
	CronExp                pulumi.StringPtrInput
	EnableEventReplication pulumi.BoolPtrInput
	Enabled                pulumi.BoolPtrInput
	// If a password is used to create the resource, it will be returned as encrypted and this will become the new
	// state.Practically speaking, what this means is that, the password can only be set, not gotten.
	Password            pulumi.StringPtrInput
	PathPrefix          pulumi.StringPtrInput
	RepoKey             pulumi.StringPtrInput
	SocketTimeoutMillis pulumi.IntPtrInput
	SyncDeletes         pulumi.BoolPtrInput
	SyncProperties      pulumi.BoolPtrInput
	SyncStatistics      pulumi.BoolPtrInput
	Url                 pulumi.StringPtrInput
	Username            pulumi.StringPtrInput
}

func (PullReplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*pullReplicationState)(nil)).Elem()
}

type pullReplicationArgs struct {
	CronExp                string  `pulumi:"cronExp"`
	EnableEventReplication *bool   `pulumi:"enableEventReplication"`
	Enabled                *bool   `pulumi:"enabled"`
	PathPrefix             *string `pulumi:"pathPrefix"`
	RepoKey                string  `pulumi:"repoKey"`
	SocketTimeoutMillis    *int    `pulumi:"socketTimeoutMillis"`
	SyncDeletes            *bool   `pulumi:"syncDeletes"`
	SyncProperties         *bool   `pulumi:"syncProperties"`
	SyncStatistics         *bool   `pulumi:"syncStatistics"`
	Url                    *string `pulumi:"url"`
	Username               *string `pulumi:"username"`
}

// The set of arguments for constructing a PullReplication resource.
type PullReplicationArgs struct {
	CronExp                pulumi.StringInput
	EnableEventReplication pulumi.BoolPtrInput
	Enabled                pulumi.BoolPtrInput
	PathPrefix             pulumi.StringPtrInput
	RepoKey                pulumi.StringInput
	SocketTimeoutMillis    pulumi.IntPtrInput
	SyncDeletes            pulumi.BoolPtrInput
	SyncProperties         pulumi.BoolPtrInput
	SyncStatistics         pulumi.BoolPtrInput
	Url                    pulumi.StringPtrInput
	Username               pulumi.StringPtrInput
}

func (PullReplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pullReplicationArgs)(nil)).Elem()
}

type PullReplicationInput interface {
	pulumi.Input

	ToPullReplicationOutput() PullReplicationOutput
	ToPullReplicationOutputWithContext(ctx context.Context) PullReplicationOutput
}

func (*PullReplication) ElementType() reflect.Type {
	return reflect.TypeOf((*PullReplication)(nil))
}

func (i *PullReplication) ToPullReplicationOutput() PullReplicationOutput {
	return i.ToPullReplicationOutputWithContext(context.Background())
}

func (i *PullReplication) ToPullReplicationOutputWithContext(ctx context.Context) PullReplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PullReplicationOutput)
}

func (i *PullReplication) ToPullReplicationPtrOutput() PullReplicationPtrOutput {
	return i.ToPullReplicationPtrOutputWithContext(context.Background())
}

func (i *PullReplication) ToPullReplicationPtrOutputWithContext(ctx context.Context) PullReplicationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PullReplicationPtrOutput)
}

type PullReplicationPtrInput interface {
	pulumi.Input

	ToPullReplicationPtrOutput() PullReplicationPtrOutput
	ToPullReplicationPtrOutputWithContext(ctx context.Context) PullReplicationPtrOutput
}

type pullReplicationPtrType PullReplicationArgs

func (*pullReplicationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PullReplication)(nil))
}

func (i *pullReplicationPtrType) ToPullReplicationPtrOutput() PullReplicationPtrOutput {
	return i.ToPullReplicationPtrOutputWithContext(context.Background())
}

func (i *pullReplicationPtrType) ToPullReplicationPtrOutputWithContext(ctx context.Context) PullReplicationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PullReplicationPtrOutput)
}

// PullReplicationArrayInput is an input type that accepts PullReplicationArray and PullReplicationArrayOutput values.
// You can construct a concrete instance of `PullReplicationArrayInput` via:
//
//          PullReplicationArray{ PullReplicationArgs{...} }
type PullReplicationArrayInput interface {
	pulumi.Input

	ToPullReplicationArrayOutput() PullReplicationArrayOutput
	ToPullReplicationArrayOutputWithContext(context.Context) PullReplicationArrayOutput
}

type PullReplicationArray []PullReplicationInput

func (PullReplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PullReplication)(nil)).Elem()
}

func (i PullReplicationArray) ToPullReplicationArrayOutput() PullReplicationArrayOutput {
	return i.ToPullReplicationArrayOutputWithContext(context.Background())
}

func (i PullReplicationArray) ToPullReplicationArrayOutputWithContext(ctx context.Context) PullReplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PullReplicationArrayOutput)
}

// PullReplicationMapInput is an input type that accepts PullReplicationMap and PullReplicationMapOutput values.
// You can construct a concrete instance of `PullReplicationMapInput` via:
//
//          PullReplicationMap{ "key": PullReplicationArgs{...} }
type PullReplicationMapInput interface {
	pulumi.Input

	ToPullReplicationMapOutput() PullReplicationMapOutput
	ToPullReplicationMapOutputWithContext(context.Context) PullReplicationMapOutput
}

type PullReplicationMap map[string]PullReplicationInput

func (PullReplicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PullReplication)(nil)).Elem()
}

func (i PullReplicationMap) ToPullReplicationMapOutput() PullReplicationMapOutput {
	return i.ToPullReplicationMapOutputWithContext(context.Background())
}

func (i PullReplicationMap) ToPullReplicationMapOutputWithContext(ctx context.Context) PullReplicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PullReplicationMapOutput)
}

type PullReplicationOutput struct{ *pulumi.OutputState }

func (PullReplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PullReplication)(nil))
}

func (o PullReplicationOutput) ToPullReplicationOutput() PullReplicationOutput {
	return o
}

func (o PullReplicationOutput) ToPullReplicationOutputWithContext(ctx context.Context) PullReplicationOutput {
	return o
}

func (o PullReplicationOutput) ToPullReplicationPtrOutput() PullReplicationPtrOutput {
	return o.ToPullReplicationPtrOutputWithContext(context.Background())
}

func (o PullReplicationOutput) ToPullReplicationPtrOutputWithContext(ctx context.Context) PullReplicationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PullReplication) *PullReplication {
		return &v
	}).(PullReplicationPtrOutput)
}

type PullReplicationPtrOutput struct{ *pulumi.OutputState }

func (PullReplicationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PullReplication)(nil))
}

func (o PullReplicationPtrOutput) ToPullReplicationPtrOutput() PullReplicationPtrOutput {
	return o
}

func (o PullReplicationPtrOutput) ToPullReplicationPtrOutputWithContext(ctx context.Context) PullReplicationPtrOutput {
	return o
}

func (o PullReplicationPtrOutput) Elem() PullReplicationOutput {
	return o.ApplyT(func(v *PullReplication) PullReplication {
		if v != nil {
			return *v
		}
		var ret PullReplication
		return ret
	}).(PullReplicationOutput)
}

type PullReplicationArrayOutput struct{ *pulumi.OutputState }

func (PullReplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PullReplication)(nil))
}

func (o PullReplicationArrayOutput) ToPullReplicationArrayOutput() PullReplicationArrayOutput {
	return o
}

func (o PullReplicationArrayOutput) ToPullReplicationArrayOutputWithContext(ctx context.Context) PullReplicationArrayOutput {
	return o
}

func (o PullReplicationArrayOutput) Index(i pulumi.IntInput) PullReplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PullReplication {
		return vs[0].([]PullReplication)[vs[1].(int)]
	}).(PullReplicationOutput)
}

type PullReplicationMapOutput struct{ *pulumi.OutputState }

func (PullReplicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]PullReplication)(nil))
}

func (o PullReplicationMapOutput) ToPullReplicationMapOutput() PullReplicationMapOutput {
	return o
}

func (o PullReplicationMapOutput) ToPullReplicationMapOutputWithContext(ctx context.Context) PullReplicationMapOutput {
	return o
}

func (o PullReplicationMapOutput) MapIndex(k pulumi.StringInput) PullReplicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) PullReplication {
		return vs[0].(map[string]PullReplication)[vs[1].(string)]
	}).(PullReplicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PullReplicationInput)(nil)).Elem(), &PullReplication{})
	pulumi.RegisterInputType(reflect.TypeOf((*PullReplicationPtrInput)(nil)).Elem(), &PullReplication{})
	pulumi.RegisterInputType(reflect.TypeOf((*PullReplicationArrayInput)(nil)).Elem(), PullReplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PullReplicationMapInput)(nil)).Elem(), PullReplicationMap{})
	pulumi.RegisterOutputType(PullReplicationOutput{})
	pulumi.RegisterOutputType(PullReplicationPtrOutput{})
	pulumi.RegisterOutputType(PullReplicationArrayOutput{})
	pulumi.RegisterOutputType(PullReplicationMapOutput{})
}
