// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-artifactory/sdk/v8/go/artifactory/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a virtual Cocoapods repository. Official documentation can be found [here](https://jfrog.com/help/r/jfrog-artifactory-documentation/set-up-virtual-cocoapods-repositories).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-artifactory/sdk/v8/go/artifactory"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := artifactory.NewVirtualCocoapodsRepository(ctx, "foo-cocoapods", &artifactory.VirtualCocoapodsRepositoryArgs{
//				Key:             pulumi.String("foo-cocoapods"),
//				Repositories:    pulumi.StringArray{},
//				Description:     pulumi.String("A test virtual repo"),
//				Notes:           pulumi.String("Internal description"),
//				IncludesPattern: pulumi.String("com/jfrog/**,cloud/jfrog/**"),
//				ExcludesPattern: pulumi.String("com/google/**"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Virtual repositories can be imported using their name, e.g.
//
// ```sh
// $ pulumi import artifactory:index/virtualCocoapodsRepository:VirtualCocoapodsRepository foo-composer foo-cocoapods
// ```
type VirtualCocoapodsRepository struct {
	pulumi.CustomResourceState

	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
	// another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts pulumi.BoolPtrOutput `pulumi:"artifactoryRequestsCanRetrieveRemoteArtifacts"`
	// Default repository to deploy artifacts.
	DefaultDeploymentRepo pulumi.StringPtrOutput `pulumi:"defaultDeploymentRepo"`
	// Public description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**/z/*`.By default no
	// artifacts are excluded.
	ExcludesPattern pulumi.StringPtrOutput `pulumi:"excludesPattern"`
	// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of `x/y/**/z/*`. When
	// used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (`**/*`).
	IncludesPattern pulumi.StringPtrOutput `pulumi:"includesPattern"`
	// A mandatory identifier for the repository that must be unique. It cannot begin with a number or
	// contain spaces or special characters.
	Key pulumi.StringOutput `pulumi:"key"`
	// Internal description.
	Notes               pulumi.StringPtrOutput   `pulumi:"notes"`
	PackageType         pulumi.StringOutput      `pulumi:"packageType"`
	ProjectEnvironments pulumi.StringArrayOutput `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When
	// assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey pulumi.StringPtrOutput `pulumi:"projectKey"`
	// Repository layout key for the virtual repository
	RepoLayoutRef pulumi.StringPtrOutput `pulumi:"repoLayoutRef"`
	// The effective list of actual repositories included in this virtual repository.
	Repositories pulumi.StringArrayOutput `pulumi:"repositories"`
}

// NewVirtualCocoapodsRepository registers a new resource with the given unique name, arguments, and options.
func NewVirtualCocoapodsRepository(ctx *pulumi.Context,
	name string, args *VirtualCocoapodsRepositoryArgs, opts ...pulumi.ResourceOption) (*VirtualCocoapodsRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VirtualCocoapodsRepository
	err := ctx.RegisterResource("artifactory:index/virtualCocoapodsRepository:VirtualCocoapodsRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualCocoapodsRepository gets an existing VirtualCocoapodsRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualCocoapodsRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualCocoapodsRepositoryState, opts ...pulumi.ResourceOption) (*VirtualCocoapodsRepository, error) {
	var resource VirtualCocoapodsRepository
	err := ctx.ReadResource("artifactory:index/virtualCocoapodsRepository:VirtualCocoapodsRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualCocoapodsRepository resources.
type virtualCocoapodsRepositoryState struct {
	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
	// another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts *bool `pulumi:"artifactoryRequestsCanRetrieveRemoteArtifacts"`
	// Default repository to deploy artifacts.
	DefaultDeploymentRepo *string `pulumi:"defaultDeploymentRepo"`
	// Public description.
	Description *string `pulumi:"description"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**/z/*`.By default no
	// artifacts are excluded.
	ExcludesPattern *string `pulumi:"excludesPattern"`
	// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of `x/y/**/z/*`. When
	// used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (`**/*`).
	IncludesPattern *string `pulumi:"includesPattern"`
	// A mandatory identifier for the repository that must be unique. It cannot begin with a number or
	// contain spaces or special characters.
	Key *string `pulumi:"key"`
	// Internal description.
	Notes               *string  `pulumi:"notes"`
	PackageType         *string  `pulumi:"packageType"`
	ProjectEnvironments []string `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When
	// assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey *string `pulumi:"projectKey"`
	// Repository layout key for the virtual repository
	RepoLayoutRef *string `pulumi:"repoLayoutRef"`
	// The effective list of actual repositories included in this virtual repository.
	Repositories []string `pulumi:"repositories"`
}

type VirtualCocoapodsRepositoryState struct {
	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
	// another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts pulumi.BoolPtrInput
	// Default repository to deploy artifacts.
	DefaultDeploymentRepo pulumi.StringPtrInput
	// Public description.
	Description pulumi.StringPtrInput
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**/z/*`.By default no
	// artifacts are excluded.
	ExcludesPattern pulumi.StringPtrInput
	// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of `x/y/**/z/*`. When
	// used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (`**/*`).
	IncludesPattern pulumi.StringPtrInput
	// A mandatory identifier for the repository that must be unique. It cannot begin with a number or
	// contain spaces or special characters.
	Key pulumi.StringPtrInput
	// Internal description.
	Notes               pulumi.StringPtrInput
	PackageType         pulumi.StringPtrInput
	ProjectEnvironments pulumi.StringArrayInput
	// Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When
	// assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey pulumi.StringPtrInput
	// Repository layout key for the virtual repository
	RepoLayoutRef pulumi.StringPtrInput
	// The effective list of actual repositories included in this virtual repository.
	Repositories pulumi.StringArrayInput
}

func (VirtualCocoapodsRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualCocoapodsRepositoryState)(nil)).Elem()
}

type virtualCocoapodsRepositoryArgs struct {
	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
	// another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts *bool `pulumi:"artifactoryRequestsCanRetrieveRemoteArtifacts"`
	// Default repository to deploy artifacts.
	DefaultDeploymentRepo *string `pulumi:"defaultDeploymentRepo"`
	// Public description.
	Description *string `pulumi:"description"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**/z/*`.By default no
	// artifacts are excluded.
	ExcludesPattern *string `pulumi:"excludesPattern"`
	// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of `x/y/**/z/*`. When
	// used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (`**/*`).
	IncludesPattern *string `pulumi:"includesPattern"`
	// A mandatory identifier for the repository that must be unique. It cannot begin with a number or
	// contain spaces or special characters.
	Key string `pulumi:"key"`
	// Internal description.
	Notes               *string  `pulumi:"notes"`
	ProjectEnvironments []string `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When
	// assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey *string `pulumi:"projectKey"`
	// Repository layout key for the virtual repository
	RepoLayoutRef *string `pulumi:"repoLayoutRef"`
	// The effective list of actual repositories included in this virtual repository.
	Repositories []string `pulumi:"repositories"`
}

// The set of arguments for constructing a VirtualCocoapodsRepository resource.
type VirtualCocoapodsRepositoryArgs struct {
	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
	// another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts pulumi.BoolPtrInput
	// Default repository to deploy artifacts.
	DefaultDeploymentRepo pulumi.StringPtrInput
	// Public description.
	Description pulumi.StringPtrInput
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**/z/*`.By default no
	// artifacts are excluded.
	ExcludesPattern pulumi.StringPtrInput
	// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of `x/y/**/z/*`. When
	// used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (`**/*`).
	IncludesPattern pulumi.StringPtrInput
	// A mandatory identifier for the repository that must be unique. It cannot begin with a number or
	// contain spaces or special characters.
	Key pulumi.StringInput
	// Internal description.
	Notes               pulumi.StringPtrInput
	ProjectEnvironments pulumi.StringArrayInput
	// Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When
	// assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey pulumi.StringPtrInput
	// Repository layout key for the virtual repository
	RepoLayoutRef pulumi.StringPtrInput
	// The effective list of actual repositories included in this virtual repository.
	Repositories pulumi.StringArrayInput
}

func (VirtualCocoapodsRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualCocoapodsRepositoryArgs)(nil)).Elem()
}

type VirtualCocoapodsRepositoryInput interface {
	pulumi.Input

	ToVirtualCocoapodsRepositoryOutput() VirtualCocoapodsRepositoryOutput
	ToVirtualCocoapodsRepositoryOutputWithContext(ctx context.Context) VirtualCocoapodsRepositoryOutput
}

func (*VirtualCocoapodsRepository) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualCocoapodsRepository)(nil)).Elem()
}

func (i *VirtualCocoapodsRepository) ToVirtualCocoapodsRepositoryOutput() VirtualCocoapodsRepositoryOutput {
	return i.ToVirtualCocoapodsRepositoryOutputWithContext(context.Background())
}

func (i *VirtualCocoapodsRepository) ToVirtualCocoapodsRepositoryOutputWithContext(ctx context.Context) VirtualCocoapodsRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualCocoapodsRepositoryOutput)
}

// VirtualCocoapodsRepositoryArrayInput is an input type that accepts VirtualCocoapodsRepositoryArray and VirtualCocoapodsRepositoryArrayOutput values.
// You can construct a concrete instance of `VirtualCocoapodsRepositoryArrayInput` via:
//
//	VirtualCocoapodsRepositoryArray{ VirtualCocoapodsRepositoryArgs{...} }
type VirtualCocoapodsRepositoryArrayInput interface {
	pulumi.Input

	ToVirtualCocoapodsRepositoryArrayOutput() VirtualCocoapodsRepositoryArrayOutput
	ToVirtualCocoapodsRepositoryArrayOutputWithContext(context.Context) VirtualCocoapodsRepositoryArrayOutput
}

type VirtualCocoapodsRepositoryArray []VirtualCocoapodsRepositoryInput

func (VirtualCocoapodsRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualCocoapodsRepository)(nil)).Elem()
}

func (i VirtualCocoapodsRepositoryArray) ToVirtualCocoapodsRepositoryArrayOutput() VirtualCocoapodsRepositoryArrayOutput {
	return i.ToVirtualCocoapodsRepositoryArrayOutputWithContext(context.Background())
}

func (i VirtualCocoapodsRepositoryArray) ToVirtualCocoapodsRepositoryArrayOutputWithContext(ctx context.Context) VirtualCocoapodsRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualCocoapodsRepositoryArrayOutput)
}

// VirtualCocoapodsRepositoryMapInput is an input type that accepts VirtualCocoapodsRepositoryMap and VirtualCocoapodsRepositoryMapOutput values.
// You can construct a concrete instance of `VirtualCocoapodsRepositoryMapInput` via:
//
//	VirtualCocoapodsRepositoryMap{ "key": VirtualCocoapodsRepositoryArgs{...} }
type VirtualCocoapodsRepositoryMapInput interface {
	pulumi.Input

	ToVirtualCocoapodsRepositoryMapOutput() VirtualCocoapodsRepositoryMapOutput
	ToVirtualCocoapodsRepositoryMapOutputWithContext(context.Context) VirtualCocoapodsRepositoryMapOutput
}

type VirtualCocoapodsRepositoryMap map[string]VirtualCocoapodsRepositoryInput

func (VirtualCocoapodsRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualCocoapodsRepository)(nil)).Elem()
}

func (i VirtualCocoapodsRepositoryMap) ToVirtualCocoapodsRepositoryMapOutput() VirtualCocoapodsRepositoryMapOutput {
	return i.ToVirtualCocoapodsRepositoryMapOutputWithContext(context.Background())
}

func (i VirtualCocoapodsRepositoryMap) ToVirtualCocoapodsRepositoryMapOutputWithContext(ctx context.Context) VirtualCocoapodsRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualCocoapodsRepositoryMapOutput)
}

type VirtualCocoapodsRepositoryOutput struct{ *pulumi.OutputState }

func (VirtualCocoapodsRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualCocoapodsRepository)(nil)).Elem()
}

func (o VirtualCocoapodsRepositoryOutput) ToVirtualCocoapodsRepositoryOutput() VirtualCocoapodsRepositoryOutput {
	return o
}

func (o VirtualCocoapodsRepositoryOutput) ToVirtualCocoapodsRepositoryOutputWithContext(ctx context.Context) VirtualCocoapodsRepositoryOutput {
	return o
}

// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
// another Artifactory instance.
func (o VirtualCocoapodsRepositoryOutput) ArtifactoryRequestsCanRetrieveRemoteArtifacts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualCocoapodsRepository) pulumi.BoolPtrOutput {
		return v.ArtifactoryRequestsCanRetrieveRemoteArtifacts
	}).(pulumi.BoolPtrOutput)
}

// Default repository to deploy artifacts.
func (o VirtualCocoapodsRepositoryOutput) DefaultDeploymentRepo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualCocoapodsRepository) pulumi.StringPtrOutput { return v.DefaultDeploymentRepo }).(pulumi.StringPtrOutput)
}

// Public description.
func (o VirtualCocoapodsRepositoryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualCocoapodsRepository) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**/z/*`.By default no
// artifacts are excluded.
func (o VirtualCocoapodsRepositoryOutput) ExcludesPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualCocoapodsRepository) pulumi.StringPtrOutput { return v.ExcludesPattern }).(pulumi.StringPtrOutput)
}

// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of `x/y/**/z/*`. When
// used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (`**/*`).
func (o VirtualCocoapodsRepositoryOutput) IncludesPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualCocoapodsRepository) pulumi.StringPtrOutput { return v.IncludesPattern }).(pulumi.StringPtrOutput)
}

// A mandatory identifier for the repository that must be unique. It cannot begin with a number or
// contain spaces or special characters.
func (o VirtualCocoapodsRepositoryOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualCocoapodsRepository) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// Internal description.
func (o VirtualCocoapodsRepositoryOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualCocoapodsRepository) pulumi.StringPtrOutput { return v.Notes }).(pulumi.StringPtrOutput)
}

func (o VirtualCocoapodsRepositoryOutput) PackageType() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualCocoapodsRepository) pulumi.StringOutput { return v.PackageType }).(pulumi.StringOutput)
}

func (o VirtualCocoapodsRepositoryOutput) ProjectEnvironments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualCocoapodsRepository) pulumi.StringArrayOutput { return v.ProjectEnvironments }).(pulumi.StringArrayOutput)
}

// Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When
// assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
func (o VirtualCocoapodsRepositoryOutput) ProjectKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualCocoapodsRepository) pulumi.StringPtrOutput { return v.ProjectKey }).(pulumi.StringPtrOutput)
}

// Repository layout key for the virtual repository
func (o VirtualCocoapodsRepositoryOutput) RepoLayoutRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualCocoapodsRepository) pulumi.StringPtrOutput { return v.RepoLayoutRef }).(pulumi.StringPtrOutput)
}

// The effective list of actual repositories included in this virtual repository.
func (o VirtualCocoapodsRepositoryOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualCocoapodsRepository) pulumi.StringArrayOutput { return v.Repositories }).(pulumi.StringArrayOutput)
}

type VirtualCocoapodsRepositoryArrayOutput struct{ *pulumi.OutputState }

func (VirtualCocoapodsRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualCocoapodsRepository)(nil)).Elem()
}

func (o VirtualCocoapodsRepositoryArrayOutput) ToVirtualCocoapodsRepositoryArrayOutput() VirtualCocoapodsRepositoryArrayOutput {
	return o
}

func (o VirtualCocoapodsRepositoryArrayOutput) ToVirtualCocoapodsRepositoryArrayOutputWithContext(ctx context.Context) VirtualCocoapodsRepositoryArrayOutput {
	return o
}

func (o VirtualCocoapodsRepositoryArrayOutput) Index(i pulumi.IntInput) VirtualCocoapodsRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VirtualCocoapodsRepository {
		return vs[0].([]*VirtualCocoapodsRepository)[vs[1].(int)]
	}).(VirtualCocoapodsRepositoryOutput)
}

type VirtualCocoapodsRepositoryMapOutput struct{ *pulumi.OutputState }

func (VirtualCocoapodsRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualCocoapodsRepository)(nil)).Elem()
}

func (o VirtualCocoapodsRepositoryMapOutput) ToVirtualCocoapodsRepositoryMapOutput() VirtualCocoapodsRepositoryMapOutput {
	return o
}

func (o VirtualCocoapodsRepositoryMapOutput) ToVirtualCocoapodsRepositoryMapOutputWithContext(ctx context.Context) VirtualCocoapodsRepositoryMapOutput {
	return o
}

func (o VirtualCocoapodsRepositoryMapOutput) MapIndex(k pulumi.StringInput) VirtualCocoapodsRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VirtualCocoapodsRepository {
		return vs[0].(map[string]*VirtualCocoapodsRepository)[vs[1].(string)]
	}).(VirtualCocoapodsRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualCocoapodsRepositoryInput)(nil)).Elem(), &VirtualCocoapodsRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualCocoapodsRepositoryArrayInput)(nil)).Elem(), VirtualCocoapodsRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualCocoapodsRepositoryMapInput)(nil)).Elem(), VirtualCocoapodsRepositoryMap{})
	pulumi.RegisterOutputType(VirtualCocoapodsRepositoryOutput{})
	pulumi.RegisterOutputType(VirtualCocoapodsRepositoryArrayOutput{})
	pulumi.RegisterOutputType(VirtualCocoapodsRepositoryMapOutput{})
}
