// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Artifactory Virtual Repository Resource
//
// Provides an Artifactory virtual repository resource. This can be used to create and manage Artifactory virtual repositories.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		bar, err := artifactory.NewLocalRepository(ctx, "bar", &artifactory.LocalRepositoryArgs{
// 			Key:         pulumi.String("bar"),
// 			PackageType: pulumi.String("maven"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		baz, err := artifactory.NewLocalRepository(ctx, "baz", &artifactory.LocalRepositoryArgs{
// 			Key:         pulumi.String("baz"),
// 			PackageType: pulumi.String("maven"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = artifactory.NewVirtualRepository(ctx, "foo", &artifactory.VirtualRepositoryArgs{
// 			Key:         pulumi.String("foo"),
// 			PackageType: pulumi.String("maven"),
// 			Repositories: pulumi.StringArray{
// 				bar.Key,
// 				baz.Key,
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Virtual repositories can be imported using their name, e.g.
//
// ```sh
//  $ pulumi import artifactory:index/virtualRepository:VirtualRepository foo foo
// ```
type VirtualRepository struct {
	pulumi.CustomResourceState

	ArtifactoryRequestsCanRetrieveRemoteArtifacts pulumi.BoolPtrOutput     `pulumi:"artifactoryRequestsCanRetrieveRemoteArtifacts"`
	DebianTrivialLayout                           pulumi.BoolPtrOutput     `pulumi:"debianTrivialLayout"`
	DefaultDeploymentRepo                         pulumi.StringPtrOutput   `pulumi:"defaultDeploymentRepo"`
	Description                                   pulumi.StringPtrOutput   `pulumi:"description"`
	ExcludesPattern                               pulumi.StringPtrOutput   `pulumi:"excludesPattern"`
	ForceNugetAuthentication                      pulumi.BoolOutput        `pulumi:"forceNugetAuthentication"`
	IncludesPattern                               pulumi.StringPtrOutput   `pulumi:"includesPattern"`
	Key                                           pulumi.StringOutput      `pulumi:"key"`
	KeyPair                                       pulumi.StringPtrOutput   `pulumi:"keyPair"`
	Notes                                         pulumi.StringPtrOutput   `pulumi:"notes"`
	PackageType                                   pulumi.StringOutput      `pulumi:"packageType"`
	PomRepositoryReferencesCleanupPolicy          pulumi.StringOutput      `pulumi:"pomRepositoryReferencesCleanupPolicy"`
	RepoLayoutRef                                 pulumi.StringOutput      `pulumi:"repoLayoutRef"`
	Repositories                                  pulumi.StringArrayOutput `pulumi:"repositories"`
}

// NewVirtualRepository registers a new resource with the given unique name, arguments, and options.
func NewVirtualRepository(ctx *pulumi.Context,
	name string, args *VirtualRepositoryArgs, opts ...pulumi.ResourceOption) (*VirtualRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.PackageType == nil {
		return nil, errors.New("invalid value for required argument 'PackageType'")
	}
	if args.Repositories == nil {
		return nil, errors.New("invalid value for required argument 'Repositories'")
	}
	var resource VirtualRepository
	err := ctx.RegisterResource("artifactory:index/virtualRepository:VirtualRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualRepository gets an existing VirtualRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualRepositoryState, opts ...pulumi.ResourceOption) (*VirtualRepository, error) {
	var resource VirtualRepository
	err := ctx.ReadResource("artifactory:index/virtualRepository:VirtualRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualRepository resources.
type virtualRepositoryState struct {
	ArtifactoryRequestsCanRetrieveRemoteArtifacts *bool    `pulumi:"artifactoryRequestsCanRetrieveRemoteArtifacts"`
	DebianTrivialLayout                           *bool    `pulumi:"debianTrivialLayout"`
	DefaultDeploymentRepo                         *string  `pulumi:"defaultDeploymentRepo"`
	Description                                   *string  `pulumi:"description"`
	ExcludesPattern                               *string  `pulumi:"excludesPattern"`
	ForceNugetAuthentication                      *bool    `pulumi:"forceNugetAuthentication"`
	IncludesPattern                               *string  `pulumi:"includesPattern"`
	Key                                           *string  `pulumi:"key"`
	KeyPair                                       *string  `pulumi:"keyPair"`
	Notes                                         *string  `pulumi:"notes"`
	PackageType                                   *string  `pulumi:"packageType"`
	PomRepositoryReferencesCleanupPolicy          *string  `pulumi:"pomRepositoryReferencesCleanupPolicy"`
	RepoLayoutRef                                 *string  `pulumi:"repoLayoutRef"`
	Repositories                                  []string `pulumi:"repositories"`
}

type VirtualRepositoryState struct {
	ArtifactoryRequestsCanRetrieveRemoteArtifacts pulumi.BoolPtrInput
	DebianTrivialLayout                           pulumi.BoolPtrInput
	DefaultDeploymentRepo                         pulumi.StringPtrInput
	Description                                   pulumi.StringPtrInput
	ExcludesPattern                               pulumi.StringPtrInput
	ForceNugetAuthentication                      pulumi.BoolPtrInput
	IncludesPattern                               pulumi.StringPtrInput
	Key                                           pulumi.StringPtrInput
	KeyPair                                       pulumi.StringPtrInput
	Notes                                         pulumi.StringPtrInput
	PackageType                                   pulumi.StringPtrInput
	PomRepositoryReferencesCleanupPolicy          pulumi.StringPtrInput
	RepoLayoutRef                                 pulumi.StringPtrInput
	Repositories                                  pulumi.StringArrayInput
}

func (VirtualRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualRepositoryState)(nil)).Elem()
}

type virtualRepositoryArgs struct {
	ArtifactoryRequestsCanRetrieveRemoteArtifacts *bool    `pulumi:"artifactoryRequestsCanRetrieveRemoteArtifacts"`
	DebianTrivialLayout                           *bool    `pulumi:"debianTrivialLayout"`
	DefaultDeploymentRepo                         *string  `pulumi:"defaultDeploymentRepo"`
	Description                                   *string  `pulumi:"description"`
	ExcludesPattern                               *string  `pulumi:"excludesPattern"`
	ForceNugetAuthentication                      *bool    `pulumi:"forceNugetAuthentication"`
	IncludesPattern                               *string  `pulumi:"includesPattern"`
	Key                                           string   `pulumi:"key"`
	KeyPair                                       *string  `pulumi:"keyPair"`
	Notes                                         *string  `pulumi:"notes"`
	PackageType                                   string   `pulumi:"packageType"`
	PomRepositoryReferencesCleanupPolicy          *string  `pulumi:"pomRepositoryReferencesCleanupPolicy"`
	RepoLayoutRef                                 *string  `pulumi:"repoLayoutRef"`
	Repositories                                  []string `pulumi:"repositories"`
}

// The set of arguments for constructing a VirtualRepository resource.
type VirtualRepositoryArgs struct {
	ArtifactoryRequestsCanRetrieveRemoteArtifacts pulumi.BoolPtrInput
	DebianTrivialLayout                           pulumi.BoolPtrInput
	DefaultDeploymentRepo                         pulumi.StringPtrInput
	Description                                   pulumi.StringPtrInput
	ExcludesPattern                               pulumi.StringPtrInput
	ForceNugetAuthentication                      pulumi.BoolPtrInput
	IncludesPattern                               pulumi.StringPtrInput
	Key                                           pulumi.StringInput
	KeyPair                                       pulumi.StringPtrInput
	Notes                                         pulumi.StringPtrInput
	PackageType                                   pulumi.StringInput
	PomRepositoryReferencesCleanupPolicy          pulumi.StringPtrInput
	RepoLayoutRef                                 pulumi.StringPtrInput
	Repositories                                  pulumi.StringArrayInput
}

func (VirtualRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualRepositoryArgs)(nil)).Elem()
}

type VirtualRepositoryInput interface {
	pulumi.Input

	ToVirtualRepositoryOutput() VirtualRepositoryOutput
	ToVirtualRepositoryOutputWithContext(ctx context.Context) VirtualRepositoryOutput
}

func (*VirtualRepository) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualRepository)(nil))
}

func (i *VirtualRepository) ToVirtualRepositoryOutput() VirtualRepositoryOutput {
	return i.ToVirtualRepositoryOutputWithContext(context.Background())
}

func (i *VirtualRepository) ToVirtualRepositoryOutputWithContext(ctx context.Context) VirtualRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualRepositoryOutput)
}

func (i *VirtualRepository) ToVirtualRepositoryPtrOutput() VirtualRepositoryPtrOutput {
	return i.ToVirtualRepositoryPtrOutputWithContext(context.Background())
}

func (i *VirtualRepository) ToVirtualRepositoryPtrOutputWithContext(ctx context.Context) VirtualRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualRepositoryPtrOutput)
}

type VirtualRepositoryPtrInput interface {
	pulumi.Input

	ToVirtualRepositoryPtrOutput() VirtualRepositoryPtrOutput
	ToVirtualRepositoryPtrOutputWithContext(ctx context.Context) VirtualRepositoryPtrOutput
}

type virtualRepositoryPtrType VirtualRepositoryArgs

func (*virtualRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualRepository)(nil))
}

func (i *virtualRepositoryPtrType) ToVirtualRepositoryPtrOutput() VirtualRepositoryPtrOutput {
	return i.ToVirtualRepositoryPtrOutputWithContext(context.Background())
}

func (i *virtualRepositoryPtrType) ToVirtualRepositoryPtrOutputWithContext(ctx context.Context) VirtualRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualRepositoryPtrOutput)
}

// VirtualRepositoryArrayInput is an input type that accepts VirtualRepositoryArray and VirtualRepositoryArrayOutput values.
// You can construct a concrete instance of `VirtualRepositoryArrayInput` via:
//
//          VirtualRepositoryArray{ VirtualRepositoryArgs{...} }
type VirtualRepositoryArrayInput interface {
	pulumi.Input

	ToVirtualRepositoryArrayOutput() VirtualRepositoryArrayOutput
	ToVirtualRepositoryArrayOutputWithContext(context.Context) VirtualRepositoryArrayOutput
}

type VirtualRepositoryArray []VirtualRepositoryInput

func (VirtualRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualRepository)(nil)).Elem()
}

func (i VirtualRepositoryArray) ToVirtualRepositoryArrayOutput() VirtualRepositoryArrayOutput {
	return i.ToVirtualRepositoryArrayOutputWithContext(context.Background())
}

func (i VirtualRepositoryArray) ToVirtualRepositoryArrayOutputWithContext(ctx context.Context) VirtualRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualRepositoryArrayOutput)
}

// VirtualRepositoryMapInput is an input type that accepts VirtualRepositoryMap and VirtualRepositoryMapOutput values.
// You can construct a concrete instance of `VirtualRepositoryMapInput` via:
//
//          VirtualRepositoryMap{ "key": VirtualRepositoryArgs{...} }
type VirtualRepositoryMapInput interface {
	pulumi.Input

	ToVirtualRepositoryMapOutput() VirtualRepositoryMapOutput
	ToVirtualRepositoryMapOutputWithContext(context.Context) VirtualRepositoryMapOutput
}

type VirtualRepositoryMap map[string]VirtualRepositoryInput

func (VirtualRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualRepository)(nil)).Elem()
}

func (i VirtualRepositoryMap) ToVirtualRepositoryMapOutput() VirtualRepositoryMapOutput {
	return i.ToVirtualRepositoryMapOutputWithContext(context.Background())
}

func (i VirtualRepositoryMap) ToVirtualRepositoryMapOutputWithContext(ctx context.Context) VirtualRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualRepositoryMapOutput)
}

type VirtualRepositoryOutput struct{ *pulumi.OutputState }

func (VirtualRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualRepository)(nil))
}

func (o VirtualRepositoryOutput) ToVirtualRepositoryOutput() VirtualRepositoryOutput {
	return o
}

func (o VirtualRepositoryOutput) ToVirtualRepositoryOutputWithContext(ctx context.Context) VirtualRepositoryOutput {
	return o
}

func (o VirtualRepositoryOutput) ToVirtualRepositoryPtrOutput() VirtualRepositoryPtrOutput {
	return o.ToVirtualRepositoryPtrOutputWithContext(context.Background())
}

func (o VirtualRepositoryOutput) ToVirtualRepositoryPtrOutputWithContext(ctx context.Context) VirtualRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualRepository) *VirtualRepository {
		return &v
	}).(VirtualRepositoryPtrOutput)
}

type VirtualRepositoryPtrOutput struct{ *pulumi.OutputState }

func (VirtualRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualRepository)(nil))
}

func (o VirtualRepositoryPtrOutput) ToVirtualRepositoryPtrOutput() VirtualRepositoryPtrOutput {
	return o
}

func (o VirtualRepositoryPtrOutput) ToVirtualRepositoryPtrOutputWithContext(ctx context.Context) VirtualRepositoryPtrOutput {
	return o
}

func (o VirtualRepositoryPtrOutput) Elem() VirtualRepositoryOutput {
	return o.ApplyT(func(v *VirtualRepository) VirtualRepository {
		if v != nil {
			return *v
		}
		var ret VirtualRepository
		return ret
	}).(VirtualRepositoryOutput)
}

type VirtualRepositoryArrayOutput struct{ *pulumi.OutputState }

func (VirtualRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualRepository)(nil))
}

func (o VirtualRepositoryArrayOutput) ToVirtualRepositoryArrayOutput() VirtualRepositoryArrayOutput {
	return o
}

func (o VirtualRepositoryArrayOutput) ToVirtualRepositoryArrayOutputWithContext(ctx context.Context) VirtualRepositoryArrayOutput {
	return o
}

func (o VirtualRepositoryArrayOutput) Index(i pulumi.IntInput) VirtualRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualRepository {
		return vs[0].([]VirtualRepository)[vs[1].(int)]
	}).(VirtualRepositoryOutput)
}

type VirtualRepositoryMapOutput struct{ *pulumi.OutputState }

func (VirtualRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VirtualRepository)(nil))
}

func (o VirtualRepositoryMapOutput) ToVirtualRepositoryMapOutput() VirtualRepositoryMapOutput {
	return o
}

func (o VirtualRepositoryMapOutput) ToVirtualRepositoryMapOutputWithContext(ctx context.Context) VirtualRepositoryMapOutput {
	return o
}

func (o VirtualRepositoryMapOutput) MapIndex(k pulumi.StringInput) VirtualRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) VirtualRepository {
		return vs[0].(map[string]VirtualRepository)[vs[1].(string)]
	}).(VirtualRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualRepositoryInput)(nil)).Elem(), &VirtualRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualRepositoryPtrInput)(nil)).Elem(), &VirtualRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualRepositoryArrayInput)(nil)).Elem(), VirtualRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualRepositoryMapInput)(nil)).Elem(), VirtualRepositoryMap{})
	pulumi.RegisterOutputType(VirtualRepositoryOutput{})
	pulumi.RegisterOutputType(VirtualRepositoryPtrOutput{})
	pulumi.RegisterOutputType(VirtualRepositoryArrayOutput{})
	pulumi.RegisterOutputType(VirtualRepositoryMapOutput{})
}
