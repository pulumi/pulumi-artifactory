// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Artifactory Federated Chef Repository Resource
//
// Creates a federated Chef repository
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := artifactory.NewFederatedChefRepository(ctx, "terraform-federated-test-chef-repo", &artifactory.FederatedChefRepositoryArgs{
// 			Key: pulumi.String("terraform-federated-test-chef-repo"),
// 			Members: FederatedChefRepositoryMemberArray{
// 				&FederatedChefRepositoryMemberArgs{
// 					Enable: true,
// 					Url:    pulumi.String("http://tempurl.org/artifactory/terraform-federated-test-chef-repo"),
// 				},
// 				&FederatedChefRepositoryMemberArgs{
// 					Enable: true,
// 					Url:    pulumi.String("http://tempurl2.org/artifactory/terraform-federated-test-chef-repo-2"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type FederatedChefRepository struct {
	pulumi.CustomResourceState

	// When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and
	// therefore requires strict content moderation to prevent malicious users from uploading content that may compromise
	// security (e.g., cross-site scripting attacks).
	ArchiveBrowsingEnabled pulumi.BoolPtrOutput   `pulumi:"archiveBrowsingEnabled"`
	BlackedOut             pulumi.BoolPtrOutput   `pulumi:"blackedOut"`
	Description            pulumi.StringPtrOutput `pulumi:"description"`
	DownloadDirect         pulumi.BoolPtrOutput   `pulumi:"downloadDirect"`
	ExcludesPattern        pulumi.StringOutput    `pulumi:"excludesPattern"`
	IncludesPattern        pulumi.StringOutput    `pulumi:"includesPattern"`
	// - the identity key of the repo
	Key pulumi.StringOutput `pulumi:"key"`
	// - The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.
	Members     FederatedChefRepositoryMemberArrayOutput `pulumi:"members"`
	Notes       pulumi.StringPtrOutput                   `pulumi:"notes"`
	PackageType pulumi.StringOutput                      `pulumi:"packageType"`
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution pulumi.BoolPtrOutput `pulumi:"priorityResolution"`
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments pulumi.StringArrayOutput `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed
	// with project key, separated by a dash.
	ProjectKey    pulumi.StringPtrOutput   `pulumi:"projectKey"`
	PropertySets  pulumi.StringArrayOutput `pulumi:"propertySets"`
	RepoLayoutRef pulumi.StringOutput      `pulumi:"repoLayoutRef"`
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
	// Xray settings.
	XrayIndex pulumi.BoolPtrOutput `pulumi:"xrayIndex"`
}

// NewFederatedChefRepository registers a new resource with the given unique name, arguments, and options.
func NewFederatedChefRepository(ctx *pulumi.Context,
	name string, args *FederatedChefRepositoryArgs, opts ...pulumi.ResourceOption) (*FederatedChefRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	var resource FederatedChefRepository
	err := ctx.RegisterResource("artifactory:index/federatedChefRepository:FederatedChefRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFederatedChefRepository gets an existing FederatedChefRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFederatedChefRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FederatedChefRepositoryState, opts ...pulumi.ResourceOption) (*FederatedChefRepository, error) {
	var resource FederatedChefRepository
	err := ctx.ReadResource("artifactory:index/federatedChefRepository:FederatedChefRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FederatedChefRepository resources.
type federatedChefRepositoryState struct {
	// When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and
	// therefore requires strict content moderation to prevent malicious users from uploading content that may compromise
	// security (e.g., cross-site scripting attacks).
	ArchiveBrowsingEnabled *bool   `pulumi:"archiveBrowsingEnabled"`
	BlackedOut             *bool   `pulumi:"blackedOut"`
	Description            *string `pulumi:"description"`
	DownloadDirect         *bool   `pulumi:"downloadDirect"`
	ExcludesPattern        *string `pulumi:"excludesPattern"`
	IncludesPattern        *string `pulumi:"includesPattern"`
	// - the identity key of the repo
	Key *string `pulumi:"key"`
	// - The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.
	Members     []FederatedChefRepositoryMember `pulumi:"members"`
	Notes       *string                         `pulumi:"notes"`
	PackageType *string                         `pulumi:"packageType"`
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution *bool `pulumi:"priorityResolution"`
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments []string `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed
	// with project key, separated by a dash.
	ProjectKey    *string  `pulumi:"projectKey"`
	PropertySets  []string `pulumi:"propertySets"`
	RepoLayoutRef *string  `pulumi:"repoLayoutRef"`
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
	// Xray settings.
	XrayIndex *bool `pulumi:"xrayIndex"`
}

type FederatedChefRepositoryState struct {
	// When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and
	// therefore requires strict content moderation to prevent malicious users from uploading content that may compromise
	// security (e.g., cross-site scripting attacks).
	ArchiveBrowsingEnabled pulumi.BoolPtrInput
	BlackedOut             pulumi.BoolPtrInput
	Description            pulumi.StringPtrInput
	DownloadDirect         pulumi.BoolPtrInput
	ExcludesPattern        pulumi.StringPtrInput
	IncludesPattern        pulumi.StringPtrInput
	// - the identity key of the repo
	Key pulumi.StringPtrInput
	// - The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.
	Members     FederatedChefRepositoryMemberArrayInput
	Notes       pulumi.StringPtrInput
	PackageType pulumi.StringPtrInput
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution pulumi.BoolPtrInput
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments pulumi.StringArrayInput
	// Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed
	// with project key, separated by a dash.
	ProjectKey    pulumi.StringPtrInput
	PropertySets  pulumi.StringArrayInput
	RepoLayoutRef pulumi.StringPtrInput
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
	// Xray settings.
	XrayIndex pulumi.BoolPtrInput
}

func (FederatedChefRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*federatedChefRepositoryState)(nil)).Elem()
}

type federatedChefRepositoryArgs struct {
	// When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and
	// therefore requires strict content moderation to prevent malicious users from uploading content that may compromise
	// security (e.g., cross-site scripting attacks).
	ArchiveBrowsingEnabled *bool   `pulumi:"archiveBrowsingEnabled"`
	BlackedOut             *bool   `pulumi:"blackedOut"`
	Description            *string `pulumi:"description"`
	DownloadDirect         *bool   `pulumi:"downloadDirect"`
	ExcludesPattern        *string `pulumi:"excludesPattern"`
	IncludesPattern        *string `pulumi:"includesPattern"`
	// - the identity key of the repo
	Key string `pulumi:"key"`
	// - The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.
	Members []FederatedChefRepositoryMember `pulumi:"members"`
	Notes   *string                         `pulumi:"notes"`
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution *bool `pulumi:"priorityResolution"`
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments []string `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed
	// with project key, separated by a dash.
	ProjectKey    *string  `pulumi:"projectKey"`
	PropertySets  []string `pulumi:"propertySets"`
	RepoLayoutRef *string  `pulumi:"repoLayoutRef"`
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
	// Xray settings.
	XrayIndex *bool `pulumi:"xrayIndex"`
}

// The set of arguments for constructing a FederatedChefRepository resource.
type FederatedChefRepositoryArgs struct {
	// When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and
	// therefore requires strict content moderation to prevent malicious users from uploading content that may compromise
	// security (e.g., cross-site scripting attacks).
	ArchiveBrowsingEnabled pulumi.BoolPtrInput
	BlackedOut             pulumi.BoolPtrInput
	Description            pulumi.StringPtrInput
	DownloadDirect         pulumi.BoolPtrInput
	ExcludesPattern        pulumi.StringPtrInput
	IncludesPattern        pulumi.StringPtrInput
	// - the identity key of the repo
	Key pulumi.StringInput
	// - The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.
	Members FederatedChefRepositoryMemberArrayInput
	Notes   pulumi.StringPtrInput
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution pulumi.BoolPtrInput
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments pulumi.StringArrayInput
	// Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed
	// with project key, separated by a dash.
	ProjectKey    pulumi.StringPtrInput
	PropertySets  pulumi.StringArrayInput
	RepoLayoutRef pulumi.StringPtrInput
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
	// Xray settings.
	XrayIndex pulumi.BoolPtrInput
}

func (FederatedChefRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*federatedChefRepositoryArgs)(nil)).Elem()
}

type FederatedChefRepositoryInput interface {
	pulumi.Input

	ToFederatedChefRepositoryOutput() FederatedChefRepositoryOutput
	ToFederatedChefRepositoryOutputWithContext(ctx context.Context) FederatedChefRepositoryOutput
}

func (*FederatedChefRepository) ElementType() reflect.Type {
	return reflect.TypeOf((**FederatedChefRepository)(nil)).Elem()
}

func (i *FederatedChefRepository) ToFederatedChefRepositoryOutput() FederatedChefRepositoryOutput {
	return i.ToFederatedChefRepositoryOutputWithContext(context.Background())
}

func (i *FederatedChefRepository) ToFederatedChefRepositoryOutputWithContext(ctx context.Context) FederatedChefRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedChefRepositoryOutput)
}

// FederatedChefRepositoryArrayInput is an input type that accepts FederatedChefRepositoryArray and FederatedChefRepositoryArrayOutput values.
// You can construct a concrete instance of `FederatedChefRepositoryArrayInput` via:
//
//          FederatedChefRepositoryArray{ FederatedChefRepositoryArgs{...} }
type FederatedChefRepositoryArrayInput interface {
	pulumi.Input

	ToFederatedChefRepositoryArrayOutput() FederatedChefRepositoryArrayOutput
	ToFederatedChefRepositoryArrayOutputWithContext(context.Context) FederatedChefRepositoryArrayOutput
}

type FederatedChefRepositoryArray []FederatedChefRepositoryInput

func (FederatedChefRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FederatedChefRepository)(nil)).Elem()
}

func (i FederatedChefRepositoryArray) ToFederatedChefRepositoryArrayOutput() FederatedChefRepositoryArrayOutput {
	return i.ToFederatedChefRepositoryArrayOutputWithContext(context.Background())
}

func (i FederatedChefRepositoryArray) ToFederatedChefRepositoryArrayOutputWithContext(ctx context.Context) FederatedChefRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedChefRepositoryArrayOutput)
}

// FederatedChefRepositoryMapInput is an input type that accepts FederatedChefRepositoryMap and FederatedChefRepositoryMapOutput values.
// You can construct a concrete instance of `FederatedChefRepositoryMapInput` via:
//
//          FederatedChefRepositoryMap{ "key": FederatedChefRepositoryArgs{...} }
type FederatedChefRepositoryMapInput interface {
	pulumi.Input

	ToFederatedChefRepositoryMapOutput() FederatedChefRepositoryMapOutput
	ToFederatedChefRepositoryMapOutputWithContext(context.Context) FederatedChefRepositoryMapOutput
}

type FederatedChefRepositoryMap map[string]FederatedChefRepositoryInput

func (FederatedChefRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FederatedChefRepository)(nil)).Elem()
}

func (i FederatedChefRepositoryMap) ToFederatedChefRepositoryMapOutput() FederatedChefRepositoryMapOutput {
	return i.ToFederatedChefRepositoryMapOutputWithContext(context.Background())
}

func (i FederatedChefRepositoryMap) ToFederatedChefRepositoryMapOutputWithContext(ctx context.Context) FederatedChefRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedChefRepositoryMapOutput)
}

type FederatedChefRepositoryOutput struct{ *pulumi.OutputState }

func (FederatedChefRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FederatedChefRepository)(nil)).Elem()
}

func (o FederatedChefRepositoryOutput) ToFederatedChefRepositoryOutput() FederatedChefRepositoryOutput {
	return o
}

func (o FederatedChefRepositoryOutput) ToFederatedChefRepositoryOutputWithContext(ctx context.Context) FederatedChefRepositoryOutput {
	return o
}

type FederatedChefRepositoryArrayOutput struct{ *pulumi.OutputState }

func (FederatedChefRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FederatedChefRepository)(nil)).Elem()
}

func (o FederatedChefRepositoryArrayOutput) ToFederatedChefRepositoryArrayOutput() FederatedChefRepositoryArrayOutput {
	return o
}

func (o FederatedChefRepositoryArrayOutput) ToFederatedChefRepositoryArrayOutputWithContext(ctx context.Context) FederatedChefRepositoryArrayOutput {
	return o
}

func (o FederatedChefRepositoryArrayOutput) Index(i pulumi.IntInput) FederatedChefRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FederatedChefRepository {
		return vs[0].([]*FederatedChefRepository)[vs[1].(int)]
	}).(FederatedChefRepositoryOutput)
}

type FederatedChefRepositoryMapOutput struct{ *pulumi.OutputState }

func (FederatedChefRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FederatedChefRepository)(nil)).Elem()
}

func (o FederatedChefRepositoryMapOutput) ToFederatedChefRepositoryMapOutput() FederatedChefRepositoryMapOutput {
	return o
}

func (o FederatedChefRepositoryMapOutput) ToFederatedChefRepositoryMapOutputWithContext(ctx context.Context) FederatedChefRepositoryMapOutput {
	return o
}

func (o FederatedChefRepositoryMapOutput) MapIndex(k pulumi.StringInput) FederatedChefRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FederatedChefRepository {
		return vs[0].(map[string]*FederatedChefRepository)[vs[1].(string)]
	}).(FederatedChefRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedChefRepositoryInput)(nil)).Elem(), &FederatedChefRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedChefRepositoryArrayInput)(nil)).Elem(), FederatedChefRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedChefRepositoryMapInput)(nil)).Elem(), FederatedChefRepositoryMap{})
	pulumi.RegisterOutputType(FederatedChefRepositoryOutput{})
	pulumi.RegisterOutputType(FederatedChefRepositoryArrayOutput{})
	pulumi.RegisterOutputType(FederatedChefRepositoryMapOutput{})
}
