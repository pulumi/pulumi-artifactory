// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a virtual Ivy repository.
// Official documentation can be found [here](https://jfrog.com/blog/how-to-set-up-a-private-remote-and-virtual-maven-gradle-registry/).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-artifactory/sdk/v3/go/artifactory"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := artifactory.NewVirtualIvyRepository(ctx, "foo-ivy", &artifactory.VirtualIvyRepositoryArgs{
//				Description:                          pulumi.String("A test virtual repo"),
//				ExcludesPattern:                      pulumi.String("com/google/**"),
//				IncludesPattern:                      pulumi.String("com/jfrog/**,cloud/jfrog/**"),
//				Key:                                  pulumi.String("foo-ivy"),
//				Notes:                                pulumi.String("Internal description"),
//				PomRepositoryReferencesCleanupPolicy: pulumi.String("discard_active_reference"),
//				Repositories:                         pulumi.StringArray{},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Virtual repositories can be imported using their name, e.g.
//
// ```sh
//
//	$ pulumi import artifactory:index/virtualIvyRepository:VirtualIvyRepository foo-ivy foo-ivy
//
// ```
type VirtualIvyRepository struct {
	pulumi.CustomResourceState

	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
	// another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts pulumi.BoolPtrOutput `pulumi:"artifactoryRequestsCanRetrieveRemoteArtifacts"`
	// Default repository to deploy artifacts.
	DefaultDeploymentRepo pulumi.StringPtrOutput `pulumi:"defaultDeploymentRepo"`
	// Public description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
	// artifacts are excluded.
	ExcludesPattern pulumi.StringPtrOutput `pulumi:"excludesPattern"`
	// User authentication is required when accessing the repository. An anonymous request will display an HTTP 401 error. This
	// is also enforced when aggregated repositories support anonymous requests.
	ForceMavenAuthentication pulumi.BoolOutput `pulumi:"forceMavenAuthentication"`
	// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When
	// used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern pulumi.StringPtrOutput `pulumi:"includesPattern"`
	// A mandatory identifier for the repository that must be unique. It cannot begin with a number or
	// contain spaces or special characters.
	Key pulumi.StringOutput `pulumi:"key"`
	// The keypair used to sign artifacts.
	KeyPair pulumi.StringPtrOutput `pulumi:"keyPair"`
	// Internal description.
	Notes       pulumi.StringPtrOutput `pulumi:"notes"`
	PackageType pulumi.StringOutput    `pulumi:"packageType"`
	// - (1: discard_active_reference) Discard Active References - Removes repository elements that are declared directly under project or under a profile in the same POM that is activeByDefault.
	// - (2: discard_any_reference) Discard Any References - Removes all repository elements regardless of whether they are included in an active profile or not.
	// - (3: nothing) Nothing - Does not remove any repository elements declared in the POM.
	PomRepositoryReferencesCleanupPolicy pulumi.StringOutput `pulumi:"pomRepositoryReferencesCleanupPolicy"`
	// Project environment for assigning this repository to. Allow values: "DEV", "PROD", or one of custom environment. Before
	// Artifactory 7.53.1, up to 2 values ("DEV" and "PROD") are allowed. From 7.53.1 onward, only one value is allowed. The
	// attribute should only be used if the repository is already assigned to the existing project. If not, the attribute will
	// be ignored by Artifactory, but will remain in the Terraform state, which will create state drift during the update.
	ProjectEnvironments pulumi.StringArrayOutput `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. Must be 2 - 20 lowercase alphanumeric and hyphen characters. When
	// assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey pulumi.StringPtrOutput `pulumi:"projectKey"`
	// Repository layout key for the local repository
	RepoLayoutRef pulumi.StringPtrOutput `pulumi:"repoLayoutRef"`
	// The effective list of actual repositories included in this virtual repository.
	Repositories pulumi.StringArrayOutput `pulumi:"repositories"`
}

// NewVirtualIvyRepository registers a new resource with the given unique name, arguments, and options.
func NewVirtualIvyRepository(ctx *pulumi.Context,
	name string, args *VirtualIvyRepositoryArgs, opts ...pulumi.ResourceOption) (*VirtualIvyRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	var resource VirtualIvyRepository
	err := ctx.RegisterResource("artifactory:index/virtualIvyRepository:VirtualIvyRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualIvyRepository gets an existing VirtualIvyRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualIvyRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualIvyRepositoryState, opts ...pulumi.ResourceOption) (*VirtualIvyRepository, error) {
	var resource VirtualIvyRepository
	err := ctx.ReadResource("artifactory:index/virtualIvyRepository:VirtualIvyRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualIvyRepository resources.
type virtualIvyRepositoryState struct {
	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
	// another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts *bool `pulumi:"artifactoryRequestsCanRetrieveRemoteArtifacts"`
	// Default repository to deploy artifacts.
	DefaultDeploymentRepo *string `pulumi:"defaultDeploymentRepo"`
	// Public description.
	Description *string `pulumi:"description"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
	// artifacts are excluded.
	ExcludesPattern *string `pulumi:"excludesPattern"`
	// User authentication is required when accessing the repository. An anonymous request will display an HTTP 401 error. This
	// is also enforced when aggregated repositories support anonymous requests.
	ForceMavenAuthentication *bool `pulumi:"forceMavenAuthentication"`
	// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When
	// used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern *string `pulumi:"includesPattern"`
	// A mandatory identifier for the repository that must be unique. It cannot begin with a number or
	// contain spaces or special characters.
	Key *string `pulumi:"key"`
	// The keypair used to sign artifacts.
	KeyPair *string `pulumi:"keyPair"`
	// Internal description.
	Notes       *string `pulumi:"notes"`
	PackageType *string `pulumi:"packageType"`
	// - (1: discard_active_reference) Discard Active References - Removes repository elements that are declared directly under project or under a profile in the same POM that is activeByDefault.
	// - (2: discard_any_reference) Discard Any References - Removes all repository elements regardless of whether they are included in an active profile or not.
	// - (3: nothing) Nothing - Does not remove any repository elements declared in the POM.
	PomRepositoryReferencesCleanupPolicy *string `pulumi:"pomRepositoryReferencesCleanupPolicy"`
	// Project environment for assigning this repository to. Allow values: "DEV", "PROD", or one of custom environment. Before
	// Artifactory 7.53.1, up to 2 values ("DEV" and "PROD") are allowed. From 7.53.1 onward, only one value is allowed. The
	// attribute should only be used if the repository is already assigned to the existing project. If not, the attribute will
	// be ignored by Artifactory, but will remain in the Terraform state, which will create state drift during the update.
	ProjectEnvironments []string `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. Must be 2 - 20 lowercase alphanumeric and hyphen characters. When
	// assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey *string `pulumi:"projectKey"`
	// Repository layout key for the local repository
	RepoLayoutRef *string `pulumi:"repoLayoutRef"`
	// The effective list of actual repositories included in this virtual repository.
	Repositories []string `pulumi:"repositories"`
}

type VirtualIvyRepositoryState struct {
	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
	// another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts pulumi.BoolPtrInput
	// Default repository to deploy artifacts.
	DefaultDeploymentRepo pulumi.StringPtrInput
	// Public description.
	Description pulumi.StringPtrInput
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
	// artifacts are excluded.
	ExcludesPattern pulumi.StringPtrInput
	// User authentication is required when accessing the repository. An anonymous request will display an HTTP 401 error. This
	// is also enforced when aggregated repositories support anonymous requests.
	ForceMavenAuthentication pulumi.BoolPtrInput
	// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When
	// used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern pulumi.StringPtrInput
	// A mandatory identifier for the repository that must be unique. It cannot begin with a number or
	// contain spaces or special characters.
	Key pulumi.StringPtrInput
	// The keypair used to sign artifacts.
	KeyPair pulumi.StringPtrInput
	// Internal description.
	Notes       pulumi.StringPtrInput
	PackageType pulumi.StringPtrInput
	// - (1: discard_active_reference) Discard Active References - Removes repository elements that are declared directly under project or under a profile in the same POM that is activeByDefault.
	// - (2: discard_any_reference) Discard Any References - Removes all repository elements regardless of whether they are included in an active profile or not.
	// - (3: nothing) Nothing - Does not remove any repository elements declared in the POM.
	PomRepositoryReferencesCleanupPolicy pulumi.StringPtrInput
	// Project environment for assigning this repository to. Allow values: "DEV", "PROD", or one of custom environment. Before
	// Artifactory 7.53.1, up to 2 values ("DEV" and "PROD") are allowed. From 7.53.1 onward, only one value is allowed. The
	// attribute should only be used if the repository is already assigned to the existing project. If not, the attribute will
	// be ignored by Artifactory, but will remain in the Terraform state, which will create state drift during the update.
	ProjectEnvironments pulumi.StringArrayInput
	// Project key for assigning this repository to. Must be 2 - 20 lowercase alphanumeric and hyphen characters. When
	// assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey pulumi.StringPtrInput
	// Repository layout key for the local repository
	RepoLayoutRef pulumi.StringPtrInput
	// The effective list of actual repositories included in this virtual repository.
	Repositories pulumi.StringArrayInput
}

func (VirtualIvyRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualIvyRepositoryState)(nil)).Elem()
}

type virtualIvyRepositoryArgs struct {
	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
	// another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts *bool `pulumi:"artifactoryRequestsCanRetrieveRemoteArtifacts"`
	// Default repository to deploy artifacts.
	DefaultDeploymentRepo *string `pulumi:"defaultDeploymentRepo"`
	// Public description.
	Description *string `pulumi:"description"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
	// artifacts are excluded.
	ExcludesPattern *string `pulumi:"excludesPattern"`
	// User authentication is required when accessing the repository. An anonymous request will display an HTTP 401 error. This
	// is also enforced when aggregated repositories support anonymous requests.
	ForceMavenAuthentication *bool `pulumi:"forceMavenAuthentication"`
	// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When
	// used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern *string `pulumi:"includesPattern"`
	// A mandatory identifier for the repository that must be unique. It cannot begin with a number or
	// contain spaces or special characters.
	Key string `pulumi:"key"`
	// The keypair used to sign artifacts.
	KeyPair *string `pulumi:"keyPair"`
	// Internal description.
	Notes *string `pulumi:"notes"`
	// - (1: discard_active_reference) Discard Active References - Removes repository elements that are declared directly under project or under a profile in the same POM that is activeByDefault.
	// - (2: discard_any_reference) Discard Any References - Removes all repository elements regardless of whether they are included in an active profile or not.
	// - (3: nothing) Nothing - Does not remove any repository elements declared in the POM.
	PomRepositoryReferencesCleanupPolicy *string `pulumi:"pomRepositoryReferencesCleanupPolicy"`
	// Project environment for assigning this repository to. Allow values: "DEV", "PROD", or one of custom environment. Before
	// Artifactory 7.53.1, up to 2 values ("DEV" and "PROD") are allowed. From 7.53.1 onward, only one value is allowed. The
	// attribute should only be used if the repository is already assigned to the existing project. If not, the attribute will
	// be ignored by Artifactory, but will remain in the Terraform state, which will create state drift during the update.
	ProjectEnvironments []string `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. Must be 2 - 20 lowercase alphanumeric and hyphen characters. When
	// assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey *string `pulumi:"projectKey"`
	// Repository layout key for the local repository
	RepoLayoutRef *string `pulumi:"repoLayoutRef"`
	// The effective list of actual repositories included in this virtual repository.
	Repositories []string `pulumi:"repositories"`
}

// The set of arguments for constructing a VirtualIvyRepository resource.
type VirtualIvyRepositoryArgs struct {
	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
	// another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts pulumi.BoolPtrInput
	// Default repository to deploy artifacts.
	DefaultDeploymentRepo pulumi.StringPtrInput
	// Public description.
	Description pulumi.StringPtrInput
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
	// artifacts are excluded.
	ExcludesPattern pulumi.StringPtrInput
	// User authentication is required when accessing the repository. An anonymous request will display an HTTP 401 error. This
	// is also enforced when aggregated repositories support anonymous requests.
	ForceMavenAuthentication pulumi.BoolPtrInput
	// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When
	// used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern pulumi.StringPtrInput
	// A mandatory identifier for the repository that must be unique. It cannot begin with a number or
	// contain spaces or special characters.
	Key pulumi.StringInput
	// The keypair used to sign artifacts.
	KeyPair pulumi.StringPtrInput
	// Internal description.
	Notes pulumi.StringPtrInput
	// - (1: discard_active_reference) Discard Active References - Removes repository elements that are declared directly under project or under a profile in the same POM that is activeByDefault.
	// - (2: discard_any_reference) Discard Any References - Removes all repository elements regardless of whether they are included in an active profile or not.
	// - (3: nothing) Nothing - Does not remove any repository elements declared in the POM.
	PomRepositoryReferencesCleanupPolicy pulumi.StringPtrInput
	// Project environment for assigning this repository to. Allow values: "DEV", "PROD", or one of custom environment. Before
	// Artifactory 7.53.1, up to 2 values ("DEV" and "PROD") are allowed. From 7.53.1 onward, only one value is allowed. The
	// attribute should only be used if the repository is already assigned to the existing project. If not, the attribute will
	// be ignored by Artifactory, but will remain in the Terraform state, which will create state drift during the update.
	ProjectEnvironments pulumi.StringArrayInput
	// Project key for assigning this repository to. Must be 2 - 20 lowercase alphanumeric and hyphen characters. When
	// assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey pulumi.StringPtrInput
	// Repository layout key for the local repository
	RepoLayoutRef pulumi.StringPtrInput
	// The effective list of actual repositories included in this virtual repository.
	Repositories pulumi.StringArrayInput
}

func (VirtualIvyRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualIvyRepositoryArgs)(nil)).Elem()
}

type VirtualIvyRepositoryInput interface {
	pulumi.Input

	ToVirtualIvyRepositoryOutput() VirtualIvyRepositoryOutput
	ToVirtualIvyRepositoryOutputWithContext(ctx context.Context) VirtualIvyRepositoryOutput
}

func (*VirtualIvyRepository) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualIvyRepository)(nil)).Elem()
}

func (i *VirtualIvyRepository) ToVirtualIvyRepositoryOutput() VirtualIvyRepositoryOutput {
	return i.ToVirtualIvyRepositoryOutputWithContext(context.Background())
}

func (i *VirtualIvyRepository) ToVirtualIvyRepositoryOutputWithContext(ctx context.Context) VirtualIvyRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualIvyRepositoryOutput)
}

// VirtualIvyRepositoryArrayInput is an input type that accepts VirtualIvyRepositoryArray and VirtualIvyRepositoryArrayOutput values.
// You can construct a concrete instance of `VirtualIvyRepositoryArrayInput` via:
//
//	VirtualIvyRepositoryArray{ VirtualIvyRepositoryArgs{...} }
type VirtualIvyRepositoryArrayInput interface {
	pulumi.Input

	ToVirtualIvyRepositoryArrayOutput() VirtualIvyRepositoryArrayOutput
	ToVirtualIvyRepositoryArrayOutputWithContext(context.Context) VirtualIvyRepositoryArrayOutput
}

type VirtualIvyRepositoryArray []VirtualIvyRepositoryInput

func (VirtualIvyRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualIvyRepository)(nil)).Elem()
}

func (i VirtualIvyRepositoryArray) ToVirtualIvyRepositoryArrayOutput() VirtualIvyRepositoryArrayOutput {
	return i.ToVirtualIvyRepositoryArrayOutputWithContext(context.Background())
}

func (i VirtualIvyRepositoryArray) ToVirtualIvyRepositoryArrayOutputWithContext(ctx context.Context) VirtualIvyRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualIvyRepositoryArrayOutput)
}

// VirtualIvyRepositoryMapInput is an input type that accepts VirtualIvyRepositoryMap and VirtualIvyRepositoryMapOutput values.
// You can construct a concrete instance of `VirtualIvyRepositoryMapInput` via:
//
//	VirtualIvyRepositoryMap{ "key": VirtualIvyRepositoryArgs{...} }
type VirtualIvyRepositoryMapInput interface {
	pulumi.Input

	ToVirtualIvyRepositoryMapOutput() VirtualIvyRepositoryMapOutput
	ToVirtualIvyRepositoryMapOutputWithContext(context.Context) VirtualIvyRepositoryMapOutput
}

type VirtualIvyRepositoryMap map[string]VirtualIvyRepositoryInput

func (VirtualIvyRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualIvyRepository)(nil)).Elem()
}

func (i VirtualIvyRepositoryMap) ToVirtualIvyRepositoryMapOutput() VirtualIvyRepositoryMapOutput {
	return i.ToVirtualIvyRepositoryMapOutputWithContext(context.Background())
}

func (i VirtualIvyRepositoryMap) ToVirtualIvyRepositoryMapOutputWithContext(ctx context.Context) VirtualIvyRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualIvyRepositoryMapOutput)
}

type VirtualIvyRepositoryOutput struct{ *pulumi.OutputState }

func (VirtualIvyRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualIvyRepository)(nil)).Elem()
}

func (o VirtualIvyRepositoryOutput) ToVirtualIvyRepositoryOutput() VirtualIvyRepositoryOutput {
	return o
}

func (o VirtualIvyRepositoryOutput) ToVirtualIvyRepositoryOutputWithContext(ctx context.Context) VirtualIvyRepositoryOutput {
	return o
}

// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
// another Artifactory instance.
func (o VirtualIvyRepositoryOutput) ArtifactoryRequestsCanRetrieveRemoteArtifacts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualIvyRepository) pulumi.BoolPtrOutput {
		return v.ArtifactoryRequestsCanRetrieveRemoteArtifacts
	}).(pulumi.BoolPtrOutput)
}

// Default repository to deploy artifacts.
func (o VirtualIvyRepositoryOutput) DefaultDeploymentRepo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualIvyRepository) pulumi.StringPtrOutput { return v.DefaultDeploymentRepo }).(pulumi.StringPtrOutput)
}

// Public description.
func (o VirtualIvyRepositoryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualIvyRepository) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
// artifacts are excluded.
func (o VirtualIvyRepositoryOutput) ExcludesPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualIvyRepository) pulumi.StringPtrOutput { return v.ExcludesPattern }).(pulumi.StringPtrOutput)
}

// User authentication is required when accessing the repository. An anonymous request will display an HTTP 401 error. This
// is also enforced when aggregated repositories support anonymous requests.
func (o VirtualIvyRepositoryOutput) ForceMavenAuthentication() pulumi.BoolOutput {
	return o.ApplyT(func(v *VirtualIvyRepository) pulumi.BoolOutput { return v.ForceMavenAuthentication }).(pulumi.BoolOutput)
}

// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When
// used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
func (o VirtualIvyRepositoryOutput) IncludesPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualIvyRepository) pulumi.StringPtrOutput { return v.IncludesPattern }).(pulumi.StringPtrOutput)
}

// A mandatory identifier for the repository that must be unique. It cannot begin with a number or
// contain spaces or special characters.
func (o VirtualIvyRepositoryOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualIvyRepository) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// The keypair used to sign artifacts.
func (o VirtualIvyRepositoryOutput) KeyPair() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualIvyRepository) pulumi.StringPtrOutput { return v.KeyPair }).(pulumi.StringPtrOutput)
}

// Internal description.
func (o VirtualIvyRepositoryOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualIvyRepository) pulumi.StringPtrOutput { return v.Notes }).(pulumi.StringPtrOutput)
}

func (o VirtualIvyRepositoryOutput) PackageType() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualIvyRepository) pulumi.StringOutput { return v.PackageType }).(pulumi.StringOutput)
}

// - (1: discard_active_reference) Discard Active References - Removes repository elements that are declared directly under project or under a profile in the same POM that is activeByDefault.
// - (2: discard_any_reference) Discard Any References - Removes all repository elements regardless of whether they are included in an active profile or not.
// - (3: nothing) Nothing - Does not remove any repository elements declared in the POM.
func (o VirtualIvyRepositoryOutput) PomRepositoryReferencesCleanupPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualIvyRepository) pulumi.StringOutput { return v.PomRepositoryReferencesCleanupPolicy }).(pulumi.StringOutput)
}

// Project environment for assigning this repository to. Allow values: "DEV", "PROD", or one of custom environment. Before
// Artifactory 7.53.1, up to 2 values ("DEV" and "PROD") are allowed. From 7.53.1 onward, only one value is allowed. The
// attribute should only be used if the repository is already assigned to the existing project. If not, the attribute will
// be ignored by Artifactory, but will remain in the Terraform state, which will create state drift during the update.
func (o VirtualIvyRepositoryOutput) ProjectEnvironments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualIvyRepository) pulumi.StringArrayOutput { return v.ProjectEnvironments }).(pulumi.StringArrayOutput)
}

// Project key for assigning this repository to. Must be 2 - 20 lowercase alphanumeric and hyphen characters. When
// assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
func (o VirtualIvyRepositoryOutput) ProjectKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualIvyRepository) pulumi.StringPtrOutput { return v.ProjectKey }).(pulumi.StringPtrOutput)
}

// Repository layout key for the local repository
func (o VirtualIvyRepositoryOutput) RepoLayoutRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualIvyRepository) pulumi.StringPtrOutput { return v.RepoLayoutRef }).(pulumi.StringPtrOutput)
}

// The effective list of actual repositories included in this virtual repository.
func (o VirtualIvyRepositoryOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualIvyRepository) pulumi.StringArrayOutput { return v.Repositories }).(pulumi.StringArrayOutput)
}

type VirtualIvyRepositoryArrayOutput struct{ *pulumi.OutputState }

func (VirtualIvyRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualIvyRepository)(nil)).Elem()
}

func (o VirtualIvyRepositoryArrayOutput) ToVirtualIvyRepositoryArrayOutput() VirtualIvyRepositoryArrayOutput {
	return o
}

func (o VirtualIvyRepositoryArrayOutput) ToVirtualIvyRepositoryArrayOutputWithContext(ctx context.Context) VirtualIvyRepositoryArrayOutput {
	return o
}

func (o VirtualIvyRepositoryArrayOutput) Index(i pulumi.IntInput) VirtualIvyRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VirtualIvyRepository {
		return vs[0].([]*VirtualIvyRepository)[vs[1].(int)]
	}).(VirtualIvyRepositoryOutput)
}

type VirtualIvyRepositoryMapOutput struct{ *pulumi.OutputState }

func (VirtualIvyRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualIvyRepository)(nil)).Elem()
}

func (o VirtualIvyRepositoryMapOutput) ToVirtualIvyRepositoryMapOutput() VirtualIvyRepositoryMapOutput {
	return o
}

func (o VirtualIvyRepositoryMapOutput) ToVirtualIvyRepositoryMapOutputWithContext(ctx context.Context) VirtualIvyRepositoryMapOutput {
	return o
}

func (o VirtualIvyRepositoryMapOutput) MapIndex(k pulumi.StringInput) VirtualIvyRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VirtualIvyRepository {
		return vs[0].(map[string]*VirtualIvyRepository)[vs[1].(string)]
	}).(VirtualIvyRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualIvyRepositoryInput)(nil)).Elem(), &VirtualIvyRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualIvyRepositoryArrayInput)(nil)).Elem(), VirtualIvyRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualIvyRepositoryMapInput)(nil)).Elem(), VirtualIvyRepositoryMap{})
	pulumi.RegisterOutputType(VirtualIvyRepositoryOutput{})
	pulumi.RegisterOutputType(VirtualIvyRepositoryArrayOutput{})
	pulumi.RegisterOutputType(VirtualIvyRepositoryMapOutput{})
}
