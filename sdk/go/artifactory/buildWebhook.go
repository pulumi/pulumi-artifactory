// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Artifactory Build Webhook Resource
//
// Provides an Artifactory webhook resource. This can be used to register and manage Artifactory webhook subscription which enables you to be notified or notify other users when such events take place in Artifactory.
//
// ## Example Usage
//
// .
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-artifactory/sdk/v2/go/artifactory"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := artifactory.NewBuildWebhook(ctx, "build-webhook", &artifactory.BuildWebhookArgs{
// 			Criteria: &BuildWebhookCriteriaArgs{
// 				AnyBuild: pulumi.Bool(true),
// 				ExcludePatterns: pulumi.StringArray{
// 					pulumi.String("bar/**"),
// 				},
// 				IncludePatterns: pulumi.StringArray{
// 					pulumi.String("foo/**"),
// 				},
// 				SelectedBuilds: pulumi.StringArray{
// 					pulumi.String("build-id"),
// 				},
// 			},
// 			CustomHttpHeaders: pulumi.StringMap{
// 				"header-1": pulumi.String("value-1"),
// 				"header-2": pulumi.String("value-2"),
// 			},
// 			EventTypes: pulumi.StringArray{
// 				pulumi.String("uploaded"),
// 				pulumi.String("deleted"),
// 				pulumi.String("promoted"),
// 			},
// 			Key:    pulumi.String("build-webhook"),
// 			Proxy:  pulumi.String("proxy-key"),
// 			Secret: pulumi.String("some-secret"),
// 			Url:    pulumi.String("http://tempurl.org/webhook"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type BuildWebhook struct {
	pulumi.CustomResourceState

	// Specifies where the webhook will be applied on which repositories.
	Criteria BuildWebhookCriteriaOutput `pulumi:"criteria"`
	// Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
	CustomHttpHeaders pulumi.StringMapOutput `pulumi:"customHttpHeaders"`
	// Webhook description. Max length 1000 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Status of webhook. Default to 'true'
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow values: "uploaded", "deleted", "promoted"
	EventTypes pulumi.StringArrayOutput `pulumi:"eventTypes"`
	// The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.
	Key pulumi.StringOutput `pulumi:"key"`
	// Proxy key from Artifactory Proxies setting
	Proxy pulumi.StringPtrOutput `pulumi:"proxy"`
	// Secret authentication token that will be sent to the configured URL
	Secret pulumi.StringPtrOutput `pulumi:"secret"`
	// Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewBuildWebhook registers a new resource with the given unique name, arguments, and options.
func NewBuildWebhook(ctx *pulumi.Context,
	name string, args *BuildWebhookArgs, opts ...pulumi.ResourceOption) (*BuildWebhook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Criteria == nil {
		return nil, errors.New("invalid value for required argument 'Criteria'")
	}
	if args.EventTypes == nil {
		return nil, errors.New("invalid value for required argument 'EventTypes'")
	}
	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	var resource BuildWebhook
	err := ctx.RegisterResource("artifactory:index/buildWebhook:BuildWebhook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBuildWebhook gets an existing BuildWebhook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBuildWebhook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BuildWebhookState, opts ...pulumi.ResourceOption) (*BuildWebhook, error) {
	var resource BuildWebhook
	err := ctx.ReadResource("artifactory:index/buildWebhook:BuildWebhook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BuildWebhook resources.
type buildWebhookState struct {
	// Specifies where the webhook will be applied on which repositories.
	Criteria *BuildWebhookCriteria `pulumi:"criteria"`
	// Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
	CustomHttpHeaders map[string]string `pulumi:"customHttpHeaders"`
	// Webhook description. Max length 1000 characters.
	Description *string `pulumi:"description"`
	// Status of webhook. Default to 'true'
	Enabled *bool `pulumi:"enabled"`
	// List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow values: "uploaded", "deleted", "promoted"
	EventTypes []string `pulumi:"eventTypes"`
	// The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.
	Key *string `pulumi:"key"`
	// Proxy key from Artifactory Proxies setting
	Proxy *string `pulumi:"proxy"`
	// Secret authentication token that will be sent to the configured URL
	Secret *string `pulumi:"secret"`
	// Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
	Url *string `pulumi:"url"`
}

type BuildWebhookState struct {
	// Specifies where the webhook will be applied on which repositories.
	Criteria BuildWebhookCriteriaPtrInput
	// Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
	CustomHttpHeaders pulumi.StringMapInput
	// Webhook description. Max length 1000 characters.
	Description pulumi.StringPtrInput
	// Status of webhook. Default to 'true'
	Enabled pulumi.BoolPtrInput
	// List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow values: "uploaded", "deleted", "promoted"
	EventTypes pulumi.StringArrayInput
	// The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.
	Key pulumi.StringPtrInput
	// Proxy key from Artifactory Proxies setting
	Proxy pulumi.StringPtrInput
	// Secret authentication token that will be sent to the configured URL
	Secret pulumi.StringPtrInput
	// Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
	Url pulumi.StringPtrInput
}

func (BuildWebhookState) ElementType() reflect.Type {
	return reflect.TypeOf((*buildWebhookState)(nil)).Elem()
}

type buildWebhookArgs struct {
	// Specifies where the webhook will be applied on which repositories.
	Criteria BuildWebhookCriteria `pulumi:"criteria"`
	// Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
	CustomHttpHeaders map[string]string `pulumi:"customHttpHeaders"`
	// Webhook description. Max length 1000 characters.
	Description *string `pulumi:"description"`
	// Status of webhook. Default to 'true'
	Enabled *bool `pulumi:"enabled"`
	// List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow values: "uploaded", "deleted", "promoted"
	EventTypes []string `pulumi:"eventTypes"`
	// The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.
	Key string `pulumi:"key"`
	// Proxy key from Artifactory Proxies setting
	Proxy *string `pulumi:"proxy"`
	// Secret authentication token that will be sent to the configured URL
	Secret *string `pulumi:"secret"`
	// Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a BuildWebhook resource.
type BuildWebhookArgs struct {
	// Specifies where the webhook will be applied on which repositories.
	Criteria BuildWebhookCriteriaInput
	// Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
	CustomHttpHeaders pulumi.StringMapInput
	// Webhook description. Max length 1000 characters.
	Description pulumi.StringPtrInput
	// Status of webhook. Default to 'true'
	Enabled pulumi.BoolPtrInput
	// List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow values: "uploaded", "deleted", "promoted"
	EventTypes pulumi.StringArrayInput
	// The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.
	Key pulumi.StringInput
	// Proxy key from Artifactory Proxies setting
	Proxy pulumi.StringPtrInput
	// Secret authentication token that will be sent to the configured URL
	Secret pulumi.StringPtrInput
	// Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
	Url pulumi.StringInput
}

func (BuildWebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*buildWebhookArgs)(nil)).Elem()
}

type BuildWebhookInput interface {
	pulumi.Input

	ToBuildWebhookOutput() BuildWebhookOutput
	ToBuildWebhookOutputWithContext(ctx context.Context) BuildWebhookOutput
}

func (*BuildWebhook) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildWebhook)(nil)).Elem()
}

func (i *BuildWebhook) ToBuildWebhookOutput() BuildWebhookOutput {
	return i.ToBuildWebhookOutputWithContext(context.Background())
}

func (i *BuildWebhook) ToBuildWebhookOutputWithContext(ctx context.Context) BuildWebhookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildWebhookOutput)
}

// BuildWebhookArrayInput is an input type that accepts BuildWebhookArray and BuildWebhookArrayOutput values.
// You can construct a concrete instance of `BuildWebhookArrayInput` via:
//
//          BuildWebhookArray{ BuildWebhookArgs{...} }
type BuildWebhookArrayInput interface {
	pulumi.Input

	ToBuildWebhookArrayOutput() BuildWebhookArrayOutput
	ToBuildWebhookArrayOutputWithContext(context.Context) BuildWebhookArrayOutput
}

type BuildWebhookArray []BuildWebhookInput

func (BuildWebhookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BuildWebhook)(nil)).Elem()
}

func (i BuildWebhookArray) ToBuildWebhookArrayOutput() BuildWebhookArrayOutput {
	return i.ToBuildWebhookArrayOutputWithContext(context.Background())
}

func (i BuildWebhookArray) ToBuildWebhookArrayOutputWithContext(ctx context.Context) BuildWebhookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildWebhookArrayOutput)
}

// BuildWebhookMapInput is an input type that accepts BuildWebhookMap and BuildWebhookMapOutput values.
// You can construct a concrete instance of `BuildWebhookMapInput` via:
//
//          BuildWebhookMap{ "key": BuildWebhookArgs{...} }
type BuildWebhookMapInput interface {
	pulumi.Input

	ToBuildWebhookMapOutput() BuildWebhookMapOutput
	ToBuildWebhookMapOutputWithContext(context.Context) BuildWebhookMapOutput
}

type BuildWebhookMap map[string]BuildWebhookInput

func (BuildWebhookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BuildWebhook)(nil)).Elem()
}

func (i BuildWebhookMap) ToBuildWebhookMapOutput() BuildWebhookMapOutput {
	return i.ToBuildWebhookMapOutputWithContext(context.Background())
}

func (i BuildWebhookMap) ToBuildWebhookMapOutputWithContext(ctx context.Context) BuildWebhookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildWebhookMapOutput)
}

type BuildWebhookOutput struct{ *pulumi.OutputState }

func (BuildWebhookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildWebhook)(nil)).Elem()
}

func (o BuildWebhookOutput) ToBuildWebhookOutput() BuildWebhookOutput {
	return o
}

func (o BuildWebhookOutput) ToBuildWebhookOutputWithContext(ctx context.Context) BuildWebhookOutput {
	return o
}

type BuildWebhookArrayOutput struct{ *pulumi.OutputState }

func (BuildWebhookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BuildWebhook)(nil)).Elem()
}

func (o BuildWebhookArrayOutput) ToBuildWebhookArrayOutput() BuildWebhookArrayOutput {
	return o
}

func (o BuildWebhookArrayOutput) ToBuildWebhookArrayOutputWithContext(ctx context.Context) BuildWebhookArrayOutput {
	return o
}

func (o BuildWebhookArrayOutput) Index(i pulumi.IntInput) BuildWebhookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BuildWebhook {
		return vs[0].([]*BuildWebhook)[vs[1].(int)]
	}).(BuildWebhookOutput)
}

type BuildWebhookMapOutput struct{ *pulumi.OutputState }

func (BuildWebhookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BuildWebhook)(nil)).Elem()
}

func (o BuildWebhookMapOutput) ToBuildWebhookMapOutput() BuildWebhookMapOutput {
	return o
}

func (o BuildWebhookMapOutput) ToBuildWebhookMapOutputWithContext(ctx context.Context) BuildWebhookMapOutput {
	return o
}

func (o BuildWebhookMapOutput) MapIndex(k pulumi.StringInput) BuildWebhookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BuildWebhook {
		return vs[0].(map[string]*BuildWebhook)[vs[1].(string)]
	}).(BuildWebhookOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BuildWebhookInput)(nil)).Elem(), &BuildWebhook{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildWebhookArrayInput)(nil)).Elem(), BuildWebhookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildWebhookMapInput)(nil)).Elem(), BuildWebhookMap{})
	pulumi.RegisterOutputType(BuildWebhookOutput{})
	pulumi.RegisterOutputType(BuildWebhookArrayOutput{})
	pulumi.RegisterOutputType(BuildWebhookMapOutput{})
}
