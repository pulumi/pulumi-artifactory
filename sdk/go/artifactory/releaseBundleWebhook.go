// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ReleaseBundleWebhook struct {
	pulumi.CustomResourceState

	// Specifies where the webhook will be applied, on which release bundles or distributions.
	Criteria ReleaseBundleWebhookCriteriaOutput `pulumi:"criteria"`
	// Description of webhook. Max length 1000 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Status of webhook. Default to 'true'
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow
	// values: created, signed, deleted
	EventTypes pulumi.StringArrayOutput               `pulumi:"eventTypes"`
	Handlers   ReleaseBundleWebhookHandlerArrayOutput `pulumi:"handlers"`
	// Key of webhook. Must be between 2 and 200 characters. Cannot contain spaces.
	Key pulumi.StringOutput `pulumi:"key"`
}

// NewReleaseBundleWebhook registers a new resource with the given unique name, arguments, and options.
func NewReleaseBundleWebhook(ctx *pulumi.Context,
	name string, args *ReleaseBundleWebhookArgs, opts ...pulumi.ResourceOption) (*ReleaseBundleWebhook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Criteria == nil {
		return nil, errors.New("invalid value for required argument 'Criteria'")
	}
	if args.EventTypes == nil {
		return nil, errors.New("invalid value for required argument 'EventTypes'")
	}
	if args.Handlers == nil {
		return nil, errors.New("invalid value for required argument 'Handlers'")
	}
	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	var resource ReleaseBundleWebhook
	err := ctx.RegisterResource("artifactory:index/releaseBundleWebhook:ReleaseBundleWebhook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReleaseBundleWebhook gets an existing ReleaseBundleWebhook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReleaseBundleWebhook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReleaseBundleWebhookState, opts ...pulumi.ResourceOption) (*ReleaseBundleWebhook, error) {
	var resource ReleaseBundleWebhook
	err := ctx.ReadResource("artifactory:index/releaseBundleWebhook:ReleaseBundleWebhook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReleaseBundleWebhook resources.
type releaseBundleWebhookState struct {
	// Specifies where the webhook will be applied, on which release bundles or distributions.
	Criteria *ReleaseBundleWebhookCriteria `pulumi:"criteria"`
	// Description of webhook. Max length 1000 characters.
	Description *string `pulumi:"description"`
	// Status of webhook. Default to 'true'
	Enabled *bool `pulumi:"enabled"`
	// List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow
	// values: created, signed, deleted
	EventTypes []string                      `pulumi:"eventTypes"`
	Handlers   []ReleaseBundleWebhookHandler `pulumi:"handlers"`
	// Key of webhook. Must be between 2 and 200 characters. Cannot contain spaces.
	Key *string `pulumi:"key"`
}

type ReleaseBundleWebhookState struct {
	// Specifies where the webhook will be applied, on which release bundles or distributions.
	Criteria ReleaseBundleWebhookCriteriaPtrInput
	// Description of webhook. Max length 1000 characters.
	Description pulumi.StringPtrInput
	// Status of webhook. Default to 'true'
	Enabled pulumi.BoolPtrInput
	// List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow
	// values: created, signed, deleted
	EventTypes pulumi.StringArrayInput
	Handlers   ReleaseBundleWebhookHandlerArrayInput
	// Key of webhook. Must be between 2 and 200 characters. Cannot contain spaces.
	Key pulumi.StringPtrInput
}

func (ReleaseBundleWebhookState) ElementType() reflect.Type {
	return reflect.TypeOf((*releaseBundleWebhookState)(nil)).Elem()
}

type releaseBundleWebhookArgs struct {
	// Specifies where the webhook will be applied, on which release bundles or distributions.
	Criteria ReleaseBundleWebhookCriteria `pulumi:"criteria"`
	// Description of webhook. Max length 1000 characters.
	Description *string `pulumi:"description"`
	// Status of webhook. Default to 'true'
	Enabled *bool `pulumi:"enabled"`
	// List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow
	// values: created, signed, deleted
	EventTypes []string                      `pulumi:"eventTypes"`
	Handlers   []ReleaseBundleWebhookHandler `pulumi:"handlers"`
	// Key of webhook. Must be between 2 and 200 characters. Cannot contain spaces.
	Key string `pulumi:"key"`
}

// The set of arguments for constructing a ReleaseBundleWebhook resource.
type ReleaseBundleWebhookArgs struct {
	// Specifies where the webhook will be applied, on which release bundles or distributions.
	Criteria ReleaseBundleWebhookCriteriaInput
	// Description of webhook. Max length 1000 characters.
	Description pulumi.StringPtrInput
	// Status of webhook. Default to 'true'
	Enabled pulumi.BoolPtrInput
	// List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow
	// values: created, signed, deleted
	EventTypes pulumi.StringArrayInput
	Handlers   ReleaseBundleWebhookHandlerArrayInput
	// Key of webhook. Must be between 2 and 200 characters. Cannot contain spaces.
	Key pulumi.StringInput
}

func (ReleaseBundleWebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*releaseBundleWebhookArgs)(nil)).Elem()
}

type ReleaseBundleWebhookInput interface {
	pulumi.Input

	ToReleaseBundleWebhookOutput() ReleaseBundleWebhookOutput
	ToReleaseBundleWebhookOutputWithContext(ctx context.Context) ReleaseBundleWebhookOutput
}

func (*ReleaseBundleWebhook) ElementType() reflect.Type {
	return reflect.TypeOf((**ReleaseBundleWebhook)(nil)).Elem()
}

func (i *ReleaseBundleWebhook) ToReleaseBundleWebhookOutput() ReleaseBundleWebhookOutput {
	return i.ToReleaseBundleWebhookOutputWithContext(context.Background())
}

func (i *ReleaseBundleWebhook) ToReleaseBundleWebhookOutputWithContext(ctx context.Context) ReleaseBundleWebhookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseBundleWebhookOutput)
}

// ReleaseBundleWebhookArrayInput is an input type that accepts ReleaseBundleWebhookArray and ReleaseBundleWebhookArrayOutput values.
// You can construct a concrete instance of `ReleaseBundleWebhookArrayInput` via:
//
//	ReleaseBundleWebhookArray{ ReleaseBundleWebhookArgs{...} }
type ReleaseBundleWebhookArrayInput interface {
	pulumi.Input

	ToReleaseBundleWebhookArrayOutput() ReleaseBundleWebhookArrayOutput
	ToReleaseBundleWebhookArrayOutputWithContext(context.Context) ReleaseBundleWebhookArrayOutput
}

type ReleaseBundleWebhookArray []ReleaseBundleWebhookInput

func (ReleaseBundleWebhookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReleaseBundleWebhook)(nil)).Elem()
}

func (i ReleaseBundleWebhookArray) ToReleaseBundleWebhookArrayOutput() ReleaseBundleWebhookArrayOutput {
	return i.ToReleaseBundleWebhookArrayOutputWithContext(context.Background())
}

func (i ReleaseBundleWebhookArray) ToReleaseBundleWebhookArrayOutputWithContext(ctx context.Context) ReleaseBundleWebhookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseBundleWebhookArrayOutput)
}

// ReleaseBundleWebhookMapInput is an input type that accepts ReleaseBundleWebhookMap and ReleaseBundleWebhookMapOutput values.
// You can construct a concrete instance of `ReleaseBundleWebhookMapInput` via:
//
//	ReleaseBundleWebhookMap{ "key": ReleaseBundleWebhookArgs{...} }
type ReleaseBundleWebhookMapInput interface {
	pulumi.Input

	ToReleaseBundleWebhookMapOutput() ReleaseBundleWebhookMapOutput
	ToReleaseBundleWebhookMapOutputWithContext(context.Context) ReleaseBundleWebhookMapOutput
}

type ReleaseBundleWebhookMap map[string]ReleaseBundleWebhookInput

func (ReleaseBundleWebhookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReleaseBundleWebhook)(nil)).Elem()
}

func (i ReleaseBundleWebhookMap) ToReleaseBundleWebhookMapOutput() ReleaseBundleWebhookMapOutput {
	return i.ToReleaseBundleWebhookMapOutputWithContext(context.Background())
}

func (i ReleaseBundleWebhookMap) ToReleaseBundleWebhookMapOutputWithContext(ctx context.Context) ReleaseBundleWebhookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseBundleWebhookMapOutput)
}

type ReleaseBundleWebhookOutput struct{ *pulumi.OutputState }

func (ReleaseBundleWebhookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReleaseBundleWebhook)(nil)).Elem()
}

func (o ReleaseBundleWebhookOutput) ToReleaseBundleWebhookOutput() ReleaseBundleWebhookOutput {
	return o
}

func (o ReleaseBundleWebhookOutput) ToReleaseBundleWebhookOutputWithContext(ctx context.Context) ReleaseBundleWebhookOutput {
	return o
}

// Specifies where the webhook will be applied, on which release bundles or distributions.
func (o ReleaseBundleWebhookOutput) Criteria() ReleaseBundleWebhookCriteriaOutput {
	return o.ApplyT(func(v *ReleaseBundleWebhook) ReleaseBundleWebhookCriteriaOutput { return v.Criteria }).(ReleaseBundleWebhookCriteriaOutput)
}

// Description of webhook. Max length 1000 characters.
func (o ReleaseBundleWebhookOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReleaseBundleWebhook) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Status of webhook. Default to 'true'
func (o ReleaseBundleWebhookOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReleaseBundleWebhook) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow
// values: created, signed, deleted
func (o ReleaseBundleWebhookOutput) EventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReleaseBundleWebhook) pulumi.StringArrayOutput { return v.EventTypes }).(pulumi.StringArrayOutput)
}

func (o ReleaseBundleWebhookOutput) Handlers() ReleaseBundleWebhookHandlerArrayOutput {
	return o.ApplyT(func(v *ReleaseBundleWebhook) ReleaseBundleWebhookHandlerArrayOutput { return v.Handlers }).(ReleaseBundleWebhookHandlerArrayOutput)
}

// Key of webhook. Must be between 2 and 200 characters. Cannot contain spaces.
func (o ReleaseBundleWebhookOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *ReleaseBundleWebhook) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

type ReleaseBundleWebhookArrayOutput struct{ *pulumi.OutputState }

func (ReleaseBundleWebhookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReleaseBundleWebhook)(nil)).Elem()
}

func (o ReleaseBundleWebhookArrayOutput) ToReleaseBundleWebhookArrayOutput() ReleaseBundleWebhookArrayOutput {
	return o
}

func (o ReleaseBundleWebhookArrayOutput) ToReleaseBundleWebhookArrayOutputWithContext(ctx context.Context) ReleaseBundleWebhookArrayOutput {
	return o
}

func (o ReleaseBundleWebhookArrayOutput) Index(i pulumi.IntInput) ReleaseBundleWebhookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReleaseBundleWebhook {
		return vs[0].([]*ReleaseBundleWebhook)[vs[1].(int)]
	}).(ReleaseBundleWebhookOutput)
}

type ReleaseBundleWebhookMapOutput struct{ *pulumi.OutputState }

func (ReleaseBundleWebhookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReleaseBundleWebhook)(nil)).Elem()
}

func (o ReleaseBundleWebhookMapOutput) ToReleaseBundleWebhookMapOutput() ReleaseBundleWebhookMapOutput {
	return o
}

func (o ReleaseBundleWebhookMapOutput) ToReleaseBundleWebhookMapOutputWithContext(ctx context.Context) ReleaseBundleWebhookMapOutput {
	return o
}

func (o ReleaseBundleWebhookMapOutput) MapIndex(k pulumi.StringInput) ReleaseBundleWebhookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReleaseBundleWebhook {
		return vs[0].(map[string]*ReleaseBundleWebhook)[vs[1].(string)]
	}).(ReleaseBundleWebhookOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReleaseBundleWebhookInput)(nil)).Elem(), &ReleaseBundleWebhook{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReleaseBundleWebhookArrayInput)(nil)).Elem(), ReleaseBundleWebhookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReleaseBundleWebhookMapInput)(nil)).Elem(), ReleaseBundleWebhookMap{})
	pulumi.RegisterOutputType(ReleaseBundleWebhookOutput{})
	pulumi.RegisterOutputType(ReleaseBundleWebhookArrayOutput{})
	pulumi.RegisterOutputType(ReleaseBundleWebhookMapOutput{})
}
