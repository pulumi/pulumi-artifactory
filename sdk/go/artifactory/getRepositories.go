// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-artifactory/sdk/v6/go/artifactory/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns a list of minimal repository details for all repositories of the specified type.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-artifactory/sdk/v6/go/artifactory"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := artifactory.GetRepositories(ctx, &artifactory.GetRepositoriesArgs{
//				RepositoryType: pulumi.StringRef("local"),
//				PackageType:    pulumi.StringRef("alpine"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetRepositories(ctx *pulumi.Context, args *GetRepositoriesArgs, opts ...pulumi.InvokeOption) (*GetRepositoriesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetRepositoriesResult
	err := ctx.Invoke("artifactory:index/getRepositories:getRepositories", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRepositories.
type GetRepositoriesArgs struct {
	PackageType *string `pulumi:"packageType"`
	// Filter for repositories assigned to a specific project.
	ProjectKey *string `pulumi:"projectKey"`
	// Filter for repositories of a specific type. Allowed values are: local, remote, virtual, federated, distribution
	RepositoryType *string `pulumi:"repositoryType"`
}

// A collection of values returned by getRepositories.
type GetRepositoriesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id          string  `pulumi:"id"`
	PackageType *string `pulumi:"packageType"`
	// Filter for repositories assigned to a specific project.
	ProjectKey *string `pulumi:"projectKey"`
	// A list of repositories.
	Repos []GetRepositoriesRepo `pulumi:"repos"`
	// Filter for repositories of a specific type. Allowed values are: local, remote, virtual, federated, distribution
	RepositoryType *string `pulumi:"repositoryType"`
}

func GetRepositoriesOutput(ctx *pulumi.Context, args GetRepositoriesOutputArgs, opts ...pulumi.InvokeOption) GetRepositoriesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetRepositoriesResult, error) {
			args := v.(GetRepositoriesArgs)
			r, err := GetRepositories(ctx, &args, opts...)
			var s GetRepositoriesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetRepositoriesResultOutput)
}

// A collection of arguments for invoking getRepositories.
type GetRepositoriesOutputArgs struct {
	PackageType pulumi.StringPtrInput `pulumi:"packageType"`
	// Filter for repositories assigned to a specific project.
	ProjectKey pulumi.StringPtrInput `pulumi:"projectKey"`
	// Filter for repositories of a specific type. Allowed values are: local, remote, virtual, federated, distribution
	RepositoryType pulumi.StringPtrInput `pulumi:"repositoryType"`
}

func (GetRepositoriesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoriesArgs)(nil)).Elem()
}

// A collection of values returned by getRepositories.
type GetRepositoriesResultOutput struct{ *pulumi.OutputState }

func (GetRepositoriesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoriesResult)(nil)).Elem()
}

func (o GetRepositoriesResultOutput) ToGetRepositoriesResultOutput() GetRepositoriesResultOutput {
	return o
}

func (o GetRepositoriesResultOutput) ToGetRepositoriesResultOutputWithContext(ctx context.Context) GetRepositoriesResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetRepositoriesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoriesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetRepositoriesResultOutput) PackageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRepositoriesResult) *string { return v.PackageType }).(pulumi.StringPtrOutput)
}

// Filter for repositories assigned to a specific project.
func (o GetRepositoriesResultOutput) ProjectKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRepositoriesResult) *string { return v.ProjectKey }).(pulumi.StringPtrOutput)
}

// A list of repositories.
func (o GetRepositoriesResultOutput) Repos() GetRepositoriesRepoArrayOutput {
	return o.ApplyT(func(v GetRepositoriesResult) []GetRepositoriesRepo { return v.Repos }).(GetRepositoriesRepoArrayOutput)
}

// Filter for repositories of a specific type. Allowed values are: local, remote, virtual, federated, distribution
func (o GetRepositoriesResultOutput) RepositoryType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRepositoriesResult) *string { return v.RepositoryType }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRepositoriesResultOutput{})
}
