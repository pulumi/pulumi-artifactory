// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Artifactory keypair Resource
//
// Creates an RSA Keypair resource - suitable for signing alpine indices.
// - Currently, only RSA is supported.
// - Passphrases are not currently supported, though they exist in the API
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"io/ioutil"
//
// 	"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func readFileOrPanic(path string) pulumi.StringPtrInput {
// 	data, err := ioutil.ReadFile(path)
// 	if err != nil {
// 		panic(err.Error())
// 	}
// 	return pulumi.String(string(data))
// }
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := artifactory.NewKeypair(ctx, "some_keypair6543461672124900137", &artifactory.KeypairArgs{
// 			PairName:   pulumi.String("some-keypair6543461672124900137"),
// 			PairType:   pulumi.String("RSA"),
// 			Alias:      pulumi.String("foo-alias6543461672124900137"),
// 			PrivateKey: readFileOrPanic("samples/rsa.priv"),
// 			PublicKey:  readFileOrPanic("samples/rsa.pub"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Keypair struct {
	pulumi.CustomResourceState

	// Required but for unknown reasons
	Alias pulumi.StringOutput `pulumi:"alias"`
	// name of the key pair and the identity of the resource.
	PairName pulumi.StringOutput `pulumi:"pairName"`
	// RT requires this - presumably for verification purposes.
	PairType pulumi.StringOutput `pulumi:"pairType"`
	// - This will be used to decrypt the private key. Validated server side.
	Passphrase pulumi.StringPtrOutput `pulumi:"passphrase"`
	// - duh! This will have it's pem format validated
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`
	// - duh! This will have it's pem format validated
	PublicKey pulumi.StringOutput `pulumi:"publicKey"`
	// - it's unknown what this does, but, it's returned in the payload and there is no known place to set it in the UI
	Unavailable pulumi.BoolOutput `pulumi:"unavailable"`
}

// NewKeypair registers a new resource with the given unique name, arguments, and options.
func NewKeypair(ctx *pulumi.Context,
	name string, args *KeypairArgs, opts ...pulumi.ResourceOption) (*Keypair, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Alias == nil {
		return nil, errors.New("invalid value for required argument 'Alias'")
	}
	if args.PairName == nil {
		return nil, errors.New("invalid value for required argument 'PairName'")
	}
	if args.PairType == nil {
		return nil, errors.New("invalid value for required argument 'PairType'")
	}
	if args.PrivateKey == nil {
		return nil, errors.New("invalid value for required argument 'PrivateKey'")
	}
	if args.PublicKey == nil {
		return nil, errors.New("invalid value for required argument 'PublicKey'")
	}
	var resource Keypair
	err := ctx.RegisterResource("artifactory:index/keypair:Keypair", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeypair gets an existing Keypair resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeypair(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeypairState, opts ...pulumi.ResourceOption) (*Keypair, error) {
	var resource Keypair
	err := ctx.ReadResource("artifactory:index/keypair:Keypair", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Keypair resources.
type keypairState struct {
	// Required but for unknown reasons
	Alias *string `pulumi:"alias"`
	// name of the key pair and the identity of the resource.
	PairName *string `pulumi:"pairName"`
	// RT requires this - presumably for verification purposes.
	PairType *string `pulumi:"pairType"`
	// - This will be used to decrypt the private key. Validated server side.
	Passphrase *string `pulumi:"passphrase"`
	// - duh! This will have it's pem format validated
	PrivateKey *string `pulumi:"privateKey"`
	// - duh! This will have it's pem format validated
	PublicKey *string `pulumi:"publicKey"`
	// - it's unknown what this does, but, it's returned in the payload and there is no known place to set it in the UI
	Unavailable *bool `pulumi:"unavailable"`
}

type KeypairState struct {
	// Required but for unknown reasons
	Alias pulumi.StringPtrInput
	// name of the key pair and the identity of the resource.
	PairName pulumi.StringPtrInput
	// RT requires this - presumably for verification purposes.
	PairType pulumi.StringPtrInput
	// - This will be used to decrypt the private key. Validated server side.
	Passphrase pulumi.StringPtrInput
	// - duh! This will have it's pem format validated
	PrivateKey pulumi.StringPtrInput
	// - duh! This will have it's pem format validated
	PublicKey pulumi.StringPtrInput
	// - it's unknown what this does, but, it's returned in the payload and there is no known place to set it in the UI
	Unavailable pulumi.BoolPtrInput
}

func (KeypairState) ElementType() reflect.Type {
	return reflect.TypeOf((*keypairState)(nil)).Elem()
}

type keypairArgs struct {
	// Required but for unknown reasons
	Alias string `pulumi:"alias"`
	// name of the key pair and the identity of the resource.
	PairName string `pulumi:"pairName"`
	// RT requires this - presumably for verification purposes.
	PairType string `pulumi:"pairType"`
	// - This will be used to decrypt the private key. Validated server side.
	Passphrase *string `pulumi:"passphrase"`
	// - duh! This will have it's pem format validated
	PrivateKey string `pulumi:"privateKey"`
	// - duh! This will have it's pem format validated
	PublicKey string `pulumi:"publicKey"`
}

// The set of arguments for constructing a Keypair resource.
type KeypairArgs struct {
	// Required but for unknown reasons
	Alias pulumi.StringInput
	// name of the key pair and the identity of the resource.
	PairName pulumi.StringInput
	// RT requires this - presumably for verification purposes.
	PairType pulumi.StringInput
	// - This will be used to decrypt the private key. Validated server side.
	Passphrase pulumi.StringPtrInput
	// - duh! This will have it's pem format validated
	PrivateKey pulumi.StringInput
	// - duh! This will have it's pem format validated
	PublicKey pulumi.StringInput
}

func (KeypairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keypairArgs)(nil)).Elem()
}

type KeypairInput interface {
	pulumi.Input

	ToKeypairOutput() KeypairOutput
	ToKeypairOutputWithContext(ctx context.Context) KeypairOutput
}

func (*Keypair) ElementType() reflect.Type {
	return reflect.TypeOf((*Keypair)(nil))
}

func (i *Keypair) ToKeypairOutput() KeypairOutput {
	return i.ToKeypairOutputWithContext(context.Background())
}

func (i *Keypair) ToKeypairOutputWithContext(ctx context.Context) KeypairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeypairOutput)
}

func (i *Keypair) ToKeypairPtrOutput() KeypairPtrOutput {
	return i.ToKeypairPtrOutputWithContext(context.Background())
}

func (i *Keypair) ToKeypairPtrOutputWithContext(ctx context.Context) KeypairPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeypairPtrOutput)
}

type KeypairPtrInput interface {
	pulumi.Input

	ToKeypairPtrOutput() KeypairPtrOutput
	ToKeypairPtrOutputWithContext(ctx context.Context) KeypairPtrOutput
}

type keypairPtrType KeypairArgs

func (*keypairPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Keypair)(nil))
}

func (i *keypairPtrType) ToKeypairPtrOutput() KeypairPtrOutput {
	return i.ToKeypairPtrOutputWithContext(context.Background())
}

func (i *keypairPtrType) ToKeypairPtrOutputWithContext(ctx context.Context) KeypairPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeypairPtrOutput)
}

// KeypairArrayInput is an input type that accepts KeypairArray and KeypairArrayOutput values.
// You can construct a concrete instance of `KeypairArrayInput` via:
//
//          KeypairArray{ KeypairArgs{...} }
type KeypairArrayInput interface {
	pulumi.Input

	ToKeypairArrayOutput() KeypairArrayOutput
	ToKeypairArrayOutputWithContext(context.Context) KeypairArrayOutput
}

type KeypairArray []KeypairInput

func (KeypairArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Keypair)(nil)).Elem()
}

func (i KeypairArray) ToKeypairArrayOutput() KeypairArrayOutput {
	return i.ToKeypairArrayOutputWithContext(context.Background())
}

func (i KeypairArray) ToKeypairArrayOutputWithContext(ctx context.Context) KeypairArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeypairArrayOutput)
}

// KeypairMapInput is an input type that accepts KeypairMap and KeypairMapOutput values.
// You can construct a concrete instance of `KeypairMapInput` via:
//
//          KeypairMap{ "key": KeypairArgs{...} }
type KeypairMapInput interface {
	pulumi.Input

	ToKeypairMapOutput() KeypairMapOutput
	ToKeypairMapOutputWithContext(context.Context) KeypairMapOutput
}

type KeypairMap map[string]KeypairInput

func (KeypairMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Keypair)(nil)).Elem()
}

func (i KeypairMap) ToKeypairMapOutput() KeypairMapOutput {
	return i.ToKeypairMapOutputWithContext(context.Background())
}

func (i KeypairMap) ToKeypairMapOutputWithContext(ctx context.Context) KeypairMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeypairMapOutput)
}

type KeypairOutput struct{ *pulumi.OutputState }

func (KeypairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Keypair)(nil))
}

func (o KeypairOutput) ToKeypairOutput() KeypairOutput {
	return o
}

func (o KeypairOutput) ToKeypairOutputWithContext(ctx context.Context) KeypairOutput {
	return o
}

func (o KeypairOutput) ToKeypairPtrOutput() KeypairPtrOutput {
	return o.ToKeypairPtrOutputWithContext(context.Background())
}

func (o KeypairOutput) ToKeypairPtrOutputWithContext(ctx context.Context) KeypairPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Keypair) *Keypair {
		return &v
	}).(KeypairPtrOutput)
}

type KeypairPtrOutput struct{ *pulumi.OutputState }

func (KeypairPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Keypair)(nil))
}

func (o KeypairPtrOutput) ToKeypairPtrOutput() KeypairPtrOutput {
	return o
}

func (o KeypairPtrOutput) ToKeypairPtrOutputWithContext(ctx context.Context) KeypairPtrOutput {
	return o
}

func (o KeypairPtrOutput) Elem() KeypairOutput {
	return o.ApplyT(func(v *Keypair) Keypair {
		if v != nil {
			return *v
		}
		var ret Keypair
		return ret
	}).(KeypairOutput)
}

type KeypairArrayOutput struct{ *pulumi.OutputState }

func (KeypairArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Keypair)(nil))
}

func (o KeypairArrayOutput) ToKeypairArrayOutput() KeypairArrayOutput {
	return o
}

func (o KeypairArrayOutput) ToKeypairArrayOutputWithContext(ctx context.Context) KeypairArrayOutput {
	return o
}

func (o KeypairArrayOutput) Index(i pulumi.IntInput) KeypairOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Keypair {
		return vs[0].([]Keypair)[vs[1].(int)]
	}).(KeypairOutput)
}

type KeypairMapOutput struct{ *pulumi.OutputState }

func (KeypairMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Keypair)(nil))
}

func (o KeypairMapOutput) ToKeypairMapOutput() KeypairMapOutput {
	return o
}

func (o KeypairMapOutput) ToKeypairMapOutputWithContext(ctx context.Context) KeypairMapOutput {
	return o
}

func (o KeypairMapOutput) MapIndex(k pulumi.StringInput) KeypairOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Keypair {
		return vs[0].(map[string]Keypair)[vs[1].(string)]
	}).(KeypairOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeypairInput)(nil)).Elem(), &Keypair{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeypairPtrInput)(nil)).Elem(), &Keypair{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeypairArrayInput)(nil)).Elem(), KeypairArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeypairMapInput)(nil)).Elem(), KeypairMap{})
	pulumi.RegisterOutputType(KeypairOutput{})
	pulumi.RegisterOutputType(KeypairPtrOutput{})
	pulumi.RegisterOutputType(KeypairArrayOutput{})
	pulumi.RegisterOutputType(KeypairMapOutput{})
}
