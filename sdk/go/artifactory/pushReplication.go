// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Artifactory push replication resource. This can be used to create and manage Artifactory push replications.
// Push replication is used to synchronize Local Repositories, and is implemented by the Artifactory server on the near
// end invoking a synchronization of artifacts to the far end.
// See the [Official Documentation](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-PushReplication).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-artifactory/sdk/v3/go/artifactory"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			artifactoryUrl := cfg.Require("artifactoryUrl")
//			artifactoryUsername := cfg.Require("artifactoryUsername")
//			artifactoryPassword := cfg.Require("artifactoryPassword")
//			providerTestSource, err := artifactory.NewLocalMavenRepository(ctx, "providerTestSource", &artifactory.LocalMavenRepositoryArgs{
//				Key: pulumi.String("provider_test_source"),
//			})
//			if err != nil {
//				return err
//			}
//			providerTestDest, err := artifactory.NewLocalMavenRepository(ctx, "providerTestDest", &artifactory.LocalMavenRepositoryArgs{
//				Key: pulumi.String("provider_test_dest"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = artifactory.NewPushReplication(ctx, "foo-rep", &artifactory.PushReplicationArgs{
//				RepoKey:                providerTestSource.Key,
//				CronExp:                pulumi.String("0 0 * * * ?"),
//				EnableEventReplication: pulumi.Bool(true),
//				Replications: artifactory.PushReplicationReplicationArray{
//					&artifactory.PushReplicationReplicationArgs{
//						Url: providerTestDest.Key.ApplyT(func(key string) (string, error) {
//							return fmt.Sprintf("%v/%v", artifactoryUrl, key), nil
//						}).(pulumi.StringOutput),
//						Username: pulumi.String("$var.artifactory_username"),
//						Password: pulumi.String("$var.artifactory_password"),
//						Enabled:  pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Push replication configs can be imported using their repo key, e.g.
//
// ```sh
//
//	$ pulumi import artifactory:index/pushReplication:PushReplication foo-rep provider_test_source
//
// ```
type PushReplication struct {
	pulumi.CustomResourceState

	// A valid CRON expression that you can use to control replication frequency. Eg: "0 0 12 * * ? *", "0 0 2 ? * MON-SAT *". Note: use 6 or 7 parts format - Seconds, Minutes Hours, Day Of Month, Month, Day Of Week, Year (optional). Specifying both a day-of-week AND a day-of-month parameter is not supported. One of them should be replaced by `?`. Incorrect: `* 5,7,9 14/2 * * WED,SAT *`, correct: `* 5,7,9 14/2 ? * WED,SAT *`. See details in [Cron Trigger Tutorial](http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html).
	CronExp pulumi.StringOutput `pulumi:"cronExp"`
	// When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on artifact, e.g. added, deleted or property change.
	EnableEventReplication pulumi.BoolOutput                     `pulumi:"enableEventReplication"`
	Replications           PushReplicationReplicationArrayOutput `pulumi:"replications"`
	// Repository name.
	RepoKey pulumi.StringOutput `pulumi:"repoKey"`
}

// NewPushReplication registers a new resource with the given unique name, arguments, and options.
func NewPushReplication(ctx *pulumi.Context,
	name string, args *PushReplicationArgs, opts ...pulumi.ResourceOption) (*PushReplication, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CronExp == nil {
		return nil, errors.New("invalid value for required argument 'CronExp'")
	}
	if args.RepoKey == nil {
		return nil, errors.New("invalid value for required argument 'RepoKey'")
	}
	var resource PushReplication
	err := ctx.RegisterResource("artifactory:index/pushReplication:PushReplication", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPushReplication gets an existing PushReplication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPushReplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PushReplicationState, opts ...pulumi.ResourceOption) (*PushReplication, error) {
	var resource PushReplication
	err := ctx.ReadResource("artifactory:index/pushReplication:PushReplication", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PushReplication resources.
type pushReplicationState struct {
	// A valid CRON expression that you can use to control replication frequency. Eg: "0 0 12 * * ? *", "0 0 2 ? * MON-SAT *". Note: use 6 or 7 parts format - Seconds, Minutes Hours, Day Of Month, Month, Day Of Week, Year (optional). Specifying both a day-of-week AND a day-of-month parameter is not supported. One of them should be replaced by `?`. Incorrect: `* 5,7,9 14/2 * * WED,SAT *`, correct: `* 5,7,9 14/2 ? * WED,SAT *`. See details in [Cron Trigger Tutorial](http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html).
	CronExp *string `pulumi:"cronExp"`
	// When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on artifact, e.g. added, deleted or property change.
	EnableEventReplication *bool                        `pulumi:"enableEventReplication"`
	Replications           []PushReplicationReplication `pulumi:"replications"`
	// Repository name.
	RepoKey *string `pulumi:"repoKey"`
}

type PushReplicationState struct {
	// A valid CRON expression that you can use to control replication frequency. Eg: "0 0 12 * * ? *", "0 0 2 ? * MON-SAT *". Note: use 6 or 7 parts format - Seconds, Minutes Hours, Day Of Month, Month, Day Of Week, Year (optional). Specifying both a day-of-week AND a day-of-month parameter is not supported. One of them should be replaced by `?`. Incorrect: `* 5,7,9 14/2 * * WED,SAT *`, correct: `* 5,7,9 14/2 ? * WED,SAT *`. See details in [Cron Trigger Tutorial](http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html).
	CronExp pulumi.StringPtrInput
	// When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on artifact, e.g. added, deleted or property change.
	EnableEventReplication pulumi.BoolPtrInput
	Replications           PushReplicationReplicationArrayInput
	// Repository name.
	RepoKey pulumi.StringPtrInput
}

func (PushReplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*pushReplicationState)(nil)).Elem()
}

type pushReplicationArgs struct {
	// A valid CRON expression that you can use to control replication frequency. Eg: "0 0 12 * * ? *", "0 0 2 ? * MON-SAT *". Note: use 6 or 7 parts format - Seconds, Minutes Hours, Day Of Month, Month, Day Of Week, Year (optional). Specifying both a day-of-week AND a day-of-month parameter is not supported. One of them should be replaced by `?`. Incorrect: `* 5,7,9 14/2 * * WED,SAT *`, correct: `* 5,7,9 14/2 ? * WED,SAT *`. See details in [Cron Trigger Tutorial](http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html).
	CronExp string `pulumi:"cronExp"`
	// When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on artifact, e.g. added, deleted or property change.
	EnableEventReplication *bool                        `pulumi:"enableEventReplication"`
	Replications           []PushReplicationReplication `pulumi:"replications"`
	// Repository name.
	RepoKey string `pulumi:"repoKey"`
}

// The set of arguments for constructing a PushReplication resource.
type PushReplicationArgs struct {
	// A valid CRON expression that you can use to control replication frequency. Eg: "0 0 12 * * ? *", "0 0 2 ? * MON-SAT *". Note: use 6 or 7 parts format - Seconds, Minutes Hours, Day Of Month, Month, Day Of Week, Year (optional). Specifying both a day-of-week AND a day-of-month parameter is not supported. One of them should be replaced by `?`. Incorrect: `* 5,7,9 14/2 * * WED,SAT *`, correct: `* 5,7,9 14/2 ? * WED,SAT *`. See details in [Cron Trigger Tutorial](http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html).
	CronExp pulumi.StringInput
	// When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on artifact, e.g. added, deleted or property change.
	EnableEventReplication pulumi.BoolPtrInput
	Replications           PushReplicationReplicationArrayInput
	// Repository name.
	RepoKey pulumi.StringInput
}

func (PushReplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pushReplicationArgs)(nil)).Elem()
}

type PushReplicationInput interface {
	pulumi.Input

	ToPushReplicationOutput() PushReplicationOutput
	ToPushReplicationOutputWithContext(ctx context.Context) PushReplicationOutput
}

func (*PushReplication) ElementType() reflect.Type {
	return reflect.TypeOf((**PushReplication)(nil)).Elem()
}

func (i *PushReplication) ToPushReplicationOutput() PushReplicationOutput {
	return i.ToPushReplicationOutputWithContext(context.Background())
}

func (i *PushReplication) ToPushReplicationOutputWithContext(ctx context.Context) PushReplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PushReplicationOutput)
}

// PushReplicationArrayInput is an input type that accepts PushReplicationArray and PushReplicationArrayOutput values.
// You can construct a concrete instance of `PushReplicationArrayInput` via:
//
//	PushReplicationArray{ PushReplicationArgs{...} }
type PushReplicationArrayInput interface {
	pulumi.Input

	ToPushReplicationArrayOutput() PushReplicationArrayOutput
	ToPushReplicationArrayOutputWithContext(context.Context) PushReplicationArrayOutput
}

type PushReplicationArray []PushReplicationInput

func (PushReplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PushReplication)(nil)).Elem()
}

func (i PushReplicationArray) ToPushReplicationArrayOutput() PushReplicationArrayOutput {
	return i.ToPushReplicationArrayOutputWithContext(context.Background())
}

func (i PushReplicationArray) ToPushReplicationArrayOutputWithContext(ctx context.Context) PushReplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PushReplicationArrayOutput)
}

// PushReplicationMapInput is an input type that accepts PushReplicationMap and PushReplicationMapOutput values.
// You can construct a concrete instance of `PushReplicationMapInput` via:
//
//	PushReplicationMap{ "key": PushReplicationArgs{...} }
type PushReplicationMapInput interface {
	pulumi.Input

	ToPushReplicationMapOutput() PushReplicationMapOutput
	ToPushReplicationMapOutputWithContext(context.Context) PushReplicationMapOutput
}

type PushReplicationMap map[string]PushReplicationInput

func (PushReplicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PushReplication)(nil)).Elem()
}

func (i PushReplicationMap) ToPushReplicationMapOutput() PushReplicationMapOutput {
	return i.ToPushReplicationMapOutputWithContext(context.Background())
}

func (i PushReplicationMap) ToPushReplicationMapOutputWithContext(ctx context.Context) PushReplicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PushReplicationMapOutput)
}

type PushReplicationOutput struct{ *pulumi.OutputState }

func (PushReplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PushReplication)(nil)).Elem()
}

func (o PushReplicationOutput) ToPushReplicationOutput() PushReplicationOutput {
	return o
}

func (o PushReplicationOutput) ToPushReplicationOutputWithContext(ctx context.Context) PushReplicationOutput {
	return o
}

// A valid CRON expression that you can use to control replication frequency. Eg: "0 0 12 * * ? *", "0 0 2 ? * MON-SAT *". Note: use 6 or 7 parts format - Seconds, Minutes Hours, Day Of Month, Month, Day Of Week, Year (optional). Specifying both a day-of-week AND a day-of-month parameter is not supported. One of them should be replaced by `?`. Incorrect: `* 5,7,9 14/2 * * WED,SAT *`, correct: `* 5,7,9 14/2 ? * WED,SAT *`. See details in [Cron Trigger Tutorial](http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html).
func (o PushReplicationOutput) CronExp() pulumi.StringOutput {
	return o.ApplyT(func(v *PushReplication) pulumi.StringOutput { return v.CronExp }).(pulumi.StringOutput)
}

// When set, each event will trigger replication of the artifacts changed in this event. This can be any type of event on artifact, e.g. added, deleted or property change.
func (o PushReplicationOutput) EnableEventReplication() pulumi.BoolOutput {
	return o.ApplyT(func(v *PushReplication) pulumi.BoolOutput { return v.EnableEventReplication }).(pulumi.BoolOutput)
}

func (o PushReplicationOutput) Replications() PushReplicationReplicationArrayOutput {
	return o.ApplyT(func(v *PushReplication) PushReplicationReplicationArrayOutput { return v.Replications }).(PushReplicationReplicationArrayOutput)
}

// Repository name.
func (o PushReplicationOutput) RepoKey() pulumi.StringOutput {
	return o.ApplyT(func(v *PushReplication) pulumi.StringOutput { return v.RepoKey }).(pulumi.StringOutput)
}

type PushReplicationArrayOutput struct{ *pulumi.OutputState }

func (PushReplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PushReplication)(nil)).Elem()
}

func (o PushReplicationArrayOutput) ToPushReplicationArrayOutput() PushReplicationArrayOutput {
	return o
}

func (o PushReplicationArrayOutput) ToPushReplicationArrayOutputWithContext(ctx context.Context) PushReplicationArrayOutput {
	return o
}

func (o PushReplicationArrayOutput) Index(i pulumi.IntInput) PushReplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PushReplication {
		return vs[0].([]*PushReplication)[vs[1].(int)]
	}).(PushReplicationOutput)
}

type PushReplicationMapOutput struct{ *pulumi.OutputState }

func (PushReplicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PushReplication)(nil)).Elem()
}

func (o PushReplicationMapOutput) ToPushReplicationMapOutput() PushReplicationMapOutput {
	return o
}

func (o PushReplicationMapOutput) ToPushReplicationMapOutputWithContext(ctx context.Context) PushReplicationMapOutput {
	return o
}

func (o PushReplicationMapOutput) MapIndex(k pulumi.StringInput) PushReplicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PushReplication {
		return vs[0].(map[string]*PushReplication)[vs[1].(string)]
	}).(PushReplicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PushReplicationInput)(nil)).Elem(), &PushReplication{})
	pulumi.RegisterInputType(reflect.TypeOf((*PushReplicationArrayInput)(nil)).Elem(), PushReplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PushReplicationMapInput)(nil)).Elem(), PushReplicationMap{})
	pulumi.RegisterOutputType(PushReplicationOutput{})
	pulumi.RegisterOutputType(PushReplicationArrayOutput{})
	pulumi.RegisterOutputType(PushReplicationMapOutput{})
}
