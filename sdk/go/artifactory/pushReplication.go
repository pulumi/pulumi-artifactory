// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Push replication configs can be imported using their repo key, e.g.
//
// ```sh
//  $ pulumi import artifactory:index/pushReplication:PushReplication foo-rep provider_test_source
// ```
type PushReplication struct {
	pulumi.CustomResourceState

	CronExp                pulumi.StringOutput                   `pulumi:"cronExp"`
	EnableEventReplication pulumi.BoolOutput                     `pulumi:"enableEventReplication"`
	Replications           PushReplicationReplicationArrayOutput `pulumi:"replications"`
	RepoKey                pulumi.StringOutput                   `pulumi:"repoKey"`
}

// NewPushReplication registers a new resource with the given unique name, arguments, and options.
func NewPushReplication(ctx *pulumi.Context,
	name string, args *PushReplicationArgs, opts ...pulumi.ResourceOption) (*PushReplication, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CronExp == nil {
		return nil, errors.New("invalid value for required argument 'CronExp'")
	}
	if args.RepoKey == nil {
		return nil, errors.New("invalid value for required argument 'RepoKey'")
	}
	var resource PushReplication
	err := ctx.RegisterResource("artifactory:index/pushReplication:PushReplication", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPushReplication gets an existing PushReplication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPushReplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PushReplicationState, opts ...pulumi.ResourceOption) (*PushReplication, error) {
	var resource PushReplication
	err := ctx.ReadResource("artifactory:index/pushReplication:PushReplication", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PushReplication resources.
type pushReplicationState struct {
	CronExp                *string                      `pulumi:"cronExp"`
	EnableEventReplication *bool                        `pulumi:"enableEventReplication"`
	Replications           []PushReplicationReplication `pulumi:"replications"`
	RepoKey                *string                      `pulumi:"repoKey"`
}

type PushReplicationState struct {
	CronExp                pulumi.StringPtrInput
	EnableEventReplication pulumi.BoolPtrInput
	Replications           PushReplicationReplicationArrayInput
	RepoKey                pulumi.StringPtrInput
}

func (PushReplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*pushReplicationState)(nil)).Elem()
}

type pushReplicationArgs struct {
	CronExp                string                       `pulumi:"cronExp"`
	EnableEventReplication *bool                        `pulumi:"enableEventReplication"`
	Replications           []PushReplicationReplication `pulumi:"replications"`
	RepoKey                string                       `pulumi:"repoKey"`
}

// The set of arguments for constructing a PushReplication resource.
type PushReplicationArgs struct {
	CronExp                pulumi.StringInput
	EnableEventReplication pulumi.BoolPtrInput
	Replications           PushReplicationReplicationArrayInput
	RepoKey                pulumi.StringInput
}

func (PushReplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pushReplicationArgs)(nil)).Elem()
}

type PushReplicationInput interface {
	pulumi.Input

	ToPushReplicationOutput() PushReplicationOutput
	ToPushReplicationOutputWithContext(ctx context.Context) PushReplicationOutput
}

func (*PushReplication) ElementType() reflect.Type {
	return reflect.TypeOf((*PushReplication)(nil))
}

func (i *PushReplication) ToPushReplicationOutput() PushReplicationOutput {
	return i.ToPushReplicationOutputWithContext(context.Background())
}

func (i *PushReplication) ToPushReplicationOutputWithContext(ctx context.Context) PushReplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PushReplicationOutput)
}

func (i *PushReplication) ToPushReplicationPtrOutput() PushReplicationPtrOutput {
	return i.ToPushReplicationPtrOutputWithContext(context.Background())
}

func (i *PushReplication) ToPushReplicationPtrOutputWithContext(ctx context.Context) PushReplicationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PushReplicationPtrOutput)
}

type PushReplicationPtrInput interface {
	pulumi.Input

	ToPushReplicationPtrOutput() PushReplicationPtrOutput
	ToPushReplicationPtrOutputWithContext(ctx context.Context) PushReplicationPtrOutput
}

type pushReplicationPtrType PushReplicationArgs

func (*pushReplicationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PushReplication)(nil))
}

func (i *pushReplicationPtrType) ToPushReplicationPtrOutput() PushReplicationPtrOutput {
	return i.ToPushReplicationPtrOutputWithContext(context.Background())
}

func (i *pushReplicationPtrType) ToPushReplicationPtrOutputWithContext(ctx context.Context) PushReplicationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PushReplicationPtrOutput)
}

// PushReplicationArrayInput is an input type that accepts PushReplicationArray and PushReplicationArrayOutput values.
// You can construct a concrete instance of `PushReplicationArrayInput` via:
//
//          PushReplicationArray{ PushReplicationArgs{...} }
type PushReplicationArrayInput interface {
	pulumi.Input

	ToPushReplicationArrayOutput() PushReplicationArrayOutput
	ToPushReplicationArrayOutputWithContext(context.Context) PushReplicationArrayOutput
}

type PushReplicationArray []PushReplicationInput

func (PushReplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PushReplication)(nil)).Elem()
}

func (i PushReplicationArray) ToPushReplicationArrayOutput() PushReplicationArrayOutput {
	return i.ToPushReplicationArrayOutputWithContext(context.Background())
}

func (i PushReplicationArray) ToPushReplicationArrayOutputWithContext(ctx context.Context) PushReplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PushReplicationArrayOutput)
}

// PushReplicationMapInput is an input type that accepts PushReplicationMap and PushReplicationMapOutput values.
// You can construct a concrete instance of `PushReplicationMapInput` via:
//
//          PushReplicationMap{ "key": PushReplicationArgs{...} }
type PushReplicationMapInput interface {
	pulumi.Input

	ToPushReplicationMapOutput() PushReplicationMapOutput
	ToPushReplicationMapOutputWithContext(context.Context) PushReplicationMapOutput
}

type PushReplicationMap map[string]PushReplicationInput

func (PushReplicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PushReplication)(nil)).Elem()
}

func (i PushReplicationMap) ToPushReplicationMapOutput() PushReplicationMapOutput {
	return i.ToPushReplicationMapOutputWithContext(context.Background())
}

func (i PushReplicationMap) ToPushReplicationMapOutputWithContext(ctx context.Context) PushReplicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PushReplicationMapOutput)
}

type PushReplicationOutput struct{ *pulumi.OutputState }

func (PushReplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PushReplication)(nil))
}

func (o PushReplicationOutput) ToPushReplicationOutput() PushReplicationOutput {
	return o
}

func (o PushReplicationOutput) ToPushReplicationOutputWithContext(ctx context.Context) PushReplicationOutput {
	return o
}

func (o PushReplicationOutput) ToPushReplicationPtrOutput() PushReplicationPtrOutput {
	return o.ToPushReplicationPtrOutputWithContext(context.Background())
}

func (o PushReplicationOutput) ToPushReplicationPtrOutputWithContext(ctx context.Context) PushReplicationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PushReplication) *PushReplication {
		return &v
	}).(PushReplicationPtrOutput)
}

type PushReplicationPtrOutput struct{ *pulumi.OutputState }

func (PushReplicationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PushReplication)(nil))
}

func (o PushReplicationPtrOutput) ToPushReplicationPtrOutput() PushReplicationPtrOutput {
	return o
}

func (o PushReplicationPtrOutput) ToPushReplicationPtrOutputWithContext(ctx context.Context) PushReplicationPtrOutput {
	return o
}

func (o PushReplicationPtrOutput) Elem() PushReplicationOutput {
	return o.ApplyT(func(v *PushReplication) PushReplication {
		if v != nil {
			return *v
		}
		var ret PushReplication
		return ret
	}).(PushReplicationOutput)
}

type PushReplicationArrayOutput struct{ *pulumi.OutputState }

func (PushReplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PushReplication)(nil))
}

func (o PushReplicationArrayOutput) ToPushReplicationArrayOutput() PushReplicationArrayOutput {
	return o
}

func (o PushReplicationArrayOutput) ToPushReplicationArrayOutputWithContext(ctx context.Context) PushReplicationArrayOutput {
	return o
}

func (o PushReplicationArrayOutput) Index(i pulumi.IntInput) PushReplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PushReplication {
		return vs[0].([]PushReplication)[vs[1].(int)]
	}).(PushReplicationOutput)
}

type PushReplicationMapOutput struct{ *pulumi.OutputState }

func (PushReplicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]PushReplication)(nil))
}

func (o PushReplicationMapOutput) ToPushReplicationMapOutput() PushReplicationMapOutput {
	return o
}

func (o PushReplicationMapOutput) ToPushReplicationMapOutputWithContext(ctx context.Context) PushReplicationMapOutput {
	return o
}

func (o PushReplicationMapOutput) MapIndex(k pulumi.StringInput) PushReplicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) PushReplication {
		return vs[0].(map[string]PushReplication)[vs[1].(string)]
	}).(PushReplicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PushReplicationInput)(nil)).Elem(), &PushReplication{})
	pulumi.RegisterInputType(reflect.TypeOf((*PushReplicationPtrInput)(nil)).Elem(), &PushReplication{})
	pulumi.RegisterInputType(reflect.TypeOf((*PushReplicationArrayInput)(nil)).Elem(), PushReplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PushReplicationMapInput)(nil)).Elem(), PushReplicationMap{})
	pulumi.RegisterOutputType(PushReplicationOutput{})
	pulumi.RegisterOutputType(PushReplicationPtrOutput{})
	pulumi.RegisterOutputType(PushReplicationArrayOutput{})
	pulumi.RegisterOutputType(PushReplicationMapOutput{})
}
