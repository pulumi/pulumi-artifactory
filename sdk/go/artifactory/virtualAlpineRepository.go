// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Artifactory Virtual Alpine Repository Resource
//
// Provides an Artifactory virtual repository resource with specific alpine features.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-artifactory/sdk/v2/go/artifactory"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := artifactory.NewVirtualAlpineRepository(ctx, "foo-alpine", &artifactory.VirtualAlpineRepositoryArgs{
// 			Description:     pulumi.String("A test virtual repo"),
// 			ExcludesPattern: pulumi.String("com/google/**"),
// 			IncludesPattern: pulumi.String("com/jfrog/**,cloud/jfrog/**"),
// 			Key:             pulumi.String("foo-alpine"),
// 			Notes:           pulumi.String("Internal description"),
// 			Repositories:    pulumi.StringArray{},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Virtual repositories can be imported using their name, e.g.
//
// ```sh
//  $ pulumi import artifactory:index/virtualAlpineRepository:VirtualAlpineRepository foo foo
// ```
type VirtualAlpineRepository struct {
	pulumi.CustomResourceState

	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
	// another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts pulumi.BoolPtrOutput `pulumi:"artifactoryRequestsCanRetrieveRemoteArtifacts"`
	// Default repository to deploy artifacts.
	DefaultDeploymentRepo pulumi.StringPtrOutput `pulumi:"defaultDeploymentRepo"`
	// A free text field that describes the content and purpose of the repository. If you choose to insert a link into this
	// field, clicking the link will prompt the user to confirm that they might be redirected to a new domain.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
	// artifacts are excluded.
	ExcludesPattern pulumi.StringPtrOutput `pulumi:"excludesPattern"`
	// List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only
	// artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern pulumi.StringPtrOutput `pulumi:"includesPattern"`
	// The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or
	// contain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.
	// 'libs-release-local').
	Key pulumi.StringOutput `pulumi:"key"`
	// A free text field to add additional notes about the repository. These are only visible to the administrator.
	Notes pulumi.StringPtrOutput `pulumi:"notes"`
	// The Package Type. This must be specified when the repository is created, and once set, cannot be changed.
	PackageType pulumi.StringOutput `pulumi:"packageType"`
	// Primary keypair used to sign artifacts. Default value is empty.
	PrimaryKeypairRef pulumi.StringPtrOutput `pulumi:"primaryKeypairRef"`
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments pulumi.StringArrayOutput `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric characters. When assigning
	// repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey pulumi.StringPtrOutput `pulumi:"projectKey"`
	// Repository layout key for the local repository
	RepoLayoutRef pulumi.StringPtrOutput `pulumi:"repoLayoutRef"`
	// The effective list of actual repositories included in this virtual repository.
	Repositories pulumi.StringArrayOutput `pulumi:"repositories"`
	// This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated repositories. A value of 0 indicates no caching. Default value is 7200.
	RetrievalCachePeriodSeconds pulumi.IntPtrOutput `pulumi:"retrievalCachePeriodSeconds"`
}

// NewVirtualAlpineRepository registers a new resource with the given unique name, arguments, and options.
func NewVirtualAlpineRepository(ctx *pulumi.Context,
	name string, args *VirtualAlpineRepositoryArgs, opts ...pulumi.ResourceOption) (*VirtualAlpineRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	var resource VirtualAlpineRepository
	err := ctx.RegisterResource("artifactory:index/virtualAlpineRepository:VirtualAlpineRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualAlpineRepository gets an existing VirtualAlpineRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualAlpineRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualAlpineRepositoryState, opts ...pulumi.ResourceOption) (*VirtualAlpineRepository, error) {
	var resource VirtualAlpineRepository
	err := ctx.ReadResource("artifactory:index/virtualAlpineRepository:VirtualAlpineRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualAlpineRepository resources.
type virtualAlpineRepositoryState struct {
	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
	// another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts *bool `pulumi:"artifactoryRequestsCanRetrieveRemoteArtifacts"`
	// Default repository to deploy artifacts.
	DefaultDeploymentRepo *string `pulumi:"defaultDeploymentRepo"`
	// A free text field that describes the content and purpose of the repository. If you choose to insert a link into this
	// field, clicking the link will prompt the user to confirm that they might be redirected to a new domain.
	Description *string `pulumi:"description"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
	// artifacts are excluded.
	ExcludesPattern *string `pulumi:"excludesPattern"`
	// List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only
	// artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern *string `pulumi:"includesPattern"`
	// The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or
	// contain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.
	// 'libs-release-local').
	Key *string `pulumi:"key"`
	// A free text field to add additional notes about the repository. These are only visible to the administrator.
	Notes *string `pulumi:"notes"`
	// The Package Type. This must be specified when the repository is created, and once set, cannot be changed.
	PackageType *string `pulumi:"packageType"`
	// Primary keypair used to sign artifacts. Default value is empty.
	PrimaryKeypairRef *string `pulumi:"primaryKeypairRef"`
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments []string `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric characters. When assigning
	// repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey *string `pulumi:"projectKey"`
	// Repository layout key for the local repository
	RepoLayoutRef *string `pulumi:"repoLayoutRef"`
	// The effective list of actual repositories included in this virtual repository.
	Repositories []string `pulumi:"repositories"`
	// This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated repositories. A value of 0 indicates no caching. Default value is 7200.
	RetrievalCachePeriodSeconds *int `pulumi:"retrievalCachePeriodSeconds"`
}

type VirtualAlpineRepositoryState struct {
	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
	// another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts pulumi.BoolPtrInput
	// Default repository to deploy artifacts.
	DefaultDeploymentRepo pulumi.StringPtrInput
	// A free text field that describes the content and purpose of the repository. If you choose to insert a link into this
	// field, clicking the link will prompt the user to confirm that they might be redirected to a new domain.
	Description pulumi.StringPtrInput
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
	// artifacts are excluded.
	ExcludesPattern pulumi.StringPtrInput
	// List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only
	// artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern pulumi.StringPtrInput
	// The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or
	// contain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.
	// 'libs-release-local').
	Key pulumi.StringPtrInput
	// A free text field to add additional notes about the repository. These are only visible to the administrator.
	Notes pulumi.StringPtrInput
	// The Package Type. This must be specified when the repository is created, and once set, cannot be changed.
	PackageType pulumi.StringPtrInput
	// Primary keypair used to sign artifacts. Default value is empty.
	PrimaryKeypairRef pulumi.StringPtrInput
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments pulumi.StringArrayInput
	// Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric characters. When assigning
	// repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey pulumi.StringPtrInput
	// Repository layout key for the local repository
	RepoLayoutRef pulumi.StringPtrInput
	// The effective list of actual repositories included in this virtual repository.
	Repositories pulumi.StringArrayInput
	// This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated repositories. A value of 0 indicates no caching. Default value is 7200.
	RetrievalCachePeriodSeconds pulumi.IntPtrInput
}

func (VirtualAlpineRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualAlpineRepositoryState)(nil)).Elem()
}

type virtualAlpineRepositoryArgs struct {
	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
	// another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts *bool `pulumi:"artifactoryRequestsCanRetrieveRemoteArtifacts"`
	// Default repository to deploy artifacts.
	DefaultDeploymentRepo *string `pulumi:"defaultDeploymentRepo"`
	// A free text field that describes the content and purpose of the repository. If you choose to insert a link into this
	// field, clicking the link will prompt the user to confirm that they might be redirected to a new domain.
	Description *string `pulumi:"description"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
	// artifacts are excluded.
	ExcludesPattern *string `pulumi:"excludesPattern"`
	// List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only
	// artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern *string `pulumi:"includesPattern"`
	// The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or
	// contain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.
	// 'libs-release-local').
	Key string `pulumi:"key"`
	// A free text field to add additional notes about the repository. These are only visible to the administrator.
	Notes *string `pulumi:"notes"`
	// Primary keypair used to sign artifacts. Default value is empty.
	PrimaryKeypairRef *string `pulumi:"primaryKeypairRef"`
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments []string `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric characters. When assigning
	// repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey *string `pulumi:"projectKey"`
	// Repository layout key for the local repository
	RepoLayoutRef *string `pulumi:"repoLayoutRef"`
	// The effective list of actual repositories included in this virtual repository.
	Repositories []string `pulumi:"repositories"`
	// This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated repositories. A value of 0 indicates no caching. Default value is 7200.
	RetrievalCachePeriodSeconds *int `pulumi:"retrievalCachePeriodSeconds"`
}

// The set of arguments for constructing a VirtualAlpineRepository resource.
type VirtualAlpineRepositoryArgs struct {
	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
	// another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts pulumi.BoolPtrInput
	// Default repository to deploy artifacts.
	DefaultDeploymentRepo pulumi.StringPtrInput
	// A free text field that describes the content and purpose of the repository. If you choose to insert a link into this
	// field, clicking the link will prompt the user to confirm that they might be redirected to a new domain.
	Description pulumi.StringPtrInput
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
	// artifacts are excluded.
	ExcludesPattern pulumi.StringPtrInput
	// List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only
	// artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern pulumi.StringPtrInput
	// The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or
	// contain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.
	// 'libs-release-local').
	Key pulumi.StringInput
	// A free text field to add additional notes about the repository. These are only visible to the administrator.
	Notes pulumi.StringPtrInput
	// Primary keypair used to sign artifacts. Default value is empty.
	PrimaryKeypairRef pulumi.StringPtrInput
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments pulumi.StringArrayInput
	// Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric characters. When assigning
	// repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey pulumi.StringPtrInput
	// Repository layout key for the local repository
	RepoLayoutRef pulumi.StringPtrInput
	// The effective list of actual repositories included in this virtual repository.
	Repositories pulumi.StringArrayInput
	// This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated repositories. A value of 0 indicates no caching. Default value is 7200.
	RetrievalCachePeriodSeconds pulumi.IntPtrInput
}

func (VirtualAlpineRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualAlpineRepositoryArgs)(nil)).Elem()
}

type VirtualAlpineRepositoryInput interface {
	pulumi.Input

	ToVirtualAlpineRepositoryOutput() VirtualAlpineRepositoryOutput
	ToVirtualAlpineRepositoryOutputWithContext(ctx context.Context) VirtualAlpineRepositoryOutput
}

func (*VirtualAlpineRepository) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualAlpineRepository)(nil)).Elem()
}

func (i *VirtualAlpineRepository) ToVirtualAlpineRepositoryOutput() VirtualAlpineRepositoryOutput {
	return i.ToVirtualAlpineRepositoryOutputWithContext(context.Background())
}

func (i *VirtualAlpineRepository) ToVirtualAlpineRepositoryOutputWithContext(ctx context.Context) VirtualAlpineRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualAlpineRepositoryOutput)
}

// VirtualAlpineRepositoryArrayInput is an input type that accepts VirtualAlpineRepositoryArray and VirtualAlpineRepositoryArrayOutput values.
// You can construct a concrete instance of `VirtualAlpineRepositoryArrayInput` via:
//
//          VirtualAlpineRepositoryArray{ VirtualAlpineRepositoryArgs{...} }
type VirtualAlpineRepositoryArrayInput interface {
	pulumi.Input

	ToVirtualAlpineRepositoryArrayOutput() VirtualAlpineRepositoryArrayOutput
	ToVirtualAlpineRepositoryArrayOutputWithContext(context.Context) VirtualAlpineRepositoryArrayOutput
}

type VirtualAlpineRepositoryArray []VirtualAlpineRepositoryInput

func (VirtualAlpineRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualAlpineRepository)(nil)).Elem()
}

func (i VirtualAlpineRepositoryArray) ToVirtualAlpineRepositoryArrayOutput() VirtualAlpineRepositoryArrayOutput {
	return i.ToVirtualAlpineRepositoryArrayOutputWithContext(context.Background())
}

func (i VirtualAlpineRepositoryArray) ToVirtualAlpineRepositoryArrayOutputWithContext(ctx context.Context) VirtualAlpineRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualAlpineRepositoryArrayOutput)
}

// VirtualAlpineRepositoryMapInput is an input type that accepts VirtualAlpineRepositoryMap and VirtualAlpineRepositoryMapOutput values.
// You can construct a concrete instance of `VirtualAlpineRepositoryMapInput` via:
//
//          VirtualAlpineRepositoryMap{ "key": VirtualAlpineRepositoryArgs{...} }
type VirtualAlpineRepositoryMapInput interface {
	pulumi.Input

	ToVirtualAlpineRepositoryMapOutput() VirtualAlpineRepositoryMapOutput
	ToVirtualAlpineRepositoryMapOutputWithContext(context.Context) VirtualAlpineRepositoryMapOutput
}

type VirtualAlpineRepositoryMap map[string]VirtualAlpineRepositoryInput

func (VirtualAlpineRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualAlpineRepository)(nil)).Elem()
}

func (i VirtualAlpineRepositoryMap) ToVirtualAlpineRepositoryMapOutput() VirtualAlpineRepositoryMapOutput {
	return i.ToVirtualAlpineRepositoryMapOutputWithContext(context.Background())
}

func (i VirtualAlpineRepositoryMap) ToVirtualAlpineRepositoryMapOutputWithContext(ctx context.Context) VirtualAlpineRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualAlpineRepositoryMapOutput)
}

type VirtualAlpineRepositoryOutput struct{ *pulumi.OutputState }

func (VirtualAlpineRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualAlpineRepository)(nil)).Elem()
}

func (o VirtualAlpineRepositoryOutput) ToVirtualAlpineRepositoryOutput() VirtualAlpineRepositoryOutput {
	return o
}

func (o VirtualAlpineRepositoryOutput) ToVirtualAlpineRepositoryOutputWithContext(ctx context.Context) VirtualAlpineRepositoryOutput {
	return o
}

type VirtualAlpineRepositoryArrayOutput struct{ *pulumi.OutputState }

func (VirtualAlpineRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualAlpineRepository)(nil)).Elem()
}

func (o VirtualAlpineRepositoryArrayOutput) ToVirtualAlpineRepositoryArrayOutput() VirtualAlpineRepositoryArrayOutput {
	return o
}

func (o VirtualAlpineRepositoryArrayOutput) ToVirtualAlpineRepositoryArrayOutputWithContext(ctx context.Context) VirtualAlpineRepositoryArrayOutput {
	return o
}

func (o VirtualAlpineRepositoryArrayOutput) Index(i pulumi.IntInput) VirtualAlpineRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VirtualAlpineRepository {
		return vs[0].([]*VirtualAlpineRepository)[vs[1].(int)]
	}).(VirtualAlpineRepositoryOutput)
}

type VirtualAlpineRepositoryMapOutput struct{ *pulumi.OutputState }

func (VirtualAlpineRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualAlpineRepository)(nil)).Elem()
}

func (o VirtualAlpineRepositoryMapOutput) ToVirtualAlpineRepositoryMapOutput() VirtualAlpineRepositoryMapOutput {
	return o
}

func (o VirtualAlpineRepositoryMapOutput) ToVirtualAlpineRepositoryMapOutputWithContext(ctx context.Context) VirtualAlpineRepositoryMapOutput {
	return o
}

func (o VirtualAlpineRepositoryMapOutput) MapIndex(k pulumi.StringInput) VirtualAlpineRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VirtualAlpineRepository {
		return vs[0].(map[string]*VirtualAlpineRepository)[vs[1].(string)]
	}).(VirtualAlpineRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualAlpineRepositoryInput)(nil)).Elem(), &VirtualAlpineRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualAlpineRepositoryArrayInput)(nil)).Elem(), VirtualAlpineRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualAlpineRepositoryMapInput)(nil)).Elem(), VirtualAlpineRepositoryMap{})
	pulumi.RegisterOutputType(VirtualAlpineRepositoryOutput{})
	pulumi.RegisterOutputType(VirtualAlpineRepositoryArrayOutput{})
	pulumi.RegisterOutputType(VirtualAlpineRepositoryMapOutput{})
}
