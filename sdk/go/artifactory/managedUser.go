// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Artifactory managed user resource. This can be used to create and maintain Artifactory users. For example, service account where password is known and managed externally.
//
// Unlike `UnmanagedUser` and `User`, the `password` attribute is required and cannot be empty.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-artifactory/sdk/v2/go/artifactory"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := artifactory.NewManagedUser(ctx, "test-user", &artifactory.ManagedUserArgs{
// 			Email: pulumi.String("test-user@artifactory-terraform.com"),
// 			Groups: pulumi.StringArray{
// 				pulumi.String("logged-in-users"),
// 				pulumi.String("readers"),
// 			},
// 			Password: pulumi.String("my super secret password"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Users can be imported using their name, e.g.
//
// ```sh
//  $ pulumi import artifactory:index/managedUser:ManagedUser test-user myusername
// ```
type ManagedUser struct {
	pulumi.CustomResourceState

	// When enabled, this user is an administrator with all the ensuing privileges. Default value is `false`.
	Admin pulumi.BoolPtrOutput `pulumi:"admin"`
	// When set, this user can only access Artifactory through the REST API. This option cannot be set if the user has Admin privileges. Default value is `true`.
	DisableUiAccess pulumi.BoolPtrOutput `pulumi:"disableUiAccess"`
	// Email for user.
	Email pulumi.StringOutput `pulumi:"email"`
	// List of groups this user is a part of.
	Groups pulumi.StringArrayOutput `pulumi:"groups"`
	// When set, disables the fallback of using an internal password when external authentication (such as LDAP) is enabled.
	InternalPasswordDisabled pulumi.BoolPtrOutput `pulumi:"internalPasswordDisabled"`
	// Username for user.
	Name pulumi.StringOutput `pulumi:"name"`
	// Password for the user.
	Password pulumi.StringOutput `pulumi:"password"`
	// When set, this user can update his profile details (except for the password. Only an administrator can update the password). Default value is `true`.
	ProfileUpdatable pulumi.BoolPtrOutput `pulumi:"profileUpdatable"`
}

// NewManagedUser registers a new resource with the given unique name, arguments, and options.
func NewManagedUser(ctx *pulumi.Context,
	name string, args *ManagedUserArgs, opts ...pulumi.ResourceOption) (*ManagedUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	var resource ManagedUser
	err := ctx.RegisterResource("artifactory:index/managedUser:ManagedUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedUser gets an existing ManagedUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedUserState, opts ...pulumi.ResourceOption) (*ManagedUser, error) {
	var resource ManagedUser
	err := ctx.ReadResource("artifactory:index/managedUser:ManagedUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedUser resources.
type managedUserState struct {
	// When enabled, this user is an administrator with all the ensuing privileges. Default value is `false`.
	Admin *bool `pulumi:"admin"`
	// When set, this user can only access Artifactory through the REST API. This option cannot be set if the user has Admin privileges. Default value is `true`.
	DisableUiAccess *bool `pulumi:"disableUiAccess"`
	// Email for user.
	Email *string `pulumi:"email"`
	// List of groups this user is a part of.
	Groups []string `pulumi:"groups"`
	// When set, disables the fallback of using an internal password when external authentication (such as LDAP) is enabled.
	InternalPasswordDisabled *bool `pulumi:"internalPasswordDisabled"`
	// Username for user.
	Name *string `pulumi:"name"`
	// Password for the user.
	Password *string `pulumi:"password"`
	// When set, this user can update his profile details (except for the password. Only an administrator can update the password). Default value is `true`.
	ProfileUpdatable *bool `pulumi:"profileUpdatable"`
}

type ManagedUserState struct {
	// When enabled, this user is an administrator with all the ensuing privileges. Default value is `false`.
	Admin pulumi.BoolPtrInput
	// When set, this user can only access Artifactory through the REST API. This option cannot be set if the user has Admin privileges. Default value is `true`.
	DisableUiAccess pulumi.BoolPtrInput
	// Email for user.
	Email pulumi.StringPtrInput
	// List of groups this user is a part of.
	Groups pulumi.StringArrayInput
	// When set, disables the fallback of using an internal password when external authentication (such as LDAP) is enabled.
	InternalPasswordDisabled pulumi.BoolPtrInput
	// Username for user.
	Name pulumi.StringPtrInput
	// Password for the user.
	Password pulumi.StringPtrInput
	// When set, this user can update his profile details (except for the password. Only an administrator can update the password). Default value is `true`.
	ProfileUpdatable pulumi.BoolPtrInput
}

func (ManagedUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedUserState)(nil)).Elem()
}

type managedUserArgs struct {
	// When enabled, this user is an administrator with all the ensuing privileges. Default value is `false`.
	Admin *bool `pulumi:"admin"`
	// When set, this user can only access Artifactory through the REST API. This option cannot be set if the user has Admin privileges. Default value is `true`.
	DisableUiAccess *bool `pulumi:"disableUiAccess"`
	// Email for user.
	Email string `pulumi:"email"`
	// List of groups this user is a part of.
	Groups []string `pulumi:"groups"`
	// When set, disables the fallback of using an internal password when external authentication (such as LDAP) is enabled.
	InternalPasswordDisabled *bool `pulumi:"internalPasswordDisabled"`
	// Username for user.
	Name *string `pulumi:"name"`
	// Password for the user.
	Password string `pulumi:"password"`
	// When set, this user can update his profile details (except for the password. Only an administrator can update the password). Default value is `true`.
	ProfileUpdatable *bool `pulumi:"profileUpdatable"`
}

// The set of arguments for constructing a ManagedUser resource.
type ManagedUserArgs struct {
	// When enabled, this user is an administrator with all the ensuing privileges. Default value is `false`.
	Admin pulumi.BoolPtrInput
	// When set, this user can only access Artifactory through the REST API. This option cannot be set if the user has Admin privileges. Default value is `true`.
	DisableUiAccess pulumi.BoolPtrInput
	// Email for user.
	Email pulumi.StringInput
	// List of groups this user is a part of.
	Groups pulumi.StringArrayInput
	// When set, disables the fallback of using an internal password when external authentication (such as LDAP) is enabled.
	InternalPasswordDisabled pulumi.BoolPtrInput
	// Username for user.
	Name pulumi.StringPtrInput
	// Password for the user.
	Password pulumi.StringInput
	// When set, this user can update his profile details (except for the password. Only an administrator can update the password). Default value is `true`.
	ProfileUpdatable pulumi.BoolPtrInput
}

func (ManagedUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedUserArgs)(nil)).Elem()
}

type ManagedUserInput interface {
	pulumi.Input

	ToManagedUserOutput() ManagedUserOutput
	ToManagedUserOutputWithContext(ctx context.Context) ManagedUserOutput
}

func (*ManagedUser) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedUser)(nil)).Elem()
}

func (i *ManagedUser) ToManagedUserOutput() ManagedUserOutput {
	return i.ToManagedUserOutputWithContext(context.Background())
}

func (i *ManagedUser) ToManagedUserOutputWithContext(ctx context.Context) ManagedUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedUserOutput)
}

// ManagedUserArrayInput is an input type that accepts ManagedUserArray and ManagedUserArrayOutput values.
// You can construct a concrete instance of `ManagedUserArrayInput` via:
//
//          ManagedUserArray{ ManagedUserArgs{...} }
type ManagedUserArrayInput interface {
	pulumi.Input

	ToManagedUserArrayOutput() ManagedUserArrayOutput
	ToManagedUserArrayOutputWithContext(context.Context) ManagedUserArrayOutput
}

type ManagedUserArray []ManagedUserInput

func (ManagedUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedUser)(nil)).Elem()
}

func (i ManagedUserArray) ToManagedUserArrayOutput() ManagedUserArrayOutput {
	return i.ToManagedUserArrayOutputWithContext(context.Background())
}

func (i ManagedUserArray) ToManagedUserArrayOutputWithContext(ctx context.Context) ManagedUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedUserArrayOutput)
}

// ManagedUserMapInput is an input type that accepts ManagedUserMap and ManagedUserMapOutput values.
// You can construct a concrete instance of `ManagedUserMapInput` via:
//
//          ManagedUserMap{ "key": ManagedUserArgs{...} }
type ManagedUserMapInput interface {
	pulumi.Input

	ToManagedUserMapOutput() ManagedUserMapOutput
	ToManagedUserMapOutputWithContext(context.Context) ManagedUserMapOutput
}

type ManagedUserMap map[string]ManagedUserInput

func (ManagedUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedUser)(nil)).Elem()
}

func (i ManagedUserMap) ToManagedUserMapOutput() ManagedUserMapOutput {
	return i.ToManagedUserMapOutputWithContext(context.Background())
}

func (i ManagedUserMap) ToManagedUserMapOutputWithContext(ctx context.Context) ManagedUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedUserMapOutput)
}

type ManagedUserOutput struct{ *pulumi.OutputState }

func (ManagedUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedUser)(nil)).Elem()
}

func (o ManagedUserOutput) ToManagedUserOutput() ManagedUserOutput {
	return o
}

func (o ManagedUserOutput) ToManagedUserOutputWithContext(ctx context.Context) ManagedUserOutput {
	return o
}

// When enabled, this user is an administrator with all the ensuing privileges. Default value is `false`.
func (o ManagedUserOutput) Admin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedUser) pulumi.BoolPtrOutput { return v.Admin }).(pulumi.BoolPtrOutput)
}

// When set, this user can only access Artifactory through the REST API. This option cannot be set if the user has Admin privileges. Default value is `true`.
func (o ManagedUserOutput) DisableUiAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedUser) pulumi.BoolPtrOutput { return v.DisableUiAccess }).(pulumi.BoolPtrOutput)
}

// Email for user.
func (o ManagedUserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedUser) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// List of groups this user is a part of.
func (o ManagedUserOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedUser) pulumi.StringArrayOutput { return v.Groups }).(pulumi.StringArrayOutput)
}

// When set, disables the fallback of using an internal password when external authentication (such as LDAP) is enabled.
func (o ManagedUserOutput) InternalPasswordDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedUser) pulumi.BoolPtrOutput { return v.InternalPasswordDisabled }).(pulumi.BoolPtrOutput)
}

// Username for user.
func (o ManagedUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedUser) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Password for the user.
func (o ManagedUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// When set, this user can update his profile details (except for the password. Only an administrator can update the password). Default value is `true`.
func (o ManagedUserOutput) ProfileUpdatable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedUser) pulumi.BoolPtrOutput { return v.ProfileUpdatable }).(pulumi.BoolPtrOutput)
}

type ManagedUserArrayOutput struct{ *pulumi.OutputState }

func (ManagedUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedUser)(nil)).Elem()
}

func (o ManagedUserArrayOutput) ToManagedUserArrayOutput() ManagedUserArrayOutput {
	return o
}

func (o ManagedUserArrayOutput) ToManagedUserArrayOutputWithContext(ctx context.Context) ManagedUserArrayOutput {
	return o
}

func (o ManagedUserArrayOutput) Index(i pulumi.IntInput) ManagedUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManagedUser {
		return vs[0].([]*ManagedUser)[vs[1].(int)]
	}).(ManagedUserOutput)
}

type ManagedUserMapOutput struct{ *pulumi.OutputState }

func (ManagedUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedUser)(nil)).Elem()
}

func (o ManagedUserMapOutput) ToManagedUserMapOutput() ManagedUserMapOutput {
	return o
}

func (o ManagedUserMapOutput) ToManagedUserMapOutputWithContext(ctx context.Context) ManagedUserMapOutput {
	return o
}

func (o ManagedUserMapOutput) MapIndex(k pulumi.StringInput) ManagedUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManagedUser {
		return vs[0].(map[string]*ManagedUser)[vs[1].(string)]
	}).(ManagedUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedUserInput)(nil)).Elem(), &ManagedUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedUserArrayInput)(nil)).Elem(), ManagedUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedUserMapInput)(nil)).Elem(), ManagedUserMap{})
	pulumi.RegisterOutputType(ManagedUserOutput{})
	pulumi.RegisterOutputType(ManagedUserArrayOutput{})
	pulumi.RegisterOutputType(ManagedUserMapOutput{})
}
