// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-artifactory/sdk/v8/go/artifactory/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Artifactory webhook resource. This can be used to register and manage Artifactory webhook subscription which enables you to be notified or notify other users when such events take place in Artifactory.
//
// ## Example Usage
//
// .
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-artifactory/sdk/v8/go/artifactory"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := artifactory.NewReleaseBundleV2Webhook(ctx, "release-bundle-v2-webhook", &artifactory.ReleaseBundleV2WebhookArgs{
//				Key: pulumi.String("release-bundle-v2-webhook"),
//				EventTypes: pulumi.StringArray{
//					pulumi.String("release_bundle_v2_started"),
//					pulumi.String("release_bundle_v2_failed"),
//					pulumi.String("release_bundle_v2_completed"),
//				},
//				Criteria: &artifactory.ReleaseBundleV2WebhookCriteriaArgs{
//					AnyReleaseBundle: pulumi.Bool(false),
//					SelectedReleaseBundles: pulumi.StringArray{
//						pulumi.String("bundle-name"),
//					},
//					IncludePatterns: pulumi.StringArray{
//						pulumi.String("foo/**"),
//					},
//					ExcludePatterns: pulumi.StringArray{
//						pulumi.String("bar/**"),
//					},
//				},
//				Handlers: artifactory.ReleaseBundleV2WebhookHandlerArray{
//					&artifactory.ReleaseBundleV2WebhookHandlerArgs{
//						Url:    pulumi.String("http://tempurl.org/webhook"),
//						Secret: pulumi.String("some-secret"),
//						Proxy:  pulumi.String("proxy-key"),
//						CustomHttpHeaders: pulumi.StringMap{
//							"header-1": pulumi.String("value-1"),
//							"header-2": pulumi.String("value-2"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ReleaseBundleV2Webhook struct {
	pulumi.CustomResourceState

	// Specifies where the webhook will be applied on which repositories.
	Criteria ReleaseBundleV2WebhookCriteriaOutput `pulumi:"criteria"`
	// Webhook description. Max length 1000 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Status of webhook. Default to `true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow values: `releaseBundleV2Started`, `releaseBundleV2Failed`, `releaseBundleV2Completed`.
	EventTypes pulumi.StringArrayOutput `pulumi:"eventTypes"`
	// At least one is required.
	Handlers ReleaseBundleV2WebhookHandlerArrayOutput `pulumi:"handlers"`
	// The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.
	Key pulumi.StringOutput `pulumi:"key"`
}

// NewReleaseBundleV2Webhook registers a new resource with the given unique name, arguments, and options.
func NewReleaseBundleV2Webhook(ctx *pulumi.Context,
	name string, args *ReleaseBundleV2WebhookArgs, opts ...pulumi.ResourceOption) (*ReleaseBundleV2Webhook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Criteria == nil {
		return nil, errors.New("invalid value for required argument 'Criteria'")
	}
	if args.EventTypes == nil {
		return nil, errors.New("invalid value for required argument 'EventTypes'")
	}
	if args.Handlers == nil {
		return nil, errors.New("invalid value for required argument 'Handlers'")
	}
	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ReleaseBundleV2Webhook
	err := ctx.RegisterResource("artifactory:index/releaseBundleV2Webhook:ReleaseBundleV2Webhook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReleaseBundleV2Webhook gets an existing ReleaseBundleV2Webhook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReleaseBundleV2Webhook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReleaseBundleV2WebhookState, opts ...pulumi.ResourceOption) (*ReleaseBundleV2Webhook, error) {
	var resource ReleaseBundleV2Webhook
	err := ctx.ReadResource("artifactory:index/releaseBundleV2Webhook:ReleaseBundleV2Webhook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReleaseBundleV2Webhook resources.
type releaseBundleV2WebhookState struct {
	// Specifies where the webhook will be applied on which repositories.
	Criteria *ReleaseBundleV2WebhookCriteria `pulumi:"criteria"`
	// Webhook description. Max length 1000 characters.
	Description *string `pulumi:"description"`
	// Status of webhook. Default to `true`.
	Enabled *bool `pulumi:"enabled"`
	// List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow values: `releaseBundleV2Started`, `releaseBundleV2Failed`, `releaseBundleV2Completed`.
	EventTypes []string `pulumi:"eventTypes"`
	// At least one is required.
	Handlers []ReleaseBundleV2WebhookHandler `pulumi:"handlers"`
	// The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.
	Key *string `pulumi:"key"`
}

type ReleaseBundleV2WebhookState struct {
	// Specifies where the webhook will be applied on which repositories.
	Criteria ReleaseBundleV2WebhookCriteriaPtrInput
	// Webhook description. Max length 1000 characters.
	Description pulumi.StringPtrInput
	// Status of webhook. Default to `true`.
	Enabled pulumi.BoolPtrInput
	// List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow values: `releaseBundleV2Started`, `releaseBundleV2Failed`, `releaseBundleV2Completed`.
	EventTypes pulumi.StringArrayInput
	// At least one is required.
	Handlers ReleaseBundleV2WebhookHandlerArrayInput
	// The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.
	Key pulumi.StringPtrInput
}

func (ReleaseBundleV2WebhookState) ElementType() reflect.Type {
	return reflect.TypeOf((*releaseBundleV2WebhookState)(nil)).Elem()
}

type releaseBundleV2WebhookArgs struct {
	// Specifies where the webhook will be applied on which repositories.
	Criteria ReleaseBundleV2WebhookCriteria `pulumi:"criteria"`
	// Webhook description. Max length 1000 characters.
	Description *string `pulumi:"description"`
	// Status of webhook. Default to `true`.
	Enabled *bool `pulumi:"enabled"`
	// List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow values: `releaseBundleV2Started`, `releaseBundleV2Failed`, `releaseBundleV2Completed`.
	EventTypes []string `pulumi:"eventTypes"`
	// At least one is required.
	Handlers []ReleaseBundleV2WebhookHandler `pulumi:"handlers"`
	// The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.
	Key string `pulumi:"key"`
}

// The set of arguments for constructing a ReleaseBundleV2Webhook resource.
type ReleaseBundleV2WebhookArgs struct {
	// Specifies where the webhook will be applied on which repositories.
	Criteria ReleaseBundleV2WebhookCriteriaInput
	// Webhook description. Max length 1000 characters.
	Description pulumi.StringPtrInput
	// Status of webhook. Default to `true`.
	Enabled pulumi.BoolPtrInput
	// List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow values: `releaseBundleV2Started`, `releaseBundleV2Failed`, `releaseBundleV2Completed`.
	EventTypes pulumi.StringArrayInput
	// At least one is required.
	Handlers ReleaseBundleV2WebhookHandlerArrayInput
	// The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.
	Key pulumi.StringInput
}

func (ReleaseBundleV2WebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*releaseBundleV2WebhookArgs)(nil)).Elem()
}

type ReleaseBundleV2WebhookInput interface {
	pulumi.Input

	ToReleaseBundleV2WebhookOutput() ReleaseBundleV2WebhookOutput
	ToReleaseBundleV2WebhookOutputWithContext(ctx context.Context) ReleaseBundleV2WebhookOutput
}

func (*ReleaseBundleV2Webhook) ElementType() reflect.Type {
	return reflect.TypeOf((**ReleaseBundleV2Webhook)(nil)).Elem()
}

func (i *ReleaseBundleV2Webhook) ToReleaseBundleV2WebhookOutput() ReleaseBundleV2WebhookOutput {
	return i.ToReleaseBundleV2WebhookOutputWithContext(context.Background())
}

func (i *ReleaseBundleV2Webhook) ToReleaseBundleV2WebhookOutputWithContext(ctx context.Context) ReleaseBundleV2WebhookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseBundleV2WebhookOutput)
}

// ReleaseBundleV2WebhookArrayInput is an input type that accepts ReleaseBundleV2WebhookArray and ReleaseBundleV2WebhookArrayOutput values.
// You can construct a concrete instance of `ReleaseBundleV2WebhookArrayInput` via:
//
//	ReleaseBundleV2WebhookArray{ ReleaseBundleV2WebhookArgs{...} }
type ReleaseBundleV2WebhookArrayInput interface {
	pulumi.Input

	ToReleaseBundleV2WebhookArrayOutput() ReleaseBundleV2WebhookArrayOutput
	ToReleaseBundleV2WebhookArrayOutputWithContext(context.Context) ReleaseBundleV2WebhookArrayOutput
}

type ReleaseBundleV2WebhookArray []ReleaseBundleV2WebhookInput

func (ReleaseBundleV2WebhookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReleaseBundleV2Webhook)(nil)).Elem()
}

func (i ReleaseBundleV2WebhookArray) ToReleaseBundleV2WebhookArrayOutput() ReleaseBundleV2WebhookArrayOutput {
	return i.ToReleaseBundleV2WebhookArrayOutputWithContext(context.Background())
}

func (i ReleaseBundleV2WebhookArray) ToReleaseBundleV2WebhookArrayOutputWithContext(ctx context.Context) ReleaseBundleV2WebhookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseBundleV2WebhookArrayOutput)
}

// ReleaseBundleV2WebhookMapInput is an input type that accepts ReleaseBundleV2WebhookMap and ReleaseBundleV2WebhookMapOutput values.
// You can construct a concrete instance of `ReleaseBundleV2WebhookMapInput` via:
//
//	ReleaseBundleV2WebhookMap{ "key": ReleaseBundleV2WebhookArgs{...} }
type ReleaseBundleV2WebhookMapInput interface {
	pulumi.Input

	ToReleaseBundleV2WebhookMapOutput() ReleaseBundleV2WebhookMapOutput
	ToReleaseBundleV2WebhookMapOutputWithContext(context.Context) ReleaseBundleV2WebhookMapOutput
}

type ReleaseBundleV2WebhookMap map[string]ReleaseBundleV2WebhookInput

func (ReleaseBundleV2WebhookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReleaseBundleV2Webhook)(nil)).Elem()
}

func (i ReleaseBundleV2WebhookMap) ToReleaseBundleV2WebhookMapOutput() ReleaseBundleV2WebhookMapOutput {
	return i.ToReleaseBundleV2WebhookMapOutputWithContext(context.Background())
}

func (i ReleaseBundleV2WebhookMap) ToReleaseBundleV2WebhookMapOutputWithContext(ctx context.Context) ReleaseBundleV2WebhookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseBundleV2WebhookMapOutput)
}

type ReleaseBundleV2WebhookOutput struct{ *pulumi.OutputState }

func (ReleaseBundleV2WebhookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReleaseBundleV2Webhook)(nil)).Elem()
}

func (o ReleaseBundleV2WebhookOutput) ToReleaseBundleV2WebhookOutput() ReleaseBundleV2WebhookOutput {
	return o
}

func (o ReleaseBundleV2WebhookOutput) ToReleaseBundleV2WebhookOutputWithContext(ctx context.Context) ReleaseBundleV2WebhookOutput {
	return o
}

// Specifies where the webhook will be applied on which repositories.
func (o ReleaseBundleV2WebhookOutput) Criteria() ReleaseBundleV2WebhookCriteriaOutput {
	return o.ApplyT(func(v *ReleaseBundleV2Webhook) ReleaseBundleV2WebhookCriteriaOutput { return v.Criteria }).(ReleaseBundleV2WebhookCriteriaOutput)
}

// Webhook description. Max length 1000 characters.
func (o ReleaseBundleV2WebhookOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReleaseBundleV2Webhook) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Status of webhook. Default to `true`.
func (o ReleaseBundleV2WebhookOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReleaseBundleV2Webhook) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow values: `releaseBundleV2Started`, `releaseBundleV2Failed`, `releaseBundleV2Completed`.
func (o ReleaseBundleV2WebhookOutput) EventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReleaseBundleV2Webhook) pulumi.StringArrayOutput { return v.EventTypes }).(pulumi.StringArrayOutput)
}

// At least one is required.
func (o ReleaseBundleV2WebhookOutput) Handlers() ReleaseBundleV2WebhookHandlerArrayOutput {
	return o.ApplyT(func(v *ReleaseBundleV2Webhook) ReleaseBundleV2WebhookHandlerArrayOutput { return v.Handlers }).(ReleaseBundleV2WebhookHandlerArrayOutput)
}

// The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.
func (o ReleaseBundleV2WebhookOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *ReleaseBundleV2Webhook) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

type ReleaseBundleV2WebhookArrayOutput struct{ *pulumi.OutputState }

func (ReleaseBundleV2WebhookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReleaseBundleV2Webhook)(nil)).Elem()
}

func (o ReleaseBundleV2WebhookArrayOutput) ToReleaseBundleV2WebhookArrayOutput() ReleaseBundleV2WebhookArrayOutput {
	return o
}

func (o ReleaseBundleV2WebhookArrayOutput) ToReleaseBundleV2WebhookArrayOutputWithContext(ctx context.Context) ReleaseBundleV2WebhookArrayOutput {
	return o
}

func (o ReleaseBundleV2WebhookArrayOutput) Index(i pulumi.IntInput) ReleaseBundleV2WebhookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReleaseBundleV2Webhook {
		return vs[0].([]*ReleaseBundleV2Webhook)[vs[1].(int)]
	}).(ReleaseBundleV2WebhookOutput)
}

type ReleaseBundleV2WebhookMapOutput struct{ *pulumi.OutputState }

func (ReleaseBundleV2WebhookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReleaseBundleV2Webhook)(nil)).Elem()
}

func (o ReleaseBundleV2WebhookMapOutput) ToReleaseBundleV2WebhookMapOutput() ReleaseBundleV2WebhookMapOutput {
	return o
}

func (o ReleaseBundleV2WebhookMapOutput) ToReleaseBundleV2WebhookMapOutputWithContext(ctx context.Context) ReleaseBundleV2WebhookMapOutput {
	return o
}

func (o ReleaseBundleV2WebhookMapOutput) MapIndex(k pulumi.StringInput) ReleaseBundleV2WebhookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReleaseBundleV2Webhook {
		return vs[0].(map[string]*ReleaseBundleV2Webhook)[vs[1].(string)]
	}).(ReleaseBundleV2WebhookOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReleaseBundleV2WebhookInput)(nil)).Elem(), &ReleaseBundleV2Webhook{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReleaseBundleV2WebhookArrayInput)(nil)).Elem(), ReleaseBundleV2WebhookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReleaseBundleV2WebhookMapInput)(nil)).Elem(), ReleaseBundleV2WebhookMap{})
	pulumi.RegisterOutputType(ReleaseBundleV2WebhookOutput{})
	pulumi.RegisterOutputType(ReleaseBundleV2WebhookArrayOutput{})
	pulumi.RegisterOutputType(ReleaseBundleV2WebhookMapOutput{})
}
