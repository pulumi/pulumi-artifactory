// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Artifactory Remote Repository Resource
//
// Provides an Artifactory remote `helm` repository resource. This provides helm specific fields and is the only way to get them.
// Official documentation can be found [here](https://www.jfrog.com/confluence/display/JFROG/Package+Management),
// although helm is (currently) not listed as a supported format
//
// ## Example Usage
//
// Includes only new and relevant fields, for anything else, see: generic repo.
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := artifactory.NewRemoteHelmRepository(ctx, "helm-remote", &artifactory.RemoteHelmRepositoryArgs{
// 			ExternalDependenciesEnabled: pulumi.Bool(true),
// 			ExternalDependenciesPatterns: pulumi.StringArray{
// 				pulumi.String("**github.com**"),
// 			},
// 			HelmChartsBaseUrl: pulumi.String("https://foo.com"),
// 			Key:               pulumi.String("helm-remote-foo25"),
// 			Url:               pulumi.String("https://repo.chartcenter.io/"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type RemoteHelmRepository struct {
	pulumi.CustomResourceState

	// Also known as 'Lenient Host Authentication', Allow credentials of this repository to be used on requests redirected to any other host.
	AllowAnyHostAuth pulumi.BoolOutput `pulumi:"allowAnyHostAuth"`
	// The number of seconds the repository stays in assumed offline state after a connection error. At the end of this time, an online check is attempted in order to reset the offline status. A value of 0 means the repository is never assumed offline. Default to 300.
	AssumedOfflinePeriodSecs pulumi.IntPtrOutput `pulumi:"assumedOfflinePeriodSecs"`
	// (A.K.A 'Ignore Repository' on the UI) When set, the repository or its local cache do not participate in artifact resolution.
	BlackedOut pulumi.BoolOutput `pulumi:"blackedOut"`
	// Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources, HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked, Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
	BlockMismatchingMimeTypes pulumi.BoolOutput `pulumi:"blockMismatchingMimeTypes"`
	// Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources, HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked, Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
	BypassHeadRequests   pulumi.BoolOutput   `pulumi:"bypassHeadRequests"`
	ClientTlsCertificate pulumi.StringOutput `pulumi:"clientTlsCertificate"`
	// Reference [JFROG Smart Remote Repositories](https://www.jfrog.com/confluence/display/JFROG/Smart+Remote+Repositories)
	ContentSynchronisation RemoteHelmRepositoryContentSynchronisationOutput `pulumi:"contentSynchronisation"`
	Description            pulumi.StringOutput                              `pulumi:"description"`
	// Enables cookie management if the remote repository uses cookies to manage client state.
	EnableCookieManagement pulumi.BoolOutput `pulumi:"enableCookieManagement"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*. By default no artifacts are excluded.
	ExcludesPattern pulumi.StringOutput `pulumi:"excludesPattern"`
	// When set, external dependencies are rewritten.
	ExternalDependenciesEnabled pulumi.BoolPtrOutput `pulumi:"externalDependenciesEnabled"`
	// An Allow List of Ant-style path expressions that specify where external
	// dependencies may be downloaded from. By default, this is an empty list which means that no dependencies may be downloaded
	// from external sources. Note that the official documentation states the default is '**', which is correct when creating
	// repositories in the UI, but incorrect for the API.
	ExternalDependenciesPatterns pulumi.StringArrayOutput `pulumi:"externalDependenciesPatterns"`
	// This field is not returned in a get payload but is offered on the UI. It's inserted here for inclusive and informational reasons. It does not function
	//
	// Deprecated: This field is not returned in a get payload but is offered on the UI. It's inserted here for inclusive and informational reasons. It does not function
	FailedRetrievalCachePeriodSecs pulumi.IntOutput `pulumi:"failedRetrievalCachePeriodSecs"`
	// When set, Artifactory will return an error to the client that causes the build to fail if there is a failure to communicate with this repository.
	HardFail pulumi.BoolOutput `pulumi:"hardFail"`
	// - No documentation is available. Hopefully you know what this means
	HelmChartsBaseUrl pulumi.StringPtrOutput `pulumi:"helmChartsBaseUrl"`
	// List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern pulumi.StringOutput `pulumi:"includesPattern"`
	// The repository identifier. Must be unique system-wide
	Key pulumi.StringOutput `pulumi:"key"`
	// - Lists the items of remote folders in simple and list browsing. The remote content is cached according to the value of the 'Retrieval Cache Period'. This field exists in the API but not in the UI.
	ListRemoteFolderItems pulumi.BoolPtrOutput `pulumi:"listRemoteFolderItems"`
	// The local address to be used when creating connections. Useful for specifying the interface to use on systems with multiple network interfaces.
	LocalAddress pulumi.StringPtrOutput `pulumi:"localAddress"`
	// The number of seconds to cache artifact retrieval misses (artifact not found). A value of 0 indicates no caching.
	MissedCachePeriodSeconds pulumi.IntOutput       `pulumi:"missedCachePeriodSeconds"`
	Notes                    pulumi.StringPtrOutput `pulumi:"notes"`
	// If set, Artifactory does not try to fetch remote artifacts. Only locally-cached artifacts are retrieved.
	Offline     pulumi.BoolOutput      `pulumi:"offline"`
	PackageType pulumi.StringOutput    `pulumi:"packageType"`
	Password    pulumi.StringPtrOutput `pulumi:"password"`
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution pulumi.BoolOutput `pulumi:"priorityResolution"`
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments pulumi.StringArrayOutput `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey pulumi.StringPtrOutput `pulumi:"projectKey"`
	// When set, if query params are included in the request to Artifactory, they will be passed on to the remote repository.
	PropagateQueryParams pulumi.BoolPtrOutput `pulumi:"propagateQueryParams"`
	// List of property set name
	PropertySets pulumi.StringArrayOutput `pulumi:"propertySets"`
	Proxy        pulumi.StringOutput      `pulumi:"proxy"`
	// Repository layout key for the remote layout mapping
	RemoteRepoLayoutRef pulumi.StringOutput `pulumi:"remoteRepoLayoutRef"`
	// Repository layout key for the remote repository
	RepoLayoutRef pulumi.StringPtrOutput `pulumi:"repoLayoutRef"`
	// The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.
	RetrievalCachePeriodSeconds pulumi.IntOutput  `pulumi:"retrievalCachePeriodSeconds"`
	ShareConfiguration          pulumi.BoolOutput `pulumi:"shareConfiguration"`
	// Network timeout (in ms) to use when establishing a connection and for unanswered requests. Timing out on a network operation is considered a retrieval failure.
	SocketTimeoutMillis pulumi.IntOutput `pulumi:"socketTimeoutMillis"`
	// When set, the repository should store cached artifacts locally. When not set, artifacts are not stored locally, and direct repository-to-client streaming is used. This can be useful for multi-server setups over a high-speed LAN, with one Artifactory caching certain data on central storage, and streaming it directly to satellite pass-though Artifactory servers.
	StoreArtifactsLocally pulumi.BoolOutput `pulumi:"storeArtifactsLocally"`
	// When set, remote artifacts are fetched along with their properties.
	SynchronizeProperties               pulumi.BoolOutput `pulumi:"synchronizeProperties"`
	UnusedArtifactsCleanupPeriodEnabled pulumi.BoolOutput `pulumi:"unusedArtifactsCleanupPeriodEnabled"`
	// The number of hours to wait before an artifact is deemed "unused" and eligible for cleanup from the repository. A value of 0 means automatic cleanup of cached artifacts is disabled.
	UnusedArtifactsCleanupPeriodHours pulumi.IntOutput `pulumi:"unusedArtifactsCleanupPeriodHours"`
	// - the remote repo URL. You kinda don't have a remote repo without it
	Url      pulumi.StringOutput    `pulumi:"url"`
	Username pulumi.StringPtrOutput `pulumi:"username"`
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.
	XrayIndex pulumi.BoolPtrOutput `pulumi:"xrayIndex"`
}

// NewRemoteHelmRepository registers a new resource with the given unique name, arguments, and options.
func NewRemoteHelmRepository(ctx *pulumi.Context,
	name string, args *RemoteHelmRepositoryArgs, opts ...pulumi.ResourceOption) (*RemoteHelmRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	var resource RemoteHelmRepository
	err := ctx.RegisterResource("artifactory:index/remoteHelmRepository:RemoteHelmRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRemoteHelmRepository gets an existing RemoteHelmRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRemoteHelmRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RemoteHelmRepositoryState, opts ...pulumi.ResourceOption) (*RemoteHelmRepository, error) {
	var resource RemoteHelmRepository
	err := ctx.ReadResource("artifactory:index/remoteHelmRepository:RemoteHelmRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RemoteHelmRepository resources.
type remoteHelmRepositoryState struct {
	// Also known as 'Lenient Host Authentication', Allow credentials of this repository to be used on requests redirected to any other host.
	AllowAnyHostAuth *bool `pulumi:"allowAnyHostAuth"`
	// The number of seconds the repository stays in assumed offline state after a connection error. At the end of this time, an online check is attempted in order to reset the offline status. A value of 0 means the repository is never assumed offline. Default to 300.
	AssumedOfflinePeriodSecs *int `pulumi:"assumedOfflinePeriodSecs"`
	// (A.K.A 'Ignore Repository' on the UI) When set, the repository or its local cache do not participate in artifact resolution.
	BlackedOut *bool `pulumi:"blackedOut"`
	// Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources, HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked, Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
	BlockMismatchingMimeTypes *bool `pulumi:"blockMismatchingMimeTypes"`
	// Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources, HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked, Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
	BypassHeadRequests   *bool   `pulumi:"bypassHeadRequests"`
	ClientTlsCertificate *string `pulumi:"clientTlsCertificate"`
	// Reference [JFROG Smart Remote Repositories](https://www.jfrog.com/confluence/display/JFROG/Smart+Remote+Repositories)
	ContentSynchronisation *RemoteHelmRepositoryContentSynchronisation `pulumi:"contentSynchronisation"`
	Description            *string                                     `pulumi:"description"`
	// Enables cookie management if the remote repository uses cookies to manage client state.
	EnableCookieManagement *bool `pulumi:"enableCookieManagement"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*. By default no artifacts are excluded.
	ExcludesPattern *string `pulumi:"excludesPattern"`
	// When set, external dependencies are rewritten.
	ExternalDependenciesEnabled *bool `pulumi:"externalDependenciesEnabled"`
	// An Allow List of Ant-style path expressions that specify where external
	// dependencies may be downloaded from. By default, this is an empty list which means that no dependencies may be downloaded
	// from external sources. Note that the official documentation states the default is '**', which is correct when creating
	// repositories in the UI, but incorrect for the API.
	ExternalDependenciesPatterns []string `pulumi:"externalDependenciesPatterns"`
	// This field is not returned in a get payload but is offered on the UI. It's inserted here for inclusive and informational reasons. It does not function
	//
	// Deprecated: This field is not returned in a get payload but is offered on the UI. It's inserted here for inclusive and informational reasons. It does not function
	FailedRetrievalCachePeriodSecs *int `pulumi:"failedRetrievalCachePeriodSecs"`
	// When set, Artifactory will return an error to the client that causes the build to fail if there is a failure to communicate with this repository.
	HardFail *bool `pulumi:"hardFail"`
	// - No documentation is available. Hopefully you know what this means
	HelmChartsBaseUrl *string `pulumi:"helmChartsBaseUrl"`
	// List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern *string `pulumi:"includesPattern"`
	// The repository identifier. Must be unique system-wide
	Key *string `pulumi:"key"`
	// - Lists the items of remote folders in simple and list browsing. The remote content is cached according to the value of the 'Retrieval Cache Period'. This field exists in the API but not in the UI.
	ListRemoteFolderItems *bool `pulumi:"listRemoteFolderItems"`
	// The local address to be used when creating connections. Useful for specifying the interface to use on systems with multiple network interfaces.
	LocalAddress *string `pulumi:"localAddress"`
	// The number of seconds to cache artifact retrieval misses (artifact not found). A value of 0 indicates no caching.
	MissedCachePeriodSeconds *int    `pulumi:"missedCachePeriodSeconds"`
	Notes                    *string `pulumi:"notes"`
	// If set, Artifactory does not try to fetch remote artifacts. Only locally-cached artifacts are retrieved.
	Offline     *bool   `pulumi:"offline"`
	PackageType *string `pulumi:"packageType"`
	Password    *string `pulumi:"password"`
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution *bool `pulumi:"priorityResolution"`
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments []string `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey *string `pulumi:"projectKey"`
	// When set, if query params are included in the request to Artifactory, they will be passed on to the remote repository.
	PropagateQueryParams *bool `pulumi:"propagateQueryParams"`
	// List of property set name
	PropertySets []string `pulumi:"propertySets"`
	Proxy        *string  `pulumi:"proxy"`
	// Repository layout key for the remote layout mapping
	RemoteRepoLayoutRef *string `pulumi:"remoteRepoLayoutRef"`
	// Repository layout key for the remote repository
	RepoLayoutRef *string `pulumi:"repoLayoutRef"`
	// The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.
	RetrievalCachePeriodSeconds *int  `pulumi:"retrievalCachePeriodSeconds"`
	ShareConfiguration          *bool `pulumi:"shareConfiguration"`
	// Network timeout (in ms) to use when establishing a connection and for unanswered requests. Timing out on a network operation is considered a retrieval failure.
	SocketTimeoutMillis *int `pulumi:"socketTimeoutMillis"`
	// When set, the repository should store cached artifacts locally. When not set, artifacts are not stored locally, and direct repository-to-client streaming is used. This can be useful for multi-server setups over a high-speed LAN, with one Artifactory caching certain data on central storage, and streaming it directly to satellite pass-though Artifactory servers.
	StoreArtifactsLocally *bool `pulumi:"storeArtifactsLocally"`
	// When set, remote artifacts are fetched along with their properties.
	SynchronizeProperties               *bool `pulumi:"synchronizeProperties"`
	UnusedArtifactsCleanupPeriodEnabled *bool `pulumi:"unusedArtifactsCleanupPeriodEnabled"`
	// The number of hours to wait before an artifact is deemed "unused" and eligible for cleanup from the repository. A value of 0 means automatic cleanup of cached artifacts is disabled.
	UnusedArtifactsCleanupPeriodHours *int `pulumi:"unusedArtifactsCleanupPeriodHours"`
	// - the remote repo URL. You kinda don't have a remote repo without it
	Url      *string `pulumi:"url"`
	Username *string `pulumi:"username"`
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.
	XrayIndex *bool `pulumi:"xrayIndex"`
}

type RemoteHelmRepositoryState struct {
	// Also known as 'Lenient Host Authentication', Allow credentials of this repository to be used on requests redirected to any other host.
	AllowAnyHostAuth pulumi.BoolPtrInput
	// The number of seconds the repository stays in assumed offline state after a connection error. At the end of this time, an online check is attempted in order to reset the offline status. A value of 0 means the repository is never assumed offline. Default to 300.
	AssumedOfflinePeriodSecs pulumi.IntPtrInput
	// (A.K.A 'Ignore Repository' on the UI) When set, the repository or its local cache do not participate in artifact resolution.
	BlackedOut pulumi.BoolPtrInput
	// Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources, HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked, Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
	BlockMismatchingMimeTypes pulumi.BoolPtrInput
	// Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources, HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked, Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
	BypassHeadRequests   pulumi.BoolPtrInput
	ClientTlsCertificate pulumi.StringPtrInput
	// Reference [JFROG Smart Remote Repositories](https://www.jfrog.com/confluence/display/JFROG/Smart+Remote+Repositories)
	ContentSynchronisation RemoteHelmRepositoryContentSynchronisationPtrInput
	Description            pulumi.StringPtrInput
	// Enables cookie management if the remote repository uses cookies to manage client state.
	EnableCookieManagement pulumi.BoolPtrInput
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*. By default no artifacts are excluded.
	ExcludesPattern pulumi.StringPtrInput
	// When set, external dependencies are rewritten.
	ExternalDependenciesEnabled pulumi.BoolPtrInput
	// An Allow List of Ant-style path expressions that specify where external
	// dependencies may be downloaded from. By default, this is an empty list which means that no dependencies may be downloaded
	// from external sources. Note that the official documentation states the default is '**', which is correct when creating
	// repositories in the UI, but incorrect for the API.
	ExternalDependenciesPatterns pulumi.StringArrayInput
	// This field is not returned in a get payload but is offered on the UI. It's inserted here for inclusive and informational reasons. It does not function
	//
	// Deprecated: This field is not returned in a get payload but is offered on the UI. It's inserted here for inclusive and informational reasons. It does not function
	FailedRetrievalCachePeriodSecs pulumi.IntPtrInput
	// When set, Artifactory will return an error to the client that causes the build to fail if there is a failure to communicate with this repository.
	HardFail pulumi.BoolPtrInput
	// - No documentation is available. Hopefully you know what this means
	HelmChartsBaseUrl pulumi.StringPtrInput
	// List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern pulumi.StringPtrInput
	// The repository identifier. Must be unique system-wide
	Key pulumi.StringPtrInput
	// - Lists the items of remote folders in simple and list browsing. The remote content is cached according to the value of the 'Retrieval Cache Period'. This field exists in the API but not in the UI.
	ListRemoteFolderItems pulumi.BoolPtrInput
	// The local address to be used when creating connections. Useful for specifying the interface to use on systems with multiple network interfaces.
	LocalAddress pulumi.StringPtrInput
	// The number of seconds to cache artifact retrieval misses (artifact not found). A value of 0 indicates no caching.
	MissedCachePeriodSeconds pulumi.IntPtrInput
	Notes                    pulumi.StringPtrInput
	// If set, Artifactory does not try to fetch remote artifacts. Only locally-cached artifacts are retrieved.
	Offline     pulumi.BoolPtrInput
	PackageType pulumi.StringPtrInput
	Password    pulumi.StringPtrInput
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution pulumi.BoolPtrInput
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments pulumi.StringArrayInput
	// Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey pulumi.StringPtrInput
	// When set, if query params are included in the request to Artifactory, they will be passed on to the remote repository.
	PropagateQueryParams pulumi.BoolPtrInput
	// List of property set name
	PropertySets pulumi.StringArrayInput
	Proxy        pulumi.StringPtrInput
	// Repository layout key for the remote layout mapping
	RemoteRepoLayoutRef pulumi.StringPtrInput
	// Repository layout key for the remote repository
	RepoLayoutRef pulumi.StringPtrInput
	// The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.
	RetrievalCachePeriodSeconds pulumi.IntPtrInput
	ShareConfiguration          pulumi.BoolPtrInput
	// Network timeout (in ms) to use when establishing a connection and for unanswered requests. Timing out on a network operation is considered a retrieval failure.
	SocketTimeoutMillis pulumi.IntPtrInput
	// When set, the repository should store cached artifacts locally. When not set, artifacts are not stored locally, and direct repository-to-client streaming is used. This can be useful for multi-server setups over a high-speed LAN, with one Artifactory caching certain data on central storage, and streaming it directly to satellite pass-though Artifactory servers.
	StoreArtifactsLocally pulumi.BoolPtrInput
	// When set, remote artifacts are fetched along with their properties.
	SynchronizeProperties               pulumi.BoolPtrInput
	UnusedArtifactsCleanupPeriodEnabled pulumi.BoolPtrInput
	// The number of hours to wait before an artifact is deemed "unused" and eligible for cleanup from the repository. A value of 0 means automatic cleanup of cached artifacts is disabled.
	UnusedArtifactsCleanupPeriodHours pulumi.IntPtrInput
	// - the remote repo URL. You kinda don't have a remote repo without it
	Url      pulumi.StringPtrInput
	Username pulumi.StringPtrInput
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.
	XrayIndex pulumi.BoolPtrInput
}

func (RemoteHelmRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*remoteHelmRepositoryState)(nil)).Elem()
}

type remoteHelmRepositoryArgs struct {
	// Also known as 'Lenient Host Authentication', Allow credentials of this repository to be used on requests redirected to any other host.
	AllowAnyHostAuth *bool `pulumi:"allowAnyHostAuth"`
	// The number of seconds the repository stays in assumed offline state after a connection error. At the end of this time, an online check is attempted in order to reset the offline status. A value of 0 means the repository is never assumed offline. Default to 300.
	AssumedOfflinePeriodSecs *int `pulumi:"assumedOfflinePeriodSecs"`
	// (A.K.A 'Ignore Repository' on the UI) When set, the repository or its local cache do not participate in artifact resolution.
	BlackedOut *bool `pulumi:"blackedOut"`
	// Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources, HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked, Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
	BlockMismatchingMimeTypes *bool `pulumi:"blockMismatchingMimeTypes"`
	// Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources, HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked, Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
	BypassHeadRequests   *bool   `pulumi:"bypassHeadRequests"`
	ClientTlsCertificate *string `pulumi:"clientTlsCertificate"`
	// Reference [JFROG Smart Remote Repositories](https://www.jfrog.com/confluence/display/JFROG/Smart+Remote+Repositories)
	ContentSynchronisation *RemoteHelmRepositoryContentSynchronisation `pulumi:"contentSynchronisation"`
	Description            *string                                     `pulumi:"description"`
	// Enables cookie management if the remote repository uses cookies to manage client state.
	EnableCookieManagement *bool `pulumi:"enableCookieManagement"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*. By default no artifacts are excluded.
	ExcludesPattern *string `pulumi:"excludesPattern"`
	// When set, external dependencies are rewritten.
	ExternalDependenciesEnabled *bool `pulumi:"externalDependenciesEnabled"`
	// An Allow List of Ant-style path expressions that specify where external
	// dependencies may be downloaded from. By default, this is an empty list which means that no dependencies may be downloaded
	// from external sources. Note that the official documentation states the default is '**', which is correct when creating
	// repositories in the UI, but incorrect for the API.
	ExternalDependenciesPatterns []string `pulumi:"externalDependenciesPatterns"`
	// When set, Artifactory will return an error to the client that causes the build to fail if there is a failure to communicate with this repository.
	HardFail *bool `pulumi:"hardFail"`
	// - No documentation is available. Hopefully you know what this means
	HelmChartsBaseUrl *string `pulumi:"helmChartsBaseUrl"`
	// List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern *string `pulumi:"includesPattern"`
	// The repository identifier. Must be unique system-wide
	Key string `pulumi:"key"`
	// - Lists the items of remote folders in simple and list browsing. The remote content is cached according to the value of the 'Retrieval Cache Period'. This field exists in the API but not in the UI.
	ListRemoteFolderItems *bool `pulumi:"listRemoteFolderItems"`
	// The local address to be used when creating connections. Useful for specifying the interface to use on systems with multiple network interfaces.
	LocalAddress *string `pulumi:"localAddress"`
	// The number of seconds to cache artifact retrieval misses (artifact not found). A value of 0 indicates no caching.
	MissedCachePeriodSeconds *int    `pulumi:"missedCachePeriodSeconds"`
	Notes                    *string `pulumi:"notes"`
	// If set, Artifactory does not try to fetch remote artifacts. Only locally-cached artifacts are retrieved.
	Offline  *bool   `pulumi:"offline"`
	Password *string `pulumi:"password"`
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution *bool `pulumi:"priorityResolution"`
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments []string `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey *string `pulumi:"projectKey"`
	// When set, if query params are included in the request to Artifactory, they will be passed on to the remote repository.
	PropagateQueryParams *bool `pulumi:"propagateQueryParams"`
	// List of property set name
	PropertySets []string `pulumi:"propertySets"`
	Proxy        *string  `pulumi:"proxy"`
	// Repository layout key for the remote layout mapping
	RemoteRepoLayoutRef *string `pulumi:"remoteRepoLayoutRef"`
	// Repository layout key for the remote repository
	RepoLayoutRef *string `pulumi:"repoLayoutRef"`
	// The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.
	RetrievalCachePeriodSeconds *int  `pulumi:"retrievalCachePeriodSeconds"`
	ShareConfiguration          *bool `pulumi:"shareConfiguration"`
	// Network timeout (in ms) to use when establishing a connection and for unanswered requests. Timing out on a network operation is considered a retrieval failure.
	SocketTimeoutMillis *int `pulumi:"socketTimeoutMillis"`
	// When set, the repository should store cached artifacts locally. When not set, artifacts are not stored locally, and direct repository-to-client streaming is used. This can be useful for multi-server setups over a high-speed LAN, with one Artifactory caching certain data on central storage, and streaming it directly to satellite pass-though Artifactory servers.
	StoreArtifactsLocally *bool `pulumi:"storeArtifactsLocally"`
	// When set, remote artifacts are fetched along with their properties.
	SynchronizeProperties               *bool `pulumi:"synchronizeProperties"`
	UnusedArtifactsCleanupPeriodEnabled *bool `pulumi:"unusedArtifactsCleanupPeriodEnabled"`
	// The number of hours to wait before an artifact is deemed "unused" and eligible for cleanup from the repository. A value of 0 means automatic cleanup of cached artifacts is disabled.
	UnusedArtifactsCleanupPeriodHours *int `pulumi:"unusedArtifactsCleanupPeriodHours"`
	// - the remote repo URL. You kinda don't have a remote repo without it
	Url      string  `pulumi:"url"`
	Username *string `pulumi:"username"`
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.
	XrayIndex *bool `pulumi:"xrayIndex"`
}

// The set of arguments for constructing a RemoteHelmRepository resource.
type RemoteHelmRepositoryArgs struct {
	// Also known as 'Lenient Host Authentication', Allow credentials of this repository to be used on requests redirected to any other host.
	AllowAnyHostAuth pulumi.BoolPtrInput
	// The number of seconds the repository stays in assumed offline state after a connection error. At the end of this time, an online check is attempted in order to reset the offline status. A value of 0 means the repository is never assumed offline. Default to 300.
	AssumedOfflinePeriodSecs pulumi.IntPtrInput
	// (A.K.A 'Ignore Repository' on the UI) When set, the repository or its local cache do not participate in artifact resolution.
	BlackedOut pulumi.BoolPtrInput
	// Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources, HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked, Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
	BlockMismatchingMimeTypes pulumi.BoolPtrInput
	// Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources, HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked, Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
	BypassHeadRequests   pulumi.BoolPtrInput
	ClientTlsCertificate pulumi.StringPtrInput
	// Reference [JFROG Smart Remote Repositories](https://www.jfrog.com/confluence/display/JFROG/Smart+Remote+Repositories)
	ContentSynchronisation RemoteHelmRepositoryContentSynchronisationPtrInput
	Description            pulumi.StringPtrInput
	// Enables cookie management if the remote repository uses cookies to manage client state.
	EnableCookieManagement pulumi.BoolPtrInput
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*. By default no artifacts are excluded.
	ExcludesPattern pulumi.StringPtrInput
	// When set, external dependencies are rewritten.
	ExternalDependenciesEnabled pulumi.BoolPtrInput
	// An Allow List of Ant-style path expressions that specify where external
	// dependencies may be downloaded from. By default, this is an empty list which means that no dependencies may be downloaded
	// from external sources. Note that the official documentation states the default is '**', which is correct when creating
	// repositories in the UI, but incorrect for the API.
	ExternalDependenciesPatterns pulumi.StringArrayInput
	// When set, Artifactory will return an error to the client that causes the build to fail if there is a failure to communicate with this repository.
	HardFail pulumi.BoolPtrInput
	// - No documentation is available. Hopefully you know what this means
	HelmChartsBaseUrl pulumi.StringPtrInput
	// List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern pulumi.StringPtrInput
	// The repository identifier. Must be unique system-wide
	Key pulumi.StringInput
	// - Lists the items of remote folders in simple and list browsing. The remote content is cached according to the value of the 'Retrieval Cache Period'. This field exists in the API but not in the UI.
	ListRemoteFolderItems pulumi.BoolPtrInput
	// The local address to be used when creating connections. Useful for specifying the interface to use on systems with multiple network interfaces.
	LocalAddress pulumi.StringPtrInput
	// The number of seconds to cache artifact retrieval misses (artifact not found). A value of 0 indicates no caching.
	MissedCachePeriodSeconds pulumi.IntPtrInput
	Notes                    pulumi.StringPtrInput
	// If set, Artifactory does not try to fetch remote artifacts. Only locally-cached artifacts are retrieved.
	Offline  pulumi.BoolPtrInput
	Password pulumi.StringPtrInput
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution pulumi.BoolPtrInput
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments pulumi.StringArrayInput
	// Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey pulumi.StringPtrInput
	// When set, if query params are included in the request to Artifactory, they will be passed on to the remote repository.
	PropagateQueryParams pulumi.BoolPtrInput
	// List of property set name
	PropertySets pulumi.StringArrayInput
	Proxy        pulumi.StringPtrInput
	// Repository layout key for the remote layout mapping
	RemoteRepoLayoutRef pulumi.StringPtrInput
	// Repository layout key for the remote repository
	RepoLayoutRef pulumi.StringPtrInput
	// The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.
	RetrievalCachePeriodSeconds pulumi.IntPtrInput
	ShareConfiguration          pulumi.BoolPtrInput
	// Network timeout (in ms) to use when establishing a connection and for unanswered requests. Timing out on a network operation is considered a retrieval failure.
	SocketTimeoutMillis pulumi.IntPtrInput
	// When set, the repository should store cached artifacts locally. When not set, artifacts are not stored locally, and direct repository-to-client streaming is used. This can be useful for multi-server setups over a high-speed LAN, with one Artifactory caching certain data on central storage, and streaming it directly to satellite pass-though Artifactory servers.
	StoreArtifactsLocally pulumi.BoolPtrInput
	// When set, remote artifacts are fetched along with their properties.
	SynchronizeProperties               pulumi.BoolPtrInput
	UnusedArtifactsCleanupPeriodEnabled pulumi.BoolPtrInput
	// The number of hours to wait before an artifact is deemed "unused" and eligible for cleanup from the repository. A value of 0 means automatic cleanup of cached artifacts is disabled.
	UnusedArtifactsCleanupPeriodHours pulumi.IntPtrInput
	// - the remote repo URL. You kinda don't have a remote repo without it
	Url      pulumi.StringInput
	Username pulumi.StringPtrInput
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.
	XrayIndex pulumi.BoolPtrInput
}

func (RemoteHelmRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*remoteHelmRepositoryArgs)(nil)).Elem()
}

type RemoteHelmRepositoryInput interface {
	pulumi.Input

	ToRemoteHelmRepositoryOutput() RemoteHelmRepositoryOutput
	ToRemoteHelmRepositoryOutputWithContext(ctx context.Context) RemoteHelmRepositoryOutput
}

func (*RemoteHelmRepository) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteHelmRepository)(nil)).Elem()
}

func (i *RemoteHelmRepository) ToRemoteHelmRepositoryOutput() RemoteHelmRepositoryOutput {
	return i.ToRemoteHelmRepositoryOutputWithContext(context.Background())
}

func (i *RemoteHelmRepository) ToRemoteHelmRepositoryOutputWithContext(ctx context.Context) RemoteHelmRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteHelmRepositoryOutput)
}

// RemoteHelmRepositoryArrayInput is an input type that accepts RemoteHelmRepositoryArray and RemoteHelmRepositoryArrayOutput values.
// You can construct a concrete instance of `RemoteHelmRepositoryArrayInput` via:
//
//          RemoteHelmRepositoryArray{ RemoteHelmRepositoryArgs{...} }
type RemoteHelmRepositoryArrayInput interface {
	pulumi.Input

	ToRemoteHelmRepositoryArrayOutput() RemoteHelmRepositoryArrayOutput
	ToRemoteHelmRepositoryArrayOutputWithContext(context.Context) RemoteHelmRepositoryArrayOutput
}

type RemoteHelmRepositoryArray []RemoteHelmRepositoryInput

func (RemoteHelmRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RemoteHelmRepository)(nil)).Elem()
}

func (i RemoteHelmRepositoryArray) ToRemoteHelmRepositoryArrayOutput() RemoteHelmRepositoryArrayOutput {
	return i.ToRemoteHelmRepositoryArrayOutputWithContext(context.Background())
}

func (i RemoteHelmRepositoryArray) ToRemoteHelmRepositoryArrayOutputWithContext(ctx context.Context) RemoteHelmRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteHelmRepositoryArrayOutput)
}

// RemoteHelmRepositoryMapInput is an input type that accepts RemoteHelmRepositoryMap and RemoteHelmRepositoryMapOutput values.
// You can construct a concrete instance of `RemoteHelmRepositoryMapInput` via:
//
//          RemoteHelmRepositoryMap{ "key": RemoteHelmRepositoryArgs{...} }
type RemoteHelmRepositoryMapInput interface {
	pulumi.Input

	ToRemoteHelmRepositoryMapOutput() RemoteHelmRepositoryMapOutput
	ToRemoteHelmRepositoryMapOutputWithContext(context.Context) RemoteHelmRepositoryMapOutput
}

type RemoteHelmRepositoryMap map[string]RemoteHelmRepositoryInput

func (RemoteHelmRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RemoteHelmRepository)(nil)).Elem()
}

func (i RemoteHelmRepositoryMap) ToRemoteHelmRepositoryMapOutput() RemoteHelmRepositoryMapOutput {
	return i.ToRemoteHelmRepositoryMapOutputWithContext(context.Background())
}

func (i RemoteHelmRepositoryMap) ToRemoteHelmRepositoryMapOutputWithContext(ctx context.Context) RemoteHelmRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteHelmRepositoryMapOutput)
}

type RemoteHelmRepositoryOutput struct{ *pulumi.OutputState }

func (RemoteHelmRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteHelmRepository)(nil)).Elem()
}

func (o RemoteHelmRepositoryOutput) ToRemoteHelmRepositoryOutput() RemoteHelmRepositoryOutput {
	return o
}

func (o RemoteHelmRepositoryOutput) ToRemoteHelmRepositoryOutputWithContext(ctx context.Context) RemoteHelmRepositoryOutput {
	return o
}

type RemoteHelmRepositoryArrayOutput struct{ *pulumi.OutputState }

func (RemoteHelmRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RemoteHelmRepository)(nil)).Elem()
}

func (o RemoteHelmRepositoryArrayOutput) ToRemoteHelmRepositoryArrayOutput() RemoteHelmRepositoryArrayOutput {
	return o
}

func (o RemoteHelmRepositoryArrayOutput) ToRemoteHelmRepositoryArrayOutputWithContext(ctx context.Context) RemoteHelmRepositoryArrayOutput {
	return o
}

func (o RemoteHelmRepositoryArrayOutput) Index(i pulumi.IntInput) RemoteHelmRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RemoteHelmRepository {
		return vs[0].([]*RemoteHelmRepository)[vs[1].(int)]
	}).(RemoteHelmRepositoryOutput)
}

type RemoteHelmRepositoryMapOutput struct{ *pulumi.OutputState }

func (RemoteHelmRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RemoteHelmRepository)(nil)).Elem()
}

func (o RemoteHelmRepositoryMapOutput) ToRemoteHelmRepositoryMapOutput() RemoteHelmRepositoryMapOutput {
	return o
}

func (o RemoteHelmRepositoryMapOutput) ToRemoteHelmRepositoryMapOutputWithContext(ctx context.Context) RemoteHelmRepositoryMapOutput {
	return o
}

func (o RemoteHelmRepositoryMapOutput) MapIndex(k pulumi.StringInput) RemoteHelmRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RemoteHelmRepository {
		return vs[0].(map[string]*RemoteHelmRepository)[vs[1].(string)]
	}).(RemoteHelmRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteHelmRepositoryInput)(nil)).Elem(), &RemoteHelmRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteHelmRepositoryArrayInput)(nil)).Elem(), RemoteHelmRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteHelmRepositoryMapInput)(nil)).Elem(), RemoteHelmRepositoryMap{})
	pulumi.RegisterOutputType(RemoteHelmRepositoryOutput{})
	pulumi.RegisterOutputType(RemoteHelmRepositoryArrayOutput{})
	pulumi.RegisterOutputType(RemoteHelmRepositoryMapOutput{})
}
