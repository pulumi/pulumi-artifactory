// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a remote PHP Composer repository.
// Official documentation can be found [here](https://www.jfrog.com/confluence/display/JFROG/PHP+Composer+Repositories).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-artifactory/sdk/v2/go/artifactory"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := artifactory.NewRemoteComposerRepository(ctx, "my-remote-composer", &artifactory.RemoteComposerRepositoryArgs{
//				Key:            pulumi.String("my-remote-composer"),
//				Url:            pulumi.String("https://github.com/"),
//				VcsGitProvider: pulumi.String("GITHUB"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Remote repositories can be imported using their name, e.g.
//
// ```sh
//
//	$ pulumi import artifactory:index/remoteComposerRepository:RemoteComposerRepository my-remote-composer my-remote-composer
//
// ```
type RemoteComposerRepository struct {
	pulumi.CustomResourceState

	// Also known as 'Lenient Host Authentication', Allow credentials of this repository to be used on requests redirected to
	// any other host.
	AllowAnyHostAuth pulumi.BoolOutput `pulumi:"allowAnyHostAuth"`
	// The number of seconds the repository stays in assumed offline state after a connection error. At the end of this time,
	// an online check is attempted in order to reset the offline status. A value of 0 means the repository is never assumed
	// offline. Default to 300.
	AssumedOfflinePeriodSecs pulumi.IntPtrOutput `pulumi:"assumedOfflinePeriodSecs"`
	// (A.K.A 'Ignore Repository' on the UI) When set, the repository or its local cache do not participate in artifact
	// resolution.
	BlackedOut pulumi.BoolOutput `pulumi:"blackedOut"`
	// Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,
	// HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,
	// Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
	BlockMismatchingMimeTypes pulumi.BoolOutput `pulumi:"blockMismatchingMimeTypes"`
	// Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,
	// HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,
	// Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
	BypassHeadRequests   pulumi.BoolOutput   `pulumi:"bypassHeadRequests"`
	ClientTlsCertificate pulumi.StringOutput `pulumi:"clientTlsCertificate"`
	// Proxy remote Composer repository. Default value is "https://packagist.org".
	ComposerRegistryUrl    pulumi.StringPtrOutput                               `pulumi:"composerRegistryUrl"`
	ContentSynchronisation RemoteComposerRepositoryContentSynchronisationOutput `pulumi:"contentSynchronisation"`
	Description            pulumi.StringOutput                                  `pulumi:"description"`
	// Enables cookie management if the remote repository uses cookies to manage client state.
	EnableCookieManagement pulumi.BoolOutput `pulumi:"enableCookieManagement"`
	// List of comma-separated artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*. By
	// default no artifacts are excluded.
	ExcludesPattern pulumi.StringPtrOutput `pulumi:"excludesPattern"`
	// Deprecated: This field is not returned in a get payload but is offered on the UI. It's inserted here for inclusive and informational reasons. It does not function
	FailedRetrievalCachePeriodSecs pulumi.IntOutput `pulumi:"failedRetrievalCachePeriodSecs"`
	// When set, Artifactory will return an error to the client that causes the build to fail if there is a failure to
	// communicate with this repository.
	HardFail pulumi.BoolOutput `pulumi:"hardFail"`
	// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When
	// used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern pulumi.StringOutput `pulumi:"includesPattern"`
	// A mandatory identifier for the repository that must be unique. It cannot begin with a number or
	// contain spaces or special characters.
	Key pulumi.StringOutput `pulumi:"key"`
	// Lists the items of remote folders in simple and list browsing. The remote content is cached according to the value of
	// the 'Retrieval Cache Period'. Default value is 'false'.
	ListRemoteFolderItems pulumi.BoolPtrOutput `pulumi:"listRemoteFolderItems"`
	// The local address to be used when creating connections. Useful for specifying the interface to use on systems with
	// multiple network interfaces.
	LocalAddress pulumi.StringPtrOutput `pulumi:"localAddress"`
	// The set of mime types that should override the block_mismatching_mime_types setting. Eg:
	// "application/json,application/xml". Default value is empty.
	MismatchingMimeTypesOverrideList pulumi.StringPtrOutput `pulumi:"mismatchingMimeTypesOverrideList"`
	// The number of seconds to cache artifact retrieval misses (artifact not found). A value of 0 indicates no caching.
	MissedCachePeriodSeconds pulumi.IntOutput       `pulumi:"missedCachePeriodSeconds"`
	Notes                    pulumi.StringPtrOutput `pulumi:"notes"`
	// If set, Artifactory does not try to fetch remote artifacts. Only locally-cached artifacts are retrieved.
	Offline     pulumi.BoolOutput      `pulumi:"offline"`
	PackageType pulumi.StringOutput    `pulumi:"packageType"`
	Password    pulumi.StringPtrOutput `pulumi:"password"`
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution pulumi.BoolOutput `pulumi:"priorityResolution"`
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments pulumi.StringArrayOutput `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric and hyphen characters. When
	// assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey pulumi.StringPtrOutput `pulumi:"projectKey"`
	// When set, if query params are included in the request to Artifactory, they will be passed on to the remote repository.
	PropagateQueryParams pulumi.BoolPtrOutput `pulumi:"propagateQueryParams"`
	// List of property set names
	PropertySets pulumi.StringArrayOutput `pulumi:"propertySets"`
	// Proxy key from Artifactory Proxies settings
	Proxy pulumi.StringPtrOutput `pulumi:"proxy"`
	// Repository layout key for the remote layout mapping
	RemoteRepoLayoutRef pulumi.StringOutput `pulumi:"remoteRepoLayoutRef"`
	// Repository layout key for the local repository
	RepoLayoutRef pulumi.StringPtrOutput `pulumi:"repoLayoutRef"`
	// The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.
	RetrievalCachePeriodSeconds pulumi.IntOutput  `pulumi:"retrievalCachePeriodSeconds"`
	ShareConfiguration          pulumi.BoolOutput `pulumi:"shareConfiguration"`
	// Network timeout (in ms) to use when establishing a connection and for unanswered requests. Timing out on a network
	// operation is considered a retrieval failure.
	SocketTimeoutMillis pulumi.IntOutput `pulumi:"socketTimeoutMillis"`
	// When set, the repository should store cached artifacts locally. When not set, artifacts are not stored locally, and
	// direct repository-to-client streaming is used. This can be useful for multi-server setups over a high-speed LAN, with
	// one Artifactory caching certain data on central storage, and streaming it directly to satellite pass-though Artifactory
	// servers.
	StoreArtifactsLocally pulumi.BoolOutput `pulumi:"storeArtifactsLocally"`
	// When set, remote artifacts are fetched along with their properties.
	SynchronizeProperties               pulumi.BoolOutput `pulumi:"synchronizeProperties"`
	UnusedArtifactsCleanupPeriodEnabled pulumi.BoolOutput `pulumi:"unusedArtifactsCleanupPeriodEnabled"`
	// The number of hours to wait before an artifact is deemed "unused" and eligible for cleanup from the repository. A value
	// of 0 means automatic cleanup of cached artifacts is disabled.
	UnusedArtifactsCleanupPeriodHours pulumi.IntOutput `pulumi:"unusedArtifactsCleanupPeriodHours"`
	// The remote repo URL.
	Url      pulumi.StringOutput    `pulumi:"url"`
	Username pulumi.StringPtrOutput `pulumi:"username"`
	// This attribute is used when vcsGitProvider is set to 'CUSTOM'. Provided URL will be used as proxy.
	VcsGitDownloadUrl pulumi.StringPtrOutput `pulumi:"vcsGitDownloadUrl"`
	// Artifactory supports proxying the following Git providers out-of-the-box: GitHub or a remote Artifactory instance. Default value is "GITHUB".
	// Possible values are: "GITHUB", "BITBUCKET", "OLDSTASH", "STASH", "ARTIFACTORY", "CUSTOM".
	VcsGitProvider pulumi.StringPtrOutput `pulumi:"vcsGitProvider"`
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
	// Xray settings.
	XrayIndex pulumi.BoolPtrOutput `pulumi:"xrayIndex"`
}

// NewRemoteComposerRepository registers a new resource with the given unique name, arguments, and options.
func NewRemoteComposerRepository(ctx *pulumi.Context,
	name string, args *RemoteComposerRepositoryArgs, opts ...pulumi.ResourceOption) (*RemoteComposerRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	var resource RemoteComposerRepository
	err := ctx.RegisterResource("artifactory:index/remoteComposerRepository:RemoteComposerRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRemoteComposerRepository gets an existing RemoteComposerRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRemoteComposerRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RemoteComposerRepositoryState, opts ...pulumi.ResourceOption) (*RemoteComposerRepository, error) {
	var resource RemoteComposerRepository
	err := ctx.ReadResource("artifactory:index/remoteComposerRepository:RemoteComposerRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RemoteComposerRepository resources.
type remoteComposerRepositoryState struct {
	// Also known as 'Lenient Host Authentication', Allow credentials of this repository to be used on requests redirected to
	// any other host.
	AllowAnyHostAuth *bool `pulumi:"allowAnyHostAuth"`
	// The number of seconds the repository stays in assumed offline state after a connection error. At the end of this time,
	// an online check is attempted in order to reset the offline status. A value of 0 means the repository is never assumed
	// offline. Default to 300.
	AssumedOfflinePeriodSecs *int `pulumi:"assumedOfflinePeriodSecs"`
	// (A.K.A 'Ignore Repository' on the UI) When set, the repository or its local cache do not participate in artifact
	// resolution.
	BlackedOut *bool `pulumi:"blackedOut"`
	// Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,
	// HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,
	// Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
	BlockMismatchingMimeTypes *bool `pulumi:"blockMismatchingMimeTypes"`
	// Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,
	// HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,
	// Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
	BypassHeadRequests   *bool   `pulumi:"bypassHeadRequests"`
	ClientTlsCertificate *string `pulumi:"clientTlsCertificate"`
	// Proxy remote Composer repository. Default value is "https://packagist.org".
	ComposerRegistryUrl    *string                                         `pulumi:"composerRegistryUrl"`
	ContentSynchronisation *RemoteComposerRepositoryContentSynchronisation `pulumi:"contentSynchronisation"`
	Description            *string                                         `pulumi:"description"`
	// Enables cookie management if the remote repository uses cookies to manage client state.
	EnableCookieManagement *bool `pulumi:"enableCookieManagement"`
	// List of comma-separated artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*. By
	// default no artifacts are excluded.
	ExcludesPattern *string `pulumi:"excludesPattern"`
	// Deprecated: This field is not returned in a get payload but is offered on the UI. It's inserted here for inclusive and informational reasons. It does not function
	FailedRetrievalCachePeriodSecs *int `pulumi:"failedRetrievalCachePeriodSecs"`
	// When set, Artifactory will return an error to the client that causes the build to fail if there is a failure to
	// communicate with this repository.
	HardFail *bool `pulumi:"hardFail"`
	// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When
	// used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern *string `pulumi:"includesPattern"`
	// A mandatory identifier for the repository that must be unique. It cannot begin with a number or
	// contain spaces or special characters.
	Key *string `pulumi:"key"`
	// Lists the items of remote folders in simple and list browsing. The remote content is cached according to the value of
	// the 'Retrieval Cache Period'. Default value is 'false'.
	ListRemoteFolderItems *bool `pulumi:"listRemoteFolderItems"`
	// The local address to be used when creating connections. Useful for specifying the interface to use on systems with
	// multiple network interfaces.
	LocalAddress *string `pulumi:"localAddress"`
	// The set of mime types that should override the block_mismatching_mime_types setting. Eg:
	// "application/json,application/xml". Default value is empty.
	MismatchingMimeTypesOverrideList *string `pulumi:"mismatchingMimeTypesOverrideList"`
	// The number of seconds to cache artifact retrieval misses (artifact not found). A value of 0 indicates no caching.
	MissedCachePeriodSeconds *int    `pulumi:"missedCachePeriodSeconds"`
	Notes                    *string `pulumi:"notes"`
	// If set, Artifactory does not try to fetch remote artifacts. Only locally-cached artifacts are retrieved.
	Offline     *bool   `pulumi:"offline"`
	PackageType *string `pulumi:"packageType"`
	Password    *string `pulumi:"password"`
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution *bool `pulumi:"priorityResolution"`
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments []string `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric and hyphen characters. When
	// assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey *string `pulumi:"projectKey"`
	// When set, if query params are included in the request to Artifactory, they will be passed on to the remote repository.
	PropagateQueryParams *bool `pulumi:"propagateQueryParams"`
	// List of property set names
	PropertySets []string `pulumi:"propertySets"`
	// Proxy key from Artifactory Proxies settings
	Proxy *string `pulumi:"proxy"`
	// Repository layout key for the remote layout mapping
	RemoteRepoLayoutRef *string `pulumi:"remoteRepoLayoutRef"`
	// Repository layout key for the local repository
	RepoLayoutRef *string `pulumi:"repoLayoutRef"`
	// The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.
	RetrievalCachePeriodSeconds *int  `pulumi:"retrievalCachePeriodSeconds"`
	ShareConfiguration          *bool `pulumi:"shareConfiguration"`
	// Network timeout (in ms) to use when establishing a connection and for unanswered requests. Timing out on a network
	// operation is considered a retrieval failure.
	SocketTimeoutMillis *int `pulumi:"socketTimeoutMillis"`
	// When set, the repository should store cached artifacts locally. When not set, artifacts are not stored locally, and
	// direct repository-to-client streaming is used. This can be useful for multi-server setups over a high-speed LAN, with
	// one Artifactory caching certain data on central storage, and streaming it directly to satellite pass-though Artifactory
	// servers.
	StoreArtifactsLocally *bool `pulumi:"storeArtifactsLocally"`
	// When set, remote artifacts are fetched along with their properties.
	SynchronizeProperties               *bool `pulumi:"synchronizeProperties"`
	UnusedArtifactsCleanupPeriodEnabled *bool `pulumi:"unusedArtifactsCleanupPeriodEnabled"`
	// The number of hours to wait before an artifact is deemed "unused" and eligible for cleanup from the repository. A value
	// of 0 means automatic cleanup of cached artifacts is disabled.
	UnusedArtifactsCleanupPeriodHours *int `pulumi:"unusedArtifactsCleanupPeriodHours"`
	// The remote repo URL.
	Url      *string `pulumi:"url"`
	Username *string `pulumi:"username"`
	// This attribute is used when vcsGitProvider is set to 'CUSTOM'. Provided URL will be used as proxy.
	VcsGitDownloadUrl *string `pulumi:"vcsGitDownloadUrl"`
	// Artifactory supports proxying the following Git providers out-of-the-box: GitHub or a remote Artifactory instance. Default value is "GITHUB".
	// Possible values are: "GITHUB", "BITBUCKET", "OLDSTASH", "STASH", "ARTIFACTORY", "CUSTOM".
	VcsGitProvider *string `pulumi:"vcsGitProvider"`
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
	// Xray settings.
	XrayIndex *bool `pulumi:"xrayIndex"`
}

type RemoteComposerRepositoryState struct {
	// Also known as 'Lenient Host Authentication', Allow credentials of this repository to be used on requests redirected to
	// any other host.
	AllowAnyHostAuth pulumi.BoolPtrInput
	// The number of seconds the repository stays in assumed offline state after a connection error. At the end of this time,
	// an online check is attempted in order to reset the offline status. A value of 0 means the repository is never assumed
	// offline. Default to 300.
	AssumedOfflinePeriodSecs pulumi.IntPtrInput
	// (A.K.A 'Ignore Repository' on the UI) When set, the repository or its local cache do not participate in artifact
	// resolution.
	BlackedOut pulumi.BoolPtrInput
	// Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,
	// HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,
	// Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
	BlockMismatchingMimeTypes pulumi.BoolPtrInput
	// Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,
	// HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,
	// Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
	BypassHeadRequests   pulumi.BoolPtrInput
	ClientTlsCertificate pulumi.StringPtrInput
	// Proxy remote Composer repository. Default value is "https://packagist.org".
	ComposerRegistryUrl    pulumi.StringPtrInput
	ContentSynchronisation RemoteComposerRepositoryContentSynchronisationPtrInput
	Description            pulumi.StringPtrInput
	// Enables cookie management if the remote repository uses cookies to manage client state.
	EnableCookieManagement pulumi.BoolPtrInput
	// List of comma-separated artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*. By
	// default no artifacts are excluded.
	ExcludesPattern pulumi.StringPtrInput
	// Deprecated: This field is not returned in a get payload but is offered on the UI. It's inserted here for inclusive and informational reasons. It does not function
	FailedRetrievalCachePeriodSecs pulumi.IntPtrInput
	// When set, Artifactory will return an error to the client that causes the build to fail if there is a failure to
	// communicate with this repository.
	HardFail pulumi.BoolPtrInput
	// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When
	// used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern pulumi.StringPtrInput
	// A mandatory identifier for the repository that must be unique. It cannot begin with a number or
	// contain spaces or special characters.
	Key pulumi.StringPtrInput
	// Lists the items of remote folders in simple and list browsing. The remote content is cached according to the value of
	// the 'Retrieval Cache Period'. Default value is 'false'.
	ListRemoteFolderItems pulumi.BoolPtrInput
	// The local address to be used when creating connections. Useful for specifying the interface to use on systems with
	// multiple network interfaces.
	LocalAddress pulumi.StringPtrInput
	// The set of mime types that should override the block_mismatching_mime_types setting. Eg:
	// "application/json,application/xml". Default value is empty.
	MismatchingMimeTypesOverrideList pulumi.StringPtrInput
	// The number of seconds to cache artifact retrieval misses (artifact not found). A value of 0 indicates no caching.
	MissedCachePeriodSeconds pulumi.IntPtrInput
	Notes                    pulumi.StringPtrInput
	// If set, Artifactory does not try to fetch remote artifacts. Only locally-cached artifacts are retrieved.
	Offline     pulumi.BoolPtrInput
	PackageType pulumi.StringPtrInput
	Password    pulumi.StringPtrInput
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution pulumi.BoolPtrInput
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments pulumi.StringArrayInput
	// Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric and hyphen characters. When
	// assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey pulumi.StringPtrInput
	// When set, if query params are included in the request to Artifactory, they will be passed on to the remote repository.
	PropagateQueryParams pulumi.BoolPtrInput
	// List of property set names
	PropertySets pulumi.StringArrayInput
	// Proxy key from Artifactory Proxies settings
	Proxy pulumi.StringPtrInput
	// Repository layout key for the remote layout mapping
	RemoteRepoLayoutRef pulumi.StringPtrInput
	// Repository layout key for the local repository
	RepoLayoutRef pulumi.StringPtrInput
	// The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.
	RetrievalCachePeriodSeconds pulumi.IntPtrInput
	ShareConfiguration          pulumi.BoolPtrInput
	// Network timeout (in ms) to use when establishing a connection and for unanswered requests. Timing out on a network
	// operation is considered a retrieval failure.
	SocketTimeoutMillis pulumi.IntPtrInput
	// When set, the repository should store cached artifacts locally. When not set, artifacts are not stored locally, and
	// direct repository-to-client streaming is used. This can be useful for multi-server setups over a high-speed LAN, with
	// one Artifactory caching certain data on central storage, and streaming it directly to satellite pass-though Artifactory
	// servers.
	StoreArtifactsLocally pulumi.BoolPtrInput
	// When set, remote artifacts are fetched along with their properties.
	SynchronizeProperties               pulumi.BoolPtrInput
	UnusedArtifactsCleanupPeriodEnabled pulumi.BoolPtrInput
	// The number of hours to wait before an artifact is deemed "unused" and eligible for cleanup from the repository. A value
	// of 0 means automatic cleanup of cached artifacts is disabled.
	UnusedArtifactsCleanupPeriodHours pulumi.IntPtrInput
	// The remote repo URL.
	Url      pulumi.StringPtrInput
	Username pulumi.StringPtrInput
	// This attribute is used when vcsGitProvider is set to 'CUSTOM'. Provided URL will be used as proxy.
	VcsGitDownloadUrl pulumi.StringPtrInput
	// Artifactory supports proxying the following Git providers out-of-the-box: GitHub or a remote Artifactory instance. Default value is "GITHUB".
	// Possible values are: "GITHUB", "BITBUCKET", "OLDSTASH", "STASH", "ARTIFACTORY", "CUSTOM".
	VcsGitProvider pulumi.StringPtrInput
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
	// Xray settings.
	XrayIndex pulumi.BoolPtrInput
}

func (RemoteComposerRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*remoteComposerRepositoryState)(nil)).Elem()
}

type remoteComposerRepositoryArgs struct {
	// Also known as 'Lenient Host Authentication', Allow credentials of this repository to be used on requests redirected to
	// any other host.
	AllowAnyHostAuth *bool `pulumi:"allowAnyHostAuth"`
	// The number of seconds the repository stays in assumed offline state after a connection error. At the end of this time,
	// an online check is attempted in order to reset the offline status. A value of 0 means the repository is never assumed
	// offline. Default to 300.
	AssumedOfflinePeriodSecs *int `pulumi:"assumedOfflinePeriodSecs"`
	// (A.K.A 'Ignore Repository' on the UI) When set, the repository or its local cache do not participate in artifact
	// resolution.
	BlackedOut *bool `pulumi:"blackedOut"`
	// Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,
	// HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,
	// Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
	BlockMismatchingMimeTypes *bool `pulumi:"blockMismatchingMimeTypes"`
	// Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,
	// HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,
	// Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
	BypassHeadRequests   *bool   `pulumi:"bypassHeadRequests"`
	ClientTlsCertificate *string `pulumi:"clientTlsCertificate"`
	// Proxy remote Composer repository. Default value is "https://packagist.org".
	ComposerRegistryUrl    *string                                         `pulumi:"composerRegistryUrl"`
	ContentSynchronisation *RemoteComposerRepositoryContentSynchronisation `pulumi:"contentSynchronisation"`
	Description            *string                                         `pulumi:"description"`
	// Enables cookie management if the remote repository uses cookies to manage client state.
	EnableCookieManagement *bool `pulumi:"enableCookieManagement"`
	// List of comma-separated artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*. By
	// default no artifacts are excluded.
	ExcludesPattern *string `pulumi:"excludesPattern"`
	// When set, Artifactory will return an error to the client that causes the build to fail if there is a failure to
	// communicate with this repository.
	HardFail *bool `pulumi:"hardFail"`
	// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When
	// used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern *string `pulumi:"includesPattern"`
	// A mandatory identifier for the repository that must be unique. It cannot begin with a number or
	// contain spaces or special characters.
	Key string `pulumi:"key"`
	// Lists the items of remote folders in simple and list browsing. The remote content is cached according to the value of
	// the 'Retrieval Cache Period'. Default value is 'false'.
	ListRemoteFolderItems *bool `pulumi:"listRemoteFolderItems"`
	// The local address to be used when creating connections. Useful for specifying the interface to use on systems with
	// multiple network interfaces.
	LocalAddress *string `pulumi:"localAddress"`
	// The set of mime types that should override the block_mismatching_mime_types setting. Eg:
	// "application/json,application/xml". Default value is empty.
	MismatchingMimeTypesOverrideList *string `pulumi:"mismatchingMimeTypesOverrideList"`
	// The number of seconds to cache artifact retrieval misses (artifact not found). A value of 0 indicates no caching.
	MissedCachePeriodSeconds *int    `pulumi:"missedCachePeriodSeconds"`
	Notes                    *string `pulumi:"notes"`
	// If set, Artifactory does not try to fetch remote artifacts. Only locally-cached artifacts are retrieved.
	Offline  *bool   `pulumi:"offline"`
	Password *string `pulumi:"password"`
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution *bool `pulumi:"priorityResolution"`
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments []string `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric and hyphen characters. When
	// assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey *string `pulumi:"projectKey"`
	// When set, if query params are included in the request to Artifactory, they will be passed on to the remote repository.
	PropagateQueryParams *bool `pulumi:"propagateQueryParams"`
	// List of property set names
	PropertySets []string `pulumi:"propertySets"`
	// Proxy key from Artifactory Proxies settings
	Proxy *string `pulumi:"proxy"`
	// Repository layout key for the remote layout mapping
	RemoteRepoLayoutRef *string `pulumi:"remoteRepoLayoutRef"`
	// Repository layout key for the local repository
	RepoLayoutRef *string `pulumi:"repoLayoutRef"`
	// The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.
	RetrievalCachePeriodSeconds *int  `pulumi:"retrievalCachePeriodSeconds"`
	ShareConfiguration          *bool `pulumi:"shareConfiguration"`
	// Network timeout (in ms) to use when establishing a connection and for unanswered requests. Timing out on a network
	// operation is considered a retrieval failure.
	SocketTimeoutMillis *int `pulumi:"socketTimeoutMillis"`
	// When set, the repository should store cached artifacts locally. When not set, artifacts are not stored locally, and
	// direct repository-to-client streaming is used. This can be useful for multi-server setups over a high-speed LAN, with
	// one Artifactory caching certain data on central storage, and streaming it directly to satellite pass-though Artifactory
	// servers.
	StoreArtifactsLocally *bool `pulumi:"storeArtifactsLocally"`
	// When set, remote artifacts are fetched along with their properties.
	SynchronizeProperties               *bool `pulumi:"synchronizeProperties"`
	UnusedArtifactsCleanupPeriodEnabled *bool `pulumi:"unusedArtifactsCleanupPeriodEnabled"`
	// The number of hours to wait before an artifact is deemed "unused" and eligible for cleanup from the repository. A value
	// of 0 means automatic cleanup of cached artifacts is disabled.
	UnusedArtifactsCleanupPeriodHours *int `pulumi:"unusedArtifactsCleanupPeriodHours"`
	// The remote repo URL.
	Url      string  `pulumi:"url"`
	Username *string `pulumi:"username"`
	// This attribute is used when vcsGitProvider is set to 'CUSTOM'. Provided URL will be used as proxy.
	VcsGitDownloadUrl *string `pulumi:"vcsGitDownloadUrl"`
	// Artifactory supports proxying the following Git providers out-of-the-box: GitHub or a remote Artifactory instance. Default value is "GITHUB".
	// Possible values are: "GITHUB", "BITBUCKET", "OLDSTASH", "STASH", "ARTIFACTORY", "CUSTOM".
	VcsGitProvider *string `pulumi:"vcsGitProvider"`
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
	// Xray settings.
	XrayIndex *bool `pulumi:"xrayIndex"`
}

// The set of arguments for constructing a RemoteComposerRepository resource.
type RemoteComposerRepositoryArgs struct {
	// Also known as 'Lenient Host Authentication', Allow credentials of this repository to be used on requests redirected to
	// any other host.
	AllowAnyHostAuth pulumi.BoolPtrInput
	// The number of seconds the repository stays in assumed offline state after a connection error. At the end of this time,
	// an online check is attempted in order to reset the offline status. A value of 0 means the repository is never assumed
	// offline. Default to 300.
	AssumedOfflinePeriodSecs pulumi.IntPtrInput
	// (A.K.A 'Ignore Repository' on the UI) When set, the repository or its local cache do not participate in artifact
	// resolution.
	BlackedOut pulumi.BoolPtrInput
	// Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,
	// HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,
	// Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
	BlockMismatchingMimeTypes pulumi.BoolPtrInput
	// Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,
	// HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,
	// Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
	BypassHeadRequests   pulumi.BoolPtrInput
	ClientTlsCertificate pulumi.StringPtrInput
	// Proxy remote Composer repository. Default value is "https://packagist.org".
	ComposerRegistryUrl    pulumi.StringPtrInput
	ContentSynchronisation RemoteComposerRepositoryContentSynchronisationPtrInput
	Description            pulumi.StringPtrInput
	// Enables cookie management if the remote repository uses cookies to manage client state.
	EnableCookieManagement pulumi.BoolPtrInput
	// List of comma-separated artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*. By
	// default no artifacts are excluded.
	ExcludesPattern pulumi.StringPtrInput
	// When set, Artifactory will return an error to the client that causes the build to fail if there is a failure to
	// communicate with this repository.
	HardFail pulumi.BoolPtrInput
	// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When
	// used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern pulumi.StringPtrInput
	// A mandatory identifier for the repository that must be unique. It cannot begin with a number or
	// contain spaces or special characters.
	Key pulumi.StringInput
	// Lists the items of remote folders in simple and list browsing. The remote content is cached according to the value of
	// the 'Retrieval Cache Period'. Default value is 'false'.
	ListRemoteFolderItems pulumi.BoolPtrInput
	// The local address to be used when creating connections. Useful for specifying the interface to use on systems with
	// multiple network interfaces.
	LocalAddress pulumi.StringPtrInput
	// The set of mime types that should override the block_mismatching_mime_types setting. Eg:
	// "application/json,application/xml". Default value is empty.
	MismatchingMimeTypesOverrideList pulumi.StringPtrInput
	// The number of seconds to cache artifact retrieval misses (artifact not found). A value of 0 indicates no caching.
	MissedCachePeriodSeconds pulumi.IntPtrInput
	Notes                    pulumi.StringPtrInput
	// If set, Artifactory does not try to fetch remote artifacts. Only locally-cached artifacts are retrieved.
	Offline  pulumi.BoolPtrInput
	Password pulumi.StringPtrInput
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution pulumi.BoolPtrInput
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments pulumi.StringArrayInput
	// Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric and hyphen characters. When
	// assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey pulumi.StringPtrInput
	// When set, if query params are included in the request to Artifactory, they will be passed on to the remote repository.
	PropagateQueryParams pulumi.BoolPtrInput
	// List of property set names
	PropertySets pulumi.StringArrayInput
	// Proxy key from Artifactory Proxies settings
	Proxy pulumi.StringPtrInput
	// Repository layout key for the remote layout mapping
	RemoteRepoLayoutRef pulumi.StringPtrInput
	// Repository layout key for the local repository
	RepoLayoutRef pulumi.StringPtrInput
	// The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.
	RetrievalCachePeriodSeconds pulumi.IntPtrInput
	ShareConfiguration          pulumi.BoolPtrInput
	// Network timeout (in ms) to use when establishing a connection and for unanswered requests. Timing out on a network
	// operation is considered a retrieval failure.
	SocketTimeoutMillis pulumi.IntPtrInput
	// When set, the repository should store cached artifacts locally. When not set, artifacts are not stored locally, and
	// direct repository-to-client streaming is used. This can be useful for multi-server setups over a high-speed LAN, with
	// one Artifactory caching certain data on central storage, and streaming it directly to satellite pass-though Artifactory
	// servers.
	StoreArtifactsLocally pulumi.BoolPtrInput
	// When set, remote artifacts are fetched along with their properties.
	SynchronizeProperties               pulumi.BoolPtrInput
	UnusedArtifactsCleanupPeriodEnabled pulumi.BoolPtrInput
	// The number of hours to wait before an artifact is deemed "unused" and eligible for cleanup from the repository. A value
	// of 0 means automatic cleanup of cached artifacts is disabled.
	UnusedArtifactsCleanupPeriodHours pulumi.IntPtrInput
	// The remote repo URL.
	Url      pulumi.StringInput
	Username pulumi.StringPtrInput
	// This attribute is used when vcsGitProvider is set to 'CUSTOM'. Provided URL will be used as proxy.
	VcsGitDownloadUrl pulumi.StringPtrInput
	// Artifactory supports proxying the following Git providers out-of-the-box: GitHub or a remote Artifactory instance. Default value is "GITHUB".
	// Possible values are: "GITHUB", "BITBUCKET", "OLDSTASH", "STASH", "ARTIFACTORY", "CUSTOM".
	VcsGitProvider pulumi.StringPtrInput
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
	// Xray settings.
	XrayIndex pulumi.BoolPtrInput
}

func (RemoteComposerRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*remoteComposerRepositoryArgs)(nil)).Elem()
}

type RemoteComposerRepositoryInput interface {
	pulumi.Input

	ToRemoteComposerRepositoryOutput() RemoteComposerRepositoryOutput
	ToRemoteComposerRepositoryOutputWithContext(ctx context.Context) RemoteComposerRepositoryOutput
}

func (*RemoteComposerRepository) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteComposerRepository)(nil)).Elem()
}

func (i *RemoteComposerRepository) ToRemoteComposerRepositoryOutput() RemoteComposerRepositoryOutput {
	return i.ToRemoteComposerRepositoryOutputWithContext(context.Background())
}

func (i *RemoteComposerRepository) ToRemoteComposerRepositoryOutputWithContext(ctx context.Context) RemoteComposerRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteComposerRepositoryOutput)
}

// RemoteComposerRepositoryArrayInput is an input type that accepts RemoteComposerRepositoryArray and RemoteComposerRepositoryArrayOutput values.
// You can construct a concrete instance of `RemoteComposerRepositoryArrayInput` via:
//
//	RemoteComposerRepositoryArray{ RemoteComposerRepositoryArgs{...} }
type RemoteComposerRepositoryArrayInput interface {
	pulumi.Input

	ToRemoteComposerRepositoryArrayOutput() RemoteComposerRepositoryArrayOutput
	ToRemoteComposerRepositoryArrayOutputWithContext(context.Context) RemoteComposerRepositoryArrayOutput
}

type RemoteComposerRepositoryArray []RemoteComposerRepositoryInput

func (RemoteComposerRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RemoteComposerRepository)(nil)).Elem()
}

func (i RemoteComposerRepositoryArray) ToRemoteComposerRepositoryArrayOutput() RemoteComposerRepositoryArrayOutput {
	return i.ToRemoteComposerRepositoryArrayOutputWithContext(context.Background())
}

func (i RemoteComposerRepositoryArray) ToRemoteComposerRepositoryArrayOutputWithContext(ctx context.Context) RemoteComposerRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteComposerRepositoryArrayOutput)
}

// RemoteComposerRepositoryMapInput is an input type that accepts RemoteComposerRepositoryMap and RemoteComposerRepositoryMapOutput values.
// You can construct a concrete instance of `RemoteComposerRepositoryMapInput` via:
//
//	RemoteComposerRepositoryMap{ "key": RemoteComposerRepositoryArgs{...} }
type RemoteComposerRepositoryMapInput interface {
	pulumi.Input

	ToRemoteComposerRepositoryMapOutput() RemoteComposerRepositoryMapOutput
	ToRemoteComposerRepositoryMapOutputWithContext(context.Context) RemoteComposerRepositoryMapOutput
}

type RemoteComposerRepositoryMap map[string]RemoteComposerRepositoryInput

func (RemoteComposerRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RemoteComposerRepository)(nil)).Elem()
}

func (i RemoteComposerRepositoryMap) ToRemoteComposerRepositoryMapOutput() RemoteComposerRepositoryMapOutput {
	return i.ToRemoteComposerRepositoryMapOutputWithContext(context.Background())
}

func (i RemoteComposerRepositoryMap) ToRemoteComposerRepositoryMapOutputWithContext(ctx context.Context) RemoteComposerRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteComposerRepositoryMapOutput)
}

type RemoteComposerRepositoryOutput struct{ *pulumi.OutputState }

func (RemoteComposerRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteComposerRepository)(nil)).Elem()
}

func (o RemoteComposerRepositoryOutput) ToRemoteComposerRepositoryOutput() RemoteComposerRepositoryOutput {
	return o
}

func (o RemoteComposerRepositoryOutput) ToRemoteComposerRepositoryOutputWithContext(ctx context.Context) RemoteComposerRepositoryOutput {
	return o
}

// Also known as 'Lenient Host Authentication', Allow credentials of this repository to be used on requests redirected to
// any other host.
func (o RemoteComposerRepositoryOutput) AllowAnyHostAuth() pulumi.BoolOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.BoolOutput { return v.AllowAnyHostAuth }).(pulumi.BoolOutput)
}

// The number of seconds the repository stays in assumed offline state after a connection error. At the end of this time,
// an online check is attempted in order to reset the offline status. A value of 0 means the repository is never assumed
// offline. Default to 300.
func (o RemoteComposerRepositoryOutput) AssumedOfflinePeriodSecs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.IntPtrOutput { return v.AssumedOfflinePeriodSecs }).(pulumi.IntPtrOutput)
}

// (A.K.A 'Ignore Repository' on the UI) When set, the repository or its local cache do not participate in artifact
// resolution.
func (o RemoteComposerRepositoryOutput) BlackedOut() pulumi.BoolOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.BoolOutput { return v.BlackedOut }).(pulumi.BoolOutput)
}

// Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,
// HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,
// Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
func (o RemoteComposerRepositoryOutput) BlockMismatchingMimeTypes() pulumi.BoolOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.BoolOutput { return v.BlockMismatchingMimeTypes }).(pulumi.BoolOutput)
}

// Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,
// HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,
// Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
func (o RemoteComposerRepositoryOutput) BypassHeadRequests() pulumi.BoolOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.BoolOutput { return v.BypassHeadRequests }).(pulumi.BoolOutput)
}

func (o RemoteComposerRepositoryOutput) ClientTlsCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.StringOutput { return v.ClientTlsCertificate }).(pulumi.StringOutput)
}

// Proxy remote Composer repository. Default value is "https://packagist.org".
func (o RemoteComposerRepositoryOutput) ComposerRegistryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.StringPtrOutput { return v.ComposerRegistryUrl }).(pulumi.StringPtrOutput)
}

func (o RemoteComposerRepositoryOutput) ContentSynchronisation() RemoteComposerRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) RemoteComposerRepositoryContentSynchronisationOutput {
		return v.ContentSynchronisation
	}).(RemoteComposerRepositoryContentSynchronisationOutput)
}

func (o RemoteComposerRepositoryOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Enables cookie management if the remote repository uses cookies to manage client state.
func (o RemoteComposerRepositoryOutput) EnableCookieManagement() pulumi.BoolOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.BoolOutput { return v.EnableCookieManagement }).(pulumi.BoolOutput)
}

// List of comma-separated artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*. By
// default no artifacts are excluded.
func (o RemoteComposerRepositoryOutput) ExcludesPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.StringPtrOutput { return v.ExcludesPattern }).(pulumi.StringPtrOutput)
}

// Deprecated: This field is not returned in a get payload but is offered on the UI. It's inserted here for inclusive and informational reasons. It does not function
func (o RemoteComposerRepositoryOutput) FailedRetrievalCachePeriodSecs() pulumi.IntOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.IntOutput { return v.FailedRetrievalCachePeriodSecs }).(pulumi.IntOutput)
}

// When set, Artifactory will return an error to the client that causes the build to fail if there is a failure to
// communicate with this repository.
func (o RemoteComposerRepositoryOutput) HardFail() pulumi.BoolOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.BoolOutput { return v.HardFail }).(pulumi.BoolOutput)
}

// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When
// used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
func (o RemoteComposerRepositoryOutput) IncludesPattern() pulumi.StringOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.StringOutput { return v.IncludesPattern }).(pulumi.StringOutput)
}

// A mandatory identifier for the repository that must be unique. It cannot begin with a number or
// contain spaces or special characters.
func (o RemoteComposerRepositoryOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// Lists the items of remote folders in simple and list browsing. The remote content is cached according to the value of
// the 'Retrieval Cache Period'. Default value is 'false'.
func (o RemoteComposerRepositoryOutput) ListRemoteFolderItems() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.BoolPtrOutput { return v.ListRemoteFolderItems }).(pulumi.BoolPtrOutput)
}

// The local address to be used when creating connections. Useful for specifying the interface to use on systems with
// multiple network interfaces.
func (o RemoteComposerRepositoryOutput) LocalAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.StringPtrOutput { return v.LocalAddress }).(pulumi.StringPtrOutput)
}

// The set of mime types that should override the block_mismatching_mime_types setting. Eg:
// "application/json,application/xml". Default value is empty.
func (o RemoteComposerRepositoryOutput) MismatchingMimeTypesOverrideList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.StringPtrOutput { return v.MismatchingMimeTypesOverrideList }).(pulumi.StringPtrOutput)
}

// The number of seconds to cache artifact retrieval misses (artifact not found). A value of 0 indicates no caching.
func (o RemoteComposerRepositoryOutput) MissedCachePeriodSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.IntOutput { return v.MissedCachePeriodSeconds }).(pulumi.IntOutput)
}

func (o RemoteComposerRepositoryOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.StringPtrOutput { return v.Notes }).(pulumi.StringPtrOutput)
}

// If set, Artifactory does not try to fetch remote artifacts. Only locally-cached artifacts are retrieved.
func (o RemoteComposerRepositoryOutput) Offline() pulumi.BoolOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.BoolOutput { return v.Offline }).(pulumi.BoolOutput)
}

func (o RemoteComposerRepositoryOutput) PackageType() pulumi.StringOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.StringOutput { return v.PackageType }).(pulumi.StringOutput)
}

func (o RemoteComposerRepositoryOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
func (o RemoteComposerRepositoryOutput) PriorityResolution() pulumi.BoolOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.BoolOutput { return v.PriorityResolution }).(pulumi.BoolOutput)
}

// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
func (o RemoteComposerRepositoryOutput) ProjectEnvironments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.StringArrayOutput { return v.ProjectEnvironments }).(pulumi.StringArrayOutput)
}

// Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric and hyphen characters. When
// assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
func (o RemoteComposerRepositoryOutput) ProjectKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.StringPtrOutput { return v.ProjectKey }).(pulumi.StringPtrOutput)
}

// When set, if query params are included in the request to Artifactory, they will be passed on to the remote repository.
func (o RemoteComposerRepositoryOutput) PropagateQueryParams() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.BoolPtrOutput { return v.PropagateQueryParams }).(pulumi.BoolPtrOutput)
}

// List of property set names
func (o RemoteComposerRepositoryOutput) PropertySets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.StringArrayOutput { return v.PropertySets }).(pulumi.StringArrayOutput)
}

// Proxy key from Artifactory Proxies settings
func (o RemoteComposerRepositoryOutput) Proxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.StringPtrOutput { return v.Proxy }).(pulumi.StringPtrOutput)
}

// Repository layout key for the remote layout mapping
func (o RemoteComposerRepositoryOutput) RemoteRepoLayoutRef() pulumi.StringOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.StringOutput { return v.RemoteRepoLayoutRef }).(pulumi.StringOutput)
}

// Repository layout key for the local repository
func (o RemoteComposerRepositoryOutput) RepoLayoutRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.StringPtrOutput { return v.RepoLayoutRef }).(pulumi.StringPtrOutput)
}

// The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.
func (o RemoteComposerRepositoryOutput) RetrievalCachePeriodSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.IntOutput { return v.RetrievalCachePeriodSeconds }).(pulumi.IntOutput)
}

func (o RemoteComposerRepositoryOutput) ShareConfiguration() pulumi.BoolOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.BoolOutput { return v.ShareConfiguration }).(pulumi.BoolOutput)
}

// Network timeout (in ms) to use when establishing a connection and for unanswered requests. Timing out on a network
// operation is considered a retrieval failure.
func (o RemoteComposerRepositoryOutput) SocketTimeoutMillis() pulumi.IntOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.IntOutput { return v.SocketTimeoutMillis }).(pulumi.IntOutput)
}

// When set, the repository should store cached artifacts locally. When not set, artifacts are not stored locally, and
// direct repository-to-client streaming is used. This can be useful for multi-server setups over a high-speed LAN, with
// one Artifactory caching certain data on central storage, and streaming it directly to satellite pass-though Artifactory
// servers.
func (o RemoteComposerRepositoryOutput) StoreArtifactsLocally() pulumi.BoolOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.BoolOutput { return v.StoreArtifactsLocally }).(pulumi.BoolOutput)
}

// When set, remote artifacts are fetched along with their properties.
func (o RemoteComposerRepositoryOutput) SynchronizeProperties() pulumi.BoolOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.BoolOutput { return v.SynchronizeProperties }).(pulumi.BoolOutput)
}

func (o RemoteComposerRepositoryOutput) UnusedArtifactsCleanupPeriodEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.BoolOutput { return v.UnusedArtifactsCleanupPeriodEnabled }).(pulumi.BoolOutput)
}

// The number of hours to wait before an artifact is deemed "unused" and eligible for cleanup from the repository. A value
// of 0 means automatic cleanup of cached artifacts is disabled.
func (o RemoteComposerRepositoryOutput) UnusedArtifactsCleanupPeriodHours() pulumi.IntOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.IntOutput { return v.UnusedArtifactsCleanupPeriodHours }).(pulumi.IntOutput)
}

// The remote repo URL.
func (o RemoteComposerRepositoryOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

func (o RemoteComposerRepositoryOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.StringPtrOutput { return v.Username }).(pulumi.StringPtrOutput)
}

// This attribute is used when vcsGitProvider is set to 'CUSTOM'. Provided URL will be used as proxy.
func (o RemoteComposerRepositoryOutput) VcsGitDownloadUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.StringPtrOutput { return v.VcsGitDownloadUrl }).(pulumi.StringPtrOutput)
}

// Artifactory supports proxying the following Git providers out-of-the-box: GitHub or a remote Artifactory instance. Default value is "GITHUB".
// Possible values are: "GITHUB", "BITBUCKET", "OLDSTASH", "STASH", "ARTIFACTORY", "CUSTOM".
func (o RemoteComposerRepositoryOutput) VcsGitProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.StringPtrOutput { return v.VcsGitProvider }).(pulumi.StringPtrOutput)
}

// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
// Xray settings.
func (o RemoteComposerRepositoryOutput) XrayIndex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteComposerRepository) pulumi.BoolPtrOutput { return v.XrayIndex }).(pulumi.BoolPtrOutput)
}

type RemoteComposerRepositoryArrayOutput struct{ *pulumi.OutputState }

func (RemoteComposerRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RemoteComposerRepository)(nil)).Elem()
}

func (o RemoteComposerRepositoryArrayOutput) ToRemoteComposerRepositoryArrayOutput() RemoteComposerRepositoryArrayOutput {
	return o
}

func (o RemoteComposerRepositoryArrayOutput) ToRemoteComposerRepositoryArrayOutputWithContext(ctx context.Context) RemoteComposerRepositoryArrayOutput {
	return o
}

func (o RemoteComposerRepositoryArrayOutput) Index(i pulumi.IntInput) RemoteComposerRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RemoteComposerRepository {
		return vs[0].([]*RemoteComposerRepository)[vs[1].(int)]
	}).(RemoteComposerRepositoryOutput)
}

type RemoteComposerRepositoryMapOutput struct{ *pulumi.OutputState }

func (RemoteComposerRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RemoteComposerRepository)(nil)).Elem()
}

func (o RemoteComposerRepositoryMapOutput) ToRemoteComposerRepositoryMapOutput() RemoteComposerRepositoryMapOutput {
	return o
}

func (o RemoteComposerRepositoryMapOutput) ToRemoteComposerRepositoryMapOutputWithContext(ctx context.Context) RemoteComposerRepositoryMapOutput {
	return o
}

func (o RemoteComposerRepositoryMapOutput) MapIndex(k pulumi.StringInput) RemoteComposerRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RemoteComposerRepository {
		return vs[0].(map[string]*RemoteComposerRepository)[vs[1].(string)]
	}).(RemoteComposerRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteComposerRepositoryInput)(nil)).Elem(), &RemoteComposerRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteComposerRepositoryArrayInput)(nil)).Elem(), RemoteComposerRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteComposerRepositoryMapInput)(nil)).Elem(), RemoteComposerRepositoryMap{})
	pulumi.RegisterOutputType(RemoteComposerRepositoryOutput{})
	pulumi.RegisterOutputType(RemoteComposerRepositoryArrayOutput{})
	pulumi.RegisterOutputType(RemoteComposerRepositoryMapOutput{})
}
