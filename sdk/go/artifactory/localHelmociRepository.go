// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-artifactory/sdk/v8/go/artifactory/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a local Helm OCI repository.
//
// Official documentation can be found [here](https://jfrog.com/help/r/jfrog-artifactory-documentation/helm-oci-repositories)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-artifactory/sdk/v8/go/artifactory"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := artifactory.NewLocalHelmociRepository(ctx, "my-helmoci-local", &artifactory.LocalHelmociRepositoryArgs{
//				Key:           pulumi.String("my-helmoci-local"),
//				TagRetention:  pulumi.Int(3),
//				MaxUniqueTags: pulumi.Int(5),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Local repositories can be imported using their name, e.g.
//
// ```sh
// $ pulumi import artifactory:index/localHelmociRepository:LocalHelmociRepository my-helmoci-local my-helmoci-local
// ```
type LocalHelmociRepository struct {
	pulumi.CustomResourceState

	// When set, you may view content such as HTML or Javadoc files directly from Artifactory.
	// This may not be safe and therefore requires strict content moderation to prevent malicious users from uploading content that may compromise security (e.g., cross-site scripting attacks).
	ArchiveBrowsingEnabled pulumi.BoolOutput `pulumi:"archiveBrowsingEnabled"`
	// When set, the repository does not participate in artifact resolution and new artifacts cannot be deployed.
	BlackedOut pulumi.BoolOutput `pulumi:"blackedOut"`
	// When set, download requests to this repository will redirect the client to download the artifact directly from AWS CloudFront. Available in Enterprise+ and Edge licenses only. Default value is 'false'
	CdnRedirect pulumi.BoolOutput `pulumi:"cdnRedirect"`
	// Public description.
	Description pulumi.StringOutput `pulumi:"description"`
	// When set, download requests to this repository will redirect the client to download the artifact directly from the cloud storage provider. Available in Enterprise+ and Edge licenses only.
	DownloadDirect pulumi.BoolOutput `pulumi:"downloadDirect"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**/z/*`.By default no artifacts are excluded.
	ExcludesPattern pulumi.StringOutput `pulumi:"excludesPattern"`
	// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of `x/y/**/z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (`**/*`).
	IncludesPattern pulumi.StringOutput `pulumi:"includesPattern"`
	// the identity key of the repo.
	Key pulumi.StringOutput `pulumi:"key"`
	// The maximum number of unique tags of a single OCI image to store in this
	// repository. Once the number tags for an image exceeds this setting, older tags are removed. A value of 0 (default) indicates there is no limit.
	MaxUniqueTags pulumi.IntOutput `pulumi:"maxUniqueTags"`
	// Internal description.
	Notes pulumi.StringOutput `pulumi:"notes"`
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution  pulumi.BoolOutput        `pulumi:"priorityResolution"`
	ProjectEnvironments pulumi.StringArrayOutput `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey pulumi.StringOutput `pulumi:"projectKey"`
	// List of property set name
	PropertySets pulumi.StringArrayOutput `pulumi:"propertySets"`
	// Sets the layout that the repository should use for storing and identifying modules. A recommended layout that corresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.
	RepoLayoutRef pulumi.StringOutput `pulumi:"repoLayoutRef"`
	// If greater than 1, overwritten tags will be saved by their digest, up to the set up number.
	TagRetention pulumi.IntOutput `pulumi:"tagRetention"`
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.
	XrayIndex pulumi.BoolOutput `pulumi:"xrayIndex"`
}

// NewLocalHelmociRepository registers a new resource with the given unique name, arguments, and options.
func NewLocalHelmociRepository(ctx *pulumi.Context,
	name string, args *LocalHelmociRepositoryArgs, opts ...pulumi.ResourceOption) (*LocalHelmociRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LocalHelmociRepository
	err := ctx.RegisterResource("artifactory:index/localHelmociRepository:LocalHelmociRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLocalHelmociRepository gets an existing LocalHelmociRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLocalHelmociRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LocalHelmociRepositoryState, opts ...pulumi.ResourceOption) (*LocalHelmociRepository, error) {
	var resource LocalHelmociRepository
	err := ctx.ReadResource("artifactory:index/localHelmociRepository:LocalHelmociRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LocalHelmociRepository resources.
type localHelmociRepositoryState struct {
	// When set, you may view content such as HTML or Javadoc files directly from Artifactory.
	// This may not be safe and therefore requires strict content moderation to prevent malicious users from uploading content that may compromise security (e.g., cross-site scripting attacks).
	ArchiveBrowsingEnabled *bool `pulumi:"archiveBrowsingEnabled"`
	// When set, the repository does not participate in artifact resolution and new artifacts cannot be deployed.
	BlackedOut *bool `pulumi:"blackedOut"`
	// When set, download requests to this repository will redirect the client to download the artifact directly from AWS CloudFront. Available in Enterprise+ and Edge licenses only. Default value is 'false'
	CdnRedirect *bool `pulumi:"cdnRedirect"`
	// Public description.
	Description *string `pulumi:"description"`
	// When set, download requests to this repository will redirect the client to download the artifact directly from the cloud storage provider. Available in Enterprise+ and Edge licenses only.
	DownloadDirect *bool `pulumi:"downloadDirect"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**/z/*`.By default no artifacts are excluded.
	ExcludesPattern *string `pulumi:"excludesPattern"`
	// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of `x/y/**/z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (`**/*`).
	IncludesPattern *string `pulumi:"includesPattern"`
	// the identity key of the repo.
	Key *string `pulumi:"key"`
	// The maximum number of unique tags of a single OCI image to store in this
	// repository. Once the number tags for an image exceeds this setting, older tags are removed. A value of 0 (default) indicates there is no limit.
	MaxUniqueTags *int `pulumi:"maxUniqueTags"`
	// Internal description.
	Notes *string `pulumi:"notes"`
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution  *bool    `pulumi:"priorityResolution"`
	ProjectEnvironments []string `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey *string `pulumi:"projectKey"`
	// List of property set name
	PropertySets []string `pulumi:"propertySets"`
	// Sets the layout that the repository should use for storing and identifying modules. A recommended layout that corresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.
	RepoLayoutRef *string `pulumi:"repoLayoutRef"`
	// If greater than 1, overwritten tags will be saved by their digest, up to the set up number.
	TagRetention *int `pulumi:"tagRetention"`
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.
	XrayIndex *bool `pulumi:"xrayIndex"`
}

type LocalHelmociRepositoryState struct {
	// When set, you may view content such as HTML or Javadoc files directly from Artifactory.
	// This may not be safe and therefore requires strict content moderation to prevent malicious users from uploading content that may compromise security (e.g., cross-site scripting attacks).
	ArchiveBrowsingEnabled pulumi.BoolPtrInput
	// When set, the repository does not participate in artifact resolution and new artifacts cannot be deployed.
	BlackedOut pulumi.BoolPtrInput
	// When set, download requests to this repository will redirect the client to download the artifact directly from AWS CloudFront. Available in Enterprise+ and Edge licenses only. Default value is 'false'
	CdnRedirect pulumi.BoolPtrInput
	// Public description.
	Description pulumi.StringPtrInput
	// When set, download requests to this repository will redirect the client to download the artifact directly from the cloud storage provider. Available in Enterprise+ and Edge licenses only.
	DownloadDirect pulumi.BoolPtrInput
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**/z/*`.By default no artifacts are excluded.
	ExcludesPattern pulumi.StringPtrInput
	// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of `x/y/**/z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (`**/*`).
	IncludesPattern pulumi.StringPtrInput
	// the identity key of the repo.
	Key pulumi.StringPtrInput
	// The maximum number of unique tags of a single OCI image to store in this
	// repository. Once the number tags for an image exceeds this setting, older tags are removed. A value of 0 (default) indicates there is no limit.
	MaxUniqueTags pulumi.IntPtrInput
	// Internal description.
	Notes pulumi.StringPtrInput
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution  pulumi.BoolPtrInput
	ProjectEnvironments pulumi.StringArrayInput
	// Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey pulumi.StringPtrInput
	// List of property set name
	PropertySets pulumi.StringArrayInput
	// Sets the layout that the repository should use for storing and identifying modules. A recommended layout that corresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.
	RepoLayoutRef pulumi.StringPtrInput
	// If greater than 1, overwritten tags will be saved by their digest, up to the set up number.
	TagRetention pulumi.IntPtrInput
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.
	XrayIndex pulumi.BoolPtrInput
}

func (LocalHelmociRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*localHelmociRepositoryState)(nil)).Elem()
}

type localHelmociRepositoryArgs struct {
	// When set, you may view content such as HTML or Javadoc files directly from Artifactory.
	// This may not be safe and therefore requires strict content moderation to prevent malicious users from uploading content that may compromise security (e.g., cross-site scripting attacks).
	ArchiveBrowsingEnabled *bool `pulumi:"archiveBrowsingEnabled"`
	// When set, the repository does not participate in artifact resolution and new artifacts cannot be deployed.
	BlackedOut *bool `pulumi:"blackedOut"`
	// When set, download requests to this repository will redirect the client to download the artifact directly from AWS CloudFront. Available in Enterprise+ and Edge licenses only. Default value is 'false'
	CdnRedirect *bool `pulumi:"cdnRedirect"`
	// Public description.
	Description *string `pulumi:"description"`
	// When set, download requests to this repository will redirect the client to download the artifact directly from the cloud storage provider. Available in Enterprise+ and Edge licenses only.
	DownloadDirect *bool `pulumi:"downloadDirect"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**/z/*`.By default no artifacts are excluded.
	ExcludesPattern *string `pulumi:"excludesPattern"`
	// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of `x/y/**/z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (`**/*`).
	IncludesPattern *string `pulumi:"includesPattern"`
	// the identity key of the repo.
	Key string `pulumi:"key"`
	// The maximum number of unique tags of a single OCI image to store in this
	// repository. Once the number tags for an image exceeds this setting, older tags are removed. A value of 0 (default) indicates there is no limit.
	MaxUniqueTags *int `pulumi:"maxUniqueTags"`
	// Internal description.
	Notes *string `pulumi:"notes"`
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution  *bool    `pulumi:"priorityResolution"`
	ProjectEnvironments []string `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey *string `pulumi:"projectKey"`
	// List of property set name
	PropertySets []string `pulumi:"propertySets"`
	// Sets the layout that the repository should use for storing and identifying modules. A recommended layout that corresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.
	RepoLayoutRef *string `pulumi:"repoLayoutRef"`
	// If greater than 1, overwritten tags will be saved by their digest, up to the set up number.
	TagRetention *int `pulumi:"tagRetention"`
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.
	XrayIndex *bool `pulumi:"xrayIndex"`
}

// The set of arguments for constructing a LocalHelmociRepository resource.
type LocalHelmociRepositoryArgs struct {
	// When set, you may view content such as HTML or Javadoc files directly from Artifactory.
	// This may not be safe and therefore requires strict content moderation to prevent malicious users from uploading content that may compromise security (e.g., cross-site scripting attacks).
	ArchiveBrowsingEnabled pulumi.BoolPtrInput
	// When set, the repository does not participate in artifact resolution and new artifacts cannot be deployed.
	BlackedOut pulumi.BoolPtrInput
	// When set, download requests to this repository will redirect the client to download the artifact directly from AWS CloudFront. Available in Enterprise+ and Edge licenses only. Default value is 'false'
	CdnRedirect pulumi.BoolPtrInput
	// Public description.
	Description pulumi.StringPtrInput
	// When set, download requests to this repository will redirect the client to download the artifact directly from the cloud storage provider. Available in Enterprise+ and Edge licenses only.
	DownloadDirect pulumi.BoolPtrInput
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**/z/*`.By default no artifacts are excluded.
	ExcludesPattern pulumi.StringPtrInput
	// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of `x/y/**/z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (`**/*`).
	IncludesPattern pulumi.StringPtrInput
	// the identity key of the repo.
	Key pulumi.StringInput
	// The maximum number of unique tags of a single OCI image to store in this
	// repository. Once the number tags for an image exceeds this setting, older tags are removed. A value of 0 (default) indicates there is no limit.
	MaxUniqueTags pulumi.IntPtrInput
	// Internal description.
	Notes pulumi.StringPtrInput
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution  pulumi.BoolPtrInput
	ProjectEnvironments pulumi.StringArrayInput
	// Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey pulumi.StringPtrInput
	// List of property set name
	PropertySets pulumi.StringArrayInput
	// Sets the layout that the repository should use for storing and identifying modules. A recommended layout that corresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.
	RepoLayoutRef pulumi.StringPtrInput
	// If greater than 1, overwritten tags will be saved by their digest, up to the set up number.
	TagRetention pulumi.IntPtrInput
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.
	XrayIndex pulumi.BoolPtrInput
}

func (LocalHelmociRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*localHelmociRepositoryArgs)(nil)).Elem()
}

type LocalHelmociRepositoryInput interface {
	pulumi.Input

	ToLocalHelmociRepositoryOutput() LocalHelmociRepositoryOutput
	ToLocalHelmociRepositoryOutputWithContext(ctx context.Context) LocalHelmociRepositoryOutput
}

func (*LocalHelmociRepository) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalHelmociRepository)(nil)).Elem()
}

func (i *LocalHelmociRepository) ToLocalHelmociRepositoryOutput() LocalHelmociRepositoryOutput {
	return i.ToLocalHelmociRepositoryOutputWithContext(context.Background())
}

func (i *LocalHelmociRepository) ToLocalHelmociRepositoryOutputWithContext(ctx context.Context) LocalHelmociRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalHelmociRepositoryOutput)
}

// LocalHelmociRepositoryArrayInput is an input type that accepts LocalHelmociRepositoryArray and LocalHelmociRepositoryArrayOutput values.
// You can construct a concrete instance of `LocalHelmociRepositoryArrayInput` via:
//
//	LocalHelmociRepositoryArray{ LocalHelmociRepositoryArgs{...} }
type LocalHelmociRepositoryArrayInput interface {
	pulumi.Input

	ToLocalHelmociRepositoryArrayOutput() LocalHelmociRepositoryArrayOutput
	ToLocalHelmociRepositoryArrayOutputWithContext(context.Context) LocalHelmociRepositoryArrayOutput
}

type LocalHelmociRepositoryArray []LocalHelmociRepositoryInput

func (LocalHelmociRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LocalHelmociRepository)(nil)).Elem()
}

func (i LocalHelmociRepositoryArray) ToLocalHelmociRepositoryArrayOutput() LocalHelmociRepositoryArrayOutput {
	return i.ToLocalHelmociRepositoryArrayOutputWithContext(context.Background())
}

func (i LocalHelmociRepositoryArray) ToLocalHelmociRepositoryArrayOutputWithContext(ctx context.Context) LocalHelmociRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalHelmociRepositoryArrayOutput)
}

// LocalHelmociRepositoryMapInput is an input type that accepts LocalHelmociRepositoryMap and LocalHelmociRepositoryMapOutput values.
// You can construct a concrete instance of `LocalHelmociRepositoryMapInput` via:
//
//	LocalHelmociRepositoryMap{ "key": LocalHelmociRepositoryArgs{...} }
type LocalHelmociRepositoryMapInput interface {
	pulumi.Input

	ToLocalHelmociRepositoryMapOutput() LocalHelmociRepositoryMapOutput
	ToLocalHelmociRepositoryMapOutputWithContext(context.Context) LocalHelmociRepositoryMapOutput
}

type LocalHelmociRepositoryMap map[string]LocalHelmociRepositoryInput

func (LocalHelmociRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LocalHelmociRepository)(nil)).Elem()
}

func (i LocalHelmociRepositoryMap) ToLocalHelmociRepositoryMapOutput() LocalHelmociRepositoryMapOutput {
	return i.ToLocalHelmociRepositoryMapOutputWithContext(context.Background())
}

func (i LocalHelmociRepositoryMap) ToLocalHelmociRepositoryMapOutputWithContext(ctx context.Context) LocalHelmociRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalHelmociRepositoryMapOutput)
}

type LocalHelmociRepositoryOutput struct{ *pulumi.OutputState }

func (LocalHelmociRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalHelmociRepository)(nil)).Elem()
}

func (o LocalHelmociRepositoryOutput) ToLocalHelmociRepositoryOutput() LocalHelmociRepositoryOutput {
	return o
}

func (o LocalHelmociRepositoryOutput) ToLocalHelmociRepositoryOutputWithContext(ctx context.Context) LocalHelmociRepositoryOutput {
	return o
}

// When set, you may view content such as HTML or Javadoc files directly from Artifactory.
// This may not be safe and therefore requires strict content moderation to prevent malicious users from uploading content that may compromise security (e.g., cross-site scripting attacks).
func (o LocalHelmociRepositoryOutput) ArchiveBrowsingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *LocalHelmociRepository) pulumi.BoolOutput { return v.ArchiveBrowsingEnabled }).(pulumi.BoolOutput)
}

// When set, the repository does not participate in artifact resolution and new artifacts cannot be deployed.
func (o LocalHelmociRepositoryOutput) BlackedOut() pulumi.BoolOutput {
	return o.ApplyT(func(v *LocalHelmociRepository) pulumi.BoolOutput { return v.BlackedOut }).(pulumi.BoolOutput)
}

// When set, download requests to this repository will redirect the client to download the artifact directly from AWS CloudFront. Available in Enterprise+ and Edge licenses only. Default value is 'false'
func (o LocalHelmociRepositoryOutput) CdnRedirect() pulumi.BoolOutput {
	return o.ApplyT(func(v *LocalHelmociRepository) pulumi.BoolOutput { return v.CdnRedirect }).(pulumi.BoolOutput)
}

// Public description.
func (o LocalHelmociRepositoryOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *LocalHelmociRepository) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// When set, download requests to this repository will redirect the client to download the artifact directly from the cloud storage provider. Available in Enterprise+ and Edge licenses only.
func (o LocalHelmociRepositoryOutput) DownloadDirect() pulumi.BoolOutput {
	return o.ApplyT(func(v *LocalHelmociRepository) pulumi.BoolOutput { return v.DownloadDirect }).(pulumi.BoolOutput)
}

// List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**/z/*`.By default no artifacts are excluded.
func (o LocalHelmociRepositoryOutput) ExcludesPattern() pulumi.StringOutput {
	return o.ApplyT(func(v *LocalHelmociRepository) pulumi.StringOutput { return v.ExcludesPattern }).(pulumi.StringOutput)
}

// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of `x/y/**/z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (`**/*`).
func (o LocalHelmociRepositoryOutput) IncludesPattern() pulumi.StringOutput {
	return o.ApplyT(func(v *LocalHelmociRepository) pulumi.StringOutput { return v.IncludesPattern }).(pulumi.StringOutput)
}

// the identity key of the repo.
func (o LocalHelmociRepositoryOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *LocalHelmociRepository) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// The maximum number of unique tags of a single OCI image to store in this
// repository. Once the number tags for an image exceeds this setting, older tags are removed. A value of 0 (default) indicates there is no limit.
func (o LocalHelmociRepositoryOutput) MaxUniqueTags() pulumi.IntOutput {
	return o.ApplyT(func(v *LocalHelmociRepository) pulumi.IntOutput { return v.MaxUniqueTags }).(pulumi.IntOutput)
}

// Internal description.
func (o LocalHelmociRepositoryOutput) Notes() pulumi.StringOutput {
	return o.ApplyT(func(v *LocalHelmociRepository) pulumi.StringOutput { return v.Notes }).(pulumi.StringOutput)
}

// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
func (o LocalHelmociRepositoryOutput) PriorityResolution() pulumi.BoolOutput {
	return o.ApplyT(func(v *LocalHelmociRepository) pulumi.BoolOutput { return v.PriorityResolution }).(pulumi.BoolOutput)
}

func (o LocalHelmociRepositoryOutput) ProjectEnvironments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LocalHelmociRepository) pulumi.StringArrayOutput { return v.ProjectEnvironments }).(pulumi.StringArrayOutput)
}

// Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
func (o LocalHelmociRepositoryOutput) ProjectKey() pulumi.StringOutput {
	return o.ApplyT(func(v *LocalHelmociRepository) pulumi.StringOutput { return v.ProjectKey }).(pulumi.StringOutput)
}

// List of property set name
func (o LocalHelmociRepositoryOutput) PropertySets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LocalHelmociRepository) pulumi.StringArrayOutput { return v.PropertySets }).(pulumi.StringArrayOutput)
}

// Sets the layout that the repository should use for storing and identifying modules. A recommended layout that corresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.
func (o LocalHelmociRepositoryOutput) RepoLayoutRef() pulumi.StringOutput {
	return o.ApplyT(func(v *LocalHelmociRepository) pulumi.StringOutput { return v.RepoLayoutRef }).(pulumi.StringOutput)
}

// If greater than 1, overwritten tags will be saved by their digest, up to the set up number.
func (o LocalHelmociRepositoryOutput) TagRetention() pulumi.IntOutput {
	return o.ApplyT(func(v *LocalHelmociRepository) pulumi.IntOutput { return v.TagRetention }).(pulumi.IntOutput)
}

// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.
func (o LocalHelmociRepositoryOutput) XrayIndex() pulumi.BoolOutput {
	return o.ApplyT(func(v *LocalHelmociRepository) pulumi.BoolOutput { return v.XrayIndex }).(pulumi.BoolOutput)
}

type LocalHelmociRepositoryArrayOutput struct{ *pulumi.OutputState }

func (LocalHelmociRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LocalHelmociRepository)(nil)).Elem()
}

func (o LocalHelmociRepositoryArrayOutput) ToLocalHelmociRepositoryArrayOutput() LocalHelmociRepositoryArrayOutput {
	return o
}

func (o LocalHelmociRepositoryArrayOutput) ToLocalHelmociRepositoryArrayOutputWithContext(ctx context.Context) LocalHelmociRepositoryArrayOutput {
	return o
}

func (o LocalHelmociRepositoryArrayOutput) Index(i pulumi.IntInput) LocalHelmociRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LocalHelmociRepository {
		return vs[0].([]*LocalHelmociRepository)[vs[1].(int)]
	}).(LocalHelmociRepositoryOutput)
}

type LocalHelmociRepositoryMapOutput struct{ *pulumi.OutputState }

func (LocalHelmociRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LocalHelmociRepository)(nil)).Elem()
}

func (o LocalHelmociRepositoryMapOutput) ToLocalHelmociRepositoryMapOutput() LocalHelmociRepositoryMapOutput {
	return o
}

func (o LocalHelmociRepositoryMapOutput) ToLocalHelmociRepositoryMapOutputWithContext(ctx context.Context) LocalHelmociRepositoryMapOutput {
	return o
}

func (o LocalHelmociRepositoryMapOutput) MapIndex(k pulumi.StringInput) LocalHelmociRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LocalHelmociRepository {
		return vs[0].(map[string]*LocalHelmociRepository)[vs[1].(string)]
	}).(LocalHelmociRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LocalHelmociRepositoryInput)(nil)).Elem(), &LocalHelmociRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalHelmociRepositoryArrayInput)(nil)).Elem(), LocalHelmociRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalHelmociRepositoryMapInput)(nil)).Elem(), LocalHelmociRepositoryMap{})
	pulumi.RegisterOutputType(LocalHelmociRepositoryOutput{})
	pulumi.RegisterOutputType(LocalHelmociRepositoryArrayOutput{})
	pulumi.RegisterOutputType(LocalHelmociRepositoryMapOutput{})
}
