// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-artifactory/sdk/v7/go/artifactory/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Artifactory webhook resource. This can be used to register and manage Artifactory webhook subscription which enables you to be notified or notify other users when such events take place in Artifactory.
//
// ## Example Usage
//
// .
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-artifactory/sdk/v7/go/artifactory"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := artifactory.NewUserWebhook(ctx, "user-webhook", &artifactory.UserWebhookArgs{
//				Key: pulumi.String("user-webhook"),
//				EventTypes: pulumi.StringArray{
//					pulumi.String("locked"),
//				},
//				Handlers: artifactory.UserWebhookHandlerArray{
//					&artifactory.UserWebhookHandlerArgs{
//						Url:    pulumi.String("http://tempurl.org/webhook"),
//						Secret: pulumi.String("some-secret"),
//						Proxy:  pulumi.String("proxy-key"),
//						CustomHttpHeaders: pulumi.StringMap{
//							"header-1": pulumi.String("value-1"),
//							"header-2": pulumi.String("value-2"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type UserWebhook struct {
	pulumi.CustomResourceState

	// Webhook description. Max length 1000 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Status of webhook. Default to `true`
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// List of event triggers for the Webhook. Allow values: `locked`
	EventTypes pulumi.StringArrayOutput `pulumi:"eventTypes"`
	// At least one is required.
	Handlers UserWebhookHandlerArrayOutput `pulumi:"handlers"`
	// The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.
	Key pulumi.StringOutput `pulumi:"key"`
}

// NewUserWebhook registers a new resource with the given unique name, arguments, and options.
func NewUserWebhook(ctx *pulumi.Context,
	name string, args *UserWebhookArgs, opts ...pulumi.ResourceOption) (*UserWebhook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EventTypes == nil {
		return nil, errors.New("invalid value for required argument 'EventTypes'")
	}
	if args.Handlers == nil {
		return nil, errors.New("invalid value for required argument 'Handlers'")
	}
	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserWebhook
	err := ctx.RegisterResource("artifactory:index/userWebhook:UserWebhook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserWebhook gets an existing UserWebhook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserWebhook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserWebhookState, opts ...pulumi.ResourceOption) (*UserWebhook, error) {
	var resource UserWebhook
	err := ctx.ReadResource("artifactory:index/userWebhook:UserWebhook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserWebhook resources.
type userWebhookState struct {
	// Webhook description. Max length 1000 characters.
	Description *string `pulumi:"description"`
	// Status of webhook. Default to `true`
	Enabled *bool `pulumi:"enabled"`
	// List of event triggers for the Webhook. Allow values: `locked`
	EventTypes []string `pulumi:"eventTypes"`
	// At least one is required.
	Handlers []UserWebhookHandler `pulumi:"handlers"`
	// The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.
	Key *string `pulumi:"key"`
}

type UserWebhookState struct {
	// Webhook description. Max length 1000 characters.
	Description pulumi.StringPtrInput
	// Status of webhook. Default to `true`
	Enabled pulumi.BoolPtrInput
	// List of event triggers for the Webhook. Allow values: `locked`
	EventTypes pulumi.StringArrayInput
	// At least one is required.
	Handlers UserWebhookHandlerArrayInput
	// The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.
	Key pulumi.StringPtrInput
}

func (UserWebhookState) ElementType() reflect.Type {
	return reflect.TypeOf((*userWebhookState)(nil)).Elem()
}

type userWebhookArgs struct {
	// Webhook description. Max length 1000 characters.
	Description *string `pulumi:"description"`
	// Status of webhook. Default to `true`
	Enabled *bool `pulumi:"enabled"`
	// List of event triggers for the Webhook. Allow values: `locked`
	EventTypes []string `pulumi:"eventTypes"`
	// At least one is required.
	Handlers []UserWebhookHandler `pulumi:"handlers"`
	// The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.
	Key string `pulumi:"key"`
}

// The set of arguments for constructing a UserWebhook resource.
type UserWebhookArgs struct {
	// Webhook description. Max length 1000 characters.
	Description pulumi.StringPtrInput
	// Status of webhook. Default to `true`
	Enabled pulumi.BoolPtrInput
	// List of event triggers for the Webhook. Allow values: `locked`
	EventTypes pulumi.StringArrayInput
	// At least one is required.
	Handlers UserWebhookHandlerArrayInput
	// The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.
	Key pulumi.StringInput
}

func (UserWebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userWebhookArgs)(nil)).Elem()
}

type UserWebhookInput interface {
	pulumi.Input

	ToUserWebhookOutput() UserWebhookOutput
	ToUserWebhookOutputWithContext(ctx context.Context) UserWebhookOutput
}

func (*UserWebhook) ElementType() reflect.Type {
	return reflect.TypeOf((**UserWebhook)(nil)).Elem()
}

func (i *UserWebhook) ToUserWebhookOutput() UserWebhookOutput {
	return i.ToUserWebhookOutputWithContext(context.Background())
}

func (i *UserWebhook) ToUserWebhookOutputWithContext(ctx context.Context) UserWebhookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserWebhookOutput)
}

// UserWebhookArrayInput is an input type that accepts UserWebhookArray and UserWebhookArrayOutput values.
// You can construct a concrete instance of `UserWebhookArrayInput` via:
//
//	UserWebhookArray{ UserWebhookArgs{...} }
type UserWebhookArrayInput interface {
	pulumi.Input

	ToUserWebhookArrayOutput() UserWebhookArrayOutput
	ToUserWebhookArrayOutputWithContext(context.Context) UserWebhookArrayOutput
}

type UserWebhookArray []UserWebhookInput

func (UserWebhookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserWebhook)(nil)).Elem()
}

func (i UserWebhookArray) ToUserWebhookArrayOutput() UserWebhookArrayOutput {
	return i.ToUserWebhookArrayOutputWithContext(context.Background())
}

func (i UserWebhookArray) ToUserWebhookArrayOutputWithContext(ctx context.Context) UserWebhookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserWebhookArrayOutput)
}

// UserWebhookMapInput is an input type that accepts UserWebhookMap and UserWebhookMapOutput values.
// You can construct a concrete instance of `UserWebhookMapInput` via:
//
//	UserWebhookMap{ "key": UserWebhookArgs{...} }
type UserWebhookMapInput interface {
	pulumi.Input

	ToUserWebhookMapOutput() UserWebhookMapOutput
	ToUserWebhookMapOutputWithContext(context.Context) UserWebhookMapOutput
}

type UserWebhookMap map[string]UserWebhookInput

func (UserWebhookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserWebhook)(nil)).Elem()
}

func (i UserWebhookMap) ToUserWebhookMapOutput() UserWebhookMapOutput {
	return i.ToUserWebhookMapOutputWithContext(context.Background())
}

func (i UserWebhookMap) ToUserWebhookMapOutputWithContext(ctx context.Context) UserWebhookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserWebhookMapOutput)
}

type UserWebhookOutput struct{ *pulumi.OutputState }

func (UserWebhookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserWebhook)(nil)).Elem()
}

func (o UserWebhookOutput) ToUserWebhookOutput() UserWebhookOutput {
	return o
}

func (o UserWebhookOutput) ToUserWebhookOutputWithContext(ctx context.Context) UserWebhookOutput {
	return o
}

// Webhook description. Max length 1000 characters.
func (o UserWebhookOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserWebhook) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Status of webhook. Default to `true`
func (o UserWebhookOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UserWebhook) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// List of event triggers for the Webhook. Allow values: `locked`
func (o UserWebhookOutput) EventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UserWebhook) pulumi.StringArrayOutput { return v.EventTypes }).(pulumi.StringArrayOutput)
}

// At least one is required.
func (o UserWebhookOutput) Handlers() UserWebhookHandlerArrayOutput {
	return o.ApplyT(func(v *UserWebhook) UserWebhookHandlerArrayOutput { return v.Handlers }).(UserWebhookHandlerArrayOutput)
}

// The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.
func (o UserWebhookOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *UserWebhook) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

type UserWebhookArrayOutput struct{ *pulumi.OutputState }

func (UserWebhookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserWebhook)(nil)).Elem()
}

func (o UserWebhookArrayOutput) ToUserWebhookArrayOutput() UserWebhookArrayOutput {
	return o
}

func (o UserWebhookArrayOutput) ToUserWebhookArrayOutputWithContext(ctx context.Context) UserWebhookArrayOutput {
	return o
}

func (o UserWebhookArrayOutput) Index(i pulumi.IntInput) UserWebhookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserWebhook {
		return vs[0].([]*UserWebhook)[vs[1].(int)]
	}).(UserWebhookOutput)
}

type UserWebhookMapOutput struct{ *pulumi.OutputState }

func (UserWebhookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserWebhook)(nil)).Elem()
}

func (o UserWebhookMapOutput) ToUserWebhookMapOutput() UserWebhookMapOutput {
	return o
}

func (o UserWebhookMapOutput) ToUserWebhookMapOutputWithContext(ctx context.Context) UserWebhookMapOutput {
	return o
}

func (o UserWebhookMapOutput) MapIndex(k pulumi.StringInput) UserWebhookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserWebhook {
		return vs[0].(map[string]*UserWebhook)[vs[1].(string)]
	}).(UserWebhookOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserWebhookInput)(nil)).Elem(), &UserWebhook{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserWebhookArrayInput)(nil)).Elem(), UserWebhookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserWebhookMapInput)(nil)).Elem(), UserWebhookMap{})
	pulumi.RegisterOutputType(UserWebhookOutput{})
	pulumi.RegisterOutputType(UserWebhookArrayOutput{})
	pulumi.RegisterOutputType(UserWebhookMapOutput{})
}
