// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-artifactory/sdk/v8/go/artifactory/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource enables you to configure an external vault connector to use as a centralized secret management tool for the keys used to sign packages. For more information, see [JFrog documentation](https://jfrog.com/help/r/jfrog-platform-administration-documentation/vault).
// This feature is supported with Enterprise X and Enterprise+ licenses.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-artifactory/sdk/v8/go/artifactory"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := artifactory.NewVaultConfiguration(ctx, "my-vault-config-app-role", &artifactory.VaultConfigurationArgs{
//				Name: pulumi.String("my-vault-config-app-role"),
//				Config: &artifactory.VaultConfigurationConfigArgs{
//					Url: pulumi.String("http://127.0.0.1:8200"),
//					Auth: &artifactory.VaultConfigurationConfigAuthArgs{
//						Type:     pulumi.String("AppRole"),
//						RoleId:   pulumi.String("1b62ff05..."),
//						SecretId: pulumi.String("acbd6657..."),
//					},
//					Mounts: artifactory.VaultConfigurationConfigMountArray{
//						&artifactory.VaultConfigurationConfigMountArgs{
//							Path: pulumi.String("secret"),
//							Type: pulumi.String("KV2"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			invokeFile, err := std.File(ctx, &std.FileArgs{
//				Input: "samples/public.pem",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			invokeFile1, err := std.File(ctx, &std.FileArgs{
//				Input: "samples/private.pem",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = artifactory.NewVaultConfiguration(ctx, "my-vault-config-cert", &artifactory.VaultConfigurationArgs{
//				Name: pulumi.String("my-vault-config-cert"),
//				Config: &artifactory.VaultConfigurationConfigArgs{
//					Url: pulumi.String("http://127.0.0.1:8200"),
//					Auth: &artifactory.VaultConfigurationConfigAuthArgs{
//						Type:           pulumi.String("Certificate"),
//						Certificate:    pulumi.String(invokeFile.Result),
//						CertificateKey: pulumi.String(invokeFile1.Result),
//					},
//					Mounts: artifactory.VaultConfigurationConfigMountArray{
//						&artifactory.VaultConfigurationConfigMountArgs{
//							Path: pulumi.String("secret"),
//							Type: pulumi.String("KV2"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import artifactory:index/vaultConfiguration:VaultConfiguration my-vault-config my-vault-config
// ```
type VaultConfiguration struct {
	pulumi.CustomResourceState

	Config VaultConfigurationConfigOutput `pulumi:"config"`
	// Name of the Vault configuration
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewVaultConfiguration registers a new resource with the given unique name, arguments, and options.
func NewVaultConfiguration(ctx *pulumi.Context,
	name string, args *VaultConfigurationArgs, opts ...pulumi.ResourceOption) (*VaultConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VaultConfiguration
	err := ctx.RegisterResource("artifactory:index/vaultConfiguration:VaultConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVaultConfiguration gets an existing VaultConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVaultConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VaultConfigurationState, opts ...pulumi.ResourceOption) (*VaultConfiguration, error) {
	var resource VaultConfiguration
	err := ctx.ReadResource("artifactory:index/vaultConfiguration:VaultConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VaultConfiguration resources.
type vaultConfigurationState struct {
	Config *VaultConfigurationConfig `pulumi:"config"`
	// Name of the Vault configuration
	Name *string `pulumi:"name"`
}

type VaultConfigurationState struct {
	Config VaultConfigurationConfigPtrInput
	// Name of the Vault configuration
	Name pulumi.StringPtrInput
}

func (VaultConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*vaultConfigurationState)(nil)).Elem()
}

type vaultConfigurationArgs struct {
	Config VaultConfigurationConfig `pulumi:"config"`
	// Name of the Vault configuration
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a VaultConfiguration resource.
type VaultConfigurationArgs struct {
	Config VaultConfigurationConfigInput
	// Name of the Vault configuration
	Name pulumi.StringPtrInput
}

func (VaultConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vaultConfigurationArgs)(nil)).Elem()
}

type VaultConfigurationInput interface {
	pulumi.Input

	ToVaultConfigurationOutput() VaultConfigurationOutput
	ToVaultConfigurationOutputWithContext(ctx context.Context) VaultConfigurationOutput
}

func (*VaultConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultConfiguration)(nil)).Elem()
}

func (i *VaultConfiguration) ToVaultConfigurationOutput() VaultConfigurationOutput {
	return i.ToVaultConfigurationOutputWithContext(context.Background())
}

func (i *VaultConfiguration) ToVaultConfigurationOutputWithContext(ctx context.Context) VaultConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultConfigurationOutput)
}

// VaultConfigurationArrayInput is an input type that accepts VaultConfigurationArray and VaultConfigurationArrayOutput values.
// You can construct a concrete instance of `VaultConfigurationArrayInput` via:
//
//	VaultConfigurationArray{ VaultConfigurationArgs{...} }
type VaultConfigurationArrayInput interface {
	pulumi.Input

	ToVaultConfigurationArrayOutput() VaultConfigurationArrayOutput
	ToVaultConfigurationArrayOutputWithContext(context.Context) VaultConfigurationArrayOutput
}

type VaultConfigurationArray []VaultConfigurationInput

func (VaultConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VaultConfiguration)(nil)).Elem()
}

func (i VaultConfigurationArray) ToVaultConfigurationArrayOutput() VaultConfigurationArrayOutput {
	return i.ToVaultConfigurationArrayOutputWithContext(context.Background())
}

func (i VaultConfigurationArray) ToVaultConfigurationArrayOutputWithContext(ctx context.Context) VaultConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultConfigurationArrayOutput)
}

// VaultConfigurationMapInput is an input type that accepts VaultConfigurationMap and VaultConfigurationMapOutput values.
// You can construct a concrete instance of `VaultConfigurationMapInput` via:
//
//	VaultConfigurationMap{ "key": VaultConfigurationArgs{...} }
type VaultConfigurationMapInput interface {
	pulumi.Input

	ToVaultConfigurationMapOutput() VaultConfigurationMapOutput
	ToVaultConfigurationMapOutputWithContext(context.Context) VaultConfigurationMapOutput
}

type VaultConfigurationMap map[string]VaultConfigurationInput

func (VaultConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VaultConfiguration)(nil)).Elem()
}

func (i VaultConfigurationMap) ToVaultConfigurationMapOutput() VaultConfigurationMapOutput {
	return i.ToVaultConfigurationMapOutputWithContext(context.Background())
}

func (i VaultConfigurationMap) ToVaultConfigurationMapOutputWithContext(ctx context.Context) VaultConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultConfigurationMapOutput)
}

type VaultConfigurationOutput struct{ *pulumi.OutputState }

func (VaultConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultConfiguration)(nil)).Elem()
}

func (o VaultConfigurationOutput) ToVaultConfigurationOutput() VaultConfigurationOutput {
	return o
}

func (o VaultConfigurationOutput) ToVaultConfigurationOutputWithContext(ctx context.Context) VaultConfigurationOutput {
	return o
}

func (o VaultConfigurationOutput) Config() VaultConfigurationConfigOutput {
	return o.ApplyT(func(v *VaultConfiguration) VaultConfigurationConfigOutput { return v.Config }).(VaultConfigurationConfigOutput)
}

// Name of the Vault configuration
func (o VaultConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VaultConfiguration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type VaultConfigurationArrayOutput struct{ *pulumi.OutputState }

func (VaultConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VaultConfiguration)(nil)).Elem()
}

func (o VaultConfigurationArrayOutput) ToVaultConfigurationArrayOutput() VaultConfigurationArrayOutput {
	return o
}

func (o VaultConfigurationArrayOutput) ToVaultConfigurationArrayOutputWithContext(ctx context.Context) VaultConfigurationArrayOutput {
	return o
}

func (o VaultConfigurationArrayOutput) Index(i pulumi.IntInput) VaultConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VaultConfiguration {
		return vs[0].([]*VaultConfiguration)[vs[1].(int)]
	}).(VaultConfigurationOutput)
}

type VaultConfigurationMapOutput struct{ *pulumi.OutputState }

func (VaultConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VaultConfiguration)(nil)).Elem()
}

func (o VaultConfigurationMapOutput) ToVaultConfigurationMapOutput() VaultConfigurationMapOutput {
	return o
}

func (o VaultConfigurationMapOutput) ToVaultConfigurationMapOutputWithContext(ctx context.Context) VaultConfigurationMapOutput {
	return o
}

func (o VaultConfigurationMapOutput) MapIndex(k pulumi.StringInput) VaultConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VaultConfiguration {
		return vs[0].(map[string]*VaultConfiguration)[vs[1].(string)]
	}).(VaultConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VaultConfigurationInput)(nil)).Elem(), &VaultConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultConfigurationArrayInput)(nil)).Elem(), VaultConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultConfigurationMapInput)(nil)).Elem(), VaultConfigurationMap{})
	pulumi.RegisterOutputType(VaultConfigurationOutput{})
	pulumi.RegisterOutputType(VaultConfigurationArrayOutput{})
	pulumi.RegisterOutputType(VaultConfigurationMapOutput{})
}
