// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Artifactory Local Vagrant Repository Resource
//
// Creates a local vagrant repository.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := artifactory.NewLocalVagrantRepository(ctx, "terraform-local-test-vagrant-repo", &artifactory.LocalVagrantRepositoryArgs{
// 			Key: pulumi.String("terraform-local-test-vagrant-repo"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type LocalVagrantRepository struct {
	pulumi.CustomResourceState

	// When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and
	// therefore requires strict content moderation to prevent malicious users from uploading content that may compromise
	// security (e.g., cross-site scripting attacks).
	ArchiveBrowsingEnabled pulumi.BoolPtrOutput   `pulumi:"archiveBrowsingEnabled"`
	BlackedOut             pulumi.BoolPtrOutput   `pulumi:"blackedOut"`
	Description            pulumi.StringPtrOutput `pulumi:"description"`
	DownloadDirect         pulumi.BoolPtrOutput   `pulumi:"downloadDirect"`
	ExcludesPattern        pulumi.StringOutput    `pulumi:"excludesPattern"`
	IncludesPattern        pulumi.StringOutput    `pulumi:"includesPattern"`
	// - the identity key of the repo
	Key         pulumi.StringOutput    `pulumi:"key"`
	Notes       pulumi.StringPtrOutput `pulumi:"notes"`
	PackageType pulumi.StringOutput    `pulumi:"packageType"`
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution pulumi.BoolPtrOutput `pulumi:"priorityResolution"`
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments pulumi.StringArrayOutput `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed
	// with project key, separated by a dash.
	ProjectKey    pulumi.StringPtrOutput   `pulumi:"projectKey"`
	PropertySets  pulumi.StringArrayOutput `pulumi:"propertySets"`
	RepoLayoutRef pulumi.StringOutput      `pulumi:"repoLayoutRef"`
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
	// Xray settings.
	XrayIndex pulumi.BoolPtrOutput `pulumi:"xrayIndex"`
}

// NewLocalVagrantRepository registers a new resource with the given unique name, arguments, and options.
func NewLocalVagrantRepository(ctx *pulumi.Context,
	name string, args *LocalVagrantRepositoryArgs, opts ...pulumi.ResourceOption) (*LocalVagrantRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	var resource LocalVagrantRepository
	err := ctx.RegisterResource("artifactory:index/localVagrantRepository:LocalVagrantRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLocalVagrantRepository gets an existing LocalVagrantRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLocalVagrantRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LocalVagrantRepositoryState, opts ...pulumi.ResourceOption) (*LocalVagrantRepository, error) {
	var resource LocalVagrantRepository
	err := ctx.ReadResource("artifactory:index/localVagrantRepository:LocalVagrantRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LocalVagrantRepository resources.
type localVagrantRepositoryState struct {
	// When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and
	// therefore requires strict content moderation to prevent malicious users from uploading content that may compromise
	// security (e.g., cross-site scripting attacks).
	ArchiveBrowsingEnabled *bool   `pulumi:"archiveBrowsingEnabled"`
	BlackedOut             *bool   `pulumi:"blackedOut"`
	Description            *string `pulumi:"description"`
	DownloadDirect         *bool   `pulumi:"downloadDirect"`
	ExcludesPattern        *string `pulumi:"excludesPattern"`
	IncludesPattern        *string `pulumi:"includesPattern"`
	// - the identity key of the repo
	Key         *string `pulumi:"key"`
	Notes       *string `pulumi:"notes"`
	PackageType *string `pulumi:"packageType"`
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution *bool `pulumi:"priorityResolution"`
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments []string `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed
	// with project key, separated by a dash.
	ProjectKey    *string  `pulumi:"projectKey"`
	PropertySets  []string `pulumi:"propertySets"`
	RepoLayoutRef *string  `pulumi:"repoLayoutRef"`
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
	// Xray settings.
	XrayIndex *bool `pulumi:"xrayIndex"`
}

type LocalVagrantRepositoryState struct {
	// When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and
	// therefore requires strict content moderation to prevent malicious users from uploading content that may compromise
	// security (e.g., cross-site scripting attacks).
	ArchiveBrowsingEnabled pulumi.BoolPtrInput
	BlackedOut             pulumi.BoolPtrInput
	Description            pulumi.StringPtrInput
	DownloadDirect         pulumi.BoolPtrInput
	ExcludesPattern        pulumi.StringPtrInput
	IncludesPattern        pulumi.StringPtrInput
	// - the identity key of the repo
	Key         pulumi.StringPtrInput
	Notes       pulumi.StringPtrInput
	PackageType pulumi.StringPtrInput
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution pulumi.BoolPtrInput
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments pulumi.StringArrayInput
	// Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed
	// with project key, separated by a dash.
	ProjectKey    pulumi.StringPtrInput
	PropertySets  pulumi.StringArrayInput
	RepoLayoutRef pulumi.StringPtrInput
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
	// Xray settings.
	XrayIndex pulumi.BoolPtrInput
}

func (LocalVagrantRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*localVagrantRepositoryState)(nil)).Elem()
}

type localVagrantRepositoryArgs struct {
	// When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and
	// therefore requires strict content moderation to prevent malicious users from uploading content that may compromise
	// security (e.g., cross-site scripting attacks).
	ArchiveBrowsingEnabled *bool   `pulumi:"archiveBrowsingEnabled"`
	BlackedOut             *bool   `pulumi:"blackedOut"`
	Description            *string `pulumi:"description"`
	DownloadDirect         *bool   `pulumi:"downloadDirect"`
	ExcludesPattern        *string `pulumi:"excludesPattern"`
	IncludesPattern        *string `pulumi:"includesPattern"`
	// - the identity key of the repo
	Key   string  `pulumi:"key"`
	Notes *string `pulumi:"notes"`
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution *bool `pulumi:"priorityResolution"`
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments []string `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed
	// with project key, separated by a dash.
	ProjectKey    *string  `pulumi:"projectKey"`
	PropertySets  []string `pulumi:"propertySets"`
	RepoLayoutRef *string  `pulumi:"repoLayoutRef"`
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
	// Xray settings.
	XrayIndex *bool `pulumi:"xrayIndex"`
}

// The set of arguments for constructing a LocalVagrantRepository resource.
type LocalVagrantRepositoryArgs struct {
	// When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and
	// therefore requires strict content moderation to prevent malicious users from uploading content that may compromise
	// security (e.g., cross-site scripting attacks).
	ArchiveBrowsingEnabled pulumi.BoolPtrInput
	BlackedOut             pulumi.BoolPtrInput
	Description            pulumi.StringPtrInput
	DownloadDirect         pulumi.BoolPtrInput
	ExcludesPattern        pulumi.StringPtrInput
	IncludesPattern        pulumi.StringPtrInput
	// - the identity key of the repo
	Key   pulumi.StringInput
	Notes pulumi.StringPtrInput
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution pulumi.BoolPtrInput
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments pulumi.StringArrayInput
	// Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed
	// with project key, separated by a dash.
	ProjectKey    pulumi.StringPtrInput
	PropertySets  pulumi.StringArrayInput
	RepoLayoutRef pulumi.StringPtrInput
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
	// Xray settings.
	XrayIndex pulumi.BoolPtrInput
}

func (LocalVagrantRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*localVagrantRepositoryArgs)(nil)).Elem()
}

type LocalVagrantRepositoryInput interface {
	pulumi.Input

	ToLocalVagrantRepositoryOutput() LocalVagrantRepositoryOutput
	ToLocalVagrantRepositoryOutputWithContext(ctx context.Context) LocalVagrantRepositoryOutput
}

func (*LocalVagrantRepository) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalVagrantRepository)(nil)).Elem()
}

func (i *LocalVagrantRepository) ToLocalVagrantRepositoryOutput() LocalVagrantRepositoryOutput {
	return i.ToLocalVagrantRepositoryOutputWithContext(context.Background())
}

func (i *LocalVagrantRepository) ToLocalVagrantRepositoryOutputWithContext(ctx context.Context) LocalVagrantRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalVagrantRepositoryOutput)
}

// LocalVagrantRepositoryArrayInput is an input type that accepts LocalVagrantRepositoryArray and LocalVagrantRepositoryArrayOutput values.
// You can construct a concrete instance of `LocalVagrantRepositoryArrayInput` via:
//
//          LocalVagrantRepositoryArray{ LocalVagrantRepositoryArgs{...} }
type LocalVagrantRepositoryArrayInput interface {
	pulumi.Input

	ToLocalVagrantRepositoryArrayOutput() LocalVagrantRepositoryArrayOutput
	ToLocalVagrantRepositoryArrayOutputWithContext(context.Context) LocalVagrantRepositoryArrayOutput
}

type LocalVagrantRepositoryArray []LocalVagrantRepositoryInput

func (LocalVagrantRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LocalVagrantRepository)(nil)).Elem()
}

func (i LocalVagrantRepositoryArray) ToLocalVagrantRepositoryArrayOutput() LocalVagrantRepositoryArrayOutput {
	return i.ToLocalVagrantRepositoryArrayOutputWithContext(context.Background())
}

func (i LocalVagrantRepositoryArray) ToLocalVagrantRepositoryArrayOutputWithContext(ctx context.Context) LocalVagrantRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalVagrantRepositoryArrayOutput)
}

// LocalVagrantRepositoryMapInput is an input type that accepts LocalVagrantRepositoryMap and LocalVagrantRepositoryMapOutput values.
// You can construct a concrete instance of `LocalVagrantRepositoryMapInput` via:
//
//          LocalVagrantRepositoryMap{ "key": LocalVagrantRepositoryArgs{...} }
type LocalVagrantRepositoryMapInput interface {
	pulumi.Input

	ToLocalVagrantRepositoryMapOutput() LocalVagrantRepositoryMapOutput
	ToLocalVagrantRepositoryMapOutputWithContext(context.Context) LocalVagrantRepositoryMapOutput
}

type LocalVagrantRepositoryMap map[string]LocalVagrantRepositoryInput

func (LocalVagrantRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LocalVagrantRepository)(nil)).Elem()
}

func (i LocalVagrantRepositoryMap) ToLocalVagrantRepositoryMapOutput() LocalVagrantRepositoryMapOutput {
	return i.ToLocalVagrantRepositoryMapOutputWithContext(context.Background())
}

func (i LocalVagrantRepositoryMap) ToLocalVagrantRepositoryMapOutputWithContext(ctx context.Context) LocalVagrantRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalVagrantRepositoryMapOutput)
}

type LocalVagrantRepositoryOutput struct{ *pulumi.OutputState }

func (LocalVagrantRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalVagrantRepository)(nil)).Elem()
}

func (o LocalVagrantRepositoryOutput) ToLocalVagrantRepositoryOutput() LocalVagrantRepositoryOutput {
	return o
}

func (o LocalVagrantRepositoryOutput) ToLocalVagrantRepositoryOutputWithContext(ctx context.Context) LocalVagrantRepositoryOutput {
	return o
}

type LocalVagrantRepositoryArrayOutput struct{ *pulumi.OutputState }

func (LocalVagrantRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LocalVagrantRepository)(nil)).Elem()
}

func (o LocalVagrantRepositoryArrayOutput) ToLocalVagrantRepositoryArrayOutput() LocalVagrantRepositoryArrayOutput {
	return o
}

func (o LocalVagrantRepositoryArrayOutput) ToLocalVagrantRepositoryArrayOutputWithContext(ctx context.Context) LocalVagrantRepositoryArrayOutput {
	return o
}

func (o LocalVagrantRepositoryArrayOutput) Index(i pulumi.IntInput) LocalVagrantRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LocalVagrantRepository {
		return vs[0].([]*LocalVagrantRepository)[vs[1].(int)]
	}).(LocalVagrantRepositoryOutput)
}

type LocalVagrantRepositoryMapOutput struct{ *pulumi.OutputState }

func (LocalVagrantRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LocalVagrantRepository)(nil)).Elem()
}

func (o LocalVagrantRepositoryMapOutput) ToLocalVagrantRepositoryMapOutput() LocalVagrantRepositoryMapOutput {
	return o
}

func (o LocalVagrantRepositoryMapOutput) ToLocalVagrantRepositoryMapOutputWithContext(ctx context.Context) LocalVagrantRepositoryMapOutput {
	return o
}

func (o LocalVagrantRepositoryMapOutput) MapIndex(k pulumi.StringInput) LocalVagrantRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LocalVagrantRepository {
		return vs[0].(map[string]*LocalVagrantRepository)[vs[1].(string)]
	}).(LocalVagrantRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LocalVagrantRepositoryInput)(nil)).Elem(), &LocalVagrantRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalVagrantRepositoryArrayInput)(nil)).Elem(), LocalVagrantRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalVagrantRepositoryMapInput)(nil)).Elem(), LocalVagrantRepositoryMap{})
	pulumi.RegisterOutputType(LocalVagrantRepositoryOutput{})
	pulumi.RegisterOutputType(LocalVagrantRepositoryArrayOutput{})
	pulumi.RegisterOutputType(LocalVagrantRepositoryMapOutput{})
}
