// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AccessTokenAdminToken struct {
	InstanceId string `pulumi:"instanceId"`
}

// AccessTokenAdminTokenInput is an input type that accepts AccessTokenAdminTokenArgs and AccessTokenAdminTokenOutput values.
// You can construct a concrete instance of `AccessTokenAdminTokenInput` via:
//
//	AccessTokenAdminTokenArgs{...}
type AccessTokenAdminTokenInput interface {
	pulumi.Input

	ToAccessTokenAdminTokenOutput() AccessTokenAdminTokenOutput
	ToAccessTokenAdminTokenOutputWithContext(context.Context) AccessTokenAdminTokenOutput
}

type AccessTokenAdminTokenArgs struct {
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
}

func (AccessTokenAdminTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessTokenAdminToken)(nil)).Elem()
}

func (i AccessTokenAdminTokenArgs) ToAccessTokenAdminTokenOutput() AccessTokenAdminTokenOutput {
	return i.ToAccessTokenAdminTokenOutputWithContext(context.Background())
}

func (i AccessTokenAdminTokenArgs) ToAccessTokenAdminTokenOutputWithContext(ctx context.Context) AccessTokenAdminTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessTokenAdminTokenOutput)
}

func (i AccessTokenAdminTokenArgs) ToAccessTokenAdminTokenPtrOutput() AccessTokenAdminTokenPtrOutput {
	return i.ToAccessTokenAdminTokenPtrOutputWithContext(context.Background())
}

func (i AccessTokenAdminTokenArgs) ToAccessTokenAdminTokenPtrOutputWithContext(ctx context.Context) AccessTokenAdminTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessTokenAdminTokenOutput).ToAccessTokenAdminTokenPtrOutputWithContext(ctx)
}

// AccessTokenAdminTokenPtrInput is an input type that accepts AccessTokenAdminTokenArgs, AccessTokenAdminTokenPtr and AccessTokenAdminTokenPtrOutput values.
// You can construct a concrete instance of `AccessTokenAdminTokenPtrInput` via:
//
//	        AccessTokenAdminTokenArgs{...}
//
//	or:
//
//	        nil
type AccessTokenAdminTokenPtrInput interface {
	pulumi.Input

	ToAccessTokenAdminTokenPtrOutput() AccessTokenAdminTokenPtrOutput
	ToAccessTokenAdminTokenPtrOutputWithContext(context.Context) AccessTokenAdminTokenPtrOutput
}

type accessTokenAdminTokenPtrType AccessTokenAdminTokenArgs

func AccessTokenAdminTokenPtr(v *AccessTokenAdminTokenArgs) AccessTokenAdminTokenPtrInput {
	return (*accessTokenAdminTokenPtrType)(v)
}

func (*accessTokenAdminTokenPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessTokenAdminToken)(nil)).Elem()
}

func (i *accessTokenAdminTokenPtrType) ToAccessTokenAdminTokenPtrOutput() AccessTokenAdminTokenPtrOutput {
	return i.ToAccessTokenAdminTokenPtrOutputWithContext(context.Background())
}

func (i *accessTokenAdminTokenPtrType) ToAccessTokenAdminTokenPtrOutputWithContext(ctx context.Context) AccessTokenAdminTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessTokenAdminTokenPtrOutput)
}

type AccessTokenAdminTokenOutput struct{ *pulumi.OutputState }

func (AccessTokenAdminTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessTokenAdminToken)(nil)).Elem()
}

func (o AccessTokenAdminTokenOutput) ToAccessTokenAdminTokenOutput() AccessTokenAdminTokenOutput {
	return o
}

func (o AccessTokenAdminTokenOutput) ToAccessTokenAdminTokenOutputWithContext(ctx context.Context) AccessTokenAdminTokenOutput {
	return o
}

func (o AccessTokenAdminTokenOutput) ToAccessTokenAdminTokenPtrOutput() AccessTokenAdminTokenPtrOutput {
	return o.ToAccessTokenAdminTokenPtrOutputWithContext(context.Background())
}

func (o AccessTokenAdminTokenOutput) ToAccessTokenAdminTokenPtrOutputWithContext(ctx context.Context) AccessTokenAdminTokenPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccessTokenAdminToken) *AccessTokenAdminToken {
		return &v
	}).(AccessTokenAdminTokenPtrOutput)
}

func (o AccessTokenAdminTokenOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v AccessTokenAdminToken) string { return v.InstanceId }).(pulumi.StringOutput)
}

type AccessTokenAdminTokenPtrOutput struct{ *pulumi.OutputState }

func (AccessTokenAdminTokenPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessTokenAdminToken)(nil)).Elem()
}

func (o AccessTokenAdminTokenPtrOutput) ToAccessTokenAdminTokenPtrOutput() AccessTokenAdminTokenPtrOutput {
	return o
}

func (o AccessTokenAdminTokenPtrOutput) ToAccessTokenAdminTokenPtrOutputWithContext(ctx context.Context) AccessTokenAdminTokenPtrOutput {
	return o
}

func (o AccessTokenAdminTokenPtrOutput) Elem() AccessTokenAdminTokenOutput {
	return o.ApplyT(func(v *AccessTokenAdminToken) AccessTokenAdminToken {
		if v != nil {
			return *v
		}
		var ret AccessTokenAdminToken
		return ret
	}).(AccessTokenAdminTokenOutput)
}

func (o AccessTokenAdminTokenPtrOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessTokenAdminToken) *string {
		if v == nil {
			return nil
		}
		return &v.InstanceId
	}).(pulumi.StringPtrOutput)
}

type ArtifactPropertyWebhookCriteria struct {
	// Trigger on any local repo.
	AnyLocal bool `pulumi:"anyLocal"`
	// Trigger on any remote repo.
	AnyRemote bool `pulumi:"anyRemote"`
	// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
	ExcludePatterns []string `pulumi:"excludePatterns"`
	// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
	IncludePatterns []string `pulumi:"includePatterns"`
	// Trigger on this list of repo keys.
	RepoKeys []string `pulumi:"repoKeys"`
}

// ArtifactPropertyWebhookCriteriaInput is an input type that accepts ArtifactPropertyWebhookCriteriaArgs and ArtifactPropertyWebhookCriteriaOutput values.
// You can construct a concrete instance of `ArtifactPropertyWebhookCriteriaInput` via:
//
//	ArtifactPropertyWebhookCriteriaArgs{...}
type ArtifactPropertyWebhookCriteriaInput interface {
	pulumi.Input

	ToArtifactPropertyWebhookCriteriaOutput() ArtifactPropertyWebhookCriteriaOutput
	ToArtifactPropertyWebhookCriteriaOutputWithContext(context.Context) ArtifactPropertyWebhookCriteriaOutput
}

type ArtifactPropertyWebhookCriteriaArgs struct {
	// Trigger on any local repo.
	AnyLocal pulumi.BoolInput `pulumi:"anyLocal"`
	// Trigger on any remote repo.
	AnyRemote pulumi.BoolInput `pulumi:"anyRemote"`
	// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
	ExcludePatterns pulumi.StringArrayInput `pulumi:"excludePatterns"`
	// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
	IncludePatterns pulumi.StringArrayInput `pulumi:"includePatterns"`
	// Trigger on this list of repo keys.
	RepoKeys pulumi.StringArrayInput `pulumi:"repoKeys"`
}

func (ArtifactPropertyWebhookCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactPropertyWebhookCriteria)(nil)).Elem()
}

func (i ArtifactPropertyWebhookCriteriaArgs) ToArtifactPropertyWebhookCriteriaOutput() ArtifactPropertyWebhookCriteriaOutput {
	return i.ToArtifactPropertyWebhookCriteriaOutputWithContext(context.Background())
}

func (i ArtifactPropertyWebhookCriteriaArgs) ToArtifactPropertyWebhookCriteriaOutputWithContext(ctx context.Context) ArtifactPropertyWebhookCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactPropertyWebhookCriteriaOutput)
}

func (i ArtifactPropertyWebhookCriteriaArgs) ToArtifactPropertyWebhookCriteriaPtrOutput() ArtifactPropertyWebhookCriteriaPtrOutput {
	return i.ToArtifactPropertyWebhookCriteriaPtrOutputWithContext(context.Background())
}

func (i ArtifactPropertyWebhookCriteriaArgs) ToArtifactPropertyWebhookCriteriaPtrOutputWithContext(ctx context.Context) ArtifactPropertyWebhookCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactPropertyWebhookCriteriaOutput).ToArtifactPropertyWebhookCriteriaPtrOutputWithContext(ctx)
}

// ArtifactPropertyWebhookCriteriaPtrInput is an input type that accepts ArtifactPropertyWebhookCriteriaArgs, ArtifactPropertyWebhookCriteriaPtr and ArtifactPropertyWebhookCriteriaPtrOutput values.
// You can construct a concrete instance of `ArtifactPropertyWebhookCriteriaPtrInput` via:
//
//	        ArtifactPropertyWebhookCriteriaArgs{...}
//
//	or:
//
//	        nil
type ArtifactPropertyWebhookCriteriaPtrInput interface {
	pulumi.Input

	ToArtifactPropertyWebhookCriteriaPtrOutput() ArtifactPropertyWebhookCriteriaPtrOutput
	ToArtifactPropertyWebhookCriteriaPtrOutputWithContext(context.Context) ArtifactPropertyWebhookCriteriaPtrOutput
}

type artifactPropertyWebhookCriteriaPtrType ArtifactPropertyWebhookCriteriaArgs

func ArtifactPropertyWebhookCriteriaPtr(v *ArtifactPropertyWebhookCriteriaArgs) ArtifactPropertyWebhookCriteriaPtrInput {
	return (*artifactPropertyWebhookCriteriaPtrType)(v)
}

func (*artifactPropertyWebhookCriteriaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactPropertyWebhookCriteria)(nil)).Elem()
}

func (i *artifactPropertyWebhookCriteriaPtrType) ToArtifactPropertyWebhookCriteriaPtrOutput() ArtifactPropertyWebhookCriteriaPtrOutput {
	return i.ToArtifactPropertyWebhookCriteriaPtrOutputWithContext(context.Background())
}

func (i *artifactPropertyWebhookCriteriaPtrType) ToArtifactPropertyWebhookCriteriaPtrOutputWithContext(ctx context.Context) ArtifactPropertyWebhookCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactPropertyWebhookCriteriaPtrOutput)
}

type ArtifactPropertyWebhookCriteriaOutput struct{ *pulumi.OutputState }

func (ArtifactPropertyWebhookCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactPropertyWebhookCriteria)(nil)).Elem()
}

func (o ArtifactPropertyWebhookCriteriaOutput) ToArtifactPropertyWebhookCriteriaOutput() ArtifactPropertyWebhookCriteriaOutput {
	return o
}

func (o ArtifactPropertyWebhookCriteriaOutput) ToArtifactPropertyWebhookCriteriaOutputWithContext(ctx context.Context) ArtifactPropertyWebhookCriteriaOutput {
	return o
}

func (o ArtifactPropertyWebhookCriteriaOutput) ToArtifactPropertyWebhookCriteriaPtrOutput() ArtifactPropertyWebhookCriteriaPtrOutput {
	return o.ToArtifactPropertyWebhookCriteriaPtrOutputWithContext(context.Background())
}

func (o ArtifactPropertyWebhookCriteriaOutput) ToArtifactPropertyWebhookCriteriaPtrOutputWithContext(ctx context.Context) ArtifactPropertyWebhookCriteriaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ArtifactPropertyWebhookCriteria) *ArtifactPropertyWebhookCriteria {
		return &v
	}).(ArtifactPropertyWebhookCriteriaPtrOutput)
}

// Trigger on any local repo.
func (o ArtifactPropertyWebhookCriteriaOutput) AnyLocal() pulumi.BoolOutput {
	return o.ApplyT(func(v ArtifactPropertyWebhookCriteria) bool { return v.AnyLocal }).(pulumi.BoolOutput)
}

// Trigger on any remote repo.
func (o ArtifactPropertyWebhookCriteriaOutput) AnyRemote() pulumi.BoolOutput {
	return o.ApplyT(func(v ArtifactPropertyWebhookCriteria) bool { return v.AnyRemote }).(pulumi.BoolOutput)
}

// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
func (o ArtifactPropertyWebhookCriteriaOutput) ExcludePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArtifactPropertyWebhookCriteria) []string { return v.ExcludePatterns }).(pulumi.StringArrayOutput)
}

// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
func (o ArtifactPropertyWebhookCriteriaOutput) IncludePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArtifactPropertyWebhookCriteria) []string { return v.IncludePatterns }).(pulumi.StringArrayOutput)
}

// Trigger on this list of repo keys.
func (o ArtifactPropertyWebhookCriteriaOutput) RepoKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArtifactPropertyWebhookCriteria) []string { return v.RepoKeys }).(pulumi.StringArrayOutput)
}

type ArtifactPropertyWebhookCriteriaPtrOutput struct{ *pulumi.OutputState }

func (ArtifactPropertyWebhookCriteriaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactPropertyWebhookCriteria)(nil)).Elem()
}

func (o ArtifactPropertyWebhookCriteriaPtrOutput) ToArtifactPropertyWebhookCriteriaPtrOutput() ArtifactPropertyWebhookCriteriaPtrOutput {
	return o
}

func (o ArtifactPropertyWebhookCriteriaPtrOutput) ToArtifactPropertyWebhookCriteriaPtrOutputWithContext(ctx context.Context) ArtifactPropertyWebhookCriteriaPtrOutput {
	return o
}

func (o ArtifactPropertyWebhookCriteriaPtrOutput) Elem() ArtifactPropertyWebhookCriteriaOutput {
	return o.ApplyT(func(v *ArtifactPropertyWebhookCriteria) ArtifactPropertyWebhookCriteria {
		if v != nil {
			return *v
		}
		var ret ArtifactPropertyWebhookCriteria
		return ret
	}).(ArtifactPropertyWebhookCriteriaOutput)
}

// Trigger on any local repo.
func (o ArtifactPropertyWebhookCriteriaPtrOutput) AnyLocal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ArtifactPropertyWebhookCriteria) *bool {
		if v == nil {
			return nil
		}
		return &v.AnyLocal
	}).(pulumi.BoolPtrOutput)
}

// Trigger on any remote repo.
func (o ArtifactPropertyWebhookCriteriaPtrOutput) AnyRemote() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ArtifactPropertyWebhookCriteria) *bool {
		if v == nil {
			return nil
		}
		return &v.AnyRemote
	}).(pulumi.BoolPtrOutput)
}

// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
func (o ArtifactPropertyWebhookCriteriaPtrOutput) ExcludePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ArtifactPropertyWebhookCriteria) []string {
		if v == nil {
			return nil
		}
		return v.ExcludePatterns
	}).(pulumi.StringArrayOutput)
}

// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
func (o ArtifactPropertyWebhookCriteriaPtrOutput) IncludePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ArtifactPropertyWebhookCriteria) []string {
		if v == nil {
			return nil
		}
		return v.IncludePatterns
	}).(pulumi.StringArrayOutput)
}

// Trigger on this list of repo keys.
func (o ArtifactPropertyWebhookCriteriaPtrOutput) RepoKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ArtifactPropertyWebhookCriteria) []string {
		if v == nil {
			return nil
		}
		return v.RepoKeys
	}).(pulumi.StringArrayOutput)
}

type ArtifactPropertyWebhookHandler struct {
	// Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
	CustomHttpHeaders map[string]string `pulumi:"customHttpHeaders"`
	// Proxy key from Artifactory UI (Administration > Proxies > Configuration).
	Proxy *string `pulumi:"proxy"`
	// Secret authentication token that will be sent to the configured URL. The value will be sent as `x-jfrog-event-auth` header.
	Secret *string `pulumi:"secret"`
	// Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
	Url string `pulumi:"url"`
}

// ArtifactPropertyWebhookHandlerInput is an input type that accepts ArtifactPropertyWebhookHandlerArgs and ArtifactPropertyWebhookHandlerOutput values.
// You can construct a concrete instance of `ArtifactPropertyWebhookHandlerInput` via:
//
//	ArtifactPropertyWebhookHandlerArgs{...}
type ArtifactPropertyWebhookHandlerInput interface {
	pulumi.Input

	ToArtifactPropertyWebhookHandlerOutput() ArtifactPropertyWebhookHandlerOutput
	ToArtifactPropertyWebhookHandlerOutputWithContext(context.Context) ArtifactPropertyWebhookHandlerOutput
}

type ArtifactPropertyWebhookHandlerArgs struct {
	// Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
	CustomHttpHeaders pulumi.StringMapInput `pulumi:"customHttpHeaders"`
	// Proxy key from Artifactory UI (Administration > Proxies > Configuration).
	Proxy pulumi.StringPtrInput `pulumi:"proxy"`
	// Secret authentication token that will be sent to the configured URL. The value will be sent as `x-jfrog-event-auth` header.
	Secret pulumi.StringPtrInput `pulumi:"secret"`
	// Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
	Url pulumi.StringInput `pulumi:"url"`
}

func (ArtifactPropertyWebhookHandlerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactPropertyWebhookHandler)(nil)).Elem()
}

func (i ArtifactPropertyWebhookHandlerArgs) ToArtifactPropertyWebhookHandlerOutput() ArtifactPropertyWebhookHandlerOutput {
	return i.ToArtifactPropertyWebhookHandlerOutputWithContext(context.Background())
}

func (i ArtifactPropertyWebhookHandlerArgs) ToArtifactPropertyWebhookHandlerOutputWithContext(ctx context.Context) ArtifactPropertyWebhookHandlerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactPropertyWebhookHandlerOutput)
}

// ArtifactPropertyWebhookHandlerArrayInput is an input type that accepts ArtifactPropertyWebhookHandlerArray and ArtifactPropertyWebhookHandlerArrayOutput values.
// You can construct a concrete instance of `ArtifactPropertyWebhookHandlerArrayInput` via:
//
//	ArtifactPropertyWebhookHandlerArray{ ArtifactPropertyWebhookHandlerArgs{...} }
type ArtifactPropertyWebhookHandlerArrayInput interface {
	pulumi.Input

	ToArtifactPropertyWebhookHandlerArrayOutput() ArtifactPropertyWebhookHandlerArrayOutput
	ToArtifactPropertyWebhookHandlerArrayOutputWithContext(context.Context) ArtifactPropertyWebhookHandlerArrayOutput
}

type ArtifactPropertyWebhookHandlerArray []ArtifactPropertyWebhookHandlerInput

func (ArtifactPropertyWebhookHandlerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArtifactPropertyWebhookHandler)(nil)).Elem()
}

func (i ArtifactPropertyWebhookHandlerArray) ToArtifactPropertyWebhookHandlerArrayOutput() ArtifactPropertyWebhookHandlerArrayOutput {
	return i.ToArtifactPropertyWebhookHandlerArrayOutputWithContext(context.Background())
}

func (i ArtifactPropertyWebhookHandlerArray) ToArtifactPropertyWebhookHandlerArrayOutputWithContext(ctx context.Context) ArtifactPropertyWebhookHandlerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactPropertyWebhookHandlerArrayOutput)
}

type ArtifactPropertyWebhookHandlerOutput struct{ *pulumi.OutputState }

func (ArtifactPropertyWebhookHandlerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactPropertyWebhookHandler)(nil)).Elem()
}

func (o ArtifactPropertyWebhookHandlerOutput) ToArtifactPropertyWebhookHandlerOutput() ArtifactPropertyWebhookHandlerOutput {
	return o
}

func (o ArtifactPropertyWebhookHandlerOutput) ToArtifactPropertyWebhookHandlerOutputWithContext(ctx context.Context) ArtifactPropertyWebhookHandlerOutput {
	return o
}

// Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
func (o ArtifactPropertyWebhookHandlerOutput) CustomHttpHeaders() pulumi.StringMapOutput {
	return o.ApplyT(func(v ArtifactPropertyWebhookHandler) map[string]string { return v.CustomHttpHeaders }).(pulumi.StringMapOutput)
}

// Proxy key from Artifactory UI (Administration > Proxies > Configuration).
func (o ArtifactPropertyWebhookHandlerOutput) Proxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactPropertyWebhookHandler) *string { return v.Proxy }).(pulumi.StringPtrOutput)
}

// Secret authentication token that will be sent to the configured URL. The value will be sent as `x-jfrog-event-auth` header.
func (o ArtifactPropertyWebhookHandlerOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactPropertyWebhookHandler) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

// Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
func (o ArtifactPropertyWebhookHandlerOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ArtifactPropertyWebhookHandler) string { return v.Url }).(pulumi.StringOutput)
}

type ArtifactPropertyWebhookHandlerArrayOutput struct{ *pulumi.OutputState }

func (ArtifactPropertyWebhookHandlerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArtifactPropertyWebhookHandler)(nil)).Elem()
}

func (o ArtifactPropertyWebhookHandlerArrayOutput) ToArtifactPropertyWebhookHandlerArrayOutput() ArtifactPropertyWebhookHandlerArrayOutput {
	return o
}

func (o ArtifactPropertyWebhookHandlerArrayOutput) ToArtifactPropertyWebhookHandlerArrayOutputWithContext(ctx context.Context) ArtifactPropertyWebhookHandlerArrayOutput {
	return o
}

func (o ArtifactPropertyWebhookHandlerArrayOutput) Index(i pulumi.IntInput) ArtifactPropertyWebhookHandlerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArtifactPropertyWebhookHandler {
		return vs[0].([]ArtifactPropertyWebhookHandler)[vs[1].(int)]
	}).(ArtifactPropertyWebhookHandlerOutput)
}

type ArtifactWebhookCriteria struct {
	// Trigger on any local repo.
	AnyLocal bool `pulumi:"anyLocal"`
	// Trigger on any remote repo.
	AnyRemote bool `pulumi:"anyRemote"`
	// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
	ExcludePatterns []string `pulumi:"excludePatterns"`
	// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
	IncludePatterns []string `pulumi:"includePatterns"`
	// Trigger on this list of repo keys.
	RepoKeys []string `pulumi:"repoKeys"`
}

// ArtifactWebhookCriteriaInput is an input type that accepts ArtifactWebhookCriteriaArgs and ArtifactWebhookCriteriaOutput values.
// You can construct a concrete instance of `ArtifactWebhookCriteriaInput` via:
//
//	ArtifactWebhookCriteriaArgs{...}
type ArtifactWebhookCriteriaInput interface {
	pulumi.Input

	ToArtifactWebhookCriteriaOutput() ArtifactWebhookCriteriaOutput
	ToArtifactWebhookCriteriaOutputWithContext(context.Context) ArtifactWebhookCriteriaOutput
}

type ArtifactWebhookCriteriaArgs struct {
	// Trigger on any local repo.
	AnyLocal pulumi.BoolInput `pulumi:"anyLocal"`
	// Trigger on any remote repo.
	AnyRemote pulumi.BoolInput `pulumi:"anyRemote"`
	// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
	ExcludePatterns pulumi.StringArrayInput `pulumi:"excludePatterns"`
	// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
	IncludePatterns pulumi.StringArrayInput `pulumi:"includePatterns"`
	// Trigger on this list of repo keys.
	RepoKeys pulumi.StringArrayInput `pulumi:"repoKeys"`
}

func (ArtifactWebhookCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactWebhookCriteria)(nil)).Elem()
}

func (i ArtifactWebhookCriteriaArgs) ToArtifactWebhookCriteriaOutput() ArtifactWebhookCriteriaOutput {
	return i.ToArtifactWebhookCriteriaOutputWithContext(context.Background())
}

func (i ArtifactWebhookCriteriaArgs) ToArtifactWebhookCriteriaOutputWithContext(ctx context.Context) ArtifactWebhookCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactWebhookCriteriaOutput)
}

func (i ArtifactWebhookCriteriaArgs) ToArtifactWebhookCriteriaPtrOutput() ArtifactWebhookCriteriaPtrOutput {
	return i.ToArtifactWebhookCriteriaPtrOutputWithContext(context.Background())
}

func (i ArtifactWebhookCriteriaArgs) ToArtifactWebhookCriteriaPtrOutputWithContext(ctx context.Context) ArtifactWebhookCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactWebhookCriteriaOutput).ToArtifactWebhookCriteriaPtrOutputWithContext(ctx)
}

// ArtifactWebhookCriteriaPtrInput is an input type that accepts ArtifactWebhookCriteriaArgs, ArtifactWebhookCriteriaPtr and ArtifactWebhookCriteriaPtrOutput values.
// You can construct a concrete instance of `ArtifactWebhookCriteriaPtrInput` via:
//
//	        ArtifactWebhookCriteriaArgs{...}
//
//	or:
//
//	        nil
type ArtifactWebhookCriteriaPtrInput interface {
	pulumi.Input

	ToArtifactWebhookCriteriaPtrOutput() ArtifactWebhookCriteriaPtrOutput
	ToArtifactWebhookCriteriaPtrOutputWithContext(context.Context) ArtifactWebhookCriteriaPtrOutput
}

type artifactWebhookCriteriaPtrType ArtifactWebhookCriteriaArgs

func ArtifactWebhookCriteriaPtr(v *ArtifactWebhookCriteriaArgs) ArtifactWebhookCriteriaPtrInput {
	return (*artifactWebhookCriteriaPtrType)(v)
}

func (*artifactWebhookCriteriaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactWebhookCriteria)(nil)).Elem()
}

func (i *artifactWebhookCriteriaPtrType) ToArtifactWebhookCriteriaPtrOutput() ArtifactWebhookCriteriaPtrOutput {
	return i.ToArtifactWebhookCriteriaPtrOutputWithContext(context.Background())
}

func (i *artifactWebhookCriteriaPtrType) ToArtifactWebhookCriteriaPtrOutputWithContext(ctx context.Context) ArtifactWebhookCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactWebhookCriteriaPtrOutput)
}

type ArtifactWebhookCriteriaOutput struct{ *pulumi.OutputState }

func (ArtifactWebhookCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactWebhookCriteria)(nil)).Elem()
}

func (o ArtifactWebhookCriteriaOutput) ToArtifactWebhookCriteriaOutput() ArtifactWebhookCriteriaOutput {
	return o
}

func (o ArtifactWebhookCriteriaOutput) ToArtifactWebhookCriteriaOutputWithContext(ctx context.Context) ArtifactWebhookCriteriaOutput {
	return o
}

func (o ArtifactWebhookCriteriaOutput) ToArtifactWebhookCriteriaPtrOutput() ArtifactWebhookCriteriaPtrOutput {
	return o.ToArtifactWebhookCriteriaPtrOutputWithContext(context.Background())
}

func (o ArtifactWebhookCriteriaOutput) ToArtifactWebhookCriteriaPtrOutputWithContext(ctx context.Context) ArtifactWebhookCriteriaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ArtifactWebhookCriteria) *ArtifactWebhookCriteria {
		return &v
	}).(ArtifactWebhookCriteriaPtrOutput)
}

// Trigger on any local repo.
func (o ArtifactWebhookCriteriaOutput) AnyLocal() pulumi.BoolOutput {
	return o.ApplyT(func(v ArtifactWebhookCriteria) bool { return v.AnyLocal }).(pulumi.BoolOutput)
}

// Trigger on any remote repo.
func (o ArtifactWebhookCriteriaOutput) AnyRemote() pulumi.BoolOutput {
	return o.ApplyT(func(v ArtifactWebhookCriteria) bool { return v.AnyRemote }).(pulumi.BoolOutput)
}

// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
func (o ArtifactWebhookCriteriaOutput) ExcludePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArtifactWebhookCriteria) []string { return v.ExcludePatterns }).(pulumi.StringArrayOutput)
}

// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
func (o ArtifactWebhookCriteriaOutput) IncludePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArtifactWebhookCriteria) []string { return v.IncludePatterns }).(pulumi.StringArrayOutput)
}

// Trigger on this list of repo keys.
func (o ArtifactWebhookCriteriaOutput) RepoKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArtifactWebhookCriteria) []string { return v.RepoKeys }).(pulumi.StringArrayOutput)
}

type ArtifactWebhookCriteriaPtrOutput struct{ *pulumi.OutputState }

func (ArtifactWebhookCriteriaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactWebhookCriteria)(nil)).Elem()
}

func (o ArtifactWebhookCriteriaPtrOutput) ToArtifactWebhookCriteriaPtrOutput() ArtifactWebhookCriteriaPtrOutput {
	return o
}

func (o ArtifactWebhookCriteriaPtrOutput) ToArtifactWebhookCriteriaPtrOutputWithContext(ctx context.Context) ArtifactWebhookCriteriaPtrOutput {
	return o
}

func (o ArtifactWebhookCriteriaPtrOutput) Elem() ArtifactWebhookCriteriaOutput {
	return o.ApplyT(func(v *ArtifactWebhookCriteria) ArtifactWebhookCriteria {
		if v != nil {
			return *v
		}
		var ret ArtifactWebhookCriteria
		return ret
	}).(ArtifactWebhookCriteriaOutput)
}

// Trigger on any local repo.
func (o ArtifactWebhookCriteriaPtrOutput) AnyLocal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ArtifactWebhookCriteria) *bool {
		if v == nil {
			return nil
		}
		return &v.AnyLocal
	}).(pulumi.BoolPtrOutput)
}

// Trigger on any remote repo.
func (o ArtifactWebhookCriteriaPtrOutput) AnyRemote() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ArtifactWebhookCriteria) *bool {
		if v == nil {
			return nil
		}
		return &v.AnyRemote
	}).(pulumi.BoolPtrOutput)
}

// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
func (o ArtifactWebhookCriteriaPtrOutput) ExcludePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ArtifactWebhookCriteria) []string {
		if v == nil {
			return nil
		}
		return v.ExcludePatterns
	}).(pulumi.StringArrayOutput)
}

// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
func (o ArtifactWebhookCriteriaPtrOutput) IncludePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ArtifactWebhookCriteria) []string {
		if v == nil {
			return nil
		}
		return v.IncludePatterns
	}).(pulumi.StringArrayOutput)
}

// Trigger on this list of repo keys.
func (o ArtifactWebhookCriteriaPtrOutput) RepoKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ArtifactWebhookCriteria) []string {
		if v == nil {
			return nil
		}
		return v.RepoKeys
	}).(pulumi.StringArrayOutput)
}

type ArtifactWebhookHandler struct {
	// Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
	CustomHttpHeaders map[string]string `pulumi:"customHttpHeaders"`
	// Proxy key from Artifactory UI (Administration > Proxies > Configuration).
	Proxy *string `pulumi:"proxy"`
	// Secret authentication token that will be sent to the configured URL. The value will be sent as `x-jfrog-event-auth` header.
	Secret *string `pulumi:"secret"`
	// Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
	Url string `pulumi:"url"`
}

// ArtifactWebhookHandlerInput is an input type that accepts ArtifactWebhookHandlerArgs and ArtifactWebhookHandlerOutput values.
// You can construct a concrete instance of `ArtifactWebhookHandlerInput` via:
//
//	ArtifactWebhookHandlerArgs{...}
type ArtifactWebhookHandlerInput interface {
	pulumi.Input

	ToArtifactWebhookHandlerOutput() ArtifactWebhookHandlerOutput
	ToArtifactWebhookHandlerOutputWithContext(context.Context) ArtifactWebhookHandlerOutput
}

type ArtifactWebhookHandlerArgs struct {
	// Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
	CustomHttpHeaders pulumi.StringMapInput `pulumi:"customHttpHeaders"`
	// Proxy key from Artifactory UI (Administration > Proxies > Configuration).
	Proxy pulumi.StringPtrInput `pulumi:"proxy"`
	// Secret authentication token that will be sent to the configured URL. The value will be sent as `x-jfrog-event-auth` header.
	Secret pulumi.StringPtrInput `pulumi:"secret"`
	// Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
	Url pulumi.StringInput `pulumi:"url"`
}

func (ArtifactWebhookHandlerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactWebhookHandler)(nil)).Elem()
}

func (i ArtifactWebhookHandlerArgs) ToArtifactWebhookHandlerOutput() ArtifactWebhookHandlerOutput {
	return i.ToArtifactWebhookHandlerOutputWithContext(context.Background())
}

func (i ArtifactWebhookHandlerArgs) ToArtifactWebhookHandlerOutputWithContext(ctx context.Context) ArtifactWebhookHandlerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactWebhookHandlerOutput)
}

// ArtifactWebhookHandlerArrayInput is an input type that accepts ArtifactWebhookHandlerArray and ArtifactWebhookHandlerArrayOutput values.
// You can construct a concrete instance of `ArtifactWebhookHandlerArrayInput` via:
//
//	ArtifactWebhookHandlerArray{ ArtifactWebhookHandlerArgs{...} }
type ArtifactWebhookHandlerArrayInput interface {
	pulumi.Input

	ToArtifactWebhookHandlerArrayOutput() ArtifactWebhookHandlerArrayOutput
	ToArtifactWebhookHandlerArrayOutputWithContext(context.Context) ArtifactWebhookHandlerArrayOutput
}

type ArtifactWebhookHandlerArray []ArtifactWebhookHandlerInput

func (ArtifactWebhookHandlerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArtifactWebhookHandler)(nil)).Elem()
}

func (i ArtifactWebhookHandlerArray) ToArtifactWebhookHandlerArrayOutput() ArtifactWebhookHandlerArrayOutput {
	return i.ToArtifactWebhookHandlerArrayOutputWithContext(context.Background())
}

func (i ArtifactWebhookHandlerArray) ToArtifactWebhookHandlerArrayOutputWithContext(ctx context.Context) ArtifactWebhookHandlerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactWebhookHandlerArrayOutput)
}

type ArtifactWebhookHandlerOutput struct{ *pulumi.OutputState }

func (ArtifactWebhookHandlerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactWebhookHandler)(nil)).Elem()
}

func (o ArtifactWebhookHandlerOutput) ToArtifactWebhookHandlerOutput() ArtifactWebhookHandlerOutput {
	return o
}

func (o ArtifactWebhookHandlerOutput) ToArtifactWebhookHandlerOutputWithContext(ctx context.Context) ArtifactWebhookHandlerOutput {
	return o
}

// Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
func (o ArtifactWebhookHandlerOutput) CustomHttpHeaders() pulumi.StringMapOutput {
	return o.ApplyT(func(v ArtifactWebhookHandler) map[string]string { return v.CustomHttpHeaders }).(pulumi.StringMapOutput)
}

// Proxy key from Artifactory UI (Administration > Proxies > Configuration).
func (o ArtifactWebhookHandlerOutput) Proxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactWebhookHandler) *string { return v.Proxy }).(pulumi.StringPtrOutput)
}

// Secret authentication token that will be sent to the configured URL. The value will be sent as `x-jfrog-event-auth` header.
func (o ArtifactWebhookHandlerOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactWebhookHandler) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

// Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
func (o ArtifactWebhookHandlerOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ArtifactWebhookHandler) string { return v.Url }).(pulumi.StringOutput)
}

type ArtifactWebhookHandlerArrayOutput struct{ *pulumi.OutputState }

func (ArtifactWebhookHandlerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArtifactWebhookHandler)(nil)).Elem()
}

func (o ArtifactWebhookHandlerArrayOutput) ToArtifactWebhookHandlerArrayOutput() ArtifactWebhookHandlerArrayOutput {
	return o
}

func (o ArtifactWebhookHandlerArrayOutput) ToArtifactWebhookHandlerArrayOutputWithContext(ctx context.Context) ArtifactWebhookHandlerArrayOutput {
	return o
}

func (o ArtifactWebhookHandlerArrayOutput) Index(i pulumi.IntInput) ArtifactWebhookHandlerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArtifactWebhookHandler {
		return vs[0].([]ArtifactWebhookHandler)[vs[1].(int)]
	}).(ArtifactWebhookHandlerOutput)
}

type ArtifactoryReleaseBundleWebhookCriteria struct {
	// Trigger on any release bundle
	AnyReleaseBundle bool `pulumi:"anyReleaseBundle"`
	// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**"
	ExcludePatterns []string `pulumi:"excludePatterns"`
	// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**"
	IncludePatterns []string `pulumi:"includePatterns"`
	// Trigger on this list of release bundle names
	RegisteredReleaseBundleNames []string `pulumi:"registeredReleaseBundleNames"`
}

// ArtifactoryReleaseBundleWebhookCriteriaInput is an input type that accepts ArtifactoryReleaseBundleWebhookCriteriaArgs and ArtifactoryReleaseBundleWebhookCriteriaOutput values.
// You can construct a concrete instance of `ArtifactoryReleaseBundleWebhookCriteriaInput` via:
//
//	ArtifactoryReleaseBundleWebhookCriteriaArgs{...}
type ArtifactoryReleaseBundleWebhookCriteriaInput interface {
	pulumi.Input

	ToArtifactoryReleaseBundleWebhookCriteriaOutput() ArtifactoryReleaseBundleWebhookCriteriaOutput
	ToArtifactoryReleaseBundleWebhookCriteriaOutputWithContext(context.Context) ArtifactoryReleaseBundleWebhookCriteriaOutput
}

type ArtifactoryReleaseBundleWebhookCriteriaArgs struct {
	// Trigger on any release bundle
	AnyReleaseBundle pulumi.BoolInput `pulumi:"anyReleaseBundle"`
	// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**"
	ExcludePatterns pulumi.StringArrayInput `pulumi:"excludePatterns"`
	// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**"
	IncludePatterns pulumi.StringArrayInput `pulumi:"includePatterns"`
	// Trigger on this list of release bundle names
	RegisteredReleaseBundleNames pulumi.StringArrayInput `pulumi:"registeredReleaseBundleNames"`
}

func (ArtifactoryReleaseBundleWebhookCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactoryReleaseBundleWebhookCriteria)(nil)).Elem()
}

func (i ArtifactoryReleaseBundleWebhookCriteriaArgs) ToArtifactoryReleaseBundleWebhookCriteriaOutput() ArtifactoryReleaseBundleWebhookCriteriaOutput {
	return i.ToArtifactoryReleaseBundleWebhookCriteriaOutputWithContext(context.Background())
}

func (i ArtifactoryReleaseBundleWebhookCriteriaArgs) ToArtifactoryReleaseBundleWebhookCriteriaOutputWithContext(ctx context.Context) ArtifactoryReleaseBundleWebhookCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactoryReleaseBundleWebhookCriteriaOutput)
}

func (i ArtifactoryReleaseBundleWebhookCriteriaArgs) ToArtifactoryReleaseBundleWebhookCriteriaPtrOutput() ArtifactoryReleaseBundleWebhookCriteriaPtrOutput {
	return i.ToArtifactoryReleaseBundleWebhookCriteriaPtrOutputWithContext(context.Background())
}

func (i ArtifactoryReleaseBundleWebhookCriteriaArgs) ToArtifactoryReleaseBundleWebhookCriteriaPtrOutputWithContext(ctx context.Context) ArtifactoryReleaseBundleWebhookCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactoryReleaseBundleWebhookCriteriaOutput).ToArtifactoryReleaseBundleWebhookCriteriaPtrOutputWithContext(ctx)
}

// ArtifactoryReleaseBundleWebhookCriteriaPtrInput is an input type that accepts ArtifactoryReleaseBundleWebhookCriteriaArgs, ArtifactoryReleaseBundleWebhookCriteriaPtr and ArtifactoryReleaseBundleWebhookCriteriaPtrOutput values.
// You can construct a concrete instance of `ArtifactoryReleaseBundleWebhookCriteriaPtrInput` via:
//
//	        ArtifactoryReleaseBundleWebhookCriteriaArgs{...}
//
//	or:
//
//	        nil
type ArtifactoryReleaseBundleWebhookCriteriaPtrInput interface {
	pulumi.Input

	ToArtifactoryReleaseBundleWebhookCriteriaPtrOutput() ArtifactoryReleaseBundleWebhookCriteriaPtrOutput
	ToArtifactoryReleaseBundleWebhookCriteriaPtrOutputWithContext(context.Context) ArtifactoryReleaseBundleWebhookCriteriaPtrOutput
}

type artifactoryReleaseBundleWebhookCriteriaPtrType ArtifactoryReleaseBundleWebhookCriteriaArgs

func ArtifactoryReleaseBundleWebhookCriteriaPtr(v *ArtifactoryReleaseBundleWebhookCriteriaArgs) ArtifactoryReleaseBundleWebhookCriteriaPtrInput {
	return (*artifactoryReleaseBundleWebhookCriteriaPtrType)(v)
}

func (*artifactoryReleaseBundleWebhookCriteriaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactoryReleaseBundleWebhookCriteria)(nil)).Elem()
}

func (i *artifactoryReleaseBundleWebhookCriteriaPtrType) ToArtifactoryReleaseBundleWebhookCriteriaPtrOutput() ArtifactoryReleaseBundleWebhookCriteriaPtrOutput {
	return i.ToArtifactoryReleaseBundleWebhookCriteriaPtrOutputWithContext(context.Background())
}

func (i *artifactoryReleaseBundleWebhookCriteriaPtrType) ToArtifactoryReleaseBundleWebhookCriteriaPtrOutputWithContext(ctx context.Context) ArtifactoryReleaseBundleWebhookCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactoryReleaseBundleWebhookCriteriaPtrOutput)
}

type ArtifactoryReleaseBundleWebhookCriteriaOutput struct{ *pulumi.OutputState }

func (ArtifactoryReleaseBundleWebhookCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactoryReleaseBundleWebhookCriteria)(nil)).Elem()
}

func (o ArtifactoryReleaseBundleWebhookCriteriaOutput) ToArtifactoryReleaseBundleWebhookCriteriaOutput() ArtifactoryReleaseBundleWebhookCriteriaOutput {
	return o
}

func (o ArtifactoryReleaseBundleWebhookCriteriaOutput) ToArtifactoryReleaseBundleWebhookCriteriaOutputWithContext(ctx context.Context) ArtifactoryReleaseBundleWebhookCriteriaOutput {
	return o
}

func (o ArtifactoryReleaseBundleWebhookCriteriaOutput) ToArtifactoryReleaseBundleWebhookCriteriaPtrOutput() ArtifactoryReleaseBundleWebhookCriteriaPtrOutput {
	return o.ToArtifactoryReleaseBundleWebhookCriteriaPtrOutputWithContext(context.Background())
}

func (o ArtifactoryReleaseBundleWebhookCriteriaOutput) ToArtifactoryReleaseBundleWebhookCriteriaPtrOutputWithContext(ctx context.Context) ArtifactoryReleaseBundleWebhookCriteriaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ArtifactoryReleaseBundleWebhookCriteria) *ArtifactoryReleaseBundleWebhookCriteria {
		return &v
	}).(ArtifactoryReleaseBundleWebhookCriteriaPtrOutput)
}

// Trigger on any release bundle
func (o ArtifactoryReleaseBundleWebhookCriteriaOutput) AnyReleaseBundle() pulumi.BoolOutput {
	return o.ApplyT(func(v ArtifactoryReleaseBundleWebhookCriteria) bool { return v.AnyReleaseBundle }).(pulumi.BoolOutput)
}

// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**"
func (o ArtifactoryReleaseBundleWebhookCriteriaOutput) ExcludePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArtifactoryReleaseBundleWebhookCriteria) []string { return v.ExcludePatterns }).(pulumi.StringArrayOutput)
}

// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**"
func (o ArtifactoryReleaseBundleWebhookCriteriaOutput) IncludePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArtifactoryReleaseBundleWebhookCriteria) []string { return v.IncludePatterns }).(pulumi.StringArrayOutput)
}

// Trigger on this list of release bundle names
func (o ArtifactoryReleaseBundleWebhookCriteriaOutput) RegisteredReleaseBundleNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArtifactoryReleaseBundleWebhookCriteria) []string { return v.RegisteredReleaseBundleNames }).(pulumi.StringArrayOutput)
}

type ArtifactoryReleaseBundleWebhookCriteriaPtrOutput struct{ *pulumi.OutputState }

func (ArtifactoryReleaseBundleWebhookCriteriaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactoryReleaseBundleWebhookCriteria)(nil)).Elem()
}

func (o ArtifactoryReleaseBundleWebhookCriteriaPtrOutput) ToArtifactoryReleaseBundleWebhookCriteriaPtrOutput() ArtifactoryReleaseBundleWebhookCriteriaPtrOutput {
	return o
}

func (o ArtifactoryReleaseBundleWebhookCriteriaPtrOutput) ToArtifactoryReleaseBundleWebhookCriteriaPtrOutputWithContext(ctx context.Context) ArtifactoryReleaseBundleWebhookCriteriaPtrOutput {
	return o
}

func (o ArtifactoryReleaseBundleWebhookCriteriaPtrOutput) Elem() ArtifactoryReleaseBundleWebhookCriteriaOutput {
	return o.ApplyT(func(v *ArtifactoryReleaseBundleWebhookCriteria) ArtifactoryReleaseBundleWebhookCriteria {
		if v != nil {
			return *v
		}
		var ret ArtifactoryReleaseBundleWebhookCriteria
		return ret
	}).(ArtifactoryReleaseBundleWebhookCriteriaOutput)
}

// Trigger on any release bundle
func (o ArtifactoryReleaseBundleWebhookCriteriaPtrOutput) AnyReleaseBundle() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ArtifactoryReleaseBundleWebhookCriteria) *bool {
		if v == nil {
			return nil
		}
		return &v.AnyReleaseBundle
	}).(pulumi.BoolPtrOutput)
}

// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**"
func (o ArtifactoryReleaseBundleWebhookCriteriaPtrOutput) ExcludePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ArtifactoryReleaseBundleWebhookCriteria) []string {
		if v == nil {
			return nil
		}
		return v.ExcludePatterns
	}).(pulumi.StringArrayOutput)
}

// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**"
func (o ArtifactoryReleaseBundleWebhookCriteriaPtrOutput) IncludePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ArtifactoryReleaseBundleWebhookCriteria) []string {
		if v == nil {
			return nil
		}
		return v.IncludePatterns
	}).(pulumi.StringArrayOutput)
}

// Trigger on this list of release bundle names
func (o ArtifactoryReleaseBundleWebhookCriteriaPtrOutput) RegisteredReleaseBundleNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ArtifactoryReleaseBundleWebhookCriteria) []string {
		if v == nil {
			return nil
		}
		return v.RegisteredReleaseBundleNames
	}).(pulumi.StringArrayOutput)
}

type ArtifactoryReleaseBundleWebhookHandler struct {
	// Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
	CustomHttpHeaders map[string]string `pulumi:"customHttpHeaders"`
	// Proxy key from Artifactory UI (Administration > Proxies > Configuration).
	Proxy *string `pulumi:"proxy"`
	// Secret authentication token that will be sent to the configured URL. The value will be sent as `x-jfrog-event-auth` header.
	Secret *string `pulumi:"secret"`
	// Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
	Url string `pulumi:"url"`
}

// ArtifactoryReleaseBundleWebhookHandlerInput is an input type that accepts ArtifactoryReleaseBundleWebhookHandlerArgs and ArtifactoryReleaseBundleWebhookHandlerOutput values.
// You can construct a concrete instance of `ArtifactoryReleaseBundleWebhookHandlerInput` via:
//
//	ArtifactoryReleaseBundleWebhookHandlerArgs{...}
type ArtifactoryReleaseBundleWebhookHandlerInput interface {
	pulumi.Input

	ToArtifactoryReleaseBundleWebhookHandlerOutput() ArtifactoryReleaseBundleWebhookHandlerOutput
	ToArtifactoryReleaseBundleWebhookHandlerOutputWithContext(context.Context) ArtifactoryReleaseBundleWebhookHandlerOutput
}

type ArtifactoryReleaseBundleWebhookHandlerArgs struct {
	// Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
	CustomHttpHeaders pulumi.StringMapInput `pulumi:"customHttpHeaders"`
	// Proxy key from Artifactory UI (Administration > Proxies > Configuration).
	Proxy pulumi.StringPtrInput `pulumi:"proxy"`
	// Secret authentication token that will be sent to the configured URL. The value will be sent as `x-jfrog-event-auth` header.
	Secret pulumi.StringPtrInput `pulumi:"secret"`
	// Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
	Url pulumi.StringInput `pulumi:"url"`
}

func (ArtifactoryReleaseBundleWebhookHandlerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactoryReleaseBundleWebhookHandler)(nil)).Elem()
}

func (i ArtifactoryReleaseBundleWebhookHandlerArgs) ToArtifactoryReleaseBundleWebhookHandlerOutput() ArtifactoryReleaseBundleWebhookHandlerOutput {
	return i.ToArtifactoryReleaseBundleWebhookHandlerOutputWithContext(context.Background())
}

func (i ArtifactoryReleaseBundleWebhookHandlerArgs) ToArtifactoryReleaseBundleWebhookHandlerOutputWithContext(ctx context.Context) ArtifactoryReleaseBundleWebhookHandlerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactoryReleaseBundleWebhookHandlerOutput)
}

// ArtifactoryReleaseBundleWebhookHandlerArrayInput is an input type that accepts ArtifactoryReleaseBundleWebhookHandlerArray and ArtifactoryReleaseBundleWebhookHandlerArrayOutput values.
// You can construct a concrete instance of `ArtifactoryReleaseBundleWebhookHandlerArrayInput` via:
//
//	ArtifactoryReleaseBundleWebhookHandlerArray{ ArtifactoryReleaseBundleWebhookHandlerArgs{...} }
type ArtifactoryReleaseBundleWebhookHandlerArrayInput interface {
	pulumi.Input

	ToArtifactoryReleaseBundleWebhookHandlerArrayOutput() ArtifactoryReleaseBundleWebhookHandlerArrayOutput
	ToArtifactoryReleaseBundleWebhookHandlerArrayOutputWithContext(context.Context) ArtifactoryReleaseBundleWebhookHandlerArrayOutput
}

type ArtifactoryReleaseBundleWebhookHandlerArray []ArtifactoryReleaseBundleWebhookHandlerInput

func (ArtifactoryReleaseBundleWebhookHandlerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArtifactoryReleaseBundleWebhookHandler)(nil)).Elem()
}

func (i ArtifactoryReleaseBundleWebhookHandlerArray) ToArtifactoryReleaseBundleWebhookHandlerArrayOutput() ArtifactoryReleaseBundleWebhookHandlerArrayOutput {
	return i.ToArtifactoryReleaseBundleWebhookHandlerArrayOutputWithContext(context.Background())
}

func (i ArtifactoryReleaseBundleWebhookHandlerArray) ToArtifactoryReleaseBundleWebhookHandlerArrayOutputWithContext(ctx context.Context) ArtifactoryReleaseBundleWebhookHandlerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactoryReleaseBundleWebhookHandlerArrayOutput)
}

type ArtifactoryReleaseBundleWebhookHandlerOutput struct{ *pulumi.OutputState }

func (ArtifactoryReleaseBundleWebhookHandlerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactoryReleaseBundleWebhookHandler)(nil)).Elem()
}

func (o ArtifactoryReleaseBundleWebhookHandlerOutput) ToArtifactoryReleaseBundleWebhookHandlerOutput() ArtifactoryReleaseBundleWebhookHandlerOutput {
	return o
}

func (o ArtifactoryReleaseBundleWebhookHandlerOutput) ToArtifactoryReleaseBundleWebhookHandlerOutputWithContext(ctx context.Context) ArtifactoryReleaseBundleWebhookHandlerOutput {
	return o
}

// Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
func (o ArtifactoryReleaseBundleWebhookHandlerOutput) CustomHttpHeaders() pulumi.StringMapOutput {
	return o.ApplyT(func(v ArtifactoryReleaseBundleWebhookHandler) map[string]string { return v.CustomHttpHeaders }).(pulumi.StringMapOutput)
}

// Proxy key from Artifactory UI (Administration > Proxies > Configuration).
func (o ArtifactoryReleaseBundleWebhookHandlerOutput) Proxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactoryReleaseBundleWebhookHandler) *string { return v.Proxy }).(pulumi.StringPtrOutput)
}

// Secret authentication token that will be sent to the configured URL. The value will be sent as `x-jfrog-event-auth` header.
func (o ArtifactoryReleaseBundleWebhookHandlerOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactoryReleaseBundleWebhookHandler) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

// Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
func (o ArtifactoryReleaseBundleWebhookHandlerOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ArtifactoryReleaseBundleWebhookHandler) string { return v.Url }).(pulumi.StringOutput)
}

type ArtifactoryReleaseBundleWebhookHandlerArrayOutput struct{ *pulumi.OutputState }

func (ArtifactoryReleaseBundleWebhookHandlerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArtifactoryReleaseBundleWebhookHandler)(nil)).Elem()
}

func (o ArtifactoryReleaseBundleWebhookHandlerArrayOutput) ToArtifactoryReleaseBundleWebhookHandlerArrayOutput() ArtifactoryReleaseBundleWebhookHandlerArrayOutput {
	return o
}

func (o ArtifactoryReleaseBundleWebhookHandlerArrayOutput) ToArtifactoryReleaseBundleWebhookHandlerArrayOutputWithContext(ctx context.Context) ArtifactoryReleaseBundleWebhookHandlerArrayOutput {
	return o
}

func (o ArtifactoryReleaseBundleWebhookHandlerArrayOutput) Index(i pulumi.IntInput) ArtifactoryReleaseBundleWebhookHandlerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArtifactoryReleaseBundleWebhookHandler {
		return vs[0].([]ArtifactoryReleaseBundleWebhookHandler)[vs[1].(int)]
	}).(ArtifactoryReleaseBundleWebhookHandlerOutput)
}

type BuildWebhookCriteria struct {
	// Trigger on any build.
	AnyBuild bool `pulumi:"anyBuild"`
	// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
	ExcludePatterns []string `pulumi:"excludePatterns"`
	// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
	IncludePatterns []string `pulumi:"includePatterns"`
	// Trigger on this list of build names.
	SelectedBuilds []string `pulumi:"selectedBuilds"`
}

// BuildWebhookCriteriaInput is an input type that accepts BuildWebhookCriteriaArgs and BuildWebhookCriteriaOutput values.
// You can construct a concrete instance of `BuildWebhookCriteriaInput` via:
//
//	BuildWebhookCriteriaArgs{...}
type BuildWebhookCriteriaInput interface {
	pulumi.Input

	ToBuildWebhookCriteriaOutput() BuildWebhookCriteriaOutput
	ToBuildWebhookCriteriaOutputWithContext(context.Context) BuildWebhookCriteriaOutput
}

type BuildWebhookCriteriaArgs struct {
	// Trigger on any build.
	AnyBuild pulumi.BoolInput `pulumi:"anyBuild"`
	// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
	ExcludePatterns pulumi.StringArrayInput `pulumi:"excludePatterns"`
	// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
	IncludePatterns pulumi.StringArrayInput `pulumi:"includePatterns"`
	// Trigger on this list of build names.
	SelectedBuilds pulumi.StringArrayInput `pulumi:"selectedBuilds"`
}

func (BuildWebhookCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildWebhookCriteria)(nil)).Elem()
}

func (i BuildWebhookCriteriaArgs) ToBuildWebhookCriteriaOutput() BuildWebhookCriteriaOutput {
	return i.ToBuildWebhookCriteriaOutputWithContext(context.Background())
}

func (i BuildWebhookCriteriaArgs) ToBuildWebhookCriteriaOutputWithContext(ctx context.Context) BuildWebhookCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildWebhookCriteriaOutput)
}

func (i BuildWebhookCriteriaArgs) ToBuildWebhookCriteriaPtrOutput() BuildWebhookCriteriaPtrOutput {
	return i.ToBuildWebhookCriteriaPtrOutputWithContext(context.Background())
}

func (i BuildWebhookCriteriaArgs) ToBuildWebhookCriteriaPtrOutputWithContext(ctx context.Context) BuildWebhookCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildWebhookCriteriaOutput).ToBuildWebhookCriteriaPtrOutputWithContext(ctx)
}

// BuildWebhookCriteriaPtrInput is an input type that accepts BuildWebhookCriteriaArgs, BuildWebhookCriteriaPtr and BuildWebhookCriteriaPtrOutput values.
// You can construct a concrete instance of `BuildWebhookCriteriaPtrInput` via:
//
//	        BuildWebhookCriteriaArgs{...}
//
//	or:
//
//	        nil
type BuildWebhookCriteriaPtrInput interface {
	pulumi.Input

	ToBuildWebhookCriteriaPtrOutput() BuildWebhookCriteriaPtrOutput
	ToBuildWebhookCriteriaPtrOutputWithContext(context.Context) BuildWebhookCriteriaPtrOutput
}

type buildWebhookCriteriaPtrType BuildWebhookCriteriaArgs

func BuildWebhookCriteriaPtr(v *BuildWebhookCriteriaArgs) BuildWebhookCriteriaPtrInput {
	return (*buildWebhookCriteriaPtrType)(v)
}

func (*buildWebhookCriteriaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildWebhookCriteria)(nil)).Elem()
}

func (i *buildWebhookCriteriaPtrType) ToBuildWebhookCriteriaPtrOutput() BuildWebhookCriteriaPtrOutput {
	return i.ToBuildWebhookCriteriaPtrOutputWithContext(context.Background())
}

func (i *buildWebhookCriteriaPtrType) ToBuildWebhookCriteriaPtrOutputWithContext(ctx context.Context) BuildWebhookCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildWebhookCriteriaPtrOutput)
}

type BuildWebhookCriteriaOutput struct{ *pulumi.OutputState }

func (BuildWebhookCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildWebhookCriteria)(nil)).Elem()
}

func (o BuildWebhookCriteriaOutput) ToBuildWebhookCriteriaOutput() BuildWebhookCriteriaOutput {
	return o
}

func (o BuildWebhookCriteriaOutput) ToBuildWebhookCriteriaOutputWithContext(ctx context.Context) BuildWebhookCriteriaOutput {
	return o
}

func (o BuildWebhookCriteriaOutput) ToBuildWebhookCriteriaPtrOutput() BuildWebhookCriteriaPtrOutput {
	return o.ToBuildWebhookCriteriaPtrOutputWithContext(context.Background())
}

func (o BuildWebhookCriteriaOutput) ToBuildWebhookCriteriaPtrOutputWithContext(ctx context.Context) BuildWebhookCriteriaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BuildWebhookCriteria) *BuildWebhookCriteria {
		return &v
	}).(BuildWebhookCriteriaPtrOutput)
}

// Trigger on any build.
func (o BuildWebhookCriteriaOutput) AnyBuild() pulumi.BoolOutput {
	return o.ApplyT(func(v BuildWebhookCriteria) bool { return v.AnyBuild }).(pulumi.BoolOutput)
}

// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
func (o BuildWebhookCriteriaOutput) ExcludePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildWebhookCriteria) []string { return v.ExcludePatterns }).(pulumi.StringArrayOutput)
}

// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
func (o BuildWebhookCriteriaOutput) IncludePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildWebhookCriteria) []string { return v.IncludePatterns }).(pulumi.StringArrayOutput)
}

// Trigger on this list of build names.
func (o BuildWebhookCriteriaOutput) SelectedBuilds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildWebhookCriteria) []string { return v.SelectedBuilds }).(pulumi.StringArrayOutput)
}

type BuildWebhookCriteriaPtrOutput struct{ *pulumi.OutputState }

func (BuildWebhookCriteriaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildWebhookCriteria)(nil)).Elem()
}

func (o BuildWebhookCriteriaPtrOutput) ToBuildWebhookCriteriaPtrOutput() BuildWebhookCriteriaPtrOutput {
	return o
}

func (o BuildWebhookCriteriaPtrOutput) ToBuildWebhookCriteriaPtrOutputWithContext(ctx context.Context) BuildWebhookCriteriaPtrOutput {
	return o
}

func (o BuildWebhookCriteriaPtrOutput) Elem() BuildWebhookCriteriaOutput {
	return o.ApplyT(func(v *BuildWebhookCriteria) BuildWebhookCriteria {
		if v != nil {
			return *v
		}
		var ret BuildWebhookCriteria
		return ret
	}).(BuildWebhookCriteriaOutput)
}

// Trigger on any build.
func (o BuildWebhookCriteriaPtrOutput) AnyBuild() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BuildWebhookCriteria) *bool {
		if v == nil {
			return nil
		}
		return &v.AnyBuild
	}).(pulumi.BoolPtrOutput)
}

// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
func (o BuildWebhookCriteriaPtrOutput) ExcludePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BuildWebhookCriteria) []string {
		if v == nil {
			return nil
		}
		return v.ExcludePatterns
	}).(pulumi.StringArrayOutput)
}

// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
func (o BuildWebhookCriteriaPtrOutput) IncludePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BuildWebhookCriteria) []string {
		if v == nil {
			return nil
		}
		return v.IncludePatterns
	}).(pulumi.StringArrayOutput)
}

// Trigger on this list of build names.
func (o BuildWebhookCriteriaPtrOutput) SelectedBuilds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BuildWebhookCriteria) []string {
		if v == nil {
			return nil
		}
		return v.SelectedBuilds
	}).(pulumi.StringArrayOutput)
}

type BuildWebhookHandler struct {
	// Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
	CustomHttpHeaders map[string]string `pulumi:"customHttpHeaders"`
	// Proxy key from Artifactory UI (Administration > Proxies > Configuration).
	Proxy *string `pulumi:"proxy"`
	// Secret authentication token that will be sent to the configured URL. The value will be sent as `x-jfrog-event-auth` header.
	Secret *string `pulumi:"secret"`
	// Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
	Url string `pulumi:"url"`
}

// BuildWebhookHandlerInput is an input type that accepts BuildWebhookHandlerArgs and BuildWebhookHandlerOutput values.
// You can construct a concrete instance of `BuildWebhookHandlerInput` via:
//
//	BuildWebhookHandlerArgs{...}
type BuildWebhookHandlerInput interface {
	pulumi.Input

	ToBuildWebhookHandlerOutput() BuildWebhookHandlerOutput
	ToBuildWebhookHandlerOutputWithContext(context.Context) BuildWebhookHandlerOutput
}

type BuildWebhookHandlerArgs struct {
	// Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
	CustomHttpHeaders pulumi.StringMapInput `pulumi:"customHttpHeaders"`
	// Proxy key from Artifactory UI (Administration > Proxies > Configuration).
	Proxy pulumi.StringPtrInput `pulumi:"proxy"`
	// Secret authentication token that will be sent to the configured URL. The value will be sent as `x-jfrog-event-auth` header.
	Secret pulumi.StringPtrInput `pulumi:"secret"`
	// Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
	Url pulumi.StringInput `pulumi:"url"`
}

func (BuildWebhookHandlerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildWebhookHandler)(nil)).Elem()
}

func (i BuildWebhookHandlerArgs) ToBuildWebhookHandlerOutput() BuildWebhookHandlerOutput {
	return i.ToBuildWebhookHandlerOutputWithContext(context.Background())
}

func (i BuildWebhookHandlerArgs) ToBuildWebhookHandlerOutputWithContext(ctx context.Context) BuildWebhookHandlerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildWebhookHandlerOutput)
}

// BuildWebhookHandlerArrayInput is an input type that accepts BuildWebhookHandlerArray and BuildWebhookHandlerArrayOutput values.
// You can construct a concrete instance of `BuildWebhookHandlerArrayInput` via:
//
//	BuildWebhookHandlerArray{ BuildWebhookHandlerArgs{...} }
type BuildWebhookHandlerArrayInput interface {
	pulumi.Input

	ToBuildWebhookHandlerArrayOutput() BuildWebhookHandlerArrayOutput
	ToBuildWebhookHandlerArrayOutputWithContext(context.Context) BuildWebhookHandlerArrayOutput
}

type BuildWebhookHandlerArray []BuildWebhookHandlerInput

func (BuildWebhookHandlerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuildWebhookHandler)(nil)).Elem()
}

func (i BuildWebhookHandlerArray) ToBuildWebhookHandlerArrayOutput() BuildWebhookHandlerArrayOutput {
	return i.ToBuildWebhookHandlerArrayOutputWithContext(context.Background())
}

func (i BuildWebhookHandlerArray) ToBuildWebhookHandlerArrayOutputWithContext(ctx context.Context) BuildWebhookHandlerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildWebhookHandlerArrayOutput)
}

type BuildWebhookHandlerOutput struct{ *pulumi.OutputState }

func (BuildWebhookHandlerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildWebhookHandler)(nil)).Elem()
}

func (o BuildWebhookHandlerOutput) ToBuildWebhookHandlerOutput() BuildWebhookHandlerOutput {
	return o
}

func (o BuildWebhookHandlerOutput) ToBuildWebhookHandlerOutputWithContext(ctx context.Context) BuildWebhookHandlerOutput {
	return o
}

// Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
func (o BuildWebhookHandlerOutput) CustomHttpHeaders() pulumi.StringMapOutput {
	return o.ApplyT(func(v BuildWebhookHandler) map[string]string { return v.CustomHttpHeaders }).(pulumi.StringMapOutput)
}

// Proxy key from Artifactory UI (Administration > Proxies > Configuration).
func (o BuildWebhookHandlerOutput) Proxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildWebhookHandler) *string { return v.Proxy }).(pulumi.StringPtrOutput)
}

// Secret authentication token that will be sent to the configured URL. The value will be sent as `x-jfrog-event-auth` header.
func (o BuildWebhookHandlerOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildWebhookHandler) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

// Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
func (o BuildWebhookHandlerOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v BuildWebhookHandler) string { return v.Url }).(pulumi.StringOutput)
}

type BuildWebhookHandlerArrayOutput struct{ *pulumi.OutputState }

func (BuildWebhookHandlerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuildWebhookHandler)(nil)).Elem()
}

func (o BuildWebhookHandlerArrayOutput) ToBuildWebhookHandlerArrayOutput() BuildWebhookHandlerArrayOutput {
	return o
}

func (o BuildWebhookHandlerArrayOutput) ToBuildWebhookHandlerArrayOutputWithContext(ctx context.Context) BuildWebhookHandlerArrayOutput {
	return o
}

func (o BuildWebhookHandlerArrayOutput) Index(i pulumi.IntInput) BuildWebhookHandlerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BuildWebhookHandler {
		return vs[0].([]BuildWebhookHandler)[vs[1].(int)]
	}).(BuildWebhookHandlerOutput)
}

type DistributionWebhookCriteria struct {
	// Trigger on any release bundle.
	AnyReleaseBundle bool `pulumi:"anyReleaseBundle"`
	// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
	ExcludePatterns []string `pulumi:"excludePatterns"`
	// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
	IncludePatterns []string `pulumi:"includePatterns"`
	// Trigger on this list of release bundle names.
	RegisteredReleaseBundleNames []string `pulumi:"registeredReleaseBundleNames"`
}

// DistributionWebhookCriteriaInput is an input type that accepts DistributionWebhookCriteriaArgs and DistributionWebhookCriteriaOutput values.
// You can construct a concrete instance of `DistributionWebhookCriteriaInput` via:
//
//	DistributionWebhookCriteriaArgs{...}
type DistributionWebhookCriteriaInput interface {
	pulumi.Input

	ToDistributionWebhookCriteriaOutput() DistributionWebhookCriteriaOutput
	ToDistributionWebhookCriteriaOutputWithContext(context.Context) DistributionWebhookCriteriaOutput
}

type DistributionWebhookCriteriaArgs struct {
	// Trigger on any release bundle.
	AnyReleaseBundle pulumi.BoolInput `pulumi:"anyReleaseBundle"`
	// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
	ExcludePatterns pulumi.StringArrayInput `pulumi:"excludePatterns"`
	// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
	IncludePatterns pulumi.StringArrayInput `pulumi:"includePatterns"`
	// Trigger on this list of release bundle names.
	RegisteredReleaseBundleNames pulumi.StringArrayInput `pulumi:"registeredReleaseBundleNames"`
}

func (DistributionWebhookCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionWebhookCriteria)(nil)).Elem()
}

func (i DistributionWebhookCriteriaArgs) ToDistributionWebhookCriteriaOutput() DistributionWebhookCriteriaOutput {
	return i.ToDistributionWebhookCriteriaOutputWithContext(context.Background())
}

func (i DistributionWebhookCriteriaArgs) ToDistributionWebhookCriteriaOutputWithContext(ctx context.Context) DistributionWebhookCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionWebhookCriteriaOutput)
}

func (i DistributionWebhookCriteriaArgs) ToDistributionWebhookCriteriaPtrOutput() DistributionWebhookCriteriaPtrOutput {
	return i.ToDistributionWebhookCriteriaPtrOutputWithContext(context.Background())
}

func (i DistributionWebhookCriteriaArgs) ToDistributionWebhookCriteriaPtrOutputWithContext(ctx context.Context) DistributionWebhookCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionWebhookCriteriaOutput).ToDistributionWebhookCriteriaPtrOutputWithContext(ctx)
}

// DistributionWebhookCriteriaPtrInput is an input type that accepts DistributionWebhookCriteriaArgs, DistributionWebhookCriteriaPtr and DistributionWebhookCriteriaPtrOutput values.
// You can construct a concrete instance of `DistributionWebhookCriteriaPtrInput` via:
//
//	        DistributionWebhookCriteriaArgs{...}
//
//	or:
//
//	        nil
type DistributionWebhookCriteriaPtrInput interface {
	pulumi.Input

	ToDistributionWebhookCriteriaPtrOutput() DistributionWebhookCriteriaPtrOutput
	ToDistributionWebhookCriteriaPtrOutputWithContext(context.Context) DistributionWebhookCriteriaPtrOutput
}

type distributionWebhookCriteriaPtrType DistributionWebhookCriteriaArgs

func DistributionWebhookCriteriaPtr(v *DistributionWebhookCriteriaArgs) DistributionWebhookCriteriaPtrInput {
	return (*distributionWebhookCriteriaPtrType)(v)
}

func (*distributionWebhookCriteriaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DistributionWebhookCriteria)(nil)).Elem()
}

func (i *distributionWebhookCriteriaPtrType) ToDistributionWebhookCriteriaPtrOutput() DistributionWebhookCriteriaPtrOutput {
	return i.ToDistributionWebhookCriteriaPtrOutputWithContext(context.Background())
}

func (i *distributionWebhookCriteriaPtrType) ToDistributionWebhookCriteriaPtrOutputWithContext(ctx context.Context) DistributionWebhookCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionWebhookCriteriaPtrOutput)
}

type DistributionWebhookCriteriaOutput struct{ *pulumi.OutputState }

func (DistributionWebhookCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionWebhookCriteria)(nil)).Elem()
}

func (o DistributionWebhookCriteriaOutput) ToDistributionWebhookCriteriaOutput() DistributionWebhookCriteriaOutput {
	return o
}

func (o DistributionWebhookCriteriaOutput) ToDistributionWebhookCriteriaOutputWithContext(ctx context.Context) DistributionWebhookCriteriaOutput {
	return o
}

func (o DistributionWebhookCriteriaOutput) ToDistributionWebhookCriteriaPtrOutput() DistributionWebhookCriteriaPtrOutput {
	return o.ToDistributionWebhookCriteriaPtrOutputWithContext(context.Background())
}

func (o DistributionWebhookCriteriaOutput) ToDistributionWebhookCriteriaPtrOutputWithContext(ctx context.Context) DistributionWebhookCriteriaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DistributionWebhookCriteria) *DistributionWebhookCriteria {
		return &v
	}).(DistributionWebhookCriteriaPtrOutput)
}

// Trigger on any release bundle.
func (o DistributionWebhookCriteriaOutput) AnyReleaseBundle() pulumi.BoolOutput {
	return o.ApplyT(func(v DistributionWebhookCriteria) bool { return v.AnyReleaseBundle }).(pulumi.BoolOutput)
}

// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
func (o DistributionWebhookCriteriaOutput) ExcludePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DistributionWebhookCriteria) []string { return v.ExcludePatterns }).(pulumi.StringArrayOutput)
}

// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
func (o DistributionWebhookCriteriaOutput) IncludePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DistributionWebhookCriteria) []string { return v.IncludePatterns }).(pulumi.StringArrayOutput)
}

// Trigger on this list of release bundle names.
func (o DistributionWebhookCriteriaOutput) RegisteredReleaseBundleNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DistributionWebhookCriteria) []string { return v.RegisteredReleaseBundleNames }).(pulumi.StringArrayOutput)
}

type DistributionWebhookCriteriaPtrOutput struct{ *pulumi.OutputState }

func (DistributionWebhookCriteriaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DistributionWebhookCriteria)(nil)).Elem()
}

func (o DistributionWebhookCriteriaPtrOutput) ToDistributionWebhookCriteriaPtrOutput() DistributionWebhookCriteriaPtrOutput {
	return o
}

func (o DistributionWebhookCriteriaPtrOutput) ToDistributionWebhookCriteriaPtrOutputWithContext(ctx context.Context) DistributionWebhookCriteriaPtrOutput {
	return o
}

func (o DistributionWebhookCriteriaPtrOutput) Elem() DistributionWebhookCriteriaOutput {
	return o.ApplyT(func(v *DistributionWebhookCriteria) DistributionWebhookCriteria {
		if v != nil {
			return *v
		}
		var ret DistributionWebhookCriteria
		return ret
	}).(DistributionWebhookCriteriaOutput)
}

// Trigger on any release bundle.
func (o DistributionWebhookCriteriaPtrOutput) AnyReleaseBundle() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DistributionWebhookCriteria) *bool {
		if v == nil {
			return nil
		}
		return &v.AnyReleaseBundle
	}).(pulumi.BoolPtrOutput)
}

// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
func (o DistributionWebhookCriteriaPtrOutput) ExcludePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DistributionWebhookCriteria) []string {
		if v == nil {
			return nil
		}
		return v.ExcludePatterns
	}).(pulumi.StringArrayOutput)
}

// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
func (o DistributionWebhookCriteriaPtrOutput) IncludePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DistributionWebhookCriteria) []string {
		if v == nil {
			return nil
		}
		return v.IncludePatterns
	}).(pulumi.StringArrayOutput)
}

// Trigger on this list of release bundle names.
func (o DistributionWebhookCriteriaPtrOutput) RegisteredReleaseBundleNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DistributionWebhookCriteria) []string {
		if v == nil {
			return nil
		}
		return v.RegisteredReleaseBundleNames
	}).(pulumi.StringArrayOutput)
}

type DistributionWebhookHandler struct {
	// Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
	CustomHttpHeaders map[string]string `pulumi:"customHttpHeaders"`
	// Proxy key from Artifactory UI (Administration > Proxies > Configuration).
	Proxy *string `pulumi:"proxy"`
	// Secret authentication token that will be sent to the configured URL. The value will be sent as `x-jfrog-event-auth` header.
	Secret *string `pulumi:"secret"`
	// Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
	Url string `pulumi:"url"`
}

// DistributionWebhookHandlerInput is an input type that accepts DistributionWebhookHandlerArgs and DistributionWebhookHandlerOutput values.
// You can construct a concrete instance of `DistributionWebhookHandlerInput` via:
//
//	DistributionWebhookHandlerArgs{...}
type DistributionWebhookHandlerInput interface {
	pulumi.Input

	ToDistributionWebhookHandlerOutput() DistributionWebhookHandlerOutput
	ToDistributionWebhookHandlerOutputWithContext(context.Context) DistributionWebhookHandlerOutput
}

type DistributionWebhookHandlerArgs struct {
	// Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
	CustomHttpHeaders pulumi.StringMapInput `pulumi:"customHttpHeaders"`
	// Proxy key from Artifactory UI (Administration > Proxies > Configuration).
	Proxy pulumi.StringPtrInput `pulumi:"proxy"`
	// Secret authentication token that will be sent to the configured URL. The value will be sent as `x-jfrog-event-auth` header.
	Secret pulumi.StringPtrInput `pulumi:"secret"`
	// Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
	Url pulumi.StringInput `pulumi:"url"`
}

func (DistributionWebhookHandlerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionWebhookHandler)(nil)).Elem()
}

func (i DistributionWebhookHandlerArgs) ToDistributionWebhookHandlerOutput() DistributionWebhookHandlerOutput {
	return i.ToDistributionWebhookHandlerOutputWithContext(context.Background())
}

func (i DistributionWebhookHandlerArgs) ToDistributionWebhookHandlerOutputWithContext(ctx context.Context) DistributionWebhookHandlerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionWebhookHandlerOutput)
}

// DistributionWebhookHandlerArrayInput is an input type that accepts DistributionWebhookHandlerArray and DistributionWebhookHandlerArrayOutput values.
// You can construct a concrete instance of `DistributionWebhookHandlerArrayInput` via:
//
//	DistributionWebhookHandlerArray{ DistributionWebhookHandlerArgs{...} }
type DistributionWebhookHandlerArrayInput interface {
	pulumi.Input

	ToDistributionWebhookHandlerArrayOutput() DistributionWebhookHandlerArrayOutput
	ToDistributionWebhookHandlerArrayOutputWithContext(context.Context) DistributionWebhookHandlerArrayOutput
}

type DistributionWebhookHandlerArray []DistributionWebhookHandlerInput

func (DistributionWebhookHandlerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DistributionWebhookHandler)(nil)).Elem()
}

func (i DistributionWebhookHandlerArray) ToDistributionWebhookHandlerArrayOutput() DistributionWebhookHandlerArrayOutput {
	return i.ToDistributionWebhookHandlerArrayOutputWithContext(context.Background())
}

func (i DistributionWebhookHandlerArray) ToDistributionWebhookHandlerArrayOutputWithContext(ctx context.Context) DistributionWebhookHandlerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionWebhookHandlerArrayOutput)
}

type DistributionWebhookHandlerOutput struct{ *pulumi.OutputState }

func (DistributionWebhookHandlerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionWebhookHandler)(nil)).Elem()
}

func (o DistributionWebhookHandlerOutput) ToDistributionWebhookHandlerOutput() DistributionWebhookHandlerOutput {
	return o
}

func (o DistributionWebhookHandlerOutput) ToDistributionWebhookHandlerOutputWithContext(ctx context.Context) DistributionWebhookHandlerOutput {
	return o
}

// Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
func (o DistributionWebhookHandlerOutput) CustomHttpHeaders() pulumi.StringMapOutput {
	return o.ApplyT(func(v DistributionWebhookHandler) map[string]string { return v.CustomHttpHeaders }).(pulumi.StringMapOutput)
}

// Proxy key from Artifactory UI (Administration > Proxies > Configuration).
func (o DistributionWebhookHandlerOutput) Proxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DistributionWebhookHandler) *string { return v.Proxy }).(pulumi.StringPtrOutput)
}

// Secret authentication token that will be sent to the configured URL. The value will be sent as `x-jfrog-event-auth` header.
func (o DistributionWebhookHandlerOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DistributionWebhookHandler) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

// Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
func (o DistributionWebhookHandlerOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v DistributionWebhookHandler) string { return v.Url }).(pulumi.StringOutput)
}

type DistributionWebhookHandlerArrayOutput struct{ *pulumi.OutputState }

func (DistributionWebhookHandlerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DistributionWebhookHandler)(nil)).Elem()
}

func (o DistributionWebhookHandlerArrayOutput) ToDistributionWebhookHandlerArrayOutput() DistributionWebhookHandlerArrayOutput {
	return o
}

func (o DistributionWebhookHandlerArrayOutput) ToDistributionWebhookHandlerArrayOutputWithContext(ctx context.Context) DistributionWebhookHandlerArrayOutput {
	return o
}

func (o DistributionWebhookHandlerArrayOutput) Index(i pulumi.IntInput) DistributionWebhookHandlerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DistributionWebhookHandler {
		return vs[0].([]DistributionWebhookHandler)[vs[1].(int)]
	}).(DistributionWebhookHandlerOutput)
}

type DockerWebhookCriteria struct {
	// Trigger on any local repo.
	AnyLocal bool `pulumi:"anyLocal"`
	// Trigger on any remote repo.
	AnyRemote bool `pulumi:"anyRemote"`
	// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
	ExcludePatterns []string `pulumi:"excludePatterns"`
	// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
	IncludePatterns []string `pulumi:"includePatterns"`
	// Trigger on this list of repo keys.
	RepoKeys []string `pulumi:"repoKeys"`
}

// DockerWebhookCriteriaInput is an input type that accepts DockerWebhookCriteriaArgs and DockerWebhookCriteriaOutput values.
// You can construct a concrete instance of `DockerWebhookCriteriaInput` via:
//
//	DockerWebhookCriteriaArgs{...}
type DockerWebhookCriteriaInput interface {
	pulumi.Input

	ToDockerWebhookCriteriaOutput() DockerWebhookCriteriaOutput
	ToDockerWebhookCriteriaOutputWithContext(context.Context) DockerWebhookCriteriaOutput
}

type DockerWebhookCriteriaArgs struct {
	// Trigger on any local repo.
	AnyLocal pulumi.BoolInput `pulumi:"anyLocal"`
	// Trigger on any remote repo.
	AnyRemote pulumi.BoolInput `pulumi:"anyRemote"`
	// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
	ExcludePatterns pulumi.StringArrayInput `pulumi:"excludePatterns"`
	// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
	IncludePatterns pulumi.StringArrayInput `pulumi:"includePatterns"`
	// Trigger on this list of repo keys.
	RepoKeys pulumi.StringArrayInput `pulumi:"repoKeys"`
}

func (DockerWebhookCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerWebhookCriteria)(nil)).Elem()
}

func (i DockerWebhookCriteriaArgs) ToDockerWebhookCriteriaOutput() DockerWebhookCriteriaOutput {
	return i.ToDockerWebhookCriteriaOutputWithContext(context.Background())
}

func (i DockerWebhookCriteriaArgs) ToDockerWebhookCriteriaOutputWithContext(ctx context.Context) DockerWebhookCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerWebhookCriteriaOutput)
}

func (i DockerWebhookCriteriaArgs) ToDockerWebhookCriteriaPtrOutput() DockerWebhookCriteriaPtrOutput {
	return i.ToDockerWebhookCriteriaPtrOutputWithContext(context.Background())
}

func (i DockerWebhookCriteriaArgs) ToDockerWebhookCriteriaPtrOutputWithContext(ctx context.Context) DockerWebhookCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerWebhookCriteriaOutput).ToDockerWebhookCriteriaPtrOutputWithContext(ctx)
}

// DockerWebhookCriteriaPtrInput is an input type that accepts DockerWebhookCriteriaArgs, DockerWebhookCriteriaPtr and DockerWebhookCriteriaPtrOutput values.
// You can construct a concrete instance of `DockerWebhookCriteriaPtrInput` via:
//
//	        DockerWebhookCriteriaArgs{...}
//
//	or:
//
//	        nil
type DockerWebhookCriteriaPtrInput interface {
	pulumi.Input

	ToDockerWebhookCriteriaPtrOutput() DockerWebhookCriteriaPtrOutput
	ToDockerWebhookCriteriaPtrOutputWithContext(context.Context) DockerWebhookCriteriaPtrOutput
}

type dockerWebhookCriteriaPtrType DockerWebhookCriteriaArgs

func DockerWebhookCriteriaPtr(v *DockerWebhookCriteriaArgs) DockerWebhookCriteriaPtrInput {
	return (*dockerWebhookCriteriaPtrType)(v)
}

func (*dockerWebhookCriteriaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerWebhookCriteria)(nil)).Elem()
}

func (i *dockerWebhookCriteriaPtrType) ToDockerWebhookCriteriaPtrOutput() DockerWebhookCriteriaPtrOutput {
	return i.ToDockerWebhookCriteriaPtrOutputWithContext(context.Background())
}

func (i *dockerWebhookCriteriaPtrType) ToDockerWebhookCriteriaPtrOutputWithContext(ctx context.Context) DockerWebhookCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerWebhookCriteriaPtrOutput)
}

type DockerWebhookCriteriaOutput struct{ *pulumi.OutputState }

func (DockerWebhookCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerWebhookCriteria)(nil)).Elem()
}

func (o DockerWebhookCriteriaOutput) ToDockerWebhookCriteriaOutput() DockerWebhookCriteriaOutput {
	return o
}

func (o DockerWebhookCriteriaOutput) ToDockerWebhookCriteriaOutputWithContext(ctx context.Context) DockerWebhookCriteriaOutput {
	return o
}

func (o DockerWebhookCriteriaOutput) ToDockerWebhookCriteriaPtrOutput() DockerWebhookCriteriaPtrOutput {
	return o.ToDockerWebhookCriteriaPtrOutputWithContext(context.Background())
}

func (o DockerWebhookCriteriaOutput) ToDockerWebhookCriteriaPtrOutputWithContext(ctx context.Context) DockerWebhookCriteriaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DockerWebhookCriteria) *DockerWebhookCriteria {
		return &v
	}).(DockerWebhookCriteriaPtrOutput)
}

// Trigger on any local repo.
func (o DockerWebhookCriteriaOutput) AnyLocal() pulumi.BoolOutput {
	return o.ApplyT(func(v DockerWebhookCriteria) bool { return v.AnyLocal }).(pulumi.BoolOutput)
}

// Trigger on any remote repo.
func (o DockerWebhookCriteriaOutput) AnyRemote() pulumi.BoolOutput {
	return o.ApplyT(func(v DockerWebhookCriteria) bool { return v.AnyRemote }).(pulumi.BoolOutput)
}

// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
func (o DockerWebhookCriteriaOutput) ExcludePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DockerWebhookCriteria) []string { return v.ExcludePatterns }).(pulumi.StringArrayOutput)
}

// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
func (o DockerWebhookCriteriaOutput) IncludePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DockerWebhookCriteria) []string { return v.IncludePatterns }).(pulumi.StringArrayOutput)
}

// Trigger on this list of repo keys.
func (o DockerWebhookCriteriaOutput) RepoKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DockerWebhookCriteria) []string { return v.RepoKeys }).(pulumi.StringArrayOutput)
}

type DockerWebhookCriteriaPtrOutput struct{ *pulumi.OutputState }

func (DockerWebhookCriteriaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerWebhookCriteria)(nil)).Elem()
}

func (o DockerWebhookCriteriaPtrOutput) ToDockerWebhookCriteriaPtrOutput() DockerWebhookCriteriaPtrOutput {
	return o
}

func (o DockerWebhookCriteriaPtrOutput) ToDockerWebhookCriteriaPtrOutputWithContext(ctx context.Context) DockerWebhookCriteriaPtrOutput {
	return o
}

func (o DockerWebhookCriteriaPtrOutput) Elem() DockerWebhookCriteriaOutput {
	return o.ApplyT(func(v *DockerWebhookCriteria) DockerWebhookCriteria {
		if v != nil {
			return *v
		}
		var ret DockerWebhookCriteria
		return ret
	}).(DockerWebhookCriteriaOutput)
}

// Trigger on any local repo.
func (o DockerWebhookCriteriaPtrOutput) AnyLocal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DockerWebhookCriteria) *bool {
		if v == nil {
			return nil
		}
		return &v.AnyLocal
	}).(pulumi.BoolPtrOutput)
}

// Trigger on any remote repo.
func (o DockerWebhookCriteriaPtrOutput) AnyRemote() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DockerWebhookCriteria) *bool {
		if v == nil {
			return nil
		}
		return &v.AnyRemote
	}).(pulumi.BoolPtrOutput)
}

// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
func (o DockerWebhookCriteriaPtrOutput) ExcludePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DockerWebhookCriteria) []string {
		if v == nil {
			return nil
		}
		return v.ExcludePatterns
	}).(pulumi.StringArrayOutput)
}

// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
func (o DockerWebhookCriteriaPtrOutput) IncludePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DockerWebhookCriteria) []string {
		if v == nil {
			return nil
		}
		return v.IncludePatterns
	}).(pulumi.StringArrayOutput)
}

// Trigger on this list of repo keys.
func (o DockerWebhookCriteriaPtrOutput) RepoKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DockerWebhookCriteria) []string {
		if v == nil {
			return nil
		}
		return v.RepoKeys
	}).(pulumi.StringArrayOutput)
}

type DockerWebhookHandler struct {
	// Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
	CustomHttpHeaders map[string]string `pulumi:"customHttpHeaders"`
	// Proxy key from Artifactory UI (Administration > Proxies > Configuration).
	Proxy *string `pulumi:"proxy"`
	// Secret authentication token that will be sent to the configured URL. The value will be sent as `x-jfrog-event-auth` header.
	Secret *string `pulumi:"secret"`
	// Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
	Url string `pulumi:"url"`
}

// DockerWebhookHandlerInput is an input type that accepts DockerWebhookHandlerArgs and DockerWebhookHandlerOutput values.
// You can construct a concrete instance of `DockerWebhookHandlerInput` via:
//
//	DockerWebhookHandlerArgs{...}
type DockerWebhookHandlerInput interface {
	pulumi.Input

	ToDockerWebhookHandlerOutput() DockerWebhookHandlerOutput
	ToDockerWebhookHandlerOutputWithContext(context.Context) DockerWebhookHandlerOutput
}

type DockerWebhookHandlerArgs struct {
	// Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
	CustomHttpHeaders pulumi.StringMapInput `pulumi:"customHttpHeaders"`
	// Proxy key from Artifactory UI (Administration > Proxies > Configuration).
	Proxy pulumi.StringPtrInput `pulumi:"proxy"`
	// Secret authentication token that will be sent to the configured URL. The value will be sent as `x-jfrog-event-auth` header.
	Secret pulumi.StringPtrInput `pulumi:"secret"`
	// Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
	Url pulumi.StringInput `pulumi:"url"`
}

func (DockerWebhookHandlerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerWebhookHandler)(nil)).Elem()
}

func (i DockerWebhookHandlerArgs) ToDockerWebhookHandlerOutput() DockerWebhookHandlerOutput {
	return i.ToDockerWebhookHandlerOutputWithContext(context.Background())
}

func (i DockerWebhookHandlerArgs) ToDockerWebhookHandlerOutputWithContext(ctx context.Context) DockerWebhookHandlerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerWebhookHandlerOutput)
}

// DockerWebhookHandlerArrayInput is an input type that accepts DockerWebhookHandlerArray and DockerWebhookHandlerArrayOutput values.
// You can construct a concrete instance of `DockerWebhookHandlerArrayInput` via:
//
//	DockerWebhookHandlerArray{ DockerWebhookHandlerArgs{...} }
type DockerWebhookHandlerArrayInput interface {
	pulumi.Input

	ToDockerWebhookHandlerArrayOutput() DockerWebhookHandlerArrayOutput
	ToDockerWebhookHandlerArrayOutputWithContext(context.Context) DockerWebhookHandlerArrayOutput
}

type DockerWebhookHandlerArray []DockerWebhookHandlerInput

func (DockerWebhookHandlerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DockerWebhookHandler)(nil)).Elem()
}

func (i DockerWebhookHandlerArray) ToDockerWebhookHandlerArrayOutput() DockerWebhookHandlerArrayOutput {
	return i.ToDockerWebhookHandlerArrayOutputWithContext(context.Background())
}

func (i DockerWebhookHandlerArray) ToDockerWebhookHandlerArrayOutputWithContext(ctx context.Context) DockerWebhookHandlerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerWebhookHandlerArrayOutput)
}

type DockerWebhookHandlerOutput struct{ *pulumi.OutputState }

func (DockerWebhookHandlerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerWebhookHandler)(nil)).Elem()
}

func (o DockerWebhookHandlerOutput) ToDockerWebhookHandlerOutput() DockerWebhookHandlerOutput {
	return o
}

func (o DockerWebhookHandlerOutput) ToDockerWebhookHandlerOutputWithContext(ctx context.Context) DockerWebhookHandlerOutput {
	return o
}

// Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
func (o DockerWebhookHandlerOutput) CustomHttpHeaders() pulumi.StringMapOutput {
	return o.ApplyT(func(v DockerWebhookHandler) map[string]string { return v.CustomHttpHeaders }).(pulumi.StringMapOutput)
}

// Proxy key from Artifactory UI (Administration > Proxies > Configuration).
func (o DockerWebhookHandlerOutput) Proxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerWebhookHandler) *string { return v.Proxy }).(pulumi.StringPtrOutput)
}

// Secret authentication token that will be sent to the configured URL. The value will be sent as `x-jfrog-event-auth` header.
func (o DockerWebhookHandlerOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerWebhookHandler) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

// Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
func (o DockerWebhookHandlerOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v DockerWebhookHandler) string { return v.Url }).(pulumi.StringOutput)
}

type DockerWebhookHandlerArrayOutput struct{ *pulumi.OutputState }

func (DockerWebhookHandlerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DockerWebhookHandler)(nil)).Elem()
}

func (o DockerWebhookHandlerArrayOutput) ToDockerWebhookHandlerArrayOutput() DockerWebhookHandlerArrayOutput {
	return o
}

func (o DockerWebhookHandlerArrayOutput) ToDockerWebhookHandlerArrayOutputWithContext(ctx context.Context) DockerWebhookHandlerArrayOutput {
	return o
}

func (o DockerWebhookHandlerArrayOutput) Index(i pulumi.IntInput) DockerWebhookHandlerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DockerWebhookHandler {
		return vs[0].([]DockerWebhookHandler)[vs[1].(int)]
	}).(DockerWebhookHandlerOutput)
}

type FederatedAlpineRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url string `pulumi:"url"`
}

// FederatedAlpineRepositoryMemberInput is an input type that accepts FederatedAlpineRepositoryMemberArgs and FederatedAlpineRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedAlpineRepositoryMemberInput` via:
//
//	FederatedAlpineRepositoryMemberArgs{...}
type FederatedAlpineRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedAlpineRepositoryMemberOutput() FederatedAlpineRepositoryMemberOutput
	ToFederatedAlpineRepositoryMemberOutputWithContext(context.Context) FederatedAlpineRepositoryMemberOutput
}

type FederatedAlpineRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedAlpineRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedAlpineRepositoryMember)(nil)).Elem()
}

func (i FederatedAlpineRepositoryMemberArgs) ToFederatedAlpineRepositoryMemberOutput() FederatedAlpineRepositoryMemberOutput {
	return i.ToFederatedAlpineRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedAlpineRepositoryMemberArgs) ToFederatedAlpineRepositoryMemberOutputWithContext(ctx context.Context) FederatedAlpineRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedAlpineRepositoryMemberOutput)
}

// FederatedAlpineRepositoryMemberArrayInput is an input type that accepts FederatedAlpineRepositoryMemberArray and FederatedAlpineRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedAlpineRepositoryMemberArrayInput` via:
//
//	FederatedAlpineRepositoryMemberArray{ FederatedAlpineRepositoryMemberArgs{...} }
type FederatedAlpineRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedAlpineRepositoryMemberArrayOutput() FederatedAlpineRepositoryMemberArrayOutput
	ToFederatedAlpineRepositoryMemberArrayOutputWithContext(context.Context) FederatedAlpineRepositoryMemberArrayOutput
}

type FederatedAlpineRepositoryMemberArray []FederatedAlpineRepositoryMemberInput

func (FederatedAlpineRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedAlpineRepositoryMember)(nil)).Elem()
}

func (i FederatedAlpineRepositoryMemberArray) ToFederatedAlpineRepositoryMemberArrayOutput() FederatedAlpineRepositoryMemberArrayOutput {
	return i.ToFederatedAlpineRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedAlpineRepositoryMemberArray) ToFederatedAlpineRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedAlpineRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedAlpineRepositoryMemberArrayOutput)
}

type FederatedAlpineRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedAlpineRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedAlpineRepositoryMember)(nil)).Elem()
}

func (o FederatedAlpineRepositoryMemberOutput) ToFederatedAlpineRepositoryMemberOutput() FederatedAlpineRepositoryMemberOutput {
	return o
}

func (o FederatedAlpineRepositoryMemberOutput) ToFederatedAlpineRepositoryMemberOutputWithContext(ctx context.Context) FederatedAlpineRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled
// status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedAlpineRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedAlpineRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name.
func (o FederatedAlpineRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedAlpineRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedAlpineRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedAlpineRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedAlpineRepositoryMember)(nil)).Elem()
}

func (o FederatedAlpineRepositoryMemberArrayOutput) ToFederatedAlpineRepositoryMemberArrayOutput() FederatedAlpineRepositoryMemberArrayOutput {
	return o
}

func (o FederatedAlpineRepositoryMemberArrayOutput) ToFederatedAlpineRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedAlpineRepositoryMemberArrayOutput {
	return o
}

func (o FederatedAlpineRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedAlpineRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedAlpineRepositoryMember {
		return vs[0].([]FederatedAlpineRepositoryMember)[vs[1].(int)]
	}).(FederatedAlpineRepositoryMemberOutput)
}

type FederatedBowerRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url string `pulumi:"url"`
}

// FederatedBowerRepositoryMemberInput is an input type that accepts FederatedBowerRepositoryMemberArgs and FederatedBowerRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedBowerRepositoryMemberInput` via:
//
//	FederatedBowerRepositoryMemberArgs{...}
type FederatedBowerRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedBowerRepositoryMemberOutput() FederatedBowerRepositoryMemberOutput
	ToFederatedBowerRepositoryMemberOutputWithContext(context.Context) FederatedBowerRepositoryMemberOutput
}

type FederatedBowerRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedBowerRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedBowerRepositoryMember)(nil)).Elem()
}

func (i FederatedBowerRepositoryMemberArgs) ToFederatedBowerRepositoryMemberOutput() FederatedBowerRepositoryMemberOutput {
	return i.ToFederatedBowerRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedBowerRepositoryMemberArgs) ToFederatedBowerRepositoryMemberOutputWithContext(ctx context.Context) FederatedBowerRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedBowerRepositoryMemberOutput)
}

// FederatedBowerRepositoryMemberArrayInput is an input type that accepts FederatedBowerRepositoryMemberArray and FederatedBowerRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedBowerRepositoryMemberArrayInput` via:
//
//	FederatedBowerRepositoryMemberArray{ FederatedBowerRepositoryMemberArgs{...} }
type FederatedBowerRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedBowerRepositoryMemberArrayOutput() FederatedBowerRepositoryMemberArrayOutput
	ToFederatedBowerRepositoryMemberArrayOutputWithContext(context.Context) FederatedBowerRepositoryMemberArrayOutput
}

type FederatedBowerRepositoryMemberArray []FederatedBowerRepositoryMemberInput

func (FederatedBowerRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedBowerRepositoryMember)(nil)).Elem()
}

func (i FederatedBowerRepositoryMemberArray) ToFederatedBowerRepositoryMemberArrayOutput() FederatedBowerRepositoryMemberArrayOutput {
	return i.ToFederatedBowerRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedBowerRepositoryMemberArray) ToFederatedBowerRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedBowerRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedBowerRepositoryMemberArrayOutput)
}

type FederatedBowerRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedBowerRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedBowerRepositoryMember)(nil)).Elem()
}

func (o FederatedBowerRepositoryMemberOutput) ToFederatedBowerRepositoryMemberOutput() FederatedBowerRepositoryMemberOutput {
	return o
}

func (o FederatedBowerRepositoryMemberOutput) ToFederatedBowerRepositoryMemberOutputWithContext(ctx context.Context) FederatedBowerRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled
// status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedBowerRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedBowerRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name.
func (o FederatedBowerRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedBowerRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedBowerRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedBowerRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedBowerRepositoryMember)(nil)).Elem()
}

func (o FederatedBowerRepositoryMemberArrayOutput) ToFederatedBowerRepositoryMemberArrayOutput() FederatedBowerRepositoryMemberArrayOutput {
	return o
}

func (o FederatedBowerRepositoryMemberArrayOutput) ToFederatedBowerRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedBowerRepositoryMemberArrayOutput {
	return o
}

func (o FederatedBowerRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedBowerRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedBowerRepositoryMember {
		return vs[0].([]FederatedBowerRepositoryMember)[vs[1].(int)]
	}).(FederatedBowerRepositoryMemberOutput)
}

type FederatedCargoRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url string `pulumi:"url"`
}

// FederatedCargoRepositoryMemberInput is an input type that accepts FederatedCargoRepositoryMemberArgs and FederatedCargoRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedCargoRepositoryMemberInput` via:
//
//	FederatedCargoRepositoryMemberArgs{...}
type FederatedCargoRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedCargoRepositoryMemberOutput() FederatedCargoRepositoryMemberOutput
	ToFederatedCargoRepositoryMemberOutputWithContext(context.Context) FederatedCargoRepositoryMemberOutput
}

type FederatedCargoRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedCargoRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedCargoRepositoryMember)(nil)).Elem()
}

func (i FederatedCargoRepositoryMemberArgs) ToFederatedCargoRepositoryMemberOutput() FederatedCargoRepositoryMemberOutput {
	return i.ToFederatedCargoRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedCargoRepositoryMemberArgs) ToFederatedCargoRepositoryMemberOutputWithContext(ctx context.Context) FederatedCargoRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedCargoRepositoryMemberOutput)
}

// FederatedCargoRepositoryMemberArrayInput is an input type that accepts FederatedCargoRepositoryMemberArray and FederatedCargoRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedCargoRepositoryMemberArrayInput` via:
//
//	FederatedCargoRepositoryMemberArray{ FederatedCargoRepositoryMemberArgs{...} }
type FederatedCargoRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedCargoRepositoryMemberArrayOutput() FederatedCargoRepositoryMemberArrayOutput
	ToFederatedCargoRepositoryMemberArrayOutputWithContext(context.Context) FederatedCargoRepositoryMemberArrayOutput
}

type FederatedCargoRepositoryMemberArray []FederatedCargoRepositoryMemberInput

func (FederatedCargoRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedCargoRepositoryMember)(nil)).Elem()
}

func (i FederatedCargoRepositoryMemberArray) ToFederatedCargoRepositoryMemberArrayOutput() FederatedCargoRepositoryMemberArrayOutput {
	return i.ToFederatedCargoRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedCargoRepositoryMemberArray) ToFederatedCargoRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedCargoRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedCargoRepositoryMemberArrayOutput)
}

type FederatedCargoRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedCargoRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedCargoRepositoryMember)(nil)).Elem()
}

func (o FederatedCargoRepositoryMemberOutput) ToFederatedCargoRepositoryMemberOutput() FederatedCargoRepositoryMemberOutput {
	return o
}

func (o FederatedCargoRepositoryMemberOutput) ToFederatedCargoRepositoryMemberOutputWithContext(ctx context.Context) FederatedCargoRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled
// status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedCargoRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedCargoRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name.
func (o FederatedCargoRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedCargoRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedCargoRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedCargoRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedCargoRepositoryMember)(nil)).Elem()
}

func (o FederatedCargoRepositoryMemberArrayOutput) ToFederatedCargoRepositoryMemberArrayOutput() FederatedCargoRepositoryMemberArrayOutput {
	return o
}

func (o FederatedCargoRepositoryMemberArrayOutput) ToFederatedCargoRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedCargoRepositoryMemberArrayOutput {
	return o
}

func (o FederatedCargoRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedCargoRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedCargoRepositoryMember {
		return vs[0].([]FederatedCargoRepositoryMember)[vs[1].(int)]
	}).(FederatedCargoRepositoryMemberOutput)
}

type FederatedChefRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url string `pulumi:"url"`
}

// FederatedChefRepositoryMemberInput is an input type that accepts FederatedChefRepositoryMemberArgs and FederatedChefRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedChefRepositoryMemberInput` via:
//
//	FederatedChefRepositoryMemberArgs{...}
type FederatedChefRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedChefRepositoryMemberOutput() FederatedChefRepositoryMemberOutput
	ToFederatedChefRepositoryMemberOutputWithContext(context.Context) FederatedChefRepositoryMemberOutput
}

type FederatedChefRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedChefRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedChefRepositoryMember)(nil)).Elem()
}

func (i FederatedChefRepositoryMemberArgs) ToFederatedChefRepositoryMemberOutput() FederatedChefRepositoryMemberOutput {
	return i.ToFederatedChefRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedChefRepositoryMemberArgs) ToFederatedChefRepositoryMemberOutputWithContext(ctx context.Context) FederatedChefRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedChefRepositoryMemberOutput)
}

// FederatedChefRepositoryMemberArrayInput is an input type that accepts FederatedChefRepositoryMemberArray and FederatedChefRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedChefRepositoryMemberArrayInput` via:
//
//	FederatedChefRepositoryMemberArray{ FederatedChefRepositoryMemberArgs{...} }
type FederatedChefRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedChefRepositoryMemberArrayOutput() FederatedChefRepositoryMemberArrayOutput
	ToFederatedChefRepositoryMemberArrayOutputWithContext(context.Context) FederatedChefRepositoryMemberArrayOutput
}

type FederatedChefRepositoryMemberArray []FederatedChefRepositoryMemberInput

func (FederatedChefRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedChefRepositoryMember)(nil)).Elem()
}

func (i FederatedChefRepositoryMemberArray) ToFederatedChefRepositoryMemberArrayOutput() FederatedChefRepositoryMemberArrayOutput {
	return i.ToFederatedChefRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedChefRepositoryMemberArray) ToFederatedChefRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedChefRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedChefRepositoryMemberArrayOutput)
}

type FederatedChefRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedChefRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedChefRepositoryMember)(nil)).Elem()
}

func (o FederatedChefRepositoryMemberOutput) ToFederatedChefRepositoryMemberOutput() FederatedChefRepositoryMemberOutput {
	return o
}

func (o FederatedChefRepositoryMemberOutput) ToFederatedChefRepositoryMemberOutputWithContext(ctx context.Context) FederatedChefRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled
// status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedChefRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedChefRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name.
func (o FederatedChefRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedChefRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedChefRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedChefRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedChefRepositoryMember)(nil)).Elem()
}

func (o FederatedChefRepositoryMemberArrayOutput) ToFederatedChefRepositoryMemberArrayOutput() FederatedChefRepositoryMemberArrayOutput {
	return o
}

func (o FederatedChefRepositoryMemberArrayOutput) ToFederatedChefRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedChefRepositoryMemberArrayOutput {
	return o
}

func (o FederatedChefRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedChefRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedChefRepositoryMember {
		return vs[0].([]FederatedChefRepositoryMember)[vs[1].(int)]
	}).(FederatedChefRepositoryMemberOutput)
}

type FederatedCocoapodsRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url string `pulumi:"url"`
}

// FederatedCocoapodsRepositoryMemberInput is an input type that accepts FederatedCocoapodsRepositoryMemberArgs and FederatedCocoapodsRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedCocoapodsRepositoryMemberInput` via:
//
//	FederatedCocoapodsRepositoryMemberArgs{...}
type FederatedCocoapodsRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedCocoapodsRepositoryMemberOutput() FederatedCocoapodsRepositoryMemberOutput
	ToFederatedCocoapodsRepositoryMemberOutputWithContext(context.Context) FederatedCocoapodsRepositoryMemberOutput
}

type FederatedCocoapodsRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedCocoapodsRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedCocoapodsRepositoryMember)(nil)).Elem()
}

func (i FederatedCocoapodsRepositoryMemberArgs) ToFederatedCocoapodsRepositoryMemberOutput() FederatedCocoapodsRepositoryMemberOutput {
	return i.ToFederatedCocoapodsRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedCocoapodsRepositoryMemberArgs) ToFederatedCocoapodsRepositoryMemberOutputWithContext(ctx context.Context) FederatedCocoapodsRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedCocoapodsRepositoryMemberOutput)
}

// FederatedCocoapodsRepositoryMemberArrayInput is an input type that accepts FederatedCocoapodsRepositoryMemberArray and FederatedCocoapodsRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedCocoapodsRepositoryMemberArrayInput` via:
//
//	FederatedCocoapodsRepositoryMemberArray{ FederatedCocoapodsRepositoryMemberArgs{...} }
type FederatedCocoapodsRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedCocoapodsRepositoryMemberArrayOutput() FederatedCocoapodsRepositoryMemberArrayOutput
	ToFederatedCocoapodsRepositoryMemberArrayOutputWithContext(context.Context) FederatedCocoapodsRepositoryMemberArrayOutput
}

type FederatedCocoapodsRepositoryMemberArray []FederatedCocoapodsRepositoryMemberInput

func (FederatedCocoapodsRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedCocoapodsRepositoryMember)(nil)).Elem()
}

func (i FederatedCocoapodsRepositoryMemberArray) ToFederatedCocoapodsRepositoryMemberArrayOutput() FederatedCocoapodsRepositoryMemberArrayOutput {
	return i.ToFederatedCocoapodsRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedCocoapodsRepositoryMemberArray) ToFederatedCocoapodsRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedCocoapodsRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedCocoapodsRepositoryMemberArrayOutput)
}

type FederatedCocoapodsRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedCocoapodsRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedCocoapodsRepositoryMember)(nil)).Elem()
}

func (o FederatedCocoapodsRepositoryMemberOutput) ToFederatedCocoapodsRepositoryMemberOutput() FederatedCocoapodsRepositoryMemberOutput {
	return o
}

func (o FederatedCocoapodsRepositoryMemberOutput) ToFederatedCocoapodsRepositoryMemberOutputWithContext(ctx context.Context) FederatedCocoapodsRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled
// status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedCocoapodsRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedCocoapodsRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name.
func (o FederatedCocoapodsRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedCocoapodsRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedCocoapodsRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedCocoapodsRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedCocoapodsRepositoryMember)(nil)).Elem()
}

func (o FederatedCocoapodsRepositoryMemberArrayOutput) ToFederatedCocoapodsRepositoryMemberArrayOutput() FederatedCocoapodsRepositoryMemberArrayOutput {
	return o
}

func (o FederatedCocoapodsRepositoryMemberArrayOutput) ToFederatedCocoapodsRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedCocoapodsRepositoryMemberArrayOutput {
	return o
}

func (o FederatedCocoapodsRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedCocoapodsRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedCocoapodsRepositoryMember {
		return vs[0].([]FederatedCocoapodsRepositoryMember)[vs[1].(int)]
	}).(FederatedCocoapodsRepositoryMemberOutput)
}

type FederatedComposerRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url string `pulumi:"url"`
}

// FederatedComposerRepositoryMemberInput is an input type that accepts FederatedComposerRepositoryMemberArgs and FederatedComposerRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedComposerRepositoryMemberInput` via:
//
//	FederatedComposerRepositoryMemberArgs{...}
type FederatedComposerRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedComposerRepositoryMemberOutput() FederatedComposerRepositoryMemberOutput
	ToFederatedComposerRepositoryMemberOutputWithContext(context.Context) FederatedComposerRepositoryMemberOutput
}

type FederatedComposerRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedComposerRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedComposerRepositoryMember)(nil)).Elem()
}

func (i FederatedComposerRepositoryMemberArgs) ToFederatedComposerRepositoryMemberOutput() FederatedComposerRepositoryMemberOutput {
	return i.ToFederatedComposerRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedComposerRepositoryMemberArgs) ToFederatedComposerRepositoryMemberOutputWithContext(ctx context.Context) FederatedComposerRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedComposerRepositoryMemberOutput)
}

// FederatedComposerRepositoryMemberArrayInput is an input type that accepts FederatedComposerRepositoryMemberArray and FederatedComposerRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedComposerRepositoryMemberArrayInput` via:
//
//	FederatedComposerRepositoryMemberArray{ FederatedComposerRepositoryMemberArgs{...} }
type FederatedComposerRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedComposerRepositoryMemberArrayOutput() FederatedComposerRepositoryMemberArrayOutput
	ToFederatedComposerRepositoryMemberArrayOutputWithContext(context.Context) FederatedComposerRepositoryMemberArrayOutput
}

type FederatedComposerRepositoryMemberArray []FederatedComposerRepositoryMemberInput

func (FederatedComposerRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedComposerRepositoryMember)(nil)).Elem()
}

func (i FederatedComposerRepositoryMemberArray) ToFederatedComposerRepositoryMemberArrayOutput() FederatedComposerRepositoryMemberArrayOutput {
	return i.ToFederatedComposerRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedComposerRepositoryMemberArray) ToFederatedComposerRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedComposerRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedComposerRepositoryMemberArrayOutput)
}

type FederatedComposerRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedComposerRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedComposerRepositoryMember)(nil)).Elem()
}

func (o FederatedComposerRepositoryMemberOutput) ToFederatedComposerRepositoryMemberOutput() FederatedComposerRepositoryMemberOutput {
	return o
}

func (o FederatedComposerRepositoryMemberOutput) ToFederatedComposerRepositoryMemberOutputWithContext(ctx context.Context) FederatedComposerRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled
// status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedComposerRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedComposerRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name.
func (o FederatedComposerRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedComposerRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedComposerRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedComposerRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedComposerRepositoryMember)(nil)).Elem()
}

func (o FederatedComposerRepositoryMemberArrayOutput) ToFederatedComposerRepositoryMemberArrayOutput() FederatedComposerRepositoryMemberArrayOutput {
	return o
}

func (o FederatedComposerRepositoryMemberArrayOutput) ToFederatedComposerRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedComposerRepositoryMemberArrayOutput {
	return o
}

func (o FederatedComposerRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedComposerRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedComposerRepositoryMember {
		return vs[0].([]FederatedComposerRepositoryMember)[vs[1].(int)]
	}).(FederatedComposerRepositoryMemberOutput)
}

type FederatedConanRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url string `pulumi:"url"`
}

// FederatedConanRepositoryMemberInput is an input type that accepts FederatedConanRepositoryMemberArgs and FederatedConanRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedConanRepositoryMemberInput` via:
//
//	FederatedConanRepositoryMemberArgs{...}
type FederatedConanRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedConanRepositoryMemberOutput() FederatedConanRepositoryMemberOutput
	ToFederatedConanRepositoryMemberOutputWithContext(context.Context) FederatedConanRepositoryMemberOutput
}

type FederatedConanRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedConanRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedConanRepositoryMember)(nil)).Elem()
}

func (i FederatedConanRepositoryMemberArgs) ToFederatedConanRepositoryMemberOutput() FederatedConanRepositoryMemberOutput {
	return i.ToFederatedConanRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedConanRepositoryMemberArgs) ToFederatedConanRepositoryMemberOutputWithContext(ctx context.Context) FederatedConanRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedConanRepositoryMemberOutput)
}

// FederatedConanRepositoryMemberArrayInput is an input type that accepts FederatedConanRepositoryMemberArray and FederatedConanRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedConanRepositoryMemberArrayInput` via:
//
//	FederatedConanRepositoryMemberArray{ FederatedConanRepositoryMemberArgs{...} }
type FederatedConanRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedConanRepositoryMemberArrayOutput() FederatedConanRepositoryMemberArrayOutput
	ToFederatedConanRepositoryMemberArrayOutputWithContext(context.Context) FederatedConanRepositoryMemberArrayOutput
}

type FederatedConanRepositoryMemberArray []FederatedConanRepositoryMemberInput

func (FederatedConanRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedConanRepositoryMember)(nil)).Elem()
}

func (i FederatedConanRepositoryMemberArray) ToFederatedConanRepositoryMemberArrayOutput() FederatedConanRepositoryMemberArrayOutput {
	return i.ToFederatedConanRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedConanRepositoryMemberArray) ToFederatedConanRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedConanRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedConanRepositoryMemberArrayOutput)
}

type FederatedConanRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedConanRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedConanRepositoryMember)(nil)).Elem()
}

func (o FederatedConanRepositoryMemberOutput) ToFederatedConanRepositoryMemberOutput() FederatedConanRepositoryMemberOutput {
	return o
}

func (o FederatedConanRepositoryMemberOutput) ToFederatedConanRepositoryMemberOutputWithContext(ctx context.Context) FederatedConanRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled
// status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedConanRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedConanRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name.
func (o FederatedConanRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedConanRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedConanRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedConanRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedConanRepositoryMember)(nil)).Elem()
}

func (o FederatedConanRepositoryMemberArrayOutput) ToFederatedConanRepositoryMemberArrayOutput() FederatedConanRepositoryMemberArrayOutput {
	return o
}

func (o FederatedConanRepositoryMemberArrayOutput) ToFederatedConanRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedConanRepositoryMemberArrayOutput {
	return o
}

func (o FederatedConanRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedConanRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedConanRepositoryMember {
		return vs[0].([]FederatedConanRepositoryMember)[vs[1].(int)]
	}).(FederatedConanRepositoryMemberOutput)
}

type FederatedCondaRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url string `pulumi:"url"`
}

// FederatedCondaRepositoryMemberInput is an input type that accepts FederatedCondaRepositoryMemberArgs and FederatedCondaRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedCondaRepositoryMemberInput` via:
//
//	FederatedCondaRepositoryMemberArgs{...}
type FederatedCondaRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedCondaRepositoryMemberOutput() FederatedCondaRepositoryMemberOutput
	ToFederatedCondaRepositoryMemberOutputWithContext(context.Context) FederatedCondaRepositoryMemberOutput
}

type FederatedCondaRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedCondaRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedCondaRepositoryMember)(nil)).Elem()
}

func (i FederatedCondaRepositoryMemberArgs) ToFederatedCondaRepositoryMemberOutput() FederatedCondaRepositoryMemberOutput {
	return i.ToFederatedCondaRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedCondaRepositoryMemberArgs) ToFederatedCondaRepositoryMemberOutputWithContext(ctx context.Context) FederatedCondaRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedCondaRepositoryMemberOutput)
}

// FederatedCondaRepositoryMemberArrayInput is an input type that accepts FederatedCondaRepositoryMemberArray and FederatedCondaRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedCondaRepositoryMemberArrayInput` via:
//
//	FederatedCondaRepositoryMemberArray{ FederatedCondaRepositoryMemberArgs{...} }
type FederatedCondaRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedCondaRepositoryMemberArrayOutput() FederatedCondaRepositoryMemberArrayOutput
	ToFederatedCondaRepositoryMemberArrayOutputWithContext(context.Context) FederatedCondaRepositoryMemberArrayOutput
}

type FederatedCondaRepositoryMemberArray []FederatedCondaRepositoryMemberInput

func (FederatedCondaRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedCondaRepositoryMember)(nil)).Elem()
}

func (i FederatedCondaRepositoryMemberArray) ToFederatedCondaRepositoryMemberArrayOutput() FederatedCondaRepositoryMemberArrayOutput {
	return i.ToFederatedCondaRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedCondaRepositoryMemberArray) ToFederatedCondaRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedCondaRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedCondaRepositoryMemberArrayOutput)
}

type FederatedCondaRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedCondaRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedCondaRepositoryMember)(nil)).Elem()
}

func (o FederatedCondaRepositoryMemberOutput) ToFederatedCondaRepositoryMemberOutput() FederatedCondaRepositoryMemberOutput {
	return o
}

func (o FederatedCondaRepositoryMemberOutput) ToFederatedCondaRepositoryMemberOutputWithContext(ctx context.Context) FederatedCondaRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled
// status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedCondaRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedCondaRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name.
func (o FederatedCondaRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedCondaRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedCondaRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedCondaRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedCondaRepositoryMember)(nil)).Elem()
}

func (o FederatedCondaRepositoryMemberArrayOutput) ToFederatedCondaRepositoryMemberArrayOutput() FederatedCondaRepositoryMemberArrayOutput {
	return o
}

func (o FederatedCondaRepositoryMemberArrayOutput) ToFederatedCondaRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedCondaRepositoryMemberArrayOutput {
	return o
}

func (o FederatedCondaRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedCondaRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedCondaRepositoryMember {
		return vs[0].([]FederatedCondaRepositoryMember)[vs[1].(int)]
	}).(FederatedCondaRepositoryMemberOutput)
}

type FederatedCranRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url string `pulumi:"url"`
}

// FederatedCranRepositoryMemberInput is an input type that accepts FederatedCranRepositoryMemberArgs and FederatedCranRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedCranRepositoryMemberInput` via:
//
//	FederatedCranRepositoryMemberArgs{...}
type FederatedCranRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedCranRepositoryMemberOutput() FederatedCranRepositoryMemberOutput
	ToFederatedCranRepositoryMemberOutputWithContext(context.Context) FederatedCranRepositoryMemberOutput
}

type FederatedCranRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedCranRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedCranRepositoryMember)(nil)).Elem()
}

func (i FederatedCranRepositoryMemberArgs) ToFederatedCranRepositoryMemberOutput() FederatedCranRepositoryMemberOutput {
	return i.ToFederatedCranRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedCranRepositoryMemberArgs) ToFederatedCranRepositoryMemberOutputWithContext(ctx context.Context) FederatedCranRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedCranRepositoryMemberOutput)
}

// FederatedCranRepositoryMemberArrayInput is an input type that accepts FederatedCranRepositoryMemberArray and FederatedCranRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedCranRepositoryMemberArrayInput` via:
//
//	FederatedCranRepositoryMemberArray{ FederatedCranRepositoryMemberArgs{...} }
type FederatedCranRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedCranRepositoryMemberArrayOutput() FederatedCranRepositoryMemberArrayOutput
	ToFederatedCranRepositoryMemberArrayOutputWithContext(context.Context) FederatedCranRepositoryMemberArrayOutput
}

type FederatedCranRepositoryMemberArray []FederatedCranRepositoryMemberInput

func (FederatedCranRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedCranRepositoryMember)(nil)).Elem()
}

func (i FederatedCranRepositoryMemberArray) ToFederatedCranRepositoryMemberArrayOutput() FederatedCranRepositoryMemberArrayOutput {
	return i.ToFederatedCranRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedCranRepositoryMemberArray) ToFederatedCranRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedCranRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedCranRepositoryMemberArrayOutput)
}

type FederatedCranRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedCranRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedCranRepositoryMember)(nil)).Elem()
}

func (o FederatedCranRepositoryMemberOutput) ToFederatedCranRepositoryMemberOutput() FederatedCranRepositoryMemberOutput {
	return o
}

func (o FederatedCranRepositoryMemberOutput) ToFederatedCranRepositoryMemberOutputWithContext(ctx context.Context) FederatedCranRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled
// status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedCranRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedCranRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name.
func (o FederatedCranRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedCranRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedCranRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedCranRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedCranRepositoryMember)(nil)).Elem()
}

func (o FederatedCranRepositoryMemberArrayOutput) ToFederatedCranRepositoryMemberArrayOutput() FederatedCranRepositoryMemberArrayOutput {
	return o
}

func (o FederatedCranRepositoryMemberArrayOutput) ToFederatedCranRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedCranRepositoryMemberArrayOutput {
	return o
}

func (o FederatedCranRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedCranRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedCranRepositoryMember {
		return vs[0].([]FederatedCranRepositoryMember)[vs[1].(int)]
	}).(FederatedCranRepositoryMemberOutput)
}

type FederatedDebianRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url string `pulumi:"url"`
}

// FederatedDebianRepositoryMemberInput is an input type that accepts FederatedDebianRepositoryMemberArgs and FederatedDebianRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedDebianRepositoryMemberInput` via:
//
//	FederatedDebianRepositoryMemberArgs{...}
type FederatedDebianRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedDebianRepositoryMemberOutput() FederatedDebianRepositoryMemberOutput
	ToFederatedDebianRepositoryMemberOutputWithContext(context.Context) FederatedDebianRepositoryMemberOutput
}

type FederatedDebianRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedDebianRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedDebianRepositoryMember)(nil)).Elem()
}

func (i FederatedDebianRepositoryMemberArgs) ToFederatedDebianRepositoryMemberOutput() FederatedDebianRepositoryMemberOutput {
	return i.ToFederatedDebianRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedDebianRepositoryMemberArgs) ToFederatedDebianRepositoryMemberOutputWithContext(ctx context.Context) FederatedDebianRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedDebianRepositoryMemberOutput)
}

// FederatedDebianRepositoryMemberArrayInput is an input type that accepts FederatedDebianRepositoryMemberArray and FederatedDebianRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedDebianRepositoryMemberArrayInput` via:
//
//	FederatedDebianRepositoryMemberArray{ FederatedDebianRepositoryMemberArgs{...} }
type FederatedDebianRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedDebianRepositoryMemberArrayOutput() FederatedDebianRepositoryMemberArrayOutput
	ToFederatedDebianRepositoryMemberArrayOutputWithContext(context.Context) FederatedDebianRepositoryMemberArrayOutput
}

type FederatedDebianRepositoryMemberArray []FederatedDebianRepositoryMemberInput

func (FederatedDebianRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedDebianRepositoryMember)(nil)).Elem()
}

func (i FederatedDebianRepositoryMemberArray) ToFederatedDebianRepositoryMemberArrayOutput() FederatedDebianRepositoryMemberArrayOutput {
	return i.ToFederatedDebianRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedDebianRepositoryMemberArray) ToFederatedDebianRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedDebianRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedDebianRepositoryMemberArrayOutput)
}

type FederatedDebianRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedDebianRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedDebianRepositoryMember)(nil)).Elem()
}

func (o FederatedDebianRepositoryMemberOutput) ToFederatedDebianRepositoryMemberOutput() FederatedDebianRepositoryMemberOutput {
	return o
}

func (o FederatedDebianRepositoryMemberOutput) ToFederatedDebianRepositoryMemberOutputWithContext(ctx context.Context) FederatedDebianRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled
// status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedDebianRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedDebianRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name.
func (o FederatedDebianRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedDebianRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedDebianRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedDebianRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedDebianRepositoryMember)(nil)).Elem()
}

func (o FederatedDebianRepositoryMemberArrayOutput) ToFederatedDebianRepositoryMemberArrayOutput() FederatedDebianRepositoryMemberArrayOutput {
	return o
}

func (o FederatedDebianRepositoryMemberArrayOutput) ToFederatedDebianRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedDebianRepositoryMemberArrayOutput {
	return o
}

func (o FederatedDebianRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedDebianRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedDebianRepositoryMember {
		return vs[0].([]FederatedDebianRepositoryMember)[vs[1].(int)]
	}).(FederatedDebianRepositoryMemberOutput)
}

type FederatedDockerRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url string `pulumi:"url"`
}

// FederatedDockerRepositoryMemberInput is an input type that accepts FederatedDockerRepositoryMemberArgs and FederatedDockerRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedDockerRepositoryMemberInput` via:
//
//	FederatedDockerRepositoryMemberArgs{...}
type FederatedDockerRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedDockerRepositoryMemberOutput() FederatedDockerRepositoryMemberOutput
	ToFederatedDockerRepositoryMemberOutputWithContext(context.Context) FederatedDockerRepositoryMemberOutput
}

type FederatedDockerRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedDockerRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedDockerRepositoryMember)(nil)).Elem()
}

func (i FederatedDockerRepositoryMemberArgs) ToFederatedDockerRepositoryMemberOutput() FederatedDockerRepositoryMemberOutput {
	return i.ToFederatedDockerRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedDockerRepositoryMemberArgs) ToFederatedDockerRepositoryMemberOutputWithContext(ctx context.Context) FederatedDockerRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedDockerRepositoryMemberOutput)
}

// FederatedDockerRepositoryMemberArrayInput is an input type that accepts FederatedDockerRepositoryMemberArray and FederatedDockerRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedDockerRepositoryMemberArrayInput` via:
//
//	FederatedDockerRepositoryMemberArray{ FederatedDockerRepositoryMemberArgs{...} }
type FederatedDockerRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedDockerRepositoryMemberArrayOutput() FederatedDockerRepositoryMemberArrayOutput
	ToFederatedDockerRepositoryMemberArrayOutputWithContext(context.Context) FederatedDockerRepositoryMemberArrayOutput
}

type FederatedDockerRepositoryMemberArray []FederatedDockerRepositoryMemberInput

func (FederatedDockerRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedDockerRepositoryMember)(nil)).Elem()
}

func (i FederatedDockerRepositoryMemberArray) ToFederatedDockerRepositoryMemberArrayOutput() FederatedDockerRepositoryMemberArrayOutput {
	return i.ToFederatedDockerRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedDockerRepositoryMemberArray) ToFederatedDockerRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedDockerRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedDockerRepositoryMemberArrayOutput)
}

type FederatedDockerRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedDockerRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedDockerRepositoryMember)(nil)).Elem()
}

func (o FederatedDockerRepositoryMemberOutput) ToFederatedDockerRepositoryMemberOutput() FederatedDockerRepositoryMemberOutput {
	return o
}

func (o FederatedDockerRepositoryMemberOutput) ToFederatedDockerRepositoryMemberOutputWithContext(ctx context.Context) FederatedDockerRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled
// status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedDockerRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedDockerRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name.
func (o FederatedDockerRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedDockerRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedDockerRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedDockerRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedDockerRepositoryMember)(nil)).Elem()
}

func (o FederatedDockerRepositoryMemberArrayOutput) ToFederatedDockerRepositoryMemberArrayOutput() FederatedDockerRepositoryMemberArrayOutput {
	return o
}

func (o FederatedDockerRepositoryMemberArrayOutput) ToFederatedDockerRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedDockerRepositoryMemberArrayOutput {
	return o
}

func (o FederatedDockerRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedDockerRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedDockerRepositoryMember {
		return vs[0].([]FederatedDockerRepositoryMember)[vs[1].(int)]
	}).(FederatedDockerRepositoryMemberOutput)
}

type FederatedDockerV1RepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url string `pulumi:"url"`
}

// FederatedDockerV1RepositoryMemberInput is an input type that accepts FederatedDockerV1RepositoryMemberArgs and FederatedDockerV1RepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedDockerV1RepositoryMemberInput` via:
//
//	FederatedDockerV1RepositoryMemberArgs{...}
type FederatedDockerV1RepositoryMemberInput interface {
	pulumi.Input

	ToFederatedDockerV1RepositoryMemberOutput() FederatedDockerV1RepositoryMemberOutput
	ToFederatedDockerV1RepositoryMemberOutputWithContext(context.Context) FederatedDockerV1RepositoryMemberOutput
}

type FederatedDockerV1RepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedDockerV1RepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedDockerV1RepositoryMember)(nil)).Elem()
}

func (i FederatedDockerV1RepositoryMemberArgs) ToFederatedDockerV1RepositoryMemberOutput() FederatedDockerV1RepositoryMemberOutput {
	return i.ToFederatedDockerV1RepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedDockerV1RepositoryMemberArgs) ToFederatedDockerV1RepositoryMemberOutputWithContext(ctx context.Context) FederatedDockerV1RepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedDockerV1RepositoryMemberOutput)
}

// FederatedDockerV1RepositoryMemberArrayInput is an input type that accepts FederatedDockerV1RepositoryMemberArray and FederatedDockerV1RepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedDockerV1RepositoryMemberArrayInput` via:
//
//	FederatedDockerV1RepositoryMemberArray{ FederatedDockerV1RepositoryMemberArgs{...} }
type FederatedDockerV1RepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedDockerV1RepositoryMemberArrayOutput() FederatedDockerV1RepositoryMemberArrayOutput
	ToFederatedDockerV1RepositoryMemberArrayOutputWithContext(context.Context) FederatedDockerV1RepositoryMemberArrayOutput
}

type FederatedDockerV1RepositoryMemberArray []FederatedDockerV1RepositoryMemberInput

func (FederatedDockerV1RepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedDockerV1RepositoryMember)(nil)).Elem()
}

func (i FederatedDockerV1RepositoryMemberArray) ToFederatedDockerV1RepositoryMemberArrayOutput() FederatedDockerV1RepositoryMemberArrayOutput {
	return i.ToFederatedDockerV1RepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedDockerV1RepositoryMemberArray) ToFederatedDockerV1RepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedDockerV1RepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedDockerV1RepositoryMemberArrayOutput)
}

type FederatedDockerV1RepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedDockerV1RepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedDockerV1RepositoryMember)(nil)).Elem()
}

func (o FederatedDockerV1RepositoryMemberOutput) ToFederatedDockerV1RepositoryMemberOutput() FederatedDockerV1RepositoryMemberOutput {
	return o
}

func (o FederatedDockerV1RepositoryMemberOutput) ToFederatedDockerV1RepositoryMemberOutputWithContext(ctx context.Context) FederatedDockerV1RepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled
// status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedDockerV1RepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedDockerV1RepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name.
func (o FederatedDockerV1RepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedDockerV1RepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedDockerV1RepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedDockerV1RepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedDockerV1RepositoryMember)(nil)).Elem()
}

func (o FederatedDockerV1RepositoryMemberArrayOutput) ToFederatedDockerV1RepositoryMemberArrayOutput() FederatedDockerV1RepositoryMemberArrayOutput {
	return o
}

func (o FederatedDockerV1RepositoryMemberArrayOutput) ToFederatedDockerV1RepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedDockerV1RepositoryMemberArrayOutput {
	return o
}

func (o FederatedDockerV1RepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedDockerV1RepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedDockerV1RepositoryMember {
		return vs[0].([]FederatedDockerV1RepositoryMember)[vs[1].(int)]
	}).(FederatedDockerV1RepositoryMemberOutput)
}

type FederatedDockerV2RepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url string `pulumi:"url"`
}

// FederatedDockerV2RepositoryMemberInput is an input type that accepts FederatedDockerV2RepositoryMemberArgs and FederatedDockerV2RepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedDockerV2RepositoryMemberInput` via:
//
//	FederatedDockerV2RepositoryMemberArgs{...}
type FederatedDockerV2RepositoryMemberInput interface {
	pulumi.Input

	ToFederatedDockerV2RepositoryMemberOutput() FederatedDockerV2RepositoryMemberOutput
	ToFederatedDockerV2RepositoryMemberOutputWithContext(context.Context) FederatedDockerV2RepositoryMemberOutput
}

type FederatedDockerV2RepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedDockerV2RepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedDockerV2RepositoryMember)(nil)).Elem()
}

func (i FederatedDockerV2RepositoryMemberArgs) ToFederatedDockerV2RepositoryMemberOutput() FederatedDockerV2RepositoryMemberOutput {
	return i.ToFederatedDockerV2RepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedDockerV2RepositoryMemberArgs) ToFederatedDockerV2RepositoryMemberOutputWithContext(ctx context.Context) FederatedDockerV2RepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedDockerV2RepositoryMemberOutput)
}

// FederatedDockerV2RepositoryMemberArrayInput is an input type that accepts FederatedDockerV2RepositoryMemberArray and FederatedDockerV2RepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedDockerV2RepositoryMemberArrayInput` via:
//
//	FederatedDockerV2RepositoryMemberArray{ FederatedDockerV2RepositoryMemberArgs{...} }
type FederatedDockerV2RepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedDockerV2RepositoryMemberArrayOutput() FederatedDockerV2RepositoryMemberArrayOutput
	ToFederatedDockerV2RepositoryMemberArrayOutputWithContext(context.Context) FederatedDockerV2RepositoryMemberArrayOutput
}

type FederatedDockerV2RepositoryMemberArray []FederatedDockerV2RepositoryMemberInput

func (FederatedDockerV2RepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedDockerV2RepositoryMember)(nil)).Elem()
}

func (i FederatedDockerV2RepositoryMemberArray) ToFederatedDockerV2RepositoryMemberArrayOutput() FederatedDockerV2RepositoryMemberArrayOutput {
	return i.ToFederatedDockerV2RepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedDockerV2RepositoryMemberArray) ToFederatedDockerV2RepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedDockerV2RepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedDockerV2RepositoryMemberArrayOutput)
}

type FederatedDockerV2RepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedDockerV2RepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedDockerV2RepositoryMember)(nil)).Elem()
}

func (o FederatedDockerV2RepositoryMemberOutput) ToFederatedDockerV2RepositoryMemberOutput() FederatedDockerV2RepositoryMemberOutput {
	return o
}

func (o FederatedDockerV2RepositoryMemberOutput) ToFederatedDockerV2RepositoryMemberOutputWithContext(ctx context.Context) FederatedDockerV2RepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled
// status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedDockerV2RepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedDockerV2RepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name.
func (o FederatedDockerV2RepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedDockerV2RepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedDockerV2RepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedDockerV2RepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedDockerV2RepositoryMember)(nil)).Elem()
}

func (o FederatedDockerV2RepositoryMemberArrayOutput) ToFederatedDockerV2RepositoryMemberArrayOutput() FederatedDockerV2RepositoryMemberArrayOutput {
	return o
}

func (o FederatedDockerV2RepositoryMemberArrayOutput) ToFederatedDockerV2RepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedDockerV2RepositoryMemberArrayOutput {
	return o
}

func (o FederatedDockerV2RepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedDockerV2RepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedDockerV2RepositoryMember {
		return vs[0].([]FederatedDockerV2RepositoryMember)[vs[1].(int)]
	}).(FederatedDockerV2RepositoryMemberOutput)
}

type FederatedGemsRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url string `pulumi:"url"`
}

// FederatedGemsRepositoryMemberInput is an input type that accepts FederatedGemsRepositoryMemberArgs and FederatedGemsRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedGemsRepositoryMemberInput` via:
//
//	FederatedGemsRepositoryMemberArgs{...}
type FederatedGemsRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedGemsRepositoryMemberOutput() FederatedGemsRepositoryMemberOutput
	ToFederatedGemsRepositoryMemberOutputWithContext(context.Context) FederatedGemsRepositoryMemberOutput
}

type FederatedGemsRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedGemsRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedGemsRepositoryMember)(nil)).Elem()
}

func (i FederatedGemsRepositoryMemberArgs) ToFederatedGemsRepositoryMemberOutput() FederatedGemsRepositoryMemberOutput {
	return i.ToFederatedGemsRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedGemsRepositoryMemberArgs) ToFederatedGemsRepositoryMemberOutputWithContext(ctx context.Context) FederatedGemsRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedGemsRepositoryMemberOutput)
}

// FederatedGemsRepositoryMemberArrayInput is an input type that accepts FederatedGemsRepositoryMemberArray and FederatedGemsRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedGemsRepositoryMemberArrayInput` via:
//
//	FederatedGemsRepositoryMemberArray{ FederatedGemsRepositoryMemberArgs{...} }
type FederatedGemsRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedGemsRepositoryMemberArrayOutput() FederatedGemsRepositoryMemberArrayOutput
	ToFederatedGemsRepositoryMemberArrayOutputWithContext(context.Context) FederatedGemsRepositoryMemberArrayOutput
}

type FederatedGemsRepositoryMemberArray []FederatedGemsRepositoryMemberInput

func (FederatedGemsRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedGemsRepositoryMember)(nil)).Elem()
}

func (i FederatedGemsRepositoryMemberArray) ToFederatedGemsRepositoryMemberArrayOutput() FederatedGemsRepositoryMemberArrayOutput {
	return i.ToFederatedGemsRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedGemsRepositoryMemberArray) ToFederatedGemsRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedGemsRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedGemsRepositoryMemberArrayOutput)
}

type FederatedGemsRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedGemsRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedGemsRepositoryMember)(nil)).Elem()
}

func (o FederatedGemsRepositoryMemberOutput) ToFederatedGemsRepositoryMemberOutput() FederatedGemsRepositoryMemberOutput {
	return o
}

func (o FederatedGemsRepositoryMemberOutput) ToFederatedGemsRepositoryMemberOutputWithContext(ctx context.Context) FederatedGemsRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled
// status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedGemsRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedGemsRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name.
func (o FederatedGemsRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedGemsRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedGemsRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedGemsRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedGemsRepositoryMember)(nil)).Elem()
}

func (o FederatedGemsRepositoryMemberArrayOutput) ToFederatedGemsRepositoryMemberArrayOutput() FederatedGemsRepositoryMemberArrayOutput {
	return o
}

func (o FederatedGemsRepositoryMemberArrayOutput) ToFederatedGemsRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedGemsRepositoryMemberArrayOutput {
	return o
}

func (o FederatedGemsRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedGemsRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedGemsRepositoryMember {
		return vs[0].([]FederatedGemsRepositoryMember)[vs[1].(int)]
	}).(FederatedGemsRepositoryMemberOutput)
}

type FederatedGenericRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url string `pulumi:"url"`
}

// FederatedGenericRepositoryMemberInput is an input type that accepts FederatedGenericRepositoryMemberArgs and FederatedGenericRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedGenericRepositoryMemberInput` via:
//
//	FederatedGenericRepositoryMemberArgs{...}
type FederatedGenericRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedGenericRepositoryMemberOutput() FederatedGenericRepositoryMemberOutput
	ToFederatedGenericRepositoryMemberOutputWithContext(context.Context) FederatedGenericRepositoryMemberOutput
}

type FederatedGenericRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedGenericRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedGenericRepositoryMember)(nil)).Elem()
}

func (i FederatedGenericRepositoryMemberArgs) ToFederatedGenericRepositoryMemberOutput() FederatedGenericRepositoryMemberOutput {
	return i.ToFederatedGenericRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedGenericRepositoryMemberArgs) ToFederatedGenericRepositoryMemberOutputWithContext(ctx context.Context) FederatedGenericRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedGenericRepositoryMemberOutput)
}

// FederatedGenericRepositoryMemberArrayInput is an input type that accepts FederatedGenericRepositoryMemberArray and FederatedGenericRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedGenericRepositoryMemberArrayInput` via:
//
//	FederatedGenericRepositoryMemberArray{ FederatedGenericRepositoryMemberArgs{...} }
type FederatedGenericRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedGenericRepositoryMemberArrayOutput() FederatedGenericRepositoryMemberArrayOutput
	ToFederatedGenericRepositoryMemberArrayOutputWithContext(context.Context) FederatedGenericRepositoryMemberArrayOutput
}

type FederatedGenericRepositoryMemberArray []FederatedGenericRepositoryMemberInput

func (FederatedGenericRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedGenericRepositoryMember)(nil)).Elem()
}

func (i FederatedGenericRepositoryMemberArray) ToFederatedGenericRepositoryMemberArrayOutput() FederatedGenericRepositoryMemberArrayOutput {
	return i.ToFederatedGenericRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedGenericRepositoryMemberArray) ToFederatedGenericRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedGenericRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedGenericRepositoryMemberArrayOutput)
}

type FederatedGenericRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedGenericRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedGenericRepositoryMember)(nil)).Elem()
}

func (o FederatedGenericRepositoryMemberOutput) ToFederatedGenericRepositoryMemberOutput() FederatedGenericRepositoryMemberOutput {
	return o
}

func (o FederatedGenericRepositoryMemberOutput) ToFederatedGenericRepositoryMemberOutputWithContext(ctx context.Context) FederatedGenericRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled
// status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedGenericRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedGenericRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name.
func (o FederatedGenericRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedGenericRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedGenericRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedGenericRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedGenericRepositoryMember)(nil)).Elem()
}

func (o FederatedGenericRepositoryMemberArrayOutput) ToFederatedGenericRepositoryMemberArrayOutput() FederatedGenericRepositoryMemberArrayOutput {
	return o
}

func (o FederatedGenericRepositoryMemberArrayOutput) ToFederatedGenericRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedGenericRepositoryMemberArrayOutput {
	return o
}

func (o FederatedGenericRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedGenericRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedGenericRepositoryMember {
		return vs[0].([]FederatedGenericRepositoryMember)[vs[1].(int)]
	}).(FederatedGenericRepositoryMemberOutput)
}

type FederatedGitltfsRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url string `pulumi:"url"`
}

// FederatedGitltfsRepositoryMemberInput is an input type that accepts FederatedGitltfsRepositoryMemberArgs and FederatedGitltfsRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedGitltfsRepositoryMemberInput` via:
//
//	FederatedGitltfsRepositoryMemberArgs{...}
type FederatedGitltfsRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedGitltfsRepositoryMemberOutput() FederatedGitltfsRepositoryMemberOutput
	ToFederatedGitltfsRepositoryMemberOutputWithContext(context.Context) FederatedGitltfsRepositoryMemberOutput
}

type FederatedGitltfsRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedGitltfsRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedGitltfsRepositoryMember)(nil)).Elem()
}

func (i FederatedGitltfsRepositoryMemberArgs) ToFederatedGitltfsRepositoryMemberOutput() FederatedGitltfsRepositoryMemberOutput {
	return i.ToFederatedGitltfsRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedGitltfsRepositoryMemberArgs) ToFederatedGitltfsRepositoryMemberOutputWithContext(ctx context.Context) FederatedGitltfsRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedGitltfsRepositoryMemberOutput)
}

// FederatedGitltfsRepositoryMemberArrayInput is an input type that accepts FederatedGitltfsRepositoryMemberArray and FederatedGitltfsRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedGitltfsRepositoryMemberArrayInput` via:
//
//	FederatedGitltfsRepositoryMemberArray{ FederatedGitltfsRepositoryMemberArgs{...} }
type FederatedGitltfsRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedGitltfsRepositoryMemberArrayOutput() FederatedGitltfsRepositoryMemberArrayOutput
	ToFederatedGitltfsRepositoryMemberArrayOutputWithContext(context.Context) FederatedGitltfsRepositoryMemberArrayOutput
}

type FederatedGitltfsRepositoryMemberArray []FederatedGitltfsRepositoryMemberInput

func (FederatedGitltfsRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedGitltfsRepositoryMember)(nil)).Elem()
}

func (i FederatedGitltfsRepositoryMemberArray) ToFederatedGitltfsRepositoryMemberArrayOutput() FederatedGitltfsRepositoryMemberArrayOutput {
	return i.ToFederatedGitltfsRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedGitltfsRepositoryMemberArray) ToFederatedGitltfsRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedGitltfsRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedGitltfsRepositoryMemberArrayOutput)
}

type FederatedGitltfsRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedGitltfsRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedGitltfsRepositoryMember)(nil)).Elem()
}

func (o FederatedGitltfsRepositoryMemberOutput) ToFederatedGitltfsRepositoryMemberOutput() FederatedGitltfsRepositoryMemberOutput {
	return o
}

func (o FederatedGitltfsRepositoryMemberOutput) ToFederatedGitltfsRepositoryMemberOutputWithContext(ctx context.Context) FederatedGitltfsRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled
// status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedGitltfsRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedGitltfsRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name.
func (o FederatedGitltfsRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedGitltfsRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedGitltfsRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedGitltfsRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedGitltfsRepositoryMember)(nil)).Elem()
}

func (o FederatedGitltfsRepositoryMemberArrayOutput) ToFederatedGitltfsRepositoryMemberArrayOutput() FederatedGitltfsRepositoryMemberArrayOutput {
	return o
}

func (o FederatedGitltfsRepositoryMemberArrayOutput) ToFederatedGitltfsRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedGitltfsRepositoryMemberArrayOutput {
	return o
}

func (o FederatedGitltfsRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedGitltfsRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedGitltfsRepositoryMember {
		return vs[0].([]FederatedGitltfsRepositoryMember)[vs[1].(int)]
	}).(FederatedGitltfsRepositoryMemberOutput)
}

type FederatedGoRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url string `pulumi:"url"`
}

// FederatedGoRepositoryMemberInput is an input type that accepts FederatedGoRepositoryMemberArgs and FederatedGoRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedGoRepositoryMemberInput` via:
//
//	FederatedGoRepositoryMemberArgs{...}
type FederatedGoRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedGoRepositoryMemberOutput() FederatedGoRepositoryMemberOutput
	ToFederatedGoRepositoryMemberOutputWithContext(context.Context) FederatedGoRepositoryMemberOutput
}

type FederatedGoRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedGoRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedGoRepositoryMember)(nil)).Elem()
}

func (i FederatedGoRepositoryMemberArgs) ToFederatedGoRepositoryMemberOutput() FederatedGoRepositoryMemberOutput {
	return i.ToFederatedGoRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedGoRepositoryMemberArgs) ToFederatedGoRepositoryMemberOutputWithContext(ctx context.Context) FederatedGoRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedGoRepositoryMemberOutput)
}

// FederatedGoRepositoryMemberArrayInput is an input type that accepts FederatedGoRepositoryMemberArray and FederatedGoRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedGoRepositoryMemberArrayInput` via:
//
//	FederatedGoRepositoryMemberArray{ FederatedGoRepositoryMemberArgs{...} }
type FederatedGoRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedGoRepositoryMemberArrayOutput() FederatedGoRepositoryMemberArrayOutput
	ToFederatedGoRepositoryMemberArrayOutputWithContext(context.Context) FederatedGoRepositoryMemberArrayOutput
}

type FederatedGoRepositoryMemberArray []FederatedGoRepositoryMemberInput

func (FederatedGoRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedGoRepositoryMember)(nil)).Elem()
}

func (i FederatedGoRepositoryMemberArray) ToFederatedGoRepositoryMemberArrayOutput() FederatedGoRepositoryMemberArrayOutput {
	return i.ToFederatedGoRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedGoRepositoryMemberArray) ToFederatedGoRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedGoRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedGoRepositoryMemberArrayOutput)
}

type FederatedGoRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedGoRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedGoRepositoryMember)(nil)).Elem()
}

func (o FederatedGoRepositoryMemberOutput) ToFederatedGoRepositoryMemberOutput() FederatedGoRepositoryMemberOutput {
	return o
}

func (o FederatedGoRepositoryMemberOutput) ToFederatedGoRepositoryMemberOutputWithContext(ctx context.Context) FederatedGoRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled
// status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedGoRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedGoRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name.
func (o FederatedGoRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedGoRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedGoRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedGoRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedGoRepositoryMember)(nil)).Elem()
}

func (o FederatedGoRepositoryMemberArrayOutput) ToFederatedGoRepositoryMemberArrayOutput() FederatedGoRepositoryMemberArrayOutput {
	return o
}

func (o FederatedGoRepositoryMemberArrayOutput) ToFederatedGoRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedGoRepositoryMemberArrayOutput {
	return o
}

func (o FederatedGoRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedGoRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedGoRepositoryMember {
		return vs[0].([]FederatedGoRepositoryMember)[vs[1].(int)]
	}).(FederatedGoRepositoryMemberOutput)
}

type FederatedGradleRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url string `pulumi:"url"`
}

// FederatedGradleRepositoryMemberInput is an input type that accepts FederatedGradleRepositoryMemberArgs and FederatedGradleRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedGradleRepositoryMemberInput` via:
//
//	FederatedGradleRepositoryMemberArgs{...}
type FederatedGradleRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedGradleRepositoryMemberOutput() FederatedGradleRepositoryMemberOutput
	ToFederatedGradleRepositoryMemberOutputWithContext(context.Context) FederatedGradleRepositoryMemberOutput
}

type FederatedGradleRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedGradleRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedGradleRepositoryMember)(nil)).Elem()
}

func (i FederatedGradleRepositoryMemberArgs) ToFederatedGradleRepositoryMemberOutput() FederatedGradleRepositoryMemberOutput {
	return i.ToFederatedGradleRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedGradleRepositoryMemberArgs) ToFederatedGradleRepositoryMemberOutputWithContext(ctx context.Context) FederatedGradleRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedGradleRepositoryMemberOutput)
}

// FederatedGradleRepositoryMemberArrayInput is an input type that accepts FederatedGradleRepositoryMemberArray and FederatedGradleRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedGradleRepositoryMemberArrayInput` via:
//
//	FederatedGradleRepositoryMemberArray{ FederatedGradleRepositoryMemberArgs{...} }
type FederatedGradleRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedGradleRepositoryMemberArrayOutput() FederatedGradleRepositoryMemberArrayOutput
	ToFederatedGradleRepositoryMemberArrayOutputWithContext(context.Context) FederatedGradleRepositoryMemberArrayOutput
}

type FederatedGradleRepositoryMemberArray []FederatedGradleRepositoryMemberInput

func (FederatedGradleRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedGradleRepositoryMember)(nil)).Elem()
}

func (i FederatedGradleRepositoryMemberArray) ToFederatedGradleRepositoryMemberArrayOutput() FederatedGradleRepositoryMemberArrayOutput {
	return i.ToFederatedGradleRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedGradleRepositoryMemberArray) ToFederatedGradleRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedGradleRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedGradleRepositoryMemberArrayOutput)
}

type FederatedGradleRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedGradleRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedGradleRepositoryMember)(nil)).Elem()
}

func (o FederatedGradleRepositoryMemberOutput) ToFederatedGradleRepositoryMemberOutput() FederatedGradleRepositoryMemberOutput {
	return o
}

func (o FederatedGradleRepositoryMemberOutput) ToFederatedGradleRepositoryMemberOutputWithContext(ctx context.Context) FederatedGradleRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled
// status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedGradleRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedGradleRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name.
func (o FederatedGradleRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedGradleRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedGradleRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedGradleRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedGradleRepositoryMember)(nil)).Elem()
}

func (o FederatedGradleRepositoryMemberArrayOutput) ToFederatedGradleRepositoryMemberArrayOutput() FederatedGradleRepositoryMemberArrayOutput {
	return o
}

func (o FederatedGradleRepositoryMemberArrayOutput) ToFederatedGradleRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedGradleRepositoryMemberArrayOutput {
	return o
}

func (o FederatedGradleRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedGradleRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedGradleRepositoryMember {
		return vs[0].([]FederatedGradleRepositoryMember)[vs[1].(int)]
	}).(FederatedGradleRepositoryMemberOutput)
}

type FederatedHelmRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url string `pulumi:"url"`
}

// FederatedHelmRepositoryMemberInput is an input type that accepts FederatedHelmRepositoryMemberArgs and FederatedHelmRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedHelmRepositoryMemberInput` via:
//
//	FederatedHelmRepositoryMemberArgs{...}
type FederatedHelmRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedHelmRepositoryMemberOutput() FederatedHelmRepositoryMemberOutput
	ToFederatedHelmRepositoryMemberOutputWithContext(context.Context) FederatedHelmRepositoryMemberOutput
}

type FederatedHelmRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedHelmRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedHelmRepositoryMember)(nil)).Elem()
}

func (i FederatedHelmRepositoryMemberArgs) ToFederatedHelmRepositoryMemberOutput() FederatedHelmRepositoryMemberOutput {
	return i.ToFederatedHelmRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedHelmRepositoryMemberArgs) ToFederatedHelmRepositoryMemberOutputWithContext(ctx context.Context) FederatedHelmRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedHelmRepositoryMemberOutput)
}

// FederatedHelmRepositoryMemberArrayInput is an input type that accepts FederatedHelmRepositoryMemberArray and FederatedHelmRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedHelmRepositoryMemberArrayInput` via:
//
//	FederatedHelmRepositoryMemberArray{ FederatedHelmRepositoryMemberArgs{...} }
type FederatedHelmRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedHelmRepositoryMemberArrayOutput() FederatedHelmRepositoryMemberArrayOutput
	ToFederatedHelmRepositoryMemberArrayOutputWithContext(context.Context) FederatedHelmRepositoryMemberArrayOutput
}

type FederatedHelmRepositoryMemberArray []FederatedHelmRepositoryMemberInput

func (FederatedHelmRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedHelmRepositoryMember)(nil)).Elem()
}

func (i FederatedHelmRepositoryMemberArray) ToFederatedHelmRepositoryMemberArrayOutput() FederatedHelmRepositoryMemberArrayOutput {
	return i.ToFederatedHelmRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedHelmRepositoryMemberArray) ToFederatedHelmRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedHelmRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedHelmRepositoryMemberArrayOutput)
}

type FederatedHelmRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedHelmRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedHelmRepositoryMember)(nil)).Elem()
}

func (o FederatedHelmRepositoryMemberOutput) ToFederatedHelmRepositoryMemberOutput() FederatedHelmRepositoryMemberOutput {
	return o
}

func (o FederatedHelmRepositoryMemberOutput) ToFederatedHelmRepositoryMemberOutputWithContext(ctx context.Context) FederatedHelmRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled
// status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedHelmRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedHelmRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name.
func (o FederatedHelmRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedHelmRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedHelmRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedHelmRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedHelmRepositoryMember)(nil)).Elem()
}

func (o FederatedHelmRepositoryMemberArrayOutput) ToFederatedHelmRepositoryMemberArrayOutput() FederatedHelmRepositoryMemberArrayOutput {
	return o
}

func (o FederatedHelmRepositoryMemberArrayOutput) ToFederatedHelmRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedHelmRepositoryMemberArrayOutput {
	return o
}

func (o FederatedHelmRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedHelmRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedHelmRepositoryMember {
		return vs[0].([]FederatedHelmRepositoryMember)[vs[1].(int)]
	}).(FederatedHelmRepositoryMemberOutput)
}

type FederatedIvyRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url string `pulumi:"url"`
}

// FederatedIvyRepositoryMemberInput is an input type that accepts FederatedIvyRepositoryMemberArgs and FederatedIvyRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedIvyRepositoryMemberInput` via:
//
//	FederatedIvyRepositoryMemberArgs{...}
type FederatedIvyRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedIvyRepositoryMemberOutput() FederatedIvyRepositoryMemberOutput
	ToFederatedIvyRepositoryMemberOutputWithContext(context.Context) FederatedIvyRepositoryMemberOutput
}

type FederatedIvyRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedIvyRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedIvyRepositoryMember)(nil)).Elem()
}

func (i FederatedIvyRepositoryMemberArgs) ToFederatedIvyRepositoryMemberOutput() FederatedIvyRepositoryMemberOutput {
	return i.ToFederatedIvyRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedIvyRepositoryMemberArgs) ToFederatedIvyRepositoryMemberOutputWithContext(ctx context.Context) FederatedIvyRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedIvyRepositoryMemberOutput)
}

// FederatedIvyRepositoryMemberArrayInput is an input type that accepts FederatedIvyRepositoryMemberArray and FederatedIvyRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedIvyRepositoryMemberArrayInput` via:
//
//	FederatedIvyRepositoryMemberArray{ FederatedIvyRepositoryMemberArgs{...} }
type FederatedIvyRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedIvyRepositoryMemberArrayOutput() FederatedIvyRepositoryMemberArrayOutput
	ToFederatedIvyRepositoryMemberArrayOutputWithContext(context.Context) FederatedIvyRepositoryMemberArrayOutput
}

type FederatedIvyRepositoryMemberArray []FederatedIvyRepositoryMemberInput

func (FederatedIvyRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedIvyRepositoryMember)(nil)).Elem()
}

func (i FederatedIvyRepositoryMemberArray) ToFederatedIvyRepositoryMemberArrayOutput() FederatedIvyRepositoryMemberArrayOutput {
	return i.ToFederatedIvyRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedIvyRepositoryMemberArray) ToFederatedIvyRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedIvyRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedIvyRepositoryMemberArrayOutput)
}

type FederatedIvyRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedIvyRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedIvyRepositoryMember)(nil)).Elem()
}

func (o FederatedIvyRepositoryMemberOutput) ToFederatedIvyRepositoryMemberOutput() FederatedIvyRepositoryMemberOutput {
	return o
}

func (o FederatedIvyRepositoryMemberOutput) ToFederatedIvyRepositoryMemberOutputWithContext(ctx context.Context) FederatedIvyRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled
// status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedIvyRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedIvyRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name.
func (o FederatedIvyRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedIvyRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedIvyRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedIvyRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedIvyRepositoryMember)(nil)).Elem()
}

func (o FederatedIvyRepositoryMemberArrayOutput) ToFederatedIvyRepositoryMemberArrayOutput() FederatedIvyRepositoryMemberArrayOutput {
	return o
}

func (o FederatedIvyRepositoryMemberArrayOutput) ToFederatedIvyRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedIvyRepositoryMemberArrayOutput {
	return o
}

func (o FederatedIvyRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedIvyRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedIvyRepositoryMember {
		return vs[0].([]FederatedIvyRepositoryMember)[vs[1].(int)]
	}).(FederatedIvyRepositoryMemberOutput)
}

type FederatedMavenRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url string `pulumi:"url"`
}

// FederatedMavenRepositoryMemberInput is an input type that accepts FederatedMavenRepositoryMemberArgs and FederatedMavenRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedMavenRepositoryMemberInput` via:
//
//	FederatedMavenRepositoryMemberArgs{...}
type FederatedMavenRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedMavenRepositoryMemberOutput() FederatedMavenRepositoryMemberOutput
	ToFederatedMavenRepositoryMemberOutputWithContext(context.Context) FederatedMavenRepositoryMemberOutput
}

type FederatedMavenRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedMavenRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedMavenRepositoryMember)(nil)).Elem()
}

func (i FederatedMavenRepositoryMemberArgs) ToFederatedMavenRepositoryMemberOutput() FederatedMavenRepositoryMemberOutput {
	return i.ToFederatedMavenRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedMavenRepositoryMemberArgs) ToFederatedMavenRepositoryMemberOutputWithContext(ctx context.Context) FederatedMavenRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedMavenRepositoryMemberOutput)
}

// FederatedMavenRepositoryMemberArrayInput is an input type that accepts FederatedMavenRepositoryMemberArray and FederatedMavenRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedMavenRepositoryMemberArrayInput` via:
//
//	FederatedMavenRepositoryMemberArray{ FederatedMavenRepositoryMemberArgs{...} }
type FederatedMavenRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedMavenRepositoryMemberArrayOutput() FederatedMavenRepositoryMemberArrayOutput
	ToFederatedMavenRepositoryMemberArrayOutputWithContext(context.Context) FederatedMavenRepositoryMemberArrayOutput
}

type FederatedMavenRepositoryMemberArray []FederatedMavenRepositoryMemberInput

func (FederatedMavenRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedMavenRepositoryMember)(nil)).Elem()
}

func (i FederatedMavenRepositoryMemberArray) ToFederatedMavenRepositoryMemberArrayOutput() FederatedMavenRepositoryMemberArrayOutput {
	return i.ToFederatedMavenRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedMavenRepositoryMemberArray) ToFederatedMavenRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedMavenRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedMavenRepositoryMemberArrayOutput)
}

type FederatedMavenRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedMavenRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedMavenRepositoryMember)(nil)).Elem()
}

func (o FederatedMavenRepositoryMemberOutput) ToFederatedMavenRepositoryMemberOutput() FederatedMavenRepositoryMemberOutput {
	return o
}

func (o FederatedMavenRepositoryMemberOutput) ToFederatedMavenRepositoryMemberOutputWithContext(ctx context.Context) FederatedMavenRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled
// status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedMavenRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedMavenRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name.
func (o FederatedMavenRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedMavenRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedMavenRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedMavenRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedMavenRepositoryMember)(nil)).Elem()
}

func (o FederatedMavenRepositoryMemberArrayOutput) ToFederatedMavenRepositoryMemberArrayOutput() FederatedMavenRepositoryMemberArrayOutput {
	return o
}

func (o FederatedMavenRepositoryMemberArrayOutput) ToFederatedMavenRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedMavenRepositoryMemberArrayOutput {
	return o
}

func (o FederatedMavenRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedMavenRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedMavenRepositoryMember {
		return vs[0].([]FederatedMavenRepositoryMember)[vs[1].(int)]
	}).(FederatedMavenRepositoryMemberOutput)
}

type FederatedNpmRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url string `pulumi:"url"`
}

// FederatedNpmRepositoryMemberInput is an input type that accepts FederatedNpmRepositoryMemberArgs and FederatedNpmRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedNpmRepositoryMemberInput` via:
//
//	FederatedNpmRepositoryMemberArgs{...}
type FederatedNpmRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedNpmRepositoryMemberOutput() FederatedNpmRepositoryMemberOutput
	ToFederatedNpmRepositoryMemberOutputWithContext(context.Context) FederatedNpmRepositoryMemberOutput
}

type FederatedNpmRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedNpmRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedNpmRepositoryMember)(nil)).Elem()
}

func (i FederatedNpmRepositoryMemberArgs) ToFederatedNpmRepositoryMemberOutput() FederatedNpmRepositoryMemberOutput {
	return i.ToFederatedNpmRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedNpmRepositoryMemberArgs) ToFederatedNpmRepositoryMemberOutputWithContext(ctx context.Context) FederatedNpmRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedNpmRepositoryMemberOutput)
}

// FederatedNpmRepositoryMemberArrayInput is an input type that accepts FederatedNpmRepositoryMemberArray and FederatedNpmRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedNpmRepositoryMemberArrayInput` via:
//
//	FederatedNpmRepositoryMemberArray{ FederatedNpmRepositoryMemberArgs{...} }
type FederatedNpmRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedNpmRepositoryMemberArrayOutput() FederatedNpmRepositoryMemberArrayOutput
	ToFederatedNpmRepositoryMemberArrayOutputWithContext(context.Context) FederatedNpmRepositoryMemberArrayOutput
}

type FederatedNpmRepositoryMemberArray []FederatedNpmRepositoryMemberInput

func (FederatedNpmRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedNpmRepositoryMember)(nil)).Elem()
}

func (i FederatedNpmRepositoryMemberArray) ToFederatedNpmRepositoryMemberArrayOutput() FederatedNpmRepositoryMemberArrayOutput {
	return i.ToFederatedNpmRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedNpmRepositoryMemberArray) ToFederatedNpmRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedNpmRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedNpmRepositoryMemberArrayOutput)
}

type FederatedNpmRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedNpmRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedNpmRepositoryMember)(nil)).Elem()
}

func (o FederatedNpmRepositoryMemberOutput) ToFederatedNpmRepositoryMemberOutput() FederatedNpmRepositoryMemberOutput {
	return o
}

func (o FederatedNpmRepositoryMemberOutput) ToFederatedNpmRepositoryMemberOutputWithContext(ctx context.Context) FederatedNpmRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled
// status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedNpmRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedNpmRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name.
func (o FederatedNpmRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedNpmRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedNpmRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedNpmRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedNpmRepositoryMember)(nil)).Elem()
}

func (o FederatedNpmRepositoryMemberArrayOutput) ToFederatedNpmRepositoryMemberArrayOutput() FederatedNpmRepositoryMemberArrayOutput {
	return o
}

func (o FederatedNpmRepositoryMemberArrayOutput) ToFederatedNpmRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedNpmRepositoryMemberArrayOutput {
	return o
}

func (o FederatedNpmRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedNpmRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedNpmRepositoryMember {
		return vs[0].([]FederatedNpmRepositoryMember)[vs[1].(int)]
	}).(FederatedNpmRepositoryMemberOutput)
}

type FederatedNugetRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url string `pulumi:"url"`
}

// FederatedNugetRepositoryMemberInput is an input type that accepts FederatedNugetRepositoryMemberArgs and FederatedNugetRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedNugetRepositoryMemberInput` via:
//
//	FederatedNugetRepositoryMemberArgs{...}
type FederatedNugetRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedNugetRepositoryMemberOutput() FederatedNugetRepositoryMemberOutput
	ToFederatedNugetRepositoryMemberOutputWithContext(context.Context) FederatedNugetRepositoryMemberOutput
}

type FederatedNugetRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedNugetRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedNugetRepositoryMember)(nil)).Elem()
}

func (i FederatedNugetRepositoryMemberArgs) ToFederatedNugetRepositoryMemberOutput() FederatedNugetRepositoryMemberOutput {
	return i.ToFederatedNugetRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedNugetRepositoryMemberArgs) ToFederatedNugetRepositoryMemberOutputWithContext(ctx context.Context) FederatedNugetRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedNugetRepositoryMemberOutput)
}

// FederatedNugetRepositoryMemberArrayInput is an input type that accepts FederatedNugetRepositoryMemberArray and FederatedNugetRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedNugetRepositoryMemberArrayInput` via:
//
//	FederatedNugetRepositoryMemberArray{ FederatedNugetRepositoryMemberArgs{...} }
type FederatedNugetRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedNugetRepositoryMemberArrayOutput() FederatedNugetRepositoryMemberArrayOutput
	ToFederatedNugetRepositoryMemberArrayOutputWithContext(context.Context) FederatedNugetRepositoryMemberArrayOutput
}

type FederatedNugetRepositoryMemberArray []FederatedNugetRepositoryMemberInput

func (FederatedNugetRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedNugetRepositoryMember)(nil)).Elem()
}

func (i FederatedNugetRepositoryMemberArray) ToFederatedNugetRepositoryMemberArrayOutput() FederatedNugetRepositoryMemberArrayOutput {
	return i.ToFederatedNugetRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedNugetRepositoryMemberArray) ToFederatedNugetRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedNugetRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedNugetRepositoryMemberArrayOutput)
}

type FederatedNugetRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedNugetRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedNugetRepositoryMember)(nil)).Elem()
}

func (o FederatedNugetRepositoryMemberOutput) ToFederatedNugetRepositoryMemberOutput() FederatedNugetRepositoryMemberOutput {
	return o
}

func (o FederatedNugetRepositoryMemberOutput) ToFederatedNugetRepositoryMemberOutputWithContext(ctx context.Context) FederatedNugetRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled
// status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedNugetRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedNugetRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name.
func (o FederatedNugetRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedNugetRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedNugetRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedNugetRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedNugetRepositoryMember)(nil)).Elem()
}

func (o FederatedNugetRepositoryMemberArrayOutput) ToFederatedNugetRepositoryMemberArrayOutput() FederatedNugetRepositoryMemberArrayOutput {
	return o
}

func (o FederatedNugetRepositoryMemberArrayOutput) ToFederatedNugetRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedNugetRepositoryMemberArrayOutput {
	return o
}

func (o FederatedNugetRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedNugetRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedNugetRepositoryMember {
		return vs[0].([]FederatedNugetRepositoryMember)[vs[1].(int)]
	}).(FederatedNugetRepositoryMemberOutput)
}

type FederatedOpkgRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url string `pulumi:"url"`
}

// FederatedOpkgRepositoryMemberInput is an input type that accepts FederatedOpkgRepositoryMemberArgs and FederatedOpkgRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedOpkgRepositoryMemberInput` via:
//
//	FederatedOpkgRepositoryMemberArgs{...}
type FederatedOpkgRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedOpkgRepositoryMemberOutput() FederatedOpkgRepositoryMemberOutput
	ToFederatedOpkgRepositoryMemberOutputWithContext(context.Context) FederatedOpkgRepositoryMemberOutput
}

type FederatedOpkgRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedOpkgRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedOpkgRepositoryMember)(nil)).Elem()
}

func (i FederatedOpkgRepositoryMemberArgs) ToFederatedOpkgRepositoryMemberOutput() FederatedOpkgRepositoryMemberOutput {
	return i.ToFederatedOpkgRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedOpkgRepositoryMemberArgs) ToFederatedOpkgRepositoryMemberOutputWithContext(ctx context.Context) FederatedOpkgRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedOpkgRepositoryMemberOutput)
}

// FederatedOpkgRepositoryMemberArrayInput is an input type that accepts FederatedOpkgRepositoryMemberArray and FederatedOpkgRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedOpkgRepositoryMemberArrayInput` via:
//
//	FederatedOpkgRepositoryMemberArray{ FederatedOpkgRepositoryMemberArgs{...} }
type FederatedOpkgRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedOpkgRepositoryMemberArrayOutput() FederatedOpkgRepositoryMemberArrayOutput
	ToFederatedOpkgRepositoryMemberArrayOutputWithContext(context.Context) FederatedOpkgRepositoryMemberArrayOutput
}

type FederatedOpkgRepositoryMemberArray []FederatedOpkgRepositoryMemberInput

func (FederatedOpkgRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedOpkgRepositoryMember)(nil)).Elem()
}

func (i FederatedOpkgRepositoryMemberArray) ToFederatedOpkgRepositoryMemberArrayOutput() FederatedOpkgRepositoryMemberArrayOutput {
	return i.ToFederatedOpkgRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedOpkgRepositoryMemberArray) ToFederatedOpkgRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedOpkgRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedOpkgRepositoryMemberArrayOutput)
}

type FederatedOpkgRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedOpkgRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedOpkgRepositoryMember)(nil)).Elem()
}

func (o FederatedOpkgRepositoryMemberOutput) ToFederatedOpkgRepositoryMemberOutput() FederatedOpkgRepositoryMemberOutput {
	return o
}

func (o FederatedOpkgRepositoryMemberOutput) ToFederatedOpkgRepositoryMemberOutputWithContext(ctx context.Context) FederatedOpkgRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled
// status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedOpkgRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedOpkgRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name.
func (o FederatedOpkgRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedOpkgRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedOpkgRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedOpkgRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedOpkgRepositoryMember)(nil)).Elem()
}

func (o FederatedOpkgRepositoryMemberArrayOutput) ToFederatedOpkgRepositoryMemberArrayOutput() FederatedOpkgRepositoryMemberArrayOutput {
	return o
}

func (o FederatedOpkgRepositoryMemberArrayOutput) ToFederatedOpkgRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedOpkgRepositoryMemberArrayOutput {
	return o
}

func (o FederatedOpkgRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedOpkgRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedOpkgRepositoryMember {
		return vs[0].([]FederatedOpkgRepositoryMember)[vs[1].(int)]
	}).(FederatedOpkgRepositoryMemberOutput)
}

type FederatedPuppetRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url string `pulumi:"url"`
}

// FederatedPuppetRepositoryMemberInput is an input type that accepts FederatedPuppetRepositoryMemberArgs and FederatedPuppetRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedPuppetRepositoryMemberInput` via:
//
//	FederatedPuppetRepositoryMemberArgs{...}
type FederatedPuppetRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedPuppetRepositoryMemberOutput() FederatedPuppetRepositoryMemberOutput
	ToFederatedPuppetRepositoryMemberOutputWithContext(context.Context) FederatedPuppetRepositoryMemberOutput
}

type FederatedPuppetRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedPuppetRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedPuppetRepositoryMember)(nil)).Elem()
}

func (i FederatedPuppetRepositoryMemberArgs) ToFederatedPuppetRepositoryMemberOutput() FederatedPuppetRepositoryMemberOutput {
	return i.ToFederatedPuppetRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedPuppetRepositoryMemberArgs) ToFederatedPuppetRepositoryMemberOutputWithContext(ctx context.Context) FederatedPuppetRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedPuppetRepositoryMemberOutput)
}

// FederatedPuppetRepositoryMemberArrayInput is an input type that accepts FederatedPuppetRepositoryMemberArray and FederatedPuppetRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedPuppetRepositoryMemberArrayInput` via:
//
//	FederatedPuppetRepositoryMemberArray{ FederatedPuppetRepositoryMemberArgs{...} }
type FederatedPuppetRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedPuppetRepositoryMemberArrayOutput() FederatedPuppetRepositoryMemberArrayOutput
	ToFederatedPuppetRepositoryMemberArrayOutputWithContext(context.Context) FederatedPuppetRepositoryMemberArrayOutput
}

type FederatedPuppetRepositoryMemberArray []FederatedPuppetRepositoryMemberInput

func (FederatedPuppetRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedPuppetRepositoryMember)(nil)).Elem()
}

func (i FederatedPuppetRepositoryMemberArray) ToFederatedPuppetRepositoryMemberArrayOutput() FederatedPuppetRepositoryMemberArrayOutput {
	return i.ToFederatedPuppetRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedPuppetRepositoryMemberArray) ToFederatedPuppetRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedPuppetRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedPuppetRepositoryMemberArrayOutput)
}

type FederatedPuppetRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedPuppetRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedPuppetRepositoryMember)(nil)).Elem()
}

func (o FederatedPuppetRepositoryMemberOutput) ToFederatedPuppetRepositoryMemberOutput() FederatedPuppetRepositoryMemberOutput {
	return o
}

func (o FederatedPuppetRepositoryMemberOutput) ToFederatedPuppetRepositoryMemberOutputWithContext(ctx context.Context) FederatedPuppetRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled
// status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedPuppetRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedPuppetRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name.
func (o FederatedPuppetRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedPuppetRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedPuppetRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedPuppetRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedPuppetRepositoryMember)(nil)).Elem()
}

func (o FederatedPuppetRepositoryMemberArrayOutput) ToFederatedPuppetRepositoryMemberArrayOutput() FederatedPuppetRepositoryMemberArrayOutput {
	return o
}

func (o FederatedPuppetRepositoryMemberArrayOutput) ToFederatedPuppetRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedPuppetRepositoryMemberArrayOutput {
	return o
}

func (o FederatedPuppetRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedPuppetRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedPuppetRepositoryMember {
		return vs[0].([]FederatedPuppetRepositoryMember)[vs[1].(int)]
	}).(FederatedPuppetRepositoryMemberOutput)
}

type FederatedPypiRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url string `pulumi:"url"`
}

// FederatedPypiRepositoryMemberInput is an input type that accepts FederatedPypiRepositoryMemberArgs and FederatedPypiRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedPypiRepositoryMemberInput` via:
//
//	FederatedPypiRepositoryMemberArgs{...}
type FederatedPypiRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedPypiRepositoryMemberOutput() FederatedPypiRepositoryMemberOutput
	ToFederatedPypiRepositoryMemberOutputWithContext(context.Context) FederatedPypiRepositoryMemberOutput
}

type FederatedPypiRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedPypiRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedPypiRepositoryMember)(nil)).Elem()
}

func (i FederatedPypiRepositoryMemberArgs) ToFederatedPypiRepositoryMemberOutput() FederatedPypiRepositoryMemberOutput {
	return i.ToFederatedPypiRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedPypiRepositoryMemberArgs) ToFederatedPypiRepositoryMemberOutputWithContext(ctx context.Context) FederatedPypiRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedPypiRepositoryMemberOutput)
}

// FederatedPypiRepositoryMemberArrayInput is an input type that accepts FederatedPypiRepositoryMemberArray and FederatedPypiRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedPypiRepositoryMemberArrayInput` via:
//
//	FederatedPypiRepositoryMemberArray{ FederatedPypiRepositoryMemberArgs{...} }
type FederatedPypiRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedPypiRepositoryMemberArrayOutput() FederatedPypiRepositoryMemberArrayOutput
	ToFederatedPypiRepositoryMemberArrayOutputWithContext(context.Context) FederatedPypiRepositoryMemberArrayOutput
}

type FederatedPypiRepositoryMemberArray []FederatedPypiRepositoryMemberInput

func (FederatedPypiRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedPypiRepositoryMember)(nil)).Elem()
}

func (i FederatedPypiRepositoryMemberArray) ToFederatedPypiRepositoryMemberArrayOutput() FederatedPypiRepositoryMemberArrayOutput {
	return i.ToFederatedPypiRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedPypiRepositoryMemberArray) ToFederatedPypiRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedPypiRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedPypiRepositoryMemberArrayOutput)
}

type FederatedPypiRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedPypiRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedPypiRepositoryMember)(nil)).Elem()
}

func (o FederatedPypiRepositoryMemberOutput) ToFederatedPypiRepositoryMemberOutput() FederatedPypiRepositoryMemberOutput {
	return o
}

func (o FederatedPypiRepositoryMemberOutput) ToFederatedPypiRepositoryMemberOutputWithContext(ctx context.Context) FederatedPypiRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled
// status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedPypiRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedPypiRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name.
func (o FederatedPypiRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedPypiRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedPypiRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedPypiRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedPypiRepositoryMember)(nil)).Elem()
}

func (o FederatedPypiRepositoryMemberArrayOutput) ToFederatedPypiRepositoryMemberArrayOutput() FederatedPypiRepositoryMemberArrayOutput {
	return o
}

func (o FederatedPypiRepositoryMemberArrayOutput) ToFederatedPypiRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedPypiRepositoryMemberArrayOutput {
	return o
}

func (o FederatedPypiRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedPypiRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedPypiRepositoryMember {
		return vs[0].([]FederatedPypiRepositoryMember)[vs[1].(int)]
	}).(FederatedPypiRepositoryMemberOutput)
}

type FederatedRpmRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url string `pulumi:"url"`
}

// FederatedRpmRepositoryMemberInput is an input type that accepts FederatedRpmRepositoryMemberArgs and FederatedRpmRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedRpmRepositoryMemberInput` via:
//
//	FederatedRpmRepositoryMemberArgs{...}
type FederatedRpmRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedRpmRepositoryMemberOutput() FederatedRpmRepositoryMemberOutput
	ToFederatedRpmRepositoryMemberOutputWithContext(context.Context) FederatedRpmRepositoryMemberOutput
}

type FederatedRpmRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedRpmRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedRpmRepositoryMember)(nil)).Elem()
}

func (i FederatedRpmRepositoryMemberArgs) ToFederatedRpmRepositoryMemberOutput() FederatedRpmRepositoryMemberOutput {
	return i.ToFederatedRpmRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedRpmRepositoryMemberArgs) ToFederatedRpmRepositoryMemberOutputWithContext(ctx context.Context) FederatedRpmRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedRpmRepositoryMemberOutput)
}

// FederatedRpmRepositoryMemberArrayInput is an input type that accepts FederatedRpmRepositoryMemberArray and FederatedRpmRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedRpmRepositoryMemberArrayInput` via:
//
//	FederatedRpmRepositoryMemberArray{ FederatedRpmRepositoryMemberArgs{...} }
type FederatedRpmRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedRpmRepositoryMemberArrayOutput() FederatedRpmRepositoryMemberArrayOutput
	ToFederatedRpmRepositoryMemberArrayOutputWithContext(context.Context) FederatedRpmRepositoryMemberArrayOutput
}

type FederatedRpmRepositoryMemberArray []FederatedRpmRepositoryMemberInput

func (FederatedRpmRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedRpmRepositoryMember)(nil)).Elem()
}

func (i FederatedRpmRepositoryMemberArray) ToFederatedRpmRepositoryMemberArrayOutput() FederatedRpmRepositoryMemberArrayOutput {
	return i.ToFederatedRpmRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedRpmRepositoryMemberArray) ToFederatedRpmRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedRpmRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedRpmRepositoryMemberArrayOutput)
}

type FederatedRpmRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedRpmRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedRpmRepositoryMember)(nil)).Elem()
}

func (o FederatedRpmRepositoryMemberOutput) ToFederatedRpmRepositoryMemberOutput() FederatedRpmRepositoryMemberOutput {
	return o
}

func (o FederatedRpmRepositoryMemberOutput) ToFederatedRpmRepositoryMemberOutputWithContext(ctx context.Context) FederatedRpmRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled
// status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedRpmRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedRpmRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name.
func (o FederatedRpmRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedRpmRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedRpmRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedRpmRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedRpmRepositoryMember)(nil)).Elem()
}

func (o FederatedRpmRepositoryMemberArrayOutput) ToFederatedRpmRepositoryMemberArrayOutput() FederatedRpmRepositoryMemberArrayOutput {
	return o
}

func (o FederatedRpmRepositoryMemberArrayOutput) ToFederatedRpmRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedRpmRepositoryMemberArrayOutput {
	return o
}

func (o FederatedRpmRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedRpmRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedRpmRepositoryMember {
		return vs[0].([]FederatedRpmRepositoryMember)[vs[1].(int)]
	}).(FederatedRpmRepositoryMemberOutput)
}

type FederatedSbtRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url string `pulumi:"url"`
}

// FederatedSbtRepositoryMemberInput is an input type that accepts FederatedSbtRepositoryMemberArgs and FederatedSbtRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedSbtRepositoryMemberInput` via:
//
//	FederatedSbtRepositoryMemberArgs{...}
type FederatedSbtRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedSbtRepositoryMemberOutput() FederatedSbtRepositoryMemberOutput
	ToFederatedSbtRepositoryMemberOutputWithContext(context.Context) FederatedSbtRepositoryMemberOutput
}

type FederatedSbtRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedSbtRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedSbtRepositoryMember)(nil)).Elem()
}

func (i FederatedSbtRepositoryMemberArgs) ToFederatedSbtRepositoryMemberOutput() FederatedSbtRepositoryMemberOutput {
	return i.ToFederatedSbtRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedSbtRepositoryMemberArgs) ToFederatedSbtRepositoryMemberOutputWithContext(ctx context.Context) FederatedSbtRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedSbtRepositoryMemberOutput)
}

// FederatedSbtRepositoryMemberArrayInput is an input type that accepts FederatedSbtRepositoryMemberArray and FederatedSbtRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedSbtRepositoryMemberArrayInput` via:
//
//	FederatedSbtRepositoryMemberArray{ FederatedSbtRepositoryMemberArgs{...} }
type FederatedSbtRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedSbtRepositoryMemberArrayOutput() FederatedSbtRepositoryMemberArrayOutput
	ToFederatedSbtRepositoryMemberArrayOutputWithContext(context.Context) FederatedSbtRepositoryMemberArrayOutput
}

type FederatedSbtRepositoryMemberArray []FederatedSbtRepositoryMemberInput

func (FederatedSbtRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedSbtRepositoryMember)(nil)).Elem()
}

func (i FederatedSbtRepositoryMemberArray) ToFederatedSbtRepositoryMemberArrayOutput() FederatedSbtRepositoryMemberArrayOutput {
	return i.ToFederatedSbtRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedSbtRepositoryMemberArray) ToFederatedSbtRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedSbtRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedSbtRepositoryMemberArrayOutput)
}

type FederatedSbtRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedSbtRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedSbtRepositoryMember)(nil)).Elem()
}

func (o FederatedSbtRepositoryMemberOutput) ToFederatedSbtRepositoryMemberOutput() FederatedSbtRepositoryMemberOutput {
	return o
}

func (o FederatedSbtRepositoryMemberOutput) ToFederatedSbtRepositoryMemberOutputWithContext(ctx context.Context) FederatedSbtRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled
// status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedSbtRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedSbtRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name.
func (o FederatedSbtRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedSbtRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedSbtRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedSbtRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedSbtRepositoryMember)(nil)).Elem()
}

func (o FederatedSbtRepositoryMemberArrayOutput) ToFederatedSbtRepositoryMemberArrayOutput() FederatedSbtRepositoryMemberArrayOutput {
	return o
}

func (o FederatedSbtRepositoryMemberArrayOutput) ToFederatedSbtRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedSbtRepositoryMemberArrayOutput {
	return o
}

func (o FederatedSbtRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedSbtRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedSbtRepositoryMember {
		return vs[0].([]FederatedSbtRepositoryMember)[vs[1].(int)]
	}).(FederatedSbtRepositoryMemberOutput)
}

type FederatedSwiftRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url string `pulumi:"url"`
}

// FederatedSwiftRepositoryMemberInput is an input type that accepts FederatedSwiftRepositoryMemberArgs and FederatedSwiftRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedSwiftRepositoryMemberInput` via:
//
//	FederatedSwiftRepositoryMemberArgs{...}
type FederatedSwiftRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedSwiftRepositoryMemberOutput() FederatedSwiftRepositoryMemberOutput
	ToFederatedSwiftRepositoryMemberOutputWithContext(context.Context) FederatedSwiftRepositoryMemberOutput
}

type FederatedSwiftRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedSwiftRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedSwiftRepositoryMember)(nil)).Elem()
}

func (i FederatedSwiftRepositoryMemberArgs) ToFederatedSwiftRepositoryMemberOutput() FederatedSwiftRepositoryMemberOutput {
	return i.ToFederatedSwiftRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedSwiftRepositoryMemberArgs) ToFederatedSwiftRepositoryMemberOutputWithContext(ctx context.Context) FederatedSwiftRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedSwiftRepositoryMemberOutput)
}

// FederatedSwiftRepositoryMemberArrayInput is an input type that accepts FederatedSwiftRepositoryMemberArray and FederatedSwiftRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedSwiftRepositoryMemberArrayInput` via:
//
//	FederatedSwiftRepositoryMemberArray{ FederatedSwiftRepositoryMemberArgs{...} }
type FederatedSwiftRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedSwiftRepositoryMemberArrayOutput() FederatedSwiftRepositoryMemberArrayOutput
	ToFederatedSwiftRepositoryMemberArrayOutputWithContext(context.Context) FederatedSwiftRepositoryMemberArrayOutput
}

type FederatedSwiftRepositoryMemberArray []FederatedSwiftRepositoryMemberInput

func (FederatedSwiftRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedSwiftRepositoryMember)(nil)).Elem()
}

func (i FederatedSwiftRepositoryMemberArray) ToFederatedSwiftRepositoryMemberArrayOutput() FederatedSwiftRepositoryMemberArrayOutput {
	return i.ToFederatedSwiftRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedSwiftRepositoryMemberArray) ToFederatedSwiftRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedSwiftRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedSwiftRepositoryMemberArrayOutput)
}

type FederatedSwiftRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedSwiftRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedSwiftRepositoryMember)(nil)).Elem()
}

func (o FederatedSwiftRepositoryMemberOutput) ToFederatedSwiftRepositoryMemberOutput() FederatedSwiftRepositoryMemberOutput {
	return o
}

func (o FederatedSwiftRepositoryMemberOutput) ToFederatedSwiftRepositoryMemberOutputWithContext(ctx context.Context) FederatedSwiftRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled
// status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedSwiftRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedSwiftRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name.
func (o FederatedSwiftRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedSwiftRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedSwiftRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedSwiftRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedSwiftRepositoryMember)(nil)).Elem()
}

func (o FederatedSwiftRepositoryMemberArrayOutput) ToFederatedSwiftRepositoryMemberArrayOutput() FederatedSwiftRepositoryMemberArrayOutput {
	return o
}

func (o FederatedSwiftRepositoryMemberArrayOutput) ToFederatedSwiftRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedSwiftRepositoryMemberArrayOutput {
	return o
}

func (o FederatedSwiftRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedSwiftRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedSwiftRepositoryMember {
		return vs[0].([]FederatedSwiftRepositoryMember)[vs[1].(int)]
	}).(FederatedSwiftRepositoryMemberOutput)
}

type FederatedTerraformModuleRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url string `pulumi:"url"`
}

// FederatedTerraformModuleRepositoryMemberInput is an input type that accepts FederatedTerraformModuleRepositoryMemberArgs and FederatedTerraformModuleRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedTerraformModuleRepositoryMemberInput` via:
//
//	FederatedTerraformModuleRepositoryMemberArgs{...}
type FederatedTerraformModuleRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedTerraformModuleRepositoryMemberOutput() FederatedTerraformModuleRepositoryMemberOutput
	ToFederatedTerraformModuleRepositoryMemberOutputWithContext(context.Context) FederatedTerraformModuleRepositoryMemberOutput
}

type FederatedTerraformModuleRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedTerraformModuleRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedTerraformModuleRepositoryMember)(nil)).Elem()
}

func (i FederatedTerraformModuleRepositoryMemberArgs) ToFederatedTerraformModuleRepositoryMemberOutput() FederatedTerraformModuleRepositoryMemberOutput {
	return i.ToFederatedTerraformModuleRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedTerraformModuleRepositoryMemberArgs) ToFederatedTerraformModuleRepositoryMemberOutputWithContext(ctx context.Context) FederatedTerraformModuleRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedTerraformModuleRepositoryMemberOutput)
}

// FederatedTerraformModuleRepositoryMemberArrayInput is an input type that accepts FederatedTerraformModuleRepositoryMemberArray and FederatedTerraformModuleRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedTerraformModuleRepositoryMemberArrayInput` via:
//
//	FederatedTerraformModuleRepositoryMemberArray{ FederatedTerraformModuleRepositoryMemberArgs{...} }
type FederatedTerraformModuleRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedTerraformModuleRepositoryMemberArrayOutput() FederatedTerraformModuleRepositoryMemberArrayOutput
	ToFederatedTerraformModuleRepositoryMemberArrayOutputWithContext(context.Context) FederatedTerraformModuleRepositoryMemberArrayOutput
}

type FederatedTerraformModuleRepositoryMemberArray []FederatedTerraformModuleRepositoryMemberInput

func (FederatedTerraformModuleRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedTerraformModuleRepositoryMember)(nil)).Elem()
}

func (i FederatedTerraformModuleRepositoryMemberArray) ToFederatedTerraformModuleRepositoryMemberArrayOutput() FederatedTerraformModuleRepositoryMemberArrayOutput {
	return i.ToFederatedTerraformModuleRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedTerraformModuleRepositoryMemberArray) ToFederatedTerraformModuleRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedTerraformModuleRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedTerraformModuleRepositoryMemberArrayOutput)
}

type FederatedTerraformModuleRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedTerraformModuleRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedTerraformModuleRepositoryMember)(nil)).Elem()
}

func (o FederatedTerraformModuleRepositoryMemberOutput) ToFederatedTerraformModuleRepositoryMemberOutput() FederatedTerraformModuleRepositoryMemberOutput {
	return o
}

func (o FederatedTerraformModuleRepositoryMemberOutput) ToFederatedTerraformModuleRepositoryMemberOutputWithContext(ctx context.Context) FederatedTerraformModuleRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled
// status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedTerraformModuleRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedTerraformModuleRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name.
func (o FederatedTerraformModuleRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedTerraformModuleRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedTerraformModuleRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedTerraformModuleRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedTerraformModuleRepositoryMember)(nil)).Elem()
}

func (o FederatedTerraformModuleRepositoryMemberArrayOutput) ToFederatedTerraformModuleRepositoryMemberArrayOutput() FederatedTerraformModuleRepositoryMemberArrayOutput {
	return o
}

func (o FederatedTerraformModuleRepositoryMemberArrayOutput) ToFederatedTerraformModuleRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedTerraformModuleRepositoryMemberArrayOutput {
	return o
}

func (o FederatedTerraformModuleRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedTerraformModuleRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedTerraformModuleRepositoryMember {
		return vs[0].([]FederatedTerraformModuleRepositoryMember)[vs[1].(int)]
	}).(FederatedTerraformModuleRepositoryMemberOutput)
}

type FederatedTerraformProviderRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url string `pulumi:"url"`
}

// FederatedTerraformProviderRepositoryMemberInput is an input type that accepts FederatedTerraformProviderRepositoryMemberArgs and FederatedTerraformProviderRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedTerraformProviderRepositoryMemberInput` via:
//
//	FederatedTerraformProviderRepositoryMemberArgs{...}
type FederatedTerraformProviderRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedTerraformProviderRepositoryMemberOutput() FederatedTerraformProviderRepositoryMemberOutput
	ToFederatedTerraformProviderRepositoryMemberOutputWithContext(context.Context) FederatedTerraformProviderRepositoryMemberOutput
}

type FederatedTerraformProviderRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedTerraformProviderRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedTerraformProviderRepositoryMember)(nil)).Elem()
}

func (i FederatedTerraformProviderRepositoryMemberArgs) ToFederatedTerraformProviderRepositoryMemberOutput() FederatedTerraformProviderRepositoryMemberOutput {
	return i.ToFederatedTerraformProviderRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedTerraformProviderRepositoryMemberArgs) ToFederatedTerraformProviderRepositoryMemberOutputWithContext(ctx context.Context) FederatedTerraformProviderRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedTerraformProviderRepositoryMemberOutput)
}

// FederatedTerraformProviderRepositoryMemberArrayInput is an input type that accepts FederatedTerraformProviderRepositoryMemberArray and FederatedTerraformProviderRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedTerraformProviderRepositoryMemberArrayInput` via:
//
//	FederatedTerraformProviderRepositoryMemberArray{ FederatedTerraformProviderRepositoryMemberArgs{...} }
type FederatedTerraformProviderRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedTerraformProviderRepositoryMemberArrayOutput() FederatedTerraformProviderRepositoryMemberArrayOutput
	ToFederatedTerraformProviderRepositoryMemberArrayOutputWithContext(context.Context) FederatedTerraformProviderRepositoryMemberArrayOutput
}

type FederatedTerraformProviderRepositoryMemberArray []FederatedTerraformProviderRepositoryMemberInput

func (FederatedTerraformProviderRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedTerraformProviderRepositoryMember)(nil)).Elem()
}

func (i FederatedTerraformProviderRepositoryMemberArray) ToFederatedTerraformProviderRepositoryMemberArrayOutput() FederatedTerraformProviderRepositoryMemberArrayOutput {
	return i.ToFederatedTerraformProviderRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedTerraformProviderRepositoryMemberArray) ToFederatedTerraformProviderRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedTerraformProviderRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedTerraformProviderRepositoryMemberArrayOutput)
}

type FederatedTerraformProviderRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedTerraformProviderRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedTerraformProviderRepositoryMember)(nil)).Elem()
}

func (o FederatedTerraformProviderRepositoryMemberOutput) ToFederatedTerraformProviderRepositoryMemberOutput() FederatedTerraformProviderRepositoryMemberOutput {
	return o
}

func (o FederatedTerraformProviderRepositoryMemberOutput) ToFederatedTerraformProviderRepositoryMemberOutputWithContext(ctx context.Context) FederatedTerraformProviderRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled
// status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedTerraformProviderRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedTerraformProviderRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name.
func (o FederatedTerraformProviderRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedTerraformProviderRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedTerraformProviderRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedTerraformProviderRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedTerraformProviderRepositoryMember)(nil)).Elem()
}

func (o FederatedTerraformProviderRepositoryMemberArrayOutput) ToFederatedTerraformProviderRepositoryMemberArrayOutput() FederatedTerraformProviderRepositoryMemberArrayOutput {
	return o
}

func (o FederatedTerraformProviderRepositoryMemberArrayOutput) ToFederatedTerraformProviderRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedTerraformProviderRepositoryMemberArrayOutput {
	return o
}

func (o FederatedTerraformProviderRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedTerraformProviderRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedTerraformProviderRepositoryMember {
		return vs[0].([]FederatedTerraformProviderRepositoryMember)[vs[1].(int)]
	}).(FederatedTerraformProviderRepositoryMemberOutput)
}

type FederatedVagrantRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url string `pulumi:"url"`
}

// FederatedVagrantRepositoryMemberInput is an input type that accepts FederatedVagrantRepositoryMemberArgs and FederatedVagrantRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedVagrantRepositoryMemberInput` via:
//
//	FederatedVagrantRepositoryMemberArgs{...}
type FederatedVagrantRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedVagrantRepositoryMemberOutput() FederatedVagrantRepositoryMemberOutput
	ToFederatedVagrantRepositoryMemberOutputWithContext(context.Context) FederatedVagrantRepositoryMemberOutput
}

type FederatedVagrantRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled
	// status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name.
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedVagrantRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedVagrantRepositoryMember)(nil)).Elem()
}

func (i FederatedVagrantRepositoryMemberArgs) ToFederatedVagrantRepositoryMemberOutput() FederatedVagrantRepositoryMemberOutput {
	return i.ToFederatedVagrantRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedVagrantRepositoryMemberArgs) ToFederatedVagrantRepositoryMemberOutputWithContext(ctx context.Context) FederatedVagrantRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedVagrantRepositoryMemberOutput)
}

// FederatedVagrantRepositoryMemberArrayInput is an input type that accepts FederatedVagrantRepositoryMemberArray and FederatedVagrantRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedVagrantRepositoryMemberArrayInput` via:
//
//	FederatedVagrantRepositoryMemberArray{ FederatedVagrantRepositoryMemberArgs{...} }
type FederatedVagrantRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedVagrantRepositoryMemberArrayOutput() FederatedVagrantRepositoryMemberArrayOutput
	ToFederatedVagrantRepositoryMemberArrayOutputWithContext(context.Context) FederatedVagrantRepositoryMemberArrayOutput
}

type FederatedVagrantRepositoryMemberArray []FederatedVagrantRepositoryMemberInput

func (FederatedVagrantRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedVagrantRepositoryMember)(nil)).Elem()
}

func (i FederatedVagrantRepositoryMemberArray) ToFederatedVagrantRepositoryMemberArrayOutput() FederatedVagrantRepositoryMemberArrayOutput {
	return i.ToFederatedVagrantRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedVagrantRepositoryMemberArray) ToFederatedVagrantRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedVagrantRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedVagrantRepositoryMemberArrayOutput)
}

type FederatedVagrantRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedVagrantRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedVagrantRepositoryMember)(nil)).Elem()
}

func (o FederatedVagrantRepositoryMemberOutput) ToFederatedVagrantRepositoryMemberOutput() FederatedVagrantRepositoryMemberOutput {
	return o
}

func (o FederatedVagrantRepositoryMemberOutput) ToFederatedVagrantRepositoryMemberOutputWithContext(ctx context.Context) FederatedVagrantRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled
// status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedVagrantRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedVagrantRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name.
func (o FederatedVagrantRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedVagrantRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedVagrantRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedVagrantRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedVagrantRepositoryMember)(nil)).Elem()
}

func (o FederatedVagrantRepositoryMemberArrayOutput) ToFederatedVagrantRepositoryMemberArrayOutput() FederatedVagrantRepositoryMemberArrayOutput {
	return o
}

func (o FederatedVagrantRepositoryMemberArrayOutput) ToFederatedVagrantRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedVagrantRepositoryMemberArrayOutput {
	return o
}

func (o FederatedVagrantRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedVagrantRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedVagrantRepositoryMember {
		return vs[0].([]FederatedVagrantRepositoryMember)[vs[1].(int)]
	}).(FederatedVagrantRepositoryMemberOutput)
}

type OauthSettingsOauthProvider struct {
	// OAuth user info endpoint for the IdP.
	ApiUrl string `pulumi:"apiUrl"`
	// OAuth authorization endpoint for the IdP.
	AuthUrl string `pulumi:"authUrl"`
	// OAuth client ID configured on the IdP.
	ClientId string `pulumi:"clientId"`
	// OAuth client secret configured on the IdP.
	ClientSecret string `pulumi:"clientSecret"`
	// Enable the Artifactory OAuth provider.  Default value is `true`.
	Enabled *bool `pulumi:"enabled"`
	// Name of the Artifactory OAuth provider.
	Name string `pulumi:"name"`
	// OAuth token endpoint for the IdP.
	TokenUrl string `pulumi:"tokenUrl"`
	// Type of OAuth provider. (e.g., `github`, `google`, `cloudfoundry`, or `openId`)
	Type string `pulumi:"type"`
}

// OauthSettingsOauthProviderInput is an input type that accepts OauthSettingsOauthProviderArgs and OauthSettingsOauthProviderOutput values.
// You can construct a concrete instance of `OauthSettingsOauthProviderInput` via:
//
//	OauthSettingsOauthProviderArgs{...}
type OauthSettingsOauthProviderInput interface {
	pulumi.Input

	ToOauthSettingsOauthProviderOutput() OauthSettingsOauthProviderOutput
	ToOauthSettingsOauthProviderOutputWithContext(context.Context) OauthSettingsOauthProviderOutput
}

type OauthSettingsOauthProviderArgs struct {
	// OAuth user info endpoint for the IdP.
	ApiUrl pulumi.StringInput `pulumi:"apiUrl"`
	// OAuth authorization endpoint for the IdP.
	AuthUrl pulumi.StringInput `pulumi:"authUrl"`
	// OAuth client ID configured on the IdP.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// OAuth client secret configured on the IdP.
	ClientSecret pulumi.StringInput `pulumi:"clientSecret"`
	// Enable the Artifactory OAuth provider.  Default value is `true`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Name of the Artifactory OAuth provider.
	Name pulumi.StringInput `pulumi:"name"`
	// OAuth token endpoint for the IdP.
	TokenUrl pulumi.StringInput `pulumi:"tokenUrl"`
	// Type of OAuth provider. (e.g., `github`, `google`, `cloudfoundry`, or `openId`)
	Type pulumi.StringInput `pulumi:"type"`
}

func (OauthSettingsOauthProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OauthSettingsOauthProvider)(nil)).Elem()
}

func (i OauthSettingsOauthProviderArgs) ToOauthSettingsOauthProviderOutput() OauthSettingsOauthProviderOutput {
	return i.ToOauthSettingsOauthProviderOutputWithContext(context.Background())
}

func (i OauthSettingsOauthProviderArgs) ToOauthSettingsOauthProviderOutputWithContext(ctx context.Context) OauthSettingsOauthProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OauthSettingsOauthProviderOutput)
}

// OauthSettingsOauthProviderArrayInput is an input type that accepts OauthSettingsOauthProviderArray and OauthSettingsOauthProviderArrayOutput values.
// You can construct a concrete instance of `OauthSettingsOauthProviderArrayInput` via:
//
//	OauthSettingsOauthProviderArray{ OauthSettingsOauthProviderArgs{...} }
type OauthSettingsOauthProviderArrayInput interface {
	pulumi.Input

	ToOauthSettingsOauthProviderArrayOutput() OauthSettingsOauthProviderArrayOutput
	ToOauthSettingsOauthProviderArrayOutputWithContext(context.Context) OauthSettingsOauthProviderArrayOutput
}

type OauthSettingsOauthProviderArray []OauthSettingsOauthProviderInput

func (OauthSettingsOauthProviderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OauthSettingsOauthProvider)(nil)).Elem()
}

func (i OauthSettingsOauthProviderArray) ToOauthSettingsOauthProviderArrayOutput() OauthSettingsOauthProviderArrayOutput {
	return i.ToOauthSettingsOauthProviderArrayOutputWithContext(context.Background())
}

func (i OauthSettingsOauthProviderArray) ToOauthSettingsOauthProviderArrayOutputWithContext(ctx context.Context) OauthSettingsOauthProviderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OauthSettingsOauthProviderArrayOutput)
}

type OauthSettingsOauthProviderOutput struct{ *pulumi.OutputState }

func (OauthSettingsOauthProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OauthSettingsOauthProvider)(nil)).Elem()
}

func (o OauthSettingsOauthProviderOutput) ToOauthSettingsOauthProviderOutput() OauthSettingsOauthProviderOutput {
	return o
}

func (o OauthSettingsOauthProviderOutput) ToOauthSettingsOauthProviderOutputWithContext(ctx context.Context) OauthSettingsOauthProviderOutput {
	return o
}

// OAuth user info endpoint for the IdP.
func (o OauthSettingsOauthProviderOutput) ApiUrl() pulumi.StringOutput {
	return o.ApplyT(func(v OauthSettingsOauthProvider) string { return v.ApiUrl }).(pulumi.StringOutput)
}

// OAuth authorization endpoint for the IdP.
func (o OauthSettingsOauthProviderOutput) AuthUrl() pulumi.StringOutput {
	return o.ApplyT(func(v OauthSettingsOauthProvider) string { return v.AuthUrl }).(pulumi.StringOutput)
}

// OAuth client ID configured on the IdP.
func (o OauthSettingsOauthProviderOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v OauthSettingsOauthProvider) string { return v.ClientId }).(pulumi.StringOutput)
}

// OAuth client secret configured on the IdP.
func (o OauthSettingsOauthProviderOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v OauthSettingsOauthProvider) string { return v.ClientSecret }).(pulumi.StringOutput)
}

// Enable the Artifactory OAuth provider.  Default value is `true`.
func (o OauthSettingsOauthProviderOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OauthSettingsOauthProvider) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the Artifactory OAuth provider.
func (o OauthSettingsOauthProviderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OauthSettingsOauthProvider) string { return v.Name }).(pulumi.StringOutput)
}

// OAuth token endpoint for the IdP.
func (o OauthSettingsOauthProviderOutput) TokenUrl() pulumi.StringOutput {
	return o.ApplyT(func(v OauthSettingsOauthProvider) string { return v.TokenUrl }).(pulumi.StringOutput)
}

// Type of OAuth provider. (e.g., `github`, `google`, `cloudfoundry`, or `openId`)
func (o OauthSettingsOauthProviderOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OauthSettingsOauthProvider) string { return v.Type }).(pulumi.StringOutput)
}

type OauthSettingsOauthProviderArrayOutput struct{ *pulumi.OutputState }

func (OauthSettingsOauthProviderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OauthSettingsOauthProvider)(nil)).Elem()
}

func (o OauthSettingsOauthProviderArrayOutput) ToOauthSettingsOauthProviderArrayOutput() OauthSettingsOauthProviderArrayOutput {
	return o
}

func (o OauthSettingsOauthProviderArrayOutput) ToOauthSettingsOauthProviderArrayOutputWithContext(ctx context.Context) OauthSettingsOauthProviderArrayOutput {
	return o
}

func (o OauthSettingsOauthProviderArrayOutput) Index(i pulumi.IntInput) OauthSettingsOauthProviderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OauthSettingsOauthProvider {
		return vs[0].([]OauthSettingsOauthProvider)[vs[1].(int)]
	}).(OauthSettingsOauthProviderOutput)
}

type PermissionTargetBuild struct {
	Actions *PermissionTargetBuildActions `pulumi:"actions"`
	// Pattern of artifacts to exclude.
	ExcludesPatterns []string `pulumi:"excludesPatterns"`
	// Pattern of artifacts to include.
	IncludesPatterns []string `pulumi:"includesPatterns"`
	// List of repositories this permission target is applicable for. You can specify the name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
	Repositories []string `pulumi:"repositories"`
}

// PermissionTargetBuildInput is an input type that accepts PermissionTargetBuildArgs and PermissionTargetBuildOutput values.
// You can construct a concrete instance of `PermissionTargetBuildInput` via:
//
//	PermissionTargetBuildArgs{...}
type PermissionTargetBuildInput interface {
	pulumi.Input

	ToPermissionTargetBuildOutput() PermissionTargetBuildOutput
	ToPermissionTargetBuildOutputWithContext(context.Context) PermissionTargetBuildOutput
}

type PermissionTargetBuildArgs struct {
	Actions PermissionTargetBuildActionsPtrInput `pulumi:"actions"`
	// Pattern of artifacts to exclude.
	ExcludesPatterns pulumi.StringArrayInput `pulumi:"excludesPatterns"`
	// Pattern of artifacts to include.
	IncludesPatterns pulumi.StringArrayInput `pulumi:"includesPatterns"`
	// List of repositories this permission target is applicable for. You can specify the name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
	Repositories pulumi.StringArrayInput `pulumi:"repositories"`
}

func (PermissionTargetBuildArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetBuild)(nil)).Elem()
}

func (i PermissionTargetBuildArgs) ToPermissionTargetBuildOutput() PermissionTargetBuildOutput {
	return i.ToPermissionTargetBuildOutputWithContext(context.Background())
}

func (i PermissionTargetBuildArgs) ToPermissionTargetBuildOutputWithContext(ctx context.Context) PermissionTargetBuildOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetBuildOutput)
}

func (i PermissionTargetBuildArgs) ToPermissionTargetBuildPtrOutput() PermissionTargetBuildPtrOutput {
	return i.ToPermissionTargetBuildPtrOutputWithContext(context.Background())
}

func (i PermissionTargetBuildArgs) ToPermissionTargetBuildPtrOutputWithContext(ctx context.Context) PermissionTargetBuildPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetBuildOutput).ToPermissionTargetBuildPtrOutputWithContext(ctx)
}

// PermissionTargetBuildPtrInput is an input type that accepts PermissionTargetBuildArgs, PermissionTargetBuildPtr and PermissionTargetBuildPtrOutput values.
// You can construct a concrete instance of `PermissionTargetBuildPtrInput` via:
//
//	        PermissionTargetBuildArgs{...}
//
//	or:
//
//	        nil
type PermissionTargetBuildPtrInput interface {
	pulumi.Input

	ToPermissionTargetBuildPtrOutput() PermissionTargetBuildPtrOutput
	ToPermissionTargetBuildPtrOutputWithContext(context.Context) PermissionTargetBuildPtrOutput
}

type permissionTargetBuildPtrType PermissionTargetBuildArgs

func PermissionTargetBuildPtr(v *PermissionTargetBuildArgs) PermissionTargetBuildPtrInput {
	return (*permissionTargetBuildPtrType)(v)
}

func (*permissionTargetBuildPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetBuild)(nil)).Elem()
}

func (i *permissionTargetBuildPtrType) ToPermissionTargetBuildPtrOutput() PermissionTargetBuildPtrOutput {
	return i.ToPermissionTargetBuildPtrOutputWithContext(context.Background())
}

func (i *permissionTargetBuildPtrType) ToPermissionTargetBuildPtrOutputWithContext(ctx context.Context) PermissionTargetBuildPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetBuildPtrOutput)
}

type PermissionTargetBuildOutput struct{ *pulumi.OutputState }

func (PermissionTargetBuildOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetBuild)(nil)).Elem()
}

func (o PermissionTargetBuildOutput) ToPermissionTargetBuildOutput() PermissionTargetBuildOutput {
	return o
}

func (o PermissionTargetBuildOutput) ToPermissionTargetBuildOutputWithContext(ctx context.Context) PermissionTargetBuildOutput {
	return o
}

func (o PermissionTargetBuildOutput) ToPermissionTargetBuildPtrOutput() PermissionTargetBuildPtrOutput {
	return o.ToPermissionTargetBuildPtrOutputWithContext(context.Background())
}

func (o PermissionTargetBuildOutput) ToPermissionTargetBuildPtrOutputWithContext(ctx context.Context) PermissionTargetBuildPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PermissionTargetBuild) *PermissionTargetBuild {
		return &v
	}).(PermissionTargetBuildPtrOutput)
}

func (o PermissionTargetBuildOutput) Actions() PermissionTargetBuildActionsPtrOutput {
	return o.ApplyT(func(v PermissionTargetBuild) *PermissionTargetBuildActions { return v.Actions }).(PermissionTargetBuildActionsPtrOutput)
}

// Pattern of artifacts to exclude.
func (o PermissionTargetBuildOutput) ExcludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetBuild) []string { return v.ExcludesPatterns }).(pulumi.StringArrayOutput)
}

// Pattern of artifacts to include.
func (o PermissionTargetBuildOutput) IncludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetBuild) []string { return v.IncludesPatterns }).(pulumi.StringArrayOutput)
}

// List of repositories this permission target is applicable for. You can specify the name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
func (o PermissionTargetBuildOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetBuild) []string { return v.Repositories }).(pulumi.StringArrayOutput)
}

type PermissionTargetBuildPtrOutput struct{ *pulumi.OutputState }

func (PermissionTargetBuildPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetBuild)(nil)).Elem()
}

func (o PermissionTargetBuildPtrOutput) ToPermissionTargetBuildPtrOutput() PermissionTargetBuildPtrOutput {
	return o
}

func (o PermissionTargetBuildPtrOutput) ToPermissionTargetBuildPtrOutputWithContext(ctx context.Context) PermissionTargetBuildPtrOutput {
	return o
}

func (o PermissionTargetBuildPtrOutput) Elem() PermissionTargetBuildOutput {
	return o.ApplyT(func(v *PermissionTargetBuild) PermissionTargetBuild {
		if v != nil {
			return *v
		}
		var ret PermissionTargetBuild
		return ret
	}).(PermissionTargetBuildOutput)
}

func (o PermissionTargetBuildPtrOutput) Actions() PermissionTargetBuildActionsPtrOutput {
	return o.ApplyT(func(v *PermissionTargetBuild) *PermissionTargetBuildActions {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(PermissionTargetBuildActionsPtrOutput)
}

// Pattern of artifacts to exclude.
func (o PermissionTargetBuildPtrOutput) ExcludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetBuild) []string {
		if v == nil {
			return nil
		}
		return v.ExcludesPatterns
	}).(pulumi.StringArrayOutput)
}

// Pattern of artifacts to include.
func (o PermissionTargetBuildPtrOutput) IncludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetBuild) []string {
		if v == nil {
			return nil
		}
		return v.IncludesPatterns
	}).(pulumi.StringArrayOutput)
}

// List of repositories this permission target is applicable for. You can specify the name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
func (o PermissionTargetBuildPtrOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetBuild) []string {
		if v == nil {
			return nil
		}
		return v.Repositories
	}).(pulumi.StringArrayOutput)
}

type PermissionTargetBuildActions struct {
	// Groups this permission applies for.
	Groups []PermissionTargetBuildActionsGroup `pulumi:"groups"`
	// Users this permission target applies for.
	Users []PermissionTargetBuildActionsUser `pulumi:"users"`
}

// PermissionTargetBuildActionsInput is an input type that accepts PermissionTargetBuildActionsArgs and PermissionTargetBuildActionsOutput values.
// You can construct a concrete instance of `PermissionTargetBuildActionsInput` via:
//
//	PermissionTargetBuildActionsArgs{...}
type PermissionTargetBuildActionsInput interface {
	pulumi.Input

	ToPermissionTargetBuildActionsOutput() PermissionTargetBuildActionsOutput
	ToPermissionTargetBuildActionsOutputWithContext(context.Context) PermissionTargetBuildActionsOutput
}

type PermissionTargetBuildActionsArgs struct {
	// Groups this permission applies for.
	Groups PermissionTargetBuildActionsGroupArrayInput `pulumi:"groups"`
	// Users this permission target applies for.
	Users PermissionTargetBuildActionsUserArrayInput `pulumi:"users"`
}

func (PermissionTargetBuildActionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetBuildActions)(nil)).Elem()
}

func (i PermissionTargetBuildActionsArgs) ToPermissionTargetBuildActionsOutput() PermissionTargetBuildActionsOutput {
	return i.ToPermissionTargetBuildActionsOutputWithContext(context.Background())
}

func (i PermissionTargetBuildActionsArgs) ToPermissionTargetBuildActionsOutputWithContext(ctx context.Context) PermissionTargetBuildActionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetBuildActionsOutput)
}

func (i PermissionTargetBuildActionsArgs) ToPermissionTargetBuildActionsPtrOutput() PermissionTargetBuildActionsPtrOutput {
	return i.ToPermissionTargetBuildActionsPtrOutputWithContext(context.Background())
}

func (i PermissionTargetBuildActionsArgs) ToPermissionTargetBuildActionsPtrOutputWithContext(ctx context.Context) PermissionTargetBuildActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetBuildActionsOutput).ToPermissionTargetBuildActionsPtrOutputWithContext(ctx)
}

// PermissionTargetBuildActionsPtrInput is an input type that accepts PermissionTargetBuildActionsArgs, PermissionTargetBuildActionsPtr and PermissionTargetBuildActionsPtrOutput values.
// You can construct a concrete instance of `PermissionTargetBuildActionsPtrInput` via:
//
//	        PermissionTargetBuildActionsArgs{...}
//
//	or:
//
//	        nil
type PermissionTargetBuildActionsPtrInput interface {
	pulumi.Input

	ToPermissionTargetBuildActionsPtrOutput() PermissionTargetBuildActionsPtrOutput
	ToPermissionTargetBuildActionsPtrOutputWithContext(context.Context) PermissionTargetBuildActionsPtrOutput
}

type permissionTargetBuildActionsPtrType PermissionTargetBuildActionsArgs

func PermissionTargetBuildActionsPtr(v *PermissionTargetBuildActionsArgs) PermissionTargetBuildActionsPtrInput {
	return (*permissionTargetBuildActionsPtrType)(v)
}

func (*permissionTargetBuildActionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetBuildActions)(nil)).Elem()
}

func (i *permissionTargetBuildActionsPtrType) ToPermissionTargetBuildActionsPtrOutput() PermissionTargetBuildActionsPtrOutput {
	return i.ToPermissionTargetBuildActionsPtrOutputWithContext(context.Background())
}

func (i *permissionTargetBuildActionsPtrType) ToPermissionTargetBuildActionsPtrOutputWithContext(ctx context.Context) PermissionTargetBuildActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetBuildActionsPtrOutput)
}

type PermissionTargetBuildActionsOutput struct{ *pulumi.OutputState }

func (PermissionTargetBuildActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetBuildActions)(nil)).Elem()
}

func (o PermissionTargetBuildActionsOutput) ToPermissionTargetBuildActionsOutput() PermissionTargetBuildActionsOutput {
	return o
}

func (o PermissionTargetBuildActionsOutput) ToPermissionTargetBuildActionsOutputWithContext(ctx context.Context) PermissionTargetBuildActionsOutput {
	return o
}

func (o PermissionTargetBuildActionsOutput) ToPermissionTargetBuildActionsPtrOutput() PermissionTargetBuildActionsPtrOutput {
	return o.ToPermissionTargetBuildActionsPtrOutputWithContext(context.Background())
}

func (o PermissionTargetBuildActionsOutput) ToPermissionTargetBuildActionsPtrOutputWithContext(ctx context.Context) PermissionTargetBuildActionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PermissionTargetBuildActions) *PermissionTargetBuildActions {
		return &v
	}).(PermissionTargetBuildActionsPtrOutput)
}

// Groups this permission applies for.
func (o PermissionTargetBuildActionsOutput) Groups() PermissionTargetBuildActionsGroupArrayOutput {
	return o.ApplyT(func(v PermissionTargetBuildActions) []PermissionTargetBuildActionsGroup { return v.Groups }).(PermissionTargetBuildActionsGroupArrayOutput)
}

// Users this permission target applies for.
func (o PermissionTargetBuildActionsOutput) Users() PermissionTargetBuildActionsUserArrayOutput {
	return o.ApplyT(func(v PermissionTargetBuildActions) []PermissionTargetBuildActionsUser { return v.Users }).(PermissionTargetBuildActionsUserArrayOutput)
}

type PermissionTargetBuildActionsPtrOutput struct{ *pulumi.OutputState }

func (PermissionTargetBuildActionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetBuildActions)(nil)).Elem()
}

func (o PermissionTargetBuildActionsPtrOutput) ToPermissionTargetBuildActionsPtrOutput() PermissionTargetBuildActionsPtrOutput {
	return o
}

func (o PermissionTargetBuildActionsPtrOutput) ToPermissionTargetBuildActionsPtrOutputWithContext(ctx context.Context) PermissionTargetBuildActionsPtrOutput {
	return o
}

func (o PermissionTargetBuildActionsPtrOutput) Elem() PermissionTargetBuildActionsOutput {
	return o.ApplyT(func(v *PermissionTargetBuildActions) PermissionTargetBuildActions {
		if v != nil {
			return *v
		}
		var ret PermissionTargetBuildActions
		return ret
	}).(PermissionTargetBuildActionsOutput)
}

// Groups this permission applies for.
func (o PermissionTargetBuildActionsPtrOutput) Groups() PermissionTargetBuildActionsGroupArrayOutput {
	return o.ApplyT(func(v *PermissionTargetBuildActions) []PermissionTargetBuildActionsGroup {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(PermissionTargetBuildActionsGroupArrayOutput)
}

// Users this permission target applies for.
func (o PermissionTargetBuildActionsPtrOutput) Users() PermissionTargetBuildActionsUserArrayOutput {
	return o.ApplyT(func(v *PermissionTargetBuildActions) []PermissionTargetBuildActionsUser {
		if v == nil {
			return nil
		}
		return v.Users
	}).(PermissionTargetBuildActionsUserArrayOutput)
}

type PermissionTargetBuildActionsGroup struct {
	// Name of permission.
	Name        string   `pulumi:"name"`
	Permissions []string `pulumi:"permissions"`
}

// PermissionTargetBuildActionsGroupInput is an input type that accepts PermissionTargetBuildActionsGroupArgs and PermissionTargetBuildActionsGroupOutput values.
// You can construct a concrete instance of `PermissionTargetBuildActionsGroupInput` via:
//
//	PermissionTargetBuildActionsGroupArgs{...}
type PermissionTargetBuildActionsGroupInput interface {
	pulumi.Input

	ToPermissionTargetBuildActionsGroupOutput() PermissionTargetBuildActionsGroupOutput
	ToPermissionTargetBuildActionsGroupOutputWithContext(context.Context) PermissionTargetBuildActionsGroupOutput
}

type PermissionTargetBuildActionsGroupArgs struct {
	// Name of permission.
	Name        pulumi.StringInput      `pulumi:"name"`
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (PermissionTargetBuildActionsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetBuildActionsGroup)(nil)).Elem()
}

func (i PermissionTargetBuildActionsGroupArgs) ToPermissionTargetBuildActionsGroupOutput() PermissionTargetBuildActionsGroupOutput {
	return i.ToPermissionTargetBuildActionsGroupOutputWithContext(context.Background())
}

func (i PermissionTargetBuildActionsGroupArgs) ToPermissionTargetBuildActionsGroupOutputWithContext(ctx context.Context) PermissionTargetBuildActionsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetBuildActionsGroupOutput)
}

// PermissionTargetBuildActionsGroupArrayInput is an input type that accepts PermissionTargetBuildActionsGroupArray and PermissionTargetBuildActionsGroupArrayOutput values.
// You can construct a concrete instance of `PermissionTargetBuildActionsGroupArrayInput` via:
//
//	PermissionTargetBuildActionsGroupArray{ PermissionTargetBuildActionsGroupArgs{...} }
type PermissionTargetBuildActionsGroupArrayInput interface {
	pulumi.Input

	ToPermissionTargetBuildActionsGroupArrayOutput() PermissionTargetBuildActionsGroupArrayOutput
	ToPermissionTargetBuildActionsGroupArrayOutputWithContext(context.Context) PermissionTargetBuildActionsGroupArrayOutput
}

type PermissionTargetBuildActionsGroupArray []PermissionTargetBuildActionsGroupInput

func (PermissionTargetBuildActionsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetBuildActionsGroup)(nil)).Elem()
}

func (i PermissionTargetBuildActionsGroupArray) ToPermissionTargetBuildActionsGroupArrayOutput() PermissionTargetBuildActionsGroupArrayOutput {
	return i.ToPermissionTargetBuildActionsGroupArrayOutputWithContext(context.Background())
}

func (i PermissionTargetBuildActionsGroupArray) ToPermissionTargetBuildActionsGroupArrayOutputWithContext(ctx context.Context) PermissionTargetBuildActionsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetBuildActionsGroupArrayOutput)
}

type PermissionTargetBuildActionsGroupOutput struct{ *pulumi.OutputState }

func (PermissionTargetBuildActionsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetBuildActionsGroup)(nil)).Elem()
}

func (o PermissionTargetBuildActionsGroupOutput) ToPermissionTargetBuildActionsGroupOutput() PermissionTargetBuildActionsGroupOutput {
	return o
}

func (o PermissionTargetBuildActionsGroupOutput) ToPermissionTargetBuildActionsGroupOutputWithContext(ctx context.Context) PermissionTargetBuildActionsGroupOutput {
	return o
}

// Name of permission.
func (o PermissionTargetBuildActionsGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PermissionTargetBuildActionsGroup) string { return v.Name }).(pulumi.StringOutput)
}

func (o PermissionTargetBuildActionsGroupOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetBuildActionsGroup) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type PermissionTargetBuildActionsGroupArrayOutput struct{ *pulumi.OutputState }

func (PermissionTargetBuildActionsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetBuildActionsGroup)(nil)).Elem()
}

func (o PermissionTargetBuildActionsGroupArrayOutput) ToPermissionTargetBuildActionsGroupArrayOutput() PermissionTargetBuildActionsGroupArrayOutput {
	return o
}

func (o PermissionTargetBuildActionsGroupArrayOutput) ToPermissionTargetBuildActionsGroupArrayOutputWithContext(ctx context.Context) PermissionTargetBuildActionsGroupArrayOutput {
	return o
}

func (o PermissionTargetBuildActionsGroupArrayOutput) Index(i pulumi.IntInput) PermissionTargetBuildActionsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PermissionTargetBuildActionsGroup {
		return vs[0].([]PermissionTargetBuildActionsGroup)[vs[1].(int)]
	}).(PermissionTargetBuildActionsGroupOutput)
}

type PermissionTargetBuildActionsUser struct {
	// Name of permission.
	Name        string   `pulumi:"name"`
	Permissions []string `pulumi:"permissions"`
}

// PermissionTargetBuildActionsUserInput is an input type that accepts PermissionTargetBuildActionsUserArgs and PermissionTargetBuildActionsUserOutput values.
// You can construct a concrete instance of `PermissionTargetBuildActionsUserInput` via:
//
//	PermissionTargetBuildActionsUserArgs{...}
type PermissionTargetBuildActionsUserInput interface {
	pulumi.Input

	ToPermissionTargetBuildActionsUserOutput() PermissionTargetBuildActionsUserOutput
	ToPermissionTargetBuildActionsUserOutputWithContext(context.Context) PermissionTargetBuildActionsUserOutput
}

type PermissionTargetBuildActionsUserArgs struct {
	// Name of permission.
	Name        pulumi.StringInput      `pulumi:"name"`
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (PermissionTargetBuildActionsUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetBuildActionsUser)(nil)).Elem()
}

func (i PermissionTargetBuildActionsUserArgs) ToPermissionTargetBuildActionsUserOutput() PermissionTargetBuildActionsUserOutput {
	return i.ToPermissionTargetBuildActionsUserOutputWithContext(context.Background())
}

func (i PermissionTargetBuildActionsUserArgs) ToPermissionTargetBuildActionsUserOutputWithContext(ctx context.Context) PermissionTargetBuildActionsUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetBuildActionsUserOutput)
}

// PermissionTargetBuildActionsUserArrayInput is an input type that accepts PermissionTargetBuildActionsUserArray and PermissionTargetBuildActionsUserArrayOutput values.
// You can construct a concrete instance of `PermissionTargetBuildActionsUserArrayInput` via:
//
//	PermissionTargetBuildActionsUserArray{ PermissionTargetBuildActionsUserArgs{...} }
type PermissionTargetBuildActionsUserArrayInput interface {
	pulumi.Input

	ToPermissionTargetBuildActionsUserArrayOutput() PermissionTargetBuildActionsUserArrayOutput
	ToPermissionTargetBuildActionsUserArrayOutputWithContext(context.Context) PermissionTargetBuildActionsUserArrayOutput
}

type PermissionTargetBuildActionsUserArray []PermissionTargetBuildActionsUserInput

func (PermissionTargetBuildActionsUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetBuildActionsUser)(nil)).Elem()
}

func (i PermissionTargetBuildActionsUserArray) ToPermissionTargetBuildActionsUserArrayOutput() PermissionTargetBuildActionsUserArrayOutput {
	return i.ToPermissionTargetBuildActionsUserArrayOutputWithContext(context.Background())
}

func (i PermissionTargetBuildActionsUserArray) ToPermissionTargetBuildActionsUserArrayOutputWithContext(ctx context.Context) PermissionTargetBuildActionsUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetBuildActionsUserArrayOutput)
}

type PermissionTargetBuildActionsUserOutput struct{ *pulumi.OutputState }

func (PermissionTargetBuildActionsUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetBuildActionsUser)(nil)).Elem()
}

func (o PermissionTargetBuildActionsUserOutput) ToPermissionTargetBuildActionsUserOutput() PermissionTargetBuildActionsUserOutput {
	return o
}

func (o PermissionTargetBuildActionsUserOutput) ToPermissionTargetBuildActionsUserOutputWithContext(ctx context.Context) PermissionTargetBuildActionsUserOutput {
	return o
}

// Name of permission.
func (o PermissionTargetBuildActionsUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PermissionTargetBuildActionsUser) string { return v.Name }).(pulumi.StringOutput)
}

func (o PermissionTargetBuildActionsUserOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetBuildActionsUser) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type PermissionTargetBuildActionsUserArrayOutput struct{ *pulumi.OutputState }

func (PermissionTargetBuildActionsUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetBuildActionsUser)(nil)).Elem()
}

func (o PermissionTargetBuildActionsUserArrayOutput) ToPermissionTargetBuildActionsUserArrayOutput() PermissionTargetBuildActionsUserArrayOutput {
	return o
}

func (o PermissionTargetBuildActionsUserArrayOutput) ToPermissionTargetBuildActionsUserArrayOutputWithContext(ctx context.Context) PermissionTargetBuildActionsUserArrayOutput {
	return o
}

func (o PermissionTargetBuildActionsUserArrayOutput) Index(i pulumi.IntInput) PermissionTargetBuildActionsUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PermissionTargetBuildActionsUser {
		return vs[0].([]PermissionTargetBuildActionsUser)[vs[1].(int)]
	}).(PermissionTargetBuildActionsUserOutput)
}

type PermissionTargetReleaseBundle struct {
	Actions *PermissionTargetReleaseBundleActions `pulumi:"actions"`
	// Pattern of artifacts to exclude.
	ExcludesPatterns []string `pulumi:"excludesPatterns"`
	// Pattern of artifacts to include.
	IncludesPatterns []string `pulumi:"includesPatterns"`
	// List of repositories this permission target is applicable for. You can specify the name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
	Repositories []string `pulumi:"repositories"`
}

// PermissionTargetReleaseBundleInput is an input type that accepts PermissionTargetReleaseBundleArgs and PermissionTargetReleaseBundleOutput values.
// You can construct a concrete instance of `PermissionTargetReleaseBundleInput` via:
//
//	PermissionTargetReleaseBundleArgs{...}
type PermissionTargetReleaseBundleInput interface {
	pulumi.Input

	ToPermissionTargetReleaseBundleOutput() PermissionTargetReleaseBundleOutput
	ToPermissionTargetReleaseBundleOutputWithContext(context.Context) PermissionTargetReleaseBundleOutput
}

type PermissionTargetReleaseBundleArgs struct {
	Actions PermissionTargetReleaseBundleActionsPtrInput `pulumi:"actions"`
	// Pattern of artifacts to exclude.
	ExcludesPatterns pulumi.StringArrayInput `pulumi:"excludesPatterns"`
	// Pattern of artifacts to include.
	IncludesPatterns pulumi.StringArrayInput `pulumi:"includesPatterns"`
	// List of repositories this permission target is applicable for. You can specify the name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
	Repositories pulumi.StringArrayInput `pulumi:"repositories"`
}

func (PermissionTargetReleaseBundleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetReleaseBundle)(nil)).Elem()
}

func (i PermissionTargetReleaseBundleArgs) ToPermissionTargetReleaseBundleOutput() PermissionTargetReleaseBundleOutput {
	return i.ToPermissionTargetReleaseBundleOutputWithContext(context.Background())
}

func (i PermissionTargetReleaseBundleArgs) ToPermissionTargetReleaseBundleOutputWithContext(ctx context.Context) PermissionTargetReleaseBundleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetReleaseBundleOutput)
}

func (i PermissionTargetReleaseBundleArgs) ToPermissionTargetReleaseBundlePtrOutput() PermissionTargetReleaseBundlePtrOutput {
	return i.ToPermissionTargetReleaseBundlePtrOutputWithContext(context.Background())
}

func (i PermissionTargetReleaseBundleArgs) ToPermissionTargetReleaseBundlePtrOutputWithContext(ctx context.Context) PermissionTargetReleaseBundlePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetReleaseBundleOutput).ToPermissionTargetReleaseBundlePtrOutputWithContext(ctx)
}

// PermissionTargetReleaseBundlePtrInput is an input type that accepts PermissionTargetReleaseBundleArgs, PermissionTargetReleaseBundlePtr and PermissionTargetReleaseBundlePtrOutput values.
// You can construct a concrete instance of `PermissionTargetReleaseBundlePtrInput` via:
//
//	        PermissionTargetReleaseBundleArgs{...}
//
//	or:
//
//	        nil
type PermissionTargetReleaseBundlePtrInput interface {
	pulumi.Input

	ToPermissionTargetReleaseBundlePtrOutput() PermissionTargetReleaseBundlePtrOutput
	ToPermissionTargetReleaseBundlePtrOutputWithContext(context.Context) PermissionTargetReleaseBundlePtrOutput
}

type permissionTargetReleaseBundlePtrType PermissionTargetReleaseBundleArgs

func PermissionTargetReleaseBundlePtr(v *PermissionTargetReleaseBundleArgs) PermissionTargetReleaseBundlePtrInput {
	return (*permissionTargetReleaseBundlePtrType)(v)
}

func (*permissionTargetReleaseBundlePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetReleaseBundle)(nil)).Elem()
}

func (i *permissionTargetReleaseBundlePtrType) ToPermissionTargetReleaseBundlePtrOutput() PermissionTargetReleaseBundlePtrOutput {
	return i.ToPermissionTargetReleaseBundlePtrOutputWithContext(context.Background())
}

func (i *permissionTargetReleaseBundlePtrType) ToPermissionTargetReleaseBundlePtrOutputWithContext(ctx context.Context) PermissionTargetReleaseBundlePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetReleaseBundlePtrOutput)
}

type PermissionTargetReleaseBundleOutput struct{ *pulumi.OutputState }

func (PermissionTargetReleaseBundleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetReleaseBundle)(nil)).Elem()
}

func (o PermissionTargetReleaseBundleOutput) ToPermissionTargetReleaseBundleOutput() PermissionTargetReleaseBundleOutput {
	return o
}

func (o PermissionTargetReleaseBundleOutput) ToPermissionTargetReleaseBundleOutputWithContext(ctx context.Context) PermissionTargetReleaseBundleOutput {
	return o
}

func (o PermissionTargetReleaseBundleOutput) ToPermissionTargetReleaseBundlePtrOutput() PermissionTargetReleaseBundlePtrOutput {
	return o.ToPermissionTargetReleaseBundlePtrOutputWithContext(context.Background())
}

func (o PermissionTargetReleaseBundleOutput) ToPermissionTargetReleaseBundlePtrOutputWithContext(ctx context.Context) PermissionTargetReleaseBundlePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PermissionTargetReleaseBundle) *PermissionTargetReleaseBundle {
		return &v
	}).(PermissionTargetReleaseBundlePtrOutput)
}

func (o PermissionTargetReleaseBundleOutput) Actions() PermissionTargetReleaseBundleActionsPtrOutput {
	return o.ApplyT(func(v PermissionTargetReleaseBundle) *PermissionTargetReleaseBundleActions { return v.Actions }).(PermissionTargetReleaseBundleActionsPtrOutput)
}

// Pattern of artifacts to exclude.
func (o PermissionTargetReleaseBundleOutput) ExcludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetReleaseBundle) []string { return v.ExcludesPatterns }).(pulumi.StringArrayOutput)
}

// Pattern of artifacts to include.
func (o PermissionTargetReleaseBundleOutput) IncludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetReleaseBundle) []string { return v.IncludesPatterns }).(pulumi.StringArrayOutput)
}

// List of repositories this permission target is applicable for. You can specify the name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
func (o PermissionTargetReleaseBundleOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetReleaseBundle) []string { return v.Repositories }).(pulumi.StringArrayOutput)
}

type PermissionTargetReleaseBundlePtrOutput struct{ *pulumi.OutputState }

func (PermissionTargetReleaseBundlePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetReleaseBundle)(nil)).Elem()
}

func (o PermissionTargetReleaseBundlePtrOutput) ToPermissionTargetReleaseBundlePtrOutput() PermissionTargetReleaseBundlePtrOutput {
	return o
}

func (o PermissionTargetReleaseBundlePtrOutput) ToPermissionTargetReleaseBundlePtrOutputWithContext(ctx context.Context) PermissionTargetReleaseBundlePtrOutput {
	return o
}

func (o PermissionTargetReleaseBundlePtrOutput) Elem() PermissionTargetReleaseBundleOutput {
	return o.ApplyT(func(v *PermissionTargetReleaseBundle) PermissionTargetReleaseBundle {
		if v != nil {
			return *v
		}
		var ret PermissionTargetReleaseBundle
		return ret
	}).(PermissionTargetReleaseBundleOutput)
}

func (o PermissionTargetReleaseBundlePtrOutput) Actions() PermissionTargetReleaseBundleActionsPtrOutput {
	return o.ApplyT(func(v *PermissionTargetReleaseBundle) *PermissionTargetReleaseBundleActions {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(PermissionTargetReleaseBundleActionsPtrOutput)
}

// Pattern of artifacts to exclude.
func (o PermissionTargetReleaseBundlePtrOutput) ExcludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetReleaseBundle) []string {
		if v == nil {
			return nil
		}
		return v.ExcludesPatterns
	}).(pulumi.StringArrayOutput)
}

// Pattern of artifacts to include.
func (o PermissionTargetReleaseBundlePtrOutput) IncludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetReleaseBundle) []string {
		if v == nil {
			return nil
		}
		return v.IncludesPatterns
	}).(pulumi.StringArrayOutput)
}

// List of repositories this permission target is applicable for. You can specify the name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
func (o PermissionTargetReleaseBundlePtrOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetReleaseBundle) []string {
		if v == nil {
			return nil
		}
		return v.Repositories
	}).(pulumi.StringArrayOutput)
}

type PermissionTargetReleaseBundleActions struct {
	// Groups this permission applies for.
	Groups []PermissionTargetReleaseBundleActionsGroup `pulumi:"groups"`
	// Users this permission target applies for.
	Users []PermissionTargetReleaseBundleActionsUser `pulumi:"users"`
}

// PermissionTargetReleaseBundleActionsInput is an input type that accepts PermissionTargetReleaseBundleActionsArgs and PermissionTargetReleaseBundleActionsOutput values.
// You can construct a concrete instance of `PermissionTargetReleaseBundleActionsInput` via:
//
//	PermissionTargetReleaseBundleActionsArgs{...}
type PermissionTargetReleaseBundleActionsInput interface {
	pulumi.Input

	ToPermissionTargetReleaseBundleActionsOutput() PermissionTargetReleaseBundleActionsOutput
	ToPermissionTargetReleaseBundleActionsOutputWithContext(context.Context) PermissionTargetReleaseBundleActionsOutput
}

type PermissionTargetReleaseBundleActionsArgs struct {
	// Groups this permission applies for.
	Groups PermissionTargetReleaseBundleActionsGroupArrayInput `pulumi:"groups"`
	// Users this permission target applies for.
	Users PermissionTargetReleaseBundleActionsUserArrayInput `pulumi:"users"`
}

func (PermissionTargetReleaseBundleActionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetReleaseBundleActions)(nil)).Elem()
}

func (i PermissionTargetReleaseBundleActionsArgs) ToPermissionTargetReleaseBundleActionsOutput() PermissionTargetReleaseBundleActionsOutput {
	return i.ToPermissionTargetReleaseBundleActionsOutputWithContext(context.Background())
}

func (i PermissionTargetReleaseBundleActionsArgs) ToPermissionTargetReleaseBundleActionsOutputWithContext(ctx context.Context) PermissionTargetReleaseBundleActionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetReleaseBundleActionsOutput)
}

func (i PermissionTargetReleaseBundleActionsArgs) ToPermissionTargetReleaseBundleActionsPtrOutput() PermissionTargetReleaseBundleActionsPtrOutput {
	return i.ToPermissionTargetReleaseBundleActionsPtrOutputWithContext(context.Background())
}

func (i PermissionTargetReleaseBundleActionsArgs) ToPermissionTargetReleaseBundleActionsPtrOutputWithContext(ctx context.Context) PermissionTargetReleaseBundleActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetReleaseBundleActionsOutput).ToPermissionTargetReleaseBundleActionsPtrOutputWithContext(ctx)
}

// PermissionTargetReleaseBundleActionsPtrInput is an input type that accepts PermissionTargetReleaseBundleActionsArgs, PermissionTargetReleaseBundleActionsPtr and PermissionTargetReleaseBundleActionsPtrOutput values.
// You can construct a concrete instance of `PermissionTargetReleaseBundleActionsPtrInput` via:
//
//	        PermissionTargetReleaseBundleActionsArgs{...}
//
//	or:
//
//	        nil
type PermissionTargetReleaseBundleActionsPtrInput interface {
	pulumi.Input

	ToPermissionTargetReleaseBundleActionsPtrOutput() PermissionTargetReleaseBundleActionsPtrOutput
	ToPermissionTargetReleaseBundleActionsPtrOutputWithContext(context.Context) PermissionTargetReleaseBundleActionsPtrOutput
}

type permissionTargetReleaseBundleActionsPtrType PermissionTargetReleaseBundleActionsArgs

func PermissionTargetReleaseBundleActionsPtr(v *PermissionTargetReleaseBundleActionsArgs) PermissionTargetReleaseBundleActionsPtrInput {
	return (*permissionTargetReleaseBundleActionsPtrType)(v)
}

func (*permissionTargetReleaseBundleActionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetReleaseBundleActions)(nil)).Elem()
}

func (i *permissionTargetReleaseBundleActionsPtrType) ToPermissionTargetReleaseBundleActionsPtrOutput() PermissionTargetReleaseBundleActionsPtrOutput {
	return i.ToPermissionTargetReleaseBundleActionsPtrOutputWithContext(context.Background())
}

func (i *permissionTargetReleaseBundleActionsPtrType) ToPermissionTargetReleaseBundleActionsPtrOutputWithContext(ctx context.Context) PermissionTargetReleaseBundleActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetReleaseBundleActionsPtrOutput)
}

type PermissionTargetReleaseBundleActionsOutput struct{ *pulumi.OutputState }

func (PermissionTargetReleaseBundleActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetReleaseBundleActions)(nil)).Elem()
}

func (o PermissionTargetReleaseBundleActionsOutput) ToPermissionTargetReleaseBundleActionsOutput() PermissionTargetReleaseBundleActionsOutput {
	return o
}

func (o PermissionTargetReleaseBundleActionsOutput) ToPermissionTargetReleaseBundleActionsOutputWithContext(ctx context.Context) PermissionTargetReleaseBundleActionsOutput {
	return o
}

func (o PermissionTargetReleaseBundleActionsOutput) ToPermissionTargetReleaseBundleActionsPtrOutput() PermissionTargetReleaseBundleActionsPtrOutput {
	return o.ToPermissionTargetReleaseBundleActionsPtrOutputWithContext(context.Background())
}

func (o PermissionTargetReleaseBundleActionsOutput) ToPermissionTargetReleaseBundleActionsPtrOutputWithContext(ctx context.Context) PermissionTargetReleaseBundleActionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PermissionTargetReleaseBundleActions) *PermissionTargetReleaseBundleActions {
		return &v
	}).(PermissionTargetReleaseBundleActionsPtrOutput)
}

// Groups this permission applies for.
func (o PermissionTargetReleaseBundleActionsOutput) Groups() PermissionTargetReleaseBundleActionsGroupArrayOutput {
	return o.ApplyT(func(v PermissionTargetReleaseBundleActions) []PermissionTargetReleaseBundleActionsGroup {
		return v.Groups
	}).(PermissionTargetReleaseBundleActionsGroupArrayOutput)
}

// Users this permission target applies for.
func (o PermissionTargetReleaseBundleActionsOutput) Users() PermissionTargetReleaseBundleActionsUserArrayOutput {
	return o.ApplyT(func(v PermissionTargetReleaseBundleActions) []PermissionTargetReleaseBundleActionsUser {
		return v.Users
	}).(PermissionTargetReleaseBundleActionsUserArrayOutput)
}

type PermissionTargetReleaseBundleActionsPtrOutput struct{ *pulumi.OutputState }

func (PermissionTargetReleaseBundleActionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetReleaseBundleActions)(nil)).Elem()
}

func (o PermissionTargetReleaseBundleActionsPtrOutput) ToPermissionTargetReleaseBundleActionsPtrOutput() PermissionTargetReleaseBundleActionsPtrOutput {
	return o
}

func (o PermissionTargetReleaseBundleActionsPtrOutput) ToPermissionTargetReleaseBundleActionsPtrOutputWithContext(ctx context.Context) PermissionTargetReleaseBundleActionsPtrOutput {
	return o
}

func (o PermissionTargetReleaseBundleActionsPtrOutput) Elem() PermissionTargetReleaseBundleActionsOutput {
	return o.ApplyT(func(v *PermissionTargetReleaseBundleActions) PermissionTargetReleaseBundleActions {
		if v != nil {
			return *v
		}
		var ret PermissionTargetReleaseBundleActions
		return ret
	}).(PermissionTargetReleaseBundleActionsOutput)
}

// Groups this permission applies for.
func (o PermissionTargetReleaseBundleActionsPtrOutput) Groups() PermissionTargetReleaseBundleActionsGroupArrayOutput {
	return o.ApplyT(func(v *PermissionTargetReleaseBundleActions) []PermissionTargetReleaseBundleActionsGroup {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(PermissionTargetReleaseBundleActionsGroupArrayOutput)
}

// Users this permission target applies for.
func (o PermissionTargetReleaseBundleActionsPtrOutput) Users() PermissionTargetReleaseBundleActionsUserArrayOutput {
	return o.ApplyT(func(v *PermissionTargetReleaseBundleActions) []PermissionTargetReleaseBundleActionsUser {
		if v == nil {
			return nil
		}
		return v.Users
	}).(PermissionTargetReleaseBundleActionsUserArrayOutput)
}

type PermissionTargetReleaseBundleActionsGroup struct {
	// Name of permission.
	Name        string   `pulumi:"name"`
	Permissions []string `pulumi:"permissions"`
}

// PermissionTargetReleaseBundleActionsGroupInput is an input type that accepts PermissionTargetReleaseBundleActionsGroupArgs and PermissionTargetReleaseBundleActionsGroupOutput values.
// You can construct a concrete instance of `PermissionTargetReleaseBundleActionsGroupInput` via:
//
//	PermissionTargetReleaseBundleActionsGroupArgs{...}
type PermissionTargetReleaseBundleActionsGroupInput interface {
	pulumi.Input

	ToPermissionTargetReleaseBundleActionsGroupOutput() PermissionTargetReleaseBundleActionsGroupOutput
	ToPermissionTargetReleaseBundleActionsGroupOutputWithContext(context.Context) PermissionTargetReleaseBundleActionsGroupOutput
}

type PermissionTargetReleaseBundleActionsGroupArgs struct {
	// Name of permission.
	Name        pulumi.StringInput      `pulumi:"name"`
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (PermissionTargetReleaseBundleActionsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetReleaseBundleActionsGroup)(nil)).Elem()
}

func (i PermissionTargetReleaseBundleActionsGroupArgs) ToPermissionTargetReleaseBundleActionsGroupOutput() PermissionTargetReleaseBundleActionsGroupOutput {
	return i.ToPermissionTargetReleaseBundleActionsGroupOutputWithContext(context.Background())
}

func (i PermissionTargetReleaseBundleActionsGroupArgs) ToPermissionTargetReleaseBundleActionsGroupOutputWithContext(ctx context.Context) PermissionTargetReleaseBundleActionsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetReleaseBundleActionsGroupOutput)
}

// PermissionTargetReleaseBundleActionsGroupArrayInput is an input type that accepts PermissionTargetReleaseBundleActionsGroupArray and PermissionTargetReleaseBundleActionsGroupArrayOutput values.
// You can construct a concrete instance of `PermissionTargetReleaseBundleActionsGroupArrayInput` via:
//
//	PermissionTargetReleaseBundleActionsGroupArray{ PermissionTargetReleaseBundleActionsGroupArgs{...} }
type PermissionTargetReleaseBundleActionsGroupArrayInput interface {
	pulumi.Input

	ToPermissionTargetReleaseBundleActionsGroupArrayOutput() PermissionTargetReleaseBundleActionsGroupArrayOutput
	ToPermissionTargetReleaseBundleActionsGroupArrayOutputWithContext(context.Context) PermissionTargetReleaseBundleActionsGroupArrayOutput
}

type PermissionTargetReleaseBundleActionsGroupArray []PermissionTargetReleaseBundleActionsGroupInput

func (PermissionTargetReleaseBundleActionsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetReleaseBundleActionsGroup)(nil)).Elem()
}

func (i PermissionTargetReleaseBundleActionsGroupArray) ToPermissionTargetReleaseBundleActionsGroupArrayOutput() PermissionTargetReleaseBundleActionsGroupArrayOutput {
	return i.ToPermissionTargetReleaseBundleActionsGroupArrayOutputWithContext(context.Background())
}

func (i PermissionTargetReleaseBundleActionsGroupArray) ToPermissionTargetReleaseBundleActionsGroupArrayOutputWithContext(ctx context.Context) PermissionTargetReleaseBundleActionsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetReleaseBundleActionsGroupArrayOutput)
}

type PermissionTargetReleaseBundleActionsGroupOutput struct{ *pulumi.OutputState }

func (PermissionTargetReleaseBundleActionsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetReleaseBundleActionsGroup)(nil)).Elem()
}

func (o PermissionTargetReleaseBundleActionsGroupOutput) ToPermissionTargetReleaseBundleActionsGroupOutput() PermissionTargetReleaseBundleActionsGroupOutput {
	return o
}

func (o PermissionTargetReleaseBundleActionsGroupOutput) ToPermissionTargetReleaseBundleActionsGroupOutputWithContext(ctx context.Context) PermissionTargetReleaseBundleActionsGroupOutput {
	return o
}

// Name of permission.
func (o PermissionTargetReleaseBundleActionsGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PermissionTargetReleaseBundleActionsGroup) string { return v.Name }).(pulumi.StringOutput)
}

func (o PermissionTargetReleaseBundleActionsGroupOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetReleaseBundleActionsGroup) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type PermissionTargetReleaseBundleActionsGroupArrayOutput struct{ *pulumi.OutputState }

func (PermissionTargetReleaseBundleActionsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetReleaseBundleActionsGroup)(nil)).Elem()
}

func (o PermissionTargetReleaseBundleActionsGroupArrayOutput) ToPermissionTargetReleaseBundleActionsGroupArrayOutput() PermissionTargetReleaseBundleActionsGroupArrayOutput {
	return o
}

func (o PermissionTargetReleaseBundleActionsGroupArrayOutput) ToPermissionTargetReleaseBundleActionsGroupArrayOutputWithContext(ctx context.Context) PermissionTargetReleaseBundleActionsGroupArrayOutput {
	return o
}

func (o PermissionTargetReleaseBundleActionsGroupArrayOutput) Index(i pulumi.IntInput) PermissionTargetReleaseBundleActionsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PermissionTargetReleaseBundleActionsGroup {
		return vs[0].([]PermissionTargetReleaseBundleActionsGroup)[vs[1].(int)]
	}).(PermissionTargetReleaseBundleActionsGroupOutput)
}

type PermissionTargetReleaseBundleActionsUser struct {
	// Name of permission.
	Name        string   `pulumi:"name"`
	Permissions []string `pulumi:"permissions"`
}

// PermissionTargetReleaseBundleActionsUserInput is an input type that accepts PermissionTargetReleaseBundleActionsUserArgs and PermissionTargetReleaseBundleActionsUserOutput values.
// You can construct a concrete instance of `PermissionTargetReleaseBundleActionsUserInput` via:
//
//	PermissionTargetReleaseBundleActionsUserArgs{...}
type PermissionTargetReleaseBundleActionsUserInput interface {
	pulumi.Input

	ToPermissionTargetReleaseBundleActionsUserOutput() PermissionTargetReleaseBundleActionsUserOutput
	ToPermissionTargetReleaseBundleActionsUserOutputWithContext(context.Context) PermissionTargetReleaseBundleActionsUserOutput
}

type PermissionTargetReleaseBundleActionsUserArgs struct {
	// Name of permission.
	Name        pulumi.StringInput      `pulumi:"name"`
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (PermissionTargetReleaseBundleActionsUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetReleaseBundleActionsUser)(nil)).Elem()
}

func (i PermissionTargetReleaseBundleActionsUserArgs) ToPermissionTargetReleaseBundleActionsUserOutput() PermissionTargetReleaseBundleActionsUserOutput {
	return i.ToPermissionTargetReleaseBundleActionsUserOutputWithContext(context.Background())
}

func (i PermissionTargetReleaseBundleActionsUserArgs) ToPermissionTargetReleaseBundleActionsUserOutputWithContext(ctx context.Context) PermissionTargetReleaseBundleActionsUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetReleaseBundleActionsUserOutput)
}

// PermissionTargetReleaseBundleActionsUserArrayInput is an input type that accepts PermissionTargetReleaseBundleActionsUserArray and PermissionTargetReleaseBundleActionsUserArrayOutput values.
// You can construct a concrete instance of `PermissionTargetReleaseBundleActionsUserArrayInput` via:
//
//	PermissionTargetReleaseBundleActionsUserArray{ PermissionTargetReleaseBundleActionsUserArgs{...} }
type PermissionTargetReleaseBundleActionsUserArrayInput interface {
	pulumi.Input

	ToPermissionTargetReleaseBundleActionsUserArrayOutput() PermissionTargetReleaseBundleActionsUserArrayOutput
	ToPermissionTargetReleaseBundleActionsUserArrayOutputWithContext(context.Context) PermissionTargetReleaseBundleActionsUserArrayOutput
}

type PermissionTargetReleaseBundleActionsUserArray []PermissionTargetReleaseBundleActionsUserInput

func (PermissionTargetReleaseBundleActionsUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetReleaseBundleActionsUser)(nil)).Elem()
}

func (i PermissionTargetReleaseBundleActionsUserArray) ToPermissionTargetReleaseBundleActionsUserArrayOutput() PermissionTargetReleaseBundleActionsUserArrayOutput {
	return i.ToPermissionTargetReleaseBundleActionsUserArrayOutputWithContext(context.Background())
}

func (i PermissionTargetReleaseBundleActionsUserArray) ToPermissionTargetReleaseBundleActionsUserArrayOutputWithContext(ctx context.Context) PermissionTargetReleaseBundleActionsUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetReleaseBundleActionsUserArrayOutput)
}

type PermissionTargetReleaseBundleActionsUserOutput struct{ *pulumi.OutputState }

func (PermissionTargetReleaseBundleActionsUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetReleaseBundleActionsUser)(nil)).Elem()
}

func (o PermissionTargetReleaseBundleActionsUserOutput) ToPermissionTargetReleaseBundleActionsUserOutput() PermissionTargetReleaseBundleActionsUserOutput {
	return o
}

func (o PermissionTargetReleaseBundleActionsUserOutput) ToPermissionTargetReleaseBundleActionsUserOutputWithContext(ctx context.Context) PermissionTargetReleaseBundleActionsUserOutput {
	return o
}

// Name of permission.
func (o PermissionTargetReleaseBundleActionsUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PermissionTargetReleaseBundleActionsUser) string { return v.Name }).(pulumi.StringOutput)
}

func (o PermissionTargetReleaseBundleActionsUserOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetReleaseBundleActionsUser) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type PermissionTargetReleaseBundleActionsUserArrayOutput struct{ *pulumi.OutputState }

func (PermissionTargetReleaseBundleActionsUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetReleaseBundleActionsUser)(nil)).Elem()
}

func (o PermissionTargetReleaseBundleActionsUserArrayOutput) ToPermissionTargetReleaseBundleActionsUserArrayOutput() PermissionTargetReleaseBundleActionsUserArrayOutput {
	return o
}

func (o PermissionTargetReleaseBundleActionsUserArrayOutput) ToPermissionTargetReleaseBundleActionsUserArrayOutputWithContext(ctx context.Context) PermissionTargetReleaseBundleActionsUserArrayOutput {
	return o
}

func (o PermissionTargetReleaseBundleActionsUserArrayOutput) Index(i pulumi.IntInput) PermissionTargetReleaseBundleActionsUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PermissionTargetReleaseBundleActionsUser {
		return vs[0].([]PermissionTargetReleaseBundleActionsUser)[vs[1].(int)]
	}).(PermissionTargetReleaseBundleActionsUserOutput)
}

type PermissionTargetRepo struct {
	Actions *PermissionTargetRepoActions `pulumi:"actions"`
	// Pattern of artifacts to exclude.
	ExcludesPatterns []string `pulumi:"excludesPatterns"`
	// Pattern of artifacts to include.
	IncludesPatterns []string `pulumi:"includesPatterns"`
	// List of repositories this permission target is applicable for. You can specify the name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
	Repositories []string `pulumi:"repositories"`
}

// PermissionTargetRepoInput is an input type that accepts PermissionTargetRepoArgs and PermissionTargetRepoOutput values.
// You can construct a concrete instance of `PermissionTargetRepoInput` via:
//
//	PermissionTargetRepoArgs{...}
type PermissionTargetRepoInput interface {
	pulumi.Input

	ToPermissionTargetRepoOutput() PermissionTargetRepoOutput
	ToPermissionTargetRepoOutputWithContext(context.Context) PermissionTargetRepoOutput
}

type PermissionTargetRepoArgs struct {
	Actions PermissionTargetRepoActionsPtrInput `pulumi:"actions"`
	// Pattern of artifacts to exclude.
	ExcludesPatterns pulumi.StringArrayInput `pulumi:"excludesPatterns"`
	// Pattern of artifacts to include.
	IncludesPatterns pulumi.StringArrayInput `pulumi:"includesPatterns"`
	// List of repositories this permission target is applicable for. You can specify the name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
	Repositories pulumi.StringArrayInput `pulumi:"repositories"`
}

func (PermissionTargetRepoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetRepo)(nil)).Elem()
}

func (i PermissionTargetRepoArgs) ToPermissionTargetRepoOutput() PermissionTargetRepoOutput {
	return i.ToPermissionTargetRepoOutputWithContext(context.Background())
}

func (i PermissionTargetRepoArgs) ToPermissionTargetRepoOutputWithContext(ctx context.Context) PermissionTargetRepoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetRepoOutput)
}

func (i PermissionTargetRepoArgs) ToPermissionTargetRepoPtrOutput() PermissionTargetRepoPtrOutput {
	return i.ToPermissionTargetRepoPtrOutputWithContext(context.Background())
}

func (i PermissionTargetRepoArgs) ToPermissionTargetRepoPtrOutputWithContext(ctx context.Context) PermissionTargetRepoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetRepoOutput).ToPermissionTargetRepoPtrOutputWithContext(ctx)
}

// PermissionTargetRepoPtrInput is an input type that accepts PermissionTargetRepoArgs, PermissionTargetRepoPtr and PermissionTargetRepoPtrOutput values.
// You can construct a concrete instance of `PermissionTargetRepoPtrInput` via:
//
//	        PermissionTargetRepoArgs{...}
//
//	or:
//
//	        nil
type PermissionTargetRepoPtrInput interface {
	pulumi.Input

	ToPermissionTargetRepoPtrOutput() PermissionTargetRepoPtrOutput
	ToPermissionTargetRepoPtrOutputWithContext(context.Context) PermissionTargetRepoPtrOutput
}

type permissionTargetRepoPtrType PermissionTargetRepoArgs

func PermissionTargetRepoPtr(v *PermissionTargetRepoArgs) PermissionTargetRepoPtrInput {
	return (*permissionTargetRepoPtrType)(v)
}

func (*permissionTargetRepoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetRepo)(nil)).Elem()
}

func (i *permissionTargetRepoPtrType) ToPermissionTargetRepoPtrOutput() PermissionTargetRepoPtrOutput {
	return i.ToPermissionTargetRepoPtrOutputWithContext(context.Background())
}

func (i *permissionTargetRepoPtrType) ToPermissionTargetRepoPtrOutputWithContext(ctx context.Context) PermissionTargetRepoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetRepoPtrOutput)
}

type PermissionTargetRepoOutput struct{ *pulumi.OutputState }

func (PermissionTargetRepoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetRepo)(nil)).Elem()
}

func (o PermissionTargetRepoOutput) ToPermissionTargetRepoOutput() PermissionTargetRepoOutput {
	return o
}

func (o PermissionTargetRepoOutput) ToPermissionTargetRepoOutputWithContext(ctx context.Context) PermissionTargetRepoOutput {
	return o
}

func (o PermissionTargetRepoOutput) ToPermissionTargetRepoPtrOutput() PermissionTargetRepoPtrOutput {
	return o.ToPermissionTargetRepoPtrOutputWithContext(context.Background())
}

func (o PermissionTargetRepoOutput) ToPermissionTargetRepoPtrOutputWithContext(ctx context.Context) PermissionTargetRepoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PermissionTargetRepo) *PermissionTargetRepo {
		return &v
	}).(PermissionTargetRepoPtrOutput)
}

func (o PermissionTargetRepoOutput) Actions() PermissionTargetRepoActionsPtrOutput {
	return o.ApplyT(func(v PermissionTargetRepo) *PermissionTargetRepoActions { return v.Actions }).(PermissionTargetRepoActionsPtrOutput)
}

// Pattern of artifacts to exclude.
func (o PermissionTargetRepoOutput) ExcludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetRepo) []string { return v.ExcludesPatterns }).(pulumi.StringArrayOutput)
}

// Pattern of artifacts to include.
func (o PermissionTargetRepoOutput) IncludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetRepo) []string { return v.IncludesPatterns }).(pulumi.StringArrayOutput)
}

// List of repositories this permission target is applicable for. You can specify the name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
func (o PermissionTargetRepoOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetRepo) []string { return v.Repositories }).(pulumi.StringArrayOutput)
}

type PermissionTargetRepoPtrOutput struct{ *pulumi.OutputState }

func (PermissionTargetRepoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetRepo)(nil)).Elem()
}

func (o PermissionTargetRepoPtrOutput) ToPermissionTargetRepoPtrOutput() PermissionTargetRepoPtrOutput {
	return o
}

func (o PermissionTargetRepoPtrOutput) ToPermissionTargetRepoPtrOutputWithContext(ctx context.Context) PermissionTargetRepoPtrOutput {
	return o
}

func (o PermissionTargetRepoPtrOutput) Elem() PermissionTargetRepoOutput {
	return o.ApplyT(func(v *PermissionTargetRepo) PermissionTargetRepo {
		if v != nil {
			return *v
		}
		var ret PermissionTargetRepo
		return ret
	}).(PermissionTargetRepoOutput)
}

func (o PermissionTargetRepoPtrOutput) Actions() PermissionTargetRepoActionsPtrOutput {
	return o.ApplyT(func(v *PermissionTargetRepo) *PermissionTargetRepoActions {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(PermissionTargetRepoActionsPtrOutput)
}

// Pattern of artifacts to exclude.
func (o PermissionTargetRepoPtrOutput) ExcludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetRepo) []string {
		if v == nil {
			return nil
		}
		return v.ExcludesPatterns
	}).(pulumi.StringArrayOutput)
}

// Pattern of artifacts to include.
func (o PermissionTargetRepoPtrOutput) IncludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetRepo) []string {
		if v == nil {
			return nil
		}
		return v.IncludesPatterns
	}).(pulumi.StringArrayOutput)
}

// List of repositories this permission target is applicable for. You can specify the name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
func (o PermissionTargetRepoPtrOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetRepo) []string {
		if v == nil {
			return nil
		}
		return v.Repositories
	}).(pulumi.StringArrayOutput)
}

type PermissionTargetRepoActions struct {
	// Groups this permission applies for.
	Groups []PermissionTargetRepoActionsGroup `pulumi:"groups"`
	// Users this permission target applies for.
	Users []PermissionTargetRepoActionsUser `pulumi:"users"`
}

// PermissionTargetRepoActionsInput is an input type that accepts PermissionTargetRepoActionsArgs and PermissionTargetRepoActionsOutput values.
// You can construct a concrete instance of `PermissionTargetRepoActionsInput` via:
//
//	PermissionTargetRepoActionsArgs{...}
type PermissionTargetRepoActionsInput interface {
	pulumi.Input

	ToPermissionTargetRepoActionsOutput() PermissionTargetRepoActionsOutput
	ToPermissionTargetRepoActionsOutputWithContext(context.Context) PermissionTargetRepoActionsOutput
}

type PermissionTargetRepoActionsArgs struct {
	// Groups this permission applies for.
	Groups PermissionTargetRepoActionsGroupArrayInput `pulumi:"groups"`
	// Users this permission target applies for.
	Users PermissionTargetRepoActionsUserArrayInput `pulumi:"users"`
}

func (PermissionTargetRepoActionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetRepoActions)(nil)).Elem()
}

func (i PermissionTargetRepoActionsArgs) ToPermissionTargetRepoActionsOutput() PermissionTargetRepoActionsOutput {
	return i.ToPermissionTargetRepoActionsOutputWithContext(context.Background())
}

func (i PermissionTargetRepoActionsArgs) ToPermissionTargetRepoActionsOutputWithContext(ctx context.Context) PermissionTargetRepoActionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetRepoActionsOutput)
}

func (i PermissionTargetRepoActionsArgs) ToPermissionTargetRepoActionsPtrOutput() PermissionTargetRepoActionsPtrOutput {
	return i.ToPermissionTargetRepoActionsPtrOutputWithContext(context.Background())
}

func (i PermissionTargetRepoActionsArgs) ToPermissionTargetRepoActionsPtrOutputWithContext(ctx context.Context) PermissionTargetRepoActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetRepoActionsOutput).ToPermissionTargetRepoActionsPtrOutputWithContext(ctx)
}

// PermissionTargetRepoActionsPtrInput is an input type that accepts PermissionTargetRepoActionsArgs, PermissionTargetRepoActionsPtr and PermissionTargetRepoActionsPtrOutput values.
// You can construct a concrete instance of `PermissionTargetRepoActionsPtrInput` via:
//
//	        PermissionTargetRepoActionsArgs{...}
//
//	or:
//
//	        nil
type PermissionTargetRepoActionsPtrInput interface {
	pulumi.Input

	ToPermissionTargetRepoActionsPtrOutput() PermissionTargetRepoActionsPtrOutput
	ToPermissionTargetRepoActionsPtrOutputWithContext(context.Context) PermissionTargetRepoActionsPtrOutput
}

type permissionTargetRepoActionsPtrType PermissionTargetRepoActionsArgs

func PermissionTargetRepoActionsPtr(v *PermissionTargetRepoActionsArgs) PermissionTargetRepoActionsPtrInput {
	return (*permissionTargetRepoActionsPtrType)(v)
}

func (*permissionTargetRepoActionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetRepoActions)(nil)).Elem()
}

func (i *permissionTargetRepoActionsPtrType) ToPermissionTargetRepoActionsPtrOutput() PermissionTargetRepoActionsPtrOutput {
	return i.ToPermissionTargetRepoActionsPtrOutputWithContext(context.Background())
}

func (i *permissionTargetRepoActionsPtrType) ToPermissionTargetRepoActionsPtrOutputWithContext(ctx context.Context) PermissionTargetRepoActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetRepoActionsPtrOutput)
}

type PermissionTargetRepoActionsOutput struct{ *pulumi.OutputState }

func (PermissionTargetRepoActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetRepoActions)(nil)).Elem()
}

func (o PermissionTargetRepoActionsOutput) ToPermissionTargetRepoActionsOutput() PermissionTargetRepoActionsOutput {
	return o
}

func (o PermissionTargetRepoActionsOutput) ToPermissionTargetRepoActionsOutputWithContext(ctx context.Context) PermissionTargetRepoActionsOutput {
	return o
}

func (o PermissionTargetRepoActionsOutput) ToPermissionTargetRepoActionsPtrOutput() PermissionTargetRepoActionsPtrOutput {
	return o.ToPermissionTargetRepoActionsPtrOutputWithContext(context.Background())
}

func (o PermissionTargetRepoActionsOutput) ToPermissionTargetRepoActionsPtrOutputWithContext(ctx context.Context) PermissionTargetRepoActionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PermissionTargetRepoActions) *PermissionTargetRepoActions {
		return &v
	}).(PermissionTargetRepoActionsPtrOutput)
}

// Groups this permission applies for.
func (o PermissionTargetRepoActionsOutput) Groups() PermissionTargetRepoActionsGroupArrayOutput {
	return o.ApplyT(func(v PermissionTargetRepoActions) []PermissionTargetRepoActionsGroup { return v.Groups }).(PermissionTargetRepoActionsGroupArrayOutput)
}

// Users this permission target applies for.
func (o PermissionTargetRepoActionsOutput) Users() PermissionTargetRepoActionsUserArrayOutput {
	return o.ApplyT(func(v PermissionTargetRepoActions) []PermissionTargetRepoActionsUser { return v.Users }).(PermissionTargetRepoActionsUserArrayOutput)
}

type PermissionTargetRepoActionsPtrOutput struct{ *pulumi.OutputState }

func (PermissionTargetRepoActionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetRepoActions)(nil)).Elem()
}

func (o PermissionTargetRepoActionsPtrOutput) ToPermissionTargetRepoActionsPtrOutput() PermissionTargetRepoActionsPtrOutput {
	return o
}

func (o PermissionTargetRepoActionsPtrOutput) ToPermissionTargetRepoActionsPtrOutputWithContext(ctx context.Context) PermissionTargetRepoActionsPtrOutput {
	return o
}

func (o PermissionTargetRepoActionsPtrOutput) Elem() PermissionTargetRepoActionsOutput {
	return o.ApplyT(func(v *PermissionTargetRepoActions) PermissionTargetRepoActions {
		if v != nil {
			return *v
		}
		var ret PermissionTargetRepoActions
		return ret
	}).(PermissionTargetRepoActionsOutput)
}

// Groups this permission applies for.
func (o PermissionTargetRepoActionsPtrOutput) Groups() PermissionTargetRepoActionsGroupArrayOutput {
	return o.ApplyT(func(v *PermissionTargetRepoActions) []PermissionTargetRepoActionsGroup {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(PermissionTargetRepoActionsGroupArrayOutput)
}

// Users this permission target applies for.
func (o PermissionTargetRepoActionsPtrOutput) Users() PermissionTargetRepoActionsUserArrayOutput {
	return o.ApplyT(func(v *PermissionTargetRepoActions) []PermissionTargetRepoActionsUser {
		if v == nil {
			return nil
		}
		return v.Users
	}).(PermissionTargetRepoActionsUserArrayOutput)
}

type PermissionTargetRepoActionsGroup struct {
	// Name of permission.
	Name        string   `pulumi:"name"`
	Permissions []string `pulumi:"permissions"`
}

// PermissionTargetRepoActionsGroupInput is an input type that accepts PermissionTargetRepoActionsGroupArgs and PermissionTargetRepoActionsGroupOutput values.
// You can construct a concrete instance of `PermissionTargetRepoActionsGroupInput` via:
//
//	PermissionTargetRepoActionsGroupArgs{...}
type PermissionTargetRepoActionsGroupInput interface {
	pulumi.Input

	ToPermissionTargetRepoActionsGroupOutput() PermissionTargetRepoActionsGroupOutput
	ToPermissionTargetRepoActionsGroupOutputWithContext(context.Context) PermissionTargetRepoActionsGroupOutput
}

type PermissionTargetRepoActionsGroupArgs struct {
	// Name of permission.
	Name        pulumi.StringInput      `pulumi:"name"`
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (PermissionTargetRepoActionsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetRepoActionsGroup)(nil)).Elem()
}

func (i PermissionTargetRepoActionsGroupArgs) ToPermissionTargetRepoActionsGroupOutput() PermissionTargetRepoActionsGroupOutput {
	return i.ToPermissionTargetRepoActionsGroupOutputWithContext(context.Background())
}

func (i PermissionTargetRepoActionsGroupArgs) ToPermissionTargetRepoActionsGroupOutputWithContext(ctx context.Context) PermissionTargetRepoActionsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetRepoActionsGroupOutput)
}

// PermissionTargetRepoActionsGroupArrayInput is an input type that accepts PermissionTargetRepoActionsGroupArray and PermissionTargetRepoActionsGroupArrayOutput values.
// You can construct a concrete instance of `PermissionTargetRepoActionsGroupArrayInput` via:
//
//	PermissionTargetRepoActionsGroupArray{ PermissionTargetRepoActionsGroupArgs{...} }
type PermissionTargetRepoActionsGroupArrayInput interface {
	pulumi.Input

	ToPermissionTargetRepoActionsGroupArrayOutput() PermissionTargetRepoActionsGroupArrayOutput
	ToPermissionTargetRepoActionsGroupArrayOutputWithContext(context.Context) PermissionTargetRepoActionsGroupArrayOutput
}

type PermissionTargetRepoActionsGroupArray []PermissionTargetRepoActionsGroupInput

func (PermissionTargetRepoActionsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetRepoActionsGroup)(nil)).Elem()
}

func (i PermissionTargetRepoActionsGroupArray) ToPermissionTargetRepoActionsGroupArrayOutput() PermissionTargetRepoActionsGroupArrayOutput {
	return i.ToPermissionTargetRepoActionsGroupArrayOutputWithContext(context.Background())
}

func (i PermissionTargetRepoActionsGroupArray) ToPermissionTargetRepoActionsGroupArrayOutputWithContext(ctx context.Context) PermissionTargetRepoActionsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetRepoActionsGroupArrayOutput)
}

type PermissionTargetRepoActionsGroupOutput struct{ *pulumi.OutputState }

func (PermissionTargetRepoActionsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetRepoActionsGroup)(nil)).Elem()
}

func (o PermissionTargetRepoActionsGroupOutput) ToPermissionTargetRepoActionsGroupOutput() PermissionTargetRepoActionsGroupOutput {
	return o
}

func (o PermissionTargetRepoActionsGroupOutput) ToPermissionTargetRepoActionsGroupOutputWithContext(ctx context.Context) PermissionTargetRepoActionsGroupOutput {
	return o
}

// Name of permission.
func (o PermissionTargetRepoActionsGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PermissionTargetRepoActionsGroup) string { return v.Name }).(pulumi.StringOutput)
}

func (o PermissionTargetRepoActionsGroupOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetRepoActionsGroup) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type PermissionTargetRepoActionsGroupArrayOutput struct{ *pulumi.OutputState }

func (PermissionTargetRepoActionsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetRepoActionsGroup)(nil)).Elem()
}

func (o PermissionTargetRepoActionsGroupArrayOutput) ToPermissionTargetRepoActionsGroupArrayOutput() PermissionTargetRepoActionsGroupArrayOutput {
	return o
}

func (o PermissionTargetRepoActionsGroupArrayOutput) ToPermissionTargetRepoActionsGroupArrayOutputWithContext(ctx context.Context) PermissionTargetRepoActionsGroupArrayOutput {
	return o
}

func (o PermissionTargetRepoActionsGroupArrayOutput) Index(i pulumi.IntInput) PermissionTargetRepoActionsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PermissionTargetRepoActionsGroup {
		return vs[0].([]PermissionTargetRepoActionsGroup)[vs[1].(int)]
	}).(PermissionTargetRepoActionsGroupOutput)
}

type PermissionTargetRepoActionsUser struct {
	// Name of permission.
	Name        string   `pulumi:"name"`
	Permissions []string `pulumi:"permissions"`
}

// PermissionTargetRepoActionsUserInput is an input type that accepts PermissionTargetRepoActionsUserArgs and PermissionTargetRepoActionsUserOutput values.
// You can construct a concrete instance of `PermissionTargetRepoActionsUserInput` via:
//
//	PermissionTargetRepoActionsUserArgs{...}
type PermissionTargetRepoActionsUserInput interface {
	pulumi.Input

	ToPermissionTargetRepoActionsUserOutput() PermissionTargetRepoActionsUserOutput
	ToPermissionTargetRepoActionsUserOutputWithContext(context.Context) PermissionTargetRepoActionsUserOutput
}

type PermissionTargetRepoActionsUserArgs struct {
	// Name of permission.
	Name        pulumi.StringInput      `pulumi:"name"`
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (PermissionTargetRepoActionsUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetRepoActionsUser)(nil)).Elem()
}

func (i PermissionTargetRepoActionsUserArgs) ToPermissionTargetRepoActionsUserOutput() PermissionTargetRepoActionsUserOutput {
	return i.ToPermissionTargetRepoActionsUserOutputWithContext(context.Background())
}

func (i PermissionTargetRepoActionsUserArgs) ToPermissionTargetRepoActionsUserOutputWithContext(ctx context.Context) PermissionTargetRepoActionsUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetRepoActionsUserOutput)
}

// PermissionTargetRepoActionsUserArrayInput is an input type that accepts PermissionTargetRepoActionsUserArray and PermissionTargetRepoActionsUserArrayOutput values.
// You can construct a concrete instance of `PermissionTargetRepoActionsUserArrayInput` via:
//
//	PermissionTargetRepoActionsUserArray{ PermissionTargetRepoActionsUserArgs{...} }
type PermissionTargetRepoActionsUserArrayInput interface {
	pulumi.Input

	ToPermissionTargetRepoActionsUserArrayOutput() PermissionTargetRepoActionsUserArrayOutput
	ToPermissionTargetRepoActionsUserArrayOutputWithContext(context.Context) PermissionTargetRepoActionsUserArrayOutput
}

type PermissionTargetRepoActionsUserArray []PermissionTargetRepoActionsUserInput

func (PermissionTargetRepoActionsUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetRepoActionsUser)(nil)).Elem()
}

func (i PermissionTargetRepoActionsUserArray) ToPermissionTargetRepoActionsUserArrayOutput() PermissionTargetRepoActionsUserArrayOutput {
	return i.ToPermissionTargetRepoActionsUserArrayOutputWithContext(context.Background())
}

func (i PermissionTargetRepoActionsUserArray) ToPermissionTargetRepoActionsUserArrayOutputWithContext(ctx context.Context) PermissionTargetRepoActionsUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetRepoActionsUserArrayOutput)
}

type PermissionTargetRepoActionsUserOutput struct{ *pulumi.OutputState }

func (PermissionTargetRepoActionsUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetRepoActionsUser)(nil)).Elem()
}

func (o PermissionTargetRepoActionsUserOutput) ToPermissionTargetRepoActionsUserOutput() PermissionTargetRepoActionsUserOutput {
	return o
}

func (o PermissionTargetRepoActionsUserOutput) ToPermissionTargetRepoActionsUserOutputWithContext(ctx context.Context) PermissionTargetRepoActionsUserOutput {
	return o
}

// Name of permission.
func (o PermissionTargetRepoActionsUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PermissionTargetRepoActionsUser) string { return v.Name }).(pulumi.StringOutput)
}

func (o PermissionTargetRepoActionsUserOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetRepoActionsUser) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type PermissionTargetRepoActionsUserArrayOutput struct{ *pulumi.OutputState }

func (PermissionTargetRepoActionsUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetRepoActionsUser)(nil)).Elem()
}

func (o PermissionTargetRepoActionsUserArrayOutput) ToPermissionTargetRepoActionsUserArrayOutput() PermissionTargetRepoActionsUserArrayOutput {
	return o
}

func (o PermissionTargetRepoActionsUserArrayOutput) ToPermissionTargetRepoActionsUserArrayOutputWithContext(ctx context.Context) PermissionTargetRepoActionsUserArrayOutput {
	return o
}

func (o PermissionTargetRepoActionsUserArrayOutput) Index(i pulumi.IntInput) PermissionTargetRepoActionsUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PermissionTargetRepoActionsUser {
		return vs[0].([]PermissionTargetRepoActionsUser)[vs[1].(int)]
	}).(PermissionTargetRepoActionsUserOutput)
}

type PermissionTargetsBuild struct {
	Actions *PermissionTargetsBuildActions `pulumi:"actions"`
	// Pattern of artifacts to exclude.
	ExcludesPatterns []string `pulumi:"excludesPatterns"`
	// Pattern of artifacts to include.
	IncludesPatterns []string `pulumi:"includesPatterns"`
	// List of repositories this permission target is applicable for. You can specify the name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
	Repositories []string `pulumi:"repositories"`
}

// PermissionTargetsBuildInput is an input type that accepts PermissionTargetsBuildArgs and PermissionTargetsBuildOutput values.
// You can construct a concrete instance of `PermissionTargetsBuildInput` via:
//
//	PermissionTargetsBuildArgs{...}
type PermissionTargetsBuildInput interface {
	pulumi.Input

	ToPermissionTargetsBuildOutput() PermissionTargetsBuildOutput
	ToPermissionTargetsBuildOutputWithContext(context.Context) PermissionTargetsBuildOutput
}

type PermissionTargetsBuildArgs struct {
	Actions PermissionTargetsBuildActionsPtrInput `pulumi:"actions"`
	// Pattern of artifacts to exclude.
	ExcludesPatterns pulumi.StringArrayInput `pulumi:"excludesPatterns"`
	// Pattern of artifacts to include.
	IncludesPatterns pulumi.StringArrayInput `pulumi:"includesPatterns"`
	// List of repositories this permission target is applicable for. You can specify the name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
	Repositories pulumi.StringArrayInput `pulumi:"repositories"`
}

func (PermissionTargetsBuildArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsBuild)(nil)).Elem()
}

func (i PermissionTargetsBuildArgs) ToPermissionTargetsBuildOutput() PermissionTargetsBuildOutput {
	return i.ToPermissionTargetsBuildOutputWithContext(context.Background())
}

func (i PermissionTargetsBuildArgs) ToPermissionTargetsBuildOutputWithContext(ctx context.Context) PermissionTargetsBuildOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsBuildOutput)
}

func (i PermissionTargetsBuildArgs) ToPermissionTargetsBuildPtrOutput() PermissionTargetsBuildPtrOutput {
	return i.ToPermissionTargetsBuildPtrOutputWithContext(context.Background())
}

func (i PermissionTargetsBuildArgs) ToPermissionTargetsBuildPtrOutputWithContext(ctx context.Context) PermissionTargetsBuildPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsBuildOutput).ToPermissionTargetsBuildPtrOutputWithContext(ctx)
}

// PermissionTargetsBuildPtrInput is an input type that accepts PermissionTargetsBuildArgs, PermissionTargetsBuildPtr and PermissionTargetsBuildPtrOutput values.
// You can construct a concrete instance of `PermissionTargetsBuildPtrInput` via:
//
//	        PermissionTargetsBuildArgs{...}
//
//	or:
//
//	        nil
type PermissionTargetsBuildPtrInput interface {
	pulumi.Input

	ToPermissionTargetsBuildPtrOutput() PermissionTargetsBuildPtrOutput
	ToPermissionTargetsBuildPtrOutputWithContext(context.Context) PermissionTargetsBuildPtrOutput
}

type permissionTargetsBuildPtrType PermissionTargetsBuildArgs

func PermissionTargetsBuildPtr(v *PermissionTargetsBuildArgs) PermissionTargetsBuildPtrInput {
	return (*permissionTargetsBuildPtrType)(v)
}

func (*permissionTargetsBuildPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetsBuild)(nil)).Elem()
}

func (i *permissionTargetsBuildPtrType) ToPermissionTargetsBuildPtrOutput() PermissionTargetsBuildPtrOutput {
	return i.ToPermissionTargetsBuildPtrOutputWithContext(context.Background())
}

func (i *permissionTargetsBuildPtrType) ToPermissionTargetsBuildPtrOutputWithContext(ctx context.Context) PermissionTargetsBuildPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsBuildPtrOutput)
}

type PermissionTargetsBuildOutput struct{ *pulumi.OutputState }

func (PermissionTargetsBuildOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsBuild)(nil)).Elem()
}

func (o PermissionTargetsBuildOutput) ToPermissionTargetsBuildOutput() PermissionTargetsBuildOutput {
	return o
}

func (o PermissionTargetsBuildOutput) ToPermissionTargetsBuildOutputWithContext(ctx context.Context) PermissionTargetsBuildOutput {
	return o
}

func (o PermissionTargetsBuildOutput) ToPermissionTargetsBuildPtrOutput() PermissionTargetsBuildPtrOutput {
	return o.ToPermissionTargetsBuildPtrOutputWithContext(context.Background())
}

func (o PermissionTargetsBuildOutput) ToPermissionTargetsBuildPtrOutputWithContext(ctx context.Context) PermissionTargetsBuildPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PermissionTargetsBuild) *PermissionTargetsBuild {
		return &v
	}).(PermissionTargetsBuildPtrOutput)
}

func (o PermissionTargetsBuildOutput) Actions() PermissionTargetsBuildActionsPtrOutput {
	return o.ApplyT(func(v PermissionTargetsBuild) *PermissionTargetsBuildActions { return v.Actions }).(PermissionTargetsBuildActionsPtrOutput)
}

// Pattern of artifacts to exclude.
func (o PermissionTargetsBuildOutput) ExcludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetsBuild) []string { return v.ExcludesPatterns }).(pulumi.StringArrayOutput)
}

// Pattern of artifacts to include.
func (o PermissionTargetsBuildOutput) IncludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetsBuild) []string { return v.IncludesPatterns }).(pulumi.StringArrayOutput)
}

// List of repositories this permission target is applicable for. You can specify the name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
func (o PermissionTargetsBuildOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetsBuild) []string { return v.Repositories }).(pulumi.StringArrayOutput)
}

type PermissionTargetsBuildPtrOutput struct{ *pulumi.OutputState }

func (PermissionTargetsBuildPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetsBuild)(nil)).Elem()
}

func (o PermissionTargetsBuildPtrOutput) ToPermissionTargetsBuildPtrOutput() PermissionTargetsBuildPtrOutput {
	return o
}

func (o PermissionTargetsBuildPtrOutput) ToPermissionTargetsBuildPtrOutputWithContext(ctx context.Context) PermissionTargetsBuildPtrOutput {
	return o
}

func (o PermissionTargetsBuildPtrOutput) Elem() PermissionTargetsBuildOutput {
	return o.ApplyT(func(v *PermissionTargetsBuild) PermissionTargetsBuild {
		if v != nil {
			return *v
		}
		var ret PermissionTargetsBuild
		return ret
	}).(PermissionTargetsBuildOutput)
}

func (o PermissionTargetsBuildPtrOutput) Actions() PermissionTargetsBuildActionsPtrOutput {
	return o.ApplyT(func(v *PermissionTargetsBuild) *PermissionTargetsBuildActions {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(PermissionTargetsBuildActionsPtrOutput)
}

// Pattern of artifacts to exclude.
func (o PermissionTargetsBuildPtrOutput) ExcludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetsBuild) []string {
		if v == nil {
			return nil
		}
		return v.ExcludesPatterns
	}).(pulumi.StringArrayOutput)
}

// Pattern of artifacts to include.
func (o PermissionTargetsBuildPtrOutput) IncludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetsBuild) []string {
		if v == nil {
			return nil
		}
		return v.IncludesPatterns
	}).(pulumi.StringArrayOutput)
}

// List of repositories this permission target is applicable for. You can specify the name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
func (o PermissionTargetsBuildPtrOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetsBuild) []string {
		if v == nil {
			return nil
		}
		return v.Repositories
	}).(pulumi.StringArrayOutput)
}

type PermissionTargetsBuildActions struct {
	// Groups this permission applies for.
	Groups []PermissionTargetsBuildActionsGroup `pulumi:"groups"`
	// Users this permission target applies for.
	Users []PermissionTargetsBuildActionsUser `pulumi:"users"`
}

// PermissionTargetsBuildActionsInput is an input type that accepts PermissionTargetsBuildActionsArgs and PermissionTargetsBuildActionsOutput values.
// You can construct a concrete instance of `PermissionTargetsBuildActionsInput` via:
//
//	PermissionTargetsBuildActionsArgs{...}
type PermissionTargetsBuildActionsInput interface {
	pulumi.Input

	ToPermissionTargetsBuildActionsOutput() PermissionTargetsBuildActionsOutput
	ToPermissionTargetsBuildActionsOutputWithContext(context.Context) PermissionTargetsBuildActionsOutput
}

type PermissionTargetsBuildActionsArgs struct {
	// Groups this permission applies for.
	Groups PermissionTargetsBuildActionsGroupArrayInput `pulumi:"groups"`
	// Users this permission target applies for.
	Users PermissionTargetsBuildActionsUserArrayInput `pulumi:"users"`
}

func (PermissionTargetsBuildActionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsBuildActions)(nil)).Elem()
}

func (i PermissionTargetsBuildActionsArgs) ToPermissionTargetsBuildActionsOutput() PermissionTargetsBuildActionsOutput {
	return i.ToPermissionTargetsBuildActionsOutputWithContext(context.Background())
}

func (i PermissionTargetsBuildActionsArgs) ToPermissionTargetsBuildActionsOutputWithContext(ctx context.Context) PermissionTargetsBuildActionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsBuildActionsOutput)
}

func (i PermissionTargetsBuildActionsArgs) ToPermissionTargetsBuildActionsPtrOutput() PermissionTargetsBuildActionsPtrOutput {
	return i.ToPermissionTargetsBuildActionsPtrOutputWithContext(context.Background())
}

func (i PermissionTargetsBuildActionsArgs) ToPermissionTargetsBuildActionsPtrOutputWithContext(ctx context.Context) PermissionTargetsBuildActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsBuildActionsOutput).ToPermissionTargetsBuildActionsPtrOutputWithContext(ctx)
}

// PermissionTargetsBuildActionsPtrInput is an input type that accepts PermissionTargetsBuildActionsArgs, PermissionTargetsBuildActionsPtr and PermissionTargetsBuildActionsPtrOutput values.
// You can construct a concrete instance of `PermissionTargetsBuildActionsPtrInput` via:
//
//	        PermissionTargetsBuildActionsArgs{...}
//
//	or:
//
//	        nil
type PermissionTargetsBuildActionsPtrInput interface {
	pulumi.Input

	ToPermissionTargetsBuildActionsPtrOutput() PermissionTargetsBuildActionsPtrOutput
	ToPermissionTargetsBuildActionsPtrOutputWithContext(context.Context) PermissionTargetsBuildActionsPtrOutput
}

type permissionTargetsBuildActionsPtrType PermissionTargetsBuildActionsArgs

func PermissionTargetsBuildActionsPtr(v *PermissionTargetsBuildActionsArgs) PermissionTargetsBuildActionsPtrInput {
	return (*permissionTargetsBuildActionsPtrType)(v)
}

func (*permissionTargetsBuildActionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetsBuildActions)(nil)).Elem()
}

func (i *permissionTargetsBuildActionsPtrType) ToPermissionTargetsBuildActionsPtrOutput() PermissionTargetsBuildActionsPtrOutput {
	return i.ToPermissionTargetsBuildActionsPtrOutputWithContext(context.Background())
}

func (i *permissionTargetsBuildActionsPtrType) ToPermissionTargetsBuildActionsPtrOutputWithContext(ctx context.Context) PermissionTargetsBuildActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsBuildActionsPtrOutput)
}

type PermissionTargetsBuildActionsOutput struct{ *pulumi.OutputState }

func (PermissionTargetsBuildActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsBuildActions)(nil)).Elem()
}

func (o PermissionTargetsBuildActionsOutput) ToPermissionTargetsBuildActionsOutput() PermissionTargetsBuildActionsOutput {
	return o
}

func (o PermissionTargetsBuildActionsOutput) ToPermissionTargetsBuildActionsOutputWithContext(ctx context.Context) PermissionTargetsBuildActionsOutput {
	return o
}

func (o PermissionTargetsBuildActionsOutput) ToPermissionTargetsBuildActionsPtrOutput() PermissionTargetsBuildActionsPtrOutput {
	return o.ToPermissionTargetsBuildActionsPtrOutputWithContext(context.Background())
}

func (o PermissionTargetsBuildActionsOutput) ToPermissionTargetsBuildActionsPtrOutputWithContext(ctx context.Context) PermissionTargetsBuildActionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PermissionTargetsBuildActions) *PermissionTargetsBuildActions {
		return &v
	}).(PermissionTargetsBuildActionsPtrOutput)
}

// Groups this permission applies for.
func (o PermissionTargetsBuildActionsOutput) Groups() PermissionTargetsBuildActionsGroupArrayOutput {
	return o.ApplyT(func(v PermissionTargetsBuildActions) []PermissionTargetsBuildActionsGroup { return v.Groups }).(PermissionTargetsBuildActionsGroupArrayOutput)
}

// Users this permission target applies for.
func (o PermissionTargetsBuildActionsOutput) Users() PermissionTargetsBuildActionsUserArrayOutput {
	return o.ApplyT(func(v PermissionTargetsBuildActions) []PermissionTargetsBuildActionsUser { return v.Users }).(PermissionTargetsBuildActionsUserArrayOutput)
}

type PermissionTargetsBuildActionsPtrOutput struct{ *pulumi.OutputState }

func (PermissionTargetsBuildActionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetsBuildActions)(nil)).Elem()
}

func (o PermissionTargetsBuildActionsPtrOutput) ToPermissionTargetsBuildActionsPtrOutput() PermissionTargetsBuildActionsPtrOutput {
	return o
}

func (o PermissionTargetsBuildActionsPtrOutput) ToPermissionTargetsBuildActionsPtrOutputWithContext(ctx context.Context) PermissionTargetsBuildActionsPtrOutput {
	return o
}

func (o PermissionTargetsBuildActionsPtrOutput) Elem() PermissionTargetsBuildActionsOutput {
	return o.ApplyT(func(v *PermissionTargetsBuildActions) PermissionTargetsBuildActions {
		if v != nil {
			return *v
		}
		var ret PermissionTargetsBuildActions
		return ret
	}).(PermissionTargetsBuildActionsOutput)
}

// Groups this permission applies for.
func (o PermissionTargetsBuildActionsPtrOutput) Groups() PermissionTargetsBuildActionsGroupArrayOutput {
	return o.ApplyT(func(v *PermissionTargetsBuildActions) []PermissionTargetsBuildActionsGroup {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(PermissionTargetsBuildActionsGroupArrayOutput)
}

// Users this permission target applies for.
func (o PermissionTargetsBuildActionsPtrOutput) Users() PermissionTargetsBuildActionsUserArrayOutput {
	return o.ApplyT(func(v *PermissionTargetsBuildActions) []PermissionTargetsBuildActionsUser {
		if v == nil {
			return nil
		}
		return v.Users
	}).(PermissionTargetsBuildActionsUserArrayOutput)
}

type PermissionTargetsBuildActionsGroup struct {
	// Name of permission.
	Name        string   `pulumi:"name"`
	Permissions []string `pulumi:"permissions"`
}

// PermissionTargetsBuildActionsGroupInput is an input type that accepts PermissionTargetsBuildActionsGroupArgs and PermissionTargetsBuildActionsGroupOutput values.
// You can construct a concrete instance of `PermissionTargetsBuildActionsGroupInput` via:
//
//	PermissionTargetsBuildActionsGroupArgs{...}
type PermissionTargetsBuildActionsGroupInput interface {
	pulumi.Input

	ToPermissionTargetsBuildActionsGroupOutput() PermissionTargetsBuildActionsGroupOutput
	ToPermissionTargetsBuildActionsGroupOutputWithContext(context.Context) PermissionTargetsBuildActionsGroupOutput
}

type PermissionTargetsBuildActionsGroupArgs struct {
	// Name of permission.
	Name        pulumi.StringInput      `pulumi:"name"`
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (PermissionTargetsBuildActionsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsBuildActionsGroup)(nil)).Elem()
}

func (i PermissionTargetsBuildActionsGroupArgs) ToPermissionTargetsBuildActionsGroupOutput() PermissionTargetsBuildActionsGroupOutput {
	return i.ToPermissionTargetsBuildActionsGroupOutputWithContext(context.Background())
}

func (i PermissionTargetsBuildActionsGroupArgs) ToPermissionTargetsBuildActionsGroupOutputWithContext(ctx context.Context) PermissionTargetsBuildActionsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsBuildActionsGroupOutput)
}

// PermissionTargetsBuildActionsGroupArrayInput is an input type that accepts PermissionTargetsBuildActionsGroupArray and PermissionTargetsBuildActionsGroupArrayOutput values.
// You can construct a concrete instance of `PermissionTargetsBuildActionsGroupArrayInput` via:
//
//	PermissionTargetsBuildActionsGroupArray{ PermissionTargetsBuildActionsGroupArgs{...} }
type PermissionTargetsBuildActionsGroupArrayInput interface {
	pulumi.Input

	ToPermissionTargetsBuildActionsGroupArrayOutput() PermissionTargetsBuildActionsGroupArrayOutput
	ToPermissionTargetsBuildActionsGroupArrayOutputWithContext(context.Context) PermissionTargetsBuildActionsGroupArrayOutput
}

type PermissionTargetsBuildActionsGroupArray []PermissionTargetsBuildActionsGroupInput

func (PermissionTargetsBuildActionsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetsBuildActionsGroup)(nil)).Elem()
}

func (i PermissionTargetsBuildActionsGroupArray) ToPermissionTargetsBuildActionsGroupArrayOutput() PermissionTargetsBuildActionsGroupArrayOutput {
	return i.ToPermissionTargetsBuildActionsGroupArrayOutputWithContext(context.Background())
}

func (i PermissionTargetsBuildActionsGroupArray) ToPermissionTargetsBuildActionsGroupArrayOutputWithContext(ctx context.Context) PermissionTargetsBuildActionsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsBuildActionsGroupArrayOutput)
}

type PermissionTargetsBuildActionsGroupOutput struct{ *pulumi.OutputState }

func (PermissionTargetsBuildActionsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsBuildActionsGroup)(nil)).Elem()
}

func (o PermissionTargetsBuildActionsGroupOutput) ToPermissionTargetsBuildActionsGroupOutput() PermissionTargetsBuildActionsGroupOutput {
	return o
}

func (o PermissionTargetsBuildActionsGroupOutput) ToPermissionTargetsBuildActionsGroupOutputWithContext(ctx context.Context) PermissionTargetsBuildActionsGroupOutput {
	return o
}

// Name of permission.
func (o PermissionTargetsBuildActionsGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PermissionTargetsBuildActionsGroup) string { return v.Name }).(pulumi.StringOutput)
}

func (o PermissionTargetsBuildActionsGroupOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetsBuildActionsGroup) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type PermissionTargetsBuildActionsGroupArrayOutput struct{ *pulumi.OutputState }

func (PermissionTargetsBuildActionsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetsBuildActionsGroup)(nil)).Elem()
}

func (o PermissionTargetsBuildActionsGroupArrayOutput) ToPermissionTargetsBuildActionsGroupArrayOutput() PermissionTargetsBuildActionsGroupArrayOutput {
	return o
}

func (o PermissionTargetsBuildActionsGroupArrayOutput) ToPermissionTargetsBuildActionsGroupArrayOutputWithContext(ctx context.Context) PermissionTargetsBuildActionsGroupArrayOutput {
	return o
}

func (o PermissionTargetsBuildActionsGroupArrayOutput) Index(i pulumi.IntInput) PermissionTargetsBuildActionsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PermissionTargetsBuildActionsGroup {
		return vs[0].([]PermissionTargetsBuildActionsGroup)[vs[1].(int)]
	}).(PermissionTargetsBuildActionsGroupOutput)
}

type PermissionTargetsBuildActionsUser struct {
	// Name of permission.
	Name        string   `pulumi:"name"`
	Permissions []string `pulumi:"permissions"`
}

// PermissionTargetsBuildActionsUserInput is an input type that accepts PermissionTargetsBuildActionsUserArgs and PermissionTargetsBuildActionsUserOutput values.
// You can construct a concrete instance of `PermissionTargetsBuildActionsUserInput` via:
//
//	PermissionTargetsBuildActionsUserArgs{...}
type PermissionTargetsBuildActionsUserInput interface {
	pulumi.Input

	ToPermissionTargetsBuildActionsUserOutput() PermissionTargetsBuildActionsUserOutput
	ToPermissionTargetsBuildActionsUserOutputWithContext(context.Context) PermissionTargetsBuildActionsUserOutput
}

type PermissionTargetsBuildActionsUserArgs struct {
	// Name of permission.
	Name        pulumi.StringInput      `pulumi:"name"`
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (PermissionTargetsBuildActionsUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsBuildActionsUser)(nil)).Elem()
}

func (i PermissionTargetsBuildActionsUserArgs) ToPermissionTargetsBuildActionsUserOutput() PermissionTargetsBuildActionsUserOutput {
	return i.ToPermissionTargetsBuildActionsUserOutputWithContext(context.Background())
}

func (i PermissionTargetsBuildActionsUserArgs) ToPermissionTargetsBuildActionsUserOutputWithContext(ctx context.Context) PermissionTargetsBuildActionsUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsBuildActionsUserOutput)
}

// PermissionTargetsBuildActionsUserArrayInput is an input type that accepts PermissionTargetsBuildActionsUserArray and PermissionTargetsBuildActionsUserArrayOutput values.
// You can construct a concrete instance of `PermissionTargetsBuildActionsUserArrayInput` via:
//
//	PermissionTargetsBuildActionsUserArray{ PermissionTargetsBuildActionsUserArgs{...} }
type PermissionTargetsBuildActionsUserArrayInput interface {
	pulumi.Input

	ToPermissionTargetsBuildActionsUserArrayOutput() PermissionTargetsBuildActionsUserArrayOutput
	ToPermissionTargetsBuildActionsUserArrayOutputWithContext(context.Context) PermissionTargetsBuildActionsUserArrayOutput
}

type PermissionTargetsBuildActionsUserArray []PermissionTargetsBuildActionsUserInput

func (PermissionTargetsBuildActionsUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetsBuildActionsUser)(nil)).Elem()
}

func (i PermissionTargetsBuildActionsUserArray) ToPermissionTargetsBuildActionsUserArrayOutput() PermissionTargetsBuildActionsUserArrayOutput {
	return i.ToPermissionTargetsBuildActionsUserArrayOutputWithContext(context.Background())
}

func (i PermissionTargetsBuildActionsUserArray) ToPermissionTargetsBuildActionsUserArrayOutputWithContext(ctx context.Context) PermissionTargetsBuildActionsUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsBuildActionsUserArrayOutput)
}

type PermissionTargetsBuildActionsUserOutput struct{ *pulumi.OutputState }

func (PermissionTargetsBuildActionsUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsBuildActionsUser)(nil)).Elem()
}

func (o PermissionTargetsBuildActionsUserOutput) ToPermissionTargetsBuildActionsUserOutput() PermissionTargetsBuildActionsUserOutput {
	return o
}

func (o PermissionTargetsBuildActionsUserOutput) ToPermissionTargetsBuildActionsUserOutputWithContext(ctx context.Context) PermissionTargetsBuildActionsUserOutput {
	return o
}

// Name of permission.
func (o PermissionTargetsBuildActionsUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PermissionTargetsBuildActionsUser) string { return v.Name }).(pulumi.StringOutput)
}

func (o PermissionTargetsBuildActionsUserOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetsBuildActionsUser) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type PermissionTargetsBuildActionsUserArrayOutput struct{ *pulumi.OutputState }

func (PermissionTargetsBuildActionsUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetsBuildActionsUser)(nil)).Elem()
}

func (o PermissionTargetsBuildActionsUserArrayOutput) ToPermissionTargetsBuildActionsUserArrayOutput() PermissionTargetsBuildActionsUserArrayOutput {
	return o
}

func (o PermissionTargetsBuildActionsUserArrayOutput) ToPermissionTargetsBuildActionsUserArrayOutputWithContext(ctx context.Context) PermissionTargetsBuildActionsUserArrayOutput {
	return o
}

func (o PermissionTargetsBuildActionsUserArrayOutput) Index(i pulumi.IntInput) PermissionTargetsBuildActionsUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PermissionTargetsBuildActionsUser {
		return vs[0].([]PermissionTargetsBuildActionsUser)[vs[1].(int)]
	}).(PermissionTargetsBuildActionsUserOutput)
}

type PermissionTargetsReleaseBundle struct {
	Actions *PermissionTargetsReleaseBundleActions `pulumi:"actions"`
	// Pattern of artifacts to exclude.
	ExcludesPatterns []string `pulumi:"excludesPatterns"`
	// Pattern of artifacts to include.
	IncludesPatterns []string `pulumi:"includesPatterns"`
	// List of repositories this permission target is applicable for. You can specify the name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
	Repositories []string `pulumi:"repositories"`
}

// PermissionTargetsReleaseBundleInput is an input type that accepts PermissionTargetsReleaseBundleArgs and PermissionTargetsReleaseBundleOutput values.
// You can construct a concrete instance of `PermissionTargetsReleaseBundleInput` via:
//
//	PermissionTargetsReleaseBundleArgs{...}
type PermissionTargetsReleaseBundleInput interface {
	pulumi.Input

	ToPermissionTargetsReleaseBundleOutput() PermissionTargetsReleaseBundleOutput
	ToPermissionTargetsReleaseBundleOutputWithContext(context.Context) PermissionTargetsReleaseBundleOutput
}

type PermissionTargetsReleaseBundleArgs struct {
	Actions PermissionTargetsReleaseBundleActionsPtrInput `pulumi:"actions"`
	// Pattern of artifacts to exclude.
	ExcludesPatterns pulumi.StringArrayInput `pulumi:"excludesPatterns"`
	// Pattern of artifacts to include.
	IncludesPatterns pulumi.StringArrayInput `pulumi:"includesPatterns"`
	// List of repositories this permission target is applicable for. You can specify the name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
	Repositories pulumi.StringArrayInput `pulumi:"repositories"`
}

func (PermissionTargetsReleaseBundleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsReleaseBundle)(nil)).Elem()
}

func (i PermissionTargetsReleaseBundleArgs) ToPermissionTargetsReleaseBundleOutput() PermissionTargetsReleaseBundleOutput {
	return i.ToPermissionTargetsReleaseBundleOutputWithContext(context.Background())
}

func (i PermissionTargetsReleaseBundleArgs) ToPermissionTargetsReleaseBundleOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsReleaseBundleOutput)
}

func (i PermissionTargetsReleaseBundleArgs) ToPermissionTargetsReleaseBundlePtrOutput() PermissionTargetsReleaseBundlePtrOutput {
	return i.ToPermissionTargetsReleaseBundlePtrOutputWithContext(context.Background())
}

func (i PermissionTargetsReleaseBundleArgs) ToPermissionTargetsReleaseBundlePtrOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundlePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsReleaseBundleOutput).ToPermissionTargetsReleaseBundlePtrOutputWithContext(ctx)
}

// PermissionTargetsReleaseBundlePtrInput is an input type that accepts PermissionTargetsReleaseBundleArgs, PermissionTargetsReleaseBundlePtr and PermissionTargetsReleaseBundlePtrOutput values.
// You can construct a concrete instance of `PermissionTargetsReleaseBundlePtrInput` via:
//
//	        PermissionTargetsReleaseBundleArgs{...}
//
//	or:
//
//	        nil
type PermissionTargetsReleaseBundlePtrInput interface {
	pulumi.Input

	ToPermissionTargetsReleaseBundlePtrOutput() PermissionTargetsReleaseBundlePtrOutput
	ToPermissionTargetsReleaseBundlePtrOutputWithContext(context.Context) PermissionTargetsReleaseBundlePtrOutput
}

type permissionTargetsReleaseBundlePtrType PermissionTargetsReleaseBundleArgs

func PermissionTargetsReleaseBundlePtr(v *PermissionTargetsReleaseBundleArgs) PermissionTargetsReleaseBundlePtrInput {
	return (*permissionTargetsReleaseBundlePtrType)(v)
}

func (*permissionTargetsReleaseBundlePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetsReleaseBundle)(nil)).Elem()
}

func (i *permissionTargetsReleaseBundlePtrType) ToPermissionTargetsReleaseBundlePtrOutput() PermissionTargetsReleaseBundlePtrOutput {
	return i.ToPermissionTargetsReleaseBundlePtrOutputWithContext(context.Background())
}

func (i *permissionTargetsReleaseBundlePtrType) ToPermissionTargetsReleaseBundlePtrOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundlePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsReleaseBundlePtrOutput)
}

type PermissionTargetsReleaseBundleOutput struct{ *pulumi.OutputState }

func (PermissionTargetsReleaseBundleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsReleaseBundle)(nil)).Elem()
}

func (o PermissionTargetsReleaseBundleOutput) ToPermissionTargetsReleaseBundleOutput() PermissionTargetsReleaseBundleOutput {
	return o
}

func (o PermissionTargetsReleaseBundleOutput) ToPermissionTargetsReleaseBundleOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundleOutput {
	return o
}

func (o PermissionTargetsReleaseBundleOutput) ToPermissionTargetsReleaseBundlePtrOutput() PermissionTargetsReleaseBundlePtrOutput {
	return o.ToPermissionTargetsReleaseBundlePtrOutputWithContext(context.Background())
}

func (o PermissionTargetsReleaseBundleOutput) ToPermissionTargetsReleaseBundlePtrOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundlePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PermissionTargetsReleaseBundle) *PermissionTargetsReleaseBundle {
		return &v
	}).(PermissionTargetsReleaseBundlePtrOutput)
}

func (o PermissionTargetsReleaseBundleOutput) Actions() PermissionTargetsReleaseBundleActionsPtrOutput {
	return o.ApplyT(func(v PermissionTargetsReleaseBundle) *PermissionTargetsReleaseBundleActions { return v.Actions }).(PermissionTargetsReleaseBundleActionsPtrOutput)
}

// Pattern of artifacts to exclude.
func (o PermissionTargetsReleaseBundleOutput) ExcludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetsReleaseBundle) []string { return v.ExcludesPatterns }).(pulumi.StringArrayOutput)
}

// Pattern of artifacts to include.
func (o PermissionTargetsReleaseBundleOutput) IncludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetsReleaseBundle) []string { return v.IncludesPatterns }).(pulumi.StringArrayOutput)
}

// List of repositories this permission target is applicable for. You can specify the name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
func (o PermissionTargetsReleaseBundleOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetsReleaseBundle) []string { return v.Repositories }).(pulumi.StringArrayOutput)
}

type PermissionTargetsReleaseBundlePtrOutput struct{ *pulumi.OutputState }

func (PermissionTargetsReleaseBundlePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetsReleaseBundle)(nil)).Elem()
}

func (o PermissionTargetsReleaseBundlePtrOutput) ToPermissionTargetsReleaseBundlePtrOutput() PermissionTargetsReleaseBundlePtrOutput {
	return o
}

func (o PermissionTargetsReleaseBundlePtrOutput) ToPermissionTargetsReleaseBundlePtrOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundlePtrOutput {
	return o
}

func (o PermissionTargetsReleaseBundlePtrOutput) Elem() PermissionTargetsReleaseBundleOutput {
	return o.ApplyT(func(v *PermissionTargetsReleaseBundle) PermissionTargetsReleaseBundle {
		if v != nil {
			return *v
		}
		var ret PermissionTargetsReleaseBundle
		return ret
	}).(PermissionTargetsReleaseBundleOutput)
}

func (o PermissionTargetsReleaseBundlePtrOutput) Actions() PermissionTargetsReleaseBundleActionsPtrOutput {
	return o.ApplyT(func(v *PermissionTargetsReleaseBundle) *PermissionTargetsReleaseBundleActions {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(PermissionTargetsReleaseBundleActionsPtrOutput)
}

// Pattern of artifacts to exclude.
func (o PermissionTargetsReleaseBundlePtrOutput) ExcludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetsReleaseBundle) []string {
		if v == nil {
			return nil
		}
		return v.ExcludesPatterns
	}).(pulumi.StringArrayOutput)
}

// Pattern of artifacts to include.
func (o PermissionTargetsReleaseBundlePtrOutput) IncludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetsReleaseBundle) []string {
		if v == nil {
			return nil
		}
		return v.IncludesPatterns
	}).(pulumi.StringArrayOutput)
}

// List of repositories this permission target is applicable for. You can specify the name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
func (o PermissionTargetsReleaseBundlePtrOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetsReleaseBundle) []string {
		if v == nil {
			return nil
		}
		return v.Repositories
	}).(pulumi.StringArrayOutput)
}

type PermissionTargetsReleaseBundleActions struct {
	// Groups this permission applies for.
	Groups []PermissionTargetsReleaseBundleActionsGroup `pulumi:"groups"`
	// Users this permission target applies for.
	Users []PermissionTargetsReleaseBundleActionsUser `pulumi:"users"`
}

// PermissionTargetsReleaseBundleActionsInput is an input type that accepts PermissionTargetsReleaseBundleActionsArgs and PermissionTargetsReleaseBundleActionsOutput values.
// You can construct a concrete instance of `PermissionTargetsReleaseBundleActionsInput` via:
//
//	PermissionTargetsReleaseBundleActionsArgs{...}
type PermissionTargetsReleaseBundleActionsInput interface {
	pulumi.Input

	ToPermissionTargetsReleaseBundleActionsOutput() PermissionTargetsReleaseBundleActionsOutput
	ToPermissionTargetsReleaseBundleActionsOutputWithContext(context.Context) PermissionTargetsReleaseBundleActionsOutput
}

type PermissionTargetsReleaseBundleActionsArgs struct {
	// Groups this permission applies for.
	Groups PermissionTargetsReleaseBundleActionsGroupArrayInput `pulumi:"groups"`
	// Users this permission target applies for.
	Users PermissionTargetsReleaseBundleActionsUserArrayInput `pulumi:"users"`
}

func (PermissionTargetsReleaseBundleActionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsReleaseBundleActions)(nil)).Elem()
}

func (i PermissionTargetsReleaseBundleActionsArgs) ToPermissionTargetsReleaseBundleActionsOutput() PermissionTargetsReleaseBundleActionsOutput {
	return i.ToPermissionTargetsReleaseBundleActionsOutputWithContext(context.Background())
}

func (i PermissionTargetsReleaseBundleActionsArgs) ToPermissionTargetsReleaseBundleActionsOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundleActionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsReleaseBundleActionsOutput)
}

func (i PermissionTargetsReleaseBundleActionsArgs) ToPermissionTargetsReleaseBundleActionsPtrOutput() PermissionTargetsReleaseBundleActionsPtrOutput {
	return i.ToPermissionTargetsReleaseBundleActionsPtrOutputWithContext(context.Background())
}

func (i PermissionTargetsReleaseBundleActionsArgs) ToPermissionTargetsReleaseBundleActionsPtrOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundleActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsReleaseBundleActionsOutput).ToPermissionTargetsReleaseBundleActionsPtrOutputWithContext(ctx)
}

// PermissionTargetsReleaseBundleActionsPtrInput is an input type that accepts PermissionTargetsReleaseBundleActionsArgs, PermissionTargetsReleaseBundleActionsPtr and PermissionTargetsReleaseBundleActionsPtrOutput values.
// You can construct a concrete instance of `PermissionTargetsReleaseBundleActionsPtrInput` via:
//
//	        PermissionTargetsReleaseBundleActionsArgs{...}
//
//	or:
//
//	        nil
type PermissionTargetsReleaseBundleActionsPtrInput interface {
	pulumi.Input

	ToPermissionTargetsReleaseBundleActionsPtrOutput() PermissionTargetsReleaseBundleActionsPtrOutput
	ToPermissionTargetsReleaseBundleActionsPtrOutputWithContext(context.Context) PermissionTargetsReleaseBundleActionsPtrOutput
}

type permissionTargetsReleaseBundleActionsPtrType PermissionTargetsReleaseBundleActionsArgs

func PermissionTargetsReleaseBundleActionsPtr(v *PermissionTargetsReleaseBundleActionsArgs) PermissionTargetsReleaseBundleActionsPtrInput {
	return (*permissionTargetsReleaseBundleActionsPtrType)(v)
}

func (*permissionTargetsReleaseBundleActionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetsReleaseBundleActions)(nil)).Elem()
}

func (i *permissionTargetsReleaseBundleActionsPtrType) ToPermissionTargetsReleaseBundleActionsPtrOutput() PermissionTargetsReleaseBundleActionsPtrOutput {
	return i.ToPermissionTargetsReleaseBundleActionsPtrOutputWithContext(context.Background())
}

func (i *permissionTargetsReleaseBundleActionsPtrType) ToPermissionTargetsReleaseBundleActionsPtrOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundleActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsReleaseBundleActionsPtrOutput)
}

type PermissionTargetsReleaseBundleActionsOutput struct{ *pulumi.OutputState }

func (PermissionTargetsReleaseBundleActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsReleaseBundleActions)(nil)).Elem()
}

func (o PermissionTargetsReleaseBundleActionsOutput) ToPermissionTargetsReleaseBundleActionsOutput() PermissionTargetsReleaseBundleActionsOutput {
	return o
}

func (o PermissionTargetsReleaseBundleActionsOutput) ToPermissionTargetsReleaseBundleActionsOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundleActionsOutput {
	return o
}

func (o PermissionTargetsReleaseBundleActionsOutput) ToPermissionTargetsReleaseBundleActionsPtrOutput() PermissionTargetsReleaseBundleActionsPtrOutput {
	return o.ToPermissionTargetsReleaseBundleActionsPtrOutputWithContext(context.Background())
}

func (o PermissionTargetsReleaseBundleActionsOutput) ToPermissionTargetsReleaseBundleActionsPtrOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundleActionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PermissionTargetsReleaseBundleActions) *PermissionTargetsReleaseBundleActions {
		return &v
	}).(PermissionTargetsReleaseBundleActionsPtrOutput)
}

// Groups this permission applies for.
func (o PermissionTargetsReleaseBundleActionsOutput) Groups() PermissionTargetsReleaseBundleActionsGroupArrayOutput {
	return o.ApplyT(func(v PermissionTargetsReleaseBundleActions) []PermissionTargetsReleaseBundleActionsGroup {
		return v.Groups
	}).(PermissionTargetsReleaseBundleActionsGroupArrayOutput)
}

// Users this permission target applies for.
func (o PermissionTargetsReleaseBundleActionsOutput) Users() PermissionTargetsReleaseBundleActionsUserArrayOutput {
	return o.ApplyT(func(v PermissionTargetsReleaseBundleActions) []PermissionTargetsReleaseBundleActionsUser {
		return v.Users
	}).(PermissionTargetsReleaseBundleActionsUserArrayOutput)
}

type PermissionTargetsReleaseBundleActionsPtrOutput struct{ *pulumi.OutputState }

func (PermissionTargetsReleaseBundleActionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetsReleaseBundleActions)(nil)).Elem()
}

func (o PermissionTargetsReleaseBundleActionsPtrOutput) ToPermissionTargetsReleaseBundleActionsPtrOutput() PermissionTargetsReleaseBundleActionsPtrOutput {
	return o
}

func (o PermissionTargetsReleaseBundleActionsPtrOutput) ToPermissionTargetsReleaseBundleActionsPtrOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundleActionsPtrOutput {
	return o
}

func (o PermissionTargetsReleaseBundleActionsPtrOutput) Elem() PermissionTargetsReleaseBundleActionsOutput {
	return o.ApplyT(func(v *PermissionTargetsReleaseBundleActions) PermissionTargetsReleaseBundleActions {
		if v != nil {
			return *v
		}
		var ret PermissionTargetsReleaseBundleActions
		return ret
	}).(PermissionTargetsReleaseBundleActionsOutput)
}

// Groups this permission applies for.
func (o PermissionTargetsReleaseBundleActionsPtrOutput) Groups() PermissionTargetsReleaseBundleActionsGroupArrayOutput {
	return o.ApplyT(func(v *PermissionTargetsReleaseBundleActions) []PermissionTargetsReleaseBundleActionsGroup {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(PermissionTargetsReleaseBundleActionsGroupArrayOutput)
}

// Users this permission target applies for.
func (o PermissionTargetsReleaseBundleActionsPtrOutput) Users() PermissionTargetsReleaseBundleActionsUserArrayOutput {
	return o.ApplyT(func(v *PermissionTargetsReleaseBundleActions) []PermissionTargetsReleaseBundleActionsUser {
		if v == nil {
			return nil
		}
		return v.Users
	}).(PermissionTargetsReleaseBundleActionsUserArrayOutput)
}

type PermissionTargetsReleaseBundleActionsGroup struct {
	// Name of permission.
	Name        string   `pulumi:"name"`
	Permissions []string `pulumi:"permissions"`
}

// PermissionTargetsReleaseBundleActionsGroupInput is an input type that accepts PermissionTargetsReleaseBundleActionsGroupArgs and PermissionTargetsReleaseBundleActionsGroupOutput values.
// You can construct a concrete instance of `PermissionTargetsReleaseBundleActionsGroupInput` via:
//
//	PermissionTargetsReleaseBundleActionsGroupArgs{...}
type PermissionTargetsReleaseBundleActionsGroupInput interface {
	pulumi.Input

	ToPermissionTargetsReleaseBundleActionsGroupOutput() PermissionTargetsReleaseBundleActionsGroupOutput
	ToPermissionTargetsReleaseBundleActionsGroupOutputWithContext(context.Context) PermissionTargetsReleaseBundleActionsGroupOutput
}

type PermissionTargetsReleaseBundleActionsGroupArgs struct {
	// Name of permission.
	Name        pulumi.StringInput      `pulumi:"name"`
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (PermissionTargetsReleaseBundleActionsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsReleaseBundleActionsGroup)(nil)).Elem()
}

func (i PermissionTargetsReleaseBundleActionsGroupArgs) ToPermissionTargetsReleaseBundleActionsGroupOutput() PermissionTargetsReleaseBundleActionsGroupOutput {
	return i.ToPermissionTargetsReleaseBundleActionsGroupOutputWithContext(context.Background())
}

func (i PermissionTargetsReleaseBundleActionsGroupArgs) ToPermissionTargetsReleaseBundleActionsGroupOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundleActionsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsReleaseBundleActionsGroupOutput)
}

// PermissionTargetsReleaseBundleActionsGroupArrayInput is an input type that accepts PermissionTargetsReleaseBundleActionsGroupArray and PermissionTargetsReleaseBundleActionsGroupArrayOutput values.
// You can construct a concrete instance of `PermissionTargetsReleaseBundleActionsGroupArrayInput` via:
//
//	PermissionTargetsReleaseBundleActionsGroupArray{ PermissionTargetsReleaseBundleActionsGroupArgs{...} }
type PermissionTargetsReleaseBundleActionsGroupArrayInput interface {
	pulumi.Input

	ToPermissionTargetsReleaseBundleActionsGroupArrayOutput() PermissionTargetsReleaseBundleActionsGroupArrayOutput
	ToPermissionTargetsReleaseBundleActionsGroupArrayOutputWithContext(context.Context) PermissionTargetsReleaseBundleActionsGroupArrayOutput
}

type PermissionTargetsReleaseBundleActionsGroupArray []PermissionTargetsReleaseBundleActionsGroupInput

func (PermissionTargetsReleaseBundleActionsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetsReleaseBundleActionsGroup)(nil)).Elem()
}

func (i PermissionTargetsReleaseBundleActionsGroupArray) ToPermissionTargetsReleaseBundleActionsGroupArrayOutput() PermissionTargetsReleaseBundleActionsGroupArrayOutput {
	return i.ToPermissionTargetsReleaseBundleActionsGroupArrayOutputWithContext(context.Background())
}

func (i PermissionTargetsReleaseBundleActionsGroupArray) ToPermissionTargetsReleaseBundleActionsGroupArrayOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundleActionsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsReleaseBundleActionsGroupArrayOutput)
}

type PermissionTargetsReleaseBundleActionsGroupOutput struct{ *pulumi.OutputState }

func (PermissionTargetsReleaseBundleActionsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsReleaseBundleActionsGroup)(nil)).Elem()
}

func (o PermissionTargetsReleaseBundleActionsGroupOutput) ToPermissionTargetsReleaseBundleActionsGroupOutput() PermissionTargetsReleaseBundleActionsGroupOutput {
	return o
}

func (o PermissionTargetsReleaseBundleActionsGroupOutput) ToPermissionTargetsReleaseBundleActionsGroupOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundleActionsGroupOutput {
	return o
}

// Name of permission.
func (o PermissionTargetsReleaseBundleActionsGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PermissionTargetsReleaseBundleActionsGroup) string { return v.Name }).(pulumi.StringOutput)
}

func (o PermissionTargetsReleaseBundleActionsGroupOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetsReleaseBundleActionsGroup) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type PermissionTargetsReleaseBundleActionsGroupArrayOutput struct{ *pulumi.OutputState }

func (PermissionTargetsReleaseBundleActionsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetsReleaseBundleActionsGroup)(nil)).Elem()
}

func (o PermissionTargetsReleaseBundleActionsGroupArrayOutput) ToPermissionTargetsReleaseBundleActionsGroupArrayOutput() PermissionTargetsReleaseBundleActionsGroupArrayOutput {
	return o
}

func (o PermissionTargetsReleaseBundleActionsGroupArrayOutput) ToPermissionTargetsReleaseBundleActionsGroupArrayOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundleActionsGroupArrayOutput {
	return o
}

func (o PermissionTargetsReleaseBundleActionsGroupArrayOutput) Index(i pulumi.IntInput) PermissionTargetsReleaseBundleActionsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PermissionTargetsReleaseBundleActionsGroup {
		return vs[0].([]PermissionTargetsReleaseBundleActionsGroup)[vs[1].(int)]
	}).(PermissionTargetsReleaseBundleActionsGroupOutput)
}

type PermissionTargetsReleaseBundleActionsUser struct {
	// Name of permission.
	Name        string   `pulumi:"name"`
	Permissions []string `pulumi:"permissions"`
}

// PermissionTargetsReleaseBundleActionsUserInput is an input type that accepts PermissionTargetsReleaseBundleActionsUserArgs and PermissionTargetsReleaseBundleActionsUserOutput values.
// You can construct a concrete instance of `PermissionTargetsReleaseBundleActionsUserInput` via:
//
//	PermissionTargetsReleaseBundleActionsUserArgs{...}
type PermissionTargetsReleaseBundleActionsUserInput interface {
	pulumi.Input

	ToPermissionTargetsReleaseBundleActionsUserOutput() PermissionTargetsReleaseBundleActionsUserOutput
	ToPermissionTargetsReleaseBundleActionsUserOutputWithContext(context.Context) PermissionTargetsReleaseBundleActionsUserOutput
}

type PermissionTargetsReleaseBundleActionsUserArgs struct {
	// Name of permission.
	Name        pulumi.StringInput      `pulumi:"name"`
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (PermissionTargetsReleaseBundleActionsUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsReleaseBundleActionsUser)(nil)).Elem()
}

func (i PermissionTargetsReleaseBundleActionsUserArgs) ToPermissionTargetsReleaseBundleActionsUserOutput() PermissionTargetsReleaseBundleActionsUserOutput {
	return i.ToPermissionTargetsReleaseBundleActionsUserOutputWithContext(context.Background())
}

func (i PermissionTargetsReleaseBundleActionsUserArgs) ToPermissionTargetsReleaseBundleActionsUserOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundleActionsUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsReleaseBundleActionsUserOutput)
}

// PermissionTargetsReleaseBundleActionsUserArrayInput is an input type that accepts PermissionTargetsReleaseBundleActionsUserArray and PermissionTargetsReleaseBundleActionsUserArrayOutput values.
// You can construct a concrete instance of `PermissionTargetsReleaseBundleActionsUserArrayInput` via:
//
//	PermissionTargetsReleaseBundleActionsUserArray{ PermissionTargetsReleaseBundleActionsUserArgs{...} }
type PermissionTargetsReleaseBundleActionsUserArrayInput interface {
	pulumi.Input

	ToPermissionTargetsReleaseBundleActionsUserArrayOutput() PermissionTargetsReleaseBundleActionsUserArrayOutput
	ToPermissionTargetsReleaseBundleActionsUserArrayOutputWithContext(context.Context) PermissionTargetsReleaseBundleActionsUserArrayOutput
}

type PermissionTargetsReleaseBundleActionsUserArray []PermissionTargetsReleaseBundleActionsUserInput

func (PermissionTargetsReleaseBundleActionsUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetsReleaseBundleActionsUser)(nil)).Elem()
}

func (i PermissionTargetsReleaseBundleActionsUserArray) ToPermissionTargetsReleaseBundleActionsUserArrayOutput() PermissionTargetsReleaseBundleActionsUserArrayOutput {
	return i.ToPermissionTargetsReleaseBundleActionsUserArrayOutputWithContext(context.Background())
}

func (i PermissionTargetsReleaseBundleActionsUserArray) ToPermissionTargetsReleaseBundleActionsUserArrayOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundleActionsUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsReleaseBundleActionsUserArrayOutput)
}

type PermissionTargetsReleaseBundleActionsUserOutput struct{ *pulumi.OutputState }

func (PermissionTargetsReleaseBundleActionsUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsReleaseBundleActionsUser)(nil)).Elem()
}

func (o PermissionTargetsReleaseBundleActionsUserOutput) ToPermissionTargetsReleaseBundleActionsUserOutput() PermissionTargetsReleaseBundleActionsUserOutput {
	return o
}

func (o PermissionTargetsReleaseBundleActionsUserOutput) ToPermissionTargetsReleaseBundleActionsUserOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundleActionsUserOutput {
	return o
}

// Name of permission.
func (o PermissionTargetsReleaseBundleActionsUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PermissionTargetsReleaseBundleActionsUser) string { return v.Name }).(pulumi.StringOutput)
}

func (o PermissionTargetsReleaseBundleActionsUserOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetsReleaseBundleActionsUser) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type PermissionTargetsReleaseBundleActionsUserArrayOutput struct{ *pulumi.OutputState }

func (PermissionTargetsReleaseBundleActionsUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetsReleaseBundleActionsUser)(nil)).Elem()
}

func (o PermissionTargetsReleaseBundleActionsUserArrayOutput) ToPermissionTargetsReleaseBundleActionsUserArrayOutput() PermissionTargetsReleaseBundleActionsUserArrayOutput {
	return o
}

func (o PermissionTargetsReleaseBundleActionsUserArrayOutput) ToPermissionTargetsReleaseBundleActionsUserArrayOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundleActionsUserArrayOutput {
	return o
}

func (o PermissionTargetsReleaseBundleActionsUserArrayOutput) Index(i pulumi.IntInput) PermissionTargetsReleaseBundleActionsUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PermissionTargetsReleaseBundleActionsUser {
		return vs[0].([]PermissionTargetsReleaseBundleActionsUser)[vs[1].(int)]
	}).(PermissionTargetsReleaseBundleActionsUserOutput)
}

type PermissionTargetsRepo struct {
	Actions *PermissionTargetsRepoActions `pulumi:"actions"`
	// Pattern of artifacts to exclude.
	ExcludesPatterns []string `pulumi:"excludesPatterns"`
	// Pattern of artifacts to include.
	IncludesPatterns []string `pulumi:"includesPatterns"`
	// List of repositories this permission target is applicable for. You can specify the name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
	Repositories []string `pulumi:"repositories"`
}

// PermissionTargetsRepoInput is an input type that accepts PermissionTargetsRepoArgs and PermissionTargetsRepoOutput values.
// You can construct a concrete instance of `PermissionTargetsRepoInput` via:
//
//	PermissionTargetsRepoArgs{...}
type PermissionTargetsRepoInput interface {
	pulumi.Input

	ToPermissionTargetsRepoOutput() PermissionTargetsRepoOutput
	ToPermissionTargetsRepoOutputWithContext(context.Context) PermissionTargetsRepoOutput
}

type PermissionTargetsRepoArgs struct {
	Actions PermissionTargetsRepoActionsPtrInput `pulumi:"actions"`
	// Pattern of artifacts to exclude.
	ExcludesPatterns pulumi.StringArrayInput `pulumi:"excludesPatterns"`
	// Pattern of artifacts to include.
	IncludesPatterns pulumi.StringArrayInput `pulumi:"includesPatterns"`
	// List of repositories this permission target is applicable for. You can specify the name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
	Repositories pulumi.StringArrayInput `pulumi:"repositories"`
}

func (PermissionTargetsRepoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsRepo)(nil)).Elem()
}

func (i PermissionTargetsRepoArgs) ToPermissionTargetsRepoOutput() PermissionTargetsRepoOutput {
	return i.ToPermissionTargetsRepoOutputWithContext(context.Background())
}

func (i PermissionTargetsRepoArgs) ToPermissionTargetsRepoOutputWithContext(ctx context.Context) PermissionTargetsRepoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsRepoOutput)
}

func (i PermissionTargetsRepoArgs) ToPermissionTargetsRepoPtrOutput() PermissionTargetsRepoPtrOutput {
	return i.ToPermissionTargetsRepoPtrOutputWithContext(context.Background())
}

func (i PermissionTargetsRepoArgs) ToPermissionTargetsRepoPtrOutputWithContext(ctx context.Context) PermissionTargetsRepoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsRepoOutput).ToPermissionTargetsRepoPtrOutputWithContext(ctx)
}

// PermissionTargetsRepoPtrInput is an input type that accepts PermissionTargetsRepoArgs, PermissionTargetsRepoPtr and PermissionTargetsRepoPtrOutput values.
// You can construct a concrete instance of `PermissionTargetsRepoPtrInput` via:
//
//	        PermissionTargetsRepoArgs{...}
//
//	or:
//
//	        nil
type PermissionTargetsRepoPtrInput interface {
	pulumi.Input

	ToPermissionTargetsRepoPtrOutput() PermissionTargetsRepoPtrOutput
	ToPermissionTargetsRepoPtrOutputWithContext(context.Context) PermissionTargetsRepoPtrOutput
}

type permissionTargetsRepoPtrType PermissionTargetsRepoArgs

func PermissionTargetsRepoPtr(v *PermissionTargetsRepoArgs) PermissionTargetsRepoPtrInput {
	return (*permissionTargetsRepoPtrType)(v)
}

func (*permissionTargetsRepoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetsRepo)(nil)).Elem()
}

func (i *permissionTargetsRepoPtrType) ToPermissionTargetsRepoPtrOutput() PermissionTargetsRepoPtrOutput {
	return i.ToPermissionTargetsRepoPtrOutputWithContext(context.Background())
}

func (i *permissionTargetsRepoPtrType) ToPermissionTargetsRepoPtrOutputWithContext(ctx context.Context) PermissionTargetsRepoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsRepoPtrOutput)
}

type PermissionTargetsRepoOutput struct{ *pulumi.OutputState }

func (PermissionTargetsRepoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsRepo)(nil)).Elem()
}

func (o PermissionTargetsRepoOutput) ToPermissionTargetsRepoOutput() PermissionTargetsRepoOutput {
	return o
}

func (o PermissionTargetsRepoOutput) ToPermissionTargetsRepoOutputWithContext(ctx context.Context) PermissionTargetsRepoOutput {
	return o
}

func (o PermissionTargetsRepoOutput) ToPermissionTargetsRepoPtrOutput() PermissionTargetsRepoPtrOutput {
	return o.ToPermissionTargetsRepoPtrOutputWithContext(context.Background())
}

func (o PermissionTargetsRepoOutput) ToPermissionTargetsRepoPtrOutputWithContext(ctx context.Context) PermissionTargetsRepoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PermissionTargetsRepo) *PermissionTargetsRepo {
		return &v
	}).(PermissionTargetsRepoPtrOutput)
}

func (o PermissionTargetsRepoOutput) Actions() PermissionTargetsRepoActionsPtrOutput {
	return o.ApplyT(func(v PermissionTargetsRepo) *PermissionTargetsRepoActions { return v.Actions }).(PermissionTargetsRepoActionsPtrOutput)
}

// Pattern of artifacts to exclude.
func (o PermissionTargetsRepoOutput) ExcludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetsRepo) []string { return v.ExcludesPatterns }).(pulumi.StringArrayOutput)
}

// Pattern of artifacts to include.
func (o PermissionTargetsRepoOutput) IncludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetsRepo) []string { return v.IncludesPatterns }).(pulumi.StringArrayOutput)
}

// List of repositories this permission target is applicable for. You can specify the name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
func (o PermissionTargetsRepoOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetsRepo) []string { return v.Repositories }).(pulumi.StringArrayOutput)
}

type PermissionTargetsRepoPtrOutput struct{ *pulumi.OutputState }

func (PermissionTargetsRepoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetsRepo)(nil)).Elem()
}

func (o PermissionTargetsRepoPtrOutput) ToPermissionTargetsRepoPtrOutput() PermissionTargetsRepoPtrOutput {
	return o
}

func (o PermissionTargetsRepoPtrOutput) ToPermissionTargetsRepoPtrOutputWithContext(ctx context.Context) PermissionTargetsRepoPtrOutput {
	return o
}

func (o PermissionTargetsRepoPtrOutput) Elem() PermissionTargetsRepoOutput {
	return o.ApplyT(func(v *PermissionTargetsRepo) PermissionTargetsRepo {
		if v != nil {
			return *v
		}
		var ret PermissionTargetsRepo
		return ret
	}).(PermissionTargetsRepoOutput)
}

func (o PermissionTargetsRepoPtrOutput) Actions() PermissionTargetsRepoActionsPtrOutput {
	return o.ApplyT(func(v *PermissionTargetsRepo) *PermissionTargetsRepoActions {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(PermissionTargetsRepoActionsPtrOutput)
}

// Pattern of artifacts to exclude.
func (o PermissionTargetsRepoPtrOutput) ExcludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetsRepo) []string {
		if v == nil {
			return nil
		}
		return v.ExcludesPatterns
	}).(pulumi.StringArrayOutput)
}

// Pattern of artifacts to include.
func (o PermissionTargetsRepoPtrOutput) IncludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetsRepo) []string {
		if v == nil {
			return nil
		}
		return v.IncludesPatterns
	}).(pulumi.StringArrayOutput)
}

// List of repositories this permission target is applicable for. You can specify the name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
func (o PermissionTargetsRepoPtrOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetsRepo) []string {
		if v == nil {
			return nil
		}
		return v.Repositories
	}).(pulumi.StringArrayOutput)
}

type PermissionTargetsRepoActions struct {
	// Groups this permission applies for.
	Groups []PermissionTargetsRepoActionsGroup `pulumi:"groups"`
	// Users this permission target applies for.
	Users []PermissionTargetsRepoActionsUser `pulumi:"users"`
}

// PermissionTargetsRepoActionsInput is an input type that accepts PermissionTargetsRepoActionsArgs and PermissionTargetsRepoActionsOutput values.
// You can construct a concrete instance of `PermissionTargetsRepoActionsInput` via:
//
//	PermissionTargetsRepoActionsArgs{...}
type PermissionTargetsRepoActionsInput interface {
	pulumi.Input

	ToPermissionTargetsRepoActionsOutput() PermissionTargetsRepoActionsOutput
	ToPermissionTargetsRepoActionsOutputWithContext(context.Context) PermissionTargetsRepoActionsOutput
}

type PermissionTargetsRepoActionsArgs struct {
	// Groups this permission applies for.
	Groups PermissionTargetsRepoActionsGroupArrayInput `pulumi:"groups"`
	// Users this permission target applies for.
	Users PermissionTargetsRepoActionsUserArrayInput `pulumi:"users"`
}

func (PermissionTargetsRepoActionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsRepoActions)(nil)).Elem()
}

func (i PermissionTargetsRepoActionsArgs) ToPermissionTargetsRepoActionsOutput() PermissionTargetsRepoActionsOutput {
	return i.ToPermissionTargetsRepoActionsOutputWithContext(context.Background())
}

func (i PermissionTargetsRepoActionsArgs) ToPermissionTargetsRepoActionsOutputWithContext(ctx context.Context) PermissionTargetsRepoActionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsRepoActionsOutput)
}

func (i PermissionTargetsRepoActionsArgs) ToPermissionTargetsRepoActionsPtrOutput() PermissionTargetsRepoActionsPtrOutput {
	return i.ToPermissionTargetsRepoActionsPtrOutputWithContext(context.Background())
}

func (i PermissionTargetsRepoActionsArgs) ToPermissionTargetsRepoActionsPtrOutputWithContext(ctx context.Context) PermissionTargetsRepoActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsRepoActionsOutput).ToPermissionTargetsRepoActionsPtrOutputWithContext(ctx)
}

// PermissionTargetsRepoActionsPtrInput is an input type that accepts PermissionTargetsRepoActionsArgs, PermissionTargetsRepoActionsPtr and PermissionTargetsRepoActionsPtrOutput values.
// You can construct a concrete instance of `PermissionTargetsRepoActionsPtrInput` via:
//
//	        PermissionTargetsRepoActionsArgs{...}
//
//	or:
//
//	        nil
type PermissionTargetsRepoActionsPtrInput interface {
	pulumi.Input

	ToPermissionTargetsRepoActionsPtrOutput() PermissionTargetsRepoActionsPtrOutput
	ToPermissionTargetsRepoActionsPtrOutputWithContext(context.Context) PermissionTargetsRepoActionsPtrOutput
}

type permissionTargetsRepoActionsPtrType PermissionTargetsRepoActionsArgs

func PermissionTargetsRepoActionsPtr(v *PermissionTargetsRepoActionsArgs) PermissionTargetsRepoActionsPtrInput {
	return (*permissionTargetsRepoActionsPtrType)(v)
}

func (*permissionTargetsRepoActionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetsRepoActions)(nil)).Elem()
}

func (i *permissionTargetsRepoActionsPtrType) ToPermissionTargetsRepoActionsPtrOutput() PermissionTargetsRepoActionsPtrOutput {
	return i.ToPermissionTargetsRepoActionsPtrOutputWithContext(context.Background())
}

func (i *permissionTargetsRepoActionsPtrType) ToPermissionTargetsRepoActionsPtrOutputWithContext(ctx context.Context) PermissionTargetsRepoActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsRepoActionsPtrOutput)
}

type PermissionTargetsRepoActionsOutput struct{ *pulumi.OutputState }

func (PermissionTargetsRepoActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsRepoActions)(nil)).Elem()
}

func (o PermissionTargetsRepoActionsOutput) ToPermissionTargetsRepoActionsOutput() PermissionTargetsRepoActionsOutput {
	return o
}

func (o PermissionTargetsRepoActionsOutput) ToPermissionTargetsRepoActionsOutputWithContext(ctx context.Context) PermissionTargetsRepoActionsOutput {
	return o
}

func (o PermissionTargetsRepoActionsOutput) ToPermissionTargetsRepoActionsPtrOutput() PermissionTargetsRepoActionsPtrOutput {
	return o.ToPermissionTargetsRepoActionsPtrOutputWithContext(context.Background())
}

func (o PermissionTargetsRepoActionsOutput) ToPermissionTargetsRepoActionsPtrOutputWithContext(ctx context.Context) PermissionTargetsRepoActionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PermissionTargetsRepoActions) *PermissionTargetsRepoActions {
		return &v
	}).(PermissionTargetsRepoActionsPtrOutput)
}

// Groups this permission applies for.
func (o PermissionTargetsRepoActionsOutput) Groups() PermissionTargetsRepoActionsGroupArrayOutput {
	return o.ApplyT(func(v PermissionTargetsRepoActions) []PermissionTargetsRepoActionsGroup { return v.Groups }).(PermissionTargetsRepoActionsGroupArrayOutput)
}

// Users this permission target applies for.
func (o PermissionTargetsRepoActionsOutput) Users() PermissionTargetsRepoActionsUserArrayOutput {
	return o.ApplyT(func(v PermissionTargetsRepoActions) []PermissionTargetsRepoActionsUser { return v.Users }).(PermissionTargetsRepoActionsUserArrayOutput)
}

type PermissionTargetsRepoActionsPtrOutput struct{ *pulumi.OutputState }

func (PermissionTargetsRepoActionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetsRepoActions)(nil)).Elem()
}

func (o PermissionTargetsRepoActionsPtrOutput) ToPermissionTargetsRepoActionsPtrOutput() PermissionTargetsRepoActionsPtrOutput {
	return o
}

func (o PermissionTargetsRepoActionsPtrOutput) ToPermissionTargetsRepoActionsPtrOutputWithContext(ctx context.Context) PermissionTargetsRepoActionsPtrOutput {
	return o
}

func (o PermissionTargetsRepoActionsPtrOutput) Elem() PermissionTargetsRepoActionsOutput {
	return o.ApplyT(func(v *PermissionTargetsRepoActions) PermissionTargetsRepoActions {
		if v != nil {
			return *v
		}
		var ret PermissionTargetsRepoActions
		return ret
	}).(PermissionTargetsRepoActionsOutput)
}

// Groups this permission applies for.
func (o PermissionTargetsRepoActionsPtrOutput) Groups() PermissionTargetsRepoActionsGroupArrayOutput {
	return o.ApplyT(func(v *PermissionTargetsRepoActions) []PermissionTargetsRepoActionsGroup {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(PermissionTargetsRepoActionsGroupArrayOutput)
}

// Users this permission target applies for.
func (o PermissionTargetsRepoActionsPtrOutput) Users() PermissionTargetsRepoActionsUserArrayOutput {
	return o.ApplyT(func(v *PermissionTargetsRepoActions) []PermissionTargetsRepoActionsUser {
		if v == nil {
			return nil
		}
		return v.Users
	}).(PermissionTargetsRepoActionsUserArrayOutput)
}

type PermissionTargetsRepoActionsGroup struct {
	// Name of permission.
	Name        string   `pulumi:"name"`
	Permissions []string `pulumi:"permissions"`
}

// PermissionTargetsRepoActionsGroupInput is an input type that accepts PermissionTargetsRepoActionsGroupArgs and PermissionTargetsRepoActionsGroupOutput values.
// You can construct a concrete instance of `PermissionTargetsRepoActionsGroupInput` via:
//
//	PermissionTargetsRepoActionsGroupArgs{...}
type PermissionTargetsRepoActionsGroupInput interface {
	pulumi.Input

	ToPermissionTargetsRepoActionsGroupOutput() PermissionTargetsRepoActionsGroupOutput
	ToPermissionTargetsRepoActionsGroupOutputWithContext(context.Context) PermissionTargetsRepoActionsGroupOutput
}

type PermissionTargetsRepoActionsGroupArgs struct {
	// Name of permission.
	Name        pulumi.StringInput      `pulumi:"name"`
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (PermissionTargetsRepoActionsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsRepoActionsGroup)(nil)).Elem()
}

func (i PermissionTargetsRepoActionsGroupArgs) ToPermissionTargetsRepoActionsGroupOutput() PermissionTargetsRepoActionsGroupOutput {
	return i.ToPermissionTargetsRepoActionsGroupOutputWithContext(context.Background())
}

func (i PermissionTargetsRepoActionsGroupArgs) ToPermissionTargetsRepoActionsGroupOutputWithContext(ctx context.Context) PermissionTargetsRepoActionsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsRepoActionsGroupOutput)
}

// PermissionTargetsRepoActionsGroupArrayInput is an input type that accepts PermissionTargetsRepoActionsGroupArray and PermissionTargetsRepoActionsGroupArrayOutput values.
// You can construct a concrete instance of `PermissionTargetsRepoActionsGroupArrayInput` via:
//
//	PermissionTargetsRepoActionsGroupArray{ PermissionTargetsRepoActionsGroupArgs{...} }
type PermissionTargetsRepoActionsGroupArrayInput interface {
	pulumi.Input

	ToPermissionTargetsRepoActionsGroupArrayOutput() PermissionTargetsRepoActionsGroupArrayOutput
	ToPermissionTargetsRepoActionsGroupArrayOutputWithContext(context.Context) PermissionTargetsRepoActionsGroupArrayOutput
}

type PermissionTargetsRepoActionsGroupArray []PermissionTargetsRepoActionsGroupInput

func (PermissionTargetsRepoActionsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetsRepoActionsGroup)(nil)).Elem()
}

func (i PermissionTargetsRepoActionsGroupArray) ToPermissionTargetsRepoActionsGroupArrayOutput() PermissionTargetsRepoActionsGroupArrayOutput {
	return i.ToPermissionTargetsRepoActionsGroupArrayOutputWithContext(context.Background())
}

func (i PermissionTargetsRepoActionsGroupArray) ToPermissionTargetsRepoActionsGroupArrayOutputWithContext(ctx context.Context) PermissionTargetsRepoActionsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsRepoActionsGroupArrayOutput)
}

type PermissionTargetsRepoActionsGroupOutput struct{ *pulumi.OutputState }

func (PermissionTargetsRepoActionsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsRepoActionsGroup)(nil)).Elem()
}

func (o PermissionTargetsRepoActionsGroupOutput) ToPermissionTargetsRepoActionsGroupOutput() PermissionTargetsRepoActionsGroupOutput {
	return o
}

func (o PermissionTargetsRepoActionsGroupOutput) ToPermissionTargetsRepoActionsGroupOutputWithContext(ctx context.Context) PermissionTargetsRepoActionsGroupOutput {
	return o
}

// Name of permission.
func (o PermissionTargetsRepoActionsGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PermissionTargetsRepoActionsGroup) string { return v.Name }).(pulumi.StringOutput)
}

func (o PermissionTargetsRepoActionsGroupOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetsRepoActionsGroup) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type PermissionTargetsRepoActionsGroupArrayOutput struct{ *pulumi.OutputState }

func (PermissionTargetsRepoActionsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetsRepoActionsGroup)(nil)).Elem()
}

func (o PermissionTargetsRepoActionsGroupArrayOutput) ToPermissionTargetsRepoActionsGroupArrayOutput() PermissionTargetsRepoActionsGroupArrayOutput {
	return o
}

func (o PermissionTargetsRepoActionsGroupArrayOutput) ToPermissionTargetsRepoActionsGroupArrayOutputWithContext(ctx context.Context) PermissionTargetsRepoActionsGroupArrayOutput {
	return o
}

func (o PermissionTargetsRepoActionsGroupArrayOutput) Index(i pulumi.IntInput) PermissionTargetsRepoActionsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PermissionTargetsRepoActionsGroup {
		return vs[0].([]PermissionTargetsRepoActionsGroup)[vs[1].(int)]
	}).(PermissionTargetsRepoActionsGroupOutput)
}

type PermissionTargetsRepoActionsUser struct {
	// Name of permission.
	Name        string   `pulumi:"name"`
	Permissions []string `pulumi:"permissions"`
}

// PermissionTargetsRepoActionsUserInput is an input type that accepts PermissionTargetsRepoActionsUserArgs and PermissionTargetsRepoActionsUserOutput values.
// You can construct a concrete instance of `PermissionTargetsRepoActionsUserInput` via:
//
//	PermissionTargetsRepoActionsUserArgs{...}
type PermissionTargetsRepoActionsUserInput interface {
	pulumi.Input

	ToPermissionTargetsRepoActionsUserOutput() PermissionTargetsRepoActionsUserOutput
	ToPermissionTargetsRepoActionsUserOutputWithContext(context.Context) PermissionTargetsRepoActionsUserOutput
}

type PermissionTargetsRepoActionsUserArgs struct {
	// Name of permission.
	Name        pulumi.StringInput      `pulumi:"name"`
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (PermissionTargetsRepoActionsUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsRepoActionsUser)(nil)).Elem()
}

func (i PermissionTargetsRepoActionsUserArgs) ToPermissionTargetsRepoActionsUserOutput() PermissionTargetsRepoActionsUserOutput {
	return i.ToPermissionTargetsRepoActionsUserOutputWithContext(context.Background())
}

func (i PermissionTargetsRepoActionsUserArgs) ToPermissionTargetsRepoActionsUserOutputWithContext(ctx context.Context) PermissionTargetsRepoActionsUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsRepoActionsUserOutput)
}

// PermissionTargetsRepoActionsUserArrayInput is an input type that accepts PermissionTargetsRepoActionsUserArray and PermissionTargetsRepoActionsUserArrayOutput values.
// You can construct a concrete instance of `PermissionTargetsRepoActionsUserArrayInput` via:
//
//	PermissionTargetsRepoActionsUserArray{ PermissionTargetsRepoActionsUserArgs{...} }
type PermissionTargetsRepoActionsUserArrayInput interface {
	pulumi.Input

	ToPermissionTargetsRepoActionsUserArrayOutput() PermissionTargetsRepoActionsUserArrayOutput
	ToPermissionTargetsRepoActionsUserArrayOutputWithContext(context.Context) PermissionTargetsRepoActionsUserArrayOutput
}

type PermissionTargetsRepoActionsUserArray []PermissionTargetsRepoActionsUserInput

func (PermissionTargetsRepoActionsUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetsRepoActionsUser)(nil)).Elem()
}

func (i PermissionTargetsRepoActionsUserArray) ToPermissionTargetsRepoActionsUserArrayOutput() PermissionTargetsRepoActionsUserArrayOutput {
	return i.ToPermissionTargetsRepoActionsUserArrayOutputWithContext(context.Background())
}

func (i PermissionTargetsRepoActionsUserArray) ToPermissionTargetsRepoActionsUserArrayOutputWithContext(ctx context.Context) PermissionTargetsRepoActionsUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsRepoActionsUserArrayOutput)
}

type PermissionTargetsRepoActionsUserOutput struct{ *pulumi.OutputState }

func (PermissionTargetsRepoActionsUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsRepoActionsUser)(nil)).Elem()
}

func (o PermissionTargetsRepoActionsUserOutput) ToPermissionTargetsRepoActionsUserOutput() PermissionTargetsRepoActionsUserOutput {
	return o
}

func (o PermissionTargetsRepoActionsUserOutput) ToPermissionTargetsRepoActionsUserOutputWithContext(ctx context.Context) PermissionTargetsRepoActionsUserOutput {
	return o
}

// Name of permission.
func (o PermissionTargetsRepoActionsUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PermissionTargetsRepoActionsUser) string { return v.Name }).(pulumi.StringOutput)
}

func (o PermissionTargetsRepoActionsUserOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetsRepoActionsUser) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type PermissionTargetsRepoActionsUserArrayOutput struct{ *pulumi.OutputState }

func (PermissionTargetsRepoActionsUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetsRepoActionsUser)(nil)).Elem()
}

func (o PermissionTargetsRepoActionsUserArrayOutput) ToPermissionTargetsRepoActionsUserArrayOutput() PermissionTargetsRepoActionsUserArrayOutput {
	return o
}

func (o PermissionTargetsRepoActionsUserArrayOutput) ToPermissionTargetsRepoActionsUserArrayOutputWithContext(ctx context.Context) PermissionTargetsRepoActionsUserArrayOutput {
	return o
}

func (o PermissionTargetsRepoActionsUserArrayOutput) Index(i pulumi.IntInput) PermissionTargetsRepoActionsUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PermissionTargetsRepoActionsUser {
		return vs[0].([]PermissionTargetsRepoActionsUser)[vs[1].(int)]
	}).(PermissionTargetsRepoActionsUserOutput)
}

type PropertySetProperty struct {
	// Disables "multipleChoice" if set to "false" at the same time with multipleChoice set to "true". Default value is `false`
	ClosedPredefinedValues *bool `pulumi:"closedPredefinedValues"`
	// Defines if user can select multiple values. "closedPredefinedValues" should be set to `true`. Default value is `false`.
	MultipleChoice *bool `pulumi:"multipleChoice"`
	// Predefined property name.
	Name string `pulumi:"name"`
	// Properties in the property set.
	PredefinedValues []PropertySetPropertyPredefinedValue `pulumi:"predefinedValues"`
}

// PropertySetPropertyInput is an input type that accepts PropertySetPropertyArgs and PropertySetPropertyOutput values.
// You can construct a concrete instance of `PropertySetPropertyInput` via:
//
//	PropertySetPropertyArgs{...}
type PropertySetPropertyInput interface {
	pulumi.Input

	ToPropertySetPropertyOutput() PropertySetPropertyOutput
	ToPropertySetPropertyOutputWithContext(context.Context) PropertySetPropertyOutput
}

type PropertySetPropertyArgs struct {
	// Disables "multipleChoice" if set to "false" at the same time with multipleChoice set to "true". Default value is `false`
	ClosedPredefinedValues pulumi.BoolPtrInput `pulumi:"closedPredefinedValues"`
	// Defines if user can select multiple values. "closedPredefinedValues" should be set to `true`. Default value is `false`.
	MultipleChoice pulumi.BoolPtrInput `pulumi:"multipleChoice"`
	// Predefined property name.
	Name pulumi.StringInput `pulumi:"name"`
	// Properties in the property set.
	PredefinedValues PropertySetPropertyPredefinedValueArrayInput `pulumi:"predefinedValues"`
}

func (PropertySetPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PropertySetProperty)(nil)).Elem()
}

func (i PropertySetPropertyArgs) ToPropertySetPropertyOutput() PropertySetPropertyOutput {
	return i.ToPropertySetPropertyOutputWithContext(context.Background())
}

func (i PropertySetPropertyArgs) ToPropertySetPropertyOutputWithContext(ctx context.Context) PropertySetPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertySetPropertyOutput)
}

// PropertySetPropertyArrayInput is an input type that accepts PropertySetPropertyArray and PropertySetPropertyArrayOutput values.
// You can construct a concrete instance of `PropertySetPropertyArrayInput` via:
//
//	PropertySetPropertyArray{ PropertySetPropertyArgs{...} }
type PropertySetPropertyArrayInput interface {
	pulumi.Input

	ToPropertySetPropertyArrayOutput() PropertySetPropertyArrayOutput
	ToPropertySetPropertyArrayOutputWithContext(context.Context) PropertySetPropertyArrayOutput
}

type PropertySetPropertyArray []PropertySetPropertyInput

func (PropertySetPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PropertySetProperty)(nil)).Elem()
}

func (i PropertySetPropertyArray) ToPropertySetPropertyArrayOutput() PropertySetPropertyArrayOutput {
	return i.ToPropertySetPropertyArrayOutputWithContext(context.Background())
}

func (i PropertySetPropertyArray) ToPropertySetPropertyArrayOutputWithContext(ctx context.Context) PropertySetPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertySetPropertyArrayOutput)
}

type PropertySetPropertyOutput struct{ *pulumi.OutputState }

func (PropertySetPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PropertySetProperty)(nil)).Elem()
}

func (o PropertySetPropertyOutput) ToPropertySetPropertyOutput() PropertySetPropertyOutput {
	return o
}

func (o PropertySetPropertyOutput) ToPropertySetPropertyOutputWithContext(ctx context.Context) PropertySetPropertyOutput {
	return o
}

// Disables "multipleChoice" if set to "false" at the same time with multipleChoice set to "true". Default value is `false`
func (o PropertySetPropertyOutput) ClosedPredefinedValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PropertySetProperty) *bool { return v.ClosedPredefinedValues }).(pulumi.BoolPtrOutput)
}

// Defines if user can select multiple values. "closedPredefinedValues" should be set to `true`. Default value is `false`.
func (o PropertySetPropertyOutput) MultipleChoice() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PropertySetProperty) *bool { return v.MultipleChoice }).(pulumi.BoolPtrOutput)
}

// Predefined property name.
func (o PropertySetPropertyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PropertySetProperty) string { return v.Name }).(pulumi.StringOutput)
}

// Properties in the property set.
func (o PropertySetPropertyOutput) PredefinedValues() PropertySetPropertyPredefinedValueArrayOutput {
	return o.ApplyT(func(v PropertySetProperty) []PropertySetPropertyPredefinedValue { return v.PredefinedValues }).(PropertySetPropertyPredefinedValueArrayOutput)
}

type PropertySetPropertyArrayOutput struct{ *pulumi.OutputState }

func (PropertySetPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PropertySetProperty)(nil)).Elem()
}

func (o PropertySetPropertyArrayOutput) ToPropertySetPropertyArrayOutput() PropertySetPropertyArrayOutput {
	return o
}

func (o PropertySetPropertyArrayOutput) ToPropertySetPropertyArrayOutputWithContext(ctx context.Context) PropertySetPropertyArrayOutput {
	return o
}

func (o PropertySetPropertyArrayOutput) Index(i pulumi.IntInput) PropertySetPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PropertySetProperty {
		return vs[0].([]PropertySetProperty)[vs[1].(int)]
	}).(PropertySetPropertyOutput)
}

type PropertySetPropertyPredefinedValue struct {
	// Whether the value is selected by default in the UI.
	DefaultValue bool `pulumi:"defaultValue"`
	// Predefined property name.
	Name string `pulumi:"name"`
}

// PropertySetPropertyPredefinedValueInput is an input type that accepts PropertySetPropertyPredefinedValueArgs and PropertySetPropertyPredefinedValueOutput values.
// You can construct a concrete instance of `PropertySetPropertyPredefinedValueInput` via:
//
//	PropertySetPropertyPredefinedValueArgs{...}
type PropertySetPropertyPredefinedValueInput interface {
	pulumi.Input

	ToPropertySetPropertyPredefinedValueOutput() PropertySetPropertyPredefinedValueOutput
	ToPropertySetPropertyPredefinedValueOutputWithContext(context.Context) PropertySetPropertyPredefinedValueOutput
}

type PropertySetPropertyPredefinedValueArgs struct {
	// Whether the value is selected by default in the UI.
	DefaultValue pulumi.BoolInput `pulumi:"defaultValue"`
	// Predefined property name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (PropertySetPropertyPredefinedValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PropertySetPropertyPredefinedValue)(nil)).Elem()
}

func (i PropertySetPropertyPredefinedValueArgs) ToPropertySetPropertyPredefinedValueOutput() PropertySetPropertyPredefinedValueOutput {
	return i.ToPropertySetPropertyPredefinedValueOutputWithContext(context.Background())
}

func (i PropertySetPropertyPredefinedValueArgs) ToPropertySetPropertyPredefinedValueOutputWithContext(ctx context.Context) PropertySetPropertyPredefinedValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertySetPropertyPredefinedValueOutput)
}

// PropertySetPropertyPredefinedValueArrayInput is an input type that accepts PropertySetPropertyPredefinedValueArray and PropertySetPropertyPredefinedValueArrayOutput values.
// You can construct a concrete instance of `PropertySetPropertyPredefinedValueArrayInput` via:
//
//	PropertySetPropertyPredefinedValueArray{ PropertySetPropertyPredefinedValueArgs{...} }
type PropertySetPropertyPredefinedValueArrayInput interface {
	pulumi.Input

	ToPropertySetPropertyPredefinedValueArrayOutput() PropertySetPropertyPredefinedValueArrayOutput
	ToPropertySetPropertyPredefinedValueArrayOutputWithContext(context.Context) PropertySetPropertyPredefinedValueArrayOutput
}

type PropertySetPropertyPredefinedValueArray []PropertySetPropertyPredefinedValueInput

func (PropertySetPropertyPredefinedValueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PropertySetPropertyPredefinedValue)(nil)).Elem()
}

func (i PropertySetPropertyPredefinedValueArray) ToPropertySetPropertyPredefinedValueArrayOutput() PropertySetPropertyPredefinedValueArrayOutput {
	return i.ToPropertySetPropertyPredefinedValueArrayOutputWithContext(context.Background())
}

func (i PropertySetPropertyPredefinedValueArray) ToPropertySetPropertyPredefinedValueArrayOutputWithContext(ctx context.Context) PropertySetPropertyPredefinedValueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertySetPropertyPredefinedValueArrayOutput)
}

type PropertySetPropertyPredefinedValueOutput struct{ *pulumi.OutputState }

func (PropertySetPropertyPredefinedValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PropertySetPropertyPredefinedValue)(nil)).Elem()
}

func (o PropertySetPropertyPredefinedValueOutput) ToPropertySetPropertyPredefinedValueOutput() PropertySetPropertyPredefinedValueOutput {
	return o
}

func (o PropertySetPropertyPredefinedValueOutput) ToPropertySetPropertyPredefinedValueOutputWithContext(ctx context.Context) PropertySetPropertyPredefinedValueOutput {
	return o
}

// Whether the value is selected by default in the UI.
func (o PropertySetPropertyPredefinedValueOutput) DefaultValue() pulumi.BoolOutput {
	return o.ApplyT(func(v PropertySetPropertyPredefinedValue) bool { return v.DefaultValue }).(pulumi.BoolOutput)
}

// Predefined property name.
func (o PropertySetPropertyPredefinedValueOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PropertySetPropertyPredefinedValue) string { return v.Name }).(pulumi.StringOutput)
}

type PropertySetPropertyPredefinedValueArrayOutput struct{ *pulumi.OutputState }

func (PropertySetPropertyPredefinedValueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PropertySetPropertyPredefinedValue)(nil)).Elem()
}

func (o PropertySetPropertyPredefinedValueArrayOutput) ToPropertySetPropertyPredefinedValueArrayOutput() PropertySetPropertyPredefinedValueArrayOutput {
	return o
}

func (o PropertySetPropertyPredefinedValueArrayOutput) ToPropertySetPropertyPredefinedValueArrayOutputWithContext(ctx context.Context) PropertySetPropertyPredefinedValueArrayOutput {
	return o
}

func (o PropertySetPropertyPredefinedValueArrayOutput) Index(i pulumi.IntInput) PropertySetPropertyPredefinedValueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PropertySetPropertyPredefinedValue {
		return vs[0].([]PropertySetPropertyPredefinedValue)[vs[1].(int)]
	}).(PropertySetPropertyPredefinedValueOutput)
}

type PushReplicationReplication struct {
	// When true, enables distributed checksum storage. For more information, see
	// [Optimizing Repository Replication with Checksum-Based Storage](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-OptimizingRepositoryReplicationUsingStorageLevelSynchronizationOptions).
	CheckBinaryExistenceInFilestore *bool `pulumi:"checkBinaryExistenceInFilestore"`
	// When set, this replication will be enabled when saved.
	Enabled *bool `pulumi:"enabled"`
	// Required for local repository, but not needed for remote repository.
	Password string `pulumi:"password"`
	// Only artifacts that located in path that matches the subpath within the remote repository will be replicated.
	PathPrefix *string `pulumi:"pathPrefix"`
	// Proxy key from Artifactory Proxies settings. The proxy configuration will be used when communicating with the remote instance.
	Proxy *string `pulumi:"proxy"`
	// The network timeout in milliseconds to use for remote operations.
	SocketTimeoutMillis *int `pulumi:"socketTimeoutMillis"`
	// When set, items that were deleted locally should also be deleted remotely (also applies to properties metadata).
	// Note that enabling this option, will delete artifacts on the target that do not exist in the source repository.
	SyncDeletes *bool `pulumi:"syncDeletes"`
	// When set, the task also synchronizes the properties of replicated artifacts.
	SyncProperties *bool `pulumi:"syncProperties"`
	// When set, artifact download statistics will also be replicated. Set to avoid inadvertent cleanup at the target instance when setting up replication for disaster recovery.
	SyncStatistics *bool `pulumi:"syncStatistics"`
	// The URL of the target local repository on a remote Artifactory server. Required for local repository, but not needed for remote repository.
	Url string `pulumi:"url"`
	// Required for local repository, but not needed for remote repository.
	Username string `pulumi:"username"`
}

// PushReplicationReplicationInput is an input type that accepts PushReplicationReplicationArgs and PushReplicationReplicationOutput values.
// You can construct a concrete instance of `PushReplicationReplicationInput` via:
//
//	PushReplicationReplicationArgs{...}
type PushReplicationReplicationInput interface {
	pulumi.Input

	ToPushReplicationReplicationOutput() PushReplicationReplicationOutput
	ToPushReplicationReplicationOutputWithContext(context.Context) PushReplicationReplicationOutput
}

type PushReplicationReplicationArgs struct {
	// When true, enables distributed checksum storage. For more information, see
	// [Optimizing Repository Replication with Checksum-Based Storage](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-OptimizingRepositoryReplicationUsingStorageLevelSynchronizationOptions).
	CheckBinaryExistenceInFilestore pulumi.BoolPtrInput `pulumi:"checkBinaryExistenceInFilestore"`
	// When set, this replication will be enabled when saved.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Required for local repository, but not needed for remote repository.
	Password pulumi.StringInput `pulumi:"password"`
	// Only artifacts that located in path that matches the subpath within the remote repository will be replicated.
	PathPrefix pulumi.StringPtrInput `pulumi:"pathPrefix"`
	// Proxy key from Artifactory Proxies settings. The proxy configuration will be used when communicating with the remote instance.
	Proxy pulumi.StringPtrInput `pulumi:"proxy"`
	// The network timeout in milliseconds to use for remote operations.
	SocketTimeoutMillis pulumi.IntPtrInput `pulumi:"socketTimeoutMillis"`
	// When set, items that were deleted locally should also be deleted remotely (also applies to properties metadata).
	// Note that enabling this option, will delete artifacts on the target that do not exist in the source repository.
	SyncDeletes pulumi.BoolPtrInput `pulumi:"syncDeletes"`
	// When set, the task also synchronizes the properties of replicated artifacts.
	SyncProperties pulumi.BoolPtrInput `pulumi:"syncProperties"`
	// When set, artifact download statistics will also be replicated. Set to avoid inadvertent cleanup at the target instance when setting up replication for disaster recovery.
	SyncStatistics pulumi.BoolPtrInput `pulumi:"syncStatistics"`
	// The URL of the target local repository on a remote Artifactory server. Required for local repository, but not needed for remote repository.
	Url pulumi.StringInput `pulumi:"url"`
	// Required for local repository, but not needed for remote repository.
	Username pulumi.StringInput `pulumi:"username"`
}

func (PushReplicationReplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PushReplicationReplication)(nil)).Elem()
}

func (i PushReplicationReplicationArgs) ToPushReplicationReplicationOutput() PushReplicationReplicationOutput {
	return i.ToPushReplicationReplicationOutputWithContext(context.Background())
}

func (i PushReplicationReplicationArgs) ToPushReplicationReplicationOutputWithContext(ctx context.Context) PushReplicationReplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PushReplicationReplicationOutput)
}

// PushReplicationReplicationArrayInput is an input type that accepts PushReplicationReplicationArray and PushReplicationReplicationArrayOutput values.
// You can construct a concrete instance of `PushReplicationReplicationArrayInput` via:
//
//	PushReplicationReplicationArray{ PushReplicationReplicationArgs{...} }
type PushReplicationReplicationArrayInput interface {
	pulumi.Input

	ToPushReplicationReplicationArrayOutput() PushReplicationReplicationArrayOutput
	ToPushReplicationReplicationArrayOutputWithContext(context.Context) PushReplicationReplicationArrayOutput
}

type PushReplicationReplicationArray []PushReplicationReplicationInput

func (PushReplicationReplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PushReplicationReplication)(nil)).Elem()
}

func (i PushReplicationReplicationArray) ToPushReplicationReplicationArrayOutput() PushReplicationReplicationArrayOutput {
	return i.ToPushReplicationReplicationArrayOutputWithContext(context.Background())
}

func (i PushReplicationReplicationArray) ToPushReplicationReplicationArrayOutputWithContext(ctx context.Context) PushReplicationReplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PushReplicationReplicationArrayOutput)
}

type PushReplicationReplicationOutput struct{ *pulumi.OutputState }

func (PushReplicationReplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PushReplicationReplication)(nil)).Elem()
}

func (o PushReplicationReplicationOutput) ToPushReplicationReplicationOutput() PushReplicationReplicationOutput {
	return o
}

func (o PushReplicationReplicationOutput) ToPushReplicationReplicationOutputWithContext(ctx context.Context) PushReplicationReplicationOutput {
	return o
}

// When true, enables distributed checksum storage. For more information, see
// [Optimizing Repository Replication with Checksum-Based Storage](https://www.jfrog.com/confluence/display/JFROG/Repository+Replication#RepositoryReplication-OptimizingRepositoryReplicationUsingStorageLevelSynchronizationOptions).
func (o PushReplicationReplicationOutput) CheckBinaryExistenceInFilestore() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PushReplicationReplication) *bool { return v.CheckBinaryExistenceInFilestore }).(pulumi.BoolPtrOutput)
}

// When set, this replication will be enabled when saved.
func (o PushReplicationReplicationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PushReplicationReplication) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Required for local repository, but not needed for remote repository.
func (o PushReplicationReplicationOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v PushReplicationReplication) string { return v.Password }).(pulumi.StringOutput)
}

// Only artifacts that located in path that matches the subpath within the remote repository will be replicated.
func (o PushReplicationReplicationOutput) PathPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PushReplicationReplication) *string { return v.PathPrefix }).(pulumi.StringPtrOutput)
}

// Proxy key from Artifactory Proxies settings. The proxy configuration will be used when communicating with the remote instance.
func (o PushReplicationReplicationOutput) Proxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PushReplicationReplication) *string { return v.Proxy }).(pulumi.StringPtrOutput)
}

// The network timeout in milliseconds to use for remote operations.
func (o PushReplicationReplicationOutput) SocketTimeoutMillis() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PushReplicationReplication) *int { return v.SocketTimeoutMillis }).(pulumi.IntPtrOutput)
}

// When set, items that were deleted locally should also be deleted remotely (also applies to properties metadata).
// Note that enabling this option, will delete artifacts on the target that do not exist in the source repository.
func (o PushReplicationReplicationOutput) SyncDeletes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PushReplicationReplication) *bool { return v.SyncDeletes }).(pulumi.BoolPtrOutput)
}

// When set, the task also synchronizes the properties of replicated artifacts.
func (o PushReplicationReplicationOutput) SyncProperties() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PushReplicationReplication) *bool { return v.SyncProperties }).(pulumi.BoolPtrOutput)
}

// When set, artifact download statistics will also be replicated. Set to avoid inadvertent cleanup at the target instance when setting up replication for disaster recovery.
func (o PushReplicationReplicationOutput) SyncStatistics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PushReplicationReplication) *bool { return v.SyncStatistics }).(pulumi.BoolPtrOutput)
}

// The URL of the target local repository on a remote Artifactory server. Required for local repository, but not needed for remote repository.
func (o PushReplicationReplicationOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v PushReplicationReplication) string { return v.Url }).(pulumi.StringOutput)
}

// Required for local repository, but not needed for remote repository.
func (o PushReplicationReplicationOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v PushReplicationReplication) string { return v.Username }).(pulumi.StringOutput)
}

type PushReplicationReplicationArrayOutput struct{ *pulumi.OutputState }

func (PushReplicationReplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PushReplicationReplication)(nil)).Elem()
}

func (o PushReplicationReplicationArrayOutput) ToPushReplicationReplicationArrayOutput() PushReplicationReplicationArrayOutput {
	return o
}

func (o PushReplicationReplicationArrayOutput) ToPushReplicationReplicationArrayOutputWithContext(ctx context.Context) PushReplicationReplicationArrayOutput {
	return o
}

func (o PushReplicationReplicationArrayOutput) Index(i pulumi.IntInput) PushReplicationReplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PushReplicationReplication {
		return vs[0].([]PushReplicationReplication)[vs[1].(int)]
	}).(PushReplicationReplicationOutput)
}

type ReleaseBundleWebhookCriteria struct {
	// Trigger on any release bundle.
	AnyReleaseBundle bool `pulumi:"anyReleaseBundle"`
	// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
	ExcludePatterns []string `pulumi:"excludePatterns"`
	// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
	IncludePatterns []string `pulumi:"includePatterns"`
	// Trigger on this list of release bundle names.
	RegisteredReleaseBundleNames []string `pulumi:"registeredReleaseBundleNames"`
}

// ReleaseBundleWebhookCriteriaInput is an input type that accepts ReleaseBundleWebhookCriteriaArgs and ReleaseBundleWebhookCriteriaOutput values.
// You can construct a concrete instance of `ReleaseBundleWebhookCriteriaInput` via:
//
//	ReleaseBundleWebhookCriteriaArgs{...}
type ReleaseBundleWebhookCriteriaInput interface {
	pulumi.Input

	ToReleaseBundleWebhookCriteriaOutput() ReleaseBundleWebhookCriteriaOutput
	ToReleaseBundleWebhookCriteriaOutputWithContext(context.Context) ReleaseBundleWebhookCriteriaOutput
}

type ReleaseBundleWebhookCriteriaArgs struct {
	// Trigger on any release bundle.
	AnyReleaseBundle pulumi.BoolInput `pulumi:"anyReleaseBundle"`
	// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
	ExcludePatterns pulumi.StringArrayInput `pulumi:"excludePatterns"`
	// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
	IncludePatterns pulumi.StringArrayInput `pulumi:"includePatterns"`
	// Trigger on this list of release bundle names.
	RegisteredReleaseBundleNames pulumi.StringArrayInput `pulumi:"registeredReleaseBundleNames"`
}

func (ReleaseBundleWebhookCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReleaseBundleWebhookCriteria)(nil)).Elem()
}

func (i ReleaseBundleWebhookCriteriaArgs) ToReleaseBundleWebhookCriteriaOutput() ReleaseBundleWebhookCriteriaOutput {
	return i.ToReleaseBundleWebhookCriteriaOutputWithContext(context.Background())
}

func (i ReleaseBundleWebhookCriteriaArgs) ToReleaseBundleWebhookCriteriaOutputWithContext(ctx context.Context) ReleaseBundleWebhookCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseBundleWebhookCriteriaOutput)
}

func (i ReleaseBundleWebhookCriteriaArgs) ToReleaseBundleWebhookCriteriaPtrOutput() ReleaseBundleWebhookCriteriaPtrOutput {
	return i.ToReleaseBundleWebhookCriteriaPtrOutputWithContext(context.Background())
}

func (i ReleaseBundleWebhookCriteriaArgs) ToReleaseBundleWebhookCriteriaPtrOutputWithContext(ctx context.Context) ReleaseBundleWebhookCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseBundleWebhookCriteriaOutput).ToReleaseBundleWebhookCriteriaPtrOutputWithContext(ctx)
}

// ReleaseBundleWebhookCriteriaPtrInput is an input type that accepts ReleaseBundleWebhookCriteriaArgs, ReleaseBundleWebhookCriteriaPtr and ReleaseBundleWebhookCriteriaPtrOutput values.
// You can construct a concrete instance of `ReleaseBundleWebhookCriteriaPtrInput` via:
//
//	        ReleaseBundleWebhookCriteriaArgs{...}
//
//	or:
//
//	        nil
type ReleaseBundleWebhookCriteriaPtrInput interface {
	pulumi.Input

	ToReleaseBundleWebhookCriteriaPtrOutput() ReleaseBundleWebhookCriteriaPtrOutput
	ToReleaseBundleWebhookCriteriaPtrOutputWithContext(context.Context) ReleaseBundleWebhookCriteriaPtrOutput
}

type releaseBundleWebhookCriteriaPtrType ReleaseBundleWebhookCriteriaArgs

func ReleaseBundleWebhookCriteriaPtr(v *ReleaseBundleWebhookCriteriaArgs) ReleaseBundleWebhookCriteriaPtrInput {
	return (*releaseBundleWebhookCriteriaPtrType)(v)
}

func (*releaseBundleWebhookCriteriaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReleaseBundleWebhookCriteria)(nil)).Elem()
}

func (i *releaseBundleWebhookCriteriaPtrType) ToReleaseBundleWebhookCriteriaPtrOutput() ReleaseBundleWebhookCriteriaPtrOutput {
	return i.ToReleaseBundleWebhookCriteriaPtrOutputWithContext(context.Background())
}

func (i *releaseBundleWebhookCriteriaPtrType) ToReleaseBundleWebhookCriteriaPtrOutputWithContext(ctx context.Context) ReleaseBundleWebhookCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseBundleWebhookCriteriaPtrOutput)
}

type ReleaseBundleWebhookCriteriaOutput struct{ *pulumi.OutputState }

func (ReleaseBundleWebhookCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReleaseBundleWebhookCriteria)(nil)).Elem()
}

func (o ReleaseBundleWebhookCriteriaOutput) ToReleaseBundleWebhookCriteriaOutput() ReleaseBundleWebhookCriteriaOutput {
	return o
}

func (o ReleaseBundleWebhookCriteriaOutput) ToReleaseBundleWebhookCriteriaOutputWithContext(ctx context.Context) ReleaseBundleWebhookCriteriaOutput {
	return o
}

func (o ReleaseBundleWebhookCriteriaOutput) ToReleaseBundleWebhookCriteriaPtrOutput() ReleaseBundleWebhookCriteriaPtrOutput {
	return o.ToReleaseBundleWebhookCriteriaPtrOutputWithContext(context.Background())
}

func (o ReleaseBundleWebhookCriteriaOutput) ToReleaseBundleWebhookCriteriaPtrOutputWithContext(ctx context.Context) ReleaseBundleWebhookCriteriaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReleaseBundleWebhookCriteria) *ReleaseBundleWebhookCriteria {
		return &v
	}).(ReleaseBundleWebhookCriteriaPtrOutput)
}

// Trigger on any release bundle.
func (o ReleaseBundleWebhookCriteriaOutput) AnyReleaseBundle() pulumi.BoolOutput {
	return o.ApplyT(func(v ReleaseBundleWebhookCriteria) bool { return v.AnyReleaseBundle }).(pulumi.BoolOutput)
}

// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
func (o ReleaseBundleWebhookCriteriaOutput) ExcludePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReleaseBundleWebhookCriteria) []string { return v.ExcludePatterns }).(pulumi.StringArrayOutput)
}

// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
func (o ReleaseBundleWebhookCriteriaOutput) IncludePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReleaseBundleWebhookCriteria) []string { return v.IncludePatterns }).(pulumi.StringArrayOutput)
}

// Trigger on this list of release bundle names.
func (o ReleaseBundleWebhookCriteriaOutput) RegisteredReleaseBundleNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReleaseBundleWebhookCriteria) []string { return v.RegisteredReleaseBundleNames }).(pulumi.StringArrayOutput)
}

type ReleaseBundleWebhookCriteriaPtrOutput struct{ *pulumi.OutputState }

func (ReleaseBundleWebhookCriteriaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReleaseBundleWebhookCriteria)(nil)).Elem()
}

func (o ReleaseBundleWebhookCriteriaPtrOutput) ToReleaseBundleWebhookCriteriaPtrOutput() ReleaseBundleWebhookCriteriaPtrOutput {
	return o
}

func (o ReleaseBundleWebhookCriteriaPtrOutput) ToReleaseBundleWebhookCriteriaPtrOutputWithContext(ctx context.Context) ReleaseBundleWebhookCriteriaPtrOutput {
	return o
}

func (o ReleaseBundleWebhookCriteriaPtrOutput) Elem() ReleaseBundleWebhookCriteriaOutput {
	return o.ApplyT(func(v *ReleaseBundleWebhookCriteria) ReleaseBundleWebhookCriteria {
		if v != nil {
			return *v
		}
		var ret ReleaseBundleWebhookCriteria
		return ret
	}).(ReleaseBundleWebhookCriteriaOutput)
}

// Trigger on any release bundle.
func (o ReleaseBundleWebhookCriteriaPtrOutput) AnyReleaseBundle() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReleaseBundleWebhookCriteria) *bool {
		if v == nil {
			return nil
		}
		return &v.AnyReleaseBundle
	}).(pulumi.BoolPtrOutput)
}

// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
func (o ReleaseBundleWebhookCriteriaPtrOutput) ExcludePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReleaseBundleWebhookCriteria) []string {
		if v == nil {
			return nil
		}
		return v.ExcludePatterns
	}).(pulumi.StringArrayOutput)
}

// Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\n Ant-style path expressions are supported (*, *\*, ?).\nFor example: "org/apache/**".
func (o ReleaseBundleWebhookCriteriaPtrOutput) IncludePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReleaseBundleWebhookCriteria) []string {
		if v == nil {
			return nil
		}
		return v.IncludePatterns
	}).(pulumi.StringArrayOutput)
}

// Trigger on this list of release bundle names.
func (o ReleaseBundleWebhookCriteriaPtrOutput) RegisteredReleaseBundleNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReleaseBundleWebhookCriteria) []string {
		if v == nil {
			return nil
		}
		return v.RegisteredReleaseBundleNames
	}).(pulumi.StringArrayOutput)
}

type ReleaseBundleWebhookHandler struct {
	// Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
	CustomHttpHeaders map[string]string `pulumi:"customHttpHeaders"`
	// Proxy key from Artifactory UI (Administration > Proxies > Configuration).
	Proxy *string `pulumi:"proxy"`
	// Secret authentication token that will be sent to the configured URL. The value will be sent as `x-jfrog-event-auth` header.
	Secret *string `pulumi:"secret"`
	// Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
	Url string `pulumi:"url"`
}

// ReleaseBundleWebhookHandlerInput is an input type that accepts ReleaseBundleWebhookHandlerArgs and ReleaseBundleWebhookHandlerOutput values.
// You can construct a concrete instance of `ReleaseBundleWebhookHandlerInput` via:
//
//	ReleaseBundleWebhookHandlerArgs{...}
type ReleaseBundleWebhookHandlerInput interface {
	pulumi.Input

	ToReleaseBundleWebhookHandlerOutput() ReleaseBundleWebhookHandlerOutput
	ToReleaseBundleWebhookHandlerOutputWithContext(context.Context) ReleaseBundleWebhookHandlerOutput
}

type ReleaseBundleWebhookHandlerArgs struct {
	// Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
	CustomHttpHeaders pulumi.StringMapInput `pulumi:"customHttpHeaders"`
	// Proxy key from Artifactory UI (Administration > Proxies > Configuration).
	Proxy pulumi.StringPtrInput `pulumi:"proxy"`
	// Secret authentication token that will be sent to the configured URL. The value will be sent as `x-jfrog-event-auth` header.
	Secret pulumi.StringPtrInput `pulumi:"secret"`
	// Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
	Url pulumi.StringInput `pulumi:"url"`
}

func (ReleaseBundleWebhookHandlerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReleaseBundleWebhookHandler)(nil)).Elem()
}

func (i ReleaseBundleWebhookHandlerArgs) ToReleaseBundleWebhookHandlerOutput() ReleaseBundleWebhookHandlerOutput {
	return i.ToReleaseBundleWebhookHandlerOutputWithContext(context.Background())
}

func (i ReleaseBundleWebhookHandlerArgs) ToReleaseBundleWebhookHandlerOutputWithContext(ctx context.Context) ReleaseBundleWebhookHandlerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseBundleWebhookHandlerOutput)
}

// ReleaseBundleWebhookHandlerArrayInput is an input type that accepts ReleaseBundleWebhookHandlerArray and ReleaseBundleWebhookHandlerArrayOutput values.
// You can construct a concrete instance of `ReleaseBundleWebhookHandlerArrayInput` via:
//
//	ReleaseBundleWebhookHandlerArray{ ReleaseBundleWebhookHandlerArgs{...} }
type ReleaseBundleWebhookHandlerArrayInput interface {
	pulumi.Input

	ToReleaseBundleWebhookHandlerArrayOutput() ReleaseBundleWebhookHandlerArrayOutput
	ToReleaseBundleWebhookHandlerArrayOutputWithContext(context.Context) ReleaseBundleWebhookHandlerArrayOutput
}

type ReleaseBundleWebhookHandlerArray []ReleaseBundleWebhookHandlerInput

func (ReleaseBundleWebhookHandlerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReleaseBundleWebhookHandler)(nil)).Elem()
}

func (i ReleaseBundleWebhookHandlerArray) ToReleaseBundleWebhookHandlerArrayOutput() ReleaseBundleWebhookHandlerArrayOutput {
	return i.ToReleaseBundleWebhookHandlerArrayOutputWithContext(context.Background())
}

func (i ReleaseBundleWebhookHandlerArray) ToReleaseBundleWebhookHandlerArrayOutputWithContext(ctx context.Context) ReleaseBundleWebhookHandlerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseBundleWebhookHandlerArrayOutput)
}

type ReleaseBundleWebhookHandlerOutput struct{ *pulumi.OutputState }

func (ReleaseBundleWebhookHandlerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReleaseBundleWebhookHandler)(nil)).Elem()
}

func (o ReleaseBundleWebhookHandlerOutput) ToReleaseBundleWebhookHandlerOutput() ReleaseBundleWebhookHandlerOutput {
	return o
}

func (o ReleaseBundleWebhookHandlerOutput) ToReleaseBundleWebhookHandlerOutputWithContext(ctx context.Context) ReleaseBundleWebhookHandlerOutput {
	return o
}

// Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.
func (o ReleaseBundleWebhookHandlerOutput) CustomHttpHeaders() pulumi.StringMapOutput {
	return o.ApplyT(func(v ReleaseBundleWebhookHandler) map[string]string { return v.CustomHttpHeaders }).(pulumi.StringMapOutput)
}

// Proxy key from Artifactory UI (Administration > Proxies > Configuration).
func (o ReleaseBundleWebhookHandlerOutput) Proxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReleaseBundleWebhookHandler) *string { return v.Proxy }).(pulumi.StringPtrOutput)
}

// Secret authentication token that will be sent to the configured URL. The value will be sent as `x-jfrog-event-auth` header.
func (o ReleaseBundleWebhookHandlerOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReleaseBundleWebhookHandler) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

// Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.
func (o ReleaseBundleWebhookHandlerOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ReleaseBundleWebhookHandler) string { return v.Url }).(pulumi.StringOutput)
}

type ReleaseBundleWebhookHandlerArrayOutput struct{ *pulumi.OutputState }

func (ReleaseBundleWebhookHandlerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReleaseBundleWebhookHandler)(nil)).Elem()
}

func (o ReleaseBundleWebhookHandlerArrayOutput) ToReleaseBundleWebhookHandlerArrayOutput() ReleaseBundleWebhookHandlerArrayOutput {
	return o
}

func (o ReleaseBundleWebhookHandlerArrayOutput) ToReleaseBundleWebhookHandlerArrayOutputWithContext(ctx context.Context) ReleaseBundleWebhookHandlerArrayOutput {
	return o
}

func (o ReleaseBundleWebhookHandlerArrayOutput) Index(i pulumi.IntInput) ReleaseBundleWebhookHandlerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReleaseBundleWebhookHandler {
		return vs[0].([]ReleaseBundleWebhookHandler)[vs[1].(int)]
	}).(ReleaseBundleWebhookHandlerOutput)
}

type RemoteAlpineRepositoryContentSynchronisation struct {
	Enabled                      *bool `pulumi:"enabled"`
	PropertiesEnabled            *bool `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            *bool `pulumi:"statisticsEnabled"`
}

// RemoteAlpineRepositoryContentSynchronisationInput is an input type that accepts RemoteAlpineRepositoryContentSynchronisationArgs and RemoteAlpineRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemoteAlpineRepositoryContentSynchronisationInput` via:
//
//	RemoteAlpineRepositoryContentSynchronisationArgs{...}
type RemoteAlpineRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemoteAlpineRepositoryContentSynchronisationOutput() RemoteAlpineRepositoryContentSynchronisationOutput
	ToRemoteAlpineRepositoryContentSynchronisationOutputWithContext(context.Context) RemoteAlpineRepositoryContentSynchronisationOutput
}

type RemoteAlpineRepositoryContentSynchronisationArgs struct {
	Enabled                      pulumi.BoolPtrInput `pulumi:"enabled"`
	PropertiesEnabled            pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemoteAlpineRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteAlpineRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemoteAlpineRepositoryContentSynchronisationArgs) ToRemoteAlpineRepositoryContentSynchronisationOutput() RemoteAlpineRepositoryContentSynchronisationOutput {
	return i.ToRemoteAlpineRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemoteAlpineRepositoryContentSynchronisationArgs) ToRemoteAlpineRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteAlpineRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteAlpineRepositoryContentSynchronisationOutput)
}

func (i RemoteAlpineRepositoryContentSynchronisationArgs) ToRemoteAlpineRepositoryContentSynchronisationPtrOutput() RemoteAlpineRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteAlpineRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemoteAlpineRepositoryContentSynchronisationArgs) ToRemoteAlpineRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteAlpineRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteAlpineRepositoryContentSynchronisationOutput).ToRemoteAlpineRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemoteAlpineRepositoryContentSynchronisationPtrInput is an input type that accepts RemoteAlpineRepositoryContentSynchronisationArgs, RemoteAlpineRepositoryContentSynchronisationPtr and RemoteAlpineRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemoteAlpineRepositoryContentSynchronisationPtrInput` via:
//
//	        RemoteAlpineRepositoryContentSynchronisationArgs{...}
//
//	or:
//
//	        nil
type RemoteAlpineRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemoteAlpineRepositoryContentSynchronisationPtrOutput() RemoteAlpineRepositoryContentSynchronisationPtrOutput
	ToRemoteAlpineRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemoteAlpineRepositoryContentSynchronisationPtrOutput
}

type remoteAlpineRepositoryContentSynchronisationPtrType RemoteAlpineRepositoryContentSynchronisationArgs

func RemoteAlpineRepositoryContentSynchronisationPtr(v *RemoteAlpineRepositoryContentSynchronisationArgs) RemoteAlpineRepositoryContentSynchronisationPtrInput {
	return (*remoteAlpineRepositoryContentSynchronisationPtrType)(v)
}

func (*remoteAlpineRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteAlpineRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remoteAlpineRepositoryContentSynchronisationPtrType) ToRemoteAlpineRepositoryContentSynchronisationPtrOutput() RemoteAlpineRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteAlpineRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remoteAlpineRepositoryContentSynchronisationPtrType) ToRemoteAlpineRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteAlpineRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteAlpineRepositoryContentSynchronisationPtrOutput)
}

type RemoteAlpineRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemoteAlpineRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteAlpineRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteAlpineRepositoryContentSynchronisationOutput) ToRemoteAlpineRepositoryContentSynchronisationOutput() RemoteAlpineRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteAlpineRepositoryContentSynchronisationOutput) ToRemoteAlpineRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteAlpineRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteAlpineRepositoryContentSynchronisationOutput) ToRemoteAlpineRepositoryContentSynchronisationPtrOutput() RemoteAlpineRepositoryContentSynchronisationPtrOutput {
	return o.ToRemoteAlpineRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemoteAlpineRepositoryContentSynchronisationOutput) ToRemoteAlpineRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteAlpineRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteAlpineRepositoryContentSynchronisation) *RemoteAlpineRepositoryContentSynchronisation {
		return &v
	}).(RemoteAlpineRepositoryContentSynchronisationPtrOutput)
}

func (o RemoteAlpineRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteAlpineRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteAlpineRepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteAlpineRepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteAlpineRepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteAlpineRepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

func (o RemoteAlpineRepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteAlpineRepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemoteAlpineRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemoteAlpineRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteAlpineRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteAlpineRepositoryContentSynchronisationPtrOutput) ToRemoteAlpineRepositoryContentSynchronisationPtrOutput() RemoteAlpineRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteAlpineRepositoryContentSynchronisationPtrOutput) ToRemoteAlpineRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteAlpineRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteAlpineRepositoryContentSynchronisationPtrOutput) Elem() RemoteAlpineRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemoteAlpineRepositoryContentSynchronisation) RemoteAlpineRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemoteAlpineRepositoryContentSynchronisation
		return ret
	}).(RemoteAlpineRepositoryContentSynchronisationOutput)
}

func (o RemoteAlpineRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteAlpineRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteAlpineRepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteAlpineRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteAlpineRepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteAlpineRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteAlpineRepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteAlpineRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type RemoteBowerRepositoryContentSynchronisation struct {
	Enabled                      *bool `pulumi:"enabled"`
	PropertiesEnabled            *bool `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            *bool `pulumi:"statisticsEnabled"`
}

// RemoteBowerRepositoryContentSynchronisationInput is an input type that accepts RemoteBowerRepositoryContentSynchronisationArgs and RemoteBowerRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemoteBowerRepositoryContentSynchronisationInput` via:
//
//	RemoteBowerRepositoryContentSynchronisationArgs{...}
type RemoteBowerRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemoteBowerRepositoryContentSynchronisationOutput() RemoteBowerRepositoryContentSynchronisationOutput
	ToRemoteBowerRepositoryContentSynchronisationOutputWithContext(context.Context) RemoteBowerRepositoryContentSynchronisationOutput
}

type RemoteBowerRepositoryContentSynchronisationArgs struct {
	Enabled                      pulumi.BoolPtrInput `pulumi:"enabled"`
	PropertiesEnabled            pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemoteBowerRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteBowerRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemoteBowerRepositoryContentSynchronisationArgs) ToRemoteBowerRepositoryContentSynchronisationOutput() RemoteBowerRepositoryContentSynchronisationOutput {
	return i.ToRemoteBowerRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemoteBowerRepositoryContentSynchronisationArgs) ToRemoteBowerRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteBowerRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteBowerRepositoryContentSynchronisationOutput)
}

func (i RemoteBowerRepositoryContentSynchronisationArgs) ToRemoteBowerRepositoryContentSynchronisationPtrOutput() RemoteBowerRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteBowerRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemoteBowerRepositoryContentSynchronisationArgs) ToRemoteBowerRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteBowerRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteBowerRepositoryContentSynchronisationOutput).ToRemoteBowerRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemoteBowerRepositoryContentSynchronisationPtrInput is an input type that accepts RemoteBowerRepositoryContentSynchronisationArgs, RemoteBowerRepositoryContentSynchronisationPtr and RemoteBowerRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemoteBowerRepositoryContentSynchronisationPtrInput` via:
//
//	        RemoteBowerRepositoryContentSynchronisationArgs{...}
//
//	or:
//
//	        nil
type RemoteBowerRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemoteBowerRepositoryContentSynchronisationPtrOutput() RemoteBowerRepositoryContentSynchronisationPtrOutput
	ToRemoteBowerRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemoteBowerRepositoryContentSynchronisationPtrOutput
}

type remoteBowerRepositoryContentSynchronisationPtrType RemoteBowerRepositoryContentSynchronisationArgs

func RemoteBowerRepositoryContentSynchronisationPtr(v *RemoteBowerRepositoryContentSynchronisationArgs) RemoteBowerRepositoryContentSynchronisationPtrInput {
	return (*remoteBowerRepositoryContentSynchronisationPtrType)(v)
}

func (*remoteBowerRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteBowerRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remoteBowerRepositoryContentSynchronisationPtrType) ToRemoteBowerRepositoryContentSynchronisationPtrOutput() RemoteBowerRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteBowerRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remoteBowerRepositoryContentSynchronisationPtrType) ToRemoteBowerRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteBowerRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteBowerRepositoryContentSynchronisationPtrOutput)
}

type RemoteBowerRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemoteBowerRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteBowerRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteBowerRepositoryContentSynchronisationOutput) ToRemoteBowerRepositoryContentSynchronisationOutput() RemoteBowerRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteBowerRepositoryContentSynchronisationOutput) ToRemoteBowerRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteBowerRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteBowerRepositoryContentSynchronisationOutput) ToRemoteBowerRepositoryContentSynchronisationPtrOutput() RemoteBowerRepositoryContentSynchronisationPtrOutput {
	return o.ToRemoteBowerRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemoteBowerRepositoryContentSynchronisationOutput) ToRemoteBowerRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteBowerRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteBowerRepositoryContentSynchronisation) *RemoteBowerRepositoryContentSynchronisation {
		return &v
	}).(RemoteBowerRepositoryContentSynchronisationPtrOutput)
}

func (o RemoteBowerRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteBowerRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteBowerRepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteBowerRepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteBowerRepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteBowerRepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

func (o RemoteBowerRepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteBowerRepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemoteBowerRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemoteBowerRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteBowerRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteBowerRepositoryContentSynchronisationPtrOutput) ToRemoteBowerRepositoryContentSynchronisationPtrOutput() RemoteBowerRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteBowerRepositoryContentSynchronisationPtrOutput) ToRemoteBowerRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteBowerRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteBowerRepositoryContentSynchronisationPtrOutput) Elem() RemoteBowerRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemoteBowerRepositoryContentSynchronisation) RemoteBowerRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemoteBowerRepositoryContentSynchronisation
		return ret
	}).(RemoteBowerRepositoryContentSynchronisationOutput)
}

func (o RemoteBowerRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteBowerRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteBowerRepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteBowerRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteBowerRepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteBowerRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteBowerRepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteBowerRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type RemoteCargoRepositoryContentSynchronisation struct {
	Enabled                      *bool `pulumi:"enabled"`
	PropertiesEnabled            *bool `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            *bool `pulumi:"statisticsEnabled"`
}

// RemoteCargoRepositoryContentSynchronisationInput is an input type that accepts RemoteCargoRepositoryContentSynchronisationArgs and RemoteCargoRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemoteCargoRepositoryContentSynchronisationInput` via:
//
//	RemoteCargoRepositoryContentSynchronisationArgs{...}
type RemoteCargoRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemoteCargoRepositoryContentSynchronisationOutput() RemoteCargoRepositoryContentSynchronisationOutput
	ToRemoteCargoRepositoryContentSynchronisationOutputWithContext(context.Context) RemoteCargoRepositoryContentSynchronisationOutput
}

type RemoteCargoRepositoryContentSynchronisationArgs struct {
	Enabled                      pulumi.BoolPtrInput `pulumi:"enabled"`
	PropertiesEnabled            pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemoteCargoRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteCargoRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemoteCargoRepositoryContentSynchronisationArgs) ToRemoteCargoRepositoryContentSynchronisationOutput() RemoteCargoRepositoryContentSynchronisationOutput {
	return i.ToRemoteCargoRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemoteCargoRepositoryContentSynchronisationArgs) ToRemoteCargoRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteCargoRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteCargoRepositoryContentSynchronisationOutput)
}

func (i RemoteCargoRepositoryContentSynchronisationArgs) ToRemoteCargoRepositoryContentSynchronisationPtrOutput() RemoteCargoRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteCargoRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemoteCargoRepositoryContentSynchronisationArgs) ToRemoteCargoRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteCargoRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteCargoRepositoryContentSynchronisationOutput).ToRemoteCargoRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemoteCargoRepositoryContentSynchronisationPtrInput is an input type that accepts RemoteCargoRepositoryContentSynchronisationArgs, RemoteCargoRepositoryContentSynchronisationPtr and RemoteCargoRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemoteCargoRepositoryContentSynchronisationPtrInput` via:
//
//	        RemoteCargoRepositoryContentSynchronisationArgs{...}
//
//	or:
//
//	        nil
type RemoteCargoRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemoteCargoRepositoryContentSynchronisationPtrOutput() RemoteCargoRepositoryContentSynchronisationPtrOutput
	ToRemoteCargoRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemoteCargoRepositoryContentSynchronisationPtrOutput
}

type remoteCargoRepositoryContentSynchronisationPtrType RemoteCargoRepositoryContentSynchronisationArgs

func RemoteCargoRepositoryContentSynchronisationPtr(v *RemoteCargoRepositoryContentSynchronisationArgs) RemoteCargoRepositoryContentSynchronisationPtrInput {
	return (*remoteCargoRepositoryContentSynchronisationPtrType)(v)
}

func (*remoteCargoRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteCargoRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remoteCargoRepositoryContentSynchronisationPtrType) ToRemoteCargoRepositoryContentSynchronisationPtrOutput() RemoteCargoRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteCargoRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remoteCargoRepositoryContentSynchronisationPtrType) ToRemoteCargoRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteCargoRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteCargoRepositoryContentSynchronisationPtrOutput)
}

type RemoteCargoRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemoteCargoRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteCargoRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteCargoRepositoryContentSynchronisationOutput) ToRemoteCargoRepositoryContentSynchronisationOutput() RemoteCargoRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteCargoRepositoryContentSynchronisationOutput) ToRemoteCargoRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteCargoRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteCargoRepositoryContentSynchronisationOutput) ToRemoteCargoRepositoryContentSynchronisationPtrOutput() RemoteCargoRepositoryContentSynchronisationPtrOutput {
	return o.ToRemoteCargoRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemoteCargoRepositoryContentSynchronisationOutput) ToRemoteCargoRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteCargoRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteCargoRepositoryContentSynchronisation) *RemoteCargoRepositoryContentSynchronisation {
		return &v
	}).(RemoteCargoRepositoryContentSynchronisationPtrOutput)
}

func (o RemoteCargoRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteCargoRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteCargoRepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteCargoRepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteCargoRepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteCargoRepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

func (o RemoteCargoRepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteCargoRepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemoteCargoRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemoteCargoRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteCargoRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteCargoRepositoryContentSynchronisationPtrOutput) ToRemoteCargoRepositoryContentSynchronisationPtrOutput() RemoteCargoRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteCargoRepositoryContentSynchronisationPtrOutput) ToRemoteCargoRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteCargoRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteCargoRepositoryContentSynchronisationPtrOutput) Elem() RemoteCargoRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemoteCargoRepositoryContentSynchronisation) RemoteCargoRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemoteCargoRepositoryContentSynchronisation
		return ret
	}).(RemoteCargoRepositoryContentSynchronisationOutput)
}

func (o RemoteCargoRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteCargoRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteCargoRepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteCargoRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteCargoRepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteCargoRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteCargoRepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteCargoRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type RemoteChefRepositoryContentSynchronisation struct {
	Enabled                      *bool `pulumi:"enabled"`
	PropertiesEnabled            *bool `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            *bool `pulumi:"statisticsEnabled"`
}

// RemoteChefRepositoryContentSynchronisationInput is an input type that accepts RemoteChefRepositoryContentSynchronisationArgs and RemoteChefRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemoteChefRepositoryContentSynchronisationInput` via:
//
//	RemoteChefRepositoryContentSynchronisationArgs{...}
type RemoteChefRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemoteChefRepositoryContentSynchronisationOutput() RemoteChefRepositoryContentSynchronisationOutput
	ToRemoteChefRepositoryContentSynchronisationOutputWithContext(context.Context) RemoteChefRepositoryContentSynchronisationOutput
}

type RemoteChefRepositoryContentSynchronisationArgs struct {
	Enabled                      pulumi.BoolPtrInput `pulumi:"enabled"`
	PropertiesEnabled            pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemoteChefRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteChefRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemoteChefRepositoryContentSynchronisationArgs) ToRemoteChefRepositoryContentSynchronisationOutput() RemoteChefRepositoryContentSynchronisationOutput {
	return i.ToRemoteChefRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemoteChefRepositoryContentSynchronisationArgs) ToRemoteChefRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteChefRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteChefRepositoryContentSynchronisationOutput)
}

func (i RemoteChefRepositoryContentSynchronisationArgs) ToRemoteChefRepositoryContentSynchronisationPtrOutput() RemoteChefRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteChefRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemoteChefRepositoryContentSynchronisationArgs) ToRemoteChefRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteChefRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteChefRepositoryContentSynchronisationOutput).ToRemoteChefRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemoteChefRepositoryContentSynchronisationPtrInput is an input type that accepts RemoteChefRepositoryContentSynchronisationArgs, RemoteChefRepositoryContentSynchronisationPtr and RemoteChefRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemoteChefRepositoryContentSynchronisationPtrInput` via:
//
//	        RemoteChefRepositoryContentSynchronisationArgs{...}
//
//	or:
//
//	        nil
type RemoteChefRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemoteChefRepositoryContentSynchronisationPtrOutput() RemoteChefRepositoryContentSynchronisationPtrOutput
	ToRemoteChefRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemoteChefRepositoryContentSynchronisationPtrOutput
}

type remoteChefRepositoryContentSynchronisationPtrType RemoteChefRepositoryContentSynchronisationArgs

func RemoteChefRepositoryContentSynchronisationPtr(v *RemoteChefRepositoryContentSynchronisationArgs) RemoteChefRepositoryContentSynchronisationPtrInput {
	return (*remoteChefRepositoryContentSynchronisationPtrType)(v)
}

func (*remoteChefRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteChefRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remoteChefRepositoryContentSynchronisationPtrType) ToRemoteChefRepositoryContentSynchronisationPtrOutput() RemoteChefRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteChefRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remoteChefRepositoryContentSynchronisationPtrType) ToRemoteChefRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteChefRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteChefRepositoryContentSynchronisationPtrOutput)
}

type RemoteChefRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemoteChefRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteChefRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteChefRepositoryContentSynchronisationOutput) ToRemoteChefRepositoryContentSynchronisationOutput() RemoteChefRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteChefRepositoryContentSynchronisationOutput) ToRemoteChefRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteChefRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteChefRepositoryContentSynchronisationOutput) ToRemoteChefRepositoryContentSynchronisationPtrOutput() RemoteChefRepositoryContentSynchronisationPtrOutput {
	return o.ToRemoteChefRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemoteChefRepositoryContentSynchronisationOutput) ToRemoteChefRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteChefRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteChefRepositoryContentSynchronisation) *RemoteChefRepositoryContentSynchronisation {
		return &v
	}).(RemoteChefRepositoryContentSynchronisationPtrOutput)
}

func (o RemoteChefRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteChefRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteChefRepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteChefRepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteChefRepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteChefRepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

func (o RemoteChefRepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteChefRepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemoteChefRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemoteChefRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteChefRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteChefRepositoryContentSynchronisationPtrOutput) ToRemoteChefRepositoryContentSynchronisationPtrOutput() RemoteChefRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteChefRepositoryContentSynchronisationPtrOutput) ToRemoteChefRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteChefRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteChefRepositoryContentSynchronisationPtrOutput) Elem() RemoteChefRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemoteChefRepositoryContentSynchronisation) RemoteChefRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemoteChefRepositoryContentSynchronisation
		return ret
	}).(RemoteChefRepositoryContentSynchronisationOutput)
}

func (o RemoteChefRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteChefRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteChefRepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteChefRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteChefRepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteChefRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteChefRepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteChefRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type RemoteCocoapodsRepositoryContentSynchronisation struct {
	Enabled                      *bool `pulumi:"enabled"`
	PropertiesEnabled            *bool `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            *bool `pulumi:"statisticsEnabled"`
}

// RemoteCocoapodsRepositoryContentSynchronisationInput is an input type that accepts RemoteCocoapodsRepositoryContentSynchronisationArgs and RemoteCocoapodsRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemoteCocoapodsRepositoryContentSynchronisationInput` via:
//
//	RemoteCocoapodsRepositoryContentSynchronisationArgs{...}
type RemoteCocoapodsRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemoteCocoapodsRepositoryContentSynchronisationOutput() RemoteCocoapodsRepositoryContentSynchronisationOutput
	ToRemoteCocoapodsRepositoryContentSynchronisationOutputWithContext(context.Context) RemoteCocoapodsRepositoryContentSynchronisationOutput
}

type RemoteCocoapodsRepositoryContentSynchronisationArgs struct {
	Enabled                      pulumi.BoolPtrInput `pulumi:"enabled"`
	PropertiesEnabled            pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemoteCocoapodsRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteCocoapodsRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemoteCocoapodsRepositoryContentSynchronisationArgs) ToRemoteCocoapodsRepositoryContentSynchronisationOutput() RemoteCocoapodsRepositoryContentSynchronisationOutput {
	return i.ToRemoteCocoapodsRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemoteCocoapodsRepositoryContentSynchronisationArgs) ToRemoteCocoapodsRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteCocoapodsRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteCocoapodsRepositoryContentSynchronisationOutput)
}

func (i RemoteCocoapodsRepositoryContentSynchronisationArgs) ToRemoteCocoapodsRepositoryContentSynchronisationPtrOutput() RemoteCocoapodsRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteCocoapodsRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemoteCocoapodsRepositoryContentSynchronisationArgs) ToRemoteCocoapodsRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteCocoapodsRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteCocoapodsRepositoryContentSynchronisationOutput).ToRemoteCocoapodsRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemoteCocoapodsRepositoryContentSynchronisationPtrInput is an input type that accepts RemoteCocoapodsRepositoryContentSynchronisationArgs, RemoteCocoapodsRepositoryContentSynchronisationPtr and RemoteCocoapodsRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemoteCocoapodsRepositoryContentSynchronisationPtrInput` via:
//
//	        RemoteCocoapodsRepositoryContentSynchronisationArgs{...}
//
//	or:
//
//	        nil
type RemoteCocoapodsRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemoteCocoapodsRepositoryContentSynchronisationPtrOutput() RemoteCocoapodsRepositoryContentSynchronisationPtrOutput
	ToRemoteCocoapodsRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemoteCocoapodsRepositoryContentSynchronisationPtrOutput
}

type remoteCocoapodsRepositoryContentSynchronisationPtrType RemoteCocoapodsRepositoryContentSynchronisationArgs

func RemoteCocoapodsRepositoryContentSynchronisationPtr(v *RemoteCocoapodsRepositoryContentSynchronisationArgs) RemoteCocoapodsRepositoryContentSynchronisationPtrInput {
	return (*remoteCocoapodsRepositoryContentSynchronisationPtrType)(v)
}

func (*remoteCocoapodsRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteCocoapodsRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remoteCocoapodsRepositoryContentSynchronisationPtrType) ToRemoteCocoapodsRepositoryContentSynchronisationPtrOutput() RemoteCocoapodsRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteCocoapodsRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remoteCocoapodsRepositoryContentSynchronisationPtrType) ToRemoteCocoapodsRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteCocoapodsRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteCocoapodsRepositoryContentSynchronisationPtrOutput)
}

type RemoteCocoapodsRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemoteCocoapodsRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteCocoapodsRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteCocoapodsRepositoryContentSynchronisationOutput) ToRemoteCocoapodsRepositoryContentSynchronisationOutput() RemoteCocoapodsRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteCocoapodsRepositoryContentSynchronisationOutput) ToRemoteCocoapodsRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteCocoapodsRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteCocoapodsRepositoryContentSynchronisationOutput) ToRemoteCocoapodsRepositoryContentSynchronisationPtrOutput() RemoteCocoapodsRepositoryContentSynchronisationPtrOutput {
	return o.ToRemoteCocoapodsRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemoteCocoapodsRepositoryContentSynchronisationOutput) ToRemoteCocoapodsRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteCocoapodsRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteCocoapodsRepositoryContentSynchronisation) *RemoteCocoapodsRepositoryContentSynchronisation {
		return &v
	}).(RemoteCocoapodsRepositoryContentSynchronisationPtrOutput)
}

func (o RemoteCocoapodsRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteCocoapodsRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteCocoapodsRepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteCocoapodsRepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteCocoapodsRepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteCocoapodsRepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

func (o RemoteCocoapodsRepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteCocoapodsRepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemoteCocoapodsRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemoteCocoapodsRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteCocoapodsRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteCocoapodsRepositoryContentSynchronisationPtrOutput) ToRemoteCocoapodsRepositoryContentSynchronisationPtrOutput() RemoteCocoapodsRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteCocoapodsRepositoryContentSynchronisationPtrOutput) ToRemoteCocoapodsRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteCocoapodsRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteCocoapodsRepositoryContentSynchronisationPtrOutput) Elem() RemoteCocoapodsRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemoteCocoapodsRepositoryContentSynchronisation) RemoteCocoapodsRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemoteCocoapodsRepositoryContentSynchronisation
		return ret
	}).(RemoteCocoapodsRepositoryContentSynchronisationOutput)
}

func (o RemoteCocoapodsRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteCocoapodsRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteCocoapodsRepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteCocoapodsRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteCocoapodsRepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteCocoapodsRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteCocoapodsRepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteCocoapodsRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type RemoteComposerRepositoryContentSynchronisation struct {
	Enabled                      *bool `pulumi:"enabled"`
	PropertiesEnabled            *bool `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            *bool `pulumi:"statisticsEnabled"`
}

// RemoteComposerRepositoryContentSynchronisationInput is an input type that accepts RemoteComposerRepositoryContentSynchronisationArgs and RemoteComposerRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemoteComposerRepositoryContentSynchronisationInput` via:
//
//	RemoteComposerRepositoryContentSynchronisationArgs{...}
type RemoteComposerRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemoteComposerRepositoryContentSynchronisationOutput() RemoteComposerRepositoryContentSynchronisationOutput
	ToRemoteComposerRepositoryContentSynchronisationOutputWithContext(context.Context) RemoteComposerRepositoryContentSynchronisationOutput
}

type RemoteComposerRepositoryContentSynchronisationArgs struct {
	Enabled                      pulumi.BoolPtrInput `pulumi:"enabled"`
	PropertiesEnabled            pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemoteComposerRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteComposerRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemoteComposerRepositoryContentSynchronisationArgs) ToRemoteComposerRepositoryContentSynchronisationOutput() RemoteComposerRepositoryContentSynchronisationOutput {
	return i.ToRemoteComposerRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemoteComposerRepositoryContentSynchronisationArgs) ToRemoteComposerRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteComposerRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteComposerRepositoryContentSynchronisationOutput)
}

func (i RemoteComposerRepositoryContentSynchronisationArgs) ToRemoteComposerRepositoryContentSynchronisationPtrOutput() RemoteComposerRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteComposerRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemoteComposerRepositoryContentSynchronisationArgs) ToRemoteComposerRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteComposerRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteComposerRepositoryContentSynchronisationOutput).ToRemoteComposerRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemoteComposerRepositoryContentSynchronisationPtrInput is an input type that accepts RemoteComposerRepositoryContentSynchronisationArgs, RemoteComposerRepositoryContentSynchronisationPtr and RemoteComposerRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemoteComposerRepositoryContentSynchronisationPtrInput` via:
//
//	        RemoteComposerRepositoryContentSynchronisationArgs{...}
//
//	or:
//
//	        nil
type RemoteComposerRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemoteComposerRepositoryContentSynchronisationPtrOutput() RemoteComposerRepositoryContentSynchronisationPtrOutput
	ToRemoteComposerRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemoteComposerRepositoryContentSynchronisationPtrOutput
}

type remoteComposerRepositoryContentSynchronisationPtrType RemoteComposerRepositoryContentSynchronisationArgs

func RemoteComposerRepositoryContentSynchronisationPtr(v *RemoteComposerRepositoryContentSynchronisationArgs) RemoteComposerRepositoryContentSynchronisationPtrInput {
	return (*remoteComposerRepositoryContentSynchronisationPtrType)(v)
}

func (*remoteComposerRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteComposerRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remoteComposerRepositoryContentSynchronisationPtrType) ToRemoteComposerRepositoryContentSynchronisationPtrOutput() RemoteComposerRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteComposerRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remoteComposerRepositoryContentSynchronisationPtrType) ToRemoteComposerRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteComposerRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteComposerRepositoryContentSynchronisationPtrOutput)
}

type RemoteComposerRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemoteComposerRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteComposerRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteComposerRepositoryContentSynchronisationOutput) ToRemoteComposerRepositoryContentSynchronisationOutput() RemoteComposerRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteComposerRepositoryContentSynchronisationOutput) ToRemoteComposerRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteComposerRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteComposerRepositoryContentSynchronisationOutput) ToRemoteComposerRepositoryContentSynchronisationPtrOutput() RemoteComposerRepositoryContentSynchronisationPtrOutput {
	return o.ToRemoteComposerRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemoteComposerRepositoryContentSynchronisationOutput) ToRemoteComposerRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteComposerRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteComposerRepositoryContentSynchronisation) *RemoteComposerRepositoryContentSynchronisation {
		return &v
	}).(RemoteComposerRepositoryContentSynchronisationPtrOutput)
}

func (o RemoteComposerRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteComposerRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteComposerRepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteComposerRepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteComposerRepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteComposerRepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

func (o RemoteComposerRepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteComposerRepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemoteComposerRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemoteComposerRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteComposerRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteComposerRepositoryContentSynchronisationPtrOutput) ToRemoteComposerRepositoryContentSynchronisationPtrOutput() RemoteComposerRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteComposerRepositoryContentSynchronisationPtrOutput) ToRemoteComposerRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteComposerRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteComposerRepositoryContentSynchronisationPtrOutput) Elem() RemoteComposerRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemoteComposerRepositoryContentSynchronisation) RemoteComposerRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemoteComposerRepositoryContentSynchronisation
		return ret
	}).(RemoteComposerRepositoryContentSynchronisationOutput)
}

func (o RemoteComposerRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteComposerRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteComposerRepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteComposerRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteComposerRepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteComposerRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteComposerRepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteComposerRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type RemoteConanRepositoryContentSynchronisation struct {
	Enabled                      *bool `pulumi:"enabled"`
	PropertiesEnabled            *bool `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            *bool `pulumi:"statisticsEnabled"`
}

// RemoteConanRepositoryContentSynchronisationInput is an input type that accepts RemoteConanRepositoryContentSynchronisationArgs and RemoteConanRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemoteConanRepositoryContentSynchronisationInput` via:
//
//	RemoteConanRepositoryContentSynchronisationArgs{...}
type RemoteConanRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemoteConanRepositoryContentSynchronisationOutput() RemoteConanRepositoryContentSynchronisationOutput
	ToRemoteConanRepositoryContentSynchronisationOutputWithContext(context.Context) RemoteConanRepositoryContentSynchronisationOutput
}

type RemoteConanRepositoryContentSynchronisationArgs struct {
	Enabled                      pulumi.BoolPtrInput `pulumi:"enabled"`
	PropertiesEnabled            pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemoteConanRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteConanRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemoteConanRepositoryContentSynchronisationArgs) ToRemoteConanRepositoryContentSynchronisationOutput() RemoteConanRepositoryContentSynchronisationOutput {
	return i.ToRemoteConanRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemoteConanRepositoryContentSynchronisationArgs) ToRemoteConanRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteConanRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteConanRepositoryContentSynchronisationOutput)
}

func (i RemoteConanRepositoryContentSynchronisationArgs) ToRemoteConanRepositoryContentSynchronisationPtrOutput() RemoteConanRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteConanRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemoteConanRepositoryContentSynchronisationArgs) ToRemoteConanRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteConanRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteConanRepositoryContentSynchronisationOutput).ToRemoteConanRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemoteConanRepositoryContentSynchronisationPtrInput is an input type that accepts RemoteConanRepositoryContentSynchronisationArgs, RemoteConanRepositoryContentSynchronisationPtr and RemoteConanRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemoteConanRepositoryContentSynchronisationPtrInput` via:
//
//	        RemoteConanRepositoryContentSynchronisationArgs{...}
//
//	or:
//
//	        nil
type RemoteConanRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemoteConanRepositoryContentSynchronisationPtrOutput() RemoteConanRepositoryContentSynchronisationPtrOutput
	ToRemoteConanRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemoteConanRepositoryContentSynchronisationPtrOutput
}

type remoteConanRepositoryContentSynchronisationPtrType RemoteConanRepositoryContentSynchronisationArgs

func RemoteConanRepositoryContentSynchronisationPtr(v *RemoteConanRepositoryContentSynchronisationArgs) RemoteConanRepositoryContentSynchronisationPtrInput {
	return (*remoteConanRepositoryContentSynchronisationPtrType)(v)
}

func (*remoteConanRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteConanRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remoteConanRepositoryContentSynchronisationPtrType) ToRemoteConanRepositoryContentSynchronisationPtrOutput() RemoteConanRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteConanRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remoteConanRepositoryContentSynchronisationPtrType) ToRemoteConanRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteConanRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteConanRepositoryContentSynchronisationPtrOutput)
}

type RemoteConanRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemoteConanRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteConanRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteConanRepositoryContentSynchronisationOutput) ToRemoteConanRepositoryContentSynchronisationOutput() RemoteConanRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteConanRepositoryContentSynchronisationOutput) ToRemoteConanRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteConanRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteConanRepositoryContentSynchronisationOutput) ToRemoteConanRepositoryContentSynchronisationPtrOutput() RemoteConanRepositoryContentSynchronisationPtrOutput {
	return o.ToRemoteConanRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemoteConanRepositoryContentSynchronisationOutput) ToRemoteConanRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteConanRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteConanRepositoryContentSynchronisation) *RemoteConanRepositoryContentSynchronisation {
		return &v
	}).(RemoteConanRepositoryContentSynchronisationPtrOutput)
}

func (o RemoteConanRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteConanRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteConanRepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteConanRepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteConanRepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteConanRepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

func (o RemoteConanRepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteConanRepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemoteConanRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemoteConanRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteConanRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteConanRepositoryContentSynchronisationPtrOutput) ToRemoteConanRepositoryContentSynchronisationPtrOutput() RemoteConanRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteConanRepositoryContentSynchronisationPtrOutput) ToRemoteConanRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteConanRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteConanRepositoryContentSynchronisationPtrOutput) Elem() RemoteConanRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemoteConanRepositoryContentSynchronisation) RemoteConanRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemoteConanRepositoryContentSynchronisation
		return ret
	}).(RemoteConanRepositoryContentSynchronisationOutput)
}

func (o RemoteConanRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteConanRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteConanRepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteConanRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteConanRepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteConanRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteConanRepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteConanRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type RemoteCondaRepositoryContentSynchronisation struct {
	Enabled                      *bool `pulumi:"enabled"`
	PropertiesEnabled            *bool `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            *bool `pulumi:"statisticsEnabled"`
}

// RemoteCondaRepositoryContentSynchronisationInput is an input type that accepts RemoteCondaRepositoryContentSynchronisationArgs and RemoteCondaRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemoteCondaRepositoryContentSynchronisationInput` via:
//
//	RemoteCondaRepositoryContentSynchronisationArgs{...}
type RemoteCondaRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemoteCondaRepositoryContentSynchronisationOutput() RemoteCondaRepositoryContentSynchronisationOutput
	ToRemoteCondaRepositoryContentSynchronisationOutputWithContext(context.Context) RemoteCondaRepositoryContentSynchronisationOutput
}

type RemoteCondaRepositoryContentSynchronisationArgs struct {
	Enabled                      pulumi.BoolPtrInput `pulumi:"enabled"`
	PropertiesEnabled            pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemoteCondaRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteCondaRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemoteCondaRepositoryContentSynchronisationArgs) ToRemoteCondaRepositoryContentSynchronisationOutput() RemoteCondaRepositoryContentSynchronisationOutput {
	return i.ToRemoteCondaRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemoteCondaRepositoryContentSynchronisationArgs) ToRemoteCondaRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteCondaRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteCondaRepositoryContentSynchronisationOutput)
}

func (i RemoteCondaRepositoryContentSynchronisationArgs) ToRemoteCondaRepositoryContentSynchronisationPtrOutput() RemoteCondaRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteCondaRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemoteCondaRepositoryContentSynchronisationArgs) ToRemoteCondaRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteCondaRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteCondaRepositoryContentSynchronisationOutput).ToRemoteCondaRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemoteCondaRepositoryContentSynchronisationPtrInput is an input type that accepts RemoteCondaRepositoryContentSynchronisationArgs, RemoteCondaRepositoryContentSynchronisationPtr and RemoteCondaRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemoteCondaRepositoryContentSynchronisationPtrInput` via:
//
//	        RemoteCondaRepositoryContentSynchronisationArgs{...}
//
//	or:
//
//	        nil
type RemoteCondaRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemoteCondaRepositoryContentSynchronisationPtrOutput() RemoteCondaRepositoryContentSynchronisationPtrOutput
	ToRemoteCondaRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemoteCondaRepositoryContentSynchronisationPtrOutput
}

type remoteCondaRepositoryContentSynchronisationPtrType RemoteCondaRepositoryContentSynchronisationArgs

func RemoteCondaRepositoryContentSynchronisationPtr(v *RemoteCondaRepositoryContentSynchronisationArgs) RemoteCondaRepositoryContentSynchronisationPtrInput {
	return (*remoteCondaRepositoryContentSynchronisationPtrType)(v)
}

func (*remoteCondaRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteCondaRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remoteCondaRepositoryContentSynchronisationPtrType) ToRemoteCondaRepositoryContentSynchronisationPtrOutput() RemoteCondaRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteCondaRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remoteCondaRepositoryContentSynchronisationPtrType) ToRemoteCondaRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteCondaRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteCondaRepositoryContentSynchronisationPtrOutput)
}

type RemoteCondaRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemoteCondaRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteCondaRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteCondaRepositoryContentSynchronisationOutput) ToRemoteCondaRepositoryContentSynchronisationOutput() RemoteCondaRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteCondaRepositoryContentSynchronisationOutput) ToRemoteCondaRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteCondaRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteCondaRepositoryContentSynchronisationOutput) ToRemoteCondaRepositoryContentSynchronisationPtrOutput() RemoteCondaRepositoryContentSynchronisationPtrOutput {
	return o.ToRemoteCondaRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemoteCondaRepositoryContentSynchronisationOutput) ToRemoteCondaRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteCondaRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteCondaRepositoryContentSynchronisation) *RemoteCondaRepositoryContentSynchronisation {
		return &v
	}).(RemoteCondaRepositoryContentSynchronisationPtrOutput)
}

func (o RemoteCondaRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteCondaRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteCondaRepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteCondaRepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteCondaRepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteCondaRepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

func (o RemoteCondaRepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteCondaRepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemoteCondaRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemoteCondaRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteCondaRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteCondaRepositoryContentSynchronisationPtrOutput) ToRemoteCondaRepositoryContentSynchronisationPtrOutput() RemoteCondaRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteCondaRepositoryContentSynchronisationPtrOutput) ToRemoteCondaRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteCondaRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteCondaRepositoryContentSynchronisationPtrOutput) Elem() RemoteCondaRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemoteCondaRepositoryContentSynchronisation) RemoteCondaRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemoteCondaRepositoryContentSynchronisation
		return ret
	}).(RemoteCondaRepositoryContentSynchronisationOutput)
}

func (o RemoteCondaRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteCondaRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteCondaRepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteCondaRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteCondaRepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteCondaRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteCondaRepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteCondaRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type RemoteCranRepositoryContentSynchronisation struct {
	Enabled                      *bool `pulumi:"enabled"`
	PropertiesEnabled            *bool `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            *bool `pulumi:"statisticsEnabled"`
}

// RemoteCranRepositoryContentSynchronisationInput is an input type that accepts RemoteCranRepositoryContentSynchronisationArgs and RemoteCranRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemoteCranRepositoryContentSynchronisationInput` via:
//
//	RemoteCranRepositoryContentSynchronisationArgs{...}
type RemoteCranRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemoteCranRepositoryContentSynchronisationOutput() RemoteCranRepositoryContentSynchronisationOutput
	ToRemoteCranRepositoryContentSynchronisationOutputWithContext(context.Context) RemoteCranRepositoryContentSynchronisationOutput
}

type RemoteCranRepositoryContentSynchronisationArgs struct {
	Enabled                      pulumi.BoolPtrInput `pulumi:"enabled"`
	PropertiesEnabled            pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemoteCranRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteCranRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemoteCranRepositoryContentSynchronisationArgs) ToRemoteCranRepositoryContentSynchronisationOutput() RemoteCranRepositoryContentSynchronisationOutput {
	return i.ToRemoteCranRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemoteCranRepositoryContentSynchronisationArgs) ToRemoteCranRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteCranRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteCranRepositoryContentSynchronisationOutput)
}

func (i RemoteCranRepositoryContentSynchronisationArgs) ToRemoteCranRepositoryContentSynchronisationPtrOutput() RemoteCranRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteCranRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemoteCranRepositoryContentSynchronisationArgs) ToRemoteCranRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteCranRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteCranRepositoryContentSynchronisationOutput).ToRemoteCranRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemoteCranRepositoryContentSynchronisationPtrInput is an input type that accepts RemoteCranRepositoryContentSynchronisationArgs, RemoteCranRepositoryContentSynchronisationPtr and RemoteCranRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemoteCranRepositoryContentSynchronisationPtrInput` via:
//
//	        RemoteCranRepositoryContentSynchronisationArgs{...}
//
//	or:
//
//	        nil
type RemoteCranRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemoteCranRepositoryContentSynchronisationPtrOutput() RemoteCranRepositoryContentSynchronisationPtrOutput
	ToRemoteCranRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemoteCranRepositoryContentSynchronisationPtrOutput
}

type remoteCranRepositoryContentSynchronisationPtrType RemoteCranRepositoryContentSynchronisationArgs

func RemoteCranRepositoryContentSynchronisationPtr(v *RemoteCranRepositoryContentSynchronisationArgs) RemoteCranRepositoryContentSynchronisationPtrInput {
	return (*remoteCranRepositoryContentSynchronisationPtrType)(v)
}

func (*remoteCranRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteCranRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remoteCranRepositoryContentSynchronisationPtrType) ToRemoteCranRepositoryContentSynchronisationPtrOutput() RemoteCranRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteCranRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remoteCranRepositoryContentSynchronisationPtrType) ToRemoteCranRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteCranRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteCranRepositoryContentSynchronisationPtrOutput)
}

type RemoteCranRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemoteCranRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteCranRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteCranRepositoryContentSynchronisationOutput) ToRemoteCranRepositoryContentSynchronisationOutput() RemoteCranRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteCranRepositoryContentSynchronisationOutput) ToRemoteCranRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteCranRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteCranRepositoryContentSynchronisationOutput) ToRemoteCranRepositoryContentSynchronisationPtrOutput() RemoteCranRepositoryContentSynchronisationPtrOutput {
	return o.ToRemoteCranRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemoteCranRepositoryContentSynchronisationOutput) ToRemoteCranRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteCranRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteCranRepositoryContentSynchronisation) *RemoteCranRepositoryContentSynchronisation {
		return &v
	}).(RemoteCranRepositoryContentSynchronisationPtrOutput)
}

func (o RemoteCranRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteCranRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteCranRepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteCranRepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteCranRepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteCranRepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

func (o RemoteCranRepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteCranRepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemoteCranRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemoteCranRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteCranRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteCranRepositoryContentSynchronisationPtrOutput) ToRemoteCranRepositoryContentSynchronisationPtrOutput() RemoteCranRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteCranRepositoryContentSynchronisationPtrOutput) ToRemoteCranRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteCranRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteCranRepositoryContentSynchronisationPtrOutput) Elem() RemoteCranRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemoteCranRepositoryContentSynchronisation) RemoteCranRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemoteCranRepositoryContentSynchronisation
		return ret
	}).(RemoteCranRepositoryContentSynchronisationOutput)
}

func (o RemoteCranRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteCranRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteCranRepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteCranRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteCranRepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteCranRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteCranRepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteCranRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type RemoteDebianRepositoryContentSynchronisation struct {
	Enabled                      *bool `pulumi:"enabled"`
	PropertiesEnabled            *bool `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            *bool `pulumi:"statisticsEnabled"`
}

// RemoteDebianRepositoryContentSynchronisationInput is an input type that accepts RemoteDebianRepositoryContentSynchronisationArgs and RemoteDebianRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemoteDebianRepositoryContentSynchronisationInput` via:
//
//	RemoteDebianRepositoryContentSynchronisationArgs{...}
type RemoteDebianRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemoteDebianRepositoryContentSynchronisationOutput() RemoteDebianRepositoryContentSynchronisationOutput
	ToRemoteDebianRepositoryContentSynchronisationOutputWithContext(context.Context) RemoteDebianRepositoryContentSynchronisationOutput
}

type RemoteDebianRepositoryContentSynchronisationArgs struct {
	Enabled                      pulumi.BoolPtrInput `pulumi:"enabled"`
	PropertiesEnabled            pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemoteDebianRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteDebianRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemoteDebianRepositoryContentSynchronisationArgs) ToRemoteDebianRepositoryContentSynchronisationOutput() RemoteDebianRepositoryContentSynchronisationOutput {
	return i.ToRemoteDebianRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemoteDebianRepositoryContentSynchronisationArgs) ToRemoteDebianRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteDebianRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteDebianRepositoryContentSynchronisationOutput)
}

func (i RemoteDebianRepositoryContentSynchronisationArgs) ToRemoteDebianRepositoryContentSynchronisationPtrOutput() RemoteDebianRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteDebianRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemoteDebianRepositoryContentSynchronisationArgs) ToRemoteDebianRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteDebianRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteDebianRepositoryContentSynchronisationOutput).ToRemoteDebianRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemoteDebianRepositoryContentSynchronisationPtrInput is an input type that accepts RemoteDebianRepositoryContentSynchronisationArgs, RemoteDebianRepositoryContentSynchronisationPtr and RemoteDebianRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemoteDebianRepositoryContentSynchronisationPtrInput` via:
//
//	        RemoteDebianRepositoryContentSynchronisationArgs{...}
//
//	or:
//
//	        nil
type RemoteDebianRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemoteDebianRepositoryContentSynchronisationPtrOutput() RemoteDebianRepositoryContentSynchronisationPtrOutput
	ToRemoteDebianRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemoteDebianRepositoryContentSynchronisationPtrOutput
}

type remoteDebianRepositoryContentSynchronisationPtrType RemoteDebianRepositoryContentSynchronisationArgs

func RemoteDebianRepositoryContentSynchronisationPtr(v *RemoteDebianRepositoryContentSynchronisationArgs) RemoteDebianRepositoryContentSynchronisationPtrInput {
	return (*remoteDebianRepositoryContentSynchronisationPtrType)(v)
}

func (*remoteDebianRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteDebianRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remoteDebianRepositoryContentSynchronisationPtrType) ToRemoteDebianRepositoryContentSynchronisationPtrOutput() RemoteDebianRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteDebianRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remoteDebianRepositoryContentSynchronisationPtrType) ToRemoteDebianRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteDebianRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteDebianRepositoryContentSynchronisationPtrOutput)
}

type RemoteDebianRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemoteDebianRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteDebianRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteDebianRepositoryContentSynchronisationOutput) ToRemoteDebianRepositoryContentSynchronisationOutput() RemoteDebianRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteDebianRepositoryContentSynchronisationOutput) ToRemoteDebianRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteDebianRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteDebianRepositoryContentSynchronisationOutput) ToRemoteDebianRepositoryContentSynchronisationPtrOutput() RemoteDebianRepositoryContentSynchronisationPtrOutput {
	return o.ToRemoteDebianRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemoteDebianRepositoryContentSynchronisationOutput) ToRemoteDebianRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteDebianRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteDebianRepositoryContentSynchronisation) *RemoteDebianRepositoryContentSynchronisation {
		return &v
	}).(RemoteDebianRepositoryContentSynchronisationPtrOutput)
}

func (o RemoteDebianRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteDebianRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteDebianRepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteDebianRepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteDebianRepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteDebianRepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

func (o RemoteDebianRepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteDebianRepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemoteDebianRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemoteDebianRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteDebianRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteDebianRepositoryContentSynchronisationPtrOutput) ToRemoteDebianRepositoryContentSynchronisationPtrOutput() RemoteDebianRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteDebianRepositoryContentSynchronisationPtrOutput) ToRemoteDebianRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteDebianRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteDebianRepositoryContentSynchronisationPtrOutput) Elem() RemoteDebianRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemoteDebianRepositoryContentSynchronisation) RemoteDebianRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemoteDebianRepositoryContentSynchronisation
		return ret
	}).(RemoteDebianRepositoryContentSynchronisationOutput)
}

func (o RemoteDebianRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteDebianRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteDebianRepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteDebianRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteDebianRepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteDebianRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteDebianRepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteDebianRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type RemoteDockerRepositoryContentSynchronisation struct {
	Enabled                      *bool `pulumi:"enabled"`
	PropertiesEnabled            *bool `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            *bool `pulumi:"statisticsEnabled"`
}

// RemoteDockerRepositoryContentSynchronisationInput is an input type that accepts RemoteDockerRepositoryContentSynchronisationArgs and RemoteDockerRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemoteDockerRepositoryContentSynchronisationInput` via:
//
//	RemoteDockerRepositoryContentSynchronisationArgs{...}
type RemoteDockerRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemoteDockerRepositoryContentSynchronisationOutput() RemoteDockerRepositoryContentSynchronisationOutput
	ToRemoteDockerRepositoryContentSynchronisationOutputWithContext(context.Context) RemoteDockerRepositoryContentSynchronisationOutput
}

type RemoteDockerRepositoryContentSynchronisationArgs struct {
	Enabled                      pulumi.BoolPtrInput `pulumi:"enabled"`
	PropertiesEnabled            pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemoteDockerRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteDockerRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemoteDockerRepositoryContentSynchronisationArgs) ToRemoteDockerRepositoryContentSynchronisationOutput() RemoteDockerRepositoryContentSynchronisationOutput {
	return i.ToRemoteDockerRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemoteDockerRepositoryContentSynchronisationArgs) ToRemoteDockerRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteDockerRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteDockerRepositoryContentSynchronisationOutput)
}

func (i RemoteDockerRepositoryContentSynchronisationArgs) ToRemoteDockerRepositoryContentSynchronisationPtrOutput() RemoteDockerRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteDockerRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemoteDockerRepositoryContentSynchronisationArgs) ToRemoteDockerRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteDockerRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteDockerRepositoryContentSynchronisationOutput).ToRemoteDockerRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemoteDockerRepositoryContentSynchronisationPtrInput is an input type that accepts RemoteDockerRepositoryContentSynchronisationArgs, RemoteDockerRepositoryContentSynchronisationPtr and RemoteDockerRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemoteDockerRepositoryContentSynchronisationPtrInput` via:
//
//	        RemoteDockerRepositoryContentSynchronisationArgs{...}
//
//	or:
//
//	        nil
type RemoteDockerRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemoteDockerRepositoryContentSynchronisationPtrOutput() RemoteDockerRepositoryContentSynchronisationPtrOutput
	ToRemoteDockerRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemoteDockerRepositoryContentSynchronisationPtrOutput
}

type remoteDockerRepositoryContentSynchronisationPtrType RemoteDockerRepositoryContentSynchronisationArgs

func RemoteDockerRepositoryContentSynchronisationPtr(v *RemoteDockerRepositoryContentSynchronisationArgs) RemoteDockerRepositoryContentSynchronisationPtrInput {
	return (*remoteDockerRepositoryContentSynchronisationPtrType)(v)
}

func (*remoteDockerRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteDockerRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remoteDockerRepositoryContentSynchronisationPtrType) ToRemoteDockerRepositoryContentSynchronisationPtrOutput() RemoteDockerRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteDockerRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remoteDockerRepositoryContentSynchronisationPtrType) ToRemoteDockerRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteDockerRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteDockerRepositoryContentSynchronisationPtrOutput)
}

type RemoteDockerRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemoteDockerRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteDockerRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteDockerRepositoryContentSynchronisationOutput) ToRemoteDockerRepositoryContentSynchronisationOutput() RemoteDockerRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteDockerRepositoryContentSynchronisationOutput) ToRemoteDockerRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteDockerRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteDockerRepositoryContentSynchronisationOutput) ToRemoteDockerRepositoryContentSynchronisationPtrOutput() RemoteDockerRepositoryContentSynchronisationPtrOutput {
	return o.ToRemoteDockerRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemoteDockerRepositoryContentSynchronisationOutput) ToRemoteDockerRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteDockerRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteDockerRepositoryContentSynchronisation) *RemoteDockerRepositoryContentSynchronisation {
		return &v
	}).(RemoteDockerRepositoryContentSynchronisationPtrOutput)
}

func (o RemoteDockerRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteDockerRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteDockerRepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteDockerRepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteDockerRepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteDockerRepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

func (o RemoteDockerRepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteDockerRepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemoteDockerRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemoteDockerRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteDockerRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteDockerRepositoryContentSynchronisationPtrOutput) ToRemoteDockerRepositoryContentSynchronisationPtrOutput() RemoteDockerRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteDockerRepositoryContentSynchronisationPtrOutput) ToRemoteDockerRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteDockerRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteDockerRepositoryContentSynchronisationPtrOutput) Elem() RemoteDockerRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemoteDockerRepositoryContentSynchronisation) RemoteDockerRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemoteDockerRepositoryContentSynchronisation
		return ret
	}).(RemoteDockerRepositoryContentSynchronisationOutput)
}

func (o RemoteDockerRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteDockerRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteDockerRepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteDockerRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteDockerRepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteDockerRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteDockerRepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteDockerRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type RemoteGemsRepositoryContentSynchronisation struct {
	Enabled                      *bool `pulumi:"enabled"`
	PropertiesEnabled            *bool `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            *bool `pulumi:"statisticsEnabled"`
}

// RemoteGemsRepositoryContentSynchronisationInput is an input type that accepts RemoteGemsRepositoryContentSynchronisationArgs and RemoteGemsRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemoteGemsRepositoryContentSynchronisationInput` via:
//
//	RemoteGemsRepositoryContentSynchronisationArgs{...}
type RemoteGemsRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemoteGemsRepositoryContentSynchronisationOutput() RemoteGemsRepositoryContentSynchronisationOutput
	ToRemoteGemsRepositoryContentSynchronisationOutputWithContext(context.Context) RemoteGemsRepositoryContentSynchronisationOutput
}

type RemoteGemsRepositoryContentSynchronisationArgs struct {
	Enabled                      pulumi.BoolPtrInput `pulumi:"enabled"`
	PropertiesEnabled            pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemoteGemsRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteGemsRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemoteGemsRepositoryContentSynchronisationArgs) ToRemoteGemsRepositoryContentSynchronisationOutput() RemoteGemsRepositoryContentSynchronisationOutput {
	return i.ToRemoteGemsRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemoteGemsRepositoryContentSynchronisationArgs) ToRemoteGemsRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteGemsRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteGemsRepositoryContentSynchronisationOutput)
}

func (i RemoteGemsRepositoryContentSynchronisationArgs) ToRemoteGemsRepositoryContentSynchronisationPtrOutput() RemoteGemsRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteGemsRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemoteGemsRepositoryContentSynchronisationArgs) ToRemoteGemsRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteGemsRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteGemsRepositoryContentSynchronisationOutput).ToRemoteGemsRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemoteGemsRepositoryContentSynchronisationPtrInput is an input type that accepts RemoteGemsRepositoryContentSynchronisationArgs, RemoteGemsRepositoryContentSynchronisationPtr and RemoteGemsRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemoteGemsRepositoryContentSynchronisationPtrInput` via:
//
//	        RemoteGemsRepositoryContentSynchronisationArgs{...}
//
//	or:
//
//	        nil
type RemoteGemsRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemoteGemsRepositoryContentSynchronisationPtrOutput() RemoteGemsRepositoryContentSynchronisationPtrOutput
	ToRemoteGemsRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemoteGemsRepositoryContentSynchronisationPtrOutput
}

type remoteGemsRepositoryContentSynchronisationPtrType RemoteGemsRepositoryContentSynchronisationArgs

func RemoteGemsRepositoryContentSynchronisationPtr(v *RemoteGemsRepositoryContentSynchronisationArgs) RemoteGemsRepositoryContentSynchronisationPtrInput {
	return (*remoteGemsRepositoryContentSynchronisationPtrType)(v)
}

func (*remoteGemsRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteGemsRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remoteGemsRepositoryContentSynchronisationPtrType) ToRemoteGemsRepositoryContentSynchronisationPtrOutput() RemoteGemsRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteGemsRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remoteGemsRepositoryContentSynchronisationPtrType) ToRemoteGemsRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteGemsRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteGemsRepositoryContentSynchronisationPtrOutput)
}

type RemoteGemsRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemoteGemsRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteGemsRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteGemsRepositoryContentSynchronisationOutput) ToRemoteGemsRepositoryContentSynchronisationOutput() RemoteGemsRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteGemsRepositoryContentSynchronisationOutput) ToRemoteGemsRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteGemsRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteGemsRepositoryContentSynchronisationOutput) ToRemoteGemsRepositoryContentSynchronisationPtrOutput() RemoteGemsRepositoryContentSynchronisationPtrOutput {
	return o.ToRemoteGemsRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemoteGemsRepositoryContentSynchronisationOutput) ToRemoteGemsRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteGemsRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteGemsRepositoryContentSynchronisation) *RemoteGemsRepositoryContentSynchronisation {
		return &v
	}).(RemoteGemsRepositoryContentSynchronisationPtrOutput)
}

func (o RemoteGemsRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteGemsRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteGemsRepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteGemsRepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteGemsRepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteGemsRepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

func (o RemoteGemsRepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteGemsRepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemoteGemsRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemoteGemsRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteGemsRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteGemsRepositoryContentSynchronisationPtrOutput) ToRemoteGemsRepositoryContentSynchronisationPtrOutput() RemoteGemsRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteGemsRepositoryContentSynchronisationPtrOutput) ToRemoteGemsRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteGemsRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteGemsRepositoryContentSynchronisationPtrOutput) Elem() RemoteGemsRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemoteGemsRepositoryContentSynchronisation) RemoteGemsRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemoteGemsRepositoryContentSynchronisation
		return ret
	}).(RemoteGemsRepositoryContentSynchronisationOutput)
}

func (o RemoteGemsRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteGemsRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteGemsRepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteGemsRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteGemsRepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteGemsRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteGemsRepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteGemsRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type RemoteGenericRepositoryContentSynchronisation struct {
	Enabled                      *bool `pulumi:"enabled"`
	PropertiesEnabled            *bool `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            *bool `pulumi:"statisticsEnabled"`
}

// RemoteGenericRepositoryContentSynchronisationInput is an input type that accepts RemoteGenericRepositoryContentSynchronisationArgs and RemoteGenericRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemoteGenericRepositoryContentSynchronisationInput` via:
//
//	RemoteGenericRepositoryContentSynchronisationArgs{...}
type RemoteGenericRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemoteGenericRepositoryContentSynchronisationOutput() RemoteGenericRepositoryContentSynchronisationOutput
	ToRemoteGenericRepositoryContentSynchronisationOutputWithContext(context.Context) RemoteGenericRepositoryContentSynchronisationOutput
}

type RemoteGenericRepositoryContentSynchronisationArgs struct {
	Enabled                      pulumi.BoolPtrInput `pulumi:"enabled"`
	PropertiesEnabled            pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemoteGenericRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteGenericRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemoteGenericRepositoryContentSynchronisationArgs) ToRemoteGenericRepositoryContentSynchronisationOutput() RemoteGenericRepositoryContentSynchronisationOutput {
	return i.ToRemoteGenericRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemoteGenericRepositoryContentSynchronisationArgs) ToRemoteGenericRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteGenericRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteGenericRepositoryContentSynchronisationOutput)
}

func (i RemoteGenericRepositoryContentSynchronisationArgs) ToRemoteGenericRepositoryContentSynchronisationPtrOutput() RemoteGenericRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteGenericRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemoteGenericRepositoryContentSynchronisationArgs) ToRemoteGenericRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteGenericRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteGenericRepositoryContentSynchronisationOutput).ToRemoteGenericRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemoteGenericRepositoryContentSynchronisationPtrInput is an input type that accepts RemoteGenericRepositoryContentSynchronisationArgs, RemoteGenericRepositoryContentSynchronisationPtr and RemoteGenericRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemoteGenericRepositoryContentSynchronisationPtrInput` via:
//
//	        RemoteGenericRepositoryContentSynchronisationArgs{...}
//
//	or:
//
//	        nil
type RemoteGenericRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemoteGenericRepositoryContentSynchronisationPtrOutput() RemoteGenericRepositoryContentSynchronisationPtrOutput
	ToRemoteGenericRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemoteGenericRepositoryContentSynchronisationPtrOutput
}

type remoteGenericRepositoryContentSynchronisationPtrType RemoteGenericRepositoryContentSynchronisationArgs

func RemoteGenericRepositoryContentSynchronisationPtr(v *RemoteGenericRepositoryContentSynchronisationArgs) RemoteGenericRepositoryContentSynchronisationPtrInput {
	return (*remoteGenericRepositoryContentSynchronisationPtrType)(v)
}

func (*remoteGenericRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteGenericRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remoteGenericRepositoryContentSynchronisationPtrType) ToRemoteGenericRepositoryContentSynchronisationPtrOutput() RemoteGenericRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteGenericRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remoteGenericRepositoryContentSynchronisationPtrType) ToRemoteGenericRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteGenericRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteGenericRepositoryContentSynchronisationPtrOutput)
}

type RemoteGenericRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemoteGenericRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteGenericRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteGenericRepositoryContentSynchronisationOutput) ToRemoteGenericRepositoryContentSynchronisationOutput() RemoteGenericRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteGenericRepositoryContentSynchronisationOutput) ToRemoteGenericRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteGenericRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteGenericRepositoryContentSynchronisationOutput) ToRemoteGenericRepositoryContentSynchronisationPtrOutput() RemoteGenericRepositoryContentSynchronisationPtrOutput {
	return o.ToRemoteGenericRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemoteGenericRepositoryContentSynchronisationOutput) ToRemoteGenericRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteGenericRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteGenericRepositoryContentSynchronisation) *RemoteGenericRepositoryContentSynchronisation {
		return &v
	}).(RemoteGenericRepositoryContentSynchronisationPtrOutput)
}

func (o RemoteGenericRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteGenericRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteGenericRepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteGenericRepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteGenericRepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteGenericRepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

func (o RemoteGenericRepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteGenericRepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemoteGenericRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemoteGenericRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteGenericRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteGenericRepositoryContentSynchronisationPtrOutput) ToRemoteGenericRepositoryContentSynchronisationPtrOutput() RemoteGenericRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteGenericRepositoryContentSynchronisationPtrOutput) ToRemoteGenericRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteGenericRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteGenericRepositoryContentSynchronisationPtrOutput) Elem() RemoteGenericRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemoteGenericRepositoryContentSynchronisation) RemoteGenericRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemoteGenericRepositoryContentSynchronisation
		return ret
	}).(RemoteGenericRepositoryContentSynchronisationOutput)
}

func (o RemoteGenericRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteGenericRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteGenericRepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteGenericRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteGenericRepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteGenericRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteGenericRepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteGenericRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type RemoteGitlfsRepositoryContentSynchronisation struct {
	Enabled                      *bool `pulumi:"enabled"`
	PropertiesEnabled            *bool `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            *bool `pulumi:"statisticsEnabled"`
}

// RemoteGitlfsRepositoryContentSynchronisationInput is an input type that accepts RemoteGitlfsRepositoryContentSynchronisationArgs and RemoteGitlfsRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemoteGitlfsRepositoryContentSynchronisationInput` via:
//
//	RemoteGitlfsRepositoryContentSynchronisationArgs{...}
type RemoteGitlfsRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemoteGitlfsRepositoryContentSynchronisationOutput() RemoteGitlfsRepositoryContentSynchronisationOutput
	ToRemoteGitlfsRepositoryContentSynchronisationOutputWithContext(context.Context) RemoteGitlfsRepositoryContentSynchronisationOutput
}

type RemoteGitlfsRepositoryContentSynchronisationArgs struct {
	Enabled                      pulumi.BoolPtrInput `pulumi:"enabled"`
	PropertiesEnabled            pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemoteGitlfsRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteGitlfsRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemoteGitlfsRepositoryContentSynchronisationArgs) ToRemoteGitlfsRepositoryContentSynchronisationOutput() RemoteGitlfsRepositoryContentSynchronisationOutput {
	return i.ToRemoteGitlfsRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemoteGitlfsRepositoryContentSynchronisationArgs) ToRemoteGitlfsRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteGitlfsRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteGitlfsRepositoryContentSynchronisationOutput)
}

func (i RemoteGitlfsRepositoryContentSynchronisationArgs) ToRemoteGitlfsRepositoryContentSynchronisationPtrOutput() RemoteGitlfsRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteGitlfsRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemoteGitlfsRepositoryContentSynchronisationArgs) ToRemoteGitlfsRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteGitlfsRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteGitlfsRepositoryContentSynchronisationOutput).ToRemoteGitlfsRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemoteGitlfsRepositoryContentSynchronisationPtrInput is an input type that accepts RemoteGitlfsRepositoryContentSynchronisationArgs, RemoteGitlfsRepositoryContentSynchronisationPtr and RemoteGitlfsRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemoteGitlfsRepositoryContentSynchronisationPtrInput` via:
//
//	        RemoteGitlfsRepositoryContentSynchronisationArgs{...}
//
//	or:
//
//	        nil
type RemoteGitlfsRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemoteGitlfsRepositoryContentSynchronisationPtrOutput() RemoteGitlfsRepositoryContentSynchronisationPtrOutput
	ToRemoteGitlfsRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemoteGitlfsRepositoryContentSynchronisationPtrOutput
}

type remoteGitlfsRepositoryContentSynchronisationPtrType RemoteGitlfsRepositoryContentSynchronisationArgs

func RemoteGitlfsRepositoryContentSynchronisationPtr(v *RemoteGitlfsRepositoryContentSynchronisationArgs) RemoteGitlfsRepositoryContentSynchronisationPtrInput {
	return (*remoteGitlfsRepositoryContentSynchronisationPtrType)(v)
}

func (*remoteGitlfsRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteGitlfsRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remoteGitlfsRepositoryContentSynchronisationPtrType) ToRemoteGitlfsRepositoryContentSynchronisationPtrOutput() RemoteGitlfsRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteGitlfsRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remoteGitlfsRepositoryContentSynchronisationPtrType) ToRemoteGitlfsRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteGitlfsRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteGitlfsRepositoryContentSynchronisationPtrOutput)
}

type RemoteGitlfsRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemoteGitlfsRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteGitlfsRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteGitlfsRepositoryContentSynchronisationOutput) ToRemoteGitlfsRepositoryContentSynchronisationOutput() RemoteGitlfsRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteGitlfsRepositoryContentSynchronisationOutput) ToRemoteGitlfsRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteGitlfsRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteGitlfsRepositoryContentSynchronisationOutput) ToRemoteGitlfsRepositoryContentSynchronisationPtrOutput() RemoteGitlfsRepositoryContentSynchronisationPtrOutput {
	return o.ToRemoteGitlfsRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemoteGitlfsRepositoryContentSynchronisationOutput) ToRemoteGitlfsRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteGitlfsRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteGitlfsRepositoryContentSynchronisation) *RemoteGitlfsRepositoryContentSynchronisation {
		return &v
	}).(RemoteGitlfsRepositoryContentSynchronisationPtrOutput)
}

func (o RemoteGitlfsRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteGitlfsRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteGitlfsRepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteGitlfsRepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteGitlfsRepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteGitlfsRepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

func (o RemoteGitlfsRepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteGitlfsRepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemoteGitlfsRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemoteGitlfsRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteGitlfsRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteGitlfsRepositoryContentSynchronisationPtrOutput) ToRemoteGitlfsRepositoryContentSynchronisationPtrOutput() RemoteGitlfsRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteGitlfsRepositoryContentSynchronisationPtrOutput) ToRemoteGitlfsRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteGitlfsRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteGitlfsRepositoryContentSynchronisationPtrOutput) Elem() RemoteGitlfsRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemoteGitlfsRepositoryContentSynchronisation) RemoteGitlfsRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemoteGitlfsRepositoryContentSynchronisation
		return ret
	}).(RemoteGitlfsRepositoryContentSynchronisationOutput)
}

func (o RemoteGitlfsRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteGitlfsRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteGitlfsRepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteGitlfsRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteGitlfsRepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteGitlfsRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteGitlfsRepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteGitlfsRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type RemoteGoRepositoryContentSynchronisation struct {
	Enabled                      *bool `pulumi:"enabled"`
	PropertiesEnabled            *bool `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            *bool `pulumi:"statisticsEnabled"`
}

// RemoteGoRepositoryContentSynchronisationInput is an input type that accepts RemoteGoRepositoryContentSynchronisationArgs and RemoteGoRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemoteGoRepositoryContentSynchronisationInput` via:
//
//	RemoteGoRepositoryContentSynchronisationArgs{...}
type RemoteGoRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemoteGoRepositoryContentSynchronisationOutput() RemoteGoRepositoryContentSynchronisationOutput
	ToRemoteGoRepositoryContentSynchronisationOutputWithContext(context.Context) RemoteGoRepositoryContentSynchronisationOutput
}

type RemoteGoRepositoryContentSynchronisationArgs struct {
	Enabled                      pulumi.BoolPtrInput `pulumi:"enabled"`
	PropertiesEnabled            pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemoteGoRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteGoRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemoteGoRepositoryContentSynchronisationArgs) ToRemoteGoRepositoryContentSynchronisationOutput() RemoteGoRepositoryContentSynchronisationOutput {
	return i.ToRemoteGoRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemoteGoRepositoryContentSynchronisationArgs) ToRemoteGoRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteGoRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteGoRepositoryContentSynchronisationOutput)
}

func (i RemoteGoRepositoryContentSynchronisationArgs) ToRemoteGoRepositoryContentSynchronisationPtrOutput() RemoteGoRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteGoRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemoteGoRepositoryContentSynchronisationArgs) ToRemoteGoRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteGoRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteGoRepositoryContentSynchronisationOutput).ToRemoteGoRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemoteGoRepositoryContentSynchronisationPtrInput is an input type that accepts RemoteGoRepositoryContentSynchronisationArgs, RemoteGoRepositoryContentSynchronisationPtr and RemoteGoRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemoteGoRepositoryContentSynchronisationPtrInput` via:
//
//	        RemoteGoRepositoryContentSynchronisationArgs{...}
//
//	or:
//
//	        nil
type RemoteGoRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemoteGoRepositoryContentSynchronisationPtrOutput() RemoteGoRepositoryContentSynchronisationPtrOutput
	ToRemoteGoRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemoteGoRepositoryContentSynchronisationPtrOutput
}

type remoteGoRepositoryContentSynchronisationPtrType RemoteGoRepositoryContentSynchronisationArgs

func RemoteGoRepositoryContentSynchronisationPtr(v *RemoteGoRepositoryContentSynchronisationArgs) RemoteGoRepositoryContentSynchronisationPtrInput {
	return (*remoteGoRepositoryContentSynchronisationPtrType)(v)
}

func (*remoteGoRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteGoRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remoteGoRepositoryContentSynchronisationPtrType) ToRemoteGoRepositoryContentSynchronisationPtrOutput() RemoteGoRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteGoRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remoteGoRepositoryContentSynchronisationPtrType) ToRemoteGoRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteGoRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteGoRepositoryContentSynchronisationPtrOutput)
}

type RemoteGoRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemoteGoRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteGoRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteGoRepositoryContentSynchronisationOutput) ToRemoteGoRepositoryContentSynchronisationOutput() RemoteGoRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteGoRepositoryContentSynchronisationOutput) ToRemoteGoRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteGoRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteGoRepositoryContentSynchronisationOutput) ToRemoteGoRepositoryContentSynchronisationPtrOutput() RemoteGoRepositoryContentSynchronisationPtrOutput {
	return o.ToRemoteGoRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemoteGoRepositoryContentSynchronisationOutput) ToRemoteGoRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteGoRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteGoRepositoryContentSynchronisation) *RemoteGoRepositoryContentSynchronisation {
		return &v
	}).(RemoteGoRepositoryContentSynchronisationPtrOutput)
}

func (o RemoteGoRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteGoRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteGoRepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteGoRepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteGoRepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteGoRepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

func (o RemoteGoRepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteGoRepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemoteGoRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemoteGoRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteGoRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteGoRepositoryContentSynchronisationPtrOutput) ToRemoteGoRepositoryContentSynchronisationPtrOutput() RemoteGoRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteGoRepositoryContentSynchronisationPtrOutput) ToRemoteGoRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteGoRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteGoRepositoryContentSynchronisationPtrOutput) Elem() RemoteGoRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemoteGoRepositoryContentSynchronisation) RemoteGoRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemoteGoRepositoryContentSynchronisation
		return ret
	}).(RemoteGoRepositoryContentSynchronisationOutput)
}

func (o RemoteGoRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteGoRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteGoRepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteGoRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteGoRepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteGoRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteGoRepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteGoRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type RemoteGradleRepositoryContentSynchronisation struct {
	Enabled                      *bool `pulumi:"enabled"`
	PropertiesEnabled            *bool `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            *bool `pulumi:"statisticsEnabled"`
}

// RemoteGradleRepositoryContentSynchronisationInput is an input type that accepts RemoteGradleRepositoryContentSynchronisationArgs and RemoteGradleRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemoteGradleRepositoryContentSynchronisationInput` via:
//
//	RemoteGradleRepositoryContentSynchronisationArgs{...}
type RemoteGradleRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemoteGradleRepositoryContentSynchronisationOutput() RemoteGradleRepositoryContentSynchronisationOutput
	ToRemoteGradleRepositoryContentSynchronisationOutputWithContext(context.Context) RemoteGradleRepositoryContentSynchronisationOutput
}

type RemoteGradleRepositoryContentSynchronisationArgs struct {
	Enabled                      pulumi.BoolPtrInput `pulumi:"enabled"`
	PropertiesEnabled            pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemoteGradleRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteGradleRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemoteGradleRepositoryContentSynchronisationArgs) ToRemoteGradleRepositoryContentSynchronisationOutput() RemoteGradleRepositoryContentSynchronisationOutput {
	return i.ToRemoteGradleRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemoteGradleRepositoryContentSynchronisationArgs) ToRemoteGradleRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteGradleRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteGradleRepositoryContentSynchronisationOutput)
}

func (i RemoteGradleRepositoryContentSynchronisationArgs) ToRemoteGradleRepositoryContentSynchronisationPtrOutput() RemoteGradleRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteGradleRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemoteGradleRepositoryContentSynchronisationArgs) ToRemoteGradleRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteGradleRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteGradleRepositoryContentSynchronisationOutput).ToRemoteGradleRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemoteGradleRepositoryContentSynchronisationPtrInput is an input type that accepts RemoteGradleRepositoryContentSynchronisationArgs, RemoteGradleRepositoryContentSynchronisationPtr and RemoteGradleRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemoteGradleRepositoryContentSynchronisationPtrInput` via:
//
//	        RemoteGradleRepositoryContentSynchronisationArgs{...}
//
//	or:
//
//	        nil
type RemoteGradleRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemoteGradleRepositoryContentSynchronisationPtrOutput() RemoteGradleRepositoryContentSynchronisationPtrOutput
	ToRemoteGradleRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemoteGradleRepositoryContentSynchronisationPtrOutput
}

type remoteGradleRepositoryContentSynchronisationPtrType RemoteGradleRepositoryContentSynchronisationArgs

func RemoteGradleRepositoryContentSynchronisationPtr(v *RemoteGradleRepositoryContentSynchronisationArgs) RemoteGradleRepositoryContentSynchronisationPtrInput {
	return (*remoteGradleRepositoryContentSynchronisationPtrType)(v)
}

func (*remoteGradleRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteGradleRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remoteGradleRepositoryContentSynchronisationPtrType) ToRemoteGradleRepositoryContentSynchronisationPtrOutput() RemoteGradleRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteGradleRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remoteGradleRepositoryContentSynchronisationPtrType) ToRemoteGradleRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteGradleRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteGradleRepositoryContentSynchronisationPtrOutput)
}

type RemoteGradleRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemoteGradleRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteGradleRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteGradleRepositoryContentSynchronisationOutput) ToRemoteGradleRepositoryContentSynchronisationOutput() RemoteGradleRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteGradleRepositoryContentSynchronisationOutput) ToRemoteGradleRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteGradleRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteGradleRepositoryContentSynchronisationOutput) ToRemoteGradleRepositoryContentSynchronisationPtrOutput() RemoteGradleRepositoryContentSynchronisationPtrOutput {
	return o.ToRemoteGradleRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemoteGradleRepositoryContentSynchronisationOutput) ToRemoteGradleRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteGradleRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteGradleRepositoryContentSynchronisation) *RemoteGradleRepositoryContentSynchronisation {
		return &v
	}).(RemoteGradleRepositoryContentSynchronisationPtrOutput)
}

func (o RemoteGradleRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteGradleRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteGradleRepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteGradleRepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteGradleRepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteGradleRepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

func (o RemoteGradleRepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteGradleRepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemoteGradleRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemoteGradleRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteGradleRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteGradleRepositoryContentSynchronisationPtrOutput) ToRemoteGradleRepositoryContentSynchronisationPtrOutput() RemoteGradleRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteGradleRepositoryContentSynchronisationPtrOutput) ToRemoteGradleRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteGradleRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteGradleRepositoryContentSynchronisationPtrOutput) Elem() RemoteGradleRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemoteGradleRepositoryContentSynchronisation) RemoteGradleRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemoteGradleRepositoryContentSynchronisation
		return ret
	}).(RemoteGradleRepositoryContentSynchronisationOutput)
}

func (o RemoteGradleRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteGradleRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteGradleRepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteGradleRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteGradleRepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteGradleRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteGradleRepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteGradleRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type RemoteHelmRepositoryContentSynchronisation struct {
	Enabled                      *bool `pulumi:"enabled"`
	PropertiesEnabled            *bool `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            *bool `pulumi:"statisticsEnabled"`
}

// RemoteHelmRepositoryContentSynchronisationInput is an input type that accepts RemoteHelmRepositoryContentSynchronisationArgs and RemoteHelmRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemoteHelmRepositoryContentSynchronisationInput` via:
//
//	RemoteHelmRepositoryContentSynchronisationArgs{...}
type RemoteHelmRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemoteHelmRepositoryContentSynchronisationOutput() RemoteHelmRepositoryContentSynchronisationOutput
	ToRemoteHelmRepositoryContentSynchronisationOutputWithContext(context.Context) RemoteHelmRepositoryContentSynchronisationOutput
}

type RemoteHelmRepositoryContentSynchronisationArgs struct {
	Enabled                      pulumi.BoolPtrInput `pulumi:"enabled"`
	PropertiesEnabled            pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemoteHelmRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteHelmRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemoteHelmRepositoryContentSynchronisationArgs) ToRemoteHelmRepositoryContentSynchronisationOutput() RemoteHelmRepositoryContentSynchronisationOutput {
	return i.ToRemoteHelmRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemoteHelmRepositoryContentSynchronisationArgs) ToRemoteHelmRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteHelmRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteHelmRepositoryContentSynchronisationOutput)
}

func (i RemoteHelmRepositoryContentSynchronisationArgs) ToRemoteHelmRepositoryContentSynchronisationPtrOutput() RemoteHelmRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteHelmRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemoteHelmRepositoryContentSynchronisationArgs) ToRemoteHelmRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteHelmRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteHelmRepositoryContentSynchronisationOutput).ToRemoteHelmRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemoteHelmRepositoryContentSynchronisationPtrInput is an input type that accepts RemoteHelmRepositoryContentSynchronisationArgs, RemoteHelmRepositoryContentSynchronisationPtr and RemoteHelmRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemoteHelmRepositoryContentSynchronisationPtrInput` via:
//
//	        RemoteHelmRepositoryContentSynchronisationArgs{...}
//
//	or:
//
//	        nil
type RemoteHelmRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemoteHelmRepositoryContentSynchronisationPtrOutput() RemoteHelmRepositoryContentSynchronisationPtrOutput
	ToRemoteHelmRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemoteHelmRepositoryContentSynchronisationPtrOutput
}

type remoteHelmRepositoryContentSynchronisationPtrType RemoteHelmRepositoryContentSynchronisationArgs

func RemoteHelmRepositoryContentSynchronisationPtr(v *RemoteHelmRepositoryContentSynchronisationArgs) RemoteHelmRepositoryContentSynchronisationPtrInput {
	return (*remoteHelmRepositoryContentSynchronisationPtrType)(v)
}

func (*remoteHelmRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteHelmRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remoteHelmRepositoryContentSynchronisationPtrType) ToRemoteHelmRepositoryContentSynchronisationPtrOutput() RemoteHelmRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteHelmRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remoteHelmRepositoryContentSynchronisationPtrType) ToRemoteHelmRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteHelmRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteHelmRepositoryContentSynchronisationPtrOutput)
}

type RemoteHelmRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemoteHelmRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteHelmRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteHelmRepositoryContentSynchronisationOutput) ToRemoteHelmRepositoryContentSynchronisationOutput() RemoteHelmRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteHelmRepositoryContentSynchronisationOutput) ToRemoteHelmRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteHelmRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteHelmRepositoryContentSynchronisationOutput) ToRemoteHelmRepositoryContentSynchronisationPtrOutput() RemoteHelmRepositoryContentSynchronisationPtrOutput {
	return o.ToRemoteHelmRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemoteHelmRepositoryContentSynchronisationOutput) ToRemoteHelmRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteHelmRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteHelmRepositoryContentSynchronisation) *RemoteHelmRepositoryContentSynchronisation {
		return &v
	}).(RemoteHelmRepositoryContentSynchronisationPtrOutput)
}

func (o RemoteHelmRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteHelmRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteHelmRepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteHelmRepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteHelmRepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteHelmRepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

func (o RemoteHelmRepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteHelmRepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemoteHelmRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemoteHelmRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteHelmRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteHelmRepositoryContentSynchronisationPtrOutput) ToRemoteHelmRepositoryContentSynchronisationPtrOutput() RemoteHelmRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteHelmRepositoryContentSynchronisationPtrOutput) ToRemoteHelmRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteHelmRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteHelmRepositoryContentSynchronisationPtrOutput) Elem() RemoteHelmRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemoteHelmRepositoryContentSynchronisation) RemoteHelmRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemoteHelmRepositoryContentSynchronisation
		return ret
	}).(RemoteHelmRepositoryContentSynchronisationOutput)
}

func (o RemoteHelmRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteHelmRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteHelmRepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteHelmRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteHelmRepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteHelmRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteHelmRepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteHelmRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type RemoteIvyRepositoryContentSynchronisation struct {
	Enabled                      *bool `pulumi:"enabled"`
	PropertiesEnabled            *bool `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            *bool `pulumi:"statisticsEnabled"`
}

// RemoteIvyRepositoryContentSynchronisationInput is an input type that accepts RemoteIvyRepositoryContentSynchronisationArgs and RemoteIvyRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemoteIvyRepositoryContentSynchronisationInput` via:
//
//	RemoteIvyRepositoryContentSynchronisationArgs{...}
type RemoteIvyRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemoteIvyRepositoryContentSynchronisationOutput() RemoteIvyRepositoryContentSynchronisationOutput
	ToRemoteIvyRepositoryContentSynchronisationOutputWithContext(context.Context) RemoteIvyRepositoryContentSynchronisationOutput
}

type RemoteIvyRepositoryContentSynchronisationArgs struct {
	Enabled                      pulumi.BoolPtrInput `pulumi:"enabled"`
	PropertiesEnabled            pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemoteIvyRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteIvyRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemoteIvyRepositoryContentSynchronisationArgs) ToRemoteIvyRepositoryContentSynchronisationOutput() RemoteIvyRepositoryContentSynchronisationOutput {
	return i.ToRemoteIvyRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemoteIvyRepositoryContentSynchronisationArgs) ToRemoteIvyRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteIvyRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteIvyRepositoryContentSynchronisationOutput)
}

func (i RemoteIvyRepositoryContentSynchronisationArgs) ToRemoteIvyRepositoryContentSynchronisationPtrOutput() RemoteIvyRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteIvyRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemoteIvyRepositoryContentSynchronisationArgs) ToRemoteIvyRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteIvyRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteIvyRepositoryContentSynchronisationOutput).ToRemoteIvyRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemoteIvyRepositoryContentSynchronisationPtrInput is an input type that accepts RemoteIvyRepositoryContentSynchronisationArgs, RemoteIvyRepositoryContentSynchronisationPtr and RemoteIvyRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemoteIvyRepositoryContentSynchronisationPtrInput` via:
//
//	        RemoteIvyRepositoryContentSynchronisationArgs{...}
//
//	or:
//
//	        nil
type RemoteIvyRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemoteIvyRepositoryContentSynchronisationPtrOutput() RemoteIvyRepositoryContentSynchronisationPtrOutput
	ToRemoteIvyRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemoteIvyRepositoryContentSynchronisationPtrOutput
}

type remoteIvyRepositoryContentSynchronisationPtrType RemoteIvyRepositoryContentSynchronisationArgs

func RemoteIvyRepositoryContentSynchronisationPtr(v *RemoteIvyRepositoryContentSynchronisationArgs) RemoteIvyRepositoryContentSynchronisationPtrInput {
	return (*remoteIvyRepositoryContentSynchronisationPtrType)(v)
}

func (*remoteIvyRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteIvyRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remoteIvyRepositoryContentSynchronisationPtrType) ToRemoteIvyRepositoryContentSynchronisationPtrOutput() RemoteIvyRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteIvyRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remoteIvyRepositoryContentSynchronisationPtrType) ToRemoteIvyRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteIvyRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteIvyRepositoryContentSynchronisationPtrOutput)
}

type RemoteIvyRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemoteIvyRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteIvyRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteIvyRepositoryContentSynchronisationOutput) ToRemoteIvyRepositoryContentSynchronisationOutput() RemoteIvyRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteIvyRepositoryContentSynchronisationOutput) ToRemoteIvyRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteIvyRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteIvyRepositoryContentSynchronisationOutput) ToRemoteIvyRepositoryContentSynchronisationPtrOutput() RemoteIvyRepositoryContentSynchronisationPtrOutput {
	return o.ToRemoteIvyRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemoteIvyRepositoryContentSynchronisationOutput) ToRemoteIvyRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteIvyRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteIvyRepositoryContentSynchronisation) *RemoteIvyRepositoryContentSynchronisation {
		return &v
	}).(RemoteIvyRepositoryContentSynchronisationPtrOutput)
}

func (o RemoteIvyRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteIvyRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteIvyRepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteIvyRepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteIvyRepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteIvyRepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

func (o RemoteIvyRepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteIvyRepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemoteIvyRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemoteIvyRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteIvyRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteIvyRepositoryContentSynchronisationPtrOutput) ToRemoteIvyRepositoryContentSynchronisationPtrOutput() RemoteIvyRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteIvyRepositoryContentSynchronisationPtrOutput) ToRemoteIvyRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteIvyRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteIvyRepositoryContentSynchronisationPtrOutput) Elem() RemoteIvyRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemoteIvyRepositoryContentSynchronisation) RemoteIvyRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemoteIvyRepositoryContentSynchronisation
		return ret
	}).(RemoteIvyRepositoryContentSynchronisationOutput)
}

func (o RemoteIvyRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteIvyRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteIvyRepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteIvyRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteIvyRepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteIvyRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteIvyRepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteIvyRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type RemoteMavenRepositoryContentSynchronisation struct {
	Enabled                      *bool `pulumi:"enabled"`
	PropertiesEnabled            *bool `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            *bool `pulumi:"statisticsEnabled"`
}

// RemoteMavenRepositoryContentSynchronisationInput is an input type that accepts RemoteMavenRepositoryContentSynchronisationArgs and RemoteMavenRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemoteMavenRepositoryContentSynchronisationInput` via:
//
//	RemoteMavenRepositoryContentSynchronisationArgs{...}
type RemoteMavenRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemoteMavenRepositoryContentSynchronisationOutput() RemoteMavenRepositoryContentSynchronisationOutput
	ToRemoteMavenRepositoryContentSynchronisationOutputWithContext(context.Context) RemoteMavenRepositoryContentSynchronisationOutput
}

type RemoteMavenRepositoryContentSynchronisationArgs struct {
	Enabled                      pulumi.BoolPtrInput `pulumi:"enabled"`
	PropertiesEnabled            pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemoteMavenRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteMavenRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemoteMavenRepositoryContentSynchronisationArgs) ToRemoteMavenRepositoryContentSynchronisationOutput() RemoteMavenRepositoryContentSynchronisationOutput {
	return i.ToRemoteMavenRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemoteMavenRepositoryContentSynchronisationArgs) ToRemoteMavenRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteMavenRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteMavenRepositoryContentSynchronisationOutput)
}

func (i RemoteMavenRepositoryContentSynchronisationArgs) ToRemoteMavenRepositoryContentSynchronisationPtrOutput() RemoteMavenRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteMavenRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemoteMavenRepositoryContentSynchronisationArgs) ToRemoteMavenRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteMavenRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteMavenRepositoryContentSynchronisationOutput).ToRemoteMavenRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemoteMavenRepositoryContentSynchronisationPtrInput is an input type that accepts RemoteMavenRepositoryContentSynchronisationArgs, RemoteMavenRepositoryContentSynchronisationPtr and RemoteMavenRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemoteMavenRepositoryContentSynchronisationPtrInput` via:
//
//	        RemoteMavenRepositoryContentSynchronisationArgs{...}
//
//	or:
//
//	        nil
type RemoteMavenRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemoteMavenRepositoryContentSynchronisationPtrOutput() RemoteMavenRepositoryContentSynchronisationPtrOutput
	ToRemoteMavenRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemoteMavenRepositoryContentSynchronisationPtrOutput
}

type remoteMavenRepositoryContentSynchronisationPtrType RemoteMavenRepositoryContentSynchronisationArgs

func RemoteMavenRepositoryContentSynchronisationPtr(v *RemoteMavenRepositoryContentSynchronisationArgs) RemoteMavenRepositoryContentSynchronisationPtrInput {
	return (*remoteMavenRepositoryContentSynchronisationPtrType)(v)
}

func (*remoteMavenRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteMavenRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remoteMavenRepositoryContentSynchronisationPtrType) ToRemoteMavenRepositoryContentSynchronisationPtrOutput() RemoteMavenRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteMavenRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remoteMavenRepositoryContentSynchronisationPtrType) ToRemoteMavenRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteMavenRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteMavenRepositoryContentSynchronisationPtrOutput)
}

type RemoteMavenRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemoteMavenRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteMavenRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteMavenRepositoryContentSynchronisationOutput) ToRemoteMavenRepositoryContentSynchronisationOutput() RemoteMavenRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteMavenRepositoryContentSynchronisationOutput) ToRemoteMavenRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteMavenRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteMavenRepositoryContentSynchronisationOutput) ToRemoteMavenRepositoryContentSynchronisationPtrOutput() RemoteMavenRepositoryContentSynchronisationPtrOutput {
	return o.ToRemoteMavenRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemoteMavenRepositoryContentSynchronisationOutput) ToRemoteMavenRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteMavenRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteMavenRepositoryContentSynchronisation) *RemoteMavenRepositoryContentSynchronisation {
		return &v
	}).(RemoteMavenRepositoryContentSynchronisationPtrOutput)
}

func (o RemoteMavenRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteMavenRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteMavenRepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteMavenRepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteMavenRepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteMavenRepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

func (o RemoteMavenRepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteMavenRepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemoteMavenRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemoteMavenRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteMavenRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteMavenRepositoryContentSynchronisationPtrOutput) ToRemoteMavenRepositoryContentSynchronisationPtrOutput() RemoteMavenRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteMavenRepositoryContentSynchronisationPtrOutput) ToRemoteMavenRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteMavenRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteMavenRepositoryContentSynchronisationPtrOutput) Elem() RemoteMavenRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemoteMavenRepositoryContentSynchronisation) RemoteMavenRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemoteMavenRepositoryContentSynchronisation
		return ret
	}).(RemoteMavenRepositoryContentSynchronisationOutput)
}

func (o RemoteMavenRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteMavenRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteMavenRepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteMavenRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteMavenRepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteMavenRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteMavenRepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteMavenRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type RemoteNpmRepositoryContentSynchronisation struct {
	Enabled                      *bool `pulumi:"enabled"`
	PropertiesEnabled            *bool `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            *bool `pulumi:"statisticsEnabled"`
}

// RemoteNpmRepositoryContentSynchronisationInput is an input type that accepts RemoteNpmRepositoryContentSynchronisationArgs and RemoteNpmRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemoteNpmRepositoryContentSynchronisationInput` via:
//
//	RemoteNpmRepositoryContentSynchronisationArgs{...}
type RemoteNpmRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemoteNpmRepositoryContentSynchronisationOutput() RemoteNpmRepositoryContentSynchronisationOutput
	ToRemoteNpmRepositoryContentSynchronisationOutputWithContext(context.Context) RemoteNpmRepositoryContentSynchronisationOutput
}

type RemoteNpmRepositoryContentSynchronisationArgs struct {
	Enabled                      pulumi.BoolPtrInput `pulumi:"enabled"`
	PropertiesEnabled            pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemoteNpmRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteNpmRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemoteNpmRepositoryContentSynchronisationArgs) ToRemoteNpmRepositoryContentSynchronisationOutput() RemoteNpmRepositoryContentSynchronisationOutput {
	return i.ToRemoteNpmRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemoteNpmRepositoryContentSynchronisationArgs) ToRemoteNpmRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteNpmRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteNpmRepositoryContentSynchronisationOutput)
}

func (i RemoteNpmRepositoryContentSynchronisationArgs) ToRemoteNpmRepositoryContentSynchronisationPtrOutput() RemoteNpmRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteNpmRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemoteNpmRepositoryContentSynchronisationArgs) ToRemoteNpmRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteNpmRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteNpmRepositoryContentSynchronisationOutput).ToRemoteNpmRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemoteNpmRepositoryContentSynchronisationPtrInput is an input type that accepts RemoteNpmRepositoryContentSynchronisationArgs, RemoteNpmRepositoryContentSynchronisationPtr and RemoteNpmRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemoteNpmRepositoryContentSynchronisationPtrInput` via:
//
//	        RemoteNpmRepositoryContentSynchronisationArgs{...}
//
//	or:
//
//	        nil
type RemoteNpmRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemoteNpmRepositoryContentSynchronisationPtrOutput() RemoteNpmRepositoryContentSynchronisationPtrOutput
	ToRemoteNpmRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemoteNpmRepositoryContentSynchronisationPtrOutput
}

type remoteNpmRepositoryContentSynchronisationPtrType RemoteNpmRepositoryContentSynchronisationArgs

func RemoteNpmRepositoryContentSynchronisationPtr(v *RemoteNpmRepositoryContentSynchronisationArgs) RemoteNpmRepositoryContentSynchronisationPtrInput {
	return (*remoteNpmRepositoryContentSynchronisationPtrType)(v)
}

func (*remoteNpmRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteNpmRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remoteNpmRepositoryContentSynchronisationPtrType) ToRemoteNpmRepositoryContentSynchronisationPtrOutput() RemoteNpmRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteNpmRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remoteNpmRepositoryContentSynchronisationPtrType) ToRemoteNpmRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteNpmRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteNpmRepositoryContentSynchronisationPtrOutput)
}

type RemoteNpmRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemoteNpmRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteNpmRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteNpmRepositoryContentSynchronisationOutput) ToRemoteNpmRepositoryContentSynchronisationOutput() RemoteNpmRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteNpmRepositoryContentSynchronisationOutput) ToRemoteNpmRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteNpmRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteNpmRepositoryContentSynchronisationOutput) ToRemoteNpmRepositoryContentSynchronisationPtrOutput() RemoteNpmRepositoryContentSynchronisationPtrOutput {
	return o.ToRemoteNpmRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemoteNpmRepositoryContentSynchronisationOutput) ToRemoteNpmRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteNpmRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteNpmRepositoryContentSynchronisation) *RemoteNpmRepositoryContentSynchronisation {
		return &v
	}).(RemoteNpmRepositoryContentSynchronisationPtrOutput)
}

func (o RemoteNpmRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteNpmRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteNpmRepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteNpmRepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteNpmRepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteNpmRepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

func (o RemoteNpmRepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteNpmRepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemoteNpmRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemoteNpmRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteNpmRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteNpmRepositoryContentSynchronisationPtrOutput) ToRemoteNpmRepositoryContentSynchronisationPtrOutput() RemoteNpmRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteNpmRepositoryContentSynchronisationPtrOutput) ToRemoteNpmRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteNpmRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteNpmRepositoryContentSynchronisationPtrOutput) Elem() RemoteNpmRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemoteNpmRepositoryContentSynchronisation) RemoteNpmRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemoteNpmRepositoryContentSynchronisation
		return ret
	}).(RemoteNpmRepositoryContentSynchronisationOutput)
}

func (o RemoteNpmRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteNpmRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteNpmRepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteNpmRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteNpmRepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteNpmRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteNpmRepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteNpmRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type RemoteNugetRepositoryContentSynchronisation struct {
	Enabled                      *bool `pulumi:"enabled"`
	PropertiesEnabled            *bool `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            *bool `pulumi:"statisticsEnabled"`
}

// RemoteNugetRepositoryContentSynchronisationInput is an input type that accepts RemoteNugetRepositoryContentSynchronisationArgs and RemoteNugetRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemoteNugetRepositoryContentSynchronisationInput` via:
//
//	RemoteNugetRepositoryContentSynchronisationArgs{...}
type RemoteNugetRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemoteNugetRepositoryContentSynchronisationOutput() RemoteNugetRepositoryContentSynchronisationOutput
	ToRemoteNugetRepositoryContentSynchronisationOutputWithContext(context.Context) RemoteNugetRepositoryContentSynchronisationOutput
}

type RemoteNugetRepositoryContentSynchronisationArgs struct {
	Enabled                      pulumi.BoolPtrInput `pulumi:"enabled"`
	PropertiesEnabled            pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemoteNugetRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteNugetRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemoteNugetRepositoryContentSynchronisationArgs) ToRemoteNugetRepositoryContentSynchronisationOutput() RemoteNugetRepositoryContentSynchronisationOutput {
	return i.ToRemoteNugetRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemoteNugetRepositoryContentSynchronisationArgs) ToRemoteNugetRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteNugetRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteNugetRepositoryContentSynchronisationOutput)
}

func (i RemoteNugetRepositoryContentSynchronisationArgs) ToRemoteNugetRepositoryContentSynchronisationPtrOutput() RemoteNugetRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteNugetRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemoteNugetRepositoryContentSynchronisationArgs) ToRemoteNugetRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteNugetRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteNugetRepositoryContentSynchronisationOutput).ToRemoteNugetRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemoteNugetRepositoryContentSynchronisationPtrInput is an input type that accepts RemoteNugetRepositoryContentSynchronisationArgs, RemoteNugetRepositoryContentSynchronisationPtr and RemoteNugetRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemoteNugetRepositoryContentSynchronisationPtrInput` via:
//
//	        RemoteNugetRepositoryContentSynchronisationArgs{...}
//
//	or:
//
//	        nil
type RemoteNugetRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemoteNugetRepositoryContentSynchronisationPtrOutput() RemoteNugetRepositoryContentSynchronisationPtrOutput
	ToRemoteNugetRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemoteNugetRepositoryContentSynchronisationPtrOutput
}

type remoteNugetRepositoryContentSynchronisationPtrType RemoteNugetRepositoryContentSynchronisationArgs

func RemoteNugetRepositoryContentSynchronisationPtr(v *RemoteNugetRepositoryContentSynchronisationArgs) RemoteNugetRepositoryContentSynchronisationPtrInput {
	return (*remoteNugetRepositoryContentSynchronisationPtrType)(v)
}

func (*remoteNugetRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteNugetRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remoteNugetRepositoryContentSynchronisationPtrType) ToRemoteNugetRepositoryContentSynchronisationPtrOutput() RemoteNugetRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteNugetRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remoteNugetRepositoryContentSynchronisationPtrType) ToRemoteNugetRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteNugetRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteNugetRepositoryContentSynchronisationPtrOutput)
}

type RemoteNugetRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemoteNugetRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteNugetRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteNugetRepositoryContentSynchronisationOutput) ToRemoteNugetRepositoryContentSynchronisationOutput() RemoteNugetRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteNugetRepositoryContentSynchronisationOutput) ToRemoteNugetRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteNugetRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteNugetRepositoryContentSynchronisationOutput) ToRemoteNugetRepositoryContentSynchronisationPtrOutput() RemoteNugetRepositoryContentSynchronisationPtrOutput {
	return o.ToRemoteNugetRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemoteNugetRepositoryContentSynchronisationOutput) ToRemoteNugetRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteNugetRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteNugetRepositoryContentSynchronisation) *RemoteNugetRepositoryContentSynchronisation {
		return &v
	}).(RemoteNugetRepositoryContentSynchronisationPtrOutput)
}

func (o RemoteNugetRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteNugetRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteNugetRepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteNugetRepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteNugetRepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteNugetRepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

func (o RemoteNugetRepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteNugetRepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemoteNugetRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemoteNugetRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteNugetRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteNugetRepositoryContentSynchronisationPtrOutput) ToRemoteNugetRepositoryContentSynchronisationPtrOutput() RemoteNugetRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteNugetRepositoryContentSynchronisationPtrOutput) ToRemoteNugetRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteNugetRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteNugetRepositoryContentSynchronisationPtrOutput) Elem() RemoteNugetRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemoteNugetRepositoryContentSynchronisation) RemoteNugetRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemoteNugetRepositoryContentSynchronisation
		return ret
	}).(RemoteNugetRepositoryContentSynchronisationOutput)
}

func (o RemoteNugetRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteNugetRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteNugetRepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteNugetRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteNugetRepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteNugetRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteNugetRepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteNugetRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type RemoteOpkgRepositoryContentSynchronisation struct {
	Enabled                      *bool `pulumi:"enabled"`
	PropertiesEnabled            *bool `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            *bool `pulumi:"statisticsEnabled"`
}

// RemoteOpkgRepositoryContentSynchronisationInput is an input type that accepts RemoteOpkgRepositoryContentSynchronisationArgs and RemoteOpkgRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemoteOpkgRepositoryContentSynchronisationInput` via:
//
//	RemoteOpkgRepositoryContentSynchronisationArgs{...}
type RemoteOpkgRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemoteOpkgRepositoryContentSynchronisationOutput() RemoteOpkgRepositoryContentSynchronisationOutput
	ToRemoteOpkgRepositoryContentSynchronisationOutputWithContext(context.Context) RemoteOpkgRepositoryContentSynchronisationOutput
}

type RemoteOpkgRepositoryContentSynchronisationArgs struct {
	Enabled                      pulumi.BoolPtrInput `pulumi:"enabled"`
	PropertiesEnabled            pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemoteOpkgRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteOpkgRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemoteOpkgRepositoryContentSynchronisationArgs) ToRemoteOpkgRepositoryContentSynchronisationOutput() RemoteOpkgRepositoryContentSynchronisationOutput {
	return i.ToRemoteOpkgRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemoteOpkgRepositoryContentSynchronisationArgs) ToRemoteOpkgRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteOpkgRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteOpkgRepositoryContentSynchronisationOutput)
}

func (i RemoteOpkgRepositoryContentSynchronisationArgs) ToRemoteOpkgRepositoryContentSynchronisationPtrOutput() RemoteOpkgRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteOpkgRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemoteOpkgRepositoryContentSynchronisationArgs) ToRemoteOpkgRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteOpkgRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteOpkgRepositoryContentSynchronisationOutput).ToRemoteOpkgRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemoteOpkgRepositoryContentSynchronisationPtrInput is an input type that accepts RemoteOpkgRepositoryContentSynchronisationArgs, RemoteOpkgRepositoryContentSynchronisationPtr and RemoteOpkgRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemoteOpkgRepositoryContentSynchronisationPtrInput` via:
//
//	        RemoteOpkgRepositoryContentSynchronisationArgs{...}
//
//	or:
//
//	        nil
type RemoteOpkgRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemoteOpkgRepositoryContentSynchronisationPtrOutput() RemoteOpkgRepositoryContentSynchronisationPtrOutput
	ToRemoteOpkgRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemoteOpkgRepositoryContentSynchronisationPtrOutput
}

type remoteOpkgRepositoryContentSynchronisationPtrType RemoteOpkgRepositoryContentSynchronisationArgs

func RemoteOpkgRepositoryContentSynchronisationPtr(v *RemoteOpkgRepositoryContentSynchronisationArgs) RemoteOpkgRepositoryContentSynchronisationPtrInput {
	return (*remoteOpkgRepositoryContentSynchronisationPtrType)(v)
}

func (*remoteOpkgRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteOpkgRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remoteOpkgRepositoryContentSynchronisationPtrType) ToRemoteOpkgRepositoryContentSynchronisationPtrOutput() RemoteOpkgRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteOpkgRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remoteOpkgRepositoryContentSynchronisationPtrType) ToRemoteOpkgRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteOpkgRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteOpkgRepositoryContentSynchronisationPtrOutput)
}

type RemoteOpkgRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemoteOpkgRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteOpkgRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteOpkgRepositoryContentSynchronisationOutput) ToRemoteOpkgRepositoryContentSynchronisationOutput() RemoteOpkgRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteOpkgRepositoryContentSynchronisationOutput) ToRemoteOpkgRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteOpkgRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteOpkgRepositoryContentSynchronisationOutput) ToRemoteOpkgRepositoryContentSynchronisationPtrOutput() RemoteOpkgRepositoryContentSynchronisationPtrOutput {
	return o.ToRemoteOpkgRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemoteOpkgRepositoryContentSynchronisationOutput) ToRemoteOpkgRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteOpkgRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteOpkgRepositoryContentSynchronisation) *RemoteOpkgRepositoryContentSynchronisation {
		return &v
	}).(RemoteOpkgRepositoryContentSynchronisationPtrOutput)
}

func (o RemoteOpkgRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteOpkgRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteOpkgRepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteOpkgRepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteOpkgRepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteOpkgRepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

func (o RemoteOpkgRepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteOpkgRepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemoteOpkgRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemoteOpkgRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteOpkgRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteOpkgRepositoryContentSynchronisationPtrOutput) ToRemoteOpkgRepositoryContentSynchronisationPtrOutput() RemoteOpkgRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteOpkgRepositoryContentSynchronisationPtrOutput) ToRemoteOpkgRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteOpkgRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteOpkgRepositoryContentSynchronisationPtrOutput) Elem() RemoteOpkgRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemoteOpkgRepositoryContentSynchronisation) RemoteOpkgRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemoteOpkgRepositoryContentSynchronisation
		return ret
	}).(RemoteOpkgRepositoryContentSynchronisationOutput)
}

func (o RemoteOpkgRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteOpkgRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteOpkgRepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteOpkgRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteOpkgRepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteOpkgRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteOpkgRepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteOpkgRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type RemoteP2RepositoryContentSynchronisation struct {
	Enabled                      *bool `pulumi:"enabled"`
	PropertiesEnabled            *bool `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            *bool `pulumi:"statisticsEnabled"`
}

// RemoteP2RepositoryContentSynchronisationInput is an input type that accepts RemoteP2RepositoryContentSynchronisationArgs and RemoteP2RepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemoteP2RepositoryContentSynchronisationInput` via:
//
//	RemoteP2RepositoryContentSynchronisationArgs{...}
type RemoteP2RepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemoteP2RepositoryContentSynchronisationOutput() RemoteP2RepositoryContentSynchronisationOutput
	ToRemoteP2RepositoryContentSynchronisationOutputWithContext(context.Context) RemoteP2RepositoryContentSynchronisationOutput
}

type RemoteP2RepositoryContentSynchronisationArgs struct {
	Enabled                      pulumi.BoolPtrInput `pulumi:"enabled"`
	PropertiesEnabled            pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemoteP2RepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteP2RepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemoteP2RepositoryContentSynchronisationArgs) ToRemoteP2RepositoryContentSynchronisationOutput() RemoteP2RepositoryContentSynchronisationOutput {
	return i.ToRemoteP2RepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemoteP2RepositoryContentSynchronisationArgs) ToRemoteP2RepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteP2RepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteP2RepositoryContentSynchronisationOutput)
}

func (i RemoteP2RepositoryContentSynchronisationArgs) ToRemoteP2RepositoryContentSynchronisationPtrOutput() RemoteP2RepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteP2RepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemoteP2RepositoryContentSynchronisationArgs) ToRemoteP2RepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteP2RepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteP2RepositoryContentSynchronisationOutput).ToRemoteP2RepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemoteP2RepositoryContentSynchronisationPtrInput is an input type that accepts RemoteP2RepositoryContentSynchronisationArgs, RemoteP2RepositoryContentSynchronisationPtr and RemoteP2RepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemoteP2RepositoryContentSynchronisationPtrInput` via:
//
//	        RemoteP2RepositoryContentSynchronisationArgs{...}
//
//	or:
//
//	        nil
type RemoteP2RepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemoteP2RepositoryContentSynchronisationPtrOutput() RemoteP2RepositoryContentSynchronisationPtrOutput
	ToRemoteP2RepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemoteP2RepositoryContentSynchronisationPtrOutput
}

type remoteP2RepositoryContentSynchronisationPtrType RemoteP2RepositoryContentSynchronisationArgs

func RemoteP2RepositoryContentSynchronisationPtr(v *RemoteP2RepositoryContentSynchronisationArgs) RemoteP2RepositoryContentSynchronisationPtrInput {
	return (*remoteP2RepositoryContentSynchronisationPtrType)(v)
}

func (*remoteP2RepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteP2RepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remoteP2RepositoryContentSynchronisationPtrType) ToRemoteP2RepositoryContentSynchronisationPtrOutput() RemoteP2RepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteP2RepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remoteP2RepositoryContentSynchronisationPtrType) ToRemoteP2RepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteP2RepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteP2RepositoryContentSynchronisationPtrOutput)
}

type RemoteP2RepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemoteP2RepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteP2RepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteP2RepositoryContentSynchronisationOutput) ToRemoteP2RepositoryContentSynchronisationOutput() RemoteP2RepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteP2RepositoryContentSynchronisationOutput) ToRemoteP2RepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteP2RepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteP2RepositoryContentSynchronisationOutput) ToRemoteP2RepositoryContentSynchronisationPtrOutput() RemoteP2RepositoryContentSynchronisationPtrOutput {
	return o.ToRemoteP2RepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemoteP2RepositoryContentSynchronisationOutput) ToRemoteP2RepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteP2RepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteP2RepositoryContentSynchronisation) *RemoteP2RepositoryContentSynchronisation {
		return &v
	}).(RemoteP2RepositoryContentSynchronisationPtrOutput)
}

func (o RemoteP2RepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteP2RepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteP2RepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteP2RepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteP2RepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteP2RepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

func (o RemoteP2RepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteP2RepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemoteP2RepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemoteP2RepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteP2RepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteP2RepositoryContentSynchronisationPtrOutput) ToRemoteP2RepositoryContentSynchronisationPtrOutput() RemoteP2RepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteP2RepositoryContentSynchronisationPtrOutput) ToRemoteP2RepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteP2RepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteP2RepositoryContentSynchronisationPtrOutput) Elem() RemoteP2RepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemoteP2RepositoryContentSynchronisation) RemoteP2RepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemoteP2RepositoryContentSynchronisation
		return ret
	}).(RemoteP2RepositoryContentSynchronisationOutput)
}

func (o RemoteP2RepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteP2RepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteP2RepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteP2RepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteP2RepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteP2RepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteP2RepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteP2RepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type RemotePubRepositoryContentSynchronisation struct {
	Enabled                      *bool `pulumi:"enabled"`
	PropertiesEnabled            *bool `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            *bool `pulumi:"statisticsEnabled"`
}

// RemotePubRepositoryContentSynchronisationInput is an input type that accepts RemotePubRepositoryContentSynchronisationArgs and RemotePubRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemotePubRepositoryContentSynchronisationInput` via:
//
//	RemotePubRepositoryContentSynchronisationArgs{...}
type RemotePubRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemotePubRepositoryContentSynchronisationOutput() RemotePubRepositoryContentSynchronisationOutput
	ToRemotePubRepositoryContentSynchronisationOutputWithContext(context.Context) RemotePubRepositoryContentSynchronisationOutput
}

type RemotePubRepositoryContentSynchronisationArgs struct {
	Enabled                      pulumi.BoolPtrInput `pulumi:"enabled"`
	PropertiesEnabled            pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemotePubRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemotePubRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemotePubRepositoryContentSynchronisationArgs) ToRemotePubRepositoryContentSynchronisationOutput() RemotePubRepositoryContentSynchronisationOutput {
	return i.ToRemotePubRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemotePubRepositoryContentSynchronisationArgs) ToRemotePubRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemotePubRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemotePubRepositoryContentSynchronisationOutput)
}

func (i RemotePubRepositoryContentSynchronisationArgs) ToRemotePubRepositoryContentSynchronisationPtrOutput() RemotePubRepositoryContentSynchronisationPtrOutput {
	return i.ToRemotePubRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemotePubRepositoryContentSynchronisationArgs) ToRemotePubRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemotePubRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemotePubRepositoryContentSynchronisationOutput).ToRemotePubRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemotePubRepositoryContentSynchronisationPtrInput is an input type that accepts RemotePubRepositoryContentSynchronisationArgs, RemotePubRepositoryContentSynchronisationPtr and RemotePubRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemotePubRepositoryContentSynchronisationPtrInput` via:
//
//	        RemotePubRepositoryContentSynchronisationArgs{...}
//
//	or:
//
//	        nil
type RemotePubRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemotePubRepositoryContentSynchronisationPtrOutput() RemotePubRepositoryContentSynchronisationPtrOutput
	ToRemotePubRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemotePubRepositoryContentSynchronisationPtrOutput
}

type remotePubRepositoryContentSynchronisationPtrType RemotePubRepositoryContentSynchronisationArgs

func RemotePubRepositoryContentSynchronisationPtr(v *RemotePubRepositoryContentSynchronisationArgs) RemotePubRepositoryContentSynchronisationPtrInput {
	return (*remotePubRepositoryContentSynchronisationPtrType)(v)
}

func (*remotePubRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemotePubRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remotePubRepositoryContentSynchronisationPtrType) ToRemotePubRepositoryContentSynchronisationPtrOutput() RemotePubRepositoryContentSynchronisationPtrOutput {
	return i.ToRemotePubRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remotePubRepositoryContentSynchronisationPtrType) ToRemotePubRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemotePubRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemotePubRepositoryContentSynchronisationPtrOutput)
}

type RemotePubRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemotePubRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemotePubRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemotePubRepositoryContentSynchronisationOutput) ToRemotePubRepositoryContentSynchronisationOutput() RemotePubRepositoryContentSynchronisationOutput {
	return o
}

func (o RemotePubRepositoryContentSynchronisationOutput) ToRemotePubRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemotePubRepositoryContentSynchronisationOutput {
	return o
}

func (o RemotePubRepositoryContentSynchronisationOutput) ToRemotePubRepositoryContentSynchronisationPtrOutput() RemotePubRepositoryContentSynchronisationPtrOutput {
	return o.ToRemotePubRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemotePubRepositoryContentSynchronisationOutput) ToRemotePubRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemotePubRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemotePubRepositoryContentSynchronisation) *RemotePubRepositoryContentSynchronisation {
		return &v
	}).(RemotePubRepositoryContentSynchronisationPtrOutput)
}

func (o RemotePubRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemotePubRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o RemotePubRepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemotePubRepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

func (o RemotePubRepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemotePubRepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

func (o RemotePubRepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemotePubRepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemotePubRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemotePubRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemotePubRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemotePubRepositoryContentSynchronisationPtrOutput) ToRemotePubRepositoryContentSynchronisationPtrOutput() RemotePubRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemotePubRepositoryContentSynchronisationPtrOutput) ToRemotePubRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemotePubRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemotePubRepositoryContentSynchronisationPtrOutput) Elem() RemotePubRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemotePubRepositoryContentSynchronisation) RemotePubRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemotePubRepositoryContentSynchronisation
		return ret
	}).(RemotePubRepositoryContentSynchronisationOutput)
}

func (o RemotePubRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemotePubRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemotePubRepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemotePubRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemotePubRepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemotePubRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

func (o RemotePubRepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemotePubRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type RemotePuppetRepositoryContentSynchronisation struct {
	Enabled                      *bool `pulumi:"enabled"`
	PropertiesEnabled            *bool `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            *bool `pulumi:"statisticsEnabled"`
}

// RemotePuppetRepositoryContentSynchronisationInput is an input type that accepts RemotePuppetRepositoryContentSynchronisationArgs and RemotePuppetRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemotePuppetRepositoryContentSynchronisationInput` via:
//
//	RemotePuppetRepositoryContentSynchronisationArgs{...}
type RemotePuppetRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemotePuppetRepositoryContentSynchronisationOutput() RemotePuppetRepositoryContentSynchronisationOutput
	ToRemotePuppetRepositoryContentSynchronisationOutputWithContext(context.Context) RemotePuppetRepositoryContentSynchronisationOutput
}

type RemotePuppetRepositoryContentSynchronisationArgs struct {
	Enabled                      pulumi.BoolPtrInput `pulumi:"enabled"`
	PropertiesEnabled            pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemotePuppetRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemotePuppetRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemotePuppetRepositoryContentSynchronisationArgs) ToRemotePuppetRepositoryContentSynchronisationOutput() RemotePuppetRepositoryContentSynchronisationOutput {
	return i.ToRemotePuppetRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemotePuppetRepositoryContentSynchronisationArgs) ToRemotePuppetRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemotePuppetRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemotePuppetRepositoryContentSynchronisationOutput)
}

func (i RemotePuppetRepositoryContentSynchronisationArgs) ToRemotePuppetRepositoryContentSynchronisationPtrOutput() RemotePuppetRepositoryContentSynchronisationPtrOutput {
	return i.ToRemotePuppetRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemotePuppetRepositoryContentSynchronisationArgs) ToRemotePuppetRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemotePuppetRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemotePuppetRepositoryContentSynchronisationOutput).ToRemotePuppetRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemotePuppetRepositoryContentSynchronisationPtrInput is an input type that accepts RemotePuppetRepositoryContentSynchronisationArgs, RemotePuppetRepositoryContentSynchronisationPtr and RemotePuppetRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemotePuppetRepositoryContentSynchronisationPtrInput` via:
//
//	        RemotePuppetRepositoryContentSynchronisationArgs{...}
//
//	or:
//
//	        nil
type RemotePuppetRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemotePuppetRepositoryContentSynchronisationPtrOutput() RemotePuppetRepositoryContentSynchronisationPtrOutput
	ToRemotePuppetRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemotePuppetRepositoryContentSynchronisationPtrOutput
}

type remotePuppetRepositoryContentSynchronisationPtrType RemotePuppetRepositoryContentSynchronisationArgs

func RemotePuppetRepositoryContentSynchronisationPtr(v *RemotePuppetRepositoryContentSynchronisationArgs) RemotePuppetRepositoryContentSynchronisationPtrInput {
	return (*remotePuppetRepositoryContentSynchronisationPtrType)(v)
}

func (*remotePuppetRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemotePuppetRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remotePuppetRepositoryContentSynchronisationPtrType) ToRemotePuppetRepositoryContentSynchronisationPtrOutput() RemotePuppetRepositoryContentSynchronisationPtrOutput {
	return i.ToRemotePuppetRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remotePuppetRepositoryContentSynchronisationPtrType) ToRemotePuppetRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemotePuppetRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemotePuppetRepositoryContentSynchronisationPtrOutput)
}

type RemotePuppetRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemotePuppetRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemotePuppetRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemotePuppetRepositoryContentSynchronisationOutput) ToRemotePuppetRepositoryContentSynchronisationOutput() RemotePuppetRepositoryContentSynchronisationOutput {
	return o
}

func (o RemotePuppetRepositoryContentSynchronisationOutput) ToRemotePuppetRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemotePuppetRepositoryContentSynchronisationOutput {
	return o
}

func (o RemotePuppetRepositoryContentSynchronisationOutput) ToRemotePuppetRepositoryContentSynchronisationPtrOutput() RemotePuppetRepositoryContentSynchronisationPtrOutput {
	return o.ToRemotePuppetRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemotePuppetRepositoryContentSynchronisationOutput) ToRemotePuppetRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemotePuppetRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemotePuppetRepositoryContentSynchronisation) *RemotePuppetRepositoryContentSynchronisation {
		return &v
	}).(RemotePuppetRepositoryContentSynchronisationPtrOutput)
}

func (o RemotePuppetRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemotePuppetRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o RemotePuppetRepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemotePuppetRepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

func (o RemotePuppetRepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemotePuppetRepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

func (o RemotePuppetRepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemotePuppetRepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemotePuppetRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemotePuppetRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemotePuppetRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemotePuppetRepositoryContentSynchronisationPtrOutput) ToRemotePuppetRepositoryContentSynchronisationPtrOutput() RemotePuppetRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemotePuppetRepositoryContentSynchronisationPtrOutput) ToRemotePuppetRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemotePuppetRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemotePuppetRepositoryContentSynchronisationPtrOutput) Elem() RemotePuppetRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemotePuppetRepositoryContentSynchronisation) RemotePuppetRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemotePuppetRepositoryContentSynchronisation
		return ret
	}).(RemotePuppetRepositoryContentSynchronisationOutput)
}

func (o RemotePuppetRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemotePuppetRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemotePuppetRepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemotePuppetRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemotePuppetRepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemotePuppetRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

func (o RemotePuppetRepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemotePuppetRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type RemotePypiRepositoryContentSynchronisation struct {
	Enabled                      *bool `pulumi:"enabled"`
	PropertiesEnabled            *bool `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            *bool `pulumi:"statisticsEnabled"`
}

// RemotePypiRepositoryContentSynchronisationInput is an input type that accepts RemotePypiRepositoryContentSynchronisationArgs and RemotePypiRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemotePypiRepositoryContentSynchronisationInput` via:
//
//	RemotePypiRepositoryContentSynchronisationArgs{...}
type RemotePypiRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemotePypiRepositoryContentSynchronisationOutput() RemotePypiRepositoryContentSynchronisationOutput
	ToRemotePypiRepositoryContentSynchronisationOutputWithContext(context.Context) RemotePypiRepositoryContentSynchronisationOutput
}

type RemotePypiRepositoryContentSynchronisationArgs struct {
	Enabled                      pulumi.BoolPtrInput `pulumi:"enabled"`
	PropertiesEnabled            pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemotePypiRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemotePypiRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemotePypiRepositoryContentSynchronisationArgs) ToRemotePypiRepositoryContentSynchronisationOutput() RemotePypiRepositoryContentSynchronisationOutput {
	return i.ToRemotePypiRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemotePypiRepositoryContentSynchronisationArgs) ToRemotePypiRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemotePypiRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemotePypiRepositoryContentSynchronisationOutput)
}

func (i RemotePypiRepositoryContentSynchronisationArgs) ToRemotePypiRepositoryContentSynchronisationPtrOutput() RemotePypiRepositoryContentSynchronisationPtrOutput {
	return i.ToRemotePypiRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemotePypiRepositoryContentSynchronisationArgs) ToRemotePypiRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemotePypiRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemotePypiRepositoryContentSynchronisationOutput).ToRemotePypiRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemotePypiRepositoryContentSynchronisationPtrInput is an input type that accepts RemotePypiRepositoryContentSynchronisationArgs, RemotePypiRepositoryContentSynchronisationPtr and RemotePypiRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemotePypiRepositoryContentSynchronisationPtrInput` via:
//
//	        RemotePypiRepositoryContentSynchronisationArgs{...}
//
//	or:
//
//	        nil
type RemotePypiRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemotePypiRepositoryContentSynchronisationPtrOutput() RemotePypiRepositoryContentSynchronisationPtrOutput
	ToRemotePypiRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemotePypiRepositoryContentSynchronisationPtrOutput
}

type remotePypiRepositoryContentSynchronisationPtrType RemotePypiRepositoryContentSynchronisationArgs

func RemotePypiRepositoryContentSynchronisationPtr(v *RemotePypiRepositoryContentSynchronisationArgs) RemotePypiRepositoryContentSynchronisationPtrInput {
	return (*remotePypiRepositoryContentSynchronisationPtrType)(v)
}

func (*remotePypiRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemotePypiRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remotePypiRepositoryContentSynchronisationPtrType) ToRemotePypiRepositoryContentSynchronisationPtrOutput() RemotePypiRepositoryContentSynchronisationPtrOutput {
	return i.ToRemotePypiRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remotePypiRepositoryContentSynchronisationPtrType) ToRemotePypiRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemotePypiRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemotePypiRepositoryContentSynchronisationPtrOutput)
}

type RemotePypiRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemotePypiRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemotePypiRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemotePypiRepositoryContentSynchronisationOutput) ToRemotePypiRepositoryContentSynchronisationOutput() RemotePypiRepositoryContentSynchronisationOutput {
	return o
}

func (o RemotePypiRepositoryContentSynchronisationOutput) ToRemotePypiRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemotePypiRepositoryContentSynchronisationOutput {
	return o
}

func (o RemotePypiRepositoryContentSynchronisationOutput) ToRemotePypiRepositoryContentSynchronisationPtrOutput() RemotePypiRepositoryContentSynchronisationPtrOutput {
	return o.ToRemotePypiRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemotePypiRepositoryContentSynchronisationOutput) ToRemotePypiRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemotePypiRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemotePypiRepositoryContentSynchronisation) *RemotePypiRepositoryContentSynchronisation {
		return &v
	}).(RemotePypiRepositoryContentSynchronisationPtrOutput)
}

func (o RemotePypiRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemotePypiRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o RemotePypiRepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemotePypiRepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

func (o RemotePypiRepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemotePypiRepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

func (o RemotePypiRepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemotePypiRepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemotePypiRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemotePypiRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemotePypiRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemotePypiRepositoryContentSynchronisationPtrOutput) ToRemotePypiRepositoryContentSynchronisationPtrOutput() RemotePypiRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemotePypiRepositoryContentSynchronisationPtrOutput) ToRemotePypiRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemotePypiRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemotePypiRepositoryContentSynchronisationPtrOutput) Elem() RemotePypiRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemotePypiRepositoryContentSynchronisation) RemotePypiRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemotePypiRepositoryContentSynchronisation
		return ret
	}).(RemotePypiRepositoryContentSynchronisationOutput)
}

func (o RemotePypiRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemotePypiRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemotePypiRepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemotePypiRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemotePypiRepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemotePypiRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

func (o RemotePypiRepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemotePypiRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type RemoteRpmRepositoryContentSynchronisation struct {
	Enabled                      *bool `pulumi:"enabled"`
	PropertiesEnabled            *bool `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            *bool `pulumi:"statisticsEnabled"`
}

// RemoteRpmRepositoryContentSynchronisationInput is an input type that accepts RemoteRpmRepositoryContentSynchronisationArgs and RemoteRpmRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemoteRpmRepositoryContentSynchronisationInput` via:
//
//	RemoteRpmRepositoryContentSynchronisationArgs{...}
type RemoteRpmRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemoteRpmRepositoryContentSynchronisationOutput() RemoteRpmRepositoryContentSynchronisationOutput
	ToRemoteRpmRepositoryContentSynchronisationOutputWithContext(context.Context) RemoteRpmRepositoryContentSynchronisationOutput
}

type RemoteRpmRepositoryContentSynchronisationArgs struct {
	Enabled                      pulumi.BoolPtrInput `pulumi:"enabled"`
	PropertiesEnabled            pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemoteRpmRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteRpmRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemoteRpmRepositoryContentSynchronisationArgs) ToRemoteRpmRepositoryContentSynchronisationOutput() RemoteRpmRepositoryContentSynchronisationOutput {
	return i.ToRemoteRpmRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemoteRpmRepositoryContentSynchronisationArgs) ToRemoteRpmRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteRpmRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteRpmRepositoryContentSynchronisationOutput)
}

func (i RemoteRpmRepositoryContentSynchronisationArgs) ToRemoteRpmRepositoryContentSynchronisationPtrOutput() RemoteRpmRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteRpmRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemoteRpmRepositoryContentSynchronisationArgs) ToRemoteRpmRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteRpmRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteRpmRepositoryContentSynchronisationOutput).ToRemoteRpmRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemoteRpmRepositoryContentSynchronisationPtrInput is an input type that accepts RemoteRpmRepositoryContentSynchronisationArgs, RemoteRpmRepositoryContentSynchronisationPtr and RemoteRpmRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemoteRpmRepositoryContentSynchronisationPtrInput` via:
//
//	        RemoteRpmRepositoryContentSynchronisationArgs{...}
//
//	or:
//
//	        nil
type RemoteRpmRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemoteRpmRepositoryContentSynchronisationPtrOutput() RemoteRpmRepositoryContentSynchronisationPtrOutput
	ToRemoteRpmRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemoteRpmRepositoryContentSynchronisationPtrOutput
}

type remoteRpmRepositoryContentSynchronisationPtrType RemoteRpmRepositoryContentSynchronisationArgs

func RemoteRpmRepositoryContentSynchronisationPtr(v *RemoteRpmRepositoryContentSynchronisationArgs) RemoteRpmRepositoryContentSynchronisationPtrInput {
	return (*remoteRpmRepositoryContentSynchronisationPtrType)(v)
}

func (*remoteRpmRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteRpmRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remoteRpmRepositoryContentSynchronisationPtrType) ToRemoteRpmRepositoryContentSynchronisationPtrOutput() RemoteRpmRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteRpmRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remoteRpmRepositoryContentSynchronisationPtrType) ToRemoteRpmRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteRpmRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteRpmRepositoryContentSynchronisationPtrOutput)
}

type RemoteRpmRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemoteRpmRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteRpmRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteRpmRepositoryContentSynchronisationOutput) ToRemoteRpmRepositoryContentSynchronisationOutput() RemoteRpmRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteRpmRepositoryContentSynchronisationOutput) ToRemoteRpmRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteRpmRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteRpmRepositoryContentSynchronisationOutput) ToRemoteRpmRepositoryContentSynchronisationPtrOutput() RemoteRpmRepositoryContentSynchronisationPtrOutput {
	return o.ToRemoteRpmRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemoteRpmRepositoryContentSynchronisationOutput) ToRemoteRpmRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteRpmRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteRpmRepositoryContentSynchronisation) *RemoteRpmRepositoryContentSynchronisation {
		return &v
	}).(RemoteRpmRepositoryContentSynchronisationPtrOutput)
}

func (o RemoteRpmRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteRpmRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteRpmRepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteRpmRepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteRpmRepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteRpmRepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

func (o RemoteRpmRepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteRpmRepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemoteRpmRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemoteRpmRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteRpmRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteRpmRepositoryContentSynchronisationPtrOutput) ToRemoteRpmRepositoryContentSynchronisationPtrOutput() RemoteRpmRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteRpmRepositoryContentSynchronisationPtrOutput) ToRemoteRpmRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteRpmRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteRpmRepositoryContentSynchronisationPtrOutput) Elem() RemoteRpmRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemoteRpmRepositoryContentSynchronisation) RemoteRpmRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemoteRpmRepositoryContentSynchronisation
		return ret
	}).(RemoteRpmRepositoryContentSynchronisationOutput)
}

func (o RemoteRpmRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteRpmRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteRpmRepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteRpmRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteRpmRepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteRpmRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteRpmRepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteRpmRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type RemoteSbtRepositoryContentSynchronisation struct {
	Enabled                      *bool `pulumi:"enabled"`
	PropertiesEnabled            *bool `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            *bool `pulumi:"statisticsEnabled"`
}

// RemoteSbtRepositoryContentSynchronisationInput is an input type that accepts RemoteSbtRepositoryContentSynchronisationArgs and RemoteSbtRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemoteSbtRepositoryContentSynchronisationInput` via:
//
//	RemoteSbtRepositoryContentSynchronisationArgs{...}
type RemoteSbtRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemoteSbtRepositoryContentSynchronisationOutput() RemoteSbtRepositoryContentSynchronisationOutput
	ToRemoteSbtRepositoryContentSynchronisationOutputWithContext(context.Context) RemoteSbtRepositoryContentSynchronisationOutput
}

type RemoteSbtRepositoryContentSynchronisationArgs struct {
	Enabled                      pulumi.BoolPtrInput `pulumi:"enabled"`
	PropertiesEnabled            pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemoteSbtRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteSbtRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemoteSbtRepositoryContentSynchronisationArgs) ToRemoteSbtRepositoryContentSynchronisationOutput() RemoteSbtRepositoryContentSynchronisationOutput {
	return i.ToRemoteSbtRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemoteSbtRepositoryContentSynchronisationArgs) ToRemoteSbtRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteSbtRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteSbtRepositoryContentSynchronisationOutput)
}

func (i RemoteSbtRepositoryContentSynchronisationArgs) ToRemoteSbtRepositoryContentSynchronisationPtrOutput() RemoteSbtRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteSbtRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemoteSbtRepositoryContentSynchronisationArgs) ToRemoteSbtRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteSbtRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteSbtRepositoryContentSynchronisationOutput).ToRemoteSbtRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemoteSbtRepositoryContentSynchronisationPtrInput is an input type that accepts RemoteSbtRepositoryContentSynchronisationArgs, RemoteSbtRepositoryContentSynchronisationPtr and RemoteSbtRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemoteSbtRepositoryContentSynchronisationPtrInput` via:
//
//	        RemoteSbtRepositoryContentSynchronisationArgs{...}
//
//	or:
//
//	        nil
type RemoteSbtRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemoteSbtRepositoryContentSynchronisationPtrOutput() RemoteSbtRepositoryContentSynchronisationPtrOutput
	ToRemoteSbtRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemoteSbtRepositoryContentSynchronisationPtrOutput
}

type remoteSbtRepositoryContentSynchronisationPtrType RemoteSbtRepositoryContentSynchronisationArgs

func RemoteSbtRepositoryContentSynchronisationPtr(v *RemoteSbtRepositoryContentSynchronisationArgs) RemoteSbtRepositoryContentSynchronisationPtrInput {
	return (*remoteSbtRepositoryContentSynchronisationPtrType)(v)
}

func (*remoteSbtRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteSbtRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remoteSbtRepositoryContentSynchronisationPtrType) ToRemoteSbtRepositoryContentSynchronisationPtrOutput() RemoteSbtRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteSbtRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remoteSbtRepositoryContentSynchronisationPtrType) ToRemoteSbtRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteSbtRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteSbtRepositoryContentSynchronisationPtrOutput)
}

type RemoteSbtRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemoteSbtRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteSbtRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteSbtRepositoryContentSynchronisationOutput) ToRemoteSbtRepositoryContentSynchronisationOutput() RemoteSbtRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteSbtRepositoryContentSynchronisationOutput) ToRemoteSbtRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteSbtRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteSbtRepositoryContentSynchronisationOutput) ToRemoteSbtRepositoryContentSynchronisationPtrOutput() RemoteSbtRepositoryContentSynchronisationPtrOutput {
	return o.ToRemoteSbtRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemoteSbtRepositoryContentSynchronisationOutput) ToRemoteSbtRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteSbtRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteSbtRepositoryContentSynchronisation) *RemoteSbtRepositoryContentSynchronisation {
		return &v
	}).(RemoteSbtRepositoryContentSynchronisationPtrOutput)
}

func (o RemoteSbtRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteSbtRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteSbtRepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteSbtRepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteSbtRepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteSbtRepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

func (o RemoteSbtRepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteSbtRepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemoteSbtRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemoteSbtRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteSbtRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteSbtRepositoryContentSynchronisationPtrOutput) ToRemoteSbtRepositoryContentSynchronisationPtrOutput() RemoteSbtRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteSbtRepositoryContentSynchronisationPtrOutput) ToRemoteSbtRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteSbtRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteSbtRepositoryContentSynchronisationPtrOutput) Elem() RemoteSbtRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemoteSbtRepositoryContentSynchronisation) RemoteSbtRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemoteSbtRepositoryContentSynchronisation
		return ret
	}).(RemoteSbtRepositoryContentSynchronisationOutput)
}

func (o RemoteSbtRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteSbtRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteSbtRepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteSbtRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteSbtRepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteSbtRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteSbtRepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteSbtRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type RemoteSwiftRepositoryContentSynchronisation struct {
	Enabled                      *bool `pulumi:"enabled"`
	PropertiesEnabled            *bool `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            *bool `pulumi:"statisticsEnabled"`
}

// RemoteSwiftRepositoryContentSynchronisationInput is an input type that accepts RemoteSwiftRepositoryContentSynchronisationArgs and RemoteSwiftRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemoteSwiftRepositoryContentSynchronisationInput` via:
//
//	RemoteSwiftRepositoryContentSynchronisationArgs{...}
type RemoteSwiftRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemoteSwiftRepositoryContentSynchronisationOutput() RemoteSwiftRepositoryContentSynchronisationOutput
	ToRemoteSwiftRepositoryContentSynchronisationOutputWithContext(context.Context) RemoteSwiftRepositoryContentSynchronisationOutput
}

type RemoteSwiftRepositoryContentSynchronisationArgs struct {
	Enabled                      pulumi.BoolPtrInput `pulumi:"enabled"`
	PropertiesEnabled            pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemoteSwiftRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteSwiftRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemoteSwiftRepositoryContentSynchronisationArgs) ToRemoteSwiftRepositoryContentSynchronisationOutput() RemoteSwiftRepositoryContentSynchronisationOutput {
	return i.ToRemoteSwiftRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemoteSwiftRepositoryContentSynchronisationArgs) ToRemoteSwiftRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteSwiftRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteSwiftRepositoryContentSynchronisationOutput)
}

func (i RemoteSwiftRepositoryContentSynchronisationArgs) ToRemoteSwiftRepositoryContentSynchronisationPtrOutput() RemoteSwiftRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteSwiftRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemoteSwiftRepositoryContentSynchronisationArgs) ToRemoteSwiftRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteSwiftRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteSwiftRepositoryContentSynchronisationOutput).ToRemoteSwiftRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemoteSwiftRepositoryContentSynchronisationPtrInput is an input type that accepts RemoteSwiftRepositoryContentSynchronisationArgs, RemoteSwiftRepositoryContentSynchronisationPtr and RemoteSwiftRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemoteSwiftRepositoryContentSynchronisationPtrInput` via:
//
//	        RemoteSwiftRepositoryContentSynchronisationArgs{...}
//
//	or:
//
//	        nil
type RemoteSwiftRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemoteSwiftRepositoryContentSynchronisationPtrOutput() RemoteSwiftRepositoryContentSynchronisationPtrOutput
	ToRemoteSwiftRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemoteSwiftRepositoryContentSynchronisationPtrOutput
}

type remoteSwiftRepositoryContentSynchronisationPtrType RemoteSwiftRepositoryContentSynchronisationArgs

func RemoteSwiftRepositoryContentSynchronisationPtr(v *RemoteSwiftRepositoryContentSynchronisationArgs) RemoteSwiftRepositoryContentSynchronisationPtrInput {
	return (*remoteSwiftRepositoryContentSynchronisationPtrType)(v)
}

func (*remoteSwiftRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteSwiftRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remoteSwiftRepositoryContentSynchronisationPtrType) ToRemoteSwiftRepositoryContentSynchronisationPtrOutput() RemoteSwiftRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteSwiftRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remoteSwiftRepositoryContentSynchronisationPtrType) ToRemoteSwiftRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteSwiftRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteSwiftRepositoryContentSynchronisationPtrOutput)
}

type RemoteSwiftRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemoteSwiftRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteSwiftRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteSwiftRepositoryContentSynchronisationOutput) ToRemoteSwiftRepositoryContentSynchronisationOutput() RemoteSwiftRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteSwiftRepositoryContentSynchronisationOutput) ToRemoteSwiftRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteSwiftRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteSwiftRepositoryContentSynchronisationOutput) ToRemoteSwiftRepositoryContentSynchronisationPtrOutput() RemoteSwiftRepositoryContentSynchronisationPtrOutput {
	return o.ToRemoteSwiftRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemoteSwiftRepositoryContentSynchronisationOutput) ToRemoteSwiftRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteSwiftRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteSwiftRepositoryContentSynchronisation) *RemoteSwiftRepositoryContentSynchronisation {
		return &v
	}).(RemoteSwiftRepositoryContentSynchronisationPtrOutput)
}

func (o RemoteSwiftRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteSwiftRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteSwiftRepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteSwiftRepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteSwiftRepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteSwiftRepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

func (o RemoteSwiftRepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteSwiftRepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemoteSwiftRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemoteSwiftRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteSwiftRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteSwiftRepositoryContentSynchronisationPtrOutput) ToRemoteSwiftRepositoryContentSynchronisationPtrOutput() RemoteSwiftRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteSwiftRepositoryContentSynchronisationPtrOutput) ToRemoteSwiftRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteSwiftRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteSwiftRepositoryContentSynchronisationPtrOutput) Elem() RemoteSwiftRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemoteSwiftRepositoryContentSynchronisation) RemoteSwiftRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemoteSwiftRepositoryContentSynchronisation
		return ret
	}).(RemoteSwiftRepositoryContentSynchronisationOutput)
}

func (o RemoteSwiftRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteSwiftRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteSwiftRepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteSwiftRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteSwiftRepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteSwiftRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteSwiftRepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteSwiftRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type RemoteTerraformRepositoryContentSynchronisation struct {
	Enabled                      *bool `pulumi:"enabled"`
	PropertiesEnabled            *bool `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            *bool `pulumi:"statisticsEnabled"`
}

// RemoteTerraformRepositoryContentSynchronisationInput is an input type that accepts RemoteTerraformRepositoryContentSynchronisationArgs and RemoteTerraformRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemoteTerraformRepositoryContentSynchronisationInput` via:
//
//	RemoteTerraformRepositoryContentSynchronisationArgs{...}
type RemoteTerraformRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemoteTerraformRepositoryContentSynchronisationOutput() RemoteTerraformRepositoryContentSynchronisationOutput
	ToRemoteTerraformRepositoryContentSynchronisationOutputWithContext(context.Context) RemoteTerraformRepositoryContentSynchronisationOutput
}

type RemoteTerraformRepositoryContentSynchronisationArgs struct {
	Enabled                      pulumi.BoolPtrInput `pulumi:"enabled"`
	PropertiesEnabled            pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemoteTerraformRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteTerraformRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemoteTerraformRepositoryContentSynchronisationArgs) ToRemoteTerraformRepositoryContentSynchronisationOutput() RemoteTerraformRepositoryContentSynchronisationOutput {
	return i.ToRemoteTerraformRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemoteTerraformRepositoryContentSynchronisationArgs) ToRemoteTerraformRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteTerraformRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteTerraformRepositoryContentSynchronisationOutput)
}

func (i RemoteTerraformRepositoryContentSynchronisationArgs) ToRemoteTerraformRepositoryContentSynchronisationPtrOutput() RemoteTerraformRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteTerraformRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemoteTerraformRepositoryContentSynchronisationArgs) ToRemoteTerraformRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteTerraformRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteTerraformRepositoryContentSynchronisationOutput).ToRemoteTerraformRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemoteTerraformRepositoryContentSynchronisationPtrInput is an input type that accepts RemoteTerraformRepositoryContentSynchronisationArgs, RemoteTerraformRepositoryContentSynchronisationPtr and RemoteTerraformRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemoteTerraformRepositoryContentSynchronisationPtrInput` via:
//
//	        RemoteTerraformRepositoryContentSynchronisationArgs{...}
//
//	or:
//
//	        nil
type RemoteTerraformRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemoteTerraformRepositoryContentSynchronisationPtrOutput() RemoteTerraformRepositoryContentSynchronisationPtrOutput
	ToRemoteTerraformRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemoteTerraformRepositoryContentSynchronisationPtrOutput
}

type remoteTerraformRepositoryContentSynchronisationPtrType RemoteTerraformRepositoryContentSynchronisationArgs

func RemoteTerraformRepositoryContentSynchronisationPtr(v *RemoteTerraformRepositoryContentSynchronisationArgs) RemoteTerraformRepositoryContentSynchronisationPtrInput {
	return (*remoteTerraformRepositoryContentSynchronisationPtrType)(v)
}

func (*remoteTerraformRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteTerraformRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remoteTerraformRepositoryContentSynchronisationPtrType) ToRemoteTerraformRepositoryContentSynchronisationPtrOutput() RemoteTerraformRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteTerraformRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remoteTerraformRepositoryContentSynchronisationPtrType) ToRemoteTerraformRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteTerraformRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteTerraformRepositoryContentSynchronisationPtrOutput)
}

type RemoteTerraformRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemoteTerraformRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteTerraformRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteTerraformRepositoryContentSynchronisationOutput) ToRemoteTerraformRepositoryContentSynchronisationOutput() RemoteTerraformRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteTerraformRepositoryContentSynchronisationOutput) ToRemoteTerraformRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteTerraformRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteTerraformRepositoryContentSynchronisationOutput) ToRemoteTerraformRepositoryContentSynchronisationPtrOutput() RemoteTerraformRepositoryContentSynchronisationPtrOutput {
	return o.ToRemoteTerraformRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemoteTerraformRepositoryContentSynchronisationOutput) ToRemoteTerraformRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteTerraformRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteTerraformRepositoryContentSynchronisation) *RemoteTerraformRepositoryContentSynchronisation {
		return &v
	}).(RemoteTerraformRepositoryContentSynchronisationPtrOutput)
}

func (o RemoteTerraformRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteTerraformRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteTerraformRepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteTerraformRepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteTerraformRepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteTerraformRepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

func (o RemoteTerraformRepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteTerraformRepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemoteTerraformRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemoteTerraformRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteTerraformRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteTerraformRepositoryContentSynchronisationPtrOutput) ToRemoteTerraformRepositoryContentSynchronisationPtrOutput() RemoteTerraformRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteTerraformRepositoryContentSynchronisationPtrOutput) ToRemoteTerraformRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteTerraformRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteTerraformRepositoryContentSynchronisationPtrOutput) Elem() RemoteTerraformRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemoteTerraformRepositoryContentSynchronisation) RemoteTerraformRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemoteTerraformRepositoryContentSynchronisation
		return ret
	}).(RemoteTerraformRepositoryContentSynchronisationOutput)
}

func (o RemoteTerraformRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteTerraformRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteTerraformRepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteTerraformRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteTerraformRepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteTerraformRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteTerraformRepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteTerraformRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type RemoteVcsRepositoryContentSynchronisation struct {
	Enabled                      *bool `pulumi:"enabled"`
	PropertiesEnabled            *bool `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            *bool `pulumi:"statisticsEnabled"`
}

// RemoteVcsRepositoryContentSynchronisationInput is an input type that accepts RemoteVcsRepositoryContentSynchronisationArgs and RemoteVcsRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemoteVcsRepositoryContentSynchronisationInput` via:
//
//	RemoteVcsRepositoryContentSynchronisationArgs{...}
type RemoteVcsRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemoteVcsRepositoryContentSynchronisationOutput() RemoteVcsRepositoryContentSynchronisationOutput
	ToRemoteVcsRepositoryContentSynchronisationOutputWithContext(context.Context) RemoteVcsRepositoryContentSynchronisationOutput
}

type RemoteVcsRepositoryContentSynchronisationArgs struct {
	Enabled                      pulumi.BoolPtrInput `pulumi:"enabled"`
	PropertiesEnabled            pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	StatisticsEnabled            pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemoteVcsRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteVcsRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemoteVcsRepositoryContentSynchronisationArgs) ToRemoteVcsRepositoryContentSynchronisationOutput() RemoteVcsRepositoryContentSynchronisationOutput {
	return i.ToRemoteVcsRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemoteVcsRepositoryContentSynchronisationArgs) ToRemoteVcsRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteVcsRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteVcsRepositoryContentSynchronisationOutput)
}

func (i RemoteVcsRepositoryContentSynchronisationArgs) ToRemoteVcsRepositoryContentSynchronisationPtrOutput() RemoteVcsRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteVcsRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemoteVcsRepositoryContentSynchronisationArgs) ToRemoteVcsRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteVcsRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteVcsRepositoryContentSynchronisationOutput).ToRemoteVcsRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemoteVcsRepositoryContentSynchronisationPtrInput is an input type that accepts RemoteVcsRepositoryContentSynchronisationArgs, RemoteVcsRepositoryContentSynchronisationPtr and RemoteVcsRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemoteVcsRepositoryContentSynchronisationPtrInput` via:
//
//	        RemoteVcsRepositoryContentSynchronisationArgs{...}
//
//	or:
//
//	        nil
type RemoteVcsRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemoteVcsRepositoryContentSynchronisationPtrOutput() RemoteVcsRepositoryContentSynchronisationPtrOutput
	ToRemoteVcsRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemoteVcsRepositoryContentSynchronisationPtrOutput
}

type remoteVcsRepositoryContentSynchronisationPtrType RemoteVcsRepositoryContentSynchronisationArgs

func RemoteVcsRepositoryContentSynchronisationPtr(v *RemoteVcsRepositoryContentSynchronisationArgs) RemoteVcsRepositoryContentSynchronisationPtrInput {
	return (*remoteVcsRepositoryContentSynchronisationPtrType)(v)
}

func (*remoteVcsRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteVcsRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remoteVcsRepositoryContentSynchronisationPtrType) ToRemoteVcsRepositoryContentSynchronisationPtrOutput() RemoteVcsRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteVcsRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remoteVcsRepositoryContentSynchronisationPtrType) ToRemoteVcsRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteVcsRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteVcsRepositoryContentSynchronisationPtrOutput)
}

type RemoteVcsRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemoteVcsRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteVcsRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteVcsRepositoryContentSynchronisationOutput) ToRemoteVcsRepositoryContentSynchronisationOutput() RemoteVcsRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteVcsRepositoryContentSynchronisationOutput) ToRemoteVcsRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteVcsRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteVcsRepositoryContentSynchronisationOutput) ToRemoteVcsRepositoryContentSynchronisationPtrOutput() RemoteVcsRepositoryContentSynchronisationPtrOutput {
	return o.ToRemoteVcsRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemoteVcsRepositoryContentSynchronisationOutput) ToRemoteVcsRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteVcsRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteVcsRepositoryContentSynchronisation) *RemoteVcsRepositoryContentSynchronisation {
		return &v
	}).(RemoteVcsRepositoryContentSynchronisationPtrOutput)
}

func (o RemoteVcsRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteVcsRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteVcsRepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteVcsRepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

func (o RemoteVcsRepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteVcsRepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

func (o RemoteVcsRepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteVcsRepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemoteVcsRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemoteVcsRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteVcsRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteVcsRepositoryContentSynchronisationPtrOutput) ToRemoteVcsRepositoryContentSynchronisationPtrOutput() RemoteVcsRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteVcsRepositoryContentSynchronisationPtrOutput) ToRemoteVcsRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteVcsRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteVcsRepositoryContentSynchronisationPtrOutput) Elem() RemoteVcsRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemoteVcsRepositoryContentSynchronisation) RemoteVcsRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemoteVcsRepositoryContentSynchronisation
		return ret
	}).(RemoteVcsRepositoryContentSynchronisationOutput)
}

func (o RemoteVcsRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteVcsRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteVcsRepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteVcsRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteVcsRepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteVcsRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

func (o RemoteVcsRepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteVcsRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type ReplicationConfigReplication struct {
	Enabled *bool `pulumi:"enabled"`
	// Requires password encryption to be turned off `POST /api/system/decrypt`.
	Password   *string `pulumi:"password"`
	PathPrefix *string `pulumi:"pathPrefix"`
	// Proxy key from Artifactory Proxies setting
	Proxy               *string `pulumi:"proxy"`
	SocketTimeoutMillis *int    `pulumi:"socketTimeoutMillis"`
	SyncDeletes         *bool   `pulumi:"syncDeletes"`
	SyncProperties      *bool   `pulumi:"syncProperties"`
	SyncStatistics      *bool   `pulumi:"syncStatistics"`
	Url                 *string `pulumi:"url"`
	Username            *string `pulumi:"username"`
}

// ReplicationConfigReplicationInput is an input type that accepts ReplicationConfigReplicationArgs and ReplicationConfigReplicationOutput values.
// You can construct a concrete instance of `ReplicationConfigReplicationInput` via:
//
//	ReplicationConfigReplicationArgs{...}
type ReplicationConfigReplicationInput interface {
	pulumi.Input

	ToReplicationConfigReplicationOutput() ReplicationConfigReplicationOutput
	ToReplicationConfigReplicationOutputWithContext(context.Context) ReplicationConfigReplicationOutput
}

type ReplicationConfigReplicationArgs struct {
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Requires password encryption to be turned off `POST /api/system/decrypt`.
	Password   pulumi.StringPtrInput `pulumi:"password"`
	PathPrefix pulumi.StringPtrInput `pulumi:"pathPrefix"`
	// Proxy key from Artifactory Proxies setting
	Proxy               pulumi.StringPtrInput `pulumi:"proxy"`
	SocketTimeoutMillis pulumi.IntPtrInput    `pulumi:"socketTimeoutMillis"`
	SyncDeletes         pulumi.BoolPtrInput   `pulumi:"syncDeletes"`
	SyncProperties      pulumi.BoolPtrInput   `pulumi:"syncProperties"`
	SyncStatistics      pulumi.BoolPtrInput   `pulumi:"syncStatistics"`
	Url                 pulumi.StringPtrInput `pulumi:"url"`
	Username            pulumi.StringPtrInput `pulumi:"username"`
}

func (ReplicationConfigReplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationConfigReplication)(nil)).Elem()
}

func (i ReplicationConfigReplicationArgs) ToReplicationConfigReplicationOutput() ReplicationConfigReplicationOutput {
	return i.ToReplicationConfigReplicationOutputWithContext(context.Background())
}

func (i ReplicationConfigReplicationArgs) ToReplicationConfigReplicationOutputWithContext(ctx context.Context) ReplicationConfigReplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationConfigReplicationOutput)
}

// ReplicationConfigReplicationArrayInput is an input type that accepts ReplicationConfigReplicationArray and ReplicationConfigReplicationArrayOutput values.
// You can construct a concrete instance of `ReplicationConfigReplicationArrayInput` via:
//
//	ReplicationConfigReplicationArray{ ReplicationConfigReplicationArgs{...} }
type ReplicationConfigReplicationArrayInput interface {
	pulumi.Input

	ToReplicationConfigReplicationArrayOutput() ReplicationConfigReplicationArrayOutput
	ToReplicationConfigReplicationArrayOutputWithContext(context.Context) ReplicationConfigReplicationArrayOutput
}

type ReplicationConfigReplicationArray []ReplicationConfigReplicationInput

func (ReplicationConfigReplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicationConfigReplication)(nil)).Elem()
}

func (i ReplicationConfigReplicationArray) ToReplicationConfigReplicationArrayOutput() ReplicationConfigReplicationArrayOutput {
	return i.ToReplicationConfigReplicationArrayOutputWithContext(context.Background())
}

func (i ReplicationConfigReplicationArray) ToReplicationConfigReplicationArrayOutputWithContext(ctx context.Context) ReplicationConfigReplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationConfigReplicationArrayOutput)
}

type ReplicationConfigReplicationOutput struct{ *pulumi.OutputState }

func (ReplicationConfigReplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationConfigReplication)(nil)).Elem()
}

func (o ReplicationConfigReplicationOutput) ToReplicationConfigReplicationOutput() ReplicationConfigReplicationOutput {
	return o
}

func (o ReplicationConfigReplicationOutput) ToReplicationConfigReplicationOutputWithContext(ctx context.Context) ReplicationConfigReplicationOutput {
	return o
}

func (o ReplicationConfigReplicationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReplicationConfigReplication) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Requires password encryption to be turned off `POST /api/system/decrypt`.
func (o ReplicationConfigReplicationOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationConfigReplication) *string { return v.Password }).(pulumi.StringPtrOutput)
}

func (o ReplicationConfigReplicationOutput) PathPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationConfigReplication) *string { return v.PathPrefix }).(pulumi.StringPtrOutput)
}

// Proxy key from Artifactory Proxies setting
func (o ReplicationConfigReplicationOutput) Proxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationConfigReplication) *string { return v.Proxy }).(pulumi.StringPtrOutput)
}

func (o ReplicationConfigReplicationOutput) SocketTimeoutMillis() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReplicationConfigReplication) *int { return v.SocketTimeoutMillis }).(pulumi.IntPtrOutput)
}

func (o ReplicationConfigReplicationOutput) SyncDeletes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReplicationConfigReplication) *bool { return v.SyncDeletes }).(pulumi.BoolPtrOutput)
}

func (o ReplicationConfigReplicationOutput) SyncProperties() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReplicationConfigReplication) *bool { return v.SyncProperties }).(pulumi.BoolPtrOutput)
}

func (o ReplicationConfigReplicationOutput) SyncStatistics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReplicationConfigReplication) *bool { return v.SyncStatistics }).(pulumi.BoolPtrOutput)
}

func (o ReplicationConfigReplicationOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationConfigReplication) *string { return v.Url }).(pulumi.StringPtrOutput)
}

func (o ReplicationConfigReplicationOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationConfigReplication) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ReplicationConfigReplicationArrayOutput struct{ *pulumi.OutputState }

func (ReplicationConfigReplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicationConfigReplication)(nil)).Elem()
}

func (o ReplicationConfigReplicationArrayOutput) ToReplicationConfigReplicationArrayOutput() ReplicationConfigReplicationArrayOutput {
	return o
}

func (o ReplicationConfigReplicationArrayOutput) ToReplicationConfigReplicationArrayOutputWithContext(ctx context.Context) ReplicationConfigReplicationArrayOutput {
	return o
}

func (o ReplicationConfigReplicationArrayOutput) Index(i pulumi.IntInput) ReplicationConfigReplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReplicationConfigReplication {
		return vs[0].([]ReplicationConfigReplication)[vs[1].(int)]
	}).(ReplicationConfigReplicationOutput)
}

type GetPermissionTargetBuild struct {
	Actions *GetPermissionTargetBuildActions `pulumi:"actions"`
	// Pattern of artifacts to exclude.
	ExcludesPatterns []string `pulumi:"excludesPatterns"`
	// Pattern of artifacts to include.
	IncludesPatterns []string `pulumi:"includesPatterns"`
	// List of repositories this permission target is applicable for. You can specify the
	// name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote
	// repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
	Repositories []string `pulumi:"repositories"`
}

// GetPermissionTargetBuildInput is an input type that accepts GetPermissionTargetBuildArgs and GetPermissionTargetBuildOutput values.
// You can construct a concrete instance of `GetPermissionTargetBuildInput` via:
//
//	GetPermissionTargetBuildArgs{...}
type GetPermissionTargetBuildInput interface {
	pulumi.Input

	ToGetPermissionTargetBuildOutput() GetPermissionTargetBuildOutput
	ToGetPermissionTargetBuildOutputWithContext(context.Context) GetPermissionTargetBuildOutput
}

type GetPermissionTargetBuildArgs struct {
	Actions GetPermissionTargetBuildActionsPtrInput `pulumi:"actions"`
	// Pattern of artifacts to exclude.
	ExcludesPatterns pulumi.StringArrayInput `pulumi:"excludesPatterns"`
	// Pattern of artifacts to include.
	IncludesPatterns pulumi.StringArrayInput `pulumi:"includesPatterns"`
	// List of repositories this permission target is applicable for. You can specify the
	// name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote
	// repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
	Repositories pulumi.StringArrayInput `pulumi:"repositories"`
}

func (GetPermissionTargetBuildArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionTargetBuild)(nil)).Elem()
}

func (i GetPermissionTargetBuildArgs) ToGetPermissionTargetBuildOutput() GetPermissionTargetBuildOutput {
	return i.ToGetPermissionTargetBuildOutputWithContext(context.Background())
}

func (i GetPermissionTargetBuildArgs) ToGetPermissionTargetBuildOutputWithContext(ctx context.Context) GetPermissionTargetBuildOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionTargetBuildOutput)
}

func (i GetPermissionTargetBuildArgs) ToGetPermissionTargetBuildPtrOutput() GetPermissionTargetBuildPtrOutput {
	return i.ToGetPermissionTargetBuildPtrOutputWithContext(context.Background())
}

func (i GetPermissionTargetBuildArgs) ToGetPermissionTargetBuildPtrOutputWithContext(ctx context.Context) GetPermissionTargetBuildPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionTargetBuildOutput).ToGetPermissionTargetBuildPtrOutputWithContext(ctx)
}

// GetPermissionTargetBuildPtrInput is an input type that accepts GetPermissionTargetBuildArgs, GetPermissionTargetBuildPtr and GetPermissionTargetBuildPtrOutput values.
// You can construct a concrete instance of `GetPermissionTargetBuildPtrInput` via:
//
//	        GetPermissionTargetBuildArgs{...}
//
//	or:
//
//	        nil
type GetPermissionTargetBuildPtrInput interface {
	pulumi.Input

	ToGetPermissionTargetBuildPtrOutput() GetPermissionTargetBuildPtrOutput
	ToGetPermissionTargetBuildPtrOutputWithContext(context.Context) GetPermissionTargetBuildPtrOutput
}

type getPermissionTargetBuildPtrType GetPermissionTargetBuildArgs

func GetPermissionTargetBuildPtr(v *GetPermissionTargetBuildArgs) GetPermissionTargetBuildPtrInput {
	return (*getPermissionTargetBuildPtrType)(v)
}

func (*getPermissionTargetBuildPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetPermissionTargetBuild)(nil)).Elem()
}

func (i *getPermissionTargetBuildPtrType) ToGetPermissionTargetBuildPtrOutput() GetPermissionTargetBuildPtrOutput {
	return i.ToGetPermissionTargetBuildPtrOutputWithContext(context.Background())
}

func (i *getPermissionTargetBuildPtrType) ToGetPermissionTargetBuildPtrOutputWithContext(ctx context.Context) GetPermissionTargetBuildPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionTargetBuildPtrOutput)
}

type GetPermissionTargetBuildOutput struct{ *pulumi.OutputState }

func (GetPermissionTargetBuildOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionTargetBuild)(nil)).Elem()
}

func (o GetPermissionTargetBuildOutput) ToGetPermissionTargetBuildOutput() GetPermissionTargetBuildOutput {
	return o
}

func (o GetPermissionTargetBuildOutput) ToGetPermissionTargetBuildOutputWithContext(ctx context.Context) GetPermissionTargetBuildOutput {
	return o
}

func (o GetPermissionTargetBuildOutput) ToGetPermissionTargetBuildPtrOutput() GetPermissionTargetBuildPtrOutput {
	return o.ToGetPermissionTargetBuildPtrOutputWithContext(context.Background())
}

func (o GetPermissionTargetBuildOutput) ToGetPermissionTargetBuildPtrOutputWithContext(ctx context.Context) GetPermissionTargetBuildPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetPermissionTargetBuild) *GetPermissionTargetBuild {
		return &v
	}).(GetPermissionTargetBuildPtrOutput)
}

func (o GetPermissionTargetBuildOutput) Actions() GetPermissionTargetBuildActionsPtrOutput {
	return o.ApplyT(func(v GetPermissionTargetBuild) *GetPermissionTargetBuildActions { return v.Actions }).(GetPermissionTargetBuildActionsPtrOutput)
}

// Pattern of artifacts to exclude.
func (o GetPermissionTargetBuildOutput) ExcludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPermissionTargetBuild) []string { return v.ExcludesPatterns }).(pulumi.StringArrayOutput)
}

// Pattern of artifacts to include.
func (o GetPermissionTargetBuildOutput) IncludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPermissionTargetBuild) []string { return v.IncludesPatterns }).(pulumi.StringArrayOutput)
}

// List of repositories this permission target is applicable for. You can specify the
// name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote
// repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
func (o GetPermissionTargetBuildOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPermissionTargetBuild) []string { return v.Repositories }).(pulumi.StringArrayOutput)
}

type GetPermissionTargetBuildPtrOutput struct{ *pulumi.OutputState }

func (GetPermissionTargetBuildPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetPermissionTargetBuild)(nil)).Elem()
}

func (o GetPermissionTargetBuildPtrOutput) ToGetPermissionTargetBuildPtrOutput() GetPermissionTargetBuildPtrOutput {
	return o
}

func (o GetPermissionTargetBuildPtrOutput) ToGetPermissionTargetBuildPtrOutputWithContext(ctx context.Context) GetPermissionTargetBuildPtrOutput {
	return o
}

func (o GetPermissionTargetBuildPtrOutput) Elem() GetPermissionTargetBuildOutput {
	return o.ApplyT(func(v *GetPermissionTargetBuild) GetPermissionTargetBuild {
		if v != nil {
			return *v
		}
		var ret GetPermissionTargetBuild
		return ret
	}).(GetPermissionTargetBuildOutput)
}

func (o GetPermissionTargetBuildPtrOutput) Actions() GetPermissionTargetBuildActionsPtrOutput {
	return o.ApplyT(func(v *GetPermissionTargetBuild) *GetPermissionTargetBuildActions {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(GetPermissionTargetBuildActionsPtrOutput)
}

// Pattern of artifacts to exclude.
func (o GetPermissionTargetBuildPtrOutput) ExcludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetPermissionTargetBuild) []string {
		if v == nil {
			return nil
		}
		return v.ExcludesPatterns
	}).(pulumi.StringArrayOutput)
}

// Pattern of artifacts to include.
func (o GetPermissionTargetBuildPtrOutput) IncludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetPermissionTargetBuild) []string {
		if v == nil {
			return nil
		}
		return v.IncludesPatterns
	}).(pulumi.StringArrayOutput)
}

// List of repositories this permission target is applicable for. You can specify the
// name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote
// repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
func (o GetPermissionTargetBuildPtrOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetPermissionTargetBuild) []string {
		if v == nil {
			return nil
		}
		return v.Repositories
	}).(pulumi.StringArrayOutput)
}

type GetPermissionTargetBuildActions struct {
	// Groups this permission applies for.
	Groups []GetPermissionTargetBuildActionsGroup `pulumi:"groups"`
	// Users this permission target applies for.
	Users []GetPermissionTargetBuildActionsUser `pulumi:"users"`
}

// GetPermissionTargetBuildActionsInput is an input type that accepts GetPermissionTargetBuildActionsArgs and GetPermissionTargetBuildActionsOutput values.
// You can construct a concrete instance of `GetPermissionTargetBuildActionsInput` via:
//
//	GetPermissionTargetBuildActionsArgs{...}
type GetPermissionTargetBuildActionsInput interface {
	pulumi.Input

	ToGetPermissionTargetBuildActionsOutput() GetPermissionTargetBuildActionsOutput
	ToGetPermissionTargetBuildActionsOutputWithContext(context.Context) GetPermissionTargetBuildActionsOutput
}

type GetPermissionTargetBuildActionsArgs struct {
	// Groups this permission applies for.
	Groups GetPermissionTargetBuildActionsGroupArrayInput `pulumi:"groups"`
	// Users this permission target applies for.
	Users GetPermissionTargetBuildActionsUserArrayInput `pulumi:"users"`
}

func (GetPermissionTargetBuildActionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionTargetBuildActions)(nil)).Elem()
}

func (i GetPermissionTargetBuildActionsArgs) ToGetPermissionTargetBuildActionsOutput() GetPermissionTargetBuildActionsOutput {
	return i.ToGetPermissionTargetBuildActionsOutputWithContext(context.Background())
}

func (i GetPermissionTargetBuildActionsArgs) ToGetPermissionTargetBuildActionsOutputWithContext(ctx context.Context) GetPermissionTargetBuildActionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionTargetBuildActionsOutput)
}

func (i GetPermissionTargetBuildActionsArgs) ToGetPermissionTargetBuildActionsPtrOutput() GetPermissionTargetBuildActionsPtrOutput {
	return i.ToGetPermissionTargetBuildActionsPtrOutputWithContext(context.Background())
}

func (i GetPermissionTargetBuildActionsArgs) ToGetPermissionTargetBuildActionsPtrOutputWithContext(ctx context.Context) GetPermissionTargetBuildActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionTargetBuildActionsOutput).ToGetPermissionTargetBuildActionsPtrOutputWithContext(ctx)
}

// GetPermissionTargetBuildActionsPtrInput is an input type that accepts GetPermissionTargetBuildActionsArgs, GetPermissionTargetBuildActionsPtr and GetPermissionTargetBuildActionsPtrOutput values.
// You can construct a concrete instance of `GetPermissionTargetBuildActionsPtrInput` via:
//
//	        GetPermissionTargetBuildActionsArgs{...}
//
//	or:
//
//	        nil
type GetPermissionTargetBuildActionsPtrInput interface {
	pulumi.Input

	ToGetPermissionTargetBuildActionsPtrOutput() GetPermissionTargetBuildActionsPtrOutput
	ToGetPermissionTargetBuildActionsPtrOutputWithContext(context.Context) GetPermissionTargetBuildActionsPtrOutput
}

type getPermissionTargetBuildActionsPtrType GetPermissionTargetBuildActionsArgs

func GetPermissionTargetBuildActionsPtr(v *GetPermissionTargetBuildActionsArgs) GetPermissionTargetBuildActionsPtrInput {
	return (*getPermissionTargetBuildActionsPtrType)(v)
}

func (*getPermissionTargetBuildActionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetPermissionTargetBuildActions)(nil)).Elem()
}

func (i *getPermissionTargetBuildActionsPtrType) ToGetPermissionTargetBuildActionsPtrOutput() GetPermissionTargetBuildActionsPtrOutput {
	return i.ToGetPermissionTargetBuildActionsPtrOutputWithContext(context.Background())
}

func (i *getPermissionTargetBuildActionsPtrType) ToGetPermissionTargetBuildActionsPtrOutputWithContext(ctx context.Context) GetPermissionTargetBuildActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionTargetBuildActionsPtrOutput)
}

type GetPermissionTargetBuildActionsOutput struct{ *pulumi.OutputState }

func (GetPermissionTargetBuildActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionTargetBuildActions)(nil)).Elem()
}

func (o GetPermissionTargetBuildActionsOutput) ToGetPermissionTargetBuildActionsOutput() GetPermissionTargetBuildActionsOutput {
	return o
}

func (o GetPermissionTargetBuildActionsOutput) ToGetPermissionTargetBuildActionsOutputWithContext(ctx context.Context) GetPermissionTargetBuildActionsOutput {
	return o
}

func (o GetPermissionTargetBuildActionsOutput) ToGetPermissionTargetBuildActionsPtrOutput() GetPermissionTargetBuildActionsPtrOutput {
	return o.ToGetPermissionTargetBuildActionsPtrOutputWithContext(context.Background())
}

func (o GetPermissionTargetBuildActionsOutput) ToGetPermissionTargetBuildActionsPtrOutputWithContext(ctx context.Context) GetPermissionTargetBuildActionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetPermissionTargetBuildActions) *GetPermissionTargetBuildActions {
		return &v
	}).(GetPermissionTargetBuildActionsPtrOutput)
}

// Groups this permission applies for.
func (o GetPermissionTargetBuildActionsOutput) Groups() GetPermissionTargetBuildActionsGroupArrayOutput {
	return o.ApplyT(func(v GetPermissionTargetBuildActions) []GetPermissionTargetBuildActionsGroup { return v.Groups }).(GetPermissionTargetBuildActionsGroupArrayOutput)
}

// Users this permission target applies for.
func (o GetPermissionTargetBuildActionsOutput) Users() GetPermissionTargetBuildActionsUserArrayOutput {
	return o.ApplyT(func(v GetPermissionTargetBuildActions) []GetPermissionTargetBuildActionsUser { return v.Users }).(GetPermissionTargetBuildActionsUserArrayOutput)
}

type GetPermissionTargetBuildActionsPtrOutput struct{ *pulumi.OutputState }

func (GetPermissionTargetBuildActionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetPermissionTargetBuildActions)(nil)).Elem()
}

func (o GetPermissionTargetBuildActionsPtrOutput) ToGetPermissionTargetBuildActionsPtrOutput() GetPermissionTargetBuildActionsPtrOutput {
	return o
}

func (o GetPermissionTargetBuildActionsPtrOutput) ToGetPermissionTargetBuildActionsPtrOutputWithContext(ctx context.Context) GetPermissionTargetBuildActionsPtrOutput {
	return o
}

func (o GetPermissionTargetBuildActionsPtrOutput) Elem() GetPermissionTargetBuildActionsOutput {
	return o.ApplyT(func(v *GetPermissionTargetBuildActions) GetPermissionTargetBuildActions {
		if v != nil {
			return *v
		}
		var ret GetPermissionTargetBuildActions
		return ret
	}).(GetPermissionTargetBuildActionsOutput)
}

// Groups this permission applies for.
func (o GetPermissionTargetBuildActionsPtrOutput) Groups() GetPermissionTargetBuildActionsGroupArrayOutput {
	return o.ApplyT(func(v *GetPermissionTargetBuildActions) []GetPermissionTargetBuildActionsGroup {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(GetPermissionTargetBuildActionsGroupArrayOutput)
}

// Users this permission target applies for.
func (o GetPermissionTargetBuildActionsPtrOutput) Users() GetPermissionTargetBuildActionsUserArrayOutput {
	return o.ApplyT(func(v *GetPermissionTargetBuildActions) []GetPermissionTargetBuildActionsUser {
		if v == nil {
			return nil
		}
		return v.Users
	}).(GetPermissionTargetBuildActionsUserArrayOutput)
}

type GetPermissionTargetBuildActionsGroup struct {
	// Name of the permission target.
	Name        string   `pulumi:"name"`
	Permissions []string `pulumi:"permissions"`
}

// GetPermissionTargetBuildActionsGroupInput is an input type that accepts GetPermissionTargetBuildActionsGroupArgs and GetPermissionTargetBuildActionsGroupOutput values.
// You can construct a concrete instance of `GetPermissionTargetBuildActionsGroupInput` via:
//
//	GetPermissionTargetBuildActionsGroupArgs{...}
type GetPermissionTargetBuildActionsGroupInput interface {
	pulumi.Input

	ToGetPermissionTargetBuildActionsGroupOutput() GetPermissionTargetBuildActionsGroupOutput
	ToGetPermissionTargetBuildActionsGroupOutputWithContext(context.Context) GetPermissionTargetBuildActionsGroupOutput
}

type GetPermissionTargetBuildActionsGroupArgs struct {
	// Name of the permission target.
	Name        pulumi.StringInput      `pulumi:"name"`
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (GetPermissionTargetBuildActionsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionTargetBuildActionsGroup)(nil)).Elem()
}

func (i GetPermissionTargetBuildActionsGroupArgs) ToGetPermissionTargetBuildActionsGroupOutput() GetPermissionTargetBuildActionsGroupOutput {
	return i.ToGetPermissionTargetBuildActionsGroupOutputWithContext(context.Background())
}

func (i GetPermissionTargetBuildActionsGroupArgs) ToGetPermissionTargetBuildActionsGroupOutputWithContext(ctx context.Context) GetPermissionTargetBuildActionsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionTargetBuildActionsGroupOutput)
}

// GetPermissionTargetBuildActionsGroupArrayInput is an input type that accepts GetPermissionTargetBuildActionsGroupArray and GetPermissionTargetBuildActionsGroupArrayOutput values.
// You can construct a concrete instance of `GetPermissionTargetBuildActionsGroupArrayInput` via:
//
//	GetPermissionTargetBuildActionsGroupArray{ GetPermissionTargetBuildActionsGroupArgs{...} }
type GetPermissionTargetBuildActionsGroupArrayInput interface {
	pulumi.Input

	ToGetPermissionTargetBuildActionsGroupArrayOutput() GetPermissionTargetBuildActionsGroupArrayOutput
	ToGetPermissionTargetBuildActionsGroupArrayOutputWithContext(context.Context) GetPermissionTargetBuildActionsGroupArrayOutput
}

type GetPermissionTargetBuildActionsGroupArray []GetPermissionTargetBuildActionsGroupInput

func (GetPermissionTargetBuildActionsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPermissionTargetBuildActionsGroup)(nil)).Elem()
}

func (i GetPermissionTargetBuildActionsGroupArray) ToGetPermissionTargetBuildActionsGroupArrayOutput() GetPermissionTargetBuildActionsGroupArrayOutput {
	return i.ToGetPermissionTargetBuildActionsGroupArrayOutputWithContext(context.Background())
}

func (i GetPermissionTargetBuildActionsGroupArray) ToGetPermissionTargetBuildActionsGroupArrayOutputWithContext(ctx context.Context) GetPermissionTargetBuildActionsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionTargetBuildActionsGroupArrayOutput)
}

type GetPermissionTargetBuildActionsGroupOutput struct{ *pulumi.OutputState }

func (GetPermissionTargetBuildActionsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionTargetBuildActionsGroup)(nil)).Elem()
}

func (o GetPermissionTargetBuildActionsGroupOutput) ToGetPermissionTargetBuildActionsGroupOutput() GetPermissionTargetBuildActionsGroupOutput {
	return o
}

func (o GetPermissionTargetBuildActionsGroupOutput) ToGetPermissionTargetBuildActionsGroupOutputWithContext(ctx context.Context) GetPermissionTargetBuildActionsGroupOutput {
	return o
}

// Name of the permission target.
func (o GetPermissionTargetBuildActionsGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPermissionTargetBuildActionsGroup) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetPermissionTargetBuildActionsGroupOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPermissionTargetBuildActionsGroup) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type GetPermissionTargetBuildActionsGroupArrayOutput struct{ *pulumi.OutputState }

func (GetPermissionTargetBuildActionsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPermissionTargetBuildActionsGroup)(nil)).Elem()
}

func (o GetPermissionTargetBuildActionsGroupArrayOutput) ToGetPermissionTargetBuildActionsGroupArrayOutput() GetPermissionTargetBuildActionsGroupArrayOutput {
	return o
}

func (o GetPermissionTargetBuildActionsGroupArrayOutput) ToGetPermissionTargetBuildActionsGroupArrayOutputWithContext(ctx context.Context) GetPermissionTargetBuildActionsGroupArrayOutput {
	return o
}

func (o GetPermissionTargetBuildActionsGroupArrayOutput) Index(i pulumi.IntInput) GetPermissionTargetBuildActionsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPermissionTargetBuildActionsGroup {
		return vs[0].([]GetPermissionTargetBuildActionsGroup)[vs[1].(int)]
	}).(GetPermissionTargetBuildActionsGroupOutput)
}

type GetPermissionTargetBuildActionsUser struct {
	// Name of the permission target.
	Name        string   `pulumi:"name"`
	Permissions []string `pulumi:"permissions"`
}

// GetPermissionTargetBuildActionsUserInput is an input type that accepts GetPermissionTargetBuildActionsUserArgs and GetPermissionTargetBuildActionsUserOutput values.
// You can construct a concrete instance of `GetPermissionTargetBuildActionsUserInput` via:
//
//	GetPermissionTargetBuildActionsUserArgs{...}
type GetPermissionTargetBuildActionsUserInput interface {
	pulumi.Input

	ToGetPermissionTargetBuildActionsUserOutput() GetPermissionTargetBuildActionsUserOutput
	ToGetPermissionTargetBuildActionsUserOutputWithContext(context.Context) GetPermissionTargetBuildActionsUserOutput
}

type GetPermissionTargetBuildActionsUserArgs struct {
	// Name of the permission target.
	Name        pulumi.StringInput      `pulumi:"name"`
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (GetPermissionTargetBuildActionsUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionTargetBuildActionsUser)(nil)).Elem()
}

func (i GetPermissionTargetBuildActionsUserArgs) ToGetPermissionTargetBuildActionsUserOutput() GetPermissionTargetBuildActionsUserOutput {
	return i.ToGetPermissionTargetBuildActionsUserOutputWithContext(context.Background())
}

func (i GetPermissionTargetBuildActionsUserArgs) ToGetPermissionTargetBuildActionsUserOutputWithContext(ctx context.Context) GetPermissionTargetBuildActionsUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionTargetBuildActionsUserOutput)
}

// GetPermissionTargetBuildActionsUserArrayInput is an input type that accepts GetPermissionTargetBuildActionsUserArray and GetPermissionTargetBuildActionsUserArrayOutput values.
// You can construct a concrete instance of `GetPermissionTargetBuildActionsUserArrayInput` via:
//
//	GetPermissionTargetBuildActionsUserArray{ GetPermissionTargetBuildActionsUserArgs{...} }
type GetPermissionTargetBuildActionsUserArrayInput interface {
	pulumi.Input

	ToGetPermissionTargetBuildActionsUserArrayOutput() GetPermissionTargetBuildActionsUserArrayOutput
	ToGetPermissionTargetBuildActionsUserArrayOutputWithContext(context.Context) GetPermissionTargetBuildActionsUserArrayOutput
}

type GetPermissionTargetBuildActionsUserArray []GetPermissionTargetBuildActionsUserInput

func (GetPermissionTargetBuildActionsUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPermissionTargetBuildActionsUser)(nil)).Elem()
}

func (i GetPermissionTargetBuildActionsUserArray) ToGetPermissionTargetBuildActionsUserArrayOutput() GetPermissionTargetBuildActionsUserArrayOutput {
	return i.ToGetPermissionTargetBuildActionsUserArrayOutputWithContext(context.Background())
}

func (i GetPermissionTargetBuildActionsUserArray) ToGetPermissionTargetBuildActionsUserArrayOutputWithContext(ctx context.Context) GetPermissionTargetBuildActionsUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionTargetBuildActionsUserArrayOutput)
}

type GetPermissionTargetBuildActionsUserOutput struct{ *pulumi.OutputState }

func (GetPermissionTargetBuildActionsUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionTargetBuildActionsUser)(nil)).Elem()
}

func (o GetPermissionTargetBuildActionsUserOutput) ToGetPermissionTargetBuildActionsUserOutput() GetPermissionTargetBuildActionsUserOutput {
	return o
}

func (o GetPermissionTargetBuildActionsUserOutput) ToGetPermissionTargetBuildActionsUserOutputWithContext(ctx context.Context) GetPermissionTargetBuildActionsUserOutput {
	return o
}

// Name of the permission target.
func (o GetPermissionTargetBuildActionsUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPermissionTargetBuildActionsUser) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetPermissionTargetBuildActionsUserOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPermissionTargetBuildActionsUser) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type GetPermissionTargetBuildActionsUserArrayOutput struct{ *pulumi.OutputState }

func (GetPermissionTargetBuildActionsUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPermissionTargetBuildActionsUser)(nil)).Elem()
}

func (o GetPermissionTargetBuildActionsUserArrayOutput) ToGetPermissionTargetBuildActionsUserArrayOutput() GetPermissionTargetBuildActionsUserArrayOutput {
	return o
}

func (o GetPermissionTargetBuildActionsUserArrayOutput) ToGetPermissionTargetBuildActionsUserArrayOutputWithContext(ctx context.Context) GetPermissionTargetBuildActionsUserArrayOutput {
	return o
}

func (o GetPermissionTargetBuildActionsUserArrayOutput) Index(i pulumi.IntInput) GetPermissionTargetBuildActionsUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPermissionTargetBuildActionsUser {
		return vs[0].([]GetPermissionTargetBuildActionsUser)[vs[1].(int)]
	}).(GetPermissionTargetBuildActionsUserOutput)
}

type GetPermissionTargetReleaseBundle struct {
	Actions *GetPermissionTargetReleaseBundleActions `pulumi:"actions"`
	// Pattern of artifacts to exclude.
	ExcludesPatterns []string `pulumi:"excludesPatterns"`
	// Pattern of artifacts to include.
	IncludesPatterns []string `pulumi:"includesPatterns"`
	// List of repositories this permission target is applicable for. You can specify the
	// name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote
	// repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
	Repositories []string `pulumi:"repositories"`
}

// GetPermissionTargetReleaseBundleInput is an input type that accepts GetPermissionTargetReleaseBundleArgs and GetPermissionTargetReleaseBundleOutput values.
// You can construct a concrete instance of `GetPermissionTargetReleaseBundleInput` via:
//
//	GetPermissionTargetReleaseBundleArgs{...}
type GetPermissionTargetReleaseBundleInput interface {
	pulumi.Input

	ToGetPermissionTargetReleaseBundleOutput() GetPermissionTargetReleaseBundleOutput
	ToGetPermissionTargetReleaseBundleOutputWithContext(context.Context) GetPermissionTargetReleaseBundleOutput
}

type GetPermissionTargetReleaseBundleArgs struct {
	Actions GetPermissionTargetReleaseBundleActionsPtrInput `pulumi:"actions"`
	// Pattern of artifacts to exclude.
	ExcludesPatterns pulumi.StringArrayInput `pulumi:"excludesPatterns"`
	// Pattern of artifacts to include.
	IncludesPatterns pulumi.StringArrayInput `pulumi:"includesPatterns"`
	// List of repositories this permission target is applicable for. You can specify the
	// name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote
	// repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
	Repositories pulumi.StringArrayInput `pulumi:"repositories"`
}

func (GetPermissionTargetReleaseBundleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionTargetReleaseBundle)(nil)).Elem()
}

func (i GetPermissionTargetReleaseBundleArgs) ToGetPermissionTargetReleaseBundleOutput() GetPermissionTargetReleaseBundleOutput {
	return i.ToGetPermissionTargetReleaseBundleOutputWithContext(context.Background())
}

func (i GetPermissionTargetReleaseBundleArgs) ToGetPermissionTargetReleaseBundleOutputWithContext(ctx context.Context) GetPermissionTargetReleaseBundleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionTargetReleaseBundleOutput)
}

func (i GetPermissionTargetReleaseBundleArgs) ToGetPermissionTargetReleaseBundlePtrOutput() GetPermissionTargetReleaseBundlePtrOutput {
	return i.ToGetPermissionTargetReleaseBundlePtrOutputWithContext(context.Background())
}

func (i GetPermissionTargetReleaseBundleArgs) ToGetPermissionTargetReleaseBundlePtrOutputWithContext(ctx context.Context) GetPermissionTargetReleaseBundlePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionTargetReleaseBundleOutput).ToGetPermissionTargetReleaseBundlePtrOutputWithContext(ctx)
}

// GetPermissionTargetReleaseBundlePtrInput is an input type that accepts GetPermissionTargetReleaseBundleArgs, GetPermissionTargetReleaseBundlePtr and GetPermissionTargetReleaseBundlePtrOutput values.
// You can construct a concrete instance of `GetPermissionTargetReleaseBundlePtrInput` via:
//
//	        GetPermissionTargetReleaseBundleArgs{...}
//
//	or:
//
//	        nil
type GetPermissionTargetReleaseBundlePtrInput interface {
	pulumi.Input

	ToGetPermissionTargetReleaseBundlePtrOutput() GetPermissionTargetReleaseBundlePtrOutput
	ToGetPermissionTargetReleaseBundlePtrOutputWithContext(context.Context) GetPermissionTargetReleaseBundlePtrOutput
}

type getPermissionTargetReleaseBundlePtrType GetPermissionTargetReleaseBundleArgs

func GetPermissionTargetReleaseBundlePtr(v *GetPermissionTargetReleaseBundleArgs) GetPermissionTargetReleaseBundlePtrInput {
	return (*getPermissionTargetReleaseBundlePtrType)(v)
}

func (*getPermissionTargetReleaseBundlePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetPermissionTargetReleaseBundle)(nil)).Elem()
}

func (i *getPermissionTargetReleaseBundlePtrType) ToGetPermissionTargetReleaseBundlePtrOutput() GetPermissionTargetReleaseBundlePtrOutput {
	return i.ToGetPermissionTargetReleaseBundlePtrOutputWithContext(context.Background())
}

func (i *getPermissionTargetReleaseBundlePtrType) ToGetPermissionTargetReleaseBundlePtrOutputWithContext(ctx context.Context) GetPermissionTargetReleaseBundlePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionTargetReleaseBundlePtrOutput)
}

type GetPermissionTargetReleaseBundleOutput struct{ *pulumi.OutputState }

func (GetPermissionTargetReleaseBundleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionTargetReleaseBundle)(nil)).Elem()
}

func (o GetPermissionTargetReleaseBundleOutput) ToGetPermissionTargetReleaseBundleOutput() GetPermissionTargetReleaseBundleOutput {
	return o
}

func (o GetPermissionTargetReleaseBundleOutput) ToGetPermissionTargetReleaseBundleOutputWithContext(ctx context.Context) GetPermissionTargetReleaseBundleOutput {
	return o
}

func (o GetPermissionTargetReleaseBundleOutput) ToGetPermissionTargetReleaseBundlePtrOutput() GetPermissionTargetReleaseBundlePtrOutput {
	return o.ToGetPermissionTargetReleaseBundlePtrOutputWithContext(context.Background())
}

func (o GetPermissionTargetReleaseBundleOutput) ToGetPermissionTargetReleaseBundlePtrOutputWithContext(ctx context.Context) GetPermissionTargetReleaseBundlePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetPermissionTargetReleaseBundle) *GetPermissionTargetReleaseBundle {
		return &v
	}).(GetPermissionTargetReleaseBundlePtrOutput)
}

func (o GetPermissionTargetReleaseBundleOutput) Actions() GetPermissionTargetReleaseBundleActionsPtrOutput {
	return o.ApplyT(func(v GetPermissionTargetReleaseBundle) *GetPermissionTargetReleaseBundleActions { return v.Actions }).(GetPermissionTargetReleaseBundleActionsPtrOutput)
}

// Pattern of artifacts to exclude.
func (o GetPermissionTargetReleaseBundleOutput) ExcludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPermissionTargetReleaseBundle) []string { return v.ExcludesPatterns }).(pulumi.StringArrayOutput)
}

// Pattern of artifacts to include.
func (o GetPermissionTargetReleaseBundleOutput) IncludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPermissionTargetReleaseBundle) []string { return v.IncludesPatterns }).(pulumi.StringArrayOutput)
}

// List of repositories this permission target is applicable for. You can specify the
// name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote
// repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
func (o GetPermissionTargetReleaseBundleOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPermissionTargetReleaseBundle) []string { return v.Repositories }).(pulumi.StringArrayOutput)
}

type GetPermissionTargetReleaseBundlePtrOutput struct{ *pulumi.OutputState }

func (GetPermissionTargetReleaseBundlePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetPermissionTargetReleaseBundle)(nil)).Elem()
}

func (o GetPermissionTargetReleaseBundlePtrOutput) ToGetPermissionTargetReleaseBundlePtrOutput() GetPermissionTargetReleaseBundlePtrOutput {
	return o
}

func (o GetPermissionTargetReleaseBundlePtrOutput) ToGetPermissionTargetReleaseBundlePtrOutputWithContext(ctx context.Context) GetPermissionTargetReleaseBundlePtrOutput {
	return o
}

func (o GetPermissionTargetReleaseBundlePtrOutput) Elem() GetPermissionTargetReleaseBundleOutput {
	return o.ApplyT(func(v *GetPermissionTargetReleaseBundle) GetPermissionTargetReleaseBundle {
		if v != nil {
			return *v
		}
		var ret GetPermissionTargetReleaseBundle
		return ret
	}).(GetPermissionTargetReleaseBundleOutput)
}

func (o GetPermissionTargetReleaseBundlePtrOutput) Actions() GetPermissionTargetReleaseBundleActionsPtrOutput {
	return o.ApplyT(func(v *GetPermissionTargetReleaseBundle) *GetPermissionTargetReleaseBundleActions {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(GetPermissionTargetReleaseBundleActionsPtrOutput)
}

// Pattern of artifacts to exclude.
func (o GetPermissionTargetReleaseBundlePtrOutput) ExcludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetPermissionTargetReleaseBundle) []string {
		if v == nil {
			return nil
		}
		return v.ExcludesPatterns
	}).(pulumi.StringArrayOutput)
}

// Pattern of artifacts to include.
func (o GetPermissionTargetReleaseBundlePtrOutput) IncludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetPermissionTargetReleaseBundle) []string {
		if v == nil {
			return nil
		}
		return v.IncludesPatterns
	}).(pulumi.StringArrayOutput)
}

// List of repositories this permission target is applicable for. You can specify the
// name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote
// repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
func (o GetPermissionTargetReleaseBundlePtrOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetPermissionTargetReleaseBundle) []string {
		if v == nil {
			return nil
		}
		return v.Repositories
	}).(pulumi.StringArrayOutput)
}

type GetPermissionTargetReleaseBundleActions struct {
	// Groups this permission applies for.
	Groups []GetPermissionTargetReleaseBundleActionsGroup `pulumi:"groups"`
	// Users this permission target applies for.
	Users []GetPermissionTargetReleaseBundleActionsUser `pulumi:"users"`
}

// GetPermissionTargetReleaseBundleActionsInput is an input type that accepts GetPermissionTargetReleaseBundleActionsArgs and GetPermissionTargetReleaseBundleActionsOutput values.
// You can construct a concrete instance of `GetPermissionTargetReleaseBundleActionsInput` via:
//
//	GetPermissionTargetReleaseBundleActionsArgs{...}
type GetPermissionTargetReleaseBundleActionsInput interface {
	pulumi.Input

	ToGetPermissionTargetReleaseBundleActionsOutput() GetPermissionTargetReleaseBundleActionsOutput
	ToGetPermissionTargetReleaseBundleActionsOutputWithContext(context.Context) GetPermissionTargetReleaseBundleActionsOutput
}

type GetPermissionTargetReleaseBundleActionsArgs struct {
	// Groups this permission applies for.
	Groups GetPermissionTargetReleaseBundleActionsGroupArrayInput `pulumi:"groups"`
	// Users this permission target applies for.
	Users GetPermissionTargetReleaseBundleActionsUserArrayInput `pulumi:"users"`
}

func (GetPermissionTargetReleaseBundleActionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionTargetReleaseBundleActions)(nil)).Elem()
}

func (i GetPermissionTargetReleaseBundleActionsArgs) ToGetPermissionTargetReleaseBundleActionsOutput() GetPermissionTargetReleaseBundleActionsOutput {
	return i.ToGetPermissionTargetReleaseBundleActionsOutputWithContext(context.Background())
}

func (i GetPermissionTargetReleaseBundleActionsArgs) ToGetPermissionTargetReleaseBundleActionsOutputWithContext(ctx context.Context) GetPermissionTargetReleaseBundleActionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionTargetReleaseBundleActionsOutput)
}

func (i GetPermissionTargetReleaseBundleActionsArgs) ToGetPermissionTargetReleaseBundleActionsPtrOutput() GetPermissionTargetReleaseBundleActionsPtrOutput {
	return i.ToGetPermissionTargetReleaseBundleActionsPtrOutputWithContext(context.Background())
}

func (i GetPermissionTargetReleaseBundleActionsArgs) ToGetPermissionTargetReleaseBundleActionsPtrOutputWithContext(ctx context.Context) GetPermissionTargetReleaseBundleActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionTargetReleaseBundleActionsOutput).ToGetPermissionTargetReleaseBundleActionsPtrOutputWithContext(ctx)
}

// GetPermissionTargetReleaseBundleActionsPtrInput is an input type that accepts GetPermissionTargetReleaseBundleActionsArgs, GetPermissionTargetReleaseBundleActionsPtr and GetPermissionTargetReleaseBundleActionsPtrOutput values.
// You can construct a concrete instance of `GetPermissionTargetReleaseBundleActionsPtrInput` via:
//
//	        GetPermissionTargetReleaseBundleActionsArgs{...}
//
//	or:
//
//	        nil
type GetPermissionTargetReleaseBundleActionsPtrInput interface {
	pulumi.Input

	ToGetPermissionTargetReleaseBundleActionsPtrOutput() GetPermissionTargetReleaseBundleActionsPtrOutput
	ToGetPermissionTargetReleaseBundleActionsPtrOutputWithContext(context.Context) GetPermissionTargetReleaseBundleActionsPtrOutput
}

type getPermissionTargetReleaseBundleActionsPtrType GetPermissionTargetReleaseBundleActionsArgs

func GetPermissionTargetReleaseBundleActionsPtr(v *GetPermissionTargetReleaseBundleActionsArgs) GetPermissionTargetReleaseBundleActionsPtrInput {
	return (*getPermissionTargetReleaseBundleActionsPtrType)(v)
}

func (*getPermissionTargetReleaseBundleActionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetPermissionTargetReleaseBundleActions)(nil)).Elem()
}

func (i *getPermissionTargetReleaseBundleActionsPtrType) ToGetPermissionTargetReleaseBundleActionsPtrOutput() GetPermissionTargetReleaseBundleActionsPtrOutput {
	return i.ToGetPermissionTargetReleaseBundleActionsPtrOutputWithContext(context.Background())
}

func (i *getPermissionTargetReleaseBundleActionsPtrType) ToGetPermissionTargetReleaseBundleActionsPtrOutputWithContext(ctx context.Context) GetPermissionTargetReleaseBundleActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionTargetReleaseBundleActionsPtrOutput)
}

type GetPermissionTargetReleaseBundleActionsOutput struct{ *pulumi.OutputState }

func (GetPermissionTargetReleaseBundleActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionTargetReleaseBundleActions)(nil)).Elem()
}

func (o GetPermissionTargetReleaseBundleActionsOutput) ToGetPermissionTargetReleaseBundleActionsOutput() GetPermissionTargetReleaseBundleActionsOutput {
	return o
}

func (o GetPermissionTargetReleaseBundleActionsOutput) ToGetPermissionTargetReleaseBundleActionsOutputWithContext(ctx context.Context) GetPermissionTargetReleaseBundleActionsOutput {
	return o
}

func (o GetPermissionTargetReleaseBundleActionsOutput) ToGetPermissionTargetReleaseBundleActionsPtrOutput() GetPermissionTargetReleaseBundleActionsPtrOutput {
	return o.ToGetPermissionTargetReleaseBundleActionsPtrOutputWithContext(context.Background())
}

func (o GetPermissionTargetReleaseBundleActionsOutput) ToGetPermissionTargetReleaseBundleActionsPtrOutputWithContext(ctx context.Context) GetPermissionTargetReleaseBundleActionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetPermissionTargetReleaseBundleActions) *GetPermissionTargetReleaseBundleActions {
		return &v
	}).(GetPermissionTargetReleaseBundleActionsPtrOutput)
}

// Groups this permission applies for.
func (o GetPermissionTargetReleaseBundleActionsOutput) Groups() GetPermissionTargetReleaseBundleActionsGroupArrayOutput {
	return o.ApplyT(func(v GetPermissionTargetReleaseBundleActions) []GetPermissionTargetReleaseBundleActionsGroup {
		return v.Groups
	}).(GetPermissionTargetReleaseBundleActionsGroupArrayOutput)
}

// Users this permission target applies for.
func (o GetPermissionTargetReleaseBundleActionsOutput) Users() GetPermissionTargetReleaseBundleActionsUserArrayOutput {
	return o.ApplyT(func(v GetPermissionTargetReleaseBundleActions) []GetPermissionTargetReleaseBundleActionsUser {
		return v.Users
	}).(GetPermissionTargetReleaseBundleActionsUserArrayOutput)
}

type GetPermissionTargetReleaseBundleActionsPtrOutput struct{ *pulumi.OutputState }

func (GetPermissionTargetReleaseBundleActionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetPermissionTargetReleaseBundleActions)(nil)).Elem()
}

func (o GetPermissionTargetReleaseBundleActionsPtrOutput) ToGetPermissionTargetReleaseBundleActionsPtrOutput() GetPermissionTargetReleaseBundleActionsPtrOutput {
	return o
}

func (o GetPermissionTargetReleaseBundleActionsPtrOutput) ToGetPermissionTargetReleaseBundleActionsPtrOutputWithContext(ctx context.Context) GetPermissionTargetReleaseBundleActionsPtrOutput {
	return o
}

func (o GetPermissionTargetReleaseBundleActionsPtrOutput) Elem() GetPermissionTargetReleaseBundleActionsOutput {
	return o.ApplyT(func(v *GetPermissionTargetReleaseBundleActions) GetPermissionTargetReleaseBundleActions {
		if v != nil {
			return *v
		}
		var ret GetPermissionTargetReleaseBundleActions
		return ret
	}).(GetPermissionTargetReleaseBundleActionsOutput)
}

// Groups this permission applies for.
func (o GetPermissionTargetReleaseBundleActionsPtrOutput) Groups() GetPermissionTargetReleaseBundleActionsGroupArrayOutput {
	return o.ApplyT(func(v *GetPermissionTargetReleaseBundleActions) []GetPermissionTargetReleaseBundleActionsGroup {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(GetPermissionTargetReleaseBundleActionsGroupArrayOutput)
}

// Users this permission target applies for.
func (o GetPermissionTargetReleaseBundleActionsPtrOutput) Users() GetPermissionTargetReleaseBundleActionsUserArrayOutput {
	return o.ApplyT(func(v *GetPermissionTargetReleaseBundleActions) []GetPermissionTargetReleaseBundleActionsUser {
		if v == nil {
			return nil
		}
		return v.Users
	}).(GetPermissionTargetReleaseBundleActionsUserArrayOutput)
}

type GetPermissionTargetReleaseBundleActionsGroup struct {
	// Name of the permission target.
	Name        string   `pulumi:"name"`
	Permissions []string `pulumi:"permissions"`
}

// GetPermissionTargetReleaseBundleActionsGroupInput is an input type that accepts GetPermissionTargetReleaseBundleActionsGroupArgs and GetPermissionTargetReleaseBundleActionsGroupOutput values.
// You can construct a concrete instance of `GetPermissionTargetReleaseBundleActionsGroupInput` via:
//
//	GetPermissionTargetReleaseBundleActionsGroupArgs{...}
type GetPermissionTargetReleaseBundleActionsGroupInput interface {
	pulumi.Input

	ToGetPermissionTargetReleaseBundleActionsGroupOutput() GetPermissionTargetReleaseBundleActionsGroupOutput
	ToGetPermissionTargetReleaseBundleActionsGroupOutputWithContext(context.Context) GetPermissionTargetReleaseBundleActionsGroupOutput
}

type GetPermissionTargetReleaseBundleActionsGroupArgs struct {
	// Name of the permission target.
	Name        pulumi.StringInput      `pulumi:"name"`
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (GetPermissionTargetReleaseBundleActionsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionTargetReleaseBundleActionsGroup)(nil)).Elem()
}

func (i GetPermissionTargetReleaseBundleActionsGroupArgs) ToGetPermissionTargetReleaseBundleActionsGroupOutput() GetPermissionTargetReleaseBundleActionsGroupOutput {
	return i.ToGetPermissionTargetReleaseBundleActionsGroupOutputWithContext(context.Background())
}

func (i GetPermissionTargetReleaseBundleActionsGroupArgs) ToGetPermissionTargetReleaseBundleActionsGroupOutputWithContext(ctx context.Context) GetPermissionTargetReleaseBundleActionsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionTargetReleaseBundleActionsGroupOutput)
}

// GetPermissionTargetReleaseBundleActionsGroupArrayInput is an input type that accepts GetPermissionTargetReleaseBundleActionsGroupArray and GetPermissionTargetReleaseBundleActionsGroupArrayOutput values.
// You can construct a concrete instance of `GetPermissionTargetReleaseBundleActionsGroupArrayInput` via:
//
//	GetPermissionTargetReleaseBundleActionsGroupArray{ GetPermissionTargetReleaseBundleActionsGroupArgs{...} }
type GetPermissionTargetReleaseBundleActionsGroupArrayInput interface {
	pulumi.Input

	ToGetPermissionTargetReleaseBundleActionsGroupArrayOutput() GetPermissionTargetReleaseBundleActionsGroupArrayOutput
	ToGetPermissionTargetReleaseBundleActionsGroupArrayOutputWithContext(context.Context) GetPermissionTargetReleaseBundleActionsGroupArrayOutput
}

type GetPermissionTargetReleaseBundleActionsGroupArray []GetPermissionTargetReleaseBundleActionsGroupInput

func (GetPermissionTargetReleaseBundleActionsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPermissionTargetReleaseBundleActionsGroup)(nil)).Elem()
}

func (i GetPermissionTargetReleaseBundleActionsGroupArray) ToGetPermissionTargetReleaseBundleActionsGroupArrayOutput() GetPermissionTargetReleaseBundleActionsGroupArrayOutput {
	return i.ToGetPermissionTargetReleaseBundleActionsGroupArrayOutputWithContext(context.Background())
}

func (i GetPermissionTargetReleaseBundleActionsGroupArray) ToGetPermissionTargetReleaseBundleActionsGroupArrayOutputWithContext(ctx context.Context) GetPermissionTargetReleaseBundleActionsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionTargetReleaseBundleActionsGroupArrayOutput)
}

type GetPermissionTargetReleaseBundleActionsGroupOutput struct{ *pulumi.OutputState }

func (GetPermissionTargetReleaseBundleActionsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionTargetReleaseBundleActionsGroup)(nil)).Elem()
}

func (o GetPermissionTargetReleaseBundleActionsGroupOutput) ToGetPermissionTargetReleaseBundleActionsGroupOutput() GetPermissionTargetReleaseBundleActionsGroupOutput {
	return o
}

func (o GetPermissionTargetReleaseBundleActionsGroupOutput) ToGetPermissionTargetReleaseBundleActionsGroupOutputWithContext(ctx context.Context) GetPermissionTargetReleaseBundleActionsGroupOutput {
	return o
}

// Name of the permission target.
func (o GetPermissionTargetReleaseBundleActionsGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPermissionTargetReleaseBundleActionsGroup) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetPermissionTargetReleaseBundleActionsGroupOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPermissionTargetReleaseBundleActionsGroup) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type GetPermissionTargetReleaseBundleActionsGroupArrayOutput struct{ *pulumi.OutputState }

func (GetPermissionTargetReleaseBundleActionsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPermissionTargetReleaseBundleActionsGroup)(nil)).Elem()
}

func (o GetPermissionTargetReleaseBundleActionsGroupArrayOutput) ToGetPermissionTargetReleaseBundleActionsGroupArrayOutput() GetPermissionTargetReleaseBundleActionsGroupArrayOutput {
	return o
}

func (o GetPermissionTargetReleaseBundleActionsGroupArrayOutput) ToGetPermissionTargetReleaseBundleActionsGroupArrayOutputWithContext(ctx context.Context) GetPermissionTargetReleaseBundleActionsGroupArrayOutput {
	return o
}

func (o GetPermissionTargetReleaseBundleActionsGroupArrayOutput) Index(i pulumi.IntInput) GetPermissionTargetReleaseBundleActionsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPermissionTargetReleaseBundleActionsGroup {
		return vs[0].([]GetPermissionTargetReleaseBundleActionsGroup)[vs[1].(int)]
	}).(GetPermissionTargetReleaseBundleActionsGroupOutput)
}

type GetPermissionTargetReleaseBundleActionsUser struct {
	// Name of the permission target.
	Name        string   `pulumi:"name"`
	Permissions []string `pulumi:"permissions"`
}

// GetPermissionTargetReleaseBundleActionsUserInput is an input type that accepts GetPermissionTargetReleaseBundleActionsUserArgs and GetPermissionTargetReleaseBundleActionsUserOutput values.
// You can construct a concrete instance of `GetPermissionTargetReleaseBundleActionsUserInput` via:
//
//	GetPermissionTargetReleaseBundleActionsUserArgs{...}
type GetPermissionTargetReleaseBundleActionsUserInput interface {
	pulumi.Input

	ToGetPermissionTargetReleaseBundleActionsUserOutput() GetPermissionTargetReleaseBundleActionsUserOutput
	ToGetPermissionTargetReleaseBundleActionsUserOutputWithContext(context.Context) GetPermissionTargetReleaseBundleActionsUserOutput
}

type GetPermissionTargetReleaseBundleActionsUserArgs struct {
	// Name of the permission target.
	Name        pulumi.StringInput      `pulumi:"name"`
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (GetPermissionTargetReleaseBundleActionsUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionTargetReleaseBundleActionsUser)(nil)).Elem()
}

func (i GetPermissionTargetReleaseBundleActionsUserArgs) ToGetPermissionTargetReleaseBundleActionsUserOutput() GetPermissionTargetReleaseBundleActionsUserOutput {
	return i.ToGetPermissionTargetReleaseBundleActionsUserOutputWithContext(context.Background())
}

func (i GetPermissionTargetReleaseBundleActionsUserArgs) ToGetPermissionTargetReleaseBundleActionsUserOutputWithContext(ctx context.Context) GetPermissionTargetReleaseBundleActionsUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionTargetReleaseBundleActionsUserOutput)
}

// GetPermissionTargetReleaseBundleActionsUserArrayInput is an input type that accepts GetPermissionTargetReleaseBundleActionsUserArray and GetPermissionTargetReleaseBundleActionsUserArrayOutput values.
// You can construct a concrete instance of `GetPermissionTargetReleaseBundleActionsUserArrayInput` via:
//
//	GetPermissionTargetReleaseBundleActionsUserArray{ GetPermissionTargetReleaseBundleActionsUserArgs{...} }
type GetPermissionTargetReleaseBundleActionsUserArrayInput interface {
	pulumi.Input

	ToGetPermissionTargetReleaseBundleActionsUserArrayOutput() GetPermissionTargetReleaseBundleActionsUserArrayOutput
	ToGetPermissionTargetReleaseBundleActionsUserArrayOutputWithContext(context.Context) GetPermissionTargetReleaseBundleActionsUserArrayOutput
}

type GetPermissionTargetReleaseBundleActionsUserArray []GetPermissionTargetReleaseBundleActionsUserInput

func (GetPermissionTargetReleaseBundleActionsUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPermissionTargetReleaseBundleActionsUser)(nil)).Elem()
}

func (i GetPermissionTargetReleaseBundleActionsUserArray) ToGetPermissionTargetReleaseBundleActionsUserArrayOutput() GetPermissionTargetReleaseBundleActionsUserArrayOutput {
	return i.ToGetPermissionTargetReleaseBundleActionsUserArrayOutputWithContext(context.Background())
}

func (i GetPermissionTargetReleaseBundleActionsUserArray) ToGetPermissionTargetReleaseBundleActionsUserArrayOutputWithContext(ctx context.Context) GetPermissionTargetReleaseBundleActionsUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionTargetReleaseBundleActionsUserArrayOutput)
}

type GetPermissionTargetReleaseBundleActionsUserOutput struct{ *pulumi.OutputState }

func (GetPermissionTargetReleaseBundleActionsUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionTargetReleaseBundleActionsUser)(nil)).Elem()
}

func (o GetPermissionTargetReleaseBundleActionsUserOutput) ToGetPermissionTargetReleaseBundleActionsUserOutput() GetPermissionTargetReleaseBundleActionsUserOutput {
	return o
}

func (o GetPermissionTargetReleaseBundleActionsUserOutput) ToGetPermissionTargetReleaseBundleActionsUserOutputWithContext(ctx context.Context) GetPermissionTargetReleaseBundleActionsUserOutput {
	return o
}

// Name of the permission target.
func (o GetPermissionTargetReleaseBundleActionsUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPermissionTargetReleaseBundleActionsUser) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetPermissionTargetReleaseBundleActionsUserOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPermissionTargetReleaseBundleActionsUser) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type GetPermissionTargetReleaseBundleActionsUserArrayOutput struct{ *pulumi.OutputState }

func (GetPermissionTargetReleaseBundleActionsUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPermissionTargetReleaseBundleActionsUser)(nil)).Elem()
}

func (o GetPermissionTargetReleaseBundleActionsUserArrayOutput) ToGetPermissionTargetReleaseBundleActionsUserArrayOutput() GetPermissionTargetReleaseBundleActionsUserArrayOutput {
	return o
}

func (o GetPermissionTargetReleaseBundleActionsUserArrayOutput) ToGetPermissionTargetReleaseBundleActionsUserArrayOutputWithContext(ctx context.Context) GetPermissionTargetReleaseBundleActionsUserArrayOutput {
	return o
}

func (o GetPermissionTargetReleaseBundleActionsUserArrayOutput) Index(i pulumi.IntInput) GetPermissionTargetReleaseBundleActionsUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPermissionTargetReleaseBundleActionsUser {
		return vs[0].([]GetPermissionTargetReleaseBundleActionsUser)[vs[1].(int)]
	}).(GetPermissionTargetReleaseBundleActionsUserOutput)
}

type GetPermissionTargetRepo struct {
	Actions *GetPermissionTargetRepoActions `pulumi:"actions"`
	// Pattern of artifacts to exclude.
	ExcludesPatterns []string `pulumi:"excludesPatterns"`
	// Pattern of artifacts to include.
	IncludesPatterns []string `pulumi:"includesPatterns"`
	// List of repositories this permission target is applicable for. You can specify the
	// name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote
	// repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
	Repositories []string `pulumi:"repositories"`
}

// GetPermissionTargetRepoInput is an input type that accepts GetPermissionTargetRepoArgs and GetPermissionTargetRepoOutput values.
// You can construct a concrete instance of `GetPermissionTargetRepoInput` via:
//
//	GetPermissionTargetRepoArgs{...}
type GetPermissionTargetRepoInput interface {
	pulumi.Input

	ToGetPermissionTargetRepoOutput() GetPermissionTargetRepoOutput
	ToGetPermissionTargetRepoOutputWithContext(context.Context) GetPermissionTargetRepoOutput
}

type GetPermissionTargetRepoArgs struct {
	Actions GetPermissionTargetRepoActionsPtrInput `pulumi:"actions"`
	// Pattern of artifacts to exclude.
	ExcludesPatterns pulumi.StringArrayInput `pulumi:"excludesPatterns"`
	// Pattern of artifacts to include.
	IncludesPatterns pulumi.StringArrayInput `pulumi:"includesPatterns"`
	// List of repositories this permission target is applicable for. You can specify the
	// name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote
	// repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
	Repositories pulumi.StringArrayInput `pulumi:"repositories"`
}

func (GetPermissionTargetRepoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionTargetRepo)(nil)).Elem()
}

func (i GetPermissionTargetRepoArgs) ToGetPermissionTargetRepoOutput() GetPermissionTargetRepoOutput {
	return i.ToGetPermissionTargetRepoOutputWithContext(context.Background())
}

func (i GetPermissionTargetRepoArgs) ToGetPermissionTargetRepoOutputWithContext(ctx context.Context) GetPermissionTargetRepoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionTargetRepoOutput)
}

func (i GetPermissionTargetRepoArgs) ToGetPermissionTargetRepoPtrOutput() GetPermissionTargetRepoPtrOutput {
	return i.ToGetPermissionTargetRepoPtrOutputWithContext(context.Background())
}

func (i GetPermissionTargetRepoArgs) ToGetPermissionTargetRepoPtrOutputWithContext(ctx context.Context) GetPermissionTargetRepoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionTargetRepoOutput).ToGetPermissionTargetRepoPtrOutputWithContext(ctx)
}

// GetPermissionTargetRepoPtrInput is an input type that accepts GetPermissionTargetRepoArgs, GetPermissionTargetRepoPtr and GetPermissionTargetRepoPtrOutput values.
// You can construct a concrete instance of `GetPermissionTargetRepoPtrInput` via:
//
//	        GetPermissionTargetRepoArgs{...}
//
//	or:
//
//	        nil
type GetPermissionTargetRepoPtrInput interface {
	pulumi.Input

	ToGetPermissionTargetRepoPtrOutput() GetPermissionTargetRepoPtrOutput
	ToGetPermissionTargetRepoPtrOutputWithContext(context.Context) GetPermissionTargetRepoPtrOutput
}

type getPermissionTargetRepoPtrType GetPermissionTargetRepoArgs

func GetPermissionTargetRepoPtr(v *GetPermissionTargetRepoArgs) GetPermissionTargetRepoPtrInput {
	return (*getPermissionTargetRepoPtrType)(v)
}

func (*getPermissionTargetRepoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetPermissionTargetRepo)(nil)).Elem()
}

func (i *getPermissionTargetRepoPtrType) ToGetPermissionTargetRepoPtrOutput() GetPermissionTargetRepoPtrOutput {
	return i.ToGetPermissionTargetRepoPtrOutputWithContext(context.Background())
}

func (i *getPermissionTargetRepoPtrType) ToGetPermissionTargetRepoPtrOutputWithContext(ctx context.Context) GetPermissionTargetRepoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionTargetRepoPtrOutput)
}

type GetPermissionTargetRepoOutput struct{ *pulumi.OutputState }

func (GetPermissionTargetRepoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionTargetRepo)(nil)).Elem()
}

func (o GetPermissionTargetRepoOutput) ToGetPermissionTargetRepoOutput() GetPermissionTargetRepoOutput {
	return o
}

func (o GetPermissionTargetRepoOutput) ToGetPermissionTargetRepoOutputWithContext(ctx context.Context) GetPermissionTargetRepoOutput {
	return o
}

func (o GetPermissionTargetRepoOutput) ToGetPermissionTargetRepoPtrOutput() GetPermissionTargetRepoPtrOutput {
	return o.ToGetPermissionTargetRepoPtrOutputWithContext(context.Background())
}

func (o GetPermissionTargetRepoOutput) ToGetPermissionTargetRepoPtrOutputWithContext(ctx context.Context) GetPermissionTargetRepoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetPermissionTargetRepo) *GetPermissionTargetRepo {
		return &v
	}).(GetPermissionTargetRepoPtrOutput)
}

func (o GetPermissionTargetRepoOutput) Actions() GetPermissionTargetRepoActionsPtrOutput {
	return o.ApplyT(func(v GetPermissionTargetRepo) *GetPermissionTargetRepoActions { return v.Actions }).(GetPermissionTargetRepoActionsPtrOutput)
}

// Pattern of artifacts to exclude.
func (o GetPermissionTargetRepoOutput) ExcludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPermissionTargetRepo) []string { return v.ExcludesPatterns }).(pulumi.StringArrayOutput)
}

// Pattern of artifacts to include.
func (o GetPermissionTargetRepoOutput) IncludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPermissionTargetRepo) []string { return v.IncludesPatterns }).(pulumi.StringArrayOutput)
}

// List of repositories this permission target is applicable for. You can specify the
// name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote
// repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
func (o GetPermissionTargetRepoOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPermissionTargetRepo) []string { return v.Repositories }).(pulumi.StringArrayOutput)
}

type GetPermissionTargetRepoPtrOutput struct{ *pulumi.OutputState }

func (GetPermissionTargetRepoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetPermissionTargetRepo)(nil)).Elem()
}

func (o GetPermissionTargetRepoPtrOutput) ToGetPermissionTargetRepoPtrOutput() GetPermissionTargetRepoPtrOutput {
	return o
}

func (o GetPermissionTargetRepoPtrOutput) ToGetPermissionTargetRepoPtrOutputWithContext(ctx context.Context) GetPermissionTargetRepoPtrOutput {
	return o
}

func (o GetPermissionTargetRepoPtrOutput) Elem() GetPermissionTargetRepoOutput {
	return o.ApplyT(func(v *GetPermissionTargetRepo) GetPermissionTargetRepo {
		if v != nil {
			return *v
		}
		var ret GetPermissionTargetRepo
		return ret
	}).(GetPermissionTargetRepoOutput)
}

func (o GetPermissionTargetRepoPtrOutput) Actions() GetPermissionTargetRepoActionsPtrOutput {
	return o.ApplyT(func(v *GetPermissionTargetRepo) *GetPermissionTargetRepoActions {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(GetPermissionTargetRepoActionsPtrOutput)
}

// Pattern of artifacts to exclude.
func (o GetPermissionTargetRepoPtrOutput) ExcludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetPermissionTargetRepo) []string {
		if v == nil {
			return nil
		}
		return v.ExcludesPatterns
	}).(pulumi.StringArrayOutput)
}

// Pattern of artifacts to include.
func (o GetPermissionTargetRepoPtrOutput) IncludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetPermissionTargetRepo) []string {
		if v == nil {
			return nil
		}
		return v.IncludesPatterns
	}).(pulumi.StringArrayOutput)
}

// List of repositories this permission target is applicable for. You can specify the
// name `ANY` in the repositories section in order to apply to all repositories, `ANY REMOTE` for all remote
// repositories and `ANY LOCAL` for all local repositories. The default value will be `[]` if nothing is specified.
func (o GetPermissionTargetRepoPtrOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetPermissionTargetRepo) []string {
		if v == nil {
			return nil
		}
		return v.Repositories
	}).(pulumi.StringArrayOutput)
}

type GetPermissionTargetRepoActions struct {
	// Groups this permission applies for.
	Groups []GetPermissionTargetRepoActionsGroup `pulumi:"groups"`
	// Users this permission target applies for.
	Users []GetPermissionTargetRepoActionsUser `pulumi:"users"`
}

// GetPermissionTargetRepoActionsInput is an input type that accepts GetPermissionTargetRepoActionsArgs and GetPermissionTargetRepoActionsOutput values.
// You can construct a concrete instance of `GetPermissionTargetRepoActionsInput` via:
//
//	GetPermissionTargetRepoActionsArgs{...}
type GetPermissionTargetRepoActionsInput interface {
	pulumi.Input

	ToGetPermissionTargetRepoActionsOutput() GetPermissionTargetRepoActionsOutput
	ToGetPermissionTargetRepoActionsOutputWithContext(context.Context) GetPermissionTargetRepoActionsOutput
}

type GetPermissionTargetRepoActionsArgs struct {
	// Groups this permission applies for.
	Groups GetPermissionTargetRepoActionsGroupArrayInput `pulumi:"groups"`
	// Users this permission target applies for.
	Users GetPermissionTargetRepoActionsUserArrayInput `pulumi:"users"`
}

func (GetPermissionTargetRepoActionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionTargetRepoActions)(nil)).Elem()
}

func (i GetPermissionTargetRepoActionsArgs) ToGetPermissionTargetRepoActionsOutput() GetPermissionTargetRepoActionsOutput {
	return i.ToGetPermissionTargetRepoActionsOutputWithContext(context.Background())
}

func (i GetPermissionTargetRepoActionsArgs) ToGetPermissionTargetRepoActionsOutputWithContext(ctx context.Context) GetPermissionTargetRepoActionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionTargetRepoActionsOutput)
}

func (i GetPermissionTargetRepoActionsArgs) ToGetPermissionTargetRepoActionsPtrOutput() GetPermissionTargetRepoActionsPtrOutput {
	return i.ToGetPermissionTargetRepoActionsPtrOutputWithContext(context.Background())
}

func (i GetPermissionTargetRepoActionsArgs) ToGetPermissionTargetRepoActionsPtrOutputWithContext(ctx context.Context) GetPermissionTargetRepoActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionTargetRepoActionsOutput).ToGetPermissionTargetRepoActionsPtrOutputWithContext(ctx)
}

// GetPermissionTargetRepoActionsPtrInput is an input type that accepts GetPermissionTargetRepoActionsArgs, GetPermissionTargetRepoActionsPtr and GetPermissionTargetRepoActionsPtrOutput values.
// You can construct a concrete instance of `GetPermissionTargetRepoActionsPtrInput` via:
//
//	        GetPermissionTargetRepoActionsArgs{...}
//
//	or:
//
//	        nil
type GetPermissionTargetRepoActionsPtrInput interface {
	pulumi.Input

	ToGetPermissionTargetRepoActionsPtrOutput() GetPermissionTargetRepoActionsPtrOutput
	ToGetPermissionTargetRepoActionsPtrOutputWithContext(context.Context) GetPermissionTargetRepoActionsPtrOutput
}

type getPermissionTargetRepoActionsPtrType GetPermissionTargetRepoActionsArgs

func GetPermissionTargetRepoActionsPtr(v *GetPermissionTargetRepoActionsArgs) GetPermissionTargetRepoActionsPtrInput {
	return (*getPermissionTargetRepoActionsPtrType)(v)
}

func (*getPermissionTargetRepoActionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetPermissionTargetRepoActions)(nil)).Elem()
}

func (i *getPermissionTargetRepoActionsPtrType) ToGetPermissionTargetRepoActionsPtrOutput() GetPermissionTargetRepoActionsPtrOutput {
	return i.ToGetPermissionTargetRepoActionsPtrOutputWithContext(context.Background())
}

func (i *getPermissionTargetRepoActionsPtrType) ToGetPermissionTargetRepoActionsPtrOutputWithContext(ctx context.Context) GetPermissionTargetRepoActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionTargetRepoActionsPtrOutput)
}

type GetPermissionTargetRepoActionsOutput struct{ *pulumi.OutputState }

func (GetPermissionTargetRepoActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionTargetRepoActions)(nil)).Elem()
}

func (o GetPermissionTargetRepoActionsOutput) ToGetPermissionTargetRepoActionsOutput() GetPermissionTargetRepoActionsOutput {
	return o
}

func (o GetPermissionTargetRepoActionsOutput) ToGetPermissionTargetRepoActionsOutputWithContext(ctx context.Context) GetPermissionTargetRepoActionsOutput {
	return o
}

func (o GetPermissionTargetRepoActionsOutput) ToGetPermissionTargetRepoActionsPtrOutput() GetPermissionTargetRepoActionsPtrOutput {
	return o.ToGetPermissionTargetRepoActionsPtrOutputWithContext(context.Background())
}

func (o GetPermissionTargetRepoActionsOutput) ToGetPermissionTargetRepoActionsPtrOutputWithContext(ctx context.Context) GetPermissionTargetRepoActionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetPermissionTargetRepoActions) *GetPermissionTargetRepoActions {
		return &v
	}).(GetPermissionTargetRepoActionsPtrOutput)
}

// Groups this permission applies for.
func (o GetPermissionTargetRepoActionsOutput) Groups() GetPermissionTargetRepoActionsGroupArrayOutput {
	return o.ApplyT(func(v GetPermissionTargetRepoActions) []GetPermissionTargetRepoActionsGroup { return v.Groups }).(GetPermissionTargetRepoActionsGroupArrayOutput)
}

// Users this permission target applies for.
func (o GetPermissionTargetRepoActionsOutput) Users() GetPermissionTargetRepoActionsUserArrayOutput {
	return o.ApplyT(func(v GetPermissionTargetRepoActions) []GetPermissionTargetRepoActionsUser { return v.Users }).(GetPermissionTargetRepoActionsUserArrayOutput)
}

type GetPermissionTargetRepoActionsPtrOutput struct{ *pulumi.OutputState }

func (GetPermissionTargetRepoActionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetPermissionTargetRepoActions)(nil)).Elem()
}

func (o GetPermissionTargetRepoActionsPtrOutput) ToGetPermissionTargetRepoActionsPtrOutput() GetPermissionTargetRepoActionsPtrOutput {
	return o
}

func (o GetPermissionTargetRepoActionsPtrOutput) ToGetPermissionTargetRepoActionsPtrOutputWithContext(ctx context.Context) GetPermissionTargetRepoActionsPtrOutput {
	return o
}

func (o GetPermissionTargetRepoActionsPtrOutput) Elem() GetPermissionTargetRepoActionsOutput {
	return o.ApplyT(func(v *GetPermissionTargetRepoActions) GetPermissionTargetRepoActions {
		if v != nil {
			return *v
		}
		var ret GetPermissionTargetRepoActions
		return ret
	}).(GetPermissionTargetRepoActionsOutput)
}

// Groups this permission applies for.
func (o GetPermissionTargetRepoActionsPtrOutput) Groups() GetPermissionTargetRepoActionsGroupArrayOutput {
	return o.ApplyT(func(v *GetPermissionTargetRepoActions) []GetPermissionTargetRepoActionsGroup {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(GetPermissionTargetRepoActionsGroupArrayOutput)
}

// Users this permission target applies for.
func (o GetPermissionTargetRepoActionsPtrOutput) Users() GetPermissionTargetRepoActionsUserArrayOutput {
	return o.ApplyT(func(v *GetPermissionTargetRepoActions) []GetPermissionTargetRepoActionsUser {
		if v == nil {
			return nil
		}
		return v.Users
	}).(GetPermissionTargetRepoActionsUserArrayOutput)
}

type GetPermissionTargetRepoActionsGroup struct {
	// Name of the permission target.
	Name        string   `pulumi:"name"`
	Permissions []string `pulumi:"permissions"`
}

// GetPermissionTargetRepoActionsGroupInput is an input type that accepts GetPermissionTargetRepoActionsGroupArgs and GetPermissionTargetRepoActionsGroupOutput values.
// You can construct a concrete instance of `GetPermissionTargetRepoActionsGroupInput` via:
//
//	GetPermissionTargetRepoActionsGroupArgs{...}
type GetPermissionTargetRepoActionsGroupInput interface {
	pulumi.Input

	ToGetPermissionTargetRepoActionsGroupOutput() GetPermissionTargetRepoActionsGroupOutput
	ToGetPermissionTargetRepoActionsGroupOutputWithContext(context.Context) GetPermissionTargetRepoActionsGroupOutput
}

type GetPermissionTargetRepoActionsGroupArgs struct {
	// Name of the permission target.
	Name        pulumi.StringInput      `pulumi:"name"`
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (GetPermissionTargetRepoActionsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionTargetRepoActionsGroup)(nil)).Elem()
}

func (i GetPermissionTargetRepoActionsGroupArgs) ToGetPermissionTargetRepoActionsGroupOutput() GetPermissionTargetRepoActionsGroupOutput {
	return i.ToGetPermissionTargetRepoActionsGroupOutputWithContext(context.Background())
}

func (i GetPermissionTargetRepoActionsGroupArgs) ToGetPermissionTargetRepoActionsGroupOutputWithContext(ctx context.Context) GetPermissionTargetRepoActionsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionTargetRepoActionsGroupOutput)
}

// GetPermissionTargetRepoActionsGroupArrayInput is an input type that accepts GetPermissionTargetRepoActionsGroupArray and GetPermissionTargetRepoActionsGroupArrayOutput values.
// You can construct a concrete instance of `GetPermissionTargetRepoActionsGroupArrayInput` via:
//
//	GetPermissionTargetRepoActionsGroupArray{ GetPermissionTargetRepoActionsGroupArgs{...} }
type GetPermissionTargetRepoActionsGroupArrayInput interface {
	pulumi.Input

	ToGetPermissionTargetRepoActionsGroupArrayOutput() GetPermissionTargetRepoActionsGroupArrayOutput
	ToGetPermissionTargetRepoActionsGroupArrayOutputWithContext(context.Context) GetPermissionTargetRepoActionsGroupArrayOutput
}

type GetPermissionTargetRepoActionsGroupArray []GetPermissionTargetRepoActionsGroupInput

func (GetPermissionTargetRepoActionsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPermissionTargetRepoActionsGroup)(nil)).Elem()
}

func (i GetPermissionTargetRepoActionsGroupArray) ToGetPermissionTargetRepoActionsGroupArrayOutput() GetPermissionTargetRepoActionsGroupArrayOutput {
	return i.ToGetPermissionTargetRepoActionsGroupArrayOutputWithContext(context.Background())
}

func (i GetPermissionTargetRepoActionsGroupArray) ToGetPermissionTargetRepoActionsGroupArrayOutputWithContext(ctx context.Context) GetPermissionTargetRepoActionsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionTargetRepoActionsGroupArrayOutput)
}

type GetPermissionTargetRepoActionsGroupOutput struct{ *pulumi.OutputState }

func (GetPermissionTargetRepoActionsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionTargetRepoActionsGroup)(nil)).Elem()
}

func (o GetPermissionTargetRepoActionsGroupOutput) ToGetPermissionTargetRepoActionsGroupOutput() GetPermissionTargetRepoActionsGroupOutput {
	return o
}

func (o GetPermissionTargetRepoActionsGroupOutput) ToGetPermissionTargetRepoActionsGroupOutputWithContext(ctx context.Context) GetPermissionTargetRepoActionsGroupOutput {
	return o
}

// Name of the permission target.
func (o GetPermissionTargetRepoActionsGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPermissionTargetRepoActionsGroup) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetPermissionTargetRepoActionsGroupOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPermissionTargetRepoActionsGroup) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type GetPermissionTargetRepoActionsGroupArrayOutput struct{ *pulumi.OutputState }

func (GetPermissionTargetRepoActionsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPermissionTargetRepoActionsGroup)(nil)).Elem()
}

func (o GetPermissionTargetRepoActionsGroupArrayOutput) ToGetPermissionTargetRepoActionsGroupArrayOutput() GetPermissionTargetRepoActionsGroupArrayOutput {
	return o
}

func (o GetPermissionTargetRepoActionsGroupArrayOutput) ToGetPermissionTargetRepoActionsGroupArrayOutputWithContext(ctx context.Context) GetPermissionTargetRepoActionsGroupArrayOutput {
	return o
}

func (o GetPermissionTargetRepoActionsGroupArrayOutput) Index(i pulumi.IntInput) GetPermissionTargetRepoActionsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPermissionTargetRepoActionsGroup {
		return vs[0].([]GetPermissionTargetRepoActionsGroup)[vs[1].(int)]
	}).(GetPermissionTargetRepoActionsGroupOutput)
}

type GetPermissionTargetRepoActionsUser struct {
	// Name of the permission target.
	Name        string   `pulumi:"name"`
	Permissions []string `pulumi:"permissions"`
}

// GetPermissionTargetRepoActionsUserInput is an input type that accepts GetPermissionTargetRepoActionsUserArgs and GetPermissionTargetRepoActionsUserOutput values.
// You can construct a concrete instance of `GetPermissionTargetRepoActionsUserInput` via:
//
//	GetPermissionTargetRepoActionsUserArgs{...}
type GetPermissionTargetRepoActionsUserInput interface {
	pulumi.Input

	ToGetPermissionTargetRepoActionsUserOutput() GetPermissionTargetRepoActionsUserOutput
	ToGetPermissionTargetRepoActionsUserOutputWithContext(context.Context) GetPermissionTargetRepoActionsUserOutput
}

type GetPermissionTargetRepoActionsUserArgs struct {
	// Name of the permission target.
	Name        pulumi.StringInput      `pulumi:"name"`
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (GetPermissionTargetRepoActionsUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionTargetRepoActionsUser)(nil)).Elem()
}

func (i GetPermissionTargetRepoActionsUserArgs) ToGetPermissionTargetRepoActionsUserOutput() GetPermissionTargetRepoActionsUserOutput {
	return i.ToGetPermissionTargetRepoActionsUserOutputWithContext(context.Background())
}

func (i GetPermissionTargetRepoActionsUserArgs) ToGetPermissionTargetRepoActionsUserOutputWithContext(ctx context.Context) GetPermissionTargetRepoActionsUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionTargetRepoActionsUserOutput)
}

// GetPermissionTargetRepoActionsUserArrayInput is an input type that accepts GetPermissionTargetRepoActionsUserArray and GetPermissionTargetRepoActionsUserArrayOutput values.
// You can construct a concrete instance of `GetPermissionTargetRepoActionsUserArrayInput` via:
//
//	GetPermissionTargetRepoActionsUserArray{ GetPermissionTargetRepoActionsUserArgs{...} }
type GetPermissionTargetRepoActionsUserArrayInput interface {
	pulumi.Input

	ToGetPermissionTargetRepoActionsUserArrayOutput() GetPermissionTargetRepoActionsUserArrayOutput
	ToGetPermissionTargetRepoActionsUserArrayOutputWithContext(context.Context) GetPermissionTargetRepoActionsUserArrayOutput
}

type GetPermissionTargetRepoActionsUserArray []GetPermissionTargetRepoActionsUserInput

func (GetPermissionTargetRepoActionsUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPermissionTargetRepoActionsUser)(nil)).Elem()
}

func (i GetPermissionTargetRepoActionsUserArray) ToGetPermissionTargetRepoActionsUserArrayOutput() GetPermissionTargetRepoActionsUserArrayOutput {
	return i.ToGetPermissionTargetRepoActionsUserArrayOutputWithContext(context.Background())
}

func (i GetPermissionTargetRepoActionsUserArray) ToGetPermissionTargetRepoActionsUserArrayOutputWithContext(ctx context.Context) GetPermissionTargetRepoActionsUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionTargetRepoActionsUserArrayOutput)
}

type GetPermissionTargetRepoActionsUserOutput struct{ *pulumi.OutputState }

func (GetPermissionTargetRepoActionsUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionTargetRepoActionsUser)(nil)).Elem()
}

func (o GetPermissionTargetRepoActionsUserOutput) ToGetPermissionTargetRepoActionsUserOutput() GetPermissionTargetRepoActionsUserOutput {
	return o
}

func (o GetPermissionTargetRepoActionsUserOutput) ToGetPermissionTargetRepoActionsUserOutputWithContext(ctx context.Context) GetPermissionTargetRepoActionsUserOutput {
	return o
}

// Name of the permission target.
func (o GetPermissionTargetRepoActionsUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPermissionTargetRepoActionsUser) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetPermissionTargetRepoActionsUserOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPermissionTargetRepoActionsUser) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type GetPermissionTargetRepoActionsUserArrayOutput struct{ *pulumi.OutputState }

func (GetPermissionTargetRepoActionsUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPermissionTargetRepoActionsUser)(nil)).Elem()
}

func (o GetPermissionTargetRepoActionsUserArrayOutput) ToGetPermissionTargetRepoActionsUserArrayOutput() GetPermissionTargetRepoActionsUserArrayOutput {
	return o
}

func (o GetPermissionTargetRepoActionsUserArrayOutput) ToGetPermissionTargetRepoActionsUserArrayOutputWithContext(ctx context.Context) GetPermissionTargetRepoActionsUserArrayOutput {
	return o
}

func (o GetPermissionTargetRepoActionsUserArrayOutput) Index(i pulumi.IntInput) GetPermissionTargetRepoActionsUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPermissionTargetRepoActionsUser {
		return vs[0].([]GetPermissionTargetRepoActionsUser)[vs[1].(int)]
	}).(GetPermissionTargetRepoActionsUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessTokenAdminTokenInput)(nil)).Elem(), AccessTokenAdminTokenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessTokenAdminTokenPtrInput)(nil)).Elem(), AccessTokenAdminTokenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactPropertyWebhookCriteriaInput)(nil)).Elem(), ArtifactPropertyWebhookCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactPropertyWebhookCriteriaPtrInput)(nil)).Elem(), ArtifactPropertyWebhookCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactPropertyWebhookHandlerInput)(nil)).Elem(), ArtifactPropertyWebhookHandlerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactPropertyWebhookHandlerArrayInput)(nil)).Elem(), ArtifactPropertyWebhookHandlerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactWebhookCriteriaInput)(nil)).Elem(), ArtifactWebhookCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactWebhookCriteriaPtrInput)(nil)).Elem(), ArtifactWebhookCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactWebhookHandlerInput)(nil)).Elem(), ArtifactWebhookHandlerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactWebhookHandlerArrayInput)(nil)).Elem(), ArtifactWebhookHandlerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactoryReleaseBundleWebhookCriteriaInput)(nil)).Elem(), ArtifactoryReleaseBundleWebhookCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactoryReleaseBundleWebhookCriteriaPtrInput)(nil)).Elem(), ArtifactoryReleaseBundleWebhookCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactoryReleaseBundleWebhookHandlerInput)(nil)).Elem(), ArtifactoryReleaseBundleWebhookHandlerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactoryReleaseBundleWebhookHandlerArrayInput)(nil)).Elem(), ArtifactoryReleaseBundleWebhookHandlerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildWebhookCriteriaInput)(nil)).Elem(), BuildWebhookCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildWebhookCriteriaPtrInput)(nil)).Elem(), BuildWebhookCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildWebhookHandlerInput)(nil)).Elem(), BuildWebhookHandlerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildWebhookHandlerArrayInput)(nil)).Elem(), BuildWebhookHandlerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionWebhookCriteriaInput)(nil)).Elem(), DistributionWebhookCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionWebhookCriteriaPtrInput)(nil)).Elem(), DistributionWebhookCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionWebhookHandlerInput)(nil)).Elem(), DistributionWebhookHandlerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionWebhookHandlerArrayInput)(nil)).Elem(), DistributionWebhookHandlerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DockerWebhookCriteriaInput)(nil)).Elem(), DockerWebhookCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DockerWebhookCriteriaPtrInput)(nil)).Elem(), DockerWebhookCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DockerWebhookHandlerInput)(nil)).Elem(), DockerWebhookHandlerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DockerWebhookHandlerArrayInput)(nil)).Elem(), DockerWebhookHandlerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedAlpineRepositoryMemberInput)(nil)).Elem(), FederatedAlpineRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedAlpineRepositoryMemberArrayInput)(nil)).Elem(), FederatedAlpineRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedBowerRepositoryMemberInput)(nil)).Elem(), FederatedBowerRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedBowerRepositoryMemberArrayInput)(nil)).Elem(), FederatedBowerRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedCargoRepositoryMemberInput)(nil)).Elem(), FederatedCargoRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedCargoRepositoryMemberArrayInput)(nil)).Elem(), FederatedCargoRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedChefRepositoryMemberInput)(nil)).Elem(), FederatedChefRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedChefRepositoryMemberArrayInput)(nil)).Elem(), FederatedChefRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedCocoapodsRepositoryMemberInput)(nil)).Elem(), FederatedCocoapodsRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedCocoapodsRepositoryMemberArrayInput)(nil)).Elem(), FederatedCocoapodsRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedComposerRepositoryMemberInput)(nil)).Elem(), FederatedComposerRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedComposerRepositoryMemberArrayInput)(nil)).Elem(), FederatedComposerRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedConanRepositoryMemberInput)(nil)).Elem(), FederatedConanRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedConanRepositoryMemberArrayInput)(nil)).Elem(), FederatedConanRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedCondaRepositoryMemberInput)(nil)).Elem(), FederatedCondaRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedCondaRepositoryMemberArrayInput)(nil)).Elem(), FederatedCondaRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedCranRepositoryMemberInput)(nil)).Elem(), FederatedCranRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedCranRepositoryMemberArrayInput)(nil)).Elem(), FederatedCranRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedDebianRepositoryMemberInput)(nil)).Elem(), FederatedDebianRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedDebianRepositoryMemberArrayInput)(nil)).Elem(), FederatedDebianRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedDockerRepositoryMemberInput)(nil)).Elem(), FederatedDockerRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedDockerRepositoryMemberArrayInput)(nil)).Elem(), FederatedDockerRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedDockerV1RepositoryMemberInput)(nil)).Elem(), FederatedDockerV1RepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedDockerV1RepositoryMemberArrayInput)(nil)).Elem(), FederatedDockerV1RepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedDockerV2RepositoryMemberInput)(nil)).Elem(), FederatedDockerV2RepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedDockerV2RepositoryMemberArrayInput)(nil)).Elem(), FederatedDockerV2RepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedGemsRepositoryMemberInput)(nil)).Elem(), FederatedGemsRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedGemsRepositoryMemberArrayInput)(nil)).Elem(), FederatedGemsRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedGenericRepositoryMemberInput)(nil)).Elem(), FederatedGenericRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedGenericRepositoryMemberArrayInput)(nil)).Elem(), FederatedGenericRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedGitltfsRepositoryMemberInput)(nil)).Elem(), FederatedGitltfsRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedGitltfsRepositoryMemberArrayInput)(nil)).Elem(), FederatedGitltfsRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedGoRepositoryMemberInput)(nil)).Elem(), FederatedGoRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedGoRepositoryMemberArrayInput)(nil)).Elem(), FederatedGoRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedGradleRepositoryMemberInput)(nil)).Elem(), FederatedGradleRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedGradleRepositoryMemberArrayInput)(nil)).Elem(), FederatedGradleRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedHelmRepositoryMemberInput)(nil)).Elem(), FederatedHelmRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedHelmRepositoryMemberArrayInput)(nil)).Elem(), FederatedHelmRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedIvyRepositoryMemberInput)(nil)).Elem(), FederatedIvyRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedIvyRepositoryMemberArrayInput)(nil)).Elem(), FederatedIvyRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedMavenRepositoryMemberInput)(nil)).Elem(), FederatedMavenRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedMavenRepositoryMemberArrayInput)(nil)).Elem(), FederatedMavenRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedNpmRepositoryMemberInput)(nil)).Elem(), FederatedNpmRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedNpmRepositoryMemberArrayInput)(nil)).Elem(), FederatedNpmRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedNugetRepositoryMemberInput)(nil)).Elem(), FederatedNugetRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedNugetRepositoryMemberArrayInput)(nil)).Elem(), FederatedNugetRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedOpkgRepositoryMemberInput)(nil)).Elem(), FederatedOpkgRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedOpkgRepositoryMemberArrayInput)(nil)).Elem(), FederatedOpkgRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedPuppetRepositoryMemberInput)(nil)).Elem(), FederatedPuppetRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedPuppetRepositoryMemberArrayInput)(nil)).Elem(), FederatedPuppetRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedPypiRepositoryMemberInput)(nil)).Elem(), FederatedPypiRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedPypiRepositoryMemberArrayInput)(nil)).Elem(), FederatedPypiRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedRpmRepositoryMemberInput)(nil)).Elem(), FederatedRpmRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedRpmRepositoryMemberArrayInput)(nil)).Elem(), FederatedRpmRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedSbtRepositoryMemberInput)(nil)).Elem(), FederatedSbtRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedSbtRepositoryMemberArrayInput)(nil)).Elem(), FederatedSbtRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedSwiftRepositoryMemberInput)(nil)).Elem(), FederatedSwiftRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedSwiftRepositoryMemberArrayInput)(nil)).Elem(), FederatedSwiftRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedTerraformModuleRepositoryMemberInput)(nil)).Elem(), FederatedTerraformModuleRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedTerraformModuleRepositoryMemberArrayInput)(nil)).Elem(), FederatedTerraformModuleRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedTerraformProviderRepositoryMemberInput)(nil)).Elem(), FederatedTerraformProviderRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedTerraformProviderRepositoryMemberArrayInput)(nil)).Elem(), FederatedTerraformProviderRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedVagrantRepositoryMemberInput)(nil)).Elem(), FederatedVagrantRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedVagrantRepositoryMemberArrayInput)(nil)).Elem(), FederatedVagrantRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OauthSettingsOauthProviderInput)(nil)).Elem(), OauthSettingsOauthProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OauthSettingsOauthProviderArrayInput)(nil)).Elem(), OauthSettingsOauthProviderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetBuildInput)(nil)).Elem(), PermissionTargetBuildArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetBuildPtrInput)(nil)).Elem(), PermissionTargetBuildArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetBuildActionsInput)(nil)).Elem(), PermissionTargetBuildActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetBuildActionsPtrInput)(nil)).Elem(), PermissionTargetBuildActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetBuildActionsGroupInput)(nil)).Elem(), PermissionTargetBuildActionsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetBuildActionsGroupArrayInput)(nil)).Elem(), PermissionTargetBuildActionsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetBuildActionsUserInput)(nil)).Elem(), PermissionTargetBuildActionsUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetBuildActionsUserArrayInput)(nil)).Elem(), PermissionTargetBuildActionsUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetReleaseBundleInput)(nil)).Elem(), PermissionTargetReleaseBundleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetReleaseBundlePtrInput)(nil)).Elem(), PermissionTargetReleaseBundleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetReleaseBundleActionsInput)(nil)).Elem(), PermissionTargetReleaseBundleActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetReleaseBundleActionsPtrInput)(nil)).Elem(), PermissionTargetReleaseBundleActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetReleaseBundleActionsGroupInput)(nil)).Elem(), PermissionTargetReleaseBundleActionsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetReleaseBundleActionsGroupArrayInput)(nil)).Elem(), PermissionTargetReleaseBundleActionsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetReleaseBundleActionsUserInput)(nil)).Elem(), PermissionTargetReleaseBundleActionsUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetReleaseBundleActionsUserArrayInput)(nil)).Elem(), PermissionTargetReleaseBundleActionsUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetRepoInput)(nil)).Elem(), PermissionTargetRepoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetRepoPtrInput)(nil)).Elem(), PermissionTargetRepoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetRepoActionsInput)(nil)).Elem(), PermissionTargetRepoActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetRepoActionsPtrInput)(nil)).Elem(), PermissionTargetRepoActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetRepoActionsGroupInput)(nil)).Elem(), PermissionTargetRepoActionsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetRepoActionsGroupArrayInput)(nil)).Elem(), PermissionTargetRepoActionsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetRepoActionsUserInput)(nil)).Elem(), PermissionTargetRepoActionsUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetRepoActionsUserArrayInput)(nil)).Elem(), PermissionTargetRepoActionsUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsBuildInput)(nil)).Elem(), PermissionTargetsBuildArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsBuildPtrInput)(nil)).Elem(), PermissionTargetsBuildArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsBuildActionsInput)(nil)).Elem(), PermissionTargetsBuildActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsBuildActionsPtrInput)(nil)).Elem(), PermissionTargetsBuildActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsBuildActionsGroupInput)(nil)).Elem(), PermissionTargetsBuildActionsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsBuildActionsGroupArrayInput)(nil)).Elem(), PermissionTargetsBuildActionsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsBuildActionsUserInput)(nil)).Elem(), PermissionTargetsBuildActionsUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsBuildActionsUserArrayInput)(nil)).Elem(), PermissionTargetsBuildActionsUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsReleaseBundleInput)(nil)).Elem(), PermissionTargetsReleaseBundleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsReleaseBundlePtrInput)(nil)).Elem(), PermissionTargetsReleaseBundleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsReleaseBundleActionsInput)(nil)).Elem(), PermissionTargetsReleaseBundleActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsReleaseBundleActionsPtrInput)(nil)).Elem(), PermissionTargetsReleaseBundleActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsReleaseBundleActionsGroupInput)(nil)).Elem(), PermissionTargetsReleaseBundleActionsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsReleaseBundleActionsGroupArrayInput)(nil)).Elem(), PermissionTargetsReleaseBundleActionsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsReleaseBundleActionsUserInput)(nil)).Elem(), PermissionTargetsReleaseBundleActionsUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsReleaseBundleActionsUserArrayInput)(nil)).Elem(), PermissionTargetsReleaseBundleActionsUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsRepoInput)(nil)).Elem(), PermissionTargetsRepoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsRepoPtrInput)(nil)).Elem(), PermissionTargetsRepoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsRepoActionsInput)(nil)).Elem(), PermissionTargetsRepoActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsRepoActionsPtrInput)(nil)).Elem(), PermissionTargetsRepoActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsRepoActionsGroupInput)(nil)).Elem(), PermissionTargetsRepoActionsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsRepoActionsGroupArrayInput)(nil)).Elem(), PermissionTargetsRepoActionsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsRepoActionsUserInput)(nil)).Elem(), PermissionTargetsRepoActionsUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsRepoActionsUserArrayInput)(nil)).Elem(), PermissionTargetsRepoActionsUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertySetPropertyInput)(nil)).Elem(), PropertySetPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertySetPropertyArrayInput)(nil)).Elem(), PropertySetPropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertySetPropertyPredefinedValueInput)(nil)).Elem(), PropertySetPropertyPredefinedValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertySetPropertyPredefinedValueArrayInput)(nil)).Elem(), PropertySetPropertyPredefinedValueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PushReplicationReplicationInput)(nil)).Elem(), PushReplicationReplicationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PushReplicationReplicationArrayInput)(nil)).Elem(), PushReplicationReplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReleaseBundleWebhookCriteriaInput)(nil)).Elem(), ReleaseBundleWebhookCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReleaseBundleWebhookCriteriaPtrInput)(nil)).Elem(), ReleaseBundleWebhookCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReleaseBundleWebhookHandlerInput)(nil)).Elem(), ReleaseBundleWebhookHandlerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReleaseBundleWebhookHandlerArrayInput)(nil)).Elem(), ReleaseBundleWebhookHandlerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteAlpineRepositoryContentSynchronisationInput)(nil)).Elem(), RemoteAlpineRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteAlpineRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemoteAlpineRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteBowerRepositoryContentSynchronisationInput)(nil)).Elem(), RemoteBowerRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteBowerRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemoteBowerRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteCargoRepositoryContentSynchronisationInput)(nil)).Elem(), RemoteCargoRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteCargoRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemoteCargoRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteChefRepositoryContentSynchronisationInput)(nil)).Elem(), RemoteChefRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteChefRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemoteChefRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteCocoapodsRepositoryContentSynchronisationInput)(nil)).Elem(), RemoteCocoapodsRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteCocoapodsRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemoteCocoapodsRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteComposerRepositoryContentSynchronisationInput)(nil)).Elem(), RemoteComposerRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteComposerRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemoteComposerRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteConanRepositoryContentSynchronisationInput)(nil)).Elem(), RemoteConanRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteConanRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemoteConanRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteCondaRepositoryContentSynchronisationInput)(nil)).Elem(), RemoteCondaRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteCondaRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemoteCondaRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteCranRepositoryContentSynchronisationInput)(nil)).Elem(), RemoteCranRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteCranRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemoteCranRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteDebianRepositoryContentSynchronisationInput)(nil)).Elem(), RemoteDebianRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteDebianRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemoteDebianRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteDockerRepositoryContentSynchronisationInput)(nil)).Elem(), RemoteDockerRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteDockerRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemoteDockerRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteGemsRepositoryContentSynchronisationInput)(nil)).Elem(), RemoteGemsRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteGemsRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemoteGemsRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteGenericRepositoryContentSynchronisationInput)(nil)).Elem(), RemoteGenericRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteGenericRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemoteGenericRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteGitlfsRepositoryContentSynchronisationInput)(nil)).Elem(), RemoteGitlfsRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteGitlfsRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemoteGitlfsRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteGoRepositoryContentSynchronisationInput)(nil)).Elem(), RemoteGoRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteGoRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemoteGoRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteGradleRepositoryContentSynchronisationInput)(nil)).Elem(), RemoteGradleRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteGradleRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemoteGradleRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteHelmRepositoryContentSynchronisationInput)(nil)).Elem(), RemoteHelmRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteHelmRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemoteHelmRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteIvyRepositoryContentSynchronisationInput)(nil)).Elem(), RemoteIvyRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteIvyRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemoteIvyRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteMavenRepositoryContentSynchronisationInput)(nil)).Elem(), RemoteMavenRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteMavenRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemoteMavenRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteNpmRepositoryContentSynchronisationInput)(nil)).Elem(), RemoteNpmRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteNpmRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemoteNpmRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteNugetRepositoryContentSynchronisationInput)(nil)).Elem(), RemoteNugetRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteNugetRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemoteNugetRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteOpkgRepositoryContentSynchronisationInput)(nil)).Elem(), RemoteOpkgRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteOpkgRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemoteOpkgRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteP2RepositoryContentSynchronisationInput)(nil)).Elem(), RemoteP2RepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteP2RepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemoteP2RepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemotePubRepositoryContentSynchronisationInput)(nil)).Elem(), RemotePubRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemotePubRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemotePubRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemotePuppetRepositoryContentSynchronisationInput)(nil)).Elem(), RemotePuppetRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemotePuppetRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemotePuppetRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemotePypiRepositoryContentSynchronisationInput)(nil)).Elem(), RemotePypiRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemotePypiRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemotePypiRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteRpmRepositoryContentSynchronisationInput)(nil)).Elem(), RemoteRpmRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteRpmRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemoteRpmRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteSbtRepositoryContentSynchronisationInput)(nil)).Elem(), RemoteSbtRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteSbtRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemoteSbtRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteSwiftRepositoryContentSynchronisationInput)(nil)).Elem(), RemoteSwiftRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteSwiftRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemoteSwiftRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteTerraformRepositoryContentSynchronisationInput)(nil)).Elem(), RemoteTerraformRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteTerraformRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemoteTerraformRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteVcsRepositoryContentSynchronisationInput)(nil)).Elem(), RemoteVcsRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteVcsRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemoteVcsRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationConfigReplicationInput)(nil)).Elem(), ReplicationConfigReplicationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationConfigReplicationArrayInput)(nil)).Elem(), ReplicationConfigReplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPermissionTargetBuildInput)(nil)).Elem(), GetPermissionTargetBuildArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPermissionTargetBuildPtrInput)(nil)).Elem(), GetPermissionTargetBuildArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPermissionTargetBuildActionsInput)(nil)).Elem(), GetPermissionTargetBuildActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPermissionTargetBuildActionsPtrInput)(nil)).Elem(), GetPermissionTargetBuildActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPermissionTargetBuildActionsGroupInput)(nil)).Elem(), GetPermissionTargetBuildActionsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPermissionTargetBuildActionsGroupArrayInput)(nil)).Elem(), GetPermissionTargetBuildActionsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPermissionTargetBuildActionsUserInput)(nil)).Elem(), GetPermissionTargetBuildActionsUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPermissionTargetBuildActionsUserArrayInput)(nil)).Elem(), GetPermissionTargetBuildActionsUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPermissionTargetReleaseBundleInput)(nil)).Elem(), GetPermissionTargetReleaseBundleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPermissionTargetReleaseBundlePtrInput)(nil)).Elem(), GetPermissionTargetReleaseBundleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPermissionTargetReleaseBundleActionsInput)(nil)).Elem(), GetPermissionTargetReleaseBundleActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPermissionTargetReleaseBundleActionsPtrInput)(nil)).Elem(), GetPermissionTargetReleaseBundleActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPermissionTargetReleaseBundleActionsGroupInput)(nil)).Elem(), GetPermissionTargetReleaseBundleActionsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPermissionTargetReleaseBundleActionsGroupArrayInput)(nil)).Elem(), GetPermissionTargetReleaseBundleActionsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPermissionTargetReleaseBundleActionsUserInput)(nil)).Elem(), GetPermissionTargetReleaseBundleActionsUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPermissionTargetReleaseBundleActionsUserArrayInput)(nil)).Elem(), GetPermissionTargetReleaseBundleActionsUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPermissionTargetRepoInput)(nil)).Elem(), GetPermissionTargetRepoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPermissionTargetRepoPtrInput)(nil)).Elem(), GetPermissionTargetRepoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPermissionTargetRepoActionsInput)(nil)).Elem(), GetPermissionTargetRepoActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPermissionTargetRepoActionsPtrInput)(nil)).Elem(), GetPermissionTargetRepoActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPermissionTargetRepoActionsGroupInput)(nil)).Elem(), GetPermissionTargetRepoActionsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPermissionTargetRepoActionsGroupArrayInput)(nil)).Elem(), GetPermissionTargetRepoActionsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPermissionTargetRepoActionsUserInput)(nil)).Elem(), GetPermissionTargetRepoActionsUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPermissionTargetRepoActionsUserArrayInput)(nil)).Elem(), GetPermissionTargetRepoActionsUserArray{})
	pulumi.RegisterOutputType(AccessTokenAdminTokenOutput{})
	pulumi.RegisterOutputType(AccessTokenAdminTokenPtrOutput{})
	pulumi.RegisterOutputType(ArtifactPropertyWebhookCriteriaOutput{})
	pulumi.RegisterOutputType(ArtifactPropertyWebhookCriteriaPtrOutput{})
	pulumi.RegisterOutputType(ArtifactPropertyWebhookHandlerOutput{})
	pulumi.RegisterOutputType(ArtifactPropertyWebhookHandlerArrayOutput{})
	pulumi.RegisterOutputType(ArtifactWebhookCriteriaOutput{})
	pulumi.RegisterOutputType(ArtifactWebhookCriteriaPtrOutput{})
	pulumi.RegisterOutputType(ArtifactWebhookHandlerOutput{})
	pulumi.RegisterOutputType(ArtifactWebhookHandlerArrayOutput{})
	pulumi.RegisterOutputType(ArtifactoryReleaseBundleWebhookCriteriaOutput{})
	pulumi.RegisterOutputType(ArtifactoryReleaseBundleWebhookCriteriaPtrOutput{})
	pulumi.RegisterOutputType(ArtifactoryReleaseBundleWebhookHandlerOutput{})
	pulumi.RegisterOutputType(ArtifactoryReleaseBundleWebhookHandlerArrayOutput{})
	pulumi.RegisterOutputType(BuildWebhookCriteriaOutput{})
	pulumi.RegisterOutputType(BuildWebhookCriteriaPtrOutput{})
	pulumi.RegisterOutputType(BuildWebhookHandlerOutput{})
	pulumi.RegisterOutputType(BuildWebhookHandlerArrayOutput{})
	pulumi.RegisterOutputType(DistributionWebhookCriteriaOutput{})
	pulumi.RegisterOutputType(DistributionWebhookCriteriaPtrOutput{})
	pulumi.RegisterOutputType(DistributionWebhookHandlerOutput{})
	pulumi.RegisterOutputType(DistributionWebhookHandlerArrayOutput{})
	pulumi.RegisterOutputType(DockerWebhookCriteriaOutput{})
	pulumi.RegisterOutputType(DockerWebhookCriteriaPtrOutput{})
	pulumi.RegisterOutputType(DockerWebhookHandlerOutput{})
	pulumi.RegisterOutputType(DockerWebhookHandlerArrayOutput{})
	pulumi.RegisterOutputType(FederatedAlpineRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedAlpineRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedBowerRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedBowerRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedCargoRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedCargoRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedChefRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedChefRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedCocoapodsRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedCocoapodsRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedComposerRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedComposerRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedConanRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedConanRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedCondaRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedCondaRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedCranRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedCranRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedDebianRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedDebianRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedDockerRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedDockerRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedDockerV1RepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedDockerV1RepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedDockerV2RepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedDockerV2RepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedGemsRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedGemsRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedGenericRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedGenericRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedGitltfsRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedGitltfsRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedGoRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedGoRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedGradleRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedGradleRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedHelmRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedHelmRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedIvyRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedIvyRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedMavenRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedMavenRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedNpmRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedNpmRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedNugetRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedNugetRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedOpkgRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedOpkgRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedPuppetRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedPuppetRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedPypiRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedPypiRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedRpmRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedRpmRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedSbtRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedSbtRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedSwiftRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedSwiftRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedTerraformModuleRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedTerraformModuleRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedTerraformProviderRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedTerraformProviderRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedVagrantRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedVagrantRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(OauthSettingsOauthProviderOutput{})
	pulumi.RegisterOutputType(OauthSettingsOauthProviderArrayOutput{})
	pulumi.RegisterOutputType(PermissionTargetBuildOutput{})
	pulumi.RegisterOutputType(PermissionTargetBuildPtrOutput{})
	pulumi.RegisterOutputType(PermissionTargetBuildActionsOutput{})
	pulumi.RegisterOutputType(PermissionTargetBuildActionsPtrOutput{})
	pulumi.RegisterOutputType(PermissionTargetBuildActionsGroupOutput{})
	pulumi.RegisterOutputType(PermissionTargetBuildActionsGroupArrayOutput{})
	pulumi.RegisterOutputType(PermissionTargetBuildActionsUserOutput{})
	pulumi.RegisterOutputType(PermissionTargetBuildActionsUserArrayOutput{})
	pulumi.RegisterOutputType(PermissionTargetReleaseBundleOutput{})
	pulumi.RegisterOutputType(PermissionTargetReleaseBundlePtrOutput{})
	pulumi.RegisterOutputType(PermissionTargetReleaseBundleActionsOutput{})
	pulumi.RegisterOutputType(PermissionTargetReleaseBundleActionsPtrOutput{})
	pulumi.RegisterOutputType(PermissionTargetReleaseBundleActionsGroupOutput{})
	pulumi.RegisterOutputType(PermissionTargetReleaseBundleActionsGroupArrayOutput{})
	pulumi.RegisterOutputType(PermissionTargetReleaseBundleActionsUserOutput{})
	pulumi.RegisterOutputType(PermissionTargetReleaseBundleActionsUserArrayOutput{})
	pulumi.RegisterOutputType(PermissionTargetRepoOutput{})
	pulumi.RegisterOutputType(PermissionTargetRepoPtrOutput{})
	pulumi.RegisterOutputType(PermissionTargetRepoActionsOutput{})
	pulumi.RegisterOutputType(PermissionTargetRepoActionsPtrOutput{})
	pulumi.RegisterOutputType(PermissionTargetRepoActionsGroupOutput{})
	pulumi.RegisterOutputType(PermissionTargetRepoActionsGroupArrayOutput{})
	pulumi.RegisterOutputType(PermissionTargetRepoActionsUserOutput{})
	pulumi.RegisterOutputType(PermissionTargetRepoActionsUserArrayOutput{})
	pulumi.RegisterOutputType(PermissionTargetsBuildOutput{})
	pulumi.RegisterOutputType(PermissionTargetsBuildPtrOutput{})
	pulumi.RegisterOutputType(PermissionTargetsBuildActionsOutput{})
	pulumi.RegisterOutputType(PermissionTargetsBuildActionsPtrOutput{})
	pulumi.RegisterOutputType(PermissionTargetsBuildActionsGroupOutput{})
	pulumi.RegisterOutputType(PermissionTargetsBuildActionsGroupArrayOutput{})
	pulumi.RegisterOutputType(PermissionTargetsBuildActionsUserOutput{})
	pulumi.RegisterOutputType(PermissionTargetsBuildActionsUserArrayOutput{})
	pulumi.RegisterOutputType(PermissionTargetsReleaseBundleOutput{})
	pulumi.RegisterOutputType(PermissionTargetsReleaseBundlePtrOutput{})
	pulumi.RegisterOutputType(PermissionTargetsReleaseBundleActionsOutput{})
	pulumi.RegisterOutputType(PermissionTargetsReleaseBundleActionsPtrOutput{})
	pulumi.RegisterOutputType(PermissionTargetsReleaseBundleActionsGroupOutput{})
	pulumi.RegisterOutputType(PermissionTargetsReleaseBundleActionsGroupArrayOutput{})
	pulumi.RegisterOutputType(PermissionTargetsReleaseBundleActionsUserOutput{})
	pulumi.RegisterOutputType(PermissionTargetsReleaseBundleActionsUserArrayOutput{})
	pulumi.RegisterOutputType(PermissionTargetsRepoOutput{})
	pulumi.RegisterOutputType(PermissionTargetsRepoPtrOutput{})
	pulumi.RegisterOutputType(PermissionTargetsRepoActionsOutput{})
	pulumi.RegisterOutputType(PermissionTargetsRepoActionsPtrOutput{})
	pulumi.RegisterOutputType(PermissionTargetsRepoActionsGroupOutput{})
	pulumi.RegisterOutputType(PermissionTargetsRepoActionsGroupArrayOutput{})
	pulumi.RegisterOutputType(PermissionTargetsRepoActionsUserOutput{})
	pulumi.RegisterOutputType(PermissionTargetsRepoActionsUserArrayOutput{})
	pulumi.RegisterOutputType(PropertySetPropertyOutput{})
	pulumi.RegisterOutputType(PropertySetPropertyArrayOutput{})
	pulumi.RegisterOutputType(PropertySetPropertyPredefinedValueOutput{})
	pulumi.RegisterOutputType(PropertySetPropertyPredefinedValueArrayOutput{})
	pulumi.RegisterOutputType(PushReplicationReplicationOutput{})
	pulumi.RegisterOutputType(PushReplicationReplicationArrayOutput{})
	pulumi.RegisterOutputType(ReleaseBundleWebhookCriteriaOutput{})
	pulumi.RegisterOutputType(ReleaseBundleWebhookCriteriaPtrOutput{})
	pulumi.RegisterOutputType(ReleaseBundleWebhookHandlerOutput{})
	pulumi.RegisterOutputType(ReleaseBundleWebhookHandlerArrayOutput{})
	pulumi.RegisterOutputType(RemoteAlpineRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemoteAlpineRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(RemoteBowerRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemoteBowerRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(RemoteCargoRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemoteCargoRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(RemoteChefRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemoteChefRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(RemoteCocoapodsRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemoteCocoapodsRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(RemoteComposerRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemoteComposerRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(RemoteConanRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemoteConanRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(RemoteCondaRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemoteCondaRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(RemoteCranRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemoteCranRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(RemoteDebianRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemoteDebianRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(RemoteDockerRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemoteDockerRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(RemoteGemsRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemoteGemsRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(RemoteGenericRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemoteGenericRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(RemoteGitlfsRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemoteGitlfsRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(RemoteGoRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemoteGoRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(RemoteGradleRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemoteGradleRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(RemoteHelmRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemoteHelmRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(RemoteIvyRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemoteIvyRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(RemoteMavenRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemoteMavenRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(RemoteNpmRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemoteNpmRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(RemoteNugetRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemoteNugetRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(RemoteOpkgRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemoteOpkgRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(RemoteP2RepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemoteP2RepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(RemotePubRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemotePubRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(RemotePuppetRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemotePuppetRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(RemotePypiRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemotePypiRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(RemoteRpmRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemoteRpmRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(RemoteSbtRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemoteSbtRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(RemoteSwiftRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemoteSwiftRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(RemoteTerraformRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemoteTerraformRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(RemoteVcsRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemoteVcsRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(ReplicationConfigReplicationOutput{})
	pulumi.RegisterOutputType(ReplicationConfigReplicationArrayOutput{})
	pulumi.RegisterOutputType(GetPermissionTargetBuildOutput{})
	pulumi.RegisterOutputType(GetPermissionTargetBuildPtrOutput{})
	pulumi.RegisterOutputType(GetPermissionTargetBuildActionsOutput{})
	pulumi.RegisterOutputType(GetPermissionTargetBuildActionsPtrOutput{})
	pulumi.RegisterOutputType(GetPermissionTargetBuildActionsGroupOutput{})
	pulumi.RegisterOutputType(GetPermissionTargetBuildActionsGroupArrayOutput{})
	pulumi.RegisterOutputType(GetPermissionTargetBuildActionsUserOutput{})
	pulumi.RegisterOutputType(GetPermissionTargetBuildActionsUserArrayOutput{})
	pulumi.RegisterOutputType(GetPermissionTargetReleaseBundleOutput{})
	pulumi.RegisterOutputType(GetPermissionTargetReleaseBundlePtrOutput{})
	pulumi.RegisterOutputType(GetPermissionTargetReleaseBundleActionsOutput{})
	pulumi.RegisterOutputType(GetPermissionTargetReleaseBundleActionsPtrOutput{})
	pulumi.RegisterOutputType(GetPermissionTargetReleaseBundleActionsGroupOutput{})
	pulumi.RegisterOutputType(GetPermissionTargetReleaseBundleActionsGroupArrayOutput{})
	pulumi.RegisterOutputType(GetPermissionTargetReleaseBundleActionsUserOutput{})
	pulumi.RegisterOutputType(GetPermissionTargetReleaseBundleActionsUserArrayOutput{})
	pulumi.RegisterOutputType(GetPermissionTargetRepoOutput{})
	pulumi.RegisterOutputType(GetPermissionTargetRepoPtrOutput{})
	pulumi.RegisterOutputType(GetPermissionTargetRepoActionsOutput{})
	pulumi.RegisterOutputType(GetPermissionTargetRepoActionsPtrOutput{})
	pulumi.RegisterOutputType(GetPermissionTargetRepoActionsGroupOutput{})
	pulumi.RegisterOutputType(GetPermissionTargetRepoActionsGroupArrayOutput{})
	pulumi.RegisterOutputType(GetPermissionTargetRepoActionsUserOutput{})
	pulumi.RegisterOutputType(GetPermissionTargetRepoActionsUserArrayOutput{})
}
