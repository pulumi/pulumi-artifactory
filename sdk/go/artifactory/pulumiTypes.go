// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AccessTokenAdminToken struct {
	InstanceId string `pulumi:"instanceId"`
}

// AccessTokenAdminTokenInput is an input type that accepts AccessTokenAdminTokenArgs and AccessTokenAdminTokenOutput values.
// You can construct a concrete instance of `AccessTokenAdminTokenInput` via:
//
//          AccessTokenAdminTokenArgs{...}
type AccessTokenAdminTokenInput interface {
	pulumi.Input

	ToAccessTokenAdminTokenOutput() AccessTokenAdminTokenOutput
	ToAccessTokenAdminTokenOutputWithContext(context.Context) AccessTokenAdminTokenOutput
}

type AccessTokenAdminTokenArgs struct {
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
}

func (AccessTokenAdminTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessTokenAdminToken)(nil)).Elem()
}

func (i AccessTokenAdminTokenArgs) ToAccessTokenAdminTokenOutput() AccessTokenAdminTokenOutput {
	return i.ToAccessTokenAdminTokenOutputWithContext(context.Background())
}

func (i AccessTokenAdminTokenArgs) ToAccessTokenAdminTokenOutputWithContext(ctx context.Context) AccessTokenAdminTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessTokenAdminTokenOutput)
}

func (i AccessTokenAdminTokenArgs) ToAccessTokenAdminTokenPtrOutput() AccessTokenAdminTokenPtrOutput {
	return i.ToAccessTokenAdminTokenPtrOutputWithContext(context.Background())
}

func (i AccessTokenAdminTokenArgs) ToAccessTokenAdminTokenPtrOutputWithContext(ctx context.Context) AccessTokenAdminTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessTokenAdminTokenOutput).ToAccessTokenAdminTokenPtrOutputWithContext(ctx)
}

// AccessTokenAdminTokenPtrInput is an input type that accepts AccessTokenAdminTokenArgs, AccessTokenAdminTokenPtr and AccessTokenAdminTokenPtrOutput values.
// You can construct a concrete instance of `AccessTokenAdminTokenPtrInput` via:
//
//          AccessTokenAdminTokenArgs{...}
//
//  or:
//
//          nil
type AccessTokenAdminTokenPtrInput interface {
	pulumi.Input

	ToAccessTokenAdminTokenPtrOutput() AccessTokenAdminTokenPtrOutput
	ToAccessTokenAdminTokenPtrOutputWithContext(context.Context) AccessTokenAdminTokenPtrOutput
}

type accessTokenAdminTokenPtrType AccessTokenAdminTokenArgs

func AccessTokenAdminTokenPtr(v *AccessTokenAdminTokenArgs) AccessTokenAdminTokenPtrInput {
	return (*accessTokenAdminTokenPtrType)(v)
}

func (*accessTokenAdminTokenPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessTokenAdminToken)(nil)).Elem()
}

func (i *accessTokenAdminTokenPtrType) ToAccessTokenAdminTokenPtrOutput() AccessTokenAdminTokenPtrOutput {
	return i.ToAccessTokenAdminTokenPtrOutputWithContext(context.Background())
}

func (i *accessTokenAdminTokenPtrType) ToAccessTokenAdminTokenPtrOutputWithContext(ctx context.Context) AccessTokenAdminTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessTokenAdminTokenPtrOutput)
}

type AccessTokenAdminTokenOutput struct{ *pulumi.OutputState }

func (AccessTokenAdminTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessTokenAdminToken)(nil)).Elem()
}

func (o AccessTokenAdminTokenOutput) ToAccessTokenAdminTokenOutput() AccessTokenAdminTokenOutput {
	return o
}

func (o AccessTokenAdminTokenOutput) ToAccessTokenAdminTokenOutputWithContext(ctx context.Context) AccessTokenAdminTokenOutput {
	return o
}

func (o AccessTokenAdminTokenOutput) ToAccessTokenAdminTokenPtrOutput() AccessTokenAdminTokenPtrOutput {
	return o.ToAccessTokenAdminTokenPtrOutputWithContext(context.Background())
}

func (o AccessTokenAdminTokenOutput) ToAccessTokenAdminTokenPtrOutputWithContext(ctx context.Context) AccessTokenAdminTokenPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccessTokenAdminToken) *AccessTokenAdminToken {
		return &v
	}).(AccessTokenAdminTokenPtrOutput)
}

func (o AccessTokenAdminTokenOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v AccessTokenAdminToken) string { return v.InstanceId }).(pulumi.StringOutput)
}

type AccessTokenAdminTokenPtrOutput struct{ *pulumi.OutputState }

func (AccessTokenAdminTokenPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessTokenAdminToken)(nil)).Elem()
}

func (o AccessTokenAdminTokenPtrOutput) ToAccessTokenAdminTokenPtrOutput() AccessTokenAdminTokenPtrOutput {
	return o
}

func (o AccessTokenAdminTokenPtrOutput) ToAccessTokenAdminTokenPtrOutputWithContext(ctx context.Context) AccessTokenAdminTokenPtrOutput {
	return o
}

func (o AccessTokenAdminTokenPtrOutput) Elem() AccessTokenAdminTokenOutput {
	return o.ApplyT(func(v *AccessTokenAdminToken) AccessTokenAdminToken {
		if v != nil {
			return *v
		}
		var ret AccessTokenAdminToken
		return ret
	}).(AccessTokenAdminTokenOutput)
}

func (o AccessTokenAdminTokenPtrOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessTokenAdminToken) *string {
		if v == nil {
			return nil
		}
		return &v.InstanceId
	}).(pulumi.StringPtrOutput)
}

type FederatedAlpineRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url string `pulumi:"url"`
}

// FederatedAlpineRepositoryMemberInput is an input type that accepts FederatedAlpineRepositoryMemberArgs and FederatedAlpineRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedAlpineRepositoryMemberInput` via:
//
//          FederatedAlpineRepositoryMemberArgs{...}
type FederatedAlpineRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedAlpineRepositoryMemberOutput() FederatedAlpineRepositoryMemberOutput
	ToFederatedAlpineRepositoryMemberOutputWithContext(context.Context) FederatedAlpineRepositoryMemberOutput
}

type FederatedAlpineRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedAlpineRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedAlpineRepositoryMember)(nil)).Elem()
}

func (i FederatedAlpineRepositoryMemberArgs) ToFederatedAlpineRepositoryMemberOutput() FederatedAlpineRepositoryMemberOutput {
	return i.ToFederatedAlpineRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedAlpineRepositoryMemberArgs) ToFederatedAlpineRepositoryMemberOutputWithContext(ctx context.Context) FederatedAlpineRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedAlpineRepositoryMemberOutput)
}

// FederatedAlpineRepositoryMemberArrayInput is an input type that accepts FederatedAlpineRepositoryMemberArray and FederatedAlpineRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedAlpineRepositoryMemberArrayInput` via:
//
//          FederatedAlpineRepositoryMemberArray{ FederatedAlpineRepositoryMemberArgs{...} }
type FederatedAlpineRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedAlpineRepositoryMemberArrayOutput() FederatedAlpineRepositoryMemberArrayOutput
	ToFederatedAlpineRepositoryMemberArrayOutputWithContext(context.Context) FederatedAlpineRepositoryMemberArrayOutput
}

type FederatedAlpineRepositoryMemberArray []FederatedAlpineRepositoryMemberInput

func (FederatedAlpineRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedAlpineRepositoryMember)(nil)).Elem()
}

func (i FederatedAlpineRepositoryMemberArray) ToFederatedAlpineRepositoryMemberArrayOutput() FederatedAlpineRepositoryMemberArrayOutput {
	return i.ToFederatedAlpineRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedAlpineRepositoryMemberArray) ToFederatedAlpineRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedAlpineRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedAlpineRepositoryMemberArrayOutput)
}

type FederatedAlpineRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedAlpineRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedAlpineRepositoryMember)(nil)).Elem()
}

func (o FederatedAlpineRepositoryMemberOutput) ToFederatedAlpineRepositoryMemberOutput() FederatedAlpineRepositoryMemberOutput {
	return o
}

func (o FederatedAlpineRepositoryMemberOutput) ToFederatedAlpineRepositoryMemberOutputWithContext(ctx context.Context) FederatedAlpineRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedAlpineRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedAlpineRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name
func (o FederatedAlpineRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedAlpineRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedAlpineRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedAlpineRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedAlpineRepositoryMember)(nil)).Elem()
}

func (o FederatedAlpineRepositoryMemberArrayOutput) ToFederatedAlpineRepositoryMemberArrayOutput() FederatedAlpineRepositoryMemberArrayOutput {
	return o
}

func (o FederatedAlpineRepositoryMemberArrayOutput) ToFederatedAlpineRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedAlpineRepositoryMemberArrayOutput {
	return o
}

func (o FederatedAlpineRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedAlpineRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedAlpineRepositoryMember {
		return vs[0].([]FederatedAlpineRepositoryMember)[vs[1].(int)]
	}).(FederatedAlpineRepositoryMemberOutput)
}

type FederatedBowerRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url string `pulumi:"url"`
}

// FederatedBowerRepositoryMemberInput is an input type that accepts FederatedBowerRepositoryMemberArgs and FederatedBowerRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedBowerRepositoryMemberInput` via:
//
//          FederatedBowerRepositoryMemberArgs{...}
type FederatedBowerRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedBowerRepositoryMemberOutput() FederatedBowerRepositoryMemberOutput
	ToFederatedBowerRepositoryMemberOutputWithContext(context.Context) FederatedBowerRepositoryMemberOutput
}

type FederatedBowerRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedBowerRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedBowerRepositoryMember)(nil)).Elem()
}

func (i FederatedBowerRepositoryMemberArgs) ToFederatedBowerRepositoryMemberOutput() FederatedBowerRepositoryMemberOutput {
	return i.ToFederatedBowerRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedBowerRepositoryMemberArgs) ToFederatedBowerRepositoryMemberOutputWithContext(ctx context.Context) FederatedBowerRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedBowerRepositoryMemberOutput)
}

// FederatedBowerRepositoryMemberArrayInput is an input type that accepts FederatedBowerRepositoryMemberArray and FederatedBowerRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedBowerRepositoryMemberArrayInput` via:
//
//          FederatedBowerRepositoryMemberArray{ FederatedBowerRepositoryMemberArgs{...} }
type FederatedBowerRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedBowerRepositoryMemberArrayOutput() FederatedBowerRepositoryMemberArrayOutput
	ToFederatedBowerRepositoryMemberArrayOutputWithContext(context.Context) FederatedBowerRepositoryMemberArrayOutput
}

type FederatedBowerRepositoryMemberArray []FederatedBowerRepositoryMemberInput

func (FederatedBowerRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedBowerRepositoryMember)(nil)).Elem()
}

func (i FederatedBowerRepositoryMemberArray) ToFederatedBowerRepositoryMemberArrayOutput() FederatedBowerRepositoryMemberArrayOutput {
	return i.ToFederatedBowerRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedBowerRepositoryMemberArray) ToFederatedBowerRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedBowerRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedBowerRepositoryMemberArrayOutput)
}

type FederatedBowerRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedBowerRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedBowerRepositoryMember)(nil)).Elem()
}

func (o FederatedBowerRepositoryMemberOutput) ToFederatedBowerRepositoryMemberOutput() FederatedBowerRepositoryMemberOutput {
	return o
}

func (o FederatedBowerRepositoryMemberOutput) ToFederatedBowerRepositoryMemberOutputWithContext(ctx context.Context) FederatedBowerRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedBowerRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedBowerRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name
func (o FederatedBowerRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedBowerRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedBowerRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedBowerRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedBowerRepositoryMember)(nil)).Elem()
}

func (o FederatedBowerRepositoryMemberArrayOutput) ToFederatedBowerRepositoryMemberArrayOutput() FederatedBowerRepositoryMemberArrayOutput {
	return o
}

func (o FederatedBowerRepositoryMemberArrayOutput) ToFederatedBowerRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedBowerRepositoryMemberArrayOutput {
	return o
}

func (o FederatedBowerRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedBowerRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedBowerRepositoryMember {
		return vs[0].([]FederatedBowerRepositoryMember)[vs[1].(int)]
	}).(FederatedBowerRepositoryMemberOutput)
}

type FederatedCargoRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url string `pulumi:"url"`
}

// FederatedCargoRepositoryMemberInput is an input type that accepts FederatedCargoRepositoryMemberArgs and FederatedCargoRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedCargoRepositoryMemberInput` via:
//
//          FederatedCargoRepositoryMemberArgs{...}
type FederatedCargoRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedCargoRepositoryMemberOutput() FederatedCargoRepositoryMemberOutput
	ToFederatedCargoRepositoryMemberOutputWithContext(context.Context) FederatedCargoRepositoryMemberOutput
}

type FederatedCargoRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedCargoRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedCargoRepositoryMember)(nil)).Elem()
}

func (i FederatedCargoRepositoryMemberArgs) ToFederatedCargoRepositoryMemberOutput() FederatedCargoRepositoryMemberOutput {
	return i.ToFederatedCargoRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedCargoRepositoryMemberArgs) ToFederatedCargoRepositoryMemberOutputWithContext(ctx context.Context) FederatedCargoRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedCargoRepositoryMemberOutput)
}

// FederatedCargoRepositoryMemberArrayInput is an input type that accepts FederatedCargoRepositoryMemberArray and FederatedCargoRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedCargoRepositoryMemberArrayInput` via:
//
//          FederatedCargoRepositoryMemberArray{ FederatedCargoRepositoryMemberArgs{...} }
type FederatedCargoRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedCargoRepositoryMemberArrayOutput() FederatedCargoRepositoryMemberArrayOutput
	ToFederatedCargoRepositoryMemberArrayOutputWithContext(context.Context) FederatedCargoRepositoryMemberArrayOutput
}

type FederatedCargoRepositoryMemberArray []FederatedCargoRepositoryMemberInput

func (FederatedCargoRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedCargoRepositoryMember)(nil)).Elem()
}

func (i FederatedCargoRepositoryMemberArray) ToFederatedCargoRepositoryMemberArrayOutput() FederatedCargoRepositoryMemberArrayOutput {
	return i.ToFederatedCargoRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedCargoRepositoryMemberArray) ToFederatedCargoRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedCargoRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedCargoRepositoryMemberArrayOutput)
}

type FederatedCargoRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedCargoRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedCargoRepositoryMember)(nil)).Elem()
}

func (o FederatedCargoRepositoryMemberOutput) ToFederatedCargoRepositoryMemberOutput() FederatedCargoRepositoryMemberOutput {
	return o
}

func (o FederatedCargoRepositoryMemberOutput) ToFederatedCargoRepositoryMemberOutputWithContext(ctx context.Context) FederatedCargoRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedCargoRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedCargoRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name
func (o FederatedCargoRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedCargoRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedCargoRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedCargoRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedCargoRepositoryMember)(nil)).Elem()
}

func (o FederatedCargoRepositoryMemberArrayOutput) ToFederatedCargoRepositoryMemberArrayOutput() FederatedCargoRepositoryMemberArrayOutput {
	return o
}

func (o FederatedCargoRepositoryMemberArrayOutput) ToFederatedCargoRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedCargoRepositoryMemberArrayOutput {
	return o
}

func (o FederatedCargoRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedCargoRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedCargoRepositoryMember {
		return vs[0].([]FederatedCargoRepositoryMember)[vs[1].(int)]
	}).(FederatedCargoRepositoryMemberOutput)
}

type FederatedChefRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url string `pulumi:"url"`
}

// FederatedChefRepositoryMemberInput is an input type that accepts FederatedChefRepositoryMemberArgs and FederatedChefRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedChefRepositoryMemberInput` via:
//
//          FederatedChefRepositoryMemberArgs{...}
type FederatedChefRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedChefRepositoryMemberOutput() FederatedChefRepositoryMemberOutput
	ToFederatedChefRepositoryMemberOutputWithContext(context.Context) FederatedChefRepositoryMemberOutput
}

type FederatedChefRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedChefRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedChefRepositoryMember)(nil)).Elem()
}

func (i FederatedChefRepositoryMemberArgs) ToFederatedChefRepositoryMemberOutput() FederatedChefRepositoryMemberOutput {
	return i.ToFederatedChefRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedChefRepositoryMemberArgs) ToFederatedChefRepositoryMemberOutputWithContext(ctx context.Context) FederatedChefRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedChefRepositoryMemberOutput)
}

// FederatedChefRepositoryMemberArrayInput is an input type that accepts FederatedChefRepositoryMemberArray and FederatedChefRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedChefRepositoryMemberArrayInput` via:
//
//          FederatedChefRepositoryMemberArray{ FederatedChefRepositoryMemberArgs{...} }
type FederatedChefRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedChefRepositoryMemberArrayOutput() FederatedChefRepositoryMemberArrayOutput
	ToFederatedChefRepositoryMemberArrayOutputWithContext(context.Context) FederatedChefRepositoryMemberArrayOutput
}

type FederatedChefRepositoryMemberArray []FederatedChefRepositoryMemberInput

func (FederatedChefRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedChefRepositoryMember)(nil)).Elem()
}

func (i FederatedChefRepositoryMemberArray) ToFederatedChefRepositoryMemberArrayOutput() FederatedChefRepositoryMemberArrayOutput {
	return i.ToFederatedChefRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedChefRepositoryMemberArray) ToFederatedChefRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedChefRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedChefRepositoryMemberArrayOutput)
}

type FederatedChefRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedChefRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedChefRepositoryMember)(nil)).Elem()
}

func (o FederatedChefRepositoryMemberOutput) ToFederatedChefRepositoryMemberOutput() FederatedChefRepositoryMemberOutput {
	return o
}

func (o FederatedChefRepositoryMemberOutput) ToFederatedChefRepositoryMemberOutputWithContext(ctx context.Context) FederatedChefRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedChefRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedChefRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name
func (o FederatedChefRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedChefRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedChefRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedChefRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedChefRepositoryMember)(nil)).Elem()
}

func (o FederatedChefRepositoryMemberArrayOutput) ToFederatedChefRepositoryMemberArrayOutput() FederatedChefRepositoryMemberArrayOutput {
	return o
}

func (o FederatedChefRepositoryMemberArrayOutput) ToFederatedChefRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedChefRepositoryMemberArrayOutput {
	return o
}

func (o FederatedChefRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedChefRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedChefRepositoryMember {
		return vs[0].([]FederatedChefRepositoryMember)[vs[1].(int)]
	}).(FederatedChefRepositoryMemberOutput)
}

type FederatedCocoapodsRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url string `pulumi:"url"`
}

// FederatedCocoapodsRepositoryMemberInput is an input type that accepts FederatedCocoapodsRepositoryMemberArgs and FederatedCocoapodsRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedCocoapodsRepositoryMemberInput` via:
//
//          FederatedCocoapodsRepositoryMemberArgs{...}
type FederatedCocoapodsRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedCocoapodsRepositoryMemberOutput() FederatedCocoapodsRepositoryMemberOutput
	ToFederatedCocoapodsRepositoryMemberOutputWithContext(context.Context) FederatedCocoapodsRepositoryMemberOutput
}

type FederatedCocoapodsRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedCocoapodsRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedCocoapodsRepositoryMember)(nil)).Elem()
}

func (i FederatedCocoapodsRepositoryMemberArgs) ToFederatedCocoapodsRepositoryMemberOutput() FederatedCocoapodsRepositoryMemberOutput {
	return i.ToFederatedCocoapodsRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedCocoapodsRepositoryMemberArgs) ToFederatedCocoapodsRepositoryMemberOutputWithContext(ctx context.Context) FederatedCocoapodsRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedCocoapodsRepositoryMemberOutput)
}

// FederatedCocoapodsRepositoryMemberArrayInput is an input type that accepts FederatedCocoapodsRepositoryMemberArray and FederatedCocoapodsRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedCocoapodsRepositoryMemberArrayInput` via:
//
//          FederatedCocoapodsRepositoryMemberArray{ FederatedCocoapodsRepositoryMemberArgs{...} }
type FederatedCocoapodsRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedCocoapodsRepositoryMemberArrayOutput() FederatedCocoapodsRepositoryMemberArrayOutput
	ToFederatedCocoapodsRepositoryMemberArrayOutputWithContext(context.Context) FederatedCocoapodsRepositoryMemberArrayOutput
}

type FederatedCocoapodsRepositoryMemberArray []FederatedCocoapodsRepositoryMemberInput

func (FederatedCocoapodsRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedCocoapodsRepositoryMember)(nil)).Elem()
}

func (i FederatedCocoapodsRepositoryMemberArray) ToFederatedCocoapodsRepositoryMemberArrayOutput() FederatedCocoapodsRepositoryMemberArrayOutput {
	return i.ToFederatedCocoapodsRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedCocoapodsRepositoryMemberArray) ToFederatedCocoapodsRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedCocoapodsRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedCocoapodsRepositoryMemberArrayOutput)
}

type FederatedCocoapodsRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedCocoapodsRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedCocoapodsRepositoryMember)(nil)).Elem()
}

func (o FederatedCocoapodsRepositoryMemberOutput) ToFederatedCocoapodsRepositoryMemberOutput() FederatedCocoapodsRepositoryMemberOutput {
	return o
}

func (o FederatedCocoapodsRepositoryMemberOutput) ToFederatedCocoapodsRepositoryMemberOutputWithContext(ctx context.Context) FederatedCocoapodsRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedCocoapodsRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedCocoapodsRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name
func (o FederatedCocoapodsRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedCocoapodsRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedCocoapodsRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedCocoapodsRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedCocoapodsRepositoryMember)(nil)).Elem()
}

func (o FederatedCocoapodsRepositoryMemberArrayOutput) ToFederatedCocoapodsRepositoryMemberArrayOutput() FederatedCocoapodsRepositoryMemberArrayOutput {
	return o
}

func (o FederatedCocoapodsRepositoryMemberArrayOutput) ToFederatedCocoapodsRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedCocoapodsRepositoryMemberArrayOutput {
	return o
}

func (o FederatedCocoapodsRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedCocoapodsRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedCocoapodsRepositoryMember {
		return vs[0].([]FederatedCocoapodsRepositoryMember)[vs[1].(int)]
	}).(FederatedCocoapodsRepositoryMemberOutput)
}

type FederatedComposerRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url string `pulumi:"url"`
}

// FederatedComposerRepositoryMemberInput is an input type that accepts FederatedComposerRepositoryMemberArgs and FederatedComposerRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedComposerRepositoryMemberInput` via:
//
//          FederatedComposerRepositoryMemberArgs{...}
type FederatedComposerRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedComposerRepositoryMemberOutput() FederatedComposerRepositoryMemberOutput
	ToFederatedComposerRepositoryMemberOutputWithContext(context.Context) FederatedComposerRepositoryMemberOutput
}

type FederatedComposerRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedComposerRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedComposerRepositoryMember)(nil)).Elem()
}

func (i FederatedComposerRepositoryMemberArgs) ToFederatedComposerRepositoryMemberOutput() FederatedComposerRepositoryMemberOutput {
	return i.ToFederatedComposerRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedComposerRepositoryMemberArgs) ToFederatedComposerRepositoryMemberOutputWithContext(ctx context.Context) FederatedComposerRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedComposerRepositoryMemberOutput)
}

// FederatedComposerRepositoryMemberArrayInput is an input type that accepts FederatedComposerRepositoryMemberArray and FederatedComposerRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedComposerRepositoryMemberArrayInput` via:
//
//          FederatedComposerRepositoryMemberArray{ FederatedComposerRepositoryMemberArgs{...} }
type FederatedComposerRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedComposerRepositoryMemberArrayOutput() FederatedComposerRepositoryMemberArrayOutput
	ToFederatedComposerRepositoryMemberArrayOutputWithContext(context.Context) FederatedComposerRepositoryMemberArrayOutput
}

type FederatedComposerRepositoryMemberArray []FederatedComposerRepositoryMemberInput

func (FederatedComposerRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedComposerRepositoryMember)(nil)).Elem()
}

func (i FederatedComposerRepositoryMemberArray) ToFederatedComposerRepositoryMemberArrayOutput() FederatedComposerRepositoryMemberArrayOutput {
	return i.ToFederatedComposerRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedComposerRepositoryMemberArray) ToFederatedComposerRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedComposerRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedComposerRepositoryMemberArrayOutput)
}

type FederatedComposerRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedComposerRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedComposerRepositoryMember)(nil)).Elem()
}

func (o FederatedComposerRepositoryMemberOutput) ToFederatedComposerRepositoryMemberOutput() FederatedComposerRepositoryMemberOutput {
	return o
}

func (o FederatedComposerRepositoryMemberOutput) ToFederatedComposerRepositoryMemberOutputWithContext(ctx context.Context) FederatedComposerRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedComposerRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedComposerRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name
func (o FederatedComposerRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedComposerRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedComposerRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedComposerRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedComposerRepositoryMember)(nil)).Elem()
}

func (o FederatedComposerRepositoryMemberArrayOutput) ToFederatedComposerRepositoryMemberArrayOutput() FederatedComposerRepositoryMemberArrayOutput {
	return o
}

func (o FederatedComposerRepositoryMemberArrayOutput) ToFederatedComposerRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedComposerRepositoryMemberArrayOutput {
	return o
}

func (o FederatedComposerRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedComposerRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedComposerRepositoryMember {
		return vs[0].([]FederatedComposerRepositoryMember)[vs[1].(int)]
	}).(FederatedComposerRepositoryMemberOutput)
}

type FederatedConanRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url string `pulumi:"url"`
}

// FederatedConanRepositoryMemberInput is an input type that accepts FederatedConanRepositoryMemberArgs and FederatedConanRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedConanRepositoryMemberInput` via:
//
//          FederatedConanRepositoryMemberArgs{...}
type FederatedConanRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedConanRepositoryMemberOutput() FederatedConanRepositoryMemberOutput
	ToFederatedConanRepositoryMemberOutputWithContext(context.Context) FederatedConanRepositoryMemberOutput
}

type FederatedConanRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedConanRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedConanRepositoryMember)(nil)).Elem()
}

func (i FederatedConanRepositoryMemberArgs) ToFederatedConanRepositoryMemberOutput() FederatedConanRepositoryMemberOutput {
	return i.ToFederatedConanRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedConanRepositoryMemberArgs) ToFederatedConanRepositoryMemberOutputWithContext(ctx context.Context) FederatedConanRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedConanRepositoryMemberOutput)
}

// FederatedConanRepositoryMemberArrayInput is an input type that accepts FederatedConanRepositoryMemberArray and FederatedConanRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedConanRepositoryMemberArrayInput` via:
//
//          FederatedConanRepositoryMemberArray{ FederatedConanRepositoryMemberArgs{...} }
type FederatedConanRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedConanRepositoryMemberArrayOutput() FederatedConanRepositoryMemberArrayOutput
	ToFederatedConanRepositoryMemberArrayOutputWithContext(context.Context) FederatedConanRepositoryMemberArrayOutput
}

type FederatedConanRepositoryMemberArray []FederatedConanRepositoryMemberInput

func (FederatedConanRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedConanRepositoryMember)(nil)).Elem()
}

func (i FederatedConanRepositoryMemberArray) ToFederatedConanRepositoryMemberArrayOutput() FederatedConanRepositoryMemberArrayOutput {
	return i.ToFederatedConanRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedConanRepositoryMemberArray) ToFederatedConanRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedConanRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedConanRepositoryMemberArrayOutput)
}

type FederatedConanRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedConanRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedConanRepositoryMember)(nil)).Elem()
}

func (o FederatedConanRepositoryMemberOutput) ToFederatedConanRepositoryMemberOutput() FederatedConanRepositoryMemberOutput {
	return o
}

func (o FederatedConanRepositoryMemberOutput) ToFederatedConanRepositoryMemberOutputWithContext(ctx context.Context) FederatedConanRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedConanRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedConanRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name
func (o FederatedConanRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedConanRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedConanRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedConanRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedConanRepositoryMember)(nil)).Elem()
}

func (o FederatedConanRepositoryMemberArrayOutput) ToFederatedConanRepositoryMemberArrayOutput() FederatedConanRepositoryMemberArrayOutput {
	return o
}

func (o FederatedConanRepositoryMemberArrayOutput) ToFederatedConanRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedConanRepositoryMemberArrayOutput {
	return o
}

func (o FederatedConanRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedConanRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedConanRepositoryMember {
		return vs[0].([]FederatedConanRepositoryMember)[vs[1].(int)]
	}).(FederatedConanRepositoryMemberOutput)
}

type FederatedCondaRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url string `pulumi:"url"`
}

// FederatedCondaRepositoryMemberInput is an input type that accepts FederatedCondaRepositoryMemberArgs and FederatedCondaRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedCondaRepositoryMemberInput` via:
//
//          FederatedCondaRepositoryMemberArgs{...}
type FederatedCondaRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedCondaRepositoryMemberOutput() FederatedCondaRepositoryMemberOutput
	ToFederatedCondaRepositoryMemberOutputWithContext(context.Context) FederatedCondaRepositoryMemberOutput
}

type FederatedCondaRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedCondaRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedCondaRepositoryMember)(nil)).Elem()
}

func (i FederatedCondaRepositoryMemberArgs) ToFederatedCondaRepositoryMemberOutput() FederatedCondaRepositoryMemberOutput {
	return i.ToFederatedCondaRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedCondaRepositoryMemberArgs) ToFederatedCondaRepositoryMemberOutputWithContext(ctx context.Context) FederatedCondaRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedCondaRepositoryMemberOutput)
}

// FederatedCondaRepositoryMemberArrayInput is an input type that accepts FederatedCondaRepositoryMemberArray and FederatedCondaRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedCondaRepositoryMemberArrayInput` via:
//
//          FederatedCondaRepositoryMemberArray{ FederatedCondaRepositoryMemberArgs{...} }
type FederatedCondaRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedCondaRepositoryMemberArrayOutput() FederatedCondaRepositoryMemberArrayOutput
	ToFederatedCondaRepositoryMemberArrayOutputWithContext(context.Context) FederatedCondaRepositoryMemberArrayOutput
}

type FederatedCondaRepositoryMemberArray []FederatedCondaRepositoryMemberInput

func (FederatedCondaRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedCondaRepositoryMember)(nil)).Elem()
}

func (i FederatedCondaRepositoryMemberArray) ToFederatedCondaRepositoryMemberArrayOutput() FederatedCondaRepositoryMemberArrayOutput {
	return i.ToFederatedCondaRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedCondaRepositoryMemberArray) ToFederatedCondaRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedCondaRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedCondaRepositoryMemberArrayOutput)
}

type FederatedCondaRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedCondaRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedCondaRepositoryMember)(nil)).Elem()
}

func (o FederatedCondaRepositoryMemberOutput) ToFederatedCondaRepositoryMemberOutput() FederatedCondaRepositoryMemberOutput {
	return o
}

func (o FederatedCondaRepositoryMemberOutput) ToFederatedCondaRepositoryMemberOutputWithContext(ctx context.Context) FederatedCondaRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedCondaRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedCondaRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name
func (o FederatedCondaRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedCondaRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedCondaRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedCondaRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedCondaRepositoryMember)(nil)).Elem()
}

func (o FederatedCondaRepositoryMemberArrayOutput) ToFederatedCondaRepositoryMemberArrayOutput() FederatedCondaRepositoryMemberArrayOutput {
	return o
}

func (o FederatedCondaRepositoryMemberArrayOutput) ToFederatedCondaRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedCondaRepositoryMemberArrayOutput {
	return o
}

func (o FederatedCondaRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedCondaRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedCondaRepositoryMember {
		return vs[0].([]FederatedCondaRepositoryMember)[vs[1].(int)]
	}).(FederatedCondaRepositoryMemberOutput)
}

type FederatedCranRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url string `pulumi:"url"`
}

// FederatedCranRepositoryMemberInput is an input type that accepts FederatedCranRepositoryMemberArgs and FederatedCranRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedCranRepositoryMemberInput` via:
//
//          FederatedCranRepositoryMemberArgs{...}
type FederatedCranRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedCranRepositoryMemberOutput() FederatedCranRepositoryMemberOutput
	ToFederatedCranRepositoryMemberOutputWithContext(context.Context) FederatedCranRepositoryMemberOutput
}

type FederatedCranRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedCranRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedCranRepositoryMember)(nil)).Elem()
}

func (i FederatedCranRepositoryMemberArgs) ToFederatedCranRepositoryMemberOutput() FederatedCranRepositoryMemberOutput {
	return i.ToFederatedCranRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedCranRepositoryMemberArgs) ToFederatedCranRepositoryMemberOutputWithContext(ctx context.Context) FederatedCranRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedCranRepositoryMemberOutput)
}

// FederatedCranRepositoryMemberArrayInput is an input type that accepts FederatedCranRepositoryMemberArray and FederatedCranRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedCranRepositoryMemberArrayInput` via:
//
//          FederatedCranRepositoryMemberArray{ FederatedCranRepositoryMemberArgs{...} }
type FederatedCranRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedCranRepositoryMemberArrayOutput() FederatedCranRepositoryMemberArrayOutput
	ToFederatedCranRepositoryMemberArrayOutputWithContext(context.Context) FederatedCranRepositoryMemberArrayOutput
}

type FederatedCranRepositoryMemberArray []FederatedCranRepositoryMemberInput

func (FederatedCranRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedCranRepositoryMember)(nil)).Elem()
}

func (i FederatedCranRepositoryMemberArray) ToFederatedCranRepositoryMemberArrayOutput() FederatedCranRepositoryMemberArrayOutput {
	return i.ToFederatedCranRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedCranRepositoryMemberArray) ToFederatedCranRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedCranRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedCranRepositoryMemberArrayOutput)
}

type FederatedCranRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedCranRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedCranRepositoryMember)(nil)).Elem()
}

func (o FederatedCranRepositoryMemberOutput) ToFederatedCranRepositoryMemberOutput() FederatedCranRepositoryMemberOutput {
	return o
}

func (o FederatedCranRepositoryMemberOutput) ToFederatedCranRepositoryMemberOutputWithContext(ctx context.Context) FederatedCranRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedCranRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedCranRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name
func (o FederatedCranRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedCranRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedCranRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedCranRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedCranRepositoryMember)(nil)).Elem()
}

func (o FederatedCranRepositoryMemberArrayOutput) ToFederatedCranRepositoryMemberArrayOutput() FederatedCranRepositoryMemberArrayOutput {
	return o
}

func (o FederatedCranRepositoryMemberArrayOutput) ToFederatedCranRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedCranRepositoryMemberArrayOutput {
	return o
}

func (o FederatedCranRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedCranRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedCranRepositoryMember {
		return vs[0].([]FederatedCranRepositoryMember)[vs[1].(int)]
	}).(FederatedCranRepositoryMemberOutput)
}

type FederatedDebianRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url string `pulumi:"url"`
}

// FederatedDebianRepositoryMemberInput is an input type that accepts FederatedDebianRepositoryMemberArgs and FederatedDebianRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedDebianRepositoryMemberInput` via:
//
//          FederatedDebianRepositoryMemberArgs{...}
type FederatedDebianRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedDebianRepositoryMemberOutput() FederatedDebianRepositoryMemberOutput
	ToFederatedDebianRepositoryMemberOutputWithContext(context.Context) FederatedDebianRepositoryMemberOutput
}

type FederatedDebianRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedDebianRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedDebianRepositoryMember)(nil)).Elem()
}

func (i FederatedDebianRepositoryMemberArgs) ToFederatedDebianRepositoryMemberOutput() FederatedDebianRepositoryMemberOutput {
	return i.ToFederatedDebianRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedDebianRepositoryMemberArgs) ToFederatedDebianRepositoryMemberOutputWithContext(ctx context.Context) FederatedDebianRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedDebianRepositoryMemberOutput)
}

// FederatedDebianRepositoryMemberArrayInput is an input type that accepts FederatedDebianRepositoryMemberArray and FederatedDebianRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedDebianRepositoryMemberArrayInput` via:
//
//          FederatedDebianRepositoryMemberArray{ FederatedDebianRepositoryMemberArgs{...} }
type FederatedDebianRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedDebianRepositoryMemberArrayOutput() FederatedDebianRepositoryMemberArrayOutput
	ToFederatedDebianRepositoryMemberArrayOutputWithContext(context.Context) FederatedDebianRepositoryMemberArrayOutput
}

type FederatedDebianRepositoryMemberArray []FederatedDebianRepositoryMemberInput

func (FederatedDebianRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedDebianRepositoryMember)(nil)).Elem()
}

func (i FederatedDebianRepositoryMemberArray) ToFederatedDebianRepositoryMemberArrayOutput() FederatedDebianRepositoryMemberArrayOutput {
	return i.ToFederatedDebianRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedDebianRepositoryMemberArray) ToFederatedDebianRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedDebianRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedDebianRepositoryMemberArrayOutput)
}

type FederatedDebianRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedDebianRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedDebianRepositoryMember)(nil)).Elem()
}

func (o FederatedDebianRepositoryMemberOutput) ToFederatedDebianRepositoryMemberOutput() FederatedDebianRepositoryMemberOutput {
	return o
}

func (o FederatedDebianRepositoryMemberOutput) ToFederatedDebianRepositoryMemberOutputWithContext(ctx context.Context) FederatedDebianRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedDebianRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedDebianRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name
func (o FederatedDebianRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedDebianRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedDebianRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedDebianRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedDebianRepositoryMember)(nil)).Elem()
}

func (o FederatedDebianRepositoryMemberArrayOutput) ToFederatedDebianRepositoryMemberArrayOutput() FederatedDebianRepositoryMemberArrayOutput {
	return o
}

func (o FederatedDebianRepositoryMemberArrayOutput) ToFederatedDebianRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedDebianRepositoryMemberArrayOutput {
	return o
}

func (o FederatedDebianRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedDebianRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedDebianRepositoryMember {
		return vs[0].([]FederatedDebianRepositoryMember)[vs[1].(int)]
	}).(FederatedDebianRepositoryMemberOutput)
}

type FederatedDockerRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url string `pulumi:"url"`
}

// FederatedDockerRepositoryMemberInput is an input type that accepts FederatedDockerRepositoryMemberArgs and FederatedDockerRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedDockerRepositoryMemberInput` via:
//
//          FederatedDockerRepositoryMemberArgs{...}
type FederatedDockerRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedDockerRepositoryMemberOutput() FederatedDockerRepositoryMemberOutput
	ToFederatedDockerRepositoryMemberOutputWithContext(context.Context) FederatedDockerRepositoryMemberOutput
}

type FederatedDockerRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedDockerRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedDockerRepositoryMember)(nil)).Elem()
}

func (i FederatedDockerRepositoryMemberArgs) ToFederatedDockerRepositoryMemberOutput() FederatedDockerRepositoryMemberOutput {
	return i.ToFederatedDockerRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedDockerRepositoryMemberArgs) ToFederatedDockerRepositoryMemberOutputWithContext(ctx context.Context) FederatedDockerRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedDockerRepositoryMemberOutput)
}

// FederatedDockerRepositoryMemberArrayInput is an input type that accepts FederatedDockerRepositoryMemberArray and FederatedDockerRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedDockerRepositoryMemberArrayInput` via:
//
//          FederatedDockerRepositoryMemberArray{ FederatedDockerRepositoryMemberArgs{...} }
type FederatedDockerRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedDockerRepositoryMemberArrayOutput() FederatedDockerRepositoryMemberArrayOutput
	ToFederatedDockerRepositoryMemberArrayOutputWithContext(context.Context) FederatedDockerRepositoryMemberArrayOutput
}

type FederatedDockerRepositoryMemberArray []FederatedDockerRepositoryMemberInput

func (FederatedDockerRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedDockerRepositoryMember)(nil)).Elem()
}

func (i FederatedDockerRepositoryMemberArray) ToFederatedDockerRepositoryMemberArrayOutput() FederatedDockerRepositoryMemberArrayOutput {
	return i.ToFederatedDockerRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedDockerRepositoryMemberArray) ToFederatedDockerRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedDockerRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedDockerRepositoryMemberArrayOutput)
}

type FederatedDockerRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedDockerRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedDockerRepositoryMember)(nil)).Elem()
}

func (o FederatedDockerRepositoryMemberOutput) ToFederatedDockerRepositoryMemberOutput() FederatedDockerRepositoryMemberOutput {
	return o
}

func (o FederatedDockerRepositoryMemberOutput) ToFederatedDockerRepositoryMemberOutputWithContext(ctx context.Context) FederatedDockerRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedDockerRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedDockerRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name
func (o FederatedDockerRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedDockerRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedDockerRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedDockerRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedDockerRepositoryMember)(nil)).Elem()
}

func (o FederatedDockerRepositoryMemberArrayOutput) ToFederatedDockerRepositoryMemberArrayOutput() FederatedDockerRepositoryMemberArrayOutput {
	return o
}

func (o FederatedDockerRepositoryMemberArrayOutput) ToFederatedDockerRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedDockerRepositoryMemberArrayOutput {
	return o
}

func (o FederatedDockerRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedDockerRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedDockerRepositoryMember {
		return vs[0].([]FederatedDockerRepositoryMember)[vs[1].(int)]
	}).(FederatedDockerRepositoryMemberOutput)
}

type FederatedGemsRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url string `pulumi:"url"`
}

// FederatedGemsRepositoryMemberInput is an input type that accepts FederatedGemsRepositoryMemberArgs and FederatedGemsRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedGemsRepositoryMemberInput` via:
//
//          FederatedGemsRepositoryMemberArgs{...}
type FederatedGemsRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedGemsRepositoryMemberOutput() FederatedGemsRepositoryMemberOutput
	ToFederatedGemsRepositoryMemberOutputWithContext(context.Context) FederatedGemsRepositoryMemberOutput
}

type FederatedGemsRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedGemsRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedGemsRepositoryMember)(nil)).Elem()
}

func (i FederatedGemsRepositoryMemberArgs) ToFederatedGemsRepositoryMemberOutput() FederatedGemsRepositoryMemberOutput {
	return i.ToFederatedGemsRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedGemsRepositoryMemberArgs) ToFederatedGemsRepositoryMemberOutputWithContext(ctx context.Context) FederatedGemsRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedGemsRepositoryMemberOutput)
}

// FederatedGemsRepositoryMemberArrayInput is an input type that accepts FederatedGemsRepositoryMemberArray and FederatedGemsRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedGemsRepositoryMemberArrayInput` via:
//
//          FederatedGemsRepositoryMemberArray{ FederatedGemsRepositoryMemberArgs{...} }
type FederatedGemsRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedGemsRepositoryMemberArrayOutput() FederatedGemsRepositoryMemberArrayOutput
	ToFederatedGemsRepositoryMemberArrayOutputWithContext(context.Context) FederatedGemsRepositoryMemberArrayOutput
}

type FederatedGemsRepositoryMemberArray []FederatedGemsRepositoryMemberInput

func (FederatedGemsRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedGemsRepositoryMember)(nil)).Elem()
}

func (i FederatedGemsRepositoryMemberArray) ToFederatedGemsRepositoryMemberArrayOutput() FederatedGemsRepositoryMemberArrayOutput {
	return i.ToFederatedGemsRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedGemsRepositoryMemberArray) ToFederatedGemsRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedGemsRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedGemsRepositoryMemberArrayOutput)
}

type FederatedGemsRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedGemsRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedGemsRepositoryMember)(nil)).Elem()
}

func (o FederatedGemsRepositoryMemberOutput) ToFederatedGemsRepositoryMemberOutput() FederatedGemsRepositoryMemberOutput {
	return o
}

func (o FederatedGemsRepositoryMemberOutput) ToFederatedGemsRepositoryMemberOutputWithContext(ctx context.Context) FederatedGemsRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedGemsRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedGemsRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name
func (o FederatedGemsRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedGemsRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedGemsRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedGemsRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedGemsRepositoryMember)(nil)).Elem()
}

func (o FederatedGemsRepositoryMemberArrayOutput) ToFederatedGemsRepositoryMemberArrayOutput() FederatedGemsRepositoryMemberArrayOutput {
	return o
}

func (o FederatedGemsRepositoryMemberArrayOutput) ToFederatedGemsRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedGemsRepositoryMemberArrayOutput {
	return o
}

func (o FederatedGemsRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedGemsRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedGemsRepositoryMember {
		return vs[0].([]FederatedGemsRepositoryMember)[vs[1].(int)]
	}).(FederatedGemsRepositoryMemberOutput)
}

type FederatedGenericRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url string `pulumi:"url"`
}

// FederatedGenericRepositoryMemberInput is an input type that accepts FederatedGenericRepositoryMemberArgs and FederatedGenericRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedGenericRepositoryMemberInput` via:
//
//          FederatedGenericRepositoryMemberArgs{...}
type FederatedGenericRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedGenericRepositoryMemberOutput() FederatedGenericRepositoryMemberOutput
	ToFederatedGenericRepositoryMemberOutputWithContext(context.Context) FederatedGenericRepositoryMemberOutput
}

type FederatedGenericRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedGenericRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedGenericRepositoryMember)(nil)).Elem()
}

func (i FederatedGenericRepositoryMemberArgs) ToFederatedGenericRepositoryMemberOutput() FederatedGenericRepositoryMemberOutput {
	return i.ToFederatedGenericRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedGenericRepositoryMemberArgs) ToFederatedGenericRepositoryMemberOutputWithContext(ctx context.Context) FederatedGenericRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedGenericRepositoryMemberOutput)
}

// FederatedGenericRepositoryMemberArrayInput is an input type that accepts FederatedGenericRepositoryMemberArray and FederatedGenericRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedGenericRepositoryMemberArrayInput` via:
//
//          FederatedGenericRepositoryMemberArray{ FederatedGenericRepositoryMemberArgs{...} }
type FederatedGenericRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedGenericRepositoryMemberArrayOutput() FederatedGenericRepositoryMemberArrayOutput
	ToFederatedGenericRepositoryMemberArrayOutputWithContext(context.Context) FederatedGenericRepositoryMemberArrayOutput
}

type FederatedGenericRepositoryMemberArray []FederatedGenericRepositoryMemberInput

func (FederatedGenericRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedGenericRepositoryMember)(nil)).Elem()
}

func (i FederatedGenericRepositoryMemberArray) ToFederatedGenericRepositoryMemberArrayOutput() FederatedGenericRepositoryMemberArrayOutput {
	return i.ToFederatedGenericRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedGenericRepositoryMemberArray) ToFederatedGenericRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedGenericRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedGenericRepositoryMemberArrayOutput)
}

type FederatedGenericRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedGenericRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedGenericRepositoryMember)(nil)).Elem()
}

func (o FederatedGenericRepositoryMemberOutput) ToFederatedGenericRepositoryMemberOutput() FederatedGenericRepositoryMemberOutput {
	return o
}

func (o FederatedGenericRepositoryMemberOutput) ToFederatedGenericRepositoryMemberOutputWithContext(ctx context.Context) FederatedGenericRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedGenericRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedGenericRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name
func (o FederatedGenericRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedGenericRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedGenericRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedGenericRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedGenericRepositoryMember)(nil)).Elem()
}

func (o FederatedGenericRepositoryMemberArrayOutput) ToFederatedGenericRepositoryMemberArrayOutput() FederatedGenericRepositoryMemberArrayOutput {
	return o
}

func (o FederatedGenericRepositoryMemberArrayOutput) ToFederatedGenericRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedGenericRepositoryMemberArrayOutput {
	return o
}

func (o FederatedGenericRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedGenericRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedGenericRepositoryMember {
		return vs[0].([]FederatedGenericRepositoryMember)[vs[1].(int)]
	}).(FederatedGenericRepositoryMemberOutput)
}

type FederatedGitltfsRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url string `pulumi:"url"`
}

// FederatedGitltfsRepositoryMemberInput is an input type that accepts FederatedGitltfsRepositoryMemberArgs and FederatedGitltfsRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedGitltfsRepositoryMemberInput` via:
//
//          FederatedGitltfsRepositoryMemberArgs{...}
type FederatedGitltfsRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedGitltfsRepositoryMemberOutput() FederatedGitltfsRepositoryMemberOutput
	ToFederatedGitltfsRepositoryMemberOutputWithContext(context.Context) FederatedGitltfsRepositoryMemberOutput
}

type FederatedGitltfsRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedGitltfsRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedGitltfsRepositoryMember)(nil)).Elem()
}

func (i FederatedGitltfsRepositoryMemberArgs) ToFederatedGitltfsRepositoryMemberOutput() FederatedGitltfsRepositoryMemberOutput {
	return i.ToFederatedGitltfsRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedGitltfsRepositoryMemberArgs) ToFederatedGitltfsRepositoryMemberOutputWithContext(ctx context.Context) FederatedGitltfsRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedGitltfsRepositoryMemberOutput)
}

// FederatedGitltfsRepositoryMemberArrayInput is an input type that accepts FederatedGitltfsRepositoryMemberArray and FederatedGitltfsRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedGitltfsRepositoryMemberArrayInput` via:
//
//          FederatedGitltfsRepositoryMemberArray{ FederatedGitltfsRepositoryMemberArgs{...} }
type FederatedGitltfsRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedGitltfsRepositoryMemberArrayOutput() FederatedGitltfsRepositoryMemberArrayOutput
	ToFederatedGitltfsRepositoryMemberArrayOutputWithContext(context.Context) FederatedGitltfsRepositoryMemberArrayOutput
}

type FederatedGitltfsRepositoryMemberArray []FederatedGitltfsRepositoryMemberInput

func (FederatedGitltfsRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedGitltfsRepositoryMember)(nil)).Elem()
}

func (i FederatedGitltfsRepositoryMemberArray) ToFederatedGitltfsRepositoryMemberArrayOutput() FederatedGitltfsRepositoryMemberArrayOutput {
	return i.ToFederatedGitltfsRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedGitltfsRepositoryMemberArray) ToFederatedGitltfsRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedGitltfsRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedGitltfsRepositoryMemberArrayOutput)
}

type FederatedGitltfsRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedGitltfsRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedGitltfsRepositoryMember)(nil)).Elem()
}

func (o FederatedGitltfsRepositoryMemberOutput) ToFederatedGitltfsRepositoryMemberOutput() FederatedGitltfsRepositoryMemberOutput {
	return o
}

func (o FederatedGitltfsRepositoryMemberOutput) ToFederatedGitltfsRepositoryMemberOutputWithContext(ctx context.Context) FederatedGitltfsRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedGitltfsRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedGitltfsRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name
func (o FederatedGitltfsRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedGitltfsRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedGitltfsRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedGitltfsRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedGitltfsRepositoryMember)(nil)).Elem()
}

func (o FederatedGitltfsRepositoryMemberArrayOutput) ToFederatedGitltfsRepositoryMemberArrayOutput() FederatedGitltfsRepositoryMemberArrayOutput {
	return o
}

func (o FederatedGitltfsRepositoryMemberArrayOutput) ToFederatedGitltfsRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedGitltfsRepositoryMemberArrayOutput {
	return o
}

func (o FederatedGitltfsRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedGitltfsRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedGitltfsRepositoryMember {
		return vs[0].([]FederatedGitltfsRepositoryMember)[vs[1].(int)]
	}).(FederatedGitltfsRepositoryMemberOutput)
}

type FederatedGoRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url string `pulumi:"url"`
}

// FederatedGoRepositoryMemberInput is an input type that accepts FederatedGoRepositoryMemberArgs and FederatedGoRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedGoRepositoryMemberInput` via:
//
//          FederatedGoRepositoryMemberArgs{...}
type FederatedGoRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedGoRepositoryMemberOutput() FederatedGoRepositoryMemberOutput
	ToFederatedGoRepositoryMemberOutputWithContext(context.Context) FederatedGoRepositoryMemberOutput
}

type FederatedGoRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedGoRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedGoRepositoryMember)(nil)).Elem()
}

func (i FederatedGoRepositoryMemberArgs) ToFederatedGoRepositoryMemberOutput() FederatedGoRepositoryMemberOutput {
	return i.ToFederatedGoRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedGoRepositoryMemberArgs) ToFederatedGoRepositoryMemberOutputWithContext(ctx context.Context) FederatedGoRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedGoRepositoryMemberOutput)
}

// FederatedGoRepositoryMemberArrayInput is an input type that accepts FederatedGoRepositoryMemberArray and FederatedGoRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedGoRepositoryMemberArrayInput` via:
//
//          FederatedGoRepositoryMemberArray{ FederatedGoRepositoryMemberArgs{...} }
type FederatedGoRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedGoRepositoryMemberArrayOutput() FederatedGoRepositoryMemberArrayOutput
	ToFederatedGoRepositoryMemberArrayOutputWithContext(context.Context) FederatedGoRepositoryMemberArrayOutput
}

type FederatedGoRepositoryMemberArray []FederatedGoRepositoryMemberInput

func (FederatedGoRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedGoRepositoryMember)(nil)).Elem()
}

func (i FederatedGoRepositoryMemberArray) ToFederatedGoRepositoryMemberArrayOutput() FederatedGoRepositoryMemberArrayOutput {
	return i.ToFederatedGoRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedGoRepositoryMemberArray) ToFederatedGoRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedGoRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedGoRepositoryMemberArrayOutput)
}

type FederatedGoRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedGoRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedGoRepositoryMember)(nil)).Elem()
}

func (o FederatedGoRepositoryMemberOutput) ToFederatedGoRepositoryMemberOutput() FederatedGoRepositoryMemberOutput {
	return o
}

func (o FederatedGoRepositoryMemberOutput) ToFederatedGoRepositoryMemberOutputWithContext(ctx context.Context) FederatedGoRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedGoRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedGoRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name
func (o FederatedGoRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedGoRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedGoRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedGoRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedGoRepositoryMember)(nil)).Elem()
}

func (o FederatedGoRepositoryMemberArrayOutput) ToFederatedGoRepositoryMemberArrayOutput() FederatedGoRepositoryMemberArrayOutput {
	return o
}

func (o FederatedGoRepositoryMemberArrayOutput) ToFederatedGoRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedGoRepositoryMemberArrayOutput {
	return o
}

func (o FederatedGoRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedGoRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedGoRepositoryMember {
		return vs[0].([]FederatedGoRepositoryMember)[vs[1].(int)]
	}).(FederatedGoRepositoryMemberOutput)
}

type FederatedGradleRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url string `pulumi:"url"`
}

// FederatedGradleRepositoryMemberInput is an input type that accepts FederatedGradleRepositoryMemberArgs and FederatedGradleRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedGradleRepositoryMemberInput` via:
//
//          FederatedGradleRepositoryMemberArgs{...}
type FederatedGradleRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedGradleRepositoryMemberOutput() FederatedGradleRepositoryMemberOutput
	ToFederatedGradleRepositoryMemberOutputWithContext(context.Context) FederatedGradleRepositoryMemberOutput
}

type FederatedGradleRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedGradleRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedGradleRepositoryMember)(nil)).Elem()
}

func (i FederatedGradleRepositoryMemberArgs) ToFederatedGradleRepositoryMemberOutput() FederatedGradleRepositoryMemberOutput {
	return i.ToFederatedGradleRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedGradleRepositoryMemberArgs) ToFederatedGradleRepositoryMemberOutputWithContext(ctx context.Context) FederatedGradleRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedGradleRepositoryMemberOutput)
}

// FederatedGradleRepositoryMemberArrayInput is an input type that accepts FederatedGradleRepositoryMemberArray and FederatedGradleRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedGradleRepositoryMemberArrayInput` via:
//
//          FederatedGradleRepositoryMemberArray{ FederatedGradleRepositoryMemberArgs{...} }
type FederatedGradleRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedGradleRepositoryMemberArrayOutput() FederatedGradleRepositoryMemberArrayOutput
	ToFederatedGradleRepositoryMemberArrayOutputWithContext(context.Context) FederatedGradleRepositoryMemberArrayOutput
}

type FederatedGradleRepositoryMemberArray []FederatedGradleRepositoryMemberInput

func (FederatedGradleRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedGradleRepositoryMember)(nil)).Elem()
}

func (i FederatedGradleRepositoryMemberArray) ToFederatedGradleRepositoryMemberArrayOutput() FederatedGradleRepositoryMemberArrayOutput {
	return i.ToFederatedGradleRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedGradleRepositoryMemberArray) ToFederatedGradleRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedGradleRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedGradleRepositoryMemberArrayOutput)
}

type FederatedGradleRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedGradleRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedGradleRepositoryMember)(nil)).Elem()
}

func (o FederatedGradleRepositoryMemberOutput) ToFederatedGradleRepositoryMemberOutput() FederatedGradleRepositoryMemberOutput {
	return o
}

func (o FederatedGradleRepositoryMemberOutput) ToFederatedGradleRepositoryMemberOutputWithContext(ctx context.Context) FederatedGradleRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedGradleRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedGradleRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name
func (o FederatedGradleRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedGradleRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedGradleRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedGradleRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedGradleRepositoryMember)(nil)).Elem()
}

func (o FederatedGradleRepositoryMemberArrayOutput) ToFederatedGradleRepositoryMemberArrayOutput() FederatedGradleRepositoryMemberArrayOutput {
	return o
}

func (o FederatedGradleRepositoryMemberArrayOutput) ToFederatedGradleRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedGradleRepositoryMemberArrayOutput {
	return o
}

func (o FederatedGradleRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedGradleRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedGradleRepositoryMember {
		return vs[0].([]FederatedGradleRepositoryMember)[vs[1].(int)]
	}).(FederatedGradleRepositoryMemberOutput)
}

type FederatedHelmRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url string `pulumi:"url"`
}

// FederatedHelmRepositoryMemberInput is an input type that accepts FederatedHelmRepositoryMemberArgs and FederatedHelmRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedHelmRepositoryMemberInput` via:
//
//          FederatedHelmRepositoryMemberArgs{...}
type FederatedHelmRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedHelmRepositoryMemberOutput() FederatedHelmRepositoryMemberOutput
	ToFederatedHelmRepositoryMemberOutputWithContext(context.Context) FederatedHelmRepositoryMemberOutput
}

type FederatedHelmRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedHelmRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedHelmRepositoryMember)(nil)).Elem()
}

func (i FederatedHelmRepositoryMemberArgs) ToFederatedHelmRepositoryMemberOutput() FederatedHelmRepositoryMemberOutput {
	return i.ToFederatedHelmRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedHelmRepositoryMemberArgs) ToFederatedHelmRepositoryMemberOutputWithContext(ctx context.Context) FederatedHelmRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedHelmRepositoryMemberOutput)
}

// FederatedHelmRepositoryMemberArrayInput is an input type that accepts FederatedHelmRepositoryMemberArray and FederatedHelmRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedHelmRepositoryMemberArrayInput` via:
//
//          FederatedHelmRepositoryMemberArray{ FederatedHelmRepositoryMemberArgs{...} }
type FederatedHelmRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedHelmRepositoryMemberArrayOutput() FederatedHelmRepositoryMemberArrayOutput
	ToFederatedHelmRepositoryMemberArrayOutputWithContext(context.Context) FederatedHelmRepositoryMemberArrayOutput
}

type FederatedHelmRepositoryMemberArray []FederatedHelmRepositoryMemberInput

func (FederatedHelmRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedHelmRepositoryMember)(nil)).Elem()
}

func (i FederatedHelmRepositoryMemberArray) ToFederatedHelmRepositoryMemberArrayOutput() FederatedHelmRepositoryMemberArrayOutput {
	return i.ToFederatedHelmRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedHelmRepositoryMemberArray) ToFederatedHelmRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedHelmRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedHelmRepositoryMemberArrayOutput)
}

type FederatedHelmRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedHelmRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedHelmRepositoryMember)(nil)).Elem()
}

func (o FederatedHelmRepositoryMemberOutput) ToFederatedHelmRepositoryMemberOutput() FederatedHelmRepositoryMemberOutput {
	return o
}

func (o FederatedHelmRepositoryMemberOutput) ToFederatedHelmRepositoryMemberOutputWithContext(ctx context.Context) FederatedHelmRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedHelmRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedHelmRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name
func (o FederatedHelmRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedHelmRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedHelmRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedHelmRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedHelmRepositoryMember)(nil)).Elem()
}

func (o FederatedHelmRepositoryMemberArrayOutput) ToFederatedHelmRepositoryMemberArrayOutput() FederatedHelmRepositoryMemberArrayOutput {
	return o
}

func (o FederatedHelmRepositoryMemberArrayOutput) ToFederatedHelmRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedHelmRepositoryMemberArrayOutput {
	return o
}

func (o FederatedHelmRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedHelmRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedHelmRepositoryMember {
		return vs[0].([]FederatedHelmRepositoryMember)[vs[1].(int)]
	}).(FederatedHelmRepositoryMemberOutput)
}

type FederatedIvyRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url string `pulumi:"url"`
}

// FederatedIvyRepositoryMemberInput is an input type that accepts FederatedIvyRepositoryMemberArgs and FederatedIvyRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedIvyRepositoryMemberInput` via:
//
//          FederatedIvyRepositoryMemberArgs{...}
type FederatedIvyRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedIvyRepositoryMemberOutput() FederatedIvyRepositoryMemberOutput
	ToFederatedIvyRepositoryMemberOutputWithContext(context.Context) FederatedIvyRepositoryMemberOutput
}

type FederatedIvyRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedIvyRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedIvyRepositoryMember)(nil)).Elem()
}

func (i FederatedIvyRepositoryMemberArgs) ToFederatedIvyRepositoryMemberOutput() FederatedIvyRepositoryMemberOutput {
	return i.ToFederatedIvyRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedIvyRepositoryMemberArgs) ToFederatedIvyRepositoryMemberOutputWithContext(ctx context.Context) FederatedIvyRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedIvyRepositoryMemberOutput)
}

// FederatedIvyRepositoryMemberArrayInput is an input type that accepts FederatedIvyRepositoryMemberArray and FederatedIvyRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedIvyRepositoryMemberArrayInput` via:
//
//          FederatedIvyRepositoryMemberArray{ FederatedIvyRepositoryMemberArgs{...} }
type FederatedIvyRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedIvyRepositoryMemberArrayOutput() FederatedIvyRepositoryMemberArrayOutput
	ToFederatedIvyRepositoryMemberArrayOutputWithContext(context.Context) FederatedIvyRepositoryMemberArrayOutput
}

type FederatedIvyRepositoryMemberArray []FederatedIvyRepositoryMemberInput

func (FederatedIvyRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedIvyRepositoryMember)(nil)).Elem()
}

func (i FederatedIvyRepositoryMemberArray) ToFederatedIvyRepositoryMemberArrayOutput() FederatedIvyRepositoryMemberArrayOutput {
	return i.ToFederatedIvyRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedIvyRepositoryMemberArray) ToFederatedIvyRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedIvyRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedIvyRepositoryMemberArrayOutput)
}

type FederatedIvyRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedIvyRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedIvyRepositoryMember)(nil)).Elem()
}

func (o FederatedIvyRepositoryMemberOutput) ToFederatedIvyRepositoryMemberOutput() FederatedIvyRepositoryMemberOutput {
	return o
}

func (o FederatedIvyRepositoryMemberOutput) ToFederatedIvyRepositoryMemberOutputWithContext(ctx context.Context) FederatedIvyRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedIvyRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedIvyRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name
func (o FederatedIvyRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedIvyRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedIvyRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedIvyRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedIvyRepositoryMember)(nil)).Elem()
}

func (o FederatedIvyRepositoryMemberArrayOutput) ToFederatedIvyRepositoryMemberArrayOutput() FederatedIvyRepositoryMemberArrayOutput {
	return o
}

func (o FederatedIvyRepositoryMemberArrayOutput) ToFederatedIvyRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedIvyRepositoryMemberArrayOutput {
	return o
}

func (o FederatedIvyRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedIvyRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedIvyRepositoryMember {
		return vs[0].([]FederatedIvyRepositoryMember)[vs[1].(int)]
	}).(FederatedIvyRepositoryMemberOutput)
}

type FederatedMavenRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url string `pulumi:"url"`
}

// FederatedMavenRepositoryMemberInput is an input type that accepts FederatedMavenRepositoryMemberArgs and FederatedMavenRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedMavenRepositoryMemberInput` via:
//
//          FederatedMavenRepositoryMemberArgs{...}
type FederatedMavenRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedMavenRepositoryMemberOutput() FederatedMavenRepositoryMemberOutput
	ToFederatedMavenRepositoryMemberOutputWithContext(context.Context) FederatedMavenRepositoryMemberOutput
}

type FederatedMavenRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedMavenRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedMavenRepositoryMember)(nil)).Elem()
}

func (i FederatedMavenRepositoryMemberArgs) ToFederatedMavenRepositoryMemberOutput() FederatedMavenRepositoryMemberOutput {
	return i.ToFederatedMavenRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedMavenRepositoryMemberArgs) ToFederatedMavenRepositoryMemberOutputWithContext(ctx context.Context) FederatedMavenRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedMavenRepositoryMemberOutput)
}

// FederatedMavenRepositoryMemberArrayInput is an input type that accepts FederatedMavenRepositoryMemberArray and FederatedMavenRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedMavenRepositoryMemberArrayInput` via:
//
//          FederatedMavenRepositoryMemberArray{ FederatedMavenRepositoryMemberArgs{...} }
type FederatedMavenRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedMavenRepositoryMemberArrayOutput() FederatedMavenRepositoryMemberArrayOutput
	ToFederatedMavenRepositoryMemberArrayOutputWithContext(context.Context) FederatedMavenRepositoryMemberArrayOutput
}

type FederatedMavenRepositoryMemberArray []FederatedMavenRepositoryMemberInput

func (FederatedMavenRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedMavenRepositoryMember)(nil)).Elem()
}

func (i FederatedMavenRepositoryMemberArray) ToFederatedMavenRepositoryMemberArrayOutput() FederatedMavenRepositoryMemberArrayOutput {
	return i.ToFederatedMavenRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedMavenRepositoryMemberArray) ToFederatedMavenRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedMavenRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedMavenRepositoryMemberArrayOutput)
}

type FederatedMavenRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedMavenRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedMavenRepositoryMember)(nil)).Elem()
}

func (o FederatedMavenRepositoryMemberOutput) ToFederatedMavenRepositoryMemberOutput() FederatedMavenRepositoryMemberOutput {
	return o
}

func (o FederatedMavenRepositoryMemberOutput) ToFederatedMavenRepositoryMemberOutputWithContext(ctx context.Context) FederatedMavenRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedMavenRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedMavenRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name
func (o FederatedMavenRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedMavenRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedMavenRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedMavenRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedMavenRepositoryMember)(nil)).Elem()
}

func (o FederatedMavenRepositoryMemberArrayOutput) ToFederatedMavenRepositoryMemberArrayOutput() FederatedMavenRepositoryMemberArrayOutput {
	return o
}

func (o FederatedMavenRepositoryMemberArrayOutput) ToFederatedMavenRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedMavenRepositoryMemberArrayOutput {
	return o
}

func (o FederatedMavenRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedMavenRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedMavenRepositoryMember {
		return vs[0].([]FederatedMavenRepositoryMember)[vs[1].(int)]
	}).(FederatedMavenRepositoryMemberOutput)
}

type FederatedNpmRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url string `pulumi:"url"`
}

// FederatedNpmRepositoryMemberInput is an input type that accepts FederatedNpmRepositoryMemberArgs and FederatedNpmRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedNpmRepositoryMemberInput` via:
//
//          FederatedNpmRepositoryMemberArgs{...}
type FederatedNpmRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedNpmRepositoryMemberOutput() FederatedNpmRepositoryMemberOutput
	ToFederatedNpmRepositoryMemberOutputWithContext(context.Context) FederatedNpmRepositoryMemberOutput
}

type FederatedNpmRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedNpmRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedNpmRepositoryMember)(nil)).Elem()
}

func (i FederatedNpmRepositoryMemberArgs) ToFederatedNpmRepositoryMemberOutput() FederatedNpmRepositoryMemberOutput {
	return i.ToFederatedNpmRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedNpmRepositoryMemberArgs) ToFederatedNpmRepositoryMemberOutputWithContext(ctx context.Context) FederatedNpmRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedNpmRepositoryMemberOutput)
}

// FederatedNpmRepositoryMemberArrayInput is an input type that accepts FederatedNpmRepositoryMemberArray and FederatedNpmRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedNpmRepositoryMemberArrayInput` via:
//
//          FederatedNpmRepositoryMemberArray{ FederatedNpmRepositoryMemberArgs{...} }
type FederatedNpmRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedNpmRepositoryMemberArrayOutput() FederatedNpmRepositoryMemberArrayOutput
	ToFederatedNpmRepositoryMemberArrayOutputWithContext(context.Context) FederatedNpmRepositoryMemberArrayOutput
}

type FederatedNpmRepositoryMemberArray []FederatedNpmRepositoryMemberInput

func (FederatedNpmRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedNpmRepositoryMember)(nil)).Elem()
}

func (i FederatedNpmRepositoryMemberArray) ToFederatedNpmRepositoryMemberArrayOutput() FederatedNpmRepositoryMemberArrayOutput {
	return i.ToFederatedNpmRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedNpmRepositoryMemberArray) ToFederatedNpmRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedNpmRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedNpmRepositoryMemberArrayOutput)
}

type FederatedNpmRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedNpmRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedNpmRepositoryMember)(nil)).Elem()
}

func (o FederatedNpmRepositoryMemberOutput) ToFederatedNpmRepositoryMemberOutput() FederatedNpmRepositoryMemberOutput {
	return o
}

func (o FederatedNpmRepositoryMemberOutput) ToFederatedNpmRepositoryMemberOutputWithContext(ctx context.Context) FederatedNpmRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedNpmRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedNpmRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name
func (o FederatedNpmRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedNpmRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedNpmRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedNpmRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedNpmRepositoryMember)(nil)).Elem()
}

func (o FederatedNpmRepositoryMemberArrayOutput) ToFederatedNpmRepositoryMemberArrayOutput() FederatedNpmRepositoryMemberArrayOutput {
	return o
}

func (o FederatedNpmRepositoryMemberArrayOutput) ToFederatedNpmRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedNpmRepositoryMemberArrayOutput {
	return o
}

func (o FederatedNpmRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedNpmRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedNpmRepositoryMember {
		return vs[0].([]FederatedNpmRepositoryMember)[vs[1].(int)]
	}).(FederatedNpmRepositoryMemberOutput)
}

type FederatedNugetRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url string `pulumi:"url"`
}

// FederatedNugetRepositoryMemberInput is an input type that accepts FederatedNugetRepositoryMemberArgs and FederatedNugetRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedNugetRepositoryMemberInput` via:
//
//          FederatedNugetRepositoryMemberArgs{...}
type FederatedNugetRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedNugetRepositoryMemberOutput() FederatedNugetRepositoryMemberOutput
	ToFederatedNugetRepositoryMemberOutputWithContext(context.Context) FederatedNugetRepositoryMemberOutput
}

type FederatedNugetRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedNugetRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedNugetRepositoryMember)(nil)).Elem()
}

func (i FederatedNugetRepositoryMemberArgs) ToFederatedNugetRepositoryMemberOutput() FederatedNugetRepositoryMemberOutput {
	return i.ToFederatedNugetRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedNugetRepositoryMemberArgs) ToFederatedNugetRepositoryMemberOutputWithContext(ctx context.Context) FederatedNugetRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedNugetRepositoryMemberOutput)
}

// FederatedNugetRepositoryMemberArrayInput is an input type that accepts FederatedNugetRepositoryMemberArray and FederatedNugetRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedNugetRepositoryMemberArrayInput` via:
//
//          FederatedNugetRepositoryMemberArray{ FederatedNugetRepositoryMemberArgs{...} }
type FederatedNugetRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedNugetRepositoryMemberArrayOutput() FederatedNugetRepositoryMemberArrayOutput
	ToFederatedNugetRepositoryMemberArrayOutputWithContext(context.Context) FederatedNugetRepositoryMemberArrayOutput
}

type FederatedNugetRepositoryMemberArray []FederatedNugetRepositoryMemberInput

func (FederatedNugetRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedNugetRepositoryMember)(nil)).Elem()
}

func (i FederatedNugetRepositoryMemberArray) ToFederatedNugetRepositoryMemberArrayOutput() FederatedNugetRepositoryMemberArrayOutput {
	return i.ToFederatedNugetRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedNugetRepositoryMemberArray) ToFederatedNugetRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedNugetRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedNugetRepositoryMemberArrayOutput)
}

type FederatedNugetRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedNugetRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedNugetRepositoryMember)(nil)).Elem()
}

func (o FederatedNugetRepositoryMemberOutput) ToFederatedNugetRepositoryMemberOutput() FederatedNugetRepositoryMemberOutput {
	return o
}

func (o FederatedNugetRepositoryMemberOutput) ToFederatedNugetRepositoryMemberOutputWithContext(ctx context.Context) FederatedNugetRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedNugetRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedNugetRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name
func (o FederatedNugetRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedNugetRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedNugetRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedNugetRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedNugetRepositoryMember)(nil)).Elem()
}

func (o FederatedNugetRepositoryMemberArrayOutput) ToFederatedNugetRepositoryMemberArrayOutput() FederatedNugetRepositoryMemberArrayOutput {
	return o
}

func (o FederatedNugetRepositoryMemberArrayOutput) ToFederatedNugetRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedNugetRepositoryMemberArrayOutput {
	return o
}

func (o FederatedNugetRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedNugetRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedNugetRepositoryMember {
		return vs[0].([]FederatedNugetRepositoryMember)[vs[1].(int)]
	}).(FederatedNugetRepositoryMemberOutput)
}

type FederatedOpkgRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url string `pulumi:"url"`
}

// FederatedOpkgRepositoryMemberInput is an input type that accepts FederatedOpkgRepositoryMemberArgs and FederatedOpkgRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedOpkgRepositoryMemberInput` via:
//
//          FederatedOpkgRepositoryMemberArgs{...}
type FederatedOpkgRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedOpkgRepositoryMemberOutput() FederatedOpkgRepositoryMemberOutput
	ToFederatedOpkgRepositoryMemberOutputWithContext(context.Context) FederatedOpkgRepositoryMemberOutput
}

type FederatedOpkgRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedOpkgRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedOpkgRepositoryMember)(nil)).Elem()
}

func (i FederatedOpkgRepositoryMemberArgs) ToFederatedOpkgRepositoryMemberOutput() FederatedOpkgRepositoryMemberOutput {
	return i.ToFederatedOpkgRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedOpkgRepositoryMemberArgs) ToFederatedOpkgRepositoryMemberOutputWithContext(ctx context.Context) FederatedOpkgRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedOpkgRepositoryMemberOutput)
}

// FederatedOpkgRepositoryMemberArrayInput is an input type that accepts FederatedOpkgRepositoryMemberArray and FederatedOpkgRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedOpkgRepositoryMemberArrayInput` via:
//
//          FederatedOpkgRepositoryMemberArray{ FederatedOpkgRepositoryMemberArgs{...} }
type FederatedOpkgRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedOpkgRepositoryMemberArrayOutput() FederatedOpkgRepositoryMemberArrayOutput
	ToFederatedOpkgRepositoryMemberArrayOutputWithContext(context.Context) FederatedOpkgRepositoryMemberArrayOutput
}

type FederatedOpkgRepositoryMemberArray []FederatedOpkgRepositoryMemberInput

func (FederatedOpkgRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedOpkgRepositoryMember)(nil)).Elem()
}

func (i FederatedOpkgRepositoryMemberArray) ToFederatedOpkgRepositoryMemberArrayOutput() FederatedOpkgRepositoryMemberArrayOutput {
	return i.ToFederatedOpkgRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedOpkgRepositoryMemberArray) ToFederatedOpkgRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedOpkgRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedOpkgRepositoryMemberArrayOutput)
}

type FederatedOpkgRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedOpkgRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedOpkgRepositoryMember)(nil)).Elem()
}

func (o FederatedOpkgRepositoryMemberOutput) ToFederatedOpkgRepositoryMemberOutput() FederatedOpkgRepositoryMemberOutput {
	return o
}

func (o FederatedOpkgRepositoryMemberOutput) ToFederatedOpkgRepositoryMemberOutputWithContext(ctx context.Context) FederatedOpkgRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedOpkgRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedOpkgRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name
func (o FederatedOpkgRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedOpkgRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedOpkgRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedOpkgRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedOpkgRepositoryMember)(nil)).Elem()
}

func (o FederatedOpkgRepositoryMemberArrayOutput) ToFederatedOpkgRepositoryMemberArrayOutput() FederatedOpkgRepositoryMemberArrayOutput {
	return o
}

func (o FederatedOpkgRepositoryMemberArrayOutput) ToFederatedOpkgRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedOpkgRepositoryMemberArrayOutput {
	return o
}

func (o FederatedOpkgRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedOpkgRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedOpkgRepositoryMember {
		return vs[0].([]FederatedOpkgRepositoryMember)[vs[1].(int)]
	}).(FederatedOpkgRepositoryMemberOutput)
}

type FederatedPuppetRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url string `pulumi:"url"`
}

// FederatedPuppetRepositoryMemberInput is an input type that accepts FederatedPuppetRepositoryMemberArgs and FederatedPuppetRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedPuppetRepositoryMemberInput` via:
//
//          FederatedPuppetRepositoryMemberArgs{...}
type FederatedPuppetRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedPuppetRepositoryMemberOutput() FederatedPuppetRepositoryMemberOutput
	ToFederatedPuppetRepositoryMemberOutputWithContext(context.Context) FederatedPuppetRepositoryMemberOutput
}

type FederatedPuppetRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedPuppetRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedPuppetRepositoryMember)(nil)).Elem()
}

func (i FederatedPuppetRepositoryMemberArgs) ToFederatedPuppetRepositoryMemberOutput() FederatedPuppetRepositoryMemberOutput {
	return i.ToFederatedPuppetRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedPuppetRepositoryMemberArgs) ToFederatedPuppetRepositoryMemberOutputWithContext(ctx context.Context) FederatedPuppetRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedPuppetRepositoryMemberOutput)
}

// FederatedPuppetRepositoryMemberArrayInput is an input type that accepts FederatedPuppetRepositoryMemberArray and FederatedPuppetRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedPuppetRepositoryMemberArrayInput` via:
//
//          FederatedPuppetRepositoryMemberArray{ FederatedPuppetRepositoryMemberArgs{...} }
type FederatedPuppetRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedPuppetRepositoryMemberArrayOutput() FederatedPuppetRepositoryMemberArrayOutput
	ToFederatedPuppetRepositoryMemberArrayOutputWithContext(context.Context) FederatedPuppetRepositoryMemberArrayOutput
}

type FederatedPuppetRepositoryMemberArray []FederatedPuppetRepositoryMemberInput

func (FederatedPuppetRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedPuppetRepositoryMember)(nil)).Elem()
}

func (i FederatedPuppetRepositoryMemberArray) ToFederatedPuppetRepositoryMemberArrayOutput() FederatedPuppetRepositoryMemberArrayOutput {
	return i.ToFederatedPuppetRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedPuppetRepositoryMemberArray) ToFederatedPuppetRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedPuppetRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedPuppetRepositoryMemberArrayOutput)
}

type FederatedPuppetRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedPuppetRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedPuppetRepositoryMember)(nil)).Elem()
}

func (o FederatedPuppetRepositoryMemberOutput) ToFederatedPuppetRepositoryMemberOutput() FederatedPuppetRepositoryMemberOutput {
	return o
}

func (o FederatedPuppetRepositoryMemberOutput) ToFederatedPuppetRepositoryMemberOutputWithContext(ctx context.Context) FederatedPuppetRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedPuppetRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedPuppetRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name
func (o FederatedPuppetRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedPuppetRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedPuppetRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedPuppetRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedPuppetRepositoryMember)(nil)).Elem()
}

func (o FederatedPuppetRepositoryMemberArrayOutput) ToFederatedPuppetRepositoryMemberArrayOutput() FederatedPuppetRepositoryMemberArrayOutput {
	return o
}

func (o FederatedPuppetRepositoryMemberArrayOutput) ToFederatedPuppetRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedPuppetRepositoryMemberArrayOutput {
	return o
}

func (o FederatedPuppetRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedPuppetRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedPuppetRepositoryMember {
		return vs[0].([]FederatedPuppetRepositoryMember)[vs[1].(int)]
	}).(FederatedPuppetRepositoryMemberOutput)
}

type FederatedPypiRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url string `pulumi:"url"`
}

// FederatedPypiRepositoryMemberInput is an input type that accepts FederatedPypiRepositoryMemberArgs and FederatedPypiRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedPypiRepositoryMemberInput` via:
//
//          FederatedPypiRepositoryMemberArgs{...}
type FederatedPypiRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedPypiRepositoryMemberOutput() FederatedPypiRepositoryMemberOutput
	ToFederatedPypiRepositoryMemberOutputWithContext(context.Context) FederatedPypiRepositoryMemberOutput
}

type FederatedPypiRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedPypiRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedPypiRepositoryMember)(nil)).Elem()
}

func (i FederatedPypiRepositoryMemberArgs) ToFederatedPypiRepositoryMemberOutput() FederatedPypiRepositoryMemberOutput {
	return i.ToFederatedPypiRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedPypiRepositoryMemberArgs) ToFederatedPypiRepositoryMemberOutputWithContext(ctx context.Context) FederatedPypiRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedPypiRepositoryMemberOutput)
}

// FederatedPypiRepositoryMemberArrayInput is an input type that accepts FederatedPypiRepositoryMemberArray and FederatedPypiRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedPypiRepositoryMemberArrayInput` via:
//
//          FederatedPypiRepositoryMemberArray{ FederatedPypiRepositoryMemberArgs{...} }
type FederatedPypiRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedPypiRepositoryMemberArrayOutput() FederatedPypiRepositoryMemberArrayOutput
	ToFederatedPypiRepositoryMemberArrayOutputWithContext(context.Context) FederatedPypiRepositoryMemberArrayOutput
}

type FederatedPypiRepositoryMemberArray []FederatedPypiRepositoryMemberInput

func (FederatedPypiRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedPypiRepositoryMember)(nil)).Elem()
}

func (i FederatedPypiRepositoryMemberArray) ToFederatedPypiRepositoryMemberArrayOutput() FederatedPypiRepositoryMemberArrayOutput {
	return i.ToFederatedPypiRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedPypiRepositoryMemberArray) ToFederatedPypiRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedPypiRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedPypiRepositoryMemberArrayOutput)
}

type FederatedPypiRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedPypiRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedPypiRepositoryMember)(nil)).Elem()
}

func (o FederatedPypiRepositoryMemberOutput) ToFederatedPypiRepositoryMemberOutput() FederatedPypiRepositoryMemberOutput {
	return o
}

func (o FederatedPypiRepositoryMemberOutput) ToFederatedPypiRepositoryMemberOutputWithContext(ctx context.Context) FederatedPypiRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedPypiRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedPypiRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name
func (o FederatedPypiRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedPypiRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedPypiRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedPypiRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedPypiRepositoryMember)(nil)).Elem()
}

func (o FederatedPypiRepositoryMemberArrayOutput) ToFederatedPypiRepositoryMemberArrayOutput() FederatedPypiRepositoryMemberArrayOutput {
	return o
}

func (o FederatedPypiRepositoryMemberArrayOutput) ToFederatedPypiRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedPypiRepositoryMemberArrayOutput {
	return o
}

func (o FederatedPypiRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedPypiRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedPypiRepositoryMember {
		return vs[0].([]FederatedPypiRepositoryMember)[vs[1].(int)]
	}).(FederatedPypiRepositoryMemberOutput)
}

type FederatedRpmRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url string `pulumi:"url"`
}

// FederatedRpmRepositoryMemberInput is an input type that accepts FederatedRpmRepositoryMemberArgs and FederatedRpmRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedRpmRepositoryMemberInput` via:
//
//          FederatedRpmRepositoryMemberArgs{...}
type FederatedRpmRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedRpmRepositoryMemberOutput() FederatedRpmRepositoryMemberOutput
	ToFederatedRpmRepositoryMemberOutputWithContext(context.Context) FederatedRpmRepositoryMemberOutput
}

type FederatedRpmRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedRpmRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedRpmRepositoryMember)(nil)).Elem()
}

func (i FederatedRpmRepositoryMemberArgs) ToFederatedRpmRepositoryMemberOutput() FederatedRpmRepositoryMemberOutput {
	return i.ToFederatedRpmRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedRpmRepositoryMemberArgs) ToFederatedRpmRepositoryMemberOutputWithContext(ctx context.Context) FederatedRpmRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedRpmRepositoryMemberOutput)
}

// FederatedRpmRepositoryMemberArrayInput is an input type that accepts FederatedRpmRepositoryMemberArray and FederatedRpmRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedRpmRepositoryMemberArrayInput` via:
//
//          FederatedRpmRepositoryMemberArray{ FederatedRpmRepositoryMemberArgs{...} }
type FederatedRpmRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedRpmRepositoryMemberArrayOutput() FederatedRpmRepositoryMemberArrayOutput
	ToFederatedRpmRepositoryMemberArrayOutputWithContext(context.Context) FederatedRpmRepositoryMemberArrayOutput
}

type FederatedRpmRepositoryMemberArray []FederatedRpmRepositoryMemberInput

func (FederatedRpmRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedRpmRepositoryMember)(nil)).Elem()
}

func (i FederatedRpmRepositoryMemberArray) ToFederatedRpmRepositoryMemberArrayOutput() FederatedRpmRepositoryMemberArrayOutput {
	return i.ToFederatedRpmRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedRpmRepositoryMemberArray) ToFederatedRpmRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedRpmRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedRpmRepositoryMemberArrayOutput)
}

type FederatedRpmRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedRpmRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedRpmRepositoryMember)(nil)).Elem()
}

func (o FederatedRpmRepositoryMemberOutput) ToFederatedRpmRepositoryMemberOutput() FederatedRpmRepositoryMemberOutput {
	return o
}

func (o FederatedRpmRepositoryMemberOutput) ToFederatedRpmRepositoryMemberOutputWithContext(ctx context.Context) FederatedRpmRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedRpmRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedRpmRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name
func (o FederatedRpmRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedRpmRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedRpmRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedRpmRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedRpmRepositoryMember)(nil)).Elem()
}

func (o FederatedRpmRepositoryMemberArrayOutput) ToFederatedRpmRepositoryMemberArrayOutput() FederatedRpmRepositoryMemberArrayOutput {
	return o
}

func (o FederatedRpmRepositoryMemberArrayOutput) ToFederatedRpmRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedRpmRepositoryMemberArrayOutput {
	return o
}

func (o FederatedRpmRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedRpmRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedRpmRepositoryMember {
		return vs[0].([]FederatedRpmRepositoryMember)[vs[1].(int)]
	}).(FederatedRpmRepositoryMemberOutput)
}

type FederatedSbtRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url string `pulumi:"url"`
}

// FederatedSbtRepositoryMemberInput is an input type that accepts FederatedSbtRepositoryMemberArgs and FederatedSbtRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedSbtRepositoryMemberInput` via:
//
//          FederatedSbtRepositoryMemberArgs{...}
type FederatedSbtRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedSbtRepositoryMemberOutput() FederatedSbtRepositoryMemberOutput
	ToFederatedSbtRepositoryMemberOutputWithContext(context.Context) FederatedSbtRepositoryMemberOutput
}

type FederatedSbtRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedSbtRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedSbtRepositoryMember)(nil)).Elem()
}

func (i FederatedSbtRepositoryMemberArgs) ToFederatedSbtRepositoryMemberOutput() FederatedSbtRepositoryMemberOutput {
	return i.ToFederatedSbtRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedSbtRepositoryMemberArgs) ToFederatedSbtRepositoryMemberOutputWithContext(ctx context.Context) FederatedSbtRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedSbtRepositoryMemberOutput)
}

// FederatedSbtRepositoryMemberArrayInput is an input type that accepts FederatedSbtRepositoryMemberArray and FederatedSbtRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedSbtRepositoryMemberArrayInput` via:
//
//          FederatedSbtRepositoryMemberArray{ FederatedSbtRepositoryMemberArgs{...} }
type FederatedSbtRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedSbtRepositoryMemberArrayOutput() FederatedSbtRepositoryMemberArrayOutput
	ToFederatedSbtRepositoryMemberArrayOutputWithContext(context.Context) FederatedSbtRepositoryMemberArrayOutput
}

type FederatedSbtRepositoryMemberArray []FederatedSbtRepositoryMemberInput

func (FederatedSbtRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedSbtRepositoryMember)(nil)).Elem()
}

func (i FederatedSbtRepositoryMemberArray) ToFederatedSbtRepositoryMemberArrayOutput() FederatedSbtRepositoryMemberArrayOutput {
	return i.ToFederatedSbtRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedSbtRepositoryMemberArray) ToFederatedSbtRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedSbtRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedSbtRepositoryMemberArrayOutput)
}

type FederatedSbtRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedSbtRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedSbtRepositoryMember)(nil)).Elem()
}

func (o FederatedSbtRepositoryMemberOutput) ToFederatedSbtRepositoryMemberOutput() FederatedSbtRepositoryMemberOutput {
	return o
}

func (o FederatedSbtRepositoryMemberOutput) ToFederatedSbtRepositoryMemberOutputWithContext(ctx context.Context) FederatedSbtRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedSbtRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedSbtRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name
func (o FederatedSbtRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedSbtRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedSbtRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedSbtRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedSbtRepositoryMember)(nil)).Elem()
}

func (o FederatedSbtRepositoryMemberArrayOutput) ToFederatedSbtRepositoryMemberArrayOutput() FederatedSbtRepositoryMemberArrayOutput {
	return o
}

func (o FederatedSbtRepositoryMemberArrayOutput) ToFederatedSbtRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedSbtRepositoryMemberArrayOutput {
	return o
}

func (o FederatedSbtRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedSbtRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedSbtRepositoryMember {
		return vs[0].([]FederatedSbtRepositoryMember)[vs[1].(int)]
	}).(FederatedSbtRepositoryMemberOutput)
}

type FederatedVagrantRepositoryMember struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled bool `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url string `pulumi:"url"`
}

// FederatedVagrantRepositoryMemberInput is an input type that accepts FederatedVagrantRepositoryMemberArgs and FederatedVagrantRepositoryMemberOutput values.
// You can construct a concrete instance of `FederatedVagrantRepositoryMemberInput` via:
//
//          FederatedVagrantRepositoryMemberArgs{...}
type FederatedVagrantRepositoryMemberInput interface {
	pulumi.Input

	ToFederatedVagrantRepositoryMemberOutput() FederatedVagrantRepositoryMemberOutput
	ToFederatedVagrantRepositoryMemberOutputWithContext(context.Context) FederatedVagrantRepositoryMemberOutput
}

type FederatedVagrantRepositoryMemberArgs struct {
	// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Full URL to ending with the repository name
	Url pulumi.StringInput `pulumi:"url"`
}

func (FederatedVagrantRepositoryMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedVagrantRepositoryMember)(nil)).Elem()
}

func (i FederatedVagrantRepositoryMemberArgs) ToFederatedVagrantRepositoryMemberOutput() FederatedVagrantRepositoryMemberOutput {
	return i.ToFederatedVagrantRepositoryMemberOutputWithContext(context.Background())
}

func (i FederatedVagrantRepositoryMemberArgs) ToFederatedVagrantRepositoryMemberOutputWithContext(ctx context.Context) FederatedVagrantRepositoryMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedVagrantRepositoryMemberOutput)
}

// FederatedVagrantRepositoryMemberArrayInput is an input type that accepts FederatedVagrantRepositoryMemberArray and FederatedVagrantRepositoryMemberArrayOutput values.
// You can construct a concrete instance of `FederatedVagrantRepositoryMemberArrayInput` via:
//
//          FederatedVagrantRepositoryMemberArray{ FederatedVagrantRepositoryMemberArgs{...} }
type FederatedVagrantRepositoryMemberArrayInput interface {
	pulumi.Input

	ToFederatedVagrantRepositoryMemberArrayOutput() FederatedVagrantRepositoryMemberArrayOutput
	ToFederatedVagrantRepositoryMemberArrayOutputWithContext(context.Context) FederatedVagrantRepositoryMemberArrayOutput
}

type FederatedVagrantRepositoryMemberArray []FederatedVagrantRepositoryMemberInput

func (FederatedVagrantRepositoryMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedVagrantRepositoryMember)(nil)).Elem()
}

func (i FederatedVagrantRepositoryMemberArray) ToFederatedVagrantRepositoryMemberArrayOutput() FederatedVagrantRepositoryMemberArrayOutput {
	return i.ToFederatedVagrantRepositoryMemberArrayOutputWithContext(context.Background())
}

func (i FederatedVagrantRepositoryMemberArray) ToFederatedVagrantRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedVagrantRepositoryMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedVagrantRepositoryMemberArrayOutput)
}

type FederatedVagrantRepositoryMemberOutput struct{ *pulumi.OutputState }

func (FederatedVagrantRepositoryMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedVagrantRepositoryMember)(nil)).Elem()
}

func (o FederatedVagrantRepositoryMemberOutput) ToFederatedVagrantRepositoryMemberOutput() FederatedVagrantRepositoryMemberOutput {
	return o
}

func (o FederatedVagrantRepositoryMemberOutput) ToFederatedVagrantRepositoryMemberOutputWithContext(ctx context.Context) FederatedVagrantRepositoryMemberOutput {
	return o
}

// Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.
func (o FederatedVagrantRepositoryMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FederatedVagrantRepositoryMember) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Full URL to ending with the repository name
func (o FederatedVagrantRepositoryMemberOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedVagrantRepositoryMember) string { return v.Url }).(pulumi.StringOutput)
}

type FederatedVagrantRepositoryMemberArrayOutput struct{ *pulumi.OutputState }

func (FederatedVagrantRepositoryMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FederatedVagrantRepositoryMember)(nil)).Elem()
}

func (o FederatedVagrantRepositoryMemberArrayOutput) ToFederatedVagrantRepositoryMemberArrayOutput() FederatedVagrantRepositoryMemberArrayOutput {
	return o
}

func (o FederatedVagrantRepositoryMemberArrayOutput) ToFederatedVagrantRepositoryMemberArrayOutputWithContext(ctx context.Context) FederatedVagrantRepositoryMemberArrayOutput {
	return o
}

func (o FederatedVagrantRepositoryMemberArrayOutput) Index(i pulumi.IntInput) FederatedVagrantRepositoryMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FederatedVagrantRepositoryMember {
		return vs[0].([]FederatedVagrantRepositoryMember)[vs[1].(int)]
	}).(FederatedVagrantRepositoryMemberOutput)
}

type OauthSettingsOauthProvider struct {
	// OAuth user info endpoint for the IdP.
	ApiUrl string `pulumi:"apiUrl"`
	// OAuth authorization endpoint for the IdP.
	AuthUrl string `pulumi:"authUrl"`
	// OAuth client ID configured on the IdP.
	ClientId string `pulumi:"clientId"`
	// OAuth client secret configured on the IdP.
	ClientSecret string `pulumi:"clientSecret"`
	// Enable the Artifactory OAuth provider.  Default value is `true`.
	Enabled *bool `pulumi:"enabled"`
	// Name of the Artifactory OAuth provider.
	Name string `pulumi:"name"`
	// OAuth token endpoint for the IdP.
	TokenUrl string `pulumi:"tokenUrl"`
	// Type of OAuth provider. (e.g., `github`, `google`, `cloudfoundry`, or `openId`)
	Type string `pulumi:"type"`
}

// OauthSettingsOauthProviderInput is an input type that accepts OauthSettingsOauthProviderArgs and OauthSettingsOauthProviderOutput values.
// You can construct a concrete instance of `OauthSettingsOauthProviderInput` via:
//
//          OauthSettingsOauthProviderArgs{...}
type OauthSettingsOauthProviderInput interface {
	pulumi.Input

	ToOauthSettingsOauthProviderOutput() OauthSettingsOauthProviderOutput
	ToOauthSettingsOauthProviderOutputWithContext(context.Context) OauthSettingsOauthProviderOutput
}

type OauthSettingsOauthProviderArgs struct {
	// OAuth user info endpoint for the IdP.
	ApiUrl pulumi.StringInput `pulumi:"apiUrl"`
	// OAuth authorization endpoint for the IdP.
	AuthUrl pulumi.StringInput `pulumi:"authUrl"`
	// OAuth client ID configured on the IdP.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// OAuth client secret configured on the IdP.
	ClientSecret pulumi.StringInput `pulumi:"clientSecret"`
	// Enable the Artifactory OAuth provider.  Default value is `true`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Name of the Artifactory OAuth provider.
	Name pulumi.StringInput `pulumi:"name"`
	// OAuth token endpoint for the IdP.
	TokenUrl pulumi.StringInput `pulumi:"tokenUrl"`
	// Type of OAuth provider. (e.g., `github`, `google`, `cloudfoundry`, or `openId`)
	Type pulumi.StringInput `pulumi:"type"`
}

func (OauthSettingsOauthProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OauthSettingsOauthProvider)(nil)).Elem()
}

func (i OauthSettingsOauthProviderArgs) ToOauthSettingsOauthProviderOutput() OauthSettingsOauthProviderOutput {
	return i.ToOauthSettingsOauthProviderOutputWithContext(context.Background())
}

func (i OauthSettingsOauthProviderArgs) ToOauthSettingsOauthProviderOutputWithContext(ctx context.Context) OauthSettingsOauthProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OauthSettingsOauthProviderOutput)
}

// OauthSettingsOauthProviderArrayInput is an input type that accepts OauthSettingsOauthProviderArray and OauthSettingsOauthProviderArrayOutput values.
// You can construct a concrete instance of `OauthSettingsOauthProviderArrayInput` via:
//
//          OauthSettingsOauthProviderArray{ OauthSettingsOauthProviderArgs{...} }
type OauthSettingsOauthProviderArrayInput interface {
	pulumi.Input

	ToOauthSettingsOauthProviderArrayOutput() OauthSettingsOauthProviderArrayOutput
	ToOauthSettingsOauthProviderArrayOutputWithContext(context.Context) OauthSettingsOauthProviderArrayOutput
}

type OauthSettingsOauthProviderArray []OauthSettingsOauthProviderInput

func (OauthSettingsOauthProviderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OauthSettingsOauthProvider)(nil)).Elem()
}

func (i OauthSettingsOauthProviderArray) ToOauthSettingsOauthProviderArrayOutput() OauthSettingsOauthProviderArrayOutput {
	return i.ToOauthSettingsOauthProviderArrayOutputWithContext(context.Background())
}

func (i OauthSettingsOauthProviderArray) ToOauthSettingsOauthProviderArrayOutputWithContext(ctx context.Context) OauthSettingsOauthProviderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OauthSettingsOauthProviderArrayOutput)
}

type OauthSettingsOauthProviderOutput struct{ *pulumi.OutputState }

func (OauthSettingsOauthProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OauthSettingsOauthProvider)(nil)).Elem()
}

func (o OauthSettingsOauthProviderOutput) ToOauthSettingsOauthProviderOutput() OauthSettingsOauthProviderOutput {
	return o
}

func (o OauthSettingsOauthProviderOutput) ToOauthSettingsOauthProviderOutputWithContext(ctx context.Context) OauthSettingsOauthProviderOutput {
	return o
}

// OAuth user info endpoint for the IdP.
func (o OauthSettingsOauthProviderOutput) ApiUrl() pulumi.StringOutput {
	return o.ApplyT(func(v OauthSettingsOauthProvider) string { return v.ApiUrl }).(pulumi.StringOutput)
}

// OAuth authorization endpoint for the IdP.
func (o OauthSettingsOauthProviderOutput) AuthUrl() pulumi.StringOutput {
	return o.ApplyT(func(v OauthSettingsOauthProvider) string { return v.AuthUrl }).(pulumi.StringOutput)
}

// OAuth client ID configured on the IdP.
func (o OauthSettingsOauthProviderOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v OauthSettingsOauthProvider) string { return v.ClientId }).(pulumi.StringOutput)
}

// OAuth client secret configured on the IdP.
func (o OauthSettingsOauthProviderOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v OauthSettingsOauthProvider) string { return v.ClientSecret }).(pulumi.StringOutput)
}

// Enable the Artifactory OAuth provider.  Default value is `true`.
func (o OauthSettingsOauthProviderOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OauthSettingsOauthProvider) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the Artifactory OAuth provider.
func (o OauthSettingsOauthProviderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OauthSettingsOauthProvider) string { return v.Name }).(pulumi.StringOutput)
}

// OAuth token endpoint for the IdP.
func (o OauthSettingsOauthProviderOutput) TokenUrl() pulumi.StringOutput {
	return o.ApplyT(func(v OauthSettingsOauthProvider) string { return v.TokenUrl }).(pulumi.StringOutput)
}

// Type of OAuth provider. (e.g., `github`, `google`, `cloudfoundry`, or `openId`)
func (o OauthSettingsOauthProviderOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OauthSettingsOauthProvider) string { return v.Type }).(pulumi.StringOutput)
}

type OauthSettingsOauthProviderArrayOutput struct{ *pulumi.OutputState }

func (OauthSettingsOauthProviderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OauthSettingsOauthProvider)(nil)).Elem()
}

func (o OauthSettingsOauthProviderArrayOutput) ToOauthSettingsOauthProviderArrayOutput() OauthSettingsOauthProviderArrayOutput {
	return o
}

func (o OauthSettingsOauthProviderArrayOutput) ToOauthSettingsOauthProviderArrayOutputWithContext(ctx context.Context) OauthSettingsOauthProviderArrayOutput {
	return o
}

func (o OauthSettingsOauthProviderArrayOutput) Index(i pulumi.IntInput) OauthSettingsOauthProviderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OauthSettingsOauthProvider {
		return vs[0].([]OauthSettingsOauthProvider)[vs[1].(int)]
	}).(OauthSettingsOauthProviderOutput)
}

type PermissionTargetBuild struct {
	// -
	Actions *PermissionTargetBuildActions `pulumi:"actions"`
	// Pattern of artifacts to exclude
	ExcludesPatterns []string `pulumi:"excludesPatterns"`
	// Pattern of artifacts to include
	IncludesPatterns []string `pulumi:"includesPatterns"`
	// List of repositories this permission target is applicable for
	Repositories []string `pulumi:"repositories"`
}

// PermissionTargetBuildInput is an input type that accepts PermissionTargetBuildArgs and PermissionTargetBuildOutput values.
// You can construct a concrete instance of `PermissionTargetBuildInput` via:
//
//          PermissionTargetBuildArgs{...}
type PermissionTargetBuildInput interface {
	pulumi.Input

	ToPermissionTargetBuildOutput() PermissionTargetBuildOutput
	ToPermissionTargetBuildOutputWithContext(context.Context) PermissionTargetBuildOutput
}

type PermissionTargetBuildArgs struct {
	// -
	Actions PermissionTargetBuildActionsPtrInput `pulumi:"actions"`
	// Pattern of artifacts to exclude
	ExcludesPatterns pulumi.StringArrayInput `pulumi:"excludesPatterns"`
	// Pattern of artifacts to include
	IncludesPatterns pulumi.StringArrayInput `pulumi:"includesPatterns"`
	// List of repositories this permission target is applicable for
	Repositories pulumi.StringArrayInput `pulumi:"repositories"`
}

func (PermissionTargetBuildArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetBuild)(nil)).Elem()
}

func (i PermissionTargetBuildArgs) ToPermissionTargetBuildOutput() PermissionTargetBuildOutput {
	return i.ToPermissionTargetBuildOutputWithContext(context.Background())
}

func (i PermissionTargetBuildArgs) ToPermissionTargetBuildOutputWithContext(ctx context.Context) PermissionTargetBuildOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetBuildOutput)
}

func (i PermissionTargetBuildArgs) ToPermissionTargetBuildPtrOutput() PermissionTargetBuildPtrOutput {
	return i.ToPermissionTargetBuildPtrOutputWithContext(context.Background())
}

func (i PermissionTargetBuildArgs) ToPermissionTargetBuildPtrOutputWithContext(ctx context.Context) PermissionTargetBuildPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetBuildOutput).ToPermissionTargetBuildPtrOutputWithContext(ctx)
}

// PermissionTargetBuildPtrInput is an input type that accepts PermissionTargetBuildArgs, PermissionTargetBuildPtr and PermissionTargetBuildPtrOutput values.
// You can construct a concrete instance of `PermissionTargetBuildPtrInput` via:
//
//          PermissionTargetBuildArgs{...}
//
//  or:
//
//          nil
type PermissionTargetBuildPtrInput interface {
	pulumi.Input

	ToPermissionTargetBuildPtrOutput() PermissionTargetBuildPtrOutput
	ToPermissionTargetBuildPtrOutputWithContext(context.Context) PermissionTargetBuildPtrOutput
}

type permissionTargetBuildPtrType PermissionTargetBuildArgs

func PermissionTargetBuildPtr(v *PermissionTargetBuildArgs) PermissionTargetBuildPtrInput {
	return (*permissionTargetBuildPtrType)(v)
}

func (*permissionTargetBuildPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetBuild)(nil)).Elem()
}

func (i *permissionTargetBuildPtrType) ToPermissionTargetBuildPtrOutput() PermissionTargetBuildPtrOutput {
	return i.ToPermissionTargetBuildPtrOutputWithContext(context.Background())
}

func (i *permissionTargetBuildPtrType) ToPermissionTargetBuildPtrOutputWithContext(ctx context.Context) PermissionTargetBuildPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetBuildPtrOutput)
}

type PermissionTargetBuildOutput struct{ *pulumi.OutputState }

func (PermissionTargetBuildOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetBuild)(nil)).Elem()
}

func (o PermissionTargetBuildOutput) ToPermissionTargetBuildOutput() PermissionTargetBuildOutput {
	return o
}

func (o PermissionTargetBuildOutput) ToPermissionTargetBuildOutputWithContext(ctx context.Context) PermissionTargetBuildOutput {
	return o
}

func (o PermissionTargetBuildOutput) ToPermissionTargetBuildPtrOutput() PermissionTargetBuildPtrOutput {
	return o.ToPermissionTargetBuildPtrOutputWithContext(context.Background())
}

func (o PermissionTargetBuildOutput) ToPermissionTargetBuildPtrOutputWithContext(ctx context.Context) PermissionTargetBuildPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PermissionTargetBuild) *PermissionTargetBuild {
		return &v
	}).(PermissionTargetBuildPtrOutput)
}

// -
func (o PermissionTargetBuildOutput) Actions() PermissionTargetBuildActionsPtrOutput {
	return o.ApplyT(func(v PermissionTargetBuild) *PermissionTargetBuildActions { return v.Actions }).(PermissionTargetBuildActionsPtrOutput)
}

// Pattern of artifacts to exclude
func (o PermissionTargetBuildOutput) ExcludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetBuild) []string { return v.ExcludesPatterns }).(pulumi.StringArrayOutput)
}

// Pattern of artifacts to include
func (o PermissionTargetBuildOutput) IncludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetBuild) []string { return v.IncludesPatterns }).(pulumi.StringArrayOutput)
}

// List of repositories this permission target is applicable for
func (o PermissionTargetBuildOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetBuild) []string { return v.Repositories }).(pulumi.StringArrayOutput)
}

type PermissionTargetBuildPtrOutput struct{ *pulumi.OutputState }

func (PermissionTargetBuildPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetBuild)(nil)).Elem()
}

func (o PermissionTargetBuildPtrOutput) ToPermissionTargetBuildPtrOutput() PermissionTargetBuildPtrOutput {
	return o
}

func (o PermissionTargetBuildPtrOutput) ToPermissionTargetBuildPtrOutputWithContext(ctx context.Context) PermissionTargetBuildPtrOutput {
	return o
}

func (o PermissionTargetBuildPtrOutput) Elem() PermissionTargetBuildOutput {
	return o.ApplyT(func(v *PermissionTargetBuild) PermissionTargetBuild {
		if v != nil {
			return *v
		}
		var ret PermissionTargetBuild
		return ret
	}).(PermissionTargetBuildOutput)
}

// -
func (o PermissionTargetBuildPtrOutput) Actions() PermissionTargetBuildActionsPtrOutput {
	return o.ApplyT(func(v *PermissionTargetBuild) *PermissionTargetBuildActions {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(PermissionTargetBuildActionsPtrOutput)
}

// Pattern of artifacts to exclude
func (o PermissionTargetBuildPtrOutput) ExcludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetBuild) []string {
		if v == nil {
			return nil
		}
		return v.ExcludesPatterns
	}).(pulumi.StringArrayOutput)
}

// Pattern of artifacts to include
func (o PermissionTargetBuildPtrOutput) IncludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetBuild) []string {
		if v == nil {
			return nil
		}
		return v.IncludesPatterns
	}).(pulumi.StringArrayOutput)
}

// List of repositories this permission target is applicable for
func (o PermissionTargetBuildPtrOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetBuild) []string {
		if v == nil {
			return nil
		}
		return v.Repositories
	}).(pulumi.StringArrayOutput)
}

type PermissionTargetBuildActions struct {
	// Groups this permission applies for.
	Groups []PermissionTargetBuildActionsGroup `pulumi:"groups"`
	// Users this permission target applies for.
	Users []PermissionTargetBuildActionsUser `pulumi:"users"`
}

// PermissionTargetBuildActionsInput is an input type that accepts PermissionTargetBuildActionsArgs and PermissionTargetBuildActionsOutput values.
// You can construct a concrete instance of `PermissionTargetBuildActionsInput` via:
//
//          PermissionTargetBuildActionsArgs{...}
type PermissionTargetBuildActionsInput interface {
	pulumi.Input

	ToPermissionTargetBuildActionsOutput() PermissionTargetBuildActionsOutput
	ToPermissionTargetBuildActionsOutputWithContext(context.Context) PermissionTargetBuildActionsOutput
}

type PermissionTargetBuildActionsArgs struct {
	// Groups this permission applies for.
	Groups PermissionTargetBuildActionsGroupArrayInput `pulumi:"groups"`
	// Users this permission target applies for.
	Users PermissionTargetBuildActionsUserArrayInput `pulumi:"users"`
}

func (PermissionTargetBuildActionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetBuildActions)(nil)).Elem()
}

func (i PermissionTargetBuildActionsArgs) ToPermissionTargetBuildActionsOutput() PermissionTargetBuildActionsOutput {
	return i.ToPermissionTargetBuildActionsOutputWithContext(context.Background())
}

func (i PermissionTargetBuildActionsArgs) ToPermissionTargetBuildActionsOutputWithContext(ctx context.Context) PermissionTargetBuildActionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetBuildActionsOutput)
}

func (i PermissionTargetBuildActionsArgs) ToPermissionTargetBuildActionsPtrOutput() PermissionTargetBuildActionsPtrOutput {
	return i.ToPermissionTargetBuildActionsPtrOutputWithContext(context.Background())
}

func (i PermissionTargetBuildActionsArgs) ToPermissionTargetBuildActionsPtrOutputWithContext(ctx context.Context) PermissionTargetBuildActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetBuildActionsOutput).ToPermissionTargetBuildActionsPtrOutputWithContext(ctx)
}

// PermissionTargetBuildActionsPtrInput is an input type that accepts PermissionTargetBuildActionsArgs, PermissionTargetBuildActionsPtr and PermissionTargetBuildActionsPtrOutput values.
// You can construct a concrete instance of `PermissionTargetBuildActionsPtrInput` via:
//
//          PermissionTargetBuildActionsArgs{...}
//
//  or:
//
//          nil
type PermissionTargetBuildActionsPtrInput interface {
	pulumi.Input

	ToPermissionTargetBuildActionsPtrOutput() PermissionTargetBuildActionsPtrOutput
	ToPermissionTargetBuildActionsPtrOutputWithContext(context.Context) PermissionTargetBuildActionsPtrOutput
}

type permissionTargetBuildActionsPtrType PermissionTargetBuildActionsArgs

func PermissionTargetBuildActionsPtr(v *PermissionTargetBuildActionsArgs) PermissionTargetBuildActionsPtrInput {
	return (*permissionTargetBuildActionsPtrType)(v)
}

func (*permissionTargetBuildActionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetBuildActions)(nil)).Elem()
}

func (i *permissionTargetBuildActionsPtrType) ToPermissionTargetBuildActionsPtrOutput() PermissionTargetBuildActionsPtrOutput {
	return i.ToPermissionTargetBuildActionsPtrOutputWithContext(context.Background())
}

func (i *permissionTargetBuildActionsPtrType) ToPermissionTargetBuildActionsPtrOutputWithContext(ctx context.Context) PermissionTargetBuildActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetBuildActionsPtrOutput)
}

type PermissionTargetBuildActionsOutput struct{ *pulumi.OutputState }

func (PermissionTargetBuildActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetBuildActions)(nil)).Elem()
}

func (o PermissionTargetBuildActionsOutput) ToPermissionTargetBuildActionsOutput() PermissionTargetBuildActionsOutput {
	return o
}

func (o PermissionTargetBuildActionsOutput) ToPermissionTargetBuildActionsOutputWithContext(ctx context.Context) PermissionTargetBuildActionsOutput {
	return o
}

func (o PermissionTargetBuildActionsOutput) ToPermissionTargetBuildActionsPtrOutput() PermissionTargetBuildActionsPtrOutput {
	return o.ToPermissionTargetBuildActionsPtrOutputWithContext(context.Background())
}

func (o PermissionTargetBuildActionsOutput) ToPermissionTargetBuildActionsPtrOutputWithContext(ctx context.Context) PermissionTargetBuildActionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PermissionTargetBuildActions) *PermissionTargetBuildActions {
		return &v
	}).(PermissionTargetBuildActionsPtrOutput)
}

// Groups this permission applies for.
func (o PermissionTargetBuildActionsOutput) Groups() PermissionTargetBuildActionsGroupArrayOutput {
	return o.ApplyT(func(v PermissionTargetBuildActions) []PermissionTargetBuildActionsGroup { return v.Groups }).(PermissionTargetBuildActionsGroupArrayOutput)
}

// Users this permission target applies for.
func (o PermissionTargetBuildActionsOutput) Users() PermissionTargetBuildActionsUserArrayOutput {
	return o.ApplyT(func(v PermissionTargetBuildActions) []PermissionTargetBuildActionsUser { return v.Users }).(PermissionTargetBuildActionsUserArrayOutput)
}

type PermissionTargetBuildActionsPtrOutput struct{ *pulumi.OutputState }

func (PermissionTargetBuildActionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetBuildActions)(nil)).Elem()
}

func (o PermissionTargetBuildActionsPtrOutput) ToPermissionTargetBuildActionsPtrOutput() PermissionTargetBuildActionsPtrOutput {
	return o
}

func (o PermissionTargetBuildActionsPtrOutput) ToPermissionTargetBuildActionsPtrOutputWithContext(ctx context.Context) PermissionTargetBuildActionsPtrOutput {
	return o
}

func (o PermissionTargetBuildActionsPtrOutput) Elem() PermissionTargetBuildActionsOutput {
	return o.ApplyT(func(v *PermissionTargetBuildActions) PermissionTargetBuildActions {
		if v != nil {
			return *v
		}
		var ret PermissionTargetBuildActions
		return ret
	}).(PermissionTargetBuildActionsOutput)
}

// Groups this permission applies for.
func (o PermissionTargetBuildActionsPtrOutput) Groups() PermissionTargetBuildActionsGroupArrayOutput {
	return o.ApplyT(func(v *PermissionTargetBuildActions) []PermissionTargetBuildActionsGroup {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(PermissionTargetBuildActionsGroupArrayOutput)
}

// Users this permission target applies for.
func (o PermissionTargetBuildActionsPtrOutput) Users() PermissionTargetBuildActionsUserArrayOutput {
	return o.ApplyT(func(v *PermissionTargetBuildActions) []PermissionTargetBuildActionsUser {
		if v == nil {
			return nil
		}
		return v.Users
	}).(PermissionTargetBuildActionsUserArrayOutput)
}

type PermissionTargetBuildActionsGroup struct {
	// Name of permission
	Name        string   `pulumi:"name"`
	Permissions []string `pulumi:"permissions"`
}

// PermissionTargetBuildActionsGroupInput is an input type that accepts PermissionTargetBuildActionsGroupArgs and PermissionTargetBuildActionsGroupOutput values.
// You can construct a concrete instance of `PermissionTargetBuildActionsGroupInput` via:
//
//          PermissionTargetBuildActionsGroupArgs{...}
type PermissionTargetBuildActionsGroupInput interface {
	pulumi.Input

	ToPermissionTargetBuildActionsGroupOutput() PermissionTargetBuildActionsGroupOutput
	ToPermissionTargetBuildActionsGroupOutputWithContext(context.Context) PermissionTargetBuildActionsGroupOutput
}

type PermissionTargetBuildActionsGroupArgs struct {
	// Name of permission
	Name        pulumi.StringInput      `pulumi:"name"`
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (PermissionTargetBuildActionsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetBuildActionsGroup)(nil)).Elem()
}

func (i PermissionTargetBuildActionsGroupArgs) ToPermissionTargetBuildActionsGroupOutput() PermissionTargetBuildActionsGroupOutput {
	return i.ToPermissionTargetBuildActionsGroupOutputWithContext(context.Background())
}

func (i PermissionTargetBuildActionsGroupArgs) ToPermissionTargetBuildActionsGroupOutputWithContext(ctx context.Context) PermissionTargetBuildActionsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetBuildActionsGroupOutput)
}

// PermissionTargetBuildActionsGroupArrayInput is an input type that accepts PermissionTargetBuildActionsGroupArray and PermissionTargetBuildActionsGroupArrayOutput values.
// You can construct a concrete instance of `PermissionTargetBuildActionsGroupArrayInput` via:
//
//          PermissionTargetBuildActionsGroupArray{ PermissionTargetBuildActionsGroupArgs{...} }
type PermissionTargetBuildActionsGroupArrayInput interface {
	pulumi.Input

	ToPermissionTargetBuildActionsGroupArrayOutput() PermissionTargetBuildActionsGroupArrayOutput
	ToPermissionTargetBuildActionsGroupArrayOutputWithContext(context.Context) PermissionTargetBuildActionsGroupArrayOutput
}

type PermissionTargetBuildActionsGroupArray []PermissionTargetBuildActionsGroupInput

func (PermissionTargetBuildActionsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetBuildActionsGroup)(nil)).Elem()
}

func (i PermissionTargetBuildActionsGroupArray) ToPermissionTargetBuildActionsGroupArrayOutput() PermissionTargetBuildActionsGroupArrayOutput {
	return i.ToPermissionTargetBuildActionsGroupArrayOutputWithContext(context.Background())
}

func (i PermissionTargetBuildActionsGroupArray) ToPermissionTargetBuildActionsGroupArrayOutputWithContext(ctx context.Context) PermissionTargetBuildActionsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetBuildActionsGroupArrayOutput)
}

type PermissionTargetBuildActionsGroupOutput struct{ *pulumi.OutputState }

func (PermissionTargetBuildActionsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetBuildActionsGroup)(nil)).Elem()
}

func (o PermissionTargetBuildActionsGroupOutput) ToPermissionTargetBuildActionsGroupOutput() PermissionTargetBuildActionsGroupOutput {
	return o
}

func (o PermissionTargetBuildActionsGroupOutput) ToPermissionTargetBuildActionsGroupOutputWithContext(ctx context.Context) PermissionTargetBuildActionsGroupOutput {
	return o
}

// Name of permission
func (o PermissionTargetBuildActionsGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PermissionTargetBuildActionsGroup) string { return v.Name }).(pulumi.StringOutput)
}

func (o PermissionTargetBuildActionsGroupOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetBuildActionsGroup) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type PermissionTargetBuildActionsGroupArrayOutput struct{ *pulumi.OutputState }

func (PermissionTargetBuildActionsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetBuildActionsGroup)(nil)).Elem()
}

func (o PermissionTargetBuildActionsGroupArrayOutput) ToPermissionTargetBuildActionsGroupArrayOutput() PermissionTargetBuildActionsGroupArrayOutput {
	return o
}

func (o PermissionTargetBuildActionsGroupArrayOutput) ToPermissionTargetBuildActionsGroupArrayOutputWithContext(ctx context.Context) PermissionTargetBuildActionsGroupArrayOutput {
	return o
}

func (o PermissionTargetBuildActionsGroupArrayOutput) Index(i pulumi.IntInput) PermissionTargetBuildActionsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PermissionTargetBuildActionsGroup {
		return vs[0].([]PermissionTargetBuildActionsGroup)[vs[1].(int)]
	}).(PermissionTargetBuildActionsGroupOutput)
}

type PermissionTargetBuildActionsUser struct {
	// Name of permission
	Name        string   `pulumi:"name"`
	Permissions []string `pulumi:"permissions"`
}

// PermissionTargetBuildActionsUserInput is an input type that accepts PermissionTargetBuildActionsUserArgs and PermissionTargetBuildActionsUserOutput values.
// You can construct a concrete instance of `PermissionTargetBuildActionsUserInput` via:
//
//          PermissionTargetBuildActionsUserArgs{...}
type PermissionTargetBuildActionsUserInput interface {
	pulumi.Input

	ToPermissionTargetBuildActionsUserOutput() PermissionTargetBuildActionsUserOutput
	ToPermissionTargetBuildActionsUserOutputWithContext(context.Context) PermissionTargetBuildActionsUserOutput
}

type PermissionTargetBuildActionsUserArgs struct {
	// Name of permission
	Name        pulumi.StringInput      `pulumi:"name"`
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (PermissionTargetBuildActionsUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetBuildActionsUser)(nil)).Elem()
}

func (i PermissionTargetBuildActionsUserArgs) ToPermissionTargetBuildActionsUserOutput() PermissionTargetBuildActionsUserOutput {
	return i.ToPermissionTargetBuildActionsUserOutputWithContext(context.Background())
}

func (i PermissionTargetBuildActionsUserArgs) ToPermissionTargetBuildActionsUserOutputWithContext(ctx context.Context) PermissionTargetBuildActionsUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetBuildActionsUserOutput)
}

// PermissionTargetBuildActionsUserArrayInput is an input type that accepts PermissionTargetBuildActionsUserArray and PermissionTargetBuildActionsUserArrayOutput values.
// You can construct a concrete instance of `PermissionTargetBuildActionsUserArrayInput` via:
//
//          PermissionTargetBuildActionsUserArray{ PermissionTargetBuildActionsUserArgs{...} }
type PermissionTargetBuildActionsUserArrayInput interface {
	pulumi.Input

	ToPermissionTargetBuildActionsUserArrayOutput() PermissionTargetBuildActionsUserArrayOutput
	ToPermissionTargetBuildActionsUserArrayOutputWithContext(context.Context) PermissionTargetBuildActionsUserArrayOutput
}

type PermissionTargetBuildActionsUserArray []PermissionTargetBuildActionsUserInput

func (PermissionTargetBuildActionsUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetBuildActionsUser)(nil)).Elem()
}

func (i PermissionTargetBuildActionsUserArray) ToPermissionTargetBuildActionsUserArrayOutput() PermissionTargetBuildActionsUserArrayOutput {
	return i.ToPermissionTargetBuildActionsUserArrayOutputWithContext(context.Background())
}

func (i PermissionTargetBuildActionsUserArray) ToPermissionTargetBuildActionsUserArrayOutputWithContext(ctx context.Context) PermissionTargetBuildActionsUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetBuildActionsUserArrayOutput)
}

type PermissionTargetBuildActionsUserOutput struct{ *pulumi.OutputState }

func (PermissionTargetBuildActionsUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetBuildActionsUser)(nil)).Elem()
}

func (o PermissionTargetBuildActionsUserOutput) ToPermissionTargetBuildActionsUserOutput() PermissionTargetBuildActionsUserOutput {
	return o
}

func (o PermissionTargetBuildActionsUserOutput) ToPermissionTargetBuildActionsUserOutputWithContext(ctx context.Context) PermissionTargetBuildActionsUserOutput {
	return o
}

// Name of permission
func (o PermissionTargetBuildActionsUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PermissionTargetBuildActionsUser) string { return v.Name }).(pulumi.StringOutput)
}

func (o PermissionTargetBuildActionsUserOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetBuildActionsUser) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type PermissionTargetBuildActionsUserArrayOutput struct{ *pulumi.OutputState }

func (PermissionTargetBuildActionsUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetBuildActionsUser)(nil)).Elem()
}

func (o PermissionTargetBuildActionsUserArrayOutput) ToPermissionTargetBuildActionsUserArrayOutput() PermissionTargetBuildActionsUserArrayOutput {
	return o
}

func (o PermissionTargetBuildActionsUserArrayOutput) ToPermissionTargetBuildActionsUserArrayOutputWithContext(ctx context.Context) PermissionTargetBuildActionsUserArrayOutput {
	return o
}

func (o PermissionTargetBuildActionsUserArrayOutput) Index(i pulumi.IntInput) PermissionTargetBuildActionsUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PermissionTargetBuildActionsUser {
		return vs[0].([]PermissionTargetBuildActionsUser)[vs[1].(int)]
	}).(PermissionTargetBuildActionsUserOutput)
}

type PermissionTargetReleaseBundle struct {
	// -
	Actions *PermissionTargetReleaseBundleActions `pulumi:"actions"`
	// Pattern of artifacts to exclude
	ExcludesPatterns []string `pulumi:"excludesPatterns"`
	// Pattern of artifacts to include
	IncludesPatterns []string `pulumi:"includesPatterns"`
	// List of repositories this permission target is applicable for
	Repositories []string `pulumi:"repositories"`
}

// PermissionTargetReleaseBundleInput is an input type that accepts PermissionTargetReleaseBundleArgs and PermissionTargetReleaseBundleOutput values.
// You can construct a concrete instance of `PermissionTargetReleaseBundleInput` via:
//
//          PermissionTargetReleaseBundleArgs{...}
type PermissionTargetReleaseBundleInput interface {
	pulumi.Input

	ToPermissionTargetReleaseBundleOutput() PermissionTargetReleaseBundleOutput
	ToPermissionTargetReleaseBundleOutputWithContext(context.Context) PermissionTargetReleaseBundleOutput
}

type PermissionTargetReleaseBundleArgs struct {
	// -
	Actions PermissionTargetReleaseBundleActionsPtrInput `pulumi:"actions"`
	// Pattern of artifacts to exclude
	ExcludesPatterns pulumi.StringArrayInput `pulumi:"excludesPatterns"`
	// Pattern of artifacts to include
	IncludesPatterns pulumi.StringArrayInput `pulumi:"includesPatterns"`
	// List of repositories this permission target is applicable for
	Repositories pulumi.StringArrayInput `pulumi:"repositories"`
}

func (PermissionTargetReleaseBundleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetReleaseBundle)(nil)).Elem()
}

func (i PermissionTargetReleaseBundleArgs) ToPermissionTargetReleaseBundleOutput() PermissionTargetReleaseBundleOutput {
	return i.ToPermissionTargetReleaseBundleOutputWithContext(context.Background())
}

func (i PermissionTargetReleaseBundleArgs) ToPermissionTargetReleaseBundleOutputWithContext(ctx context.Context) PermissionTargetReleaseBundleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetReleaseBundleOutput)
}

func (i PermissionTargetReleaseBundleArgs) ToPermissionTargetReleaseBundlePtrOutput() PermissionTargetReleaseBundlePtrOutput {
	return i.ToPermissionTargetReleaseBundlePtrOutputWithContext(context.Background())
}

func (i PermissionTargetReleaseBundleArgs) ToPermissionTargetReleaseBundlePtrOutputWithContext(ctx context.Context) PermissionTargetReleaseBundlePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetReleaseBundleOutput).ToPermissionTargetReleaseBundlePtrOutputWithContext(ctx)
}

// PermissionTargetReleaseBundlePtrInput is an input type that accepts PermissionTargetReleaseBundleArgs, PermissionTargetReleaseBundlePtr and PermissionTargetReleaseBundlePtrOutput values.
// You can construct a concrete instance of `PermissionTargetReleaseBundlePtrInput` via:
//
//          PermissionTargetReleaseBundleArgs{...}
//
//  or:
//
//          nil
type PermissionTargetReleaseBundlePtrInput interface {
	pulumi.Input

	ToPermissionTargetReleaseBundlePtrOutput() PermissionTargetReleaseBundlePtrOutput
	ToPermissionTargetReleaseBundlePtrOutputWithContext(context.Context) PermissionTargetReleaseBundlePtrOutput
}

type permissionTargetReleaseBundlePtrType PermissionTargetReleaseBundleArgs

func PermissionTargetReleaseBundlePtr(v *PermissionTargetReleaseBundleArgs) PermissionTargetReleaseBundlePtrInput {
	return (*permissionTargetReleaseBundlePtrType)(v)
}

func (*permissionTargetReleaseBundlePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetReleaseBundle)(nil)).Elem()
}

func (i *permissionTargetReleaseBundlePtrType) ToPermissionTargetReleaseBundlePtrOutput() PermissionTargetReleaseBundlePtrOutput {
	return i.ToPermissionTargetReleaseBundlePtrOutputWithContext(context.Background())
}

func (i *permissionTargetReleaseBundlePtrType) ToPermissionTargetReleaseBundlePtrOutputWithContext(ctx context.Context) PermissionTargetReleaseBundlePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetReleaseBundlePtrOutput)
}

type PermissionTargetReleaseBundleOutput struct{ *pulumi.OutputState }

func (PermissionTargetReleaseBundleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetReleaseBundle)(nil)).Elem()
}

func (o PermissionTargetReleaseBundleOutput) ToPermissionTargetReleaseBundleOutput() PermissionTargetReleaseBundleOutput {
	return o
}

func (o PermissionTargetReleaseBundleOutput) ToPermissionTargetReleaseBundleOutputWithContext(ctx context.Context) PermissionTargetReleaseBundleOutput {
	return o
}

func (o PermissionTargetReleaseBundleOutput) ToPermissionTargetReleaseBundlePtrOutput() PermissionTargetReleaseBundlePtrOutput {
	return o.ToPermissionTargetReleaseBundlePtrOutputWithContext(context.Background())
}

func (o PermissionTargetReleaseBundleOutput) ToPermissionTargetReleaseBundlePtrOutputWithContext(ctx context.Context) PermissionTargetReleaseBundlePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PermissionTargetReleaseBundle) *PermissionTargetReleaseBundle {
		return &v
	}).(PermissionTargetReleaseBundlePtrOutput)
}

// -
func (o PermissionTargetReleaseBundleOutput) Actions() PermissionTargetReleaseBundleActionsPtrOutput {
	return o.ApplyT(func(v PermissionTargetReleaseBundle) *PermissionTargetReleaseBundleActions { return v.Actions }).(PermissionTargetReleaseBundleActionsPtrOutput)
}

// Pattern of artifacts to exclude
func (o PermissionTargetReleaseBundleOutput) ExcludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetReleaseBundle) []string { return v.ExcludesPatterns }).(pulumi.StringArrayOutput)
}

// Pattern of artifacts to include
func (o PermissionTargetReleaseBundleOutput) IncludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetReleaseBundle) []string { return v.IncludesPatterns }).(pulumi.StringArrayOutput)
}

// List of repositories this permission target is applicable for
func (o PermissionTargetReleaseBundleOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetReleaseBundle) []string { return v.Repositories }).(pulumi.StringArrayOutput)
}

type PermissionTargetReleaseBundlePtrOutput struct{ *pulumi.OutputState }

func (PermissionTargetReleaseBundlePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetReleaseBundle)(nil)).Elem()
}

func (o PermissionTargetReleaseBundlePtrOutput) ToPermissionTargetReleaseBundlePtrOutput() PermissionTargetReleaseBundlePtrOutput {
	return o
}

func (o PermissionTargetReleaseBundlePtrOutput) ToPermissionTargetReleaseBundlePtrOutputWithContext(ctx context.Context) PermissionTargetReleaseBundlePtrOutput {
	return o
}

func (o PermissionTargetReleaseBundlePtrOutput) Elem() PermissionTargetReleaseBundleOutput {
	return o.ApplyT(func(v *PermissionTargetReleaseBundle) PermissionTargetReleaseBundle {
		if v != nil {
			return *v
		}
		var ret PermissionTargetReleaseBundle
		return ret
	}).(PermissionTargetReleaseBundleOutput)
}

// -
func (o PermissionTargetReleaseBundlePtrOutput) Actions() PermissionTargetReleaseBundleActionsPtrOutput {
	return o.ApplyT(func(v *PermissionTargetReleaseBundle) *PermissionTargetReleaseBundleActions {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(PermissionTargetReleaseBundleActionsPtrOutput)
}

// Pattern of artifacts to exclude
func (o PermissionTargetReleaseBundlePtrOutput) ExcludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetReleaseBundle) []string {
		if v == nil {
			return nil
		}
		return v.ExcludesPatterns
	}).(pulumi.StringArrayOutput)
}

// Pattern of artifacts to include
func (o PermissionTargetReleaseBundlePtrOutput) IncludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetReleaseBundle) []string {
		if v == nil {
			return nil
		}
		return v.IncludesPatterns
	}).(pulumi.StringArrayOutput)
}

// List of repositories this permission target is applicable for
func (o PermissionTargetReleaseBundlePtrOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetReleaseBundle) []string {
		if v == nil {
			return nil
		}
		return v.Repositories
	}).(pulumi.StringArrayOutput)
}

type PermissionTargetReleaseBundleActions struct {
	// Groups this permission applies for.
	Groups []PermissionTargetReleaseBundleActionsGroup `pulumi:"groups"`
	// Users this permission target applies for.
	Users []PermissionTargetReleaseBundleActionsUser `pulumi:"users"`
}

// PermissionTargetReleaseBundleActionsInput is an input type that accepts PermissionTargetReleaseBundleActionsArgs and PermissionTargetReleaseBundleActionsOutput values.
// You can construct a concrete instance of `PermissionTargetReleaseBundleActionsInput` via:
//
//          PermissionTargetReleaseBundleActionsArgs{...}
type PermissionTargetReleaseBundleActionsInput interface {
	pulumi.Input

	ToPermissionTargetReleaseBundleActionsOutput() PermissionTargetReleaseBundleActionsOutput
	ToPermissionTargetReleaseBundleActionsOutputWithContext(context.Context) PermissionTargetReleaseBundleActionsOutput
}

type PermissionTargetReleaseBundleActionsArgs struct {
	// Groups this permission applies for.
	Groups PermissionTargetReleaseBundleActionsGroupArrayInput `pulumi:"groups"`
	// Users this permission target applies for.
	Users PermissionTargetReleaseBundleActionsUserArrayInput `pulumi:"users"`
}

func (PermissionTargetReleaseBundleActionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetReleaseBundleActions)(nil)).Elem()
}

func (i PermissionTargetReleaseBundleActionsArgs) ToPermissionTargetReleaseBundleActionsOutput() PermissionTargetReleaseBundleActionsOutput {
	return i.ToPermissionTargetReleaseBundleActionsOutputWithContext(context.Background())
}

func (i PermissionTargetReleaseBundleActionsArgs) ToPermissionTargetReleaseBundleActionsOutputWithContext(ctx context.Context) PermissionTargetReleaseBundleActionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetReleaseBundleActionsOutput)
}

func (i PermissionTargetReleaseBundleActionsArgs) ToPermissionTargetReleaseBundleActionsPtrOutput() PermissionTargetReleaseBundleActionsPtrOutput {
	return i.ToPermissionTargetReleaseBundleActionsPtrOutputWithContext(context.Background())
}

func (i PermissionTargetReleaseBundleActionsArgs) ToPermissionTargetReleaseBundleActionsPtrOutputWithContext(ctx context.Context) PermissionTargetReleaseBundleActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetReleaseBundleActionsOutput).ToPermissionTargetReleaseBundleActionsPtrOutputWithContext(ctx)
}

// PermissionTargetReleaseBundleActionsPtrInput is an input type that accepts PermissionTargetReleaseBundleActionsArgs, PermissionTargetReleaseBundleActionsPtr and PermissionTargetReleaseBundleActionsPtrOutput values.
// You can construct a concrete instance of `PermissionTargetReleaseBundleActionsPtrInput` via:
//
//          PermissionTargetReleaseBundleActionsArgs{...}
//
//  or:
//
//          nil
type PermissionTargetReleaseBundleActionsPtrInput interface {
	pulumi.Input

	ToPermissionTargetReleaseBundleActionsPtrOutput() PermissionTargetReleaseBundleActionsPtrOutput
	ToPermissionTargetReleaseBundleActionsPtrOutputWithContext(context.Context) PermissionTargetReleaseBundleActionsPtrOutput
}

type permissionTargetReleaseBundleActionsPtrType PermissionTargetReleaseBundleActionsArgs

func PermissionTargetReleaseBundleActionsPtr(v *PermissionTargetReleaseBundleActionsArgs) PermissionTargetReleaseBundleActionsPtrInput {
	return (*permissionTargetReleaseBundleActionsPtrType)(v)
}

func (*permissionTargetReleaseBundleActionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetReleaseBundleActions)(nil)).Elem()
}

func (i *permissionTargetReleaseBundleActionsPtrType) ToPermissionTargetReleaseBundleActionsPtrOutput() PermissionTargetReleaseBundleActionsPtrOutput {
	return i.ToPermissionTargetReleaseBundleActionsPtrOutputWithContext(context.Background())
}

func (i *permissionTargetReleaseBundleActionsPtrType) ToPermissionTargetReleaseBundleActionsPtrOutputWithContext(ctx context.Context) PermissionTargetReleaseBundleActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetReleaseBundleActionsPtrOutput)
}

type PermissionTargetReleaseBundleActionsOutput struct{ *pulumi.OutputState }

func (PermissionTargetReleaseBundleActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetReleaseBundleActions)(nil)).Elem()
}

func (o PermissionTargetReleaseBundleActionsOutput) ToPermissionTargetReleaseBundleActionsOutput() PermissionTargetReleaseBundleActionsOutput {
	return o
}

func (o PermissionTargetReleaseBundleActionsOutput) ToPermissionTargetReleaseBundleActionsOutputWithContext(ctx context.Context) PermissionTargetReleaseBundleActionsOutput {
	return o
}

func (o PermissionTargetReleaseBundleActionsOutput) ToPermissionTargetReleaseBundleActionsPtrOutput() PermissionTargetReleaseBundleActionsPtrOutput {
	return o.ToPermissionTargetReleaseBundleActionsPtrOutputWithContext(context.Background())
}

func (o PermissionTargetReleaseBundleActionsOutput) ToPermissionTargetReleaseBundleActionsPtrOutputWithContext(ctx context.Context) PermissionTargetReleaseBundleActionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PermissionTargetReleaseBundleActions) *PermissionTargetReleaseBundleActions {
		return &v
	}).(PermissionTargetReleaseBundleActionsPtrOutput)
}

// Groups this permission applies for.
func (o PermissionTargetReleaseBundleActionsOutput) Groups() PermissionTargetReleaseBundleActionsGroupArrayOutput {
	return o.ApplyT(func(v PermissionTargetReleaseBundleActions) []PermissionTargetReleaseBundleActionsGroup {
		return v.Groups
	}).(PermissionTargetReleaseBundleActionsGroupArrayOutput)
}

// Users this permission target applies for.
func (o PermissionTargetReleaseBundleActionsOutput) Users() PermissionTargetReleaseBundleActionsUserArrayOutput {
	return o.ApplyT(func(v PermissionTargetReleaseBundleActions) []PermissionTargetReleaseBundleActionsUser {
		return v.Users
	}).(PermissionTargetReleaseBundleActionsUserArrayOutput)
}

type PermissionTargetReleaseBundleActionsPtrOutput struct{ *pulumi.OutputState }

func (PermissionTargetReleaseBundleActionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetReleaseBundleActions)(nil)).Elem()
}

func (o PermissionTargetReleaseBundleActionsPtrOutput) ToPermissionTargetReleaseBundleActionsPtrOutput() PermissionTargetReleaseBundleActionsPtrOutput {
	return o
}

func (o PermissionTargetReleaseBundleActionsPtrOutput) ToPermissionTargetReleaseBundleActionsPtrOutputWithContext(ctx context.Context) PermissionTargetReleaseBundleActionsPtrOutput {
	return o
}

func (o PermissionTargetReleaseBundleActionsPtrOutput) Elem() PermissionTargetReleaseBundleActionsOutput {
	return o.ApplyT(func(v *PermissionTargetReleaseBundleActions) PermissionTargetReleaseBundleActions {
		if v != nil {
			return *v
		}
		var ret PermissionTargetReleaseBundleActions
		return ret
	}).(PermissionTargetReleaseBundleActionsOutput)
}

// Groups this permission applies for.
func (o PermissionTargetReleaseBundleActionsPtrOutput) Groups() PermissionTargetReleaseBundleActionsGroupArrayOutput {
	return o.ApplyT(func(v *PermissionTargetReleaseBundleActions) []PermissionTargetReleaseBundleActionsGroup {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(PermissionTargetReleaseBundleActionsGroupArrayOutput)
}

// Users this permission target applies for.
func (o PermissionTargetReleaseBundleActionsPtrOutput) Users() PermissionTargetReleaseBundleActionsUserArrayOutput {
	return o.ApplyT(func(v *PermissionTargetReleaseBundleActions) []PermissionTargetReleaseBundleActionsUser {
		if v == nil {
			return nil
		}
		return v.Users
	}).(PermissionTargetReleaseBundleActionsUserArrayOutput)
}

type PermissionTargetReleaseBundleActionsGroup struct {
	// Name of permission
	Name        string   `pulumi:"name"`
	Permissions []string `pulumi:"permissions"`
}

// PermissionTargetReleaseBundleActionsGroupInput is an input type that accepts PermissionTargetReleaseBundleActionsGroupArgs and PermissionTargetReleaseBundleActionsGroupOutput values.
// You can construct a concrete instance of `PermissionTargetReleaseBundleActionsGroupInput` via:
//
//          PermissionTargetReleaseBundleActionsGroupArgs{...}
type PermissionTargetReleaseBundleActionsGroupInput interface {
	pulumi.Input

	ToPermissionTargetReleaseBundleActionsGroupOutput() PermissionTargetReleaseBundleActionsGroupOutput
	ToPermissionTargetReleaseBundleActionsGroupOutputWithContext(context.Context) PermissionTargetReleaseBundleActionsGroupOutput
}

type PermissionTargetReleaseBundleActionsGroupArgs struct {
	// Name of permission
	Name        pulumi.StringInput      `pulumi:"name"`
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (PermissionTargetReleaseBundleActionsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetReleaseBundleActionsGroup)(nil)).Elem()
}

func (i PermissionTargetReleaseBundleActionsGroupArgs) ToPermissionTargetReleaseBundleActionsGroupOutput() PermissionTargetReleaseBundleActionsGroupOutput {
	return i.ToPermissionTargetReleaseBundleActionsGroupOutputWithContext(context.Background())
}

func (i PermissionTargetReleaseBundleActionsGroupArgs) ToPermissionTargetReleaseBundleActionsGroupOutputWithContext(ctx context.Context) PermissionTargetReleaseBundleActionsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetReleaseBundleActionsGroupOutput)
}

// PermissionTargetReleaseBundleActionsGroupArrayInput is an input type that accepts PermissionTargetReleaseBundleActionsGroupArray and PermissionTargetReleaseBundleActionsGroupArrayOutput values.
// You can construct a concrete instance of `PermissionTargetReleaseBundleActionsGroupArrayInput` via:
//
//          PermissionTargetReleaseBundleActionsGroupArray{ PermissionTargetReleaseBundleActionsGroupArgs{...} }
type PermissionTargetReleaseBundleActionsGroupArrayInput interface {
	pulumi.Input

	ToPermissionTargetReleaseBundleActionsGroupArrayOutput() PermissionTargetReleaseBundleActionsGroupArrayOutput
	ToPermissionTargetReleaseBundleActionsGroupArrayOutputWithContext(context.Context) PermissionTargetReleaseBundleActionsGroupArrayOutput
}

type PermissionTargetReleaseBundleActionsGroupArray []PermissionTargetReleaseBundleActionsGroupInput

func (PermissionTargetReleaseBundleActionsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetReleaseBundleActionsGroup)(nil)).Elem()
}

func (i PermissionTargetReleaseBundleActionsGroupArray) ToPermissionTargetReleaseBundleActionsGroupArrayOutput() PermissionTargetReleaseBundleActionsGroupArrayOutput {
	return i.ToPermissionTargetReleaseBundleActionsGroupArrayOutputWithContext(context.Background())
}

func (i PermissionTargetReleaseBundleActionsGroupArray) ToPermissionTargetReleaseBundleActionsGroupArrayOutputWithContext(ctx context.Context) PermissionTargetReleaseBundleActionsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetReleaseBundleActionsGroupArrayOutput)
}

type PermissionTargetReleaseBundleActionsGroupOutput struct{ *pulumi.OutputState }

func (PermissionTargetReleaseBundleActionsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetReleaseBundleActionsGroup)(nil)).Elem()
}

func (o PermissionTargetReleaseBundleActionsGroupOutput) ToPermissionTargetReleaseBundleActionsGroupOutput() PermissionTargetReleaseBundleActionsGroupOutput {
	return o
}

func (o PermissionTargetReleaseBundleActionsGroupOutput) ToPermissionTargetReleaseBundleActionsGroupOutputWithContext(ctx context.Context) PermissionTargetReleaseBundleActionsGroupOutput {
	return o
}

// Name of permission
func (o PermissionTargetReleaseBundleActionsGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PermissionTargetReleaseBundleActionsGroup) string { return v.Name }).(pulumi.StringOutput)
}

func (o PermissionTargetReleaseBundleActionsGroupOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetReleaseBundleActionsGroup) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type PermissionTargetReleaseBundleActionsGroupArrayOutput struct{ *pulumi.OutputState }

func (PermissionTargetReleaseBundleActionsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetReleaseBundleActionsGroup)(nil)).Elem()
}

func (o PermissionTargetReleaseBundleActionsGroupArrayOutput) ToPermissionTargetReleaseBundleActionsGroupArrayOutput() PermissionTargetReleaseBundleActionsGroupArrayOutput {
	return o
}

func (o PermissionTargetReleaseBundleActionsGroupArrayOutput) ToPermissionTargetReleaseBundleActionsGroupArrayOutputWithContext(ctx context.Context) PermissionTargetReleaseBundleActionsGroupArrayOutput {
	return o
}

func (o PermissionTargetReleaseBundleActionsGroupArrayOutput) Index(i pulumi.IntInput) PermissionTargetReleaseBundleActionsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PermissionTargetReleaseBundleActionsGroup {
		return vs[0].([]PermissionTargetReleaseBundleActionsGroup)[vs[1].(int)]
	}).(PermissionTargetReleaseBundleActionsGroupOutput)
}

type PermissionTargetReleaseBundleActionsUser struct {
	// Name of permission
	Name        string   `pulumi:"name"`
	Permissions []string `pulumi:"permissions"`
}

// PermissionTargetReleaseBundleActionsUserInput is an input type that accepts PermissionTargetReleaseBundleActionsUserArgs and PermissionTargetReleaseBundleActionsUserOutput values.
// You can construct a concrete instance of `PermissionTargetReleaseBundleActionsUserInput` via:
//
//          PermissionTargetReleaseBundleActionsUserArgs{...}
type PermissionTargetReleaseBundleActionsUserInput interface {
	pulumi.Input

	ToPermissionTargetReleaseBundleActionsUserOutput() PermissionTargetReleaseBundleActionsUserOutput
	ToPermissionTargetReleaseBundleActionsUserOutputWithContext(context.Context) PermissionTargetReleaseBundleActionsUserOutput
}

type PermissionTargetReleaseBundleActionsUserArgs struct {
	// Name of permission
	Name        pulumi.StringInput      `pulumi:"name"`
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (PermissionTargetReleaseBundleActionsUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetReleaseBundleActionsUser)(nil)).Elem()
}

func (i PermissionTargetReleaseBundleActionsUserArgs) ToPermissionTargetReleaseBundleActionsUserOutput() PermissionTargetReleaseBundleActionsUserOutput {
	return i.ToPermissionTargetReleaseBundleActionsUserOutputWithContext(context.Background())
}

func (i PermissionTargetReleaseBundleActionsUserArgs) ToPermissionTargetReleaseBundleActionsUserOutputWithContext(ctx context.Context) PermissionTargetReleaseBundleActionsUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetReleaseBundleActionsUserOutput)
}

// PermissionTargetReleaseBundleActionsUserArrayInput is an input type that accepts PermissionTargetReleaseBundleActionsUserArray and PermissionTargetReleaseBundleActionsUserArrayOutput values.
// You can construct a concrete instance of `PermissionTargetReleaseBundleActionsUserArrayInput` via:
//
//          PermissionTargetReleaseBundleActionsUserArray{ PermissionTargetReleaseBundleActionsUserArgs{...} }
type PermissionTargetReleaseBundleActionsUserArrayInput interface {
	pulumi.Input

	ToPermissionTargetReleaseBundleActionsUserArrayOutput() PermissionTargetReleaseBundleActionsUserArrayOutput
	ToPermissionTargetReleaseBundleActionsUserArrayOutputWithContext(context.Context) PermissionTargetReleaseBundleActionsUserArrayOutput
}

type PermissionTargetReleaseBundleActionsUserArray []PermissionTargetReleaseBundleActionsUserInput

func (PermissionTargetReleaseBundleActionsUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetReleaseBundleActionsUser)(nil)).Elem()
}

func (i PermissionTargetReleaseBundleActionsUserArray) ToPermissionTargetReleaseBundleActionsUserArrayOutput() PermissionTargetReleaseBundleActionsUserArrayOutput {
	return i.ToPermissionTargetReleaseBundleActionsUserArrayOutputWithContext(context.Background())
}

func (i PermissionTargetReleaseBundleActionsUserArray) ToPermissionTargetReleaseBundleActionsUserArrayOutputWithContext(ctx context.Context) PermissionTargetReleaseBundleActionsUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetReleaseBundleActionsUserArrayOutput)
}

type PermissionTargetReleaseBundleActionsUserOutput struct{ *pulumi.OutputState }

func (PermissionTargetReleaseBundleActionsUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetReleaseBundleActionsUser)(nil)).Elem()
}

func (o PermissionTargetReleaseBundleActionsUserOutput) ToPermissionTargetReleaseBundleActionsUserOutput() PermissionTargetReleaseBundleActionsUserOutput {
	return o
}

func (o PermissionTargetReleaseBundleActionsUserOutput) ToPermissionTargetReleaseBundleActionsUserOutputWithContext(ctx context.Context) PermissionTargetReleaseBundleActionsUserOutput {
	return o
}

// Name of permission
func (o PermissionTargetReleaseBundleActionsUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PermissionTargetReleaseBundleActionsUser) string { return v.Name }).(pulumi.StringOutput)
}

func (o PermissionTargetReleaseBundleActionsUserOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetReleaseBundleActionsUser) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type PermissionTargetReleaseBundleActionsUserArrayOutput struct{ *pulumi.OutputState }

func (PermissionTargetReleaseBundleActionsUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetReleaseBundleActionsUser)(nil)).Elem()
}

func (o PermissionTargetReleaseBundleActionsUserArrayOutput) ToPermissionTargetReleaseBundleActionsUserArrayOutput() PermissionTargetReleaseBundleActionsUserArrayOutput {
	return o
}

func (o PermissionTargetReleaseBundleActionsUserArrayOutput) ToPermissionTargetReleaseBundleActionsUserArrayOutputWithContext(ctx context.Context) PermissionTargetReleaseBundleActionsUserArrayOutput {
	return o
}

func (o PermissionTargetReleaseBundleActionsUserArrayOutput) Index(i pulumi.IntInput) PermissionTargetReleaseBundleActionsUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PermissionTargetReleaseBundleActionsUser {
		return vs[0].([]PermissionTargetReleaseBundleActionsUser)[vs[1].(int)]
	}).(PermissionTargetReleaseBundleActionsUserOutput)
}

type PermissionTargetRepo struct {
	// -
	Actions *PermissionTargetRepoActions `pulumi:"actions"`
	// Pattern of artifacts to exclude
	ExcludesPatterns []string `pulumi:"excludesPatterns"`
	// Pattern of artifacts to include
	IncludesPatterns []string `pulumi:"includesPatterns"`
	// List of repositories this permission target is applicable for
	Repositories []string `pulumi:"repositories"`
}

// PermissionTargetRepoInput is an input type that accepts PermissionTargetRepoArgs and PermissionTargetRepoOutput values.
// You can construct a concrete instance of `PermissionTargetRepoInput` via:
//
//          PermissionTargetRepoArgs{...}
type PermissionTargetRepoInput interface {
	pulumi.Input

	ToPermissionTargetRepoOutput() PermissionTargetRepoOutput
	ToPermissionTargetRepoOutputWithContext(context.Context) PermissionTargetRepoOutput
}

type PermissionTargetRepoArgs struct {
	// -
	Actions PermissionTargetRepoActionsPtrInput `pulumi:"actions"`
	// Pattern of artifacts to exclude
	ExcludesPatterns pulumi.StringArrayInput `pulumi:"excludesPatterns"`
	// Pattern of artifacts to include
	IncludesPatterns pulumi.StringArrayInput `pulumi:"includesPatterns"`
	// List of repositories this permission target is applicable for
	Repositories pulumi.StringArrayInput `pulumi:"repositories"`
}

func (PermissionTargetRepoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetRepo)(nil)).Elem()
}

func (i PermissionTargetRepoArgs) ToPermissionTargetRepoOutput() PermissionTargetRepoOutput {
	return i.ToPermissionTargetRepoOutputWithContext(context.Background())
}

func (i PermissionTargetRepoArgs) ToPermissionTargetRepoOutputWithContext(ctx context.Context) PermissionTargetRepoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetRepoOutput)
}

func (i PermissionTargetRepoArgs) ToPermissionTargetRepoPtrOutput() PermissionTargetRepoPtrOutput {
	return i.ToPermissionTargetRepoPtrOutputWithContext(context.Background())
}

func (i PermissionTargetRepoArgs) ToPermissionTargetRepoPtrOutputWithContext(ctx context.Context) PermissionTargetRepoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetRepoOutput).ToPermissionTargetRepoPtrOutputWithContext(ctx)
}

// PermissionTargetRepoPtrInput is an input type that accepts PermissionTargetRepoArgs, PermissionTargetRepoPtr and PermissionTargetRepoPtrOutput values.
// You can construct a concrete instance of `PermissionTargetRepoPtrInput` via:
//
//          PermissionTargetRepoArgs{...}
//
//  or:
//
//          nil
type PermissionTargetRepoPtrInput interface {
	pulumi.Input

	ToPermissionTargetRepoPtrOutput() PermissionTargetRepoPtrOutput
	ToPermissionTargetRepoPtrOutputWithContext(context.Context) PermissionTargetRepoPtrOutput
}

type permissionTargetRepoPtrType PermissionTargetRepoArgs

func PermissionTargetRepoPtr(v *PermissionTargetRepoArgs) PermissionTargetRepoPtrInput {
	return (*permissionTargetRepoPtrType)(v)
}

func (*permissionTargetRepoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetRepo)(nil)).Elem()
}

func (i *permissionTargetRepoPtrType) ToPermissionTargetRepoPtrOutput() PermissionTargetRepoPtrOutput {
	return i.ToPermissionTargetRepoPtrOutputWithContext(context.Background())
}

func (i *permissionTargetRepoPtrType) ToPermissionTargetRepoPtrOutputWithContext(ctx context.Context) PermissionTargetRepoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetRepoPtrOutput)
}

type PermissionTargetRepoOutput struct{ *pulumi.OutputState }

func (PermissionTargetRepoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetRepo)(nil)).Elem()
}

func (o PermissionTargetRepoOutput) ToPermissionTargetRepoOutput() PermissionTargetRepoOutput {
	return o
}

func (o PermissionTargetRepoOutput) ToPermissionTargetRepoOutputWithContext(ctx context.Context) PermissionTargetRepoOutput {
	return o
}

func (o PermissionTargetRepoOutput) ToPermissionTargetRepoPtrOutput() PermissionTargetRepoPtrOutput {
	return o.ToPermissionTargetRepoPtrOutputWithContext(context.Background())
}

func (o PermissionTargetRepoOutput) ToPermissionTargetRepoPtrOutputWithContext(ctx context.Context) PermissionTargetRepoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PermissionTargetRepo) *PermissionTargetRepo {
		return &v
	}).(PermissionTargetRepoPtrOutput)
}

// -
func (o PermissionTargetRepoOutput) Actions() PermissionTargetRepoActionsPtrOutput {
	return o.ApplyT(func(v PermissionTargetRepo) *PermissionTargetRepoActions { return v.Actions }).(PermissionTargetRepoActionsPtrOutput)
}

// Pattern of artifacts to exclude
func (o PermissionTargetRepoOutput) ExcludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetRepo) []string { return v.ExcludesPatterns }).(pulumi.StringArrayOutput)
}

// Pattern of artifacts to include
func (o PermissionTargetRepoOutput) IncludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetRepo) []string { return v.IncludesPatterns }).(pulumi.StringArrayOutput)
}

// List of repositories this permission target is applicable for
func (o PermissionTargetRepoOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetRepo) []string { return v.Repositories }).(pulumi.StringArrayOutput)
}

type PermissionTargetRepoPtrOutput struct{ *pulumi.OutputState }

func (PermissionTargetRepoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetRepo)(nil)).Elem()
}

func (o PermissionTargetRepoPtrOutput) ToPermissionTargetRepoPtrOutput() PermissionTargetRepoPtrOutput {
	return o
}

func (o PermissionTargetRepoPtrOutput) ToPermissionTargetRepoPtrOutputWithContext(ctx context.Context) PermissionTargetRepoPtrOutput {
	return o
}

func (o PermissionTargetRepoPtrOutput) Elem() PermissionTargetRepoOutput {
	return o.ApplyT(func(v *PermissionTargetRepo) PermissionTargetRepo {
		if v != nil {
			return *v
		}
		var ret PermissionTargetRepo
		return ret
	}).(PermissionTargetRepoOutput)
}

// -
func (o PermissionTargetRepoPtrOutput) Actions() PermissionTargetRepoActionsPtrOutput {
	return o.ApplyT(func(v *PermissionTargetRepo) *PermissionTargetRepoActions {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(PermissionTargetRepoActionsPtrOutput)
}

// Pattern of artifacts to exclude
func (o PermissionTargetRepoPtrOutput) ExcludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetRepo) []string {
		if v == nil {
			return nil
		}
		return v.ExcludesPatterns
	}).(pulumi.StringArrayOutput)
}

// Pattern of artifacts to include
func (o PermissionTargetRepoPtrOutput) IncludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetRepo) []string {
		if v == nil {
			return nil
		}
		return v.IncludesPatterns
	}).(pulumi.StringArrayOutput)
}

// List of repositories this permission target is applicable for
func (o PermissionTargetRepoPtrOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetRepo) []string {
		if v == nil {
			return nil
		}
		return v.Repositories
	}).(pulumi.StringArrayOutput)
}

type PermissionTargetRepoActions struct {
	// Groups this permission applies for.
	Groups []PermissionTargetRepoActionsGroup `pulumi:"groups"`
	// Users this permission target applies for.
	Users []PermissionTargetRepoActionsUser `pulumi:"users"`
}

// PermissionTargetRepoActionsInput is an input type that accepts PermissionTargetRepoActionsArgs and PermissionTargetRepoActionsOutput values.
// You can construct a concrete instance of `PermissionTargetRepoActionsInput` via:
//
//          PermissionTargetRepoActionsArgs{...}
type PermissionTargetRepoActionsInput interface {
	pulumi.Input

	ToPermissionTargetRepoActionsOutput() PermissionTargetRepoActionsOutput
	ToPermissionTargetRepoActionsOutputWithContext(context.Context) PermissionTargetRepoActionsOutput
}

type PermissionTargetRepoActionsArgs struct {
	// Groups this permission applies for.
	Groups PermissionTargetRepoActionsGroupArrayInput `pulumi:"groups"`
	// Users this permission target applies for.
	Users PermissionTargetRepoActionsUserArrayInput `pulumi:"users"`
}

func (PermissionTargetRepoActionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetRepoActions)(nil)).Elem()
}

func (i PermissionTargetRepoActionsArgs) ToPermissionTargetRepoActionsOutput() PermissionTargetRepoActionsOutput {
	return i.ToPermissionTargetRepoActionsOutputWithContext(context.Background())
}

func (i PermissionTargetRepoActionsArgs) ToPermissionTargetRepoActionsOutputWithContext(ctx context.Context) PermissionTargetRepoActionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetRepoActionsOutput)
}

func (i PermissionTargetRepoActionsArgs) ToPermissionTargetRepoActionsPtrOutput() PermissionTargetRepoActionsPtrOutput {
	return i.ToPermissionTargetRepoActionsPtrOutputWithContext(context.Background())
}

func (i PermissionTargetRepoActionsArgs) ToPermissionTargetRepoActionsPtrOutputWithContext(ctx context.Context) PermissionTargetRepoActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetRepoActionsOutput).ToPermissionTargetRepoActionsPtrOutputWithContext(ctx)
}

// PermissionTargetRepoActionsPtrInput is an input type that accepts PermissionTargetRepoActionsArgs, PermissionTargetRepoActionsPtr and PermissionTargetRepoActionsPtrOutput values.
// You can construct a concrete instance of `PermissionTargetRepoActionsPtrInput` via:
//
//          PermissionTargetRepoActionsArgs{...}
//
//  or:
//
//          nil
type PermissionTargetRepoActionsPtrInput interface {
	pulumi.Input

	ToPermissionTargetRepoActionsPtrOutput() PermissionTargetRepoActionsPtrOutput
	ToPermissionTargetRepoActionsPtrOutputWithContext(context.Context) PermissionTargetRepoActionsPtrOutput
}

type permissionTargetRepoActionsPtrType PermissionTargetRepoActionsArgs

func PermissionTargetRepoActionsPtr(v *PermissionTargetRepoActionsArgs) PermissionTargetRepoActionsPtrInput {
	return (*permissionTargetRepoActionsPtrType)(v)
}

func (*permissionTargetRepoActionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetRepoActions)(nil)).Elem()
}

func (i *permissionTargetRepoActionsPtrType) ToPermissionTargetRepoActionsPtrOutput() PermissionTargetRepoActionsPtrOutput {
	return i.ToPermissionTargetRepoActionsPtrOutputWithContext(context.Background())
}

func (i *permissionTargetRepoActionsPtrType) ToPermissionTargetRepoActionsPtrOutputWithContext(ctx context.Context) PermissionTargetRepoActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetRepoActionsPtrOutput)
}

type PermissionTargetRepoActionsOutput struct{ *pulumi.OutputState }

func (PermissionTargetRepoActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetRepoActions)(nil)).Elem()
}

func (o PermissionTargetRepoActionsOutput) ToPermissionTargetRepoActionsOutput() PermissionTargetRepoActionsOutput {
	return o
}

func (o PermissionTargetRepoActionsOutput) ToPermissionTargetRepoActionsOutputWithContext(ctx context.Context) PermissionTargetRepoActionsOutput {
	return o
}

func (o PermissionTargetRepoActionsOutput) ToPermissionTargetRepoActionsPtrOutput() PermissionTargetRepoActionsPtrOutput {
	return o.ToPermissionTargetRepoActionsPtrOutputWithContext(context.Background())
}

func (o PermissionTargetRepoActionsOutput) ToPermissionTargetRepoActionsPtrOutputWithContext(ctx context.Context) PermissionTargetRepoActionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PermissionTargetRepoActions) *PermissionTargetRepoActions {
		return &v
	}).(PermissionTargetRepoActionsPtrOutput)
}

// Groups this permission applies for.
func (o PermissionTargetRepoActionsOutput) Groups() PermissionTargetRepoActionsGroupArrayOutput {
	return o.ApplyT(func(v PermissionTargetRepoActions) []PermissionTargetRepoActionsGroup { return v.Groups }).(PermissionTargetRepoActionsGroupArrayOutput)
}

// Users this permission target applies for.
func (o PermissionTargetRepoActionsOutput) Users() PermissionTargetRepoActionsUserArrayOutput {
	return o.ApplyT(func(v PermissionTargetRepoActions) []PermissionTargetRepoActionsUser { return v.Users }).(PermissionTargetRepoActionsUserArrayOutput)
}

type PermissionTargetRepoActionsPtrOutput struct{ *pulumi.OutputState }

func (PermissionTargetRepoActionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetRepoActions)(nil)).Elem()
}

func (o PermissionTargetRepoActionsPtrOutput) ToPermissionTargetRepoActionsPtrOutput() PermissionTargetRepoActionsPtrOutput {
	return o
}

func (o PermissionTargetRepoActionsPtrOutput) ToPermissionTargetRepoActionsPtrOutputWithContext(ctx context.Context) PermissionTargetRepoActionsPtrOutput {
	return o
}

func (o PermissionTargetRepoActionsPtrOutput) Elem() PermissionTargetRepoActionsOutput {
	return o.ApplyT(func(v *PermissionTargetRepoActions) PermissionTargetRepoActions {
		if v != nil {
			return *v
		}
		var ret PermissionTargetRepoActions
		return ret
	}).(PermissionTargetRepoActionsOutput)
}

// Groups this permission applies for.
func (o PermissionTargetRepoActionsPtrOutput) Groups() PermissionTargetRepoActionsGroupArrayOutput {
	return o.ApplyT(func(v *PermissionTargetRepoActions) []PermissionTargetRepoActionsGroup {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(PermissionTargetRepoActionsGroupArrayOutput)
}

// Users this permission target applies for.
func (o PermissionTargetRepoActionsPtrOutput) Users() PermissionTargetRepoActionsUserArrayOutput {
	return o.ApplyT(func(v *PermissionTargetRepoActions) []PermissionTargetRepoActionsUser {
		if v == nil {
			return nil
		}
		return v.Users
	}).(PermissionTargetRepoActionsUserArrayOutput)
}

type PermissionTargetRepoActionsGroup struct {
	// Name of permission
	Name        string   `pulumi:"name"`
	Permissions []string `pulumi:"permissions"`
}

// PermissionTargetRepoActionsGroupInput is an input type that accepts PermissionTargetRepoActionsGroupArgs and PermissionTargetRepoActionsGroupOutput values.
// You can construct a concrete instance of `PermissionTargetRepoActionsGroupInput` via:
//
//          PermissionTargetRepoActionsGroupArgs{...}
type PermissionTargetRepoActionsGroupInput interface {
	pulumi.Input

	ToPermissionTargetRepoActionsGroupOutput() PermissionTargetRepoActionsGroupOutput
	ToPermissionTargetRepoActionsGroupOutputWithContext(context.Context) PermissionTargetRepoActionsGroupOutput
}

type PermissionTargetRepoActionsGroupArgs struct {
	// Name of permission
	Name        pulumi.StringInput      `pulumi:"name"`
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (PermissionTargetRepoActionsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetRepoActionsGroup)(nil)).Elem()
}

func (i PermissionTargetRepoActionsGroupArgs) ToPermissionTargetRepoActionsGroupOutput() PermissionTargetRepoActionsGroupOutput {
	return i.ToPermissionTargetRepoActionsGroupOutputWithContext(context.Background())
}

func (i PermissionTargetRepoActionsGroupArgs) ToPermissionTargetRepoActionsGroupOutputWithContext(ctx context.Context) PermissionTargetRepoActionsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetRepoActionsGroupOutput)
}

// PermissionTargetRepoActionsGroupArrayInput is an input type that accepts PermissionTargetRepoActionsGroupArray and PermissionTargetRepoActionsGroupArrayOutput values.
// You can construct a concrete instance of `PermissionTargetRepoActionsGroupArrayInput` via:
//
//          PermissionTargetRepoActionsGroupArray{ PermissionTargetRepoActionsGroupArgs{...} }
type PermissionTargetRepoActionsGroupArrayInput interface {
	pulumi.Input

	ToPermissionTargetRepoActionsGroupArrayOutput() PermissionTargetRepoActionsGroupArrayOutput
	ToPermissionTargetRepoActionsGroupArrayOutputWithContext(context.Context) PermissionTargetRepoActionsGroupArrayOutput
}

type PermissionTargetRepoActionsGroupArray []PermissionTargetRepoActionsGroupInput

func (PermissionTargetRepoActionsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetRepoActionsGroup)(nil)).Elem()
}

func (i PermissionTargetRepoActionsGroupArray) ToPermissionTargetRepoActionsGroupArrayOutput() PermissionTargetRepoActionsGroupArrayOutput {
	return i.ToPermissionTargetRepoActionsGroupArrayOutputWithContext(context.Background())
}

func (i PermissionTargetRepoActionsGroupArray) ToPermissionTargetRepoActionsGroupArrayOutputWithContext(ctx context.Context) PermissionTargetRepoActionsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetRepoActionsGroupArrayOutput)
}

type PermissionTargetRepoActionsGroupOutput struct{ *pulumi.OutputState }

func (PermissionTargetRepoActionsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetRepoActionsGroup)(nil)).Elem()
}

func (o PermissionTargetRepoActionsGroupOutput) ToPermissionTargetRepoActionsGroupOutput() PermissionTargetRepoActionsGroupOutput {
	return o
}

func (o PermissionTargetRepoActionsGroupOutput) ToPermissionTargetRepoActionsGroupOutputWithContext(ctx context.Context) PermissionTargetRepoActionsGroupOutput {
	return o
}

// Name of permission
func (o PermissionTargetRepoActionsGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PermissionTargetRepoActionsGroup) string { return v.Name }).(pulumi.StringOutput)
}

func (o PermissionTargetRepoActionsGroupOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetRepoActionsGroup) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type PermissionTargetRepoActionsGroupArrayOutput struct{ *pulumi.OutputState }

func (PermissionTargetRepoActionsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetRepoActionsGroup)(nil)).Elem()
}

func (o PermissionTargetRepoActionsGroupArrayOutput) ToPermissionTargetRepoActionsGroupArrayOutput() PermissionTargetRepoActionsGroupArrayOutput {
	return o
}

func (o PermissionTargetRepoActionsGroupArrayOutput) ToPermissionTargetRepoActionsGroupArrayOutputWithContext(ctx context.Context) PermissionTargetRepoActionsGroupArrayOutput {
	return o
}

func (o PermissionTargetRepoActionsGroupArrayOutput) Index(i pulumi.IntInput) PermissionTargetRepoActionsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PermissionTargetRepoActionsGroup {
		return vs[0].([]PermissionTargetRepoActionsGroup)[vs[1].(int)]
	}).(PermissionTargetRepoActionsGroupOutput)
}

type PermissionTargetRepoActionsUser struct {
	// Name of permission
	Name        string   `pulumi:"name"`
	Permissions []string `pulumi:"permissions"`
}

// PermissionTargetRepoActionsUserInput is an input type that accepts PermissionTargetRepoActionsUserArgs and PermissionTargetRepoActionsUserOutput values.
// You can construct a concrete instance of `PermissionTargetRepoActionsUserInput` via:
//
//          PermissionTargetRepoActionsUserArgs{...}
type PermissionTargetRepoActionsUserInput interface {
	pulumi.Input

	ToPermissionTargetRepoActionsUserOutput() PermissionTargetRepoActionsUserOutput
	ToPermissionTargetRepoActionsUserOutputWithContext(context.Context) PermissionTargetRepoActionsUserOutput
}

type PermissionTargetRepoActionsUserArgs struct {
	// Name of permission
	Name        pulumi.StringInput      `pulumi:"name"`
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (PermissionTargetRepoActionsUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetRepoActionsUser)(nil)).Elem()
}

func (i PermissionTargetRepoActionsUserArgs) ToPermissionTargetRepoActionsUserOutput() PermissionTargetRepoActionsUserOutput {
	return i.ToPermissionTargetRepoActionsUserOutputWithContext(context.Background())
}

func (i PermissionTargetRepoActionsUserArgs) ToPermissionTargetRepoActionsUserOutputWithContext(ctx context.Context) PermissionTargetRepoActionsUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetRepoActionsUserOutput)
}

// PermissionTargetRepoActionsUserArrayInput is an input type that accepts PermissionTargetRepoActionsUserArray and PermissionTargetRepoActionsUserArrayOutput values.
// You can construct a concrete instance of `PermissionTargetRepoActionsUserArrayInput` via:
//
//          PermissionTargetRepoActionsUserArray{ PermissionTargetRepoActionsUserArgs{...} }
type PermissionTargetRepoActionsUserArrayInput interface {
	pulumi.Input

	ToPermissionTargetRepoActionsUserArrayOutput() PermissionTargetRepoActionsUserArrayOutput
	ToPermissionTargetRepoActionsUserArrayOutputWithContext(context.Context) PermissionTargetRepoActionsUserArrayOutput
}

type PermissionTargetRepoActionsUserArray []PermissionTargetRepoActionsUserInput

func (PermissionTargetRepoActionsUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetRepoActionsUser)(nil)).Elem()
}

func (i PermissionTargetRepoActionsUserArray) ToPermissionTargetRepoActionsUserArrayOutput() PermissionTargetRepoActionsUserArrayOutput {
	return i.ToPermissionTargetRepoActionsUserArrayOutputWithContext(context.Background())
}

func (i PermissionTargetRepoActionsUserArray) ToPermissionTargetRepoActionsUserArrayOutputWithContext(ctx context.Context) PermissionTargetRepoActionsUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetRepoActionsUserArrayOutput)
}

type PermissionTargetRepoActionsUserOutput struct{ *pulumi.OutputState }

func (PermissionTargetRepoActionsUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetRepoActionsUser)(nil)).Elem()
}

func (o PermissionTargetRepoActionsUserOutput) ToPermissionTargetRepoActionsUserOutput() PermissionTargetRepoActionsUserOutput {
	return o
}

func (o PermissionTargetRepoActionsUserOutput) ToPermissionTargetRepoActionsUserOutputWithContext(ctx context.Context) PermissionTargetRepoActionsUserOutput {
	return o
}

// Name of permission
func (o PermissionTargetRepoActionsUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PermissionTargetRepoActionsUser) string { return v.Name }).(pulumi.StringOutput)
}

func (o PermissionTargetRepoActionsUserOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetRepoActionsUser) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type PermissionTargetRepoActionsUserArrayOutput struct{ *pulumi.OutputState }

func (PermissionTargetRepoActionsUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetRepoActionsUser)(nil)).Elem()
}

func (o PermissionTargetRepoActionsUserArrayOutput) ToPermissionTargetRepoActionsUserArrayOutput() PermissionTargetRepoActionsUserArrayOutput {
	return o
}

func (o PermissionTargetRepoActionsUserArrayOutput) ToPermissionTargetRepoActionsUserArrayOutputWithContext(ctx context.Context) PermissionTargetRepoActionsUserArrayOutput {
	return o
}

func (o PermissionTargetRepoActionsUserArrayOutput) Index(i pulumi.IntInput) PermissionTargetRepoActionsUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PermissionTargetRepoActionsUser {
		return vs[0].([]PermissionTargetRepoActionsUser)[vs[1].(int)]
	}).(PermissionTargetRepoActionsUserOutput)
}

type PermissionTargetsBuild struct {
	Actions          *PermissionTargetsBuildActions `pulumi:"actions"`
	ExcludesPatterns []string                       `pulumi:"excludesPatterns"`
	IncludesPatterns []string                       `pulumi:"includesPatterns"`
	Repositories     []string                       `pulumi:"repositories"`
}

// PermissionTargetsBuildInput is an input type that accepts PermissionTargetsBuildArgs and PermissionTargetsBuildOutput values.
// You can construct a concrete instance of `PermissionTargetsBuildInput` via:
//
//          PermissionTargetsBuildArgs{...}
type PermissionTargetsBuildInput interface {
	pulumi.Input

	ToPermissionTargetsBuildOutput() PermissionTargetsBuildOutput
	ToPermissionTargetsBuildOutputWithContext(context.Context) PermissionTargetsBuildOutput
}

type PermissionTargetsBuildArgs struct {
	Actions          PermissionTargetsBuildActionsPtrInput `pulumi:"actions"`
	ExcludesPatterns pulumi.StringArrayInput               `pulumi:"excludesPatterns"`
	IncludesPatterns pulumi.StringArrayInput               `pulumi:"includesPatterns"`
	Repositories     pulumi.StringArrayInput               `pulumi:"repositories"`
}

func (PermissionTargetsBuildArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsBuild)(nil)).Elem()
}

func (i PermissionTargetsBuildArgs) ToPermissionTargetsBuildOutput() PermissionTargetsBuildOutput {
	return i.ToPermissionTargetsBuildOutputWithContext(context.Background())
}

func (i PermissionTargetsBuildArgs) ToPermissionTargetsBuildOutputWithContext(ctx context.Context) PermissionTargetsBuildOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsBuildOutput)
}

func (i PermissionTargetsBuildArgs) ToPermissionTargetsBuildPtrOutput() PermissionTargetsBuildPtrOutput {
	return i.ToPermissionTargetsBuildPtrOutputWithContext(context.Background())
}

func (i PermissionTargetsBuildArgs) ToPermissionTargetsBuildPtrOutputWithContext(ctx context.Context) PermissionTargetsBuildPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsBuildOutput).ToPermissionTargetsBuildPtrOutputWithContext(ctx)
}

// PermissionTargetsBuildPtrInput is an input type that accepts PermissionTargetsBuildArgs, PermissionTargetsBuildPtr and PermissionTargetsBuildPtrOutput values.
// You can construct a concrete instance of `PermissionTargetsBuildPtrInput` via:
//
//          PermissionTargetsBuildArgs{...}
//
//  or:
//
//          nil
type PermissionTargetsBuildPtrInput interface {
	pulumi.Input

	ToPermissionTargetsBuildPtrOutput() PermissionTargetsBuildPtrOutput
	ToPermissionTargetsBuildPtrOutputWithContext(context.Context) PermissionTargetsBuildPtrOutput
}

type permissionTargetsBuildPtrType PermissionTargetsBuildArgs

func PermissionTargetsBuildPtr(v *PermissionTargetsBuildArgs) PermissionTargetsBuildPtrInput {
	return (*permissionTargetsBuildPtrType)(v)
}

func (*permissionTargetsBuildPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetsBuild)(nil)).Elem()
}

func (i *permissionTargetsBuildPtrType) ToPermissionTargetsBuildPtrOutput() PermissionTargetsBuildPtrOutput {
	return i.ToPermissionTargetsBuildPtrOutputWithContext(context.Background())
}

func (i *permissionTargetsBuildPtrType) ToPermissionTargetsBuildPtrOutputWithContext(ctx context.Context) PermissionTargetsBuildPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsBuildPtrOutput)
}

type PermissionTargetsBuildOutput struct{ *pulumi.OutputState }

func (PermissionTargetsBuildOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsBuild)(nil)).Elem()
}

func (o PermissionTargetsBuildOutput) ToPermissionTargetsBuildOutput() PermissionTargetsBuildOutput {
	return o
}

func (o PermissionTargetsBuildOutput) ToPermissionTargetsBuildOutputWithContext(ctx context.Context) PermissionTargetsBuildOutput {
	return o
}

func (o PermissionTargetsBuildOutput) ToPermissionTargetsBuildPtrOutput() PermissionTargetsBuildPtrOutput {
	return o.ToPermissionTargetsBuildPtrOutputWithContext(context.Background())
}

func (o PermissionTargetsBuildOutput) ToPermissionTargetsBuildPtrOutputWithContext(ctx context.Context) PermissionTargetsBuildPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PermissionTargetsBuild) *PermissionTargetsBuild {
		return &v
	}).(PermissionTargetsBuildPtrOutput)
}

func (o PermissionTargetsBuildOutput) Actions() PermissionTargetsBuildActionsPtrOutput {
	return o.ApplyT(func(v PermissionTargetsBuild) *PermissionTargetsBuildActions { return v.Actions }).(PermissionTargetsBuildActionsPtrOutput)
}

func (o PermissionTargetsBuildOutput) ExcludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetsBuild) []string { return v.ExcludesPatterns }).(pulumi.StringArrayOutput)
}

func (o PermissionTargetsBuildOutput) IncludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetsBuild) []string { return v.IncludesPatterns }).(pulumi.StringArrayOutput)
}

func (o PermissionTargetsBuildOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetsBuild) []string { return v.Repositories }).(pulumi.StringArrayOutput)
}

type PermissionTargetsBuildPtrOutput struct{ *pulumi.OutputState }

func (PermissionTargetsBuildPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetsBuild)(nil)).Elem()
}

func (o PermissionTargetsBuildPtrOutput) ToPermissionTargetsBuildPtrOutput() PermissionTargetsBuildPtrOutput {
	return o
}

func (o PermissionTargetsBuildPtrOutput) ToPermissionTargetsBuildPtrOutputWithContext(ctx context.Context) PermissionTargetsBuildPtrOutput {
	return o
}

func (o PermissionTargetsBuildPtrOutput) Elem() PermissionTargetsBuildOutput {
	return o.ApplyT(func(v *PermissionTargetsBuild) PermissionTargetsBuild {
		if v != nil {
			return *v
		}
		var ret PermissionTargetsBuild
		return ret
	}).(PermissionTargetsBuildOutput)
}

func (o PermissionTargetsBuildPtrOutput) Actions() PermissionTargetsBuildActionsPtrOutput {
	return o.ApplyT(func(v *PermissionTargetsBuild) *PermissionTargetsBuildActions {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(PermissionTargetsBuildActionsPtrOutput)
}

func (o PermissionTargetsBuildPtrOutput) ExcludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetsBuild) []string {
		if v == nil {
			return nil
		}
		return v.ExcludesPatterns
	}).(pulumi.StringArrayOutput)
}

func (o PermissionTargetsBuildPtrOutput) IncludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetsBuild) []string {
		if v == nil {
			return nil
		}
		return v.IncludesPatterns
	}).(pulumi.StringArrayOutput)
}

func (o PermissionTargetsBuildPtrOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetsBuild) []string {
		if v == nil {
			return nil
		}
		return v.Repositories
	}).(pulumi.StringArrayOutput)
}

type PermissionTargetsBuildActions struct {
	Groups []PermissionTargetsBuildActionsGroup `pulumi:"groups"`
	Users  []PermissionTargetsBuildActionsUser  `pulumi:"users"`
}

// PermissionTargetsBuildActionsInput is an input type that accepts PermissionTargetsBuildActionsArgs and PermissionTargetsBuildActionsOutput values.
// You can construct a concrete instance of `PermissionTargetsBuildActionsInput` via:
//
//          PermissionTargetsBuildActionsArgs{...}
type PermissionTargetsBuildActionsInput interface {
	pulumi.Input

	ToPermissionTargetsBuildActionsOutput() PermissionTargetsBuildActionsOutput
	ToPermissionTargetsBuildActionsOutputWithContext(context.Context) PermissionTargetsBuildActionsOutput
}

type PermissionTargetsBuildActionsArgs struct {
	Groups PermissionTargetsBuildActionsGroupArrayInput `pulumi:"groups"`
	Users  PermissionTargetsBuildActionsUserArrayInput  `pulumi:"users"`
}

func (PermissionTargetsBuildActionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsBuildActions)(nil)).Elem()
}

func (i PermissionTargetsBuildActionsArgs) ToPermissionTargetsBuildActionsOutput() PermissionTargetsBuildActionsOutput {
	return i.ToPermissionTargetsBuildActionsOutputWithContext(context.Background())
}

func (i PermissionTargetsBuildActionsArgs) ToPermissionTargetsBuildActionsOutputWithContext(ctx context.Context) PermissionTargetsBuildActionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsBuildActionsOutput)
}

func (i PermissionTargetsBuildActionsArgs) ToPermissionTargetsBuildActionsPtrOutput() PermissionTargetsBuildActionsPtrOutput {
	return i.ToPermissionTargetsBuildActionsPtrOutputWithContext(context.Background())
}

func (i PermissionTargetsBuildActionsArgs) ToPermissionTargetsBuildActionsPtrOutputWithContext(ctx context.Context) PermissionTargetsBuildActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsBuildActionsOutput).ToPermissionTargetsBuildActionsPtrOutputWithContext(ctx)
}

// PermissionTargetsBuildActionsPtrInput is an input type that accepts PermissionTargetsBuildActionsArgs, PermissionTargetsBuildActionsPtr and PermissionTargetsBuildActionsPtrOutput values.
// You can construct a concrete instance of `PermissionTargetsBuildActionsPtrInput` via:
//
//          PermissionTargetsBuildActionsArgs{...}
//
//  or:
//
//          nil
type PermissionTargetsBuildActionsPtrInput interface {
	pulumi.Input

	ToPermissionTargetsBuildActionsPtrOutput() PermissionTargetsBuildActionsPtrOutput
	ToPermissionTargetsBuildActionsPtrOutputWithContext(context.Context) PermissionTargetsBuildActionsPtrOutput
}

type permissionTargetsBuildActionsPtrType PermissionTargetsBuildActionsArgs

func PermissionTargetsBuildActionsPtr(v *PermissionTargetsBuildActionsArgs) PermissionTargetsBuildActionsPtrInput {
	return (*permissionTargetsBuildActionsPtrType)(v)
}

func (*permissionTargetsBuildActionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetsBuildActions)(nil)).Elem()
}

func (i *permissionTargetsBuildActionsPtrType) ToPermissionTargetsBuildActionsPtrOutput() PermissionTargetsBuildActionsPtrOutput {
	return i.ToPermissionTargetsBuildActionsPtrOutputWithContext(context.Background())
}

func (i *permissionTargetsBuildActionsPtrType) ToPermissionTargetsBuildActionsPtrOutputWithContext(ctx context.Context) PermissionTargetsBuildActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsBuildActionsPtrOutput)
}

type PermissionTargetsBuildActionsOutput struct{ *pulumi.OutputState }

func (PermissionTargetsBuildActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsBuildActions)(nil)).Elem()
}

func (o PermissionTargetsBuildActionsOutput) ToPermissionTargetsBuildActionsOutput() PermissionTargetsBuildActionsOutput {
	return o
}

func (o PermissionTargetsBuildActionsOutput) ToPermissionTargetsBuildActionsOutputWithContext(ctx context.Context) PermissionTargetsBuildActionsOutput {
	return o
}

func (o PermissionTargetsBuildActionsOutput) ToPermissionTargetsBuildActionsPtrOutput() PermissionTargetsBuildActionsPtrOutput {
	return o.ToPermissionTargetsBuildActionsPtrOutputWithContext(context.Background())
}

func (o PermissionTargetsBuildActionsOutput) ToPermissionTargetsBuildActionsPtrOutputWithContext(ctx context.Context) PermissionTargetsBuildActionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PermissionTargetsBuildActions) *PermissionTargetsBuildActions {
		return &v
	}).(PermissionTargetsBuildActionsPtrOutput)
}

func (o PermissionTargetsBuildActionsOutput) Groups() PermissionTargetsBuildActionsGroupArrayOutput {
	return o.ApplyT(func(v PermissionTargetsBuildActions) []PermissionTargetsBuildActionsGroup { return v.Groups }).(PermissionTargetsBuildActionsGroupArrayOutput)
}

func (o PermissionTargetsBuildActionsOutput) Users() PermissionTargetsBuildActionsUserArrayOutput {
	return o.ApplyT(func(v PermissionTargetsBuildActions) []PermissionTargetsBuildActionsUser { return v.Users }).(PermissionTargetsBuildActionsUserArrayOutput)
}

type PermissionTargetsBuildActionsPtrOutput struct{ *pulumi.OutputState }

func (PermissionTargetsBuildActionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetsBuildActions)(nil)).Elem()
}

func (o PermissionTargetsBuildActionsPtrOutput) ToPermissionTargetsBuildActionsPtrOutput() PermissionTargetsBuildActionsPtrOutput {
	return o
}

func (o PermissionTargetsBuildActionsPtrOutput) ToPermissionTargetsBuildActionsPtrOutputWithContext(ctx context.Context) PermissionTargetsBuildActionsPtrOutput {
	return o
}

func (o PermissionTargetsBuildActionsPtrOutput) Elem() PermissionTargetsBuildActionsOutput {
	return o.ApplyT(func(v *PermissionTargetsBuildActions) PermissionTargetsBuildActions {
		if v != nil {
			return *v
		}
		var ret PermissionTargetsBuildActions
		return ret
	}).(PermissionTargetsBuildActionsOutput)
}

func (o PermissionTargetsBuildActionsPtrOutput) Groups() PermissionTargetsBuildActionsGroupArrayOutput {
	return o.ApplyT(func(v *PermissionTargetsBuildActions) []PermissionTargetsBuildActionsGroup {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(PermissionTargetsBuildActionsGroupArrayOutput)
}

func (o PermissionTargetsBuildActionsPtrOutput) Users() PermissionTargetsBuildActionsUserArrayOutput {
	return o.ApplyT(func(v *PermissionTargetsBuildActions) []PermissionTargetsBuildActionsUser {
		if v == nil {
			return nil
		}
		return v.Users
	}).(PermissionTargetsBuildActionsUserArrayOutput)
}

type PermissionTargetsBuildActionsGroup struct {
	Name        string   `pulumi:"name"`
	Permissions []string `pulumi:"permissions"`
}

// PermissionTargetsBuildActionsGroupInput is an input type that accepts PermissionTargetsBuildActionsGroupArgs and PermissionTargetsBuildActionsGroupOutput values.
// You can construct a concrete instance of `PermissionTargetsBuildActionsGroupInput` via:
//
//          PermissionTargetsBuildActionsGroupArgs{...}
type PermissionTargetsBuildActionsGroupInput interface {
	pulumi.Input

	ToPermissionTargetsBuildActionsGroupOutput() PermissionTargetsBuildActionsGroupOutput
	ToPermissionTargetsBuildActionsGroupOutputWithContext(context.Context) PermissionTargetsBuildActionsGroupOutput
}

type PermissionTargetsBuildActionsGroupArgs struct {
	Name        pulumi.StringInput      `pulumi:"name"`
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (PermissionTargetsBuildActionsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsBuildActionsGroup)(nil)).Elem()
}

func (i PermissionTargetsBuildActionsGroupArgs) ToPermissionTargetsBuildActionsGroupOutput() PermissionTargetsBuildActionsGroupOutput {
	return i.ToPermissionTargetsBuildActionsGroupOutputWithContext(context.Background())
}

func (i PermissionTargetsBuildActionsGroupArgs) ToPermissionTargetsBuildActionsGroupOutputWithContext(ctx context.Context) PermissionTargetsBuildActionsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsBuildActionsGroupOutput)
}

// PermissionTargetsBuildActionsGroupArrayInput is an input type that accepts PermissionTargetsBuildActionsGroupArray and PermissionTargetsBuildActionsGroupArrayOutput values.
// You can construct a concrete instance of `PermissionTargetsBuildActionsGroupArrayInput` via:
//
//          PermissionTargetsBuildActionsGroupArray{ PermissionTargetsBuildActionsGroupArgs{...} }
type PermissionTargetsBuildActionsGroupArrayInput interface {
	pulumi.Input

	ToPermissionTargetsBuildActionsGroupArrayOutput() PermissionTargetsBuildActionsGroupArrayOutput
	ToPermissionTargetsBuildActionsGroupArrayOutputWithContext(context.Context) PermissionTargetsBuildActionsGroupArrayOutput
}

type PermissionTargetsBuildActionsGroupArray []PermissionTargetsBuildActionsGroupInput

func (PermissionTargetsBuildActionsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetsBuildActionsGroup)(nil)).Elem()
}

func (i PermissionTargetsBuildActionsGroupArray) ToPermissionTargetsBuildActionsGroupArrayOutput() PermissionTargetsBuildActionsGroupArrayOutput {
	return i.ToPermissionTargetsBuildActionsGroupArrayOutputWithContext(context.Background())
}

func (i PermissionTargetsBuildActionsGroupArray) ToPermissionTargetsBuildActionsGroupArrayOutputWithContext(ctx context.Context) PermissionTargetsBuildActionsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsBuildActionsGroupArrayOutput)
}

type PermissionTargetsBuildActionsGroupOutput struct{ *pulumi.OutputState }

func (PermissionTargetsBuildActionsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsBuildActionsGroup)(nil)).Elem()
}

func (o PermissionTargetsBuildActionsGroupOutput) ToPermissionTargetsBuildActionsGroupOutput() PermissionTargetsBuildActionsGroupOutput {
	return o
}

func (o PermissionTargetsBuildActionsGroupOutput) ToPermissionTargetsBuildActionsGroupOutputWithContext(ctx context.Context) PermissionTargetsBuildActionsGroupOutput {
	return o
}

func (o PermissionTargetsBuildActionsGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PermissionTargetsBuildActionsGroup) string { return v.Name }).(pulumi.StringOutput)
}

func (o PermissionTargetsBuildActionsGroupOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetsBuildActionsGroup) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type PermissionTargetsBuildActionsGroupArrayOutput struct{ *pulumi.OutputState }

func (PermissionTargetsBuildActionsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetsBuildActionsGroup)(nil)).Elem()
}

func (o PermissionTargetsBuildActionsGroupArrayOutput) ToPermissionTargetsBuildActionsGroupArrayOutput() PermissionTargetsBuildActionsGroupArrayOutput {
	return o
}

func (o PermissionTargetsBuildActionsGroupArrayOutput) ToPermissionTargetsBuildActionsGroupArrayOutputWithContext(ctx context.Context) PermissionTargetsBuildActionsGroupArrayOutput {
	return o
}

func (o PermissionTargetsBuildActionsGroupArrayOutput) Index(i pulumi.IntInput) PermissionTargetsBuildActionsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PermissionTargetsBuildActionsGroup {
		return vs[0].([]PermissionTargetsBuildActionsGroup)[vs[1].(int)]
	}).(PermissionTargetsBuildActionsGroupOutput)
}

type PermissionTargetsBuildActionsUser struct {
	Name        string   `pulumi:"name"`
	Permissions []string `pulumi:"permissions"`
}

// PermissionTargetsBuildActionsUserInput is an input type that accepts PermissionTargetsBuildActionsUserArgs and PermissionTargetsBuildActionsUserOutput values.
// You can construct a concrete instance of `PermissionTargetsBuildActionsUserInput` via:
//
//          PermissionTargetsBuildActionsUserArgs{...}
type PermissionTargetsBuildActionsUserInput interface {
	pulumi.Input

	ToPermissionTargetsBuildActionsUserOutput() PermissionTargetsBuildActionsUserOutput
	ToPermissionTargetsBuildActionsUserOutputWithContext(context.Context) PermissionTargetsBuildActionsUserOutput
}

type PermissionTargetsBuildActionsUserArgs struct {
	Name        pulumi.StringInput      `pulumi:"name"`
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (PermissionTargetsBuildActionsUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsBuildActionsUser)(nil)).Elem()
}

func (i PermissionTargetsBuildActionsUserArgs) ToPermissionTargetsBuildActionsUserOutput() PermissionTargetsBuildActionsUserOutput {
	return i.ToPermissionTargetsBuildActionsUserOutputWithContext(context.Background())
}

func (i PermissionTargetsBuildActionsUserArgs) ToPermissionTargetsBuildActionsUserOutputWithContext(ctx context.Context) PermissionTargetsBuildActionsUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsBuildActionsUserOutput)
}

// PermissionTargetsBuildActionsUserArrayInput is an input type that accepts PermissionTargetsBuildActionsUserArray and PermissionTargetsBuildActionsUserArrayOutput values.
// You can construct a concrete instance of `PermissionTargetsBuildActionsUserArrayInput` via:
//
//          PermissionTargetsBuildActionsUserArray{ PermissionTargetsBuildActionsUserArgs{...} }
type PermissionTargetsBuildActionsUserArrayInput interface {
	pulumi.Input

	ToPermissionTargetsBuildActionsUserArrayOutput() PermissionTargetsBuildActionsUserArrayOutput
	ToPermissionTargetsBuildActionsUserArrayOutputWithContext(context.Context) PermissionTargetsBuildActionsUserArrayOutput
}

type PermissionTargetsBuildActionsUserArray []PermissionTargetsBuildActionsUserInput

func (PermissionTargetsBuildActionsUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetsBuildActionsUser)(nil)).Elem()
}

func (i PermissionTargetsBuildActionsUserArray) ToPermissionTargetsBuildActionsUserArrayOutput() PermissionTargetsBuildActionsUserArrayOutput {
	return i.ToPermissionTargetsBuildActionsUserArrayOutputWithContext(context.Background())
}

func (i PermissionTargetsBuildActionsUserArray) ToPermissionTargetsBuildActionsUserArrayOutputWithContext(ctx context.Context) PermissionTargetsBuildActionsUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsBuildActionsUserArrayOutput)
}

type PermissionTargetsBuildActionsUserOutput struct{ *pulumi.OutputState }

func (PermissionTargetsBuildActionsUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsBuildActionsUser)(nil)).Elem()
}

func (o PermissionTargetsBuildActionsUserOutput) ToPermissionTargetsBuildActionsUserOutput() PermissionTargetsBuildActionsUserOutput {
	return o
}

func (o PermissionTargetsBuildActionsUserOutput) ToPermissionTargetsBuildActionsUserOutputWithContext(ctx context.Context) PermissionTargetsBuildActionsUserOutput {
	return o
}

func (o PermissionTargetsBuildActionsUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PermissionTargetsBuildActionsUser) string { return v.Name }).(pulumi.StringOutput)
}

func (o PermissionTargetsBuildActionsUserOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetsBuildActionsUser) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type PermissionTargetsBuildActionsUserArrayOutput struct{ *pulumi.OutputState }

func (PermissionTargetsBuildActionsUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetsBuildActionsUser)(nil)).Elem()
}

func (o PermissionTargetsBuildActionsUserArrayOutput) ToPermissionTargetsBuildActionsUserArrayOutput() PermissionTargetsBuildActionsUserArrayOutput {
	return o
}

func (o PermissionTargetsBuildActionsUserArrayOutput) ToPermissionTargetsBuildActionsUserArrayOutputWithContext(ctx context.Context) PermissionTargetsBuildActionsUserArrayOutput {
	return o
}

func (o PermissionTargetsBuildActionsUserArrayOutput) Index(i pulumi.IntInput) PermissionTargetsBuildActionsUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PermissionTargetsBuildActionsUser {
		return vs[0].([]PermissionTargetsBuildActionsUser)[vs[1].(int)]
	}).(PermissionTargetsBuildActionsUserOutput)
}

type PermissionTargetsReleaseBundle struct {
	Actions          *PermissionTargetsReleaseBundleActions `pulumi:"actions"`
	ExcludesPatterns []string                               `pulumi:"excludesPatterns"`
	IncludesPatterns []string                               `pulumi:"includesPatterns"`
	Repositories     []string                               `pulumi:"repositories"`
}

// PermissionTargetsReleaseBundleInput is an input type that accepts PermissionTargetsReleaseBundleArgs and PermissionTargetsReleaseBundleOutput values.
// You can construct a concrete instance of `PermissionTargetsReleaseBundleInput` via:
//
//          PermissionTargetsReleaseBundleArgs{...}
type PermissionTargetsReleaseBundleInput interface {
	pulumi.Input

	ToPermissionTargetsReleaseBundleOutput() PermissionTargetsReleaseBundleOutput
	ToPermissionTargetsReleaseBundleOutputWithContext(context.Context) PermissionTargetsReleaseBundleOutput
}

type PermissionTargetsReleaseBundleArgs struct {
	Actions          PermissionTargetsReleaseBundleActionsPtrInput `pulumi:"actions"`
	ExcludesPatterns pulumi.StringArrayInput                       `pulumi:"excludesPatterns"`
	IncludesPatterns pulumi.StringArrayInput                       `pulumi:"includesPatterns"`
	Repositories     pulumi.StringArrayInput                       `pulumi:"repositories"`
}

func (PermissionTargetsReleaseBundleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsReleaseBundle)(nil)).Elem()
}

func (i PermissionTargetsReleaseBundleArgs) ToPermissionTargetsReleaseBundleOutput() PermissionTargetsReleaseBundleOutput {
	return i.ToPermissionTargetsReleaseBundleOutputWithContext(context.Background())
}

func (i PermissionTargetsReleaseBundleArgs) ToPermissionTargetsReleaseBundleOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsReleaseBundleOutput)
}

func (i PermissionTargetsReleaseBundleArgs) ToPermissionTargetsReleaseBundlePtrOutput() PermissionTargetsReleaseBundlePtrOutput {
	return i.ToPermissionTargetsReleaseBundlePtrOutputWithContext(context.Background())
}

func (i PermissionTargetsReleaseBundleArgs) ToPermissionTargetsReleaseBundlePtrOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundlePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsReleaseBundleOutput).ToPermissionTargetsReleaseBundlePtrOutputWithContext(ctx)
}

// PermissionTargetsReleaseBundlePtrInput is an input type that accepts PermissionTargetsReleaseBundleArgs, PermissionTargetsReleaseBundlePtr and PermissionTargetsReleaseBundlePtrOutput values.
// You can construct a concrete instance of `PermissionTargetsReleaseBundlePtrInput` via:
//
//          PermissionTargetsReleaseBundleArgs{...}
//
//  or:
//
//          nil
type PermissionTargetsReleaseBundlePtrInput interface {
	pulumi.Input

	ToPermissionTargetsReleaseBundlePtrOutput() PermissionTargetsReleaseBundlePtrOutput
	ToPermissionTargetsReleaseBundlePtrOutputWithContext(context.Context) PermissionTargetsReleaseBundlePtrOutput
}

type permissionTargetsReleaseBundlePtrType PermissionTargetsReleaseBundleArgs

func PermissionTargetsReleaseBundlePtr(v *PermissionTargetsReleaseBundleArgs) PermissionTargetsReleaseBundlePtrInput {
	return (*permissionTargetsReleaseBundlePtrType)(v)
}

func (*permissionTargetsReleaseBundlePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetsReleaseBundle)(nil)).Elem()
}

func (i *permissionTargetsReleaseBundlePtrType) ToPermissionTargetsReleaseBundlePtrOutput() PermissionTargetsReleaseBundlePtrOutput {
	return i.ToPermissionTargetsReleaseBundlePtrOutputWithContext(context.Background())
}

func (i *permissionTargetsReleaseBundlePtrType) ToPermissionTargetsReleaseBundlePtrOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundlePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsReleaseBundlePtrOutput)
}

type PermissionTargetsReleaseBundleOutput struct{ *pulumi.OutputState }

func (PermissionTargetsReleaseBundleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsReleaseBundle)(nil)).Elem()
}

func (o PermissionTargetsReleaseBundleOutput) ToPermissionTargetsReleaseBundleOutput() PermissionTargetsReleaseBundleOutput {
	return o
}

func (o PermissionTargetsReleaseBundleOutput) ToPermissionTargetsReleaseBundleOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundleOutput {
	return o
}

func (o PermissionTargetsReleaseBundleOutput) ToPermissionTargetsReleaseBundlePtrOutput() PermissionTargetsReleaseBundlePtrOutput {
	return o.ToPermissionTargetsReleaseBundlePtrOutputWithContext(context.Background())
}

func (o PermissionTargetsReleaseBundleOutput) ToPermissionTargetsReleaseBundlePtrOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundlePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PermissionTargetsReleaseBundle) *PermissionTargetsReleaseBundle {
		return &v
	}).(PermissionTargetsReleaseBundlePtrOutput)
}

func (o PermissionTargetsReleaseBundleOutput) Actions() PermissionTargetsReleaseBundleActionsPtrOutput {
	return o.ApplyT(func(v PermissionTargetsReleaseBundle) *PermissionTargetsReleaseBundleActions { return v.Actions }).(PermissionTargetsReleaseBundleActionsPtrOutput)
}

func (o PermissionTargetsReleaseBundleOutput) ExcludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetsReleaseBundle) []string { return v.ExcludesPatterns }).(pulumi.StringArrayOutput)
}

func (o PermissionTargetsReleaseBundleOutput) IncludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetsReleaseBundle) []string { return v.IncludesPatterns }).(pulumi.StringArrayOutput)
}

func (o PermissionTargetsReleaseBundleOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetsReleaseBundle) []string { return v.Repositories }).(pulumi.StringArrayOutput)
}

type PermissionTargetsReleaseBundlePtrOutput struct{ *pulumi.OutputState }

func (PermissionTargetsReleaseBundlePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetsReleaseBundle)(nil)).Elem()
}

func (o PermissionTargetsReleaseBundlePtrOutput) ToPermissionTargetsReleaseBundlePtrOutput() PermissionTargetsReleaseBundlePtrOutput {
	return o
}

func (o PermissionTargetsReleaseBundlePtrOutput) ToPermissionTargetsReleaseBundlePtrOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundlePtrOutput {
	return o
}

func (o PermissionTargetsReleaseBundlePtrOutput) Elem() PermissionTargetsReleaseBundleOutput {
	return o.ApplyT(func(v *PermissionTargetsReleaseBundle) PermissionTargetsReleaseBundle {
		if v != nil {
			return *v
		}
		var ret PermissionTargetsReleaseBundle
		return ret
	}).(PermissionTargetsReleaseBundleOutput)
}

func (o PermissionTargetsReleaseBundlePtrOutput) Actions() PermissionTargetsReleaseBundleActionsPtrOutput {
	return o.ApplyT(func(v *PermissionTargetsReleaseBundle) *PermissionTargetsReleaseBundleActions {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(PermissionTargetsReleaseBundleActionsPtrOutput)
}

func (o PermissionTargetsReleaseBundlePtrOutput) ExcludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetsReleaseBundle) []string {
		if v == nil {
			return nil
		}
		return v.ExcludesPatterns
	}).(pulumi.StringArrayOutput)
}

func (o PermissionTargetsReleaseBundlePtrOutput) IncludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetsReleaseBundle) []string {
		if v == nil {
			return nil
		}
		return v.IncludesPatterns
	}).(pulumi.StringArrayOutput)
}

func (o PermissionTargetsReleaseBundlePtrOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetsReleaseBundle) []string {
		if v == nil {
			return nil
		}
		return v.Repositories
	}).(pulumi.StringArrayOutput)
}

type PermissionTargetsReleaseBundleActions struct {
	Groups []PermissionTargetsReleaseBundleActionsGroup `pulumi:"groups"`
	Users  []PermissionTargetsReleaseBundleActionsUser  `pulumi:"users"`
}

// PermissionTargetsReleaseBundleActionsInput is an input type that accepts PermissionTargetsReleaseBundleActionsArgs and PermissionTargetsReleaseBundleActionsOutput values.
// You can construct a concrete instance of `PermissionTargetsReleaseBundleActionsInput` via:
//
//          PermissionTargetsReleaseBundleActionsArgs{...}
type PermissionTargetsReleaseBundleActionsInput interface {
	pulumi.Input

	ToPermissionTargetsReleaseBundleActionsOutput() PermissionTargetsReleaseBundleActionsOutput
	ToPermissionTargetsReleaseBundleActionsOutputWithContext(context.Context) PermissionTargetsReleaseBundleActionsOutput
}

type PermissionTargetsReleaseBundleActionsArgs struct {
	Groups PermissionTargetsReleaseBundleActionsGroupArrayInput `pulumi:"groups"`
	Users  PermissionTargetsReleaseBundleActionsUserArrayInput  `pulumi:"users"`
}

func (PermissionTargetsReleaseBundleActionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsReleaseBundleActions)(nil)).Elem()
}

func (i PermissionTargetsReleaseBundleActionsArgs) ToPermissionTargetsReleaseBundleActionsOutput() PermissionTargetsReleaseBundleActionsOutput {
	return i.ToPermissionTargetsReleaseBundleActionsOutputWithContext(context.Background())
}

func (i PermissionTargetsReleaseBundleActionsArgs) ToPermissionTargetsReleaseBundleActionsOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundleActionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsReleaseBundleActionsOutput)
}

func (i PermissionTargetsReleaseBundleActionsArgs) ToPermissionTargetsReleaseBundleActionsPtrOutput() PermissionTargetsReleaseBundleActionsPtrOutput {
	return i.ToPermissionTargetsReleaseBundleActionsPtrOutputWithContext(context.Background())
}

func (i PermissionTargetsReleaseBundleActionsArgs) ToPermissionTargetsReleaseBundleActionsPtrOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundleActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsReleaseBundleActionsOutput).ToPermissionTargetsReleaseBundleActionsPtrOutputWithContext(ctx)
}

// PermissionTargetsReleaseBundleActionsPtrInput is an input type that accepts PermissionTargetsReleaseBundleActionsArgs, PermissionTargetsReleaseBundleActionsPtr and PermissionTargetsReleaseBundleActionsPtrOutput values.
// You can construct a concrete instance of `PermissionTargetsReleaseBundleActionsPtrInput` via:
//
//          PermissionTargetsReleaseBundleActionsArgs{...}
//
//  or:
//
//          nil
type PermissionTargetsReleaseBundleActionsPtrInput interface {
	pulumi.Input

	ToPermissionTargetsReleaseBundleActionsPtrOutput() PermissionTargetsReleaseBundleActionsPtrOutput
	ToPermissionTargetsReleaseBundleActionsPtrOutputWithContext(context.Context) PermissionTargetsReleaseBundleActionsPtrOutput
}

type permissionTargetsReleaseBundleActionsPtrType PermissionTargetsReleaseBundleActionsArgs

func PermissionTargetsReleaseBundleActionsPtr(v *PermissionTargetsReleaseBundleActionsArgs) PermissionTargetsReleaseBundleActionsPtrInput {
	return (*permissionTargetsReleaseBundleActionsPtrType)(v)
}

func (*permissionTargetsReleaseBundleActionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetsReleaseBundleActions)(nil)).Elem()
}

func (i *permissionTargetsReleaseBundleActionsPtrType) ToPermissionTargetsReleaseBundleActionsPtrOutput() PermissionTargetsReleaseBundleActionsPtrOutput {
	return i.ToPermissionTargetsReleaseBundleActionsPtrOutputWithContext(context.Background())
}

func (i *permissionTargetsReleaseBundleActionsPtrType) ToPermissionTargetsReleaseBundleActionsPtrOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundleActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsReleaseBundleActionsPtrOutput)
}

type PermissionTargetsReleaseBundleActionsOutput struct{ *pulumi.OutputState }

func (PermissionTargetsReleaseBundleActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsReleaseBundleActions)(nil)).Elem()
}

func (o PermissionTargetsReleaseBundleActionsOutput) ToPermissionTargetsReleaseBundleActionsOutput() PermissionTargetsReleaseBundleActionsOutput {
	return o
}

func (o PermissionTargetsReleaseBundleActionsOutput) ToPermissionTargetsReleaseBundleActionsOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundleActionsOutput {
	return o
}

func (o PermissionTargetsReleaseBundleActionsOutput) ToPermissionTargetsReleaseBundleActionsPtrOutput() PermissionTargetsReleaseBundleActionsPtrOutput {
	return o.ToPermissionTargetsReleaseBundleActionsPtrOutputWithContext(context.Background())
}

func (o PermissionTargetsReleaseBundleActionsOutput) ToPermissionTargetsReleaseBundleActionsPtrOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundleActionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PermissionTargetsReleaseBundleActions) *PermissionTargetsReleaseBundleActions {
		return &v
	}).(PermissionTargetsReleaseBundleActionsPtrOutput)
}

func (o PermissionTargetsReleaseBundleActionsOutput) Groups() PermissionTargetsReleaseBundleActionsGroupArrayOutput {
	return o.ApplyT(func(v PermissionTargetsReleaseBundleActions) []PermissionTargetsReleaseBundleActionsGroup {
		return v.Groups
	}).(PermissionTargetsReleaseBundleActionsGroupArrayOutput)
}

func (o PermissionTargetsReleaseBundleActionsOutput) Users() PermissionTargetsReleaseBundleActionsUserArrayOutput {
	return o.ApplyT(func(v PermissionTargetsReleaseBundleActions) []PermissionTargetsReleaseBundleActionsUser {
		return v.Users
	}).(PermissionTargetsReleaseBundleActionsUserArrayOutput)
}

type PermissionTargetsReleaseBundleActionsPtrOutput struct{ *pulumi.OutputState }

func (PermissionTargetsReleaseBundleActionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetsReleaseBundleActions)(nil)).Elem()
}

func (o PermissionTargetsReleaseBundleActionsPtrOutput) ToPermissionTargetsReleaseBundleActionsPtrOutput() PermissionTargetsReleaseBundleActionsPtrOutput {
	return o
}

func (o PermissionTargetsReleaseBundleActionsPtrOutput) ToPermissionTargetsReleaseBundleActionsPtrOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundleActionsPtrOutput {
	return o
}

func (o PermissionTargetsReleaseBundleActionsPtrOutput) Elem() PermissionTargetsReleaseBundleActionsOutput {
	return o.ApplyT(func(v *PermissionTargetsReleaseBundleActions) PermissionTargetsReleaseBundleActions {
		if v != nil {
			return *v
		}
		var ret PermissionTargetsReleaseBundleActions
		return ret
	}).(PermissionTargetsReleaseBundleActionsOutput)
}

func (o PermissionTargetsReleaseBundleActionsPtrOutput) Groups() PermissionTargetsReleaseBundleActionsGroupArrayOutput {
	return o.ApplyT(func(v *PermissionTargetsReleaseBundleActions) []PermissionTargetsReleaseBundleActionsGroup {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(PermissionTargetsReleaseBundleActionsGroupArrayOutput)
}

func (o PermissionTargetsReleaseBundleActionsPtrOutput) Users() PermissionTargetsReleaseBundleActionsUserArrayOutput {
	return o.ApplyT(func(v *PermissionTargetsReleaseBundleActions) []PermissionTargetsReleaseBundleActionsUser {
		if v == nil {
			return nil
		}
		return v.Users
	}).(PermissionTargetsReleaseBundleActionsUserArrayOutput)
}

type PermissionTargetsReleaseBundleActionsGroup struct {
	Name        string   `pulumi:"name"`
	Permissions []string `pulumi:"permissions"`
}

// PermissionTargetsReleaseBundleActionsGroupInput is an input type that accepts PermissionTargetsReleaseBundleActionsGroupArgs and PermissionTargetsReleaseBundleActionsGroupOutput values.
// You can construct a concrete instance of `PermissionTargetsReleaseBundleActionsGroupInput` via:
//
//          PermissionTargetsReleaseBundleActionsGroupArgs{...}
type PermissionTargetsReleaseBundleActionsGroupInput interface {
	pulumi.Input

	ToPermissionTargetsReleaseBundleActionsGroupOutput() PermissionTargetsReleaseBundleActionsGroupOutput
	ToPermissionTargetsReleaseBundleActionsGroupOutputWithContext(context.Context) PermissionTargetsReleaseBundleActionsGroupOutput
}

type PermissionTargetsReleaseBundleActionsGroupArgs struct {
	Name        pulumi.StringInput      `pulumi:"name"`
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (PermissionTargetsReleaseBundleActionsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsReleaseBundleActionsGroup)(nil)).Elem()
}

func (i PermissionTargetsReleaseBundleActionsGroupArgs) ToPermissionTargetsReleaseBundleActionsGroupOutput() PermissionTargetsReleaseBundleActionsGroupOutput {
	return i.ToPermissionTargetsReleaseBundleActionsGroupOutputWithContext(context.Background())
}

func (i PermissionTargetsReleaseBundleActionsGroupArgs) ToPermissionTargetsReleaseBundleActionsGroupOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundleActionsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsReleaseBundleActionsGroupOutput)
}

// PermissionTargetsReleaseBundleActionsGroupArrayInput is an input type that accepts PermissionTargetsReleaseBundleActionsGroupArray and PermissionTargetsReleaseBundleActionsGroupArrayOutput values.
// You can construct a concrete instance of `PermissionTargetsReleaseBundleActionsGroupArrayInput` via:
//
//          PermissionTargetsReleaseBundleActionsGroupArray{ PermissionTargetsReleaseBundleActionsGroupArgs{...} }
type PermissionTargetsReleaseBundleActionsGroupArrayInput interface {
	pulumi.Input

	ToPermissionTargetsReleaseBundleActionsGroupArrayOutput() PermissionTargetsReleaseBundleActionsGroupArrayOutput
	ToPermissionTargetsReleaseBundleActionsGroupArrayOutputWithContext(context.Context) PermissionTargetsReleaseBundleActionsGroupArrayOutput
}

type PermissionTargetsReleaseBundleActionsGroupArray []PermissionTargetsReleaseBundleActionsGroupInput

func (PermissionTargetsReleaseBundleActionsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetsReleaseBundleActionsGroup)(nil)).Elem()
}

func (i PermissionTargetsReleaseBundleActionsGroupArray) ToPermissionTargetsReleaseBundleActionsGroupArrayOutput() PermissionTargetsReleaseBundleActionsGroupArrayOutput {
	return i.ToPermissionTargetsReleaseBundleActionsGroupArrayOutputWithContext(context.Background())
}

func (i PermissionTargetsReleaseBundleActionsGroupArray) ToPermissionTargetsReleaseBundleActionsGroupArrayOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundleActionsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsReleaseBundleActionsGroupArrayOutput)
}

type PermissionTargetsReleaseBundleActionsGroupOutput struct{ *pulumi.OutputState }

func (PermissionTargetsReleaseBundleActionsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsReleaseBundleActionsGroup)(nil)).Elem()
}

func (o PermissionTargetsReleaseBundleActionsGroupOutput) ToPermissionTargetsReleaseBundleActionsGroupOutput() PermissionTargetsReleaseBundleActionsGroupOutput {
	return o
}

func (o PermissionTargetsReleaseBundleActionsGroupOutput) ToPermissionTargetsReleaseBundleActionsGroupOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundleActionsGroupOutput {
	return o
}

func (o PermissionTargetsReleaseBundleActionsGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PermissionTargetsReleaseBundleActionsGroup) string { return v.Name }).(pulumi.StringOutput)
}

func (o PermissionTargetsReleaseBundleActionsGroupOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetsReleaseBundleActionsGroup) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type PermissionTargetsReleaseBundleActionsGroupArrayOutput struct{ *pulumi.OutputState }

func (PermissionTargetsReleaseBundleActionsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetsReleaseBundleActionsGroup)(nil)).Elem()
}

func (o PermissionTargetsReleaseBundleActionsGroupArrayOutput) ToPermissionTargetsReleaseBundleActionsGroupArrayOutput() PermissionTargetsReleaseBundleActionsGroupArrayOutput {
	return o
}

func (o PermissionTargetsReleaseBundleActionsGroupArrayOutput) ToPermissionTargetsReleaseBundleActionsGroupArrayOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundleActionsGroupArrayOutput {
	return o
}

func (o PermissionTargetsReleaseBundleActionsGroupArrayOutput) Index(i pulumi.IntInput) PermissionTargetsReleaseBundleActionsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PermissionTargetsReleaseBundleActionsGroup {
		return vs[0].([]PermissionTargetsReleaseBundleActionsGroup)[vs[1].(int)]
	}).(PermissionTargetsReleaseBundleActionsGroupOutput)
}

type PermissionTargetsReleaseBundleActionsUser struct {
	Name        string   `pulumi:"name"`
	Permissions []string `pulumi:"permissions"`
}

// PermissionTargetsReleaseBundleActionsUserInput is an input type that accepts PermissionTargetsReleaseBundleActionsUserArgs and PermissionTargetsReleaseBundleActionsUserOutput values.
// You can construct a concrete instance of `PermissionTargetsReleaseBundleActionsUserInput` via:
//
//          PermissionTargetsReleaseBundleActionsUserArgs{...}
type PermissionTargetsReleaseBundleActionsUserInput interface {
	pulumi.Input

	ToPermissionTargetsReleaseBundleActionsUserOutput() PermissionTargetsReleaseBundleActionsUserOutput
	ToPermissionTargetsReleaseBundleActionsUserOutputWithContext(context.Context) PermissionTargetsReleaseBundleActionsUserOutput
}

type PermissionTargetsReleaseBundleActionsUserArgs struct {
	Name        pulumi.StringInput      `pulumi:"name"`
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (PermissionTargetsReleaseBundleActionsUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsReleaseBundleActionsUser)(nil)).Elem()
}

func (i PermissionTargetsReleaseBundleActionsUserArgs) ToPermissionTargetsReleaseBundleActionsUserOutput() PermissionTargetsReleaseBundleActionsUserOutput {
	return i.ToPermissionTargetsReleaseBundleActionsUserOutputWithContext(context.Background())
}

func (i PermissionTargetsReleaseBundleActionsUserArgs) ToPermissionTargetsReleaseBundleActionsUserOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundleActionsUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsReleaseBundleActionsUserOutput)
}

// PermissionTargetsReleaseBundleActionsUserArrayInput is an input type that accepts PermissionTargetsReleaseBundleActionsUserArray and PermissionTargetsReleaseBundleActionsUserArrayOutput values.
// You can construct a concrete instance of `PermissionTargetsReleaseBundleActionsUserArrayInput` via:
//
//          PermissionTargetsReleaseBundleActionsUserArray{ PermissionTargetsReleaseBundleActionsUserArgs{...} }
type PermissionTargetsReleaseBundleActionsUserArrayInput interface {
	pulumi.Input

	ToPermissionTargetsReleaseBundleActionsUserArrayOutput() PermissionTargetsReleaseBundleActionsUserArrayOutput
	ToPermissionTargetsReleaseBundleActionsUserArrayOutputWithContext(context.Context) PermissionTargetsReleaseBundleActionsUserArrayOutput
}

type PermissionTargetsReleaseBundleActionsUserArray []PermissionTargetsReleaseBundleActionsUserInput

func (PermissionTargetsReleaseBundleActionsUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetsReleaseBundleActionsUser)(nil)).Elem()
}

func (i PermissionTargetsReleaseBundleActionsUserArray) ToPermissionTargetsReleaseBundleActionsUserArrayOutput() PermissionTargetsReleaseBundleActionsUserArrayOutput {
	return i.ToPermissionTargetsReleaseBundleActionsUserArrayOutputWithContext(context.Background())
}

func (i PermissionTargetsReleaseBundleActionsUserArray) ToPermissionTargetsReleaseBundleActionsUserArrayOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundleActionsUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsReleaseBundleActionsUserArrayOutput)
}

type PermissionTargetsReleaseBundleActionsUserOutput struct{ *pulumi.OutputState }

func (PermissionTargetsReleaseBundleActionsUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsReleaseBundleActionsUser)(nil)).Elem()
}

func (o PermissionTargetsReleaseBundleActionsUserOutput) ToPermissionTargetsReleaseBundleActionsUserOutput() PermissionTargetsReleaseBundleActionsUserOutput {
	return o
}

func (o PermissionTargetsReleaseBundleActionsUserOutput) ToPermissionTargetsReleaseBundleActionsUserOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundleActionsUserOutput {
	return o
}

func (o PermissionTargetsReleaseBundleActionsUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PermissionTargetsReleaseBundleActionsUser) string { return v.Name }).(pulumi.StringOutput)
}

func (o PermissionTargetsReleaseBundleActionsUserOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetsReleaseBundleActionsUser) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type PermissionTargetsReleaseBundleActionsUserArrayOutput struct{ *pulumi.OutputState }

func (PermissionTargetsReleaseBundleActionsUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetsReleaseBundleActionsUser)(nil)).Elem()
}

func (o PermissionTargetsReleaseBundleActionsUserArrayOutput) ToPermissionTargetsReleaseBundleActionsUserArrayOutput() PermissionTargetsReleaseBundleActionsUserArrayOutput {
	return o
}

func (o PermissionTargetsReleaseBundleActionsUserArrayOutput) ToPermissionTargetsReleaseBundleActionsUserArrayOutputWithContext(ctx context.Context) PermissionTargetsReleaseBundleActionsUserArrayOutput {
	return o
}

func (o PermissionTargetsReleaseBundleActionsUserArrayOutput) Index(i pulumi.IntInput) PermissionTargetsReleaseBundleActionsUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PermissionTargetsReleaseBundleActionsUser {
		return vs[0].([]PermissionTargetsReleaseBundleActionsUser)[vs[1].(int)]
	}).(PermissionTargetsReleaseBundleActionsUserOutput)
}

type PermissionTargetsRepo struct {
	Actions          *PermissionTargetsRepoActions `pulumi:"actions"`
	ExcludesPatterns []string                      `pulumi:"excludesPatterns"`
	IncludesPatterns []string                      `pulumi:"includesPatterns"`
	Repositories     []string                      `pulumi:"repositories"`
}

// PermissionTargetsRepoInput is an input type that accepts PermissionTargetsRepoArgs and PermissionTargetsRepoOutput values.
// You can construct a concrete instance of `PermissionTargetsRepoInput` via:
//
//          PermissionTargetsRepoArgs{...}
type PermissionTargetsRepoInput interface {
	pulumi.Input

	ToPermissionTargetsRepoOutput() PermissionTargetsRepoOutput
	ToPermissionTargetsRepoOutputWithContext(context.Context) PermissionTargetsRepoOutput
}

type PermissionTargetsRepoArgs struct {
	Actions          PermissionTargetsRepoActionsPtrInput `pulumi:"actions"`
	ExcludesPatterns pulumi.StringArrayInput              `pulumi:"excludesPatterns"`
	IncludesPatterns pulumi.StringArrayInput              `pulumi:"includesPatterns"`
	Repositories     pulumi.StringArrayInput              `pulumi:"repositories"`
}

func (PermissionTargetsRepoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsRepo)(nil)).Elem()
}

func (i PermissionTargetsRepoArgs) ToPermissionTargetsRepoOutput() PermissionTargetsRepoOutput {
	return i.ToPermissionTargetsRepoOutputWithContext(context.Background())
}

func (i PermissionTargetsRepoArgs) ToPermissionTargetsRepoOutputWithContext(ctx context.Context) PermissionTargetsRepoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsRepoOutput)
}

func (i PermissionTargetsRepoArgs) ToPermissionTargetsRepoPtrOutput() PermissionTargetsRepoPtrOutput {
	return i.ToPermissionTargetsRepoPtrOutputWithContext(context.Background())
}

func (i PermissionTargetsRepoArgs) ToPermissionTargetsRepoPtrOutputWithContext(ctx context.Context) PermissionTargetsRepoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsRepoOutput).ToPermissionTargetsRepoPtrOutputWithContext(ctx)
}

// PermissionTargetsRepoPtrInput is an input type that accepts PermissionTargetsRepoArgs, PermissionTargetsRepoPtr and PermissionTargetsRepoPtrOutput values.
// You can construct a concrete instance of `PermissionTargetsRepoPtrInput` via:
//
//          PermissionTargetsRepoArgs{...}
//
//  or:
//
//          nil
type PermissionTargetsRepoPtrInput interface {
	pulumi.Input

	ToPermissionTargetsRepoPtrOutput() PermissionTargetsRepoPtrOutput
	ToPermissionTargetsRepoPtrOutputWithContext(context.Context) PermissionTargetsRepoPtrOutput
}

type permissionTargetsRepoPtrType PermissionTargetsRepoArgs

func PermissionTargetsRepoPtr(v *PermissionTargetsRepoArgs) PermissionTargetsRepoPtrInput {
	return (*permissionTargetsRepoPtrType)(v)
}

func (*permissionTargetsRepoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetsRepo)(nil)).Elem()
}

func (i *permissionTargetsRepoPtrType) ToPermissionTargetsRepoPtrOutput() PermissionTargetsRepoPtrOutput {
	return i.ToPermissionTargetsRepoPtrOutputWithContext(context.Background())
}

func (i *permissionTargetsRepoPtrType) ToPermissionTargetsRepoPtrOutputWithContext(ctx context.Context) PermissionTargetsRepoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsRepoPtrOutput)
}

type PermissionTargetsRepoOutput struct{ *pulumi.OutputState }

func (PermissionTargetsRepoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsRepo)(nil)).Elem()
}

func (o PermissionTargetsRepoOutput) ToPermissionTargetsRepoOutput() PermissionTargetsRepoOutput {
	return o
}

func (o PermissionTargetsRepoOutput) ToPermissionTargetsRepoOutputWithContext(ctx context.Context) PermissionTargetsRepoOutput {
	return o
}

func (o PermissionTargetsRepoOutput) ToPermissionTargetsRepoPtrOutput() PermissionTargetsRepoPtrOutput {
	return o.ToPermissionTargetsRepoPtrOutputWithContext(context.Background())
}

func (o PermissionTargetsRepoOutput) ToPermissionTargetsRepoPtrOutputWithContext(ctx context.Context) PermissionTargetsRepoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PermissionTargetsRepo) *PermissionTargetsRepo {
		return &v
	}).(PermissionTargetsRepoPtrOutput)
}

func (o PermissionTargetsRepoOutput) Actions() PermissionTargetsRepoActionsPtrOutput {
	return o.ApplyT(func(v PermissionTargetsRepo) *PermissionTargetsRepoActions { return v.Actions }).(PermissionTargetsRepoActionsPtrOutput)
}

func (o PermissionTargetsRepoOutput) ExcludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetsRepo) []string { return v.ExcludesPatterns }).(pulumi.StringArrayOutput)
}

func (o PermissionTargetsRepoOutput) IncludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetsRepo) []string { return v.IncludesPatterns }).(pulumi.StringArrayOutput)
}

func (o PermissionTargetsRepoOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetsRepo) []string { return v.Repositories }).(pulumi.StringArrayOutput)
}

type PermissionTargetsRepoPtrOutput struct{ *pulumi.OutputState }

func (PermissionTargetsRepoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetsRepo)(nil)).Elem()
}

func (o PermissionTargetsRepoPtrOutput) ToPermissionTargetsRepoPtrOutput() PermissionTargetsRepoPtrOutput {
	return o
}

func (o PermissionTargetsRepoPtrOutput) ToPermissionTargetsRepoPtrOutputWithContext(ctx context.Context) PermissionTargetsRepoPtrOutput {
	return o
}

func (o PermissionTargetsRepoPtrOutput) Elem() PermissionTargetsRepoOutput {
	return o.ApplyT(func(v *PermissionTargetsRepo) PermissionTargetsRepo {
		if v != nil {
			return *v
		}
		var ret PermissionTargetsRepo
		return ret
	}).(PermissionTargetsRepoOutput)
}

func (o PermissionTargetsRepoPtrOutput) Actions() PermissionTargetsRepoActionsPtrOutput {
	return o.ApplyT(func(v *PermissionTargetsRepo) *PermissionTargetsRepoActions {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(PermissionTargetsRepoActionsPtrOutput)
}

func (o PermissionTargetsRepoPtrOutput) ExcludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetsRepo) []string {
		if v == nil {
			return nil
		}
		return v.ExcludesPatterns
	}).(pulumi.StringArrayOutput)
}

func (o PermissionTargetsRepoPtrOutput) IncludesPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetsRepo) []string {
		if v == nil {
			return nil
		}
		return v.IncludesPatterns
	}).(pulumi.StringArrayOutput)
}

func (o PermissionTargetsRepoPtrOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionTargetsRepo) []string {
		if v == nil {
			return nil
		}
		return v.Repositories
	}).(pulumi.StringArrayOutput)
}

type PermissionTargetsRepoActions struct {
	Groups []PermissionTargetsRepoActionsGroup `pulumi:"groups"`
	Users  []PermissionTargetsRepoActionsUser  `pulumi:"users"`
}

// PermissionTargetsRepoActionsInput is an input type that accepts PermissionTargetsRepoActionsArgs and PermissionTargetsRepoActionsOutput values.
// You can construct a concrete instance of `PermissionTargetsRepoActionsInput` via:
//
//          PermissionTargetsRepoActionsArgs{...}
type PermissionTargetsRepoActionsInput interface {
	pulumi.Input

	ToPermissionTargetsRepoActionsOutput() PermissionTargetsRepoActionsOutput
	ToPermissionTargetsRepoActionsOutputWithContext(context.Context) PermissionTargetsRepoActionsOutput
}

type PermissionTargetsRepoActionsArgs struct {
	Groups PermissionTargetsRepoActionsGroupArrayInput `pulumi:"groups"`
	Users  PermissionTargetsRepoActionsUserArrayInput  `pulumi:"users"`
}

func (PermissionTargetsRepoActionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsRepoActions)(nil)).Elem()
}

func (i PermissionTargetsRepoActionsArgs) ToPermissionTargetsRepoActionsOutput() PermissionTargetsRepoActionsOutput {
	return i.ToPermissionTargetsRepoActionsOutputWithContext(context.Background())
}

func (i PermissionTargetsRepoActionsArgs) ToPermissionTargetsRepoActionsOutputWithContext(ctx context.Context) PermissionTargetsRepoActionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsRepoActionsOutput)
}

func (i PermissionTargetsRepoActionsArgs) ToPermissionTargetsRepoActionsPtrOutput() PermissionTargetsRepoActionsPtrOutput {
	return i.ToPermissionTargetsRepoActionsPtrOutputWithContext(context.Background())
}

func (i PermissionTargetsRepoActionsArgs) ToPermissionTargetsRepoActionsPtrOutputWithContext(ctx context.Context) PermissionTargetsRepoActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsRepoActionsOutput).ToPermissionTargetsRepoActionsPtrOutputWithContext(ctx)
}

// PermissionTargetsRepoActionsPtrInput is an input type that accepts PermissionTargetsRepoActionsArgs, PermissionTargetsRepoActionsPtr and PermissionTargetsRepoActionsPtrOutput values.
// You can construct a concrete instance of `PermissionTargetsRepoActionsPtrInput` via:
//
//          PermissionTargetsRepoActionsArgs{...}
//
//  or:
//
//          nil
type PermissionTargetsRepoActionsPtrInput interface {
	pulumi.Input

	ToPermissionTargetsRepoActionsPtrOutput() PermissionTargetsRepoActionsPtrOutput
	ToPermissionTargetsRepoActionsPtrOutputWithContext(context.Context) PermissionTargetsRepoActionsPtrOutput
}

type permissionTargetsRepoActionsPtrType PermissionTargetsRepoActionsArgs

func PermissionTargetsRepoActionsPtr(v *PermissionTargetsRepoActionsArgs) PermissionTargetsRepoActionsPtrInput {
	return (*permissionTargetsRepoActionsPtrType)(v)
}

func (*permissionTargetsRepoActionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetsRepoActions)(nil)).Elem()
}

func (i *permissionTargetsRepoActionsPtrType) ToPermissionTargetsRepoActionsPtrOutput() PermissionTargetsRepoActionsPtrOutput {
	return i.ToPermissionTargetsRepoActionsPtrOutputWithContext(context.Background())
}

func (i *permissionTargetsRepoActionsPtrType) ToPermissionTargetsRepoActionsPtrOutputWithContext(ctx context.Context) PermissionTargetsRepoActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsRepoActionsPtrOutput)
}

type PermissionTargetsRepoActionsOutput struct{ *pulumi.OutputState }

func (PermissionTargetsRepoActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsRepoActions)(nil)).Elem()
}

func (o PermissionTargetsRepoActionsOutput) ToPermissionTargetsRepoActionsOutput() PermissionTargetsRepoActionsOutput {
	return o
}

func (o PermissionTargetsRepoActionsOutput) ToPermissionTargetsRepoActionsOutputWithContext(ctx context.Context) PermissionTargetsRepoActionsOutput {
	return o
}

func (o PermissionTargetsRepoActionsOutput) ToPermissionTargetsRepoActionsPtrOutput() PermissionTargetsRepoActionsPtrOutput {
	return o.ToPermissionTargetsRepoActionsPtrOutputWithContext(context.Background())
}

func (o PermissionTargetsRepoActionsOutput) ToPermissionTargetsRepoActionsPtrOutputWithContext(ctx context.Context) PermissionTargetsRepoActionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PermissionTargetsRepoActions) *PermissionTargetsRepoActions {
		return &v
	}).(PermissionTargetsRepoActionsPtrOutput)
}

func (o PermissionTargetsRepoActionsOutput) Groups() PermissionTargetsRepoActionsGroupArrayOutput {
	return o.ApplyT(func(v PermissionTargetsRepoActions) []PermissionTargetsRepoActionsGroup { return v.Groups }).(PermissionTargetsRepoActionsGroupArrayOutput)
}

func (o PermissionTargetsRepoActionsOutput) Users() PermissionTargetsRepoActionsUserArrayOutput {
	return o.ApplyT(func(v PermissionTargetsRepoActions) []PermissionTargetsRepoActionsUser { return v.Users }).(PermissionTargetsRepoActionsUserArrayOutput)
}

type PermissionTargetsRepoActionsPtrOutput struct{ *pulumi.OutputState }

func (PermissionTargetsRepoActionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionTargetsRepoActions)(nil)).Elem()
}

func (o PermissionTargetsRepoActionsPtrOutput) ToPermissionTargetsRepoActionsPtrOutput() PermissionTargetsRepoActionsPtrOutput {
	return o
}

func (o PermissionTargetsRepoActionsPtrOutput) ToPermissionTargetsRepoActionsPtrOutputWithContext(ctx context.Context) PermissionTargetsRepoActionsPtrOutput {
	return o
}

func (o PermissionTargetsRepoActionsPtrOutput) Elem() PermissionTargetsRepoActionsOutput {
	return o.ApplyT(func(v *PermissionTargetsRepoActions) PermissionTargetsRepoActions {
		if v != nil {
			return *v
		}
		var ret PermissionTargetsRepoActions
		return ret
	}).(PermissionTargetsRepoActionsOutput)
}

func (o PermissionTargetsRepoActionsPtrOutput) Groups() PermissionTargetsRepoActionsGroupArrayOutput {
	return o.ApplyT(func(v *PermissionTargetsRepoActions) []PermissionTargetsRepoActionsGroup {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(PermissionTargetsRepoActionsGroupArrayOutput)
}

func (o PermissionTargetsRepoActionsPtrOutput) Users() PermissionTargetsRepoActionsUserArrayOutput {
	return o.ApplyT(func(v *PermissionTargetsRepoActions) []PermissionTargetsRepoActionsUser {
		if v == nil {
			return nil
		}
		return v.Users
	}).(PermissionTargetsRepoActionsUserArrayOutput)
}

type PermissionTargetsRepoActionsGroup struct {
	Name        string   `pulumi:"name"`
	Permissions []string `pulumi:"permissions"`
}

// PermissionTargetsRepoActionsGroupInput is an input type that accepts PermissionTargetsRepoActionsGroupArgs and PermissionTargetsRepoActionsGroupOutput values.
// You can construct a concrete instance of `PermissionTargetsRepoActionsGroupInput` via:
//
//          PermissionTargetsRepoActionsGroupArgs{...}
type PermissionTargetsRepoActionsGroupInput interface {
	pulumi.Input

	ToPermissionTargetsRepoActionsGroupOutput() PermissionTargetsRepoActionsGroupOutput
	ToPermissionTargetsRepoActionsGroupOutputWithContext(context.Context) PermissionTargetsRepoActionsGroupOutput
}

type PermissionTargetsRepoActionsGroupArgs struct {
	Name        pulumi.StringInput      `pulumi:"name"`
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (PermissionTargetsRepoActionsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsRepoActionsGroup)(nil)).Elem()
}

func (i PermissionTargetsRepoActionsGroupArgs) ToPermissionTargetsRepoActionsGroupOutput() PermissionTargetsRepoActionsGroupOutput {
	return i.ToPermissionTargetsRepoActionsGroupOutputWithContext(context.Background())
}

func (i PermissionTargetsRepoActionsGroupArgs) ToPermissionTargetsRepoActionsGroupOutputWithContext(ctx context.Context) PermissionTargetsRepoActionsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsRepoActionsGroupOutput)
}

// PermissionTargetsRepoActionsGroupArrayInput is an input type that accepts PermissionTargetsRepoActionsGroupArray and PermissionTargetsRepoActionsGroupArrayOutput values.
// You can construct a concrete instance of `PermissionTargetsRepoActionsGroupArrayInput` via:
//
//          PermissionTargetsRepoActionsGroupArray{ PermissionTargetsRepoActionsGroupArgs{...} }
type PermissionTargetsRepoActionsGroupArrayInput interface {
	pulumi.Input

	ToPermissionTargetsRepoActionsGroupArrayOutput() PermissionTargetsRepoActionsGroupArrayOutput
	ToPermissionTargetsRepoActionsGroupArrayOutputWithContext(context.Context) PermissionTargetsRepoActionsGroupArrayOutput
}

type PermissionTargetsRepoActionsGroupArray []PermissionTargetsRepoActionsGroupInput

func (PermissionTargetsRepoActionsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetsRepoActionsGroup)(nil)).Elem()
}

func (i PermissionTargetsRepoActionsGroupArray) ToPermissionTargetsRepoActionsGroupArrayOutput() PermissionTargetsRepoActionsGroupArrayOutput {
	return i.ToPermissionTargetsRepoActionsGroupArrayOutputWithContext(context.Background())
}

func (i PermissionTargetsRepoActionsGroupArray) ToPermissionTargetsRepoActionsGroupArrayOutputWithContext(ctx context.Context) PermissionTargetsRepoActionsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsRepoActionsGroupArrayOutput)
}

type PermissionTargetsRepoActionsGroupOutput struct{ *pulumi.OutputState }

func (PermissionTargetsRepoActionsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsRepoActionsGroup)(nil)).Elem()
}

func (o PermissionTargetsRepoActionsGroupOutput) ToPermissionTargetsRepoActionsGroupOutput() PermissionTargetsRepoActionsGroupOutput {
	return o
}

func (o PermissionTargetsRepoActionsGroupOutput) ToPermissionTargetsRepoActionsGroupOutputWithContext(ctx context.Context) PermissionTargetsRepoActionsGroupOutput {
	return o
}

func (o PermissionTargetsRepoActionsGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PermissionTargetsRepoActionsGroup) string { return v.Name }).(pulumi.StringOutput)
}

func (o PermissionTargetsRepoActionsGroupOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetsRepoActionsGroup) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type PermissionTargetsRepoActionsGroupArrayOutput struct{ *pulumi.OutputState }

func (PermissionTargetsRepoActionsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetsRepoActionsGroup)(nil)).Elem()
}

func (o PermissionTargetsRepoActionsGroupArrayOutput) ToPermissionTargetsRepoActionsGroupArrayOutput() PermissionTargetsRepoActionsGroupArrayOutput {
	return o
}

func (o PermissionTargetsRepoActionsGroupArrayOutput) ToPermissionTargetsRepoActionsGroupArrayOutputWithContext(ctx context.Context) PermissionTargetsRepoActionsGroupArrayOutput {
	return o
}

func (o PermissionTargetsRepoActionsGroupArrayOutput) Index(i pulumi.IntInput) PermissionTargetsRepoActionsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PermissionTargetsRepoActionsGroup {
		return vs[0].([]PermissionTargetsRepoActionsGroup)[vs[1].(int)]
	}).(PermissionTargetsRepoActionsGroupOutput)
}

type PermissionTargetsRepoActionsUser struct {
	Name        string   `pulumi:"name"`
	Permissions []string `pulumi:"permissions"`
}

// PermissionTargetsRepoActionsUserInput is an input type that accepts PermissionTargetsRepoActionsUserArgs and PermissionTargetsRepoActionsUserOutput values.
// You can construct a concrete instance of `PermissionTargetsRepoActionsUserInput` via:
//
//          PermissionTargetsRepoActionsUserArgs{...}
type PermissionTargetsRepoActionsUserInput interface {
	pulumi.Input

	ToPermissionTargetsRepoActionsUserOutput() PermissionTargetsRepoActionsUserOutput
	ToPermissionTargetsRepoActionsUserOutputWithContext(context.Context) PermissionTargetsRepoActionsUserOutput
}

type PermissionTargetsRepoActionsUserArgs struct {
	Name        pulumi.StringInput      `pulumi:"name"`
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (PermissionTargetsRepoActionsUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsRepoActionsUser)(nil)).Elem()
}

func (i PermissionTargetsRepoActionsUserArgs) ToPermissionTargetsRepoActionsUserOutput() PermissionTargetsRepoActionsUserOutput {
	return i.ToPermissionTargetsRepoActionsUserOutputWithContext(context.Background())
}

func (i PermissionTargetsRepoActionsUserArgs) ToPermissionTargetsRepoActionsUserOutputWithContext(ctx context.Context) PermissionTargetsRepoActionsUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsRepoActionsUserOutput)
}

// PermissionTargetsRepoActionsUserArrayInput is an input type that accepts PermissionTargetsRepoActionsUserArray and PermissionTargetsRepoActionsUserArrayOutput values.
// You can construct a concrete instance of `PermissionTargetsRepoActionsUserArrayInput` via:
//
//          PermissionTargetsRepoActionsUserArray{ PermissionTargetsRepoActionsUserArgs{...} }
type PermissionTargetsRepoActionsUserArrayInput interface {
	pulumi.Input

	ToPermissionTargetsRepoActionsUserArrayOutput() PermissionTargetsRepoActionsUserArrayOutput
	ToPermissionTargetsRepoActionsUserArrayOutputWithContext(context.Context) PermissionTargetsRepoActionsUserArrayOutput
}

type PermissionTargetsRepoActionsUserArray []PermissionTargetsRepoActionsUserInput

func (PermissionTargetsRepoActionsUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetsRepoActionsUser)(nil)).Elem()
}

func (i PermissionTargetsRepoActionsUserArray) ToPermissionTargetsRepoActionsUserArrayOutput() PermissionTargetsRepoActionsUserArrayOutput {
	return i.ToPermissionTargetsRepoActionsUserArrayOutputWithContext(context.Background())
}

func (i PermissionTargetsRepoActionsUserArray) ToPermissionTargetsRepoActionsUserArrayOutputWithContext(ctx context.Context) PermissionTargetsRepoActionsUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionTargetsRepoActionsUserArrayOutput)
}

type PermissionTargetsRepoActionsUserOutput struct{ *pulumi.OutputState }

func (PermissionTargetsRepoActionsUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionTargetsRepoActionsUser)(nil)).Elem()
}

func (o PermissionTargetsRepoActionsUserOutput) ToPermissionTargetsRepoActionsUserOutput() PermissionTargetsRepoActionsUserOutput {
	return o
}

func (o PermissionTargetsRepoActionsUserOutput) ToPermissionTargetsRepoActionsUserOutputWithContext(ctx context.Context) PermissionTargetsRepoActionsUserOutput {
	return o
}

func (o PermissionTargetsRepoActionsUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PermissionTargetsRepoActionsUser) string { return v.Name }).(pulumi.StringOutput)
}

func (o PermissionTargetsRepoActionsUserOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionTargetsRepoActionsUser) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type PermissionTargetsRepoActionsUserArrayOutput struct{ *pulumi.OutputState }

func (PermissionTargetsRepoActionsUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionTargetsRepoActionsUser)(nil)).Elem()
}

func (o PermissionTargetsRepoActionsUserArrayOutput) ToPermissionTargetsRepoActionsUserArrayOutput() PermissionTargetsRepoActionsUserArrayOutput {
	return o
}

func (o PermissionTargetsRepoActionsUserArrayOutput) ToPermissionTargetsRepoActionsUserArrayOutputWithContext(ctx context.Context) PermissionTargetsRepoActionsUserArrayOutput {
	return o
}

func (o PermissionTargetsRepoActionsUserArrayOutput) Index(i pulumi.IntInput) PermissionTargetsRepoActionsUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PermissionTargetsRepoActionsUser {
		return vs[0].([]PermissionTargetsRepoActionsUser)[vs[1].(int)]
	}).(PermissionTargetsRepoActionsUserOutput)
}

type PushReplicationReplication struct {
	Enabled *bool `pulumi:"enabled"`
	// Requires password encryption to be turned off `POST /api/system/decrypt`
	Password            *string `pulumi:"password"`
	PathPrefix          *string `pulumi:"pathPrefix"`
	SocketTimeoutMillis *int    `pulumi:"socketTimeoutMillis"`
	SyncDeletes         *bool   `pulumi:"syncDeletes"`
	SyncProperties      *bool   `pulumi:"syncProperties"`
	SyncStatistics      *bool   `pulumi:"syncStatistics"`
	Url                 *string `pulumi:"url"`
	Username            *string `pulumi:"username"`
}

// PushReplicationReplicationInput is an input type that accepts PushReplicationReplicationArgs and PushReplicationReplicationOutput values.
// You can construct a concrete instance of `PushReplicationReplicationInput` via:
//
//          PushReplicationReplicationArgs{...}
type PushReplicationReplicationInput interface {
	pulumi.Input

	ToPushReplicationReplicationOutput() PushReplicationReplicationOutput
	ToPushReplicationReplicationOutputWithContext(context.Context) PushReplicationReplicationOutput
}

type PushReplicationReplicationArgs struct {
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Requires password encryption to be turned off `POST /api/system/decrypt`
	Password            pulumi.StringPtrInput `pulumi:"password"`
	PathPrefix          pulumi.StringPtrInput `pulumi:"pathPrefix"`
	SocketTimeoutMillis pulumi.IntPtrInput    `pulumi:"socketTimeoutMillis"`
	SyncDeletes         pulumi.BoolPtrInput   `pulumi:"syncDeletes"`
	SyncProperties      pulumi.BoolPtrInput   `pulumi:"syncProperties"`
	SyncStatistics      pulumi.BoolPtrInput   `pulumi:"syncStatistics"`
	Url                 pulumi.StringPtrInput `pulumi:"url"`
	Username            pulumi.StringPtrInput `pulumi:"username"`
}

func (PushReplicationReplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PushReplicationReplication)(nil)).Elem()
}

func (i PushReplicationReplicationArgs) ToPushReplicationReplicationOutput() PushReplicationReplicationOutput {
	return i.ToPushReplicationReplicationOutputWithContext(context.Background())
}

func (i PushReplicationReplicationArgs) ToPushReplicationReplicationOutputWithContext(ctx context.Context) PushReplicationReplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PushReplicationReplicationOutput)
}

// PushReplicationReplicationArrayInput is an input type that accepts PushReplicationReplicationArray and PushReplicationReplicationArrayOutput values.
// You can construct a concrete instance of `PushReplicationReplicationArrayInput` via:
//
//          PushReplicationReplicationArray{ PushReplicationReplicationArgs{...} }
type PushReplicationReplicationArrayInput interface {
	pulumi.Input

	ToPushReplicationReplicationArrayOutput() PushReplicationReplicationArrayOutput
	ToPushReplicationReplicationArrayOutputWithContext(context.Context) PushReplicationReplicationArrayOutput
}

type PushReplicationReplicationArray []PushReplicationReplicationInput

func (PushReplicationReplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PushReplicationReplication)(nil)).Elem()
}

func (i PushReplicationReplicationArray) ToPushReplicationReplicationArrayOutput() PushReplicationReplicationArrayOutput {
	return i.ToPushReplicationReplicationArrayOutputWithContext(context.Background())
}

func (i PushReplicationReplicationArray) ToPushReplicationReplicationArrayOutputWithContext(ctx context.Context) PushReplicationReplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PushReplicationReplicationArrayOutput)
}

type PushReplicationReplicationOutput struct{ *pulumi.OutputState }

func (PushReplicationReplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PushReplicationReplication)(nil)).Elem()
}

func (o PushReplicationReplicationOutput) ToPushReplicationReplicationOutput() PushReplicationReplicationOutput {
	return o
}

func (o PushReplicationReplicationOutput) ToPushReplicationReplicationOutputWithContext(ctx context.Context) PushReplicationReplicationOutput {
	return o
}

func (o PushReplicationReplicationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PushReplicationReplication) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Requires password encryption to be turned off `POST /api/system/decrypt`
func (o PushReplicationReplicationOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PushReplicationReplication) *string { return v.Password }).(pulumi.StringPtrOutput)
}

func (o PushReplicationReplicationOutput) PathPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PushReplicationReplication) *string { return v.PathPrefix }).(pulumi.StringPtrOutput)
}

func (o PushReplicationReplicationOutput) SocketTimeoutMillis() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PushReplicationReplication) *int { return v.SocketTimeoutMillis }).(pulumi.IntPtrOutput)
}

func (o PushReplicationReplicationOutput) SyncDeletes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PushReplicationReplication) *bool { return v.SyncDeletes }).(pulumi.BoolPtrOutput)
}

func (o PushReplicationReplicationOutput) SyncProperties() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PushReplicationReplication) *bool { return v.SyncProperties }).(pulumi.BoolPtrOutput)
}

func (o PushReplicationReplicationOutput) SyncStatistics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PushReplicationReplication) *bool { return v.SyncStatistics }).(pulumi.BoolPtrOutput)
}

func (o PushReplicationReplicationOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PushReplicationReplication) *string { return v.Url }).(pulumi.StringPtrOutput)
}

func (o PushReplicationReplicationOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PushReplicationReplication) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type PushReplicationReplicationArrayOutput struct{ *pulumi.OutputState }

func (PushReplicationReplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PushReplicationReplication)(nil)).Elem()
}

func (o PushReplicationReplicationArrayOutput) ToPushReplicationReplicationArrayOutput() PushReplicationReplicationArrayOutput {
	return o
}

func (o PushReplicationReplicationArrayOutput) ToPushReplicationReplicationArrayOutputWithContext(ctx context.Context) PushReplicationReplicationArrayOutput {
	return o
}

func (o PushReplicationReplicationArrayOutput) Index(i pulumi.IntInput) PushReplicationReplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PushReplicationReplication {
		return vs[0].([]PushReplicationReplication)[vs[1].(int)]
	}).(PushReplicationReplicationOutput)
}

type RemoteCargoRepositoryContentSynchronisation struct {
	// If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
	Enabled *bool `pulumi:"enabled"`
	// If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
	PropertiesEnabled *bool `pulumi:"propertiesEnabled"`
	// If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	// If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
	StatisticsEnabled *bool `pulumi:"statisticsEnabled"`
}

// RemoteCargoRepositoryContentSynchronisationInput is an input type that accepts RemoteCargoRepositoryContentSynchronisationArgs and RemoteCargoRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemoteCargoRepositoryContentSynchronisationInput` via:
//
//          RemoteCargoRepositoryContentSynchronisationArgs{...}
type RemoteCargoRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemoteCargoRepositoryContentSynchronisationOutput() RemoteCargoRepositoryContentSynchronisationOutput
	ToRemoteCargoRepositoryContentSynchronisationOutputWithContext(context.Context) RemoteCargoRepositoryContentSynchronisationOutput
}

type RemoteCargoRepositoryContentSynchronisationArgs struct {
	// If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
	PropertiesEnabled pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	// If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	// If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
	StatisticsEnabled pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemoteCargoRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteCargoRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemoteCargoRepositoryContentSynchronisationArgs) ToRemoteCargoRepositoryContentSynchronisationOutput() RemoteCargoRepositoryContentSynchronisationOutput {
	return i.ToRemoteCargoRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemoteCargoRepositoryContentSynchronisationArgs) ToRemoteCargoRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteCargoRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteCargoRepositoryContentSynchronisationOutput)
}

func (i RemoteCargoRepositoryContentSynchronisationArgs) ToRemoteCargoRepositoryContentSynchronisationPtrOutput() RemoteCargoRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteCargoRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemoteCargoRepositoryContentSynchronisationArgs) ToRemoteCargoRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteCargoRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteCargoRepositoryContentSynchronisationOutput).ToRemoteCargoRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemoteCargoRepositoryContentSynchronisationPtrInput is an input type that accepts RemoteCargoRepositoryContentSynchronisationArgs, RemoteCargoRepositoryContentSynchronisationPtr and RemoteCargoRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemoteCargoRepositoryContentSynchronisationPtrInput` via:
//
//          RemoteCargoRepositoryContentSynchronisationArgs{...}
//
//  or:
//
//          nil
type RemoteCargoRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemoteCargoRepositoryContentSynchronisationPtrOutput() RemoteCargoRepositoryContentSynchronisationPtrOutput
	ToRemoteCargoRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemoteCargoRepositoryContentSynchronisationPtrOutput
}

type remoteCargoRepositoryContentSynchronisationPtrType RemoteCargoRepositoryContentSynchronisationArgs

func RemoteCargoRepositoryContentSynchronisationPtr(v *RemoteCargoRepositoryContentSynchronisationArgs) RemoteCargoRepositoryContentSynchronisationPtrInput {
	return (*remoteCargoRepositoryContentSynchronisationPtrType)(v)
}

func (*remoteCargoRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteCargoRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remoteCargoRepositoryContentSynchronisationPtrType) ToRemoteCargoRepositoryContentSynchronisationPtrOutput() RemoteCargoRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteCargoRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remoteCargoRepositoryContentSynchronisationPtrType) ToRemoteCargoRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteCargoRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteCargoRepositoryContentSynchronisationPtrOutput)
}

type RemoteCargoRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemoteCargoRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteCargoRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteCargoRepositoryContentSynchronisationOutput) ToRemoteCargoRepositoryContentSynchronisationOutput() RemoteCargoRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteCargoRepositoryContentSynchronisationOutput) ToRemoteCargoRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteCargoRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteCargoRepositoryContentSynchronisationOutput) ToRemoteCargoRepositoryContentSynchronisationPtrOutput() RemoteCargoRepositoryContentSynchronisationPtrOutput {
	return o.ToRemoteCargoRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemoteCargoRepositoryContentSynchronisationOutput) ToRemoteCargoRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteCargoRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteCargoRepositoryContentSynchronisation) *RemoteCargoRepositoryContentSynchronisation {
		return &v
	}).(RemoteCargoRepositoryContentSynchronisationPtrOutput)
}

// If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
func (o RemoteCargoRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteCargoRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
func (o RemoteCargoRepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteCargoRepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

// If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
func (o RemoteCargoRepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteCargoRepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

// If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
func (o RemoteCargoRepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteCargoRepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemoteCargoRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemoteCargoRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteCargoRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteCargoRepositoryContentSynchronisationPtrOutput) ToRemoteCargoRepositoryContentSynchronisationPtrOutput() RemoteCargoRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteCargoRepositoryContentSynchronisationPtrOutput) ToRemoteCargoRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteCargoRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteCargoRepositoryContentSynchronisationPtrOutput) Elem() RemoteCargoRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemoteCargoRepositoryContentSynchronisation) RemoteCargoRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemoteCargoRepositoryContentSynchronisation
		return ret
	}).(RemoteCargoRepositoryContentSynchronisationOutput)
}

// If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
func (o RemoteCargoRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteCargoRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
func (o RemoteCargoRepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteCargoRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

// If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
func (o RemoteCargoRepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteCargoRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

// If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
func (o RemoteCargoRepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteCargoRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type RemoteDockerRepositoryContentSynchronisation struct {
	// If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
	Enabled *bool `pulumi:"enabled"`
	// If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
	PropertiesEnabled *bool `pulumi:"propertiesEnabled"`
	// If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	// If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
	StatisticsEnabled *bool `pulumi:"statisticsEnabled"`
}

// RemoteDockerRepositoryContentSynchronisationInput is an input type that accepts RemoteDockerRepositoryContentSynchronisationArgs and RemoteDockerRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemoteDockerRepositoryContentSynchronisationInput` via:
//
//          RemoteDockerRepositoryContentSynchronisationArgs{...}
type RemoteDockerRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemoteDockerRepositoryContentSynchronisationOutput() RemoteDockerRepositoryContentSynchronisationOutput
	ToRemoteDockerRepositoryContentSynchronisationOutputWithContext(context.Context) RemoteDockerRepositoryContentSynchronisationOutput
}

type RemoteDockerRepositoryContentSynchronisationArgs struct {
	// If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
	PropertiesEnabled pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	// If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	// If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
	StatisticsEnabled pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemoteDockerRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteDockerRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemoteDockerRepositoryContentSynchronisationArgs) ToRemoteDockerRepositoryContentSynchronisationOutput() RemoteDockerRepositoryContentSynchronisationOutput {
	return i.ToRemoteDockerRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemoteDockerRepositoryContentSynchronisationArgs) ToRemoteDockerRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteDockerRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteDockerRepositoryContentSynchronisationOutput)
}

func (i RemoteDockerRepositoryContentSynchronisationArgs) ToRemoteDockerRepositoryContentSynchronisationPtrOutput() RemoteDockerRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteDockerRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemoteDockerRepositoryContentSynchronisationArgs) ToRemoteDockerRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteDockerRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteDockerRepositoryContentSynchronisationOutput).ToRemoteDockerRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemoteDockerRepositoryContentSynchronisationPtrInput is an input type that accepts RemoteDockerRepositoryContentSynchronisationArgs, RemoteDockerRepositoryContentSynchronisationPtr and RemoteDockerRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemoteDockerRepositoryContentSynchronisationPtrInput` via:
//
//          RemoteDockerRepositoryContentSynchronisationArgs{...}
//
//  or:
//
//          nil
type RemoteDockerRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemoteDockerRepositoryContentSynchronisationPtrOutput() RemoteDockerRepositoryContentSynchronisationPtrOutput
	ToRemoteDockerRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemoteDockerRepositoryContentSynchronisationPtrOutput
}

type remoteDockerRepositoryContentSynchronisationPtrType RemoteDockerRepositoryContentSynchronisationArgs

func RemoteDockerRepositoryContentSynchronisationPtr(v *RemoteDockerRepositoryContentSynchronisationArgs) RemoteDockerRepositoryContentSynchronisationPtrInput {
	return (*remoteDockerRepositoryContentSynchronisationPtrType)(v)
}

func (*remoteDockerRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteDockerRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remoteDockerRepositoryContentSynchronisationPtrType) ToRemoteDockerRepositoryContentSynchronisationPtrOutput() RemoteDockerRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteDockerRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remoteDockerRepositoryContentSynchronisationPtrType) ToRemoteDockerRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteDockerRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteDockerRepositoryContentSynchronisationPtrOutput)
}

type RemoteDockerRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemoteDockerRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteDockerRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteDockerRepositoryContentSynchronisationOutput) ToRemoteDockerRepositoryContentSynchronisationOutput() RemoteDockerRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteDockerRepositoryContentSynchronisationOutput) ToRemoteDockerRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteDockerRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteDockerRepositoryContentSynchronisationOutput) ToRemoteDockerRepositoryContentSynchronisationPtrOutput() RemoteDockerRepositoryContentSynchronisationPtrOutput {
	return o.ToRemoteDockerRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemoteDockerRepositoryContentSynchronisationOutput) ToRemoteDockerRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteDockerRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteDockerRepositoryContentSynchronisation) *RemoteDockerRepositoryContentSynchronisation {
		return &v
	}).(RemoteDockerRepositoryContentSynchronisationPtrOutput)
}

// If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
func (o RemoteDockerRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteDockerRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
func (o RemoteDockerRepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteDockerRepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

// If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
func (o RemoteDockerRepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteDockerRepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

// If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
func (o RemoteDockerRepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteDockerRepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemoteDockerRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemoteDockerRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteDockerRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteDockerRepositoryContentSynchronisationPtrOutput) ToRemoteDockerRepositoryContentSynchronisationPtrOutput() RemoteDockerRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteDockerRepositoryContentSynchronisationPtrOutput) ToRemoteDockerRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteDockerRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteDockerRepositoryContentSynchronisationPtrOutput) Elem() RemoteDockerRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemoteDockerRepositoryContentSynchronisation) RemoteDockerRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemoteDockerRepositoryContentSynchronisation
		return ret
	}).(RemoteDockerRepositoryContentSynchronisationOutput)
}

// If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
func (o RemoteDockerRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteDockerRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
func (o RemoteDockerRepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteDockerRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

// If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
func (o RemoteDockerRepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteDockerRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

// If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
func (o RemoteDockerRepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteDockerRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type RemoteHelmRepositoryContentSynchronisation struct {
	// If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
	Enabled *bool `pulumi:"enabled"`
	// If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
	PropertiesEnabled *bool `pulumi:"propertiesEnabled"`
	// If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	// If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
	StatisticsEnabled *bool `pulumi:"statisticsEnabled"`
}

// RemoteHelmRepositoryContentSynchronisationInput is an input type that accepts RemoteHelmRepositoryContentSynchronisationArgs and RemoteHelmRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemoteHelmRepositoryContentSynchronisationInput` via:
//
//          RemoteHelmRepositoryContentSynchronisationArgs{...}
type RemoteHelmRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemoteHelmRepositoryContentSynchronisationOutput() RemoteHelmRepositoryContentSynchronisationOutput
	ToRemoteHelmRepositoryContentSynchronisationOutputWithContext(context.Context) RemoteHelmRepositoryContentSynchronisationOutput
}

type RemoteHelmRepositoryContentSynchronisationArgs struct {
	// If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
	PropertiesEnabled pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	// If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	// If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
	StatisticsEnabled pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemoteHelmRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteHelmRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemoteHelmRepositoryContentSynchronisationArgs) ToRemoteHelmRepositoryContentSynchronisationOutput() RemoteHelmRepositoryContentSynchronisationOutput {
	return i.ToRemoteHelmRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemoteHelmRepositoryContentSynchronisationArgs) ToRemoteHelmRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteHelmRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteHelmRepositoryContentSynchronisationOutput)
}

func (i RemoteHelmRepositoryContentSynchronisationArgs) ToRemoteHelmRepositoryContentSynchronisationPtrOutput() RemoteHelmRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteHelmRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemoteHelmRepositoryContentSynchronisationArgs) ToRemoteHelmRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteHelmRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteHelmRepositoryContentSynchronisationOutput).ToRemoteHelmRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemoteHelmRepositoryContentSynchronisationPtrInput is an input type that accepts RemoteHelmRepositoryContentSynchronisationArgs, RemoteHelmRepositoryContentSynchronisationPtr and RemoteHelmRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemoteHelmRepositoryContentSynchronisationPtrInput` via:
//
//          RemoteHelmRepositoryContentSynchronisationArgs{...}
//
//  or:
//
//          nil
type RemoteHelmRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemoteHelmRepositoryContentSynchronisationPtrOutput() RemoteHelmRepositoryContentSynchronisationPtrOutput
	ToRemoteHelmRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemoteHelmRepositoryContentSynchronisationPtrOutput
}

type remoteHelmRepositoryContentSynchronisationPtrType RemoteHelmRepositoryContentSynchronisationArgs

func RemoteHelmRepositoryContentSynchronisationPtr(v *RemoteHelmRepositoryContentSynchronisationArgs) RemoteHelmRepositoryContentSynchronisationPtrInput {
	return (*remoteHelmRepositoryContentSynchronisationPtrType)(v)
}

func (*remoteHelmRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteHelmRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remoteHelmRepositoryContentSynchronisationPtrType) ToRemoteHelmRepositoryContentSynchronisationPtrOutput() RemoteHelmRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteHelmRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remoteHelmRepositoryContentSynchronisationPtrType) ToRemoteHelmRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteHelmRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteHelmRepositoryContentSynchronisationPtrOutput)
}

type RemoteHelmRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemoteHelmRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteHelmRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteHelmRepositoryContentSynchronisationOutput) ToRemoteHelmRepositoryContentSynchronisationOutput() RemoteHelmRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteHelmRepositoryContentSynchronisationOutput) ToRemoteHelmRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteHelmRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteHelmRepositoryContentSynchronisationOutput) ToRemoteHelmRepositoryContentSynchronisationPtrOutput() RemoteHelmRepositoryContentSynchronisationPtrOutput {
	return o.ToRemoteHelmRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemoteHelmRepositoryContentSynchronisationOutput) ToRemoteHelmRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteHelmRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteHelmRepositoryContentSynchronisation) *RemoteHelmRepositoryContentSynchronisation {
		return &v
	}).(RemoteHelmRepositoryContentSynchronisationPtrOutput)
}

// If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
func (o RemoteHelmRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteHelmRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
func (o RemoteHelmRepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteHelmRepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

// If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
func (o RemoteHelmRepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteHelmRepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

// If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
func (o RemoteHelmRepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteHelmRepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemoteHelmRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemoteHelmRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteHelmRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteHelmRepositoryContentSynchronisationPtrOutput) ToRemoteHelmRepositoryContentSynchronisationPtrOutput() RemoteHelmRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteHelmRepositoryContentSynchronisationPtrOutput) ToRemoteHelmRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteHelmRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteHelmRepositoryContentSynchronisationPtrOutput) Elem() RemoteHelmRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemoteHelmRepositoryContentSynchronisation) RemoteHelmRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemoteHelmRepositoryContentSynchronisation
		return ret
	}).(RemoteHelmRepositoryContentSynchronisationOutput)
}

// If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
func (o RemoteHelmRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteHelmRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
func (o RemoteHelmRepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteHelmRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

// If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
func (o RemoteHelmRepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteHelmRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

// If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
func (o RemoteHelmRepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteHelmRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type RemoteNpmRepositoryContentSynchronisation struct {
	// If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
	Enabled *bool `pulumi:"enabled"`
	// If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
	PropertiesEnabled *bool `pulumi:"propertiesEnabled"`
	// If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	// If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
	StatisticsEnabled *bool `pulumi:"statisticsEnabled"`
}

// RemoteNpmRepositoryContentSynchronisationInput is an input type that accepts RemoteNpmRepositoryContentSynchronisationArgs and RemoteNpmRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemoteNpmRepositoryContentSynchronisationInput` via:
//
//          RemoteNpmRepositoryContentSynchronisationArgs{...}
type RemoteNpmRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemoteNpmRepositoryContentSynchronisationOutput() RemoteNpmRepositoryContentSynchronisationOutput
	ToRemoteNpmRepositoryContentSynchronisationOutputWithContext(context.Context) RemoteNpmRepositoryContentSynchronisationOutput
}

type RemoteNpmRepositoryContentSynchronisationArgs struct {
	// If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
	PropertiesEnabled pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	// If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	// If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
	StatisticsEnabled pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemoteNpmRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteNpmRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemoteNpmRepositoryContentSynchronisationArgs) ToRemoteNpmRepositoryContentSynchronisationOutput() RemoteNpmRepositoryContentSynchronisationOutput {
	return i.ToRemoteNpmRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemoteNpmRepositoryContentSynchronisationArgs) ToRemoteNpmRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteNpmRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteNpmRepositoryContentSynchronisationOutput)
}

func (i RemoteNpmRepositoryContentSynchronisationArgs) ToRemoteNpmRepositoryContentSynchronisationPtrOutput() RemoteNpmRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteNpmRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemoteNpmRepositoryContentSynchronisationArgs) ToRemoteNpmRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteNpmRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteNpmRepositoryContentSynchronisationOutput).ToRemoteNpmRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemoteNpmRepositoryContentSynchronisationPtrInput is an input type that accepts RemoteNpmRepositoryContentSynchronisationArgs, RemoteNpmRepositoryContentSynchronisationPtr and RemoteNpmRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemoteNpmRepositoryContentSynchronisationPtrInput` via:
//
//          RemoteNpmRepositoryContentSynchronisationArgs{...}
//
//  or:
//
//          nil
type RemoteNpmRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemoteNpmRepositoryContentSynchronisationPtrOutput() RemoteNpmRepositoryContentSynchronisationPtrOutput
	ToRemoteNpmRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemoteNpmRepositoryContentSynchronisationPtrOutput
}

type remoteNpmRepositoryContentSynchronisationPtrType RemoteNpmRepositoryContentSynchronisationArgs

func RemoteNpmRepositoryContentSynchronisationPtr(v *RemoteNpmRepositoryContentSynchronisationArgs) RemoteNpmRepositoryContentSynchronisationPtrInput {
	return (*remoteNpmRepositoryContentSynchronisationPtrType)(v)
}

func (*remoteNpmRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteNpmRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remoteNpmRepositoryContentSynchronisationPtrType) ToRemoteNpmRepositoryContentSynchronisationPtrOutput() RemoteNpmRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteNpmRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remoteNpmRepositoryContentSynchronisationPtrType) ToRemoteNpmRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteNpmRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteNpmRepositoryContentSynchronisationPtrOutput)
}

type RemoteNpmRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemoteNpmRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteNpmRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteNpmRepositoryContentSynchronisationOutput) ToRemoteNpmRepositoryContentSynchronisationOutput() RemoteNpmRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteNpmRepositoryContentSynchronisationOutput) ToRemoteNpmRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteNpmRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteNpmRepositoryContentSynchronisationOutput) ToRemoteNpmRepositoryContentSynchronisationPtrOutput() RemoteNpmRepositoryContentSynchronisationPtrOutput {
	return o.ToRemoteNpmRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemoteNpmRepositoryContentSynchronisationOutput) ToRemoteNpmRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteNpmRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteNpmRepositoryContentSynchronisation) *RemoteNpmRepositoryContentSynchronisation {
		return &v
	}).(RemoteNpmRepositoryContentSynchronisationPtrOutput)
}

// If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
func (o RemoteNpmRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteNpmRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
func (o RemoteNpmRepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteNpmRepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

// If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
func (o RemoteNpmRepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteNpmRepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

// If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
func (o RemoteNpmRepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteNpmRepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemoteNpmRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemoteNpmRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteNpmRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteNpmRepositoryContentSynchronisationPtrOutput) ToRemoteNpmRepositoryContentSynchronisationPtrOutput() RemoteNpmRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteNpmRepositoryContentSynchronisationPtrOutput) ToRemoteNpmRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteNpmRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteNpmRepositoryContentSynchronisationPtrOutput) Elem() RemoteNpmRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemoteNpmRepositoryContentSynchronisation) RemoteNpmRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemoteNpmRepositoryContentSynchronisation
		return ret
	}).(RemoteNpmRepositoryContentSynchronisationOutput)
}

// If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
func (o RemoteNpmRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteNpmRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
func (o RemoteNpmRepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteNpmRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

// If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
func (o RemoteNpmRepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteNpmRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

// If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
func (o RemoteNpmRepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteNpmRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type RemotePypiRepositoryContentSynchronisation struct {
	// If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
	Enabled *bool `pulumi:"enabled"`
	// If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
	PropertiesEnabled *bool `pulumi:"propertiesEnabled"`
	// If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
	SourceOriginAbsenceDetection *bool `pulumi:"sourceOriginAbsenceDetection"`
	// If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
	StatisticsEnabled *bool `pulumi:"statisticsEnabled"`
}

// RemotePypiRepositoryContentSynchronisationInput is an input type that accepts RemotePypiRepositoryContentSynchronisationArgs and RemotePypiRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemotePypiRepositoryContentSynchronisationInput` via:
//
//          RemotePypiRepositoryContentSynchronisationArgs{...}
type RemotePypiRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemotePypiRepositoryContentSynchronisationOutput() RemotePypiRepositoryContentSynchronisationOutput
	ToRemotePypiRepositoryContentSynchronisationOutputWithContext(context.Context) RemotePypiRepositoryContentSynchronisationOutput
}

type RemotePypiRepositoryContentSynchronisationArgs struct {
	// If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
	PropertiesEnabled pulumi.BoolPtrInput `pulumi:"propertiesEnabled"`
	// If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
	SourceOriginAbsenceDetection pulumi.BoolPtrInput `pulumi:"sourceOriginAbsenceDetection"`
	// If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
	StatisticsEnabled pulumi.BoolPtrInput `pulumi:"statisticsEnabled"`
}

func (RemotePypiRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemotePypiRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemotePypiRepositoryContentSynchronisationArgs) ToRemotePypiRepositoryContentSynchronisationOutput() RemotePypiRepositoryContentSynchronisationOutput {
	return i.ToRemotePypiRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemotePypiRepositoryContentSynchronisationArgs) ToRemotePypiRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemotePypiRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemotePypiRepositoryContentSynchronisationOutput)
}

func (i RemotePypiRepositoryContentSynchronisationArgs) ToRemotePypiRepositoryContentSynchronisationPtrOutput() RemotePypiRepositoryContentSynchronisationPtrOutput {
	return i.ToRemotePypiRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemotePypiRepositoryContentSynchronisationArgs) ToRemotePypiRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemotePypiRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemotePypiRepositoryContentSynchronisationOutput).ToRemotePypiRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemotePypiRepositoryContentSynchronisationPtrInput is an input type that accepts RemotePypiRepositoryContentSynchronisationArgs, RemotePypiRepositoryContentSynchronisationPtr and RemotePypiRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemotePypiRepositoryContentSynchronisationPtrInput` via:
//
//          RemotePypiRepositoryContentSynchronisationArgs{...}
//
//  or:
//
//          nil
type RemotePypiRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemotePypiRepositoryContentSynchronisationPtrOutput() RemotePypiRepositoryContentSynchronisationPtrOutput
	ToRemotePypiRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemotePypiRepositoryContentSynchronisationPtrOutput
}

type remotePypiRepositoryContentSynchronisationPtrType RemotePypiRepositoryContentSynchronisationArgs

func RemotePypiRepositoryContentSynchronisationPtr(v *RemotePypiRepositoryContentSynchronisationArgs) RemotePypiRepositoryContentSynchronisationPtrInput {
	return (*remotePypiRepositoryContentSynchronisationPtrType)(v)
}

func (*remotePypiRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemotePypiRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remotePypiRepositoryContentSynchronisationPtrType) ToRemotePypiRepositoryContentSynchronisationPtrOutput() RemotePypiRepositoryContentSynchronisationPtrOutput {
	return i.ToRemotePypiRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remotePypiRepositoryContentSynchronisationPtrType) ToRemotePypiRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemotePypiRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemotePypiRepositoryContentSynchronisationPtrOutput)
}

type RemotePypiRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemotePypiRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemotePypiRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemotePypiRepositoryContentSynchronisationOutput) ToRemotePypiRepositoryContentSynchronisationOutput() RemotePypiRepositoryContentSynchronisationOutput {
	return o
}

func (o RemotePypiRepositoryContentSynchronisationOutput) ToRemotePypiRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemotePypiRepositoryContentSynchronisationOutput {
	return o
}

func (o RemotePypiRepositoryContentSynchronisationOutput) ToRemotePypiRepositoryContentSynchronisationPtrOutput() RemotePypiRepositoryContentSynchronisationPtrOutput {
	return o.ToRemotePypiRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemotePypiRepositoryContentSynchronisationOutput) ToRemotePypiRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemotePypiRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemotePypiRepositoryContentSynchronisation) *RemotePypiRepositoryContentSynchronisation {
		return &v
	}).(RemotePypiRepositoryContentSynchronisationPtrOutput)
}

// If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
func (o RemotePypiRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemotePypiRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
func (o RemotePypiRepositoryContentSynchronisationOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemotePypiRepositoryContentSynchronisation) *bool { return v.PropertiesEnabled }).(pulumi.BoolPtrOutput)
}

// If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
func (o RemotePypiRepositoryContentSynchronisationOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemotePypiRepositoryContentSynchronisation) *bool { return v.SourceOriginAbsenceDetection }).(pulumi.BoolPtrOutput)
}

// If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
func (o RemotePypiRepositoryContentSynchronisationOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemotePypiRepositoryContentSynchronisation) *bool { return v.StatisticsEnabled }).(pulumi.BoolPtrOutput)
}

type RemotePypiRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemotePypiRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemotePypiRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemotePypiRepositoryContentSynchronisationPtrOutput) ToRemotePypiRepositoryContentSynchronisationPtrOutput() RemotePypiRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemotePypiRepositoryContentSynchronisationPtrOutput) ToRemotePypiRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemotePypiRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemotePypiRepositoryContentSynchronisationPtrOutput) Elem() RemotePypiRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemotePypiRepositoryContentSynchronisation) RemotePypiRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemotePypiRepositoryContentSynchronisation
		return ret
	}).(RemotePypiRepositoryContentSynchronisationOutput)
}

// If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
func (o RemotePypiRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemotePypiRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.
func (o RemotePypiRepositoryContentSynchronisationPtrOutput) PropertiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemotePypiRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.PropertiesEnabled
	}).(pulumi.BoolPtrOutput)
}

// If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'
func (o RemotePypiRepositoryContentSynchronisationPtrOutput) SourceOriginAbsenceDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemotePypiRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.SourceOriginAbsenceDetection
	}).(pulumi.BoolPtrOutput)
}

// If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.
func (o RemotePypiRepositoryContentSynchronisationPtrOutput) StatisticsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemotePypiRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.StatisticsEnabled
	}).(pulumi.BoolPtrOutput)
}

type RemoteRepositoryContentSynchronisation struct {
	// If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
	Enabled *bool `pulumi:"enabled"`
}

// RemoteRepositoryContentSynchronisationInput is an input type that accepts RemoteRepositoryContentSynchronisationArgs and RemoteRepositoryContentSynchronisationOutput values.
// You can construct a concrete instance of `RemoteRepositoryContentSynchronisationInput` via:
//
//          RemoteRepositoryContentSynchronisationArgs{...}
type RemoteRepositoryContentSynchronisationInput interface {
	pulumi.Input

	ToRemoteRepositoryContentSynchronisationOutput() RemoteRepositoryContentSynchronisationOutput
	ToRemoteRepositoryContentSynchronisationOutputWithContext(context.Context) RemoteRepositoryContentSynchronisationOutput
}

type RemoteRepositoryContentSynchronisationArgs struct {
	// If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (RemoteRepositoryContentSynchronisationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteRepositoryContentSynchronisation)(nil)).Elem()
}

func (i RemoteRepositoryContentSynchronisationArgs) ToRemoteRepositoryContentSynchronisationOutput() RemoteRepositoryContentSynchronisationOutput {
	return i.ToRemoteRepositoryContentSynchronisationOutputWithContext(context.Background())
}

func (i RemoteRepositoryContentSynchronisationArgs) ToRemoteRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteRepositoryContentSynchronisationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteRepositoryContentSynchronisationOutput)
}

func (i RemoteRepositoryContentSynchronisationArgs) ToRemoteRepositoryContentSynchronisationPtrOutput() RemoteRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i RemoteRepositoryContentSynchronisationArgs) ToRemoteRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteRepositoryContentSynchronisationOutput).ToRemoteRepositoryContentSynchronisationPtrOutputWithContext(ctx)
}

// RemoteRepositoryContentSynchronisationPtrInput is an input type that accepts RemoteRepositoryContentSynchronisationArgs, RemoteRepositoryContentSynchronisationPtr and RemoteRepositoryContentSynchronisationPtrOutput values.
// You can construct a concrete instance of `RemoteRepositoryContentSynchronisationPtrInput` via:
//
//          RemoteRepositoryContentSynchronisationArgs{...}
//
//  or:
//
//          nil
type RemoteRepositoryContentSynchronisationPtrInput interface {
	pulumi.Input

	ToRemoteRepositoryContentSynchronisationPtrOutput() RemoteRepositoryContentSynchronisationPtrOutput
	ToRemoteRepositoryContentSynchronisationPtrOutputWithContext(context.Context) RemoteRepositoryContentSynchronisationPtrOutput
}

type remoteRepositoryContentSynchronisationPtrType RemoteRepositoryContentSynchronisationArgs

func RemoteRepositoryContentSynchronisationPtr(v *RemoteRepositoryContentSynchronisationArgs) RemoteRepositoryContentSynchronisationPtrInput {
	return (*remoteRepositoryContentSynchronisationPtrType)(v)
}

func (*remoteRepositoryContentSynchronisationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteRepositoryContentSynchronisation)(nil)).Elem()
}

func (i *remoteRepositoryContentSynchronisationPtrType) ToRemoteRepositoryContentSynchronisationPtrOutput() RemoteRepositoryContentSynchronisationPtrOutput {
	return i.ToRemoteRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (i *remoteRepositoryContentSynchronisationPtrType) ToRemoteRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteRepositoryContentSynchronisationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteRepositoryContentSynchronisationPtrOutput)
}

type RemoteRepositoryContentSynchronisationOutput struct{ *pulumi.OutputState }

func (RemoteRepositoryContentSynchronisationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteRepositoryContentSynchronisationOutput) ToRemoteRepositoryContentSynchronisationOutput() RemoteRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteRepositoryContentSynchronisationOutput) ToRemoteRepositoryContentSynchronisationOutputWithContext(ctx context.Context) RemoteRepositoryContentSynchronisationOutput {
	return o
}

func (o RemoteRepositoryContentSynchronisationOutput) ToRemoteRepositoryContentSynchronisationPtrOutput() RemoteRepositoryContentSynchronisationPtrOutput {
	return o.ToRemoteRepositoryContentSynchronisationPtrOutputWithContext(context.Background())
}

func (o RemoteRepositoryContentSynchronisationOutput) ToRemoteRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteRepositoryContentSynchronisationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteRepositoryContentSynchronisation) *RemoteRepositoryContentSynchronisation {
		return &v
	}).(RemoteRepositoryContentSynchronisationPtrOutput)
}

// If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
func (o RemoteRepositoryContentSynchronisationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteRepositoryContentSynchronisation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type RemoteRepositoryContentSynchronisationPtrOutput struct{ *pulumi.OutputState }

func (RemoteRepositoryContentSynchronisationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteRepositoryContentSynchronisation)(nil)).Elem()
}

func (o RemoteRepositoryContentSynchronisationPtrOutput) ToRemoteRepositoryContentSynchronisationPtrOutput() RemoteRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteRepositoryContentSynchronisationPtrOutput) ToRemoteRepositoryContentSynchronisationPtrOutputWithContext(ctx context.Context) RemoteRepositoryContentSynchronisationPtrOutput {
	return o
}

func (o RemoteRepositoryContentSynchronisationPtrOutput) Elem() RemoteRepositoryContentSynchronisationOutput {
	return o.ApplyT(func(v *RemoteRepositoryContentSynchronisation) RemoteRepositoryContentSynchronisation {
		if v != nil {
			return *v
		}
		var ret RemoteRepositoryContentSynchronisation
		return ret
	}).(RemoteRepositoryContentSynchronisationOutput)
}

// If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.
func (o RemoteRepositoryContentSynchronisationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteRepositoryContentSynchronisation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type ReplicationConfigReplication struct {
	Enabled *bool `pulumi:"enabled"`
	// Requires password encryption to be turned off `POST /api/system/decrypt`
	Password            *string `pulumi:"password"`
	PathPrefix          *string `pulumi:"pathPrefix"`
	SocketTimeoutMillis *int    `pulumi:"socketTimeoutMillis"`
	SyncDeletes         *bool   `pulumi:"syncDeletes"`
	SyncProperties      *bool   `pulumi:"syncProperties"`
	SyncStatistics      *bool   `pulumi:"syncStatistics"`
	Url                 *string `pulumi:"url"`
	Username            *string `pulumi:"username"`
}

// ReplicationConfigReplicationInput is an input type that accepts ReplicationConfigReplicationArgs and ReplicationConfigReplicationOutput values.
// You can construct a concrete instance of `ReplicationConfigReplicationInput` via:
//
//          ReplicationConfigReplicationArgs{...}
type ReplicationConfigReplicationInput interface {
	pulumi.Input

	ToReplicationConfigReplicationOutput() ReplicationConfigReplicationOutput
	ToReplicationConfigReplicationOutputWithContext(context.Context) ReplicationConfigReplicationOutput
}

type ReplicationConfigReplicationArgs struct {
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Requires password encryption to be turned off `POST /api/system/decrypt`
	Password            pulumi.StringPtrInput `pulumi:"password"`
	PathPrefix          pulumi.StringPtrInput `pulumi:"pathPrefix"`
	SocketTimeoutMillis pulumi.IntPtrInput    `pulumi:"socketTimeoutMillis"`
	SyncDeletes         pulumi.BoolPtrInput   `pulumi:"syncDeletes"`
	SyncProperties      pulumi.BoolPtrInput   `pulumi:"syncProperties"`
	SyncStatistics      pulumi.BoolPtrInput   `pulumi:"syncStatistics"`
	Url                 pulumi.StringPtrInput `pulumi:"url"`
	Username            pulumi.StringPtrInput `pulumi:"username"`
}

func (ReplicationConfigReplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationConfigReplication)(nil)).Elem()
}

func (i ReplicationConfigReplicationArgs) ToReplicationConfigReplicationOutput() ReplicationConfigReplicationOutput {
	return i.ToReplicationConfigReplicationOutputWithContext(context.Background())
}

func (i ReplicationConfigReplicationArgs) ToReplicationConfigReplicationOutputWithContext(ctx context.Context) ReplicationConfigReplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationConfigReplicationOutput)
}

// ReplicationConfigReplicationArrayInput is an input type that accepts ReplicationConfigReplicationArray and ReplicationConfigReplicationArrayOutput values.
// You can construct a concrete instance of `ReplicationConfigReplicationArrayInput` via:
//
//          ReplicationConfigReplicationArray{ ReplicationConfigReplicationArgs{...} }
type ReplicationConfigReplicationArrayInput interface {
	pulumi.Input

	ToReplicationConfigReplicationArrayOutput() ReplicationConfigReplicationArrayOutput
	ToReplicationConfigReplicationArrayOutputWithContext(context.Context) ReplicationConfigReplicationArrayOutput
}

type ReplicationConfigReplicationArray []ReplicationConfigReplicationInput

func (ReplicationConfigReplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicationConfigReplication)(nil)).Elem()
}

func (i ReplicationConfigReplicationArray) ToReplicationConfigReplicationArrayOutput() ReplicationConfigReplicationArrayOutput {
	return i.ToReplicationConfigReplicationArrayOutputWithContext(context.Background())
}

func (i ReplicationConfigReplicationArray) ToReplicationConfigReplicationArrayOutputWithContext(ctx context.Context) ReplicationConfigReplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationConfigReplicationArrayOutput)
}

type ReplicationConfigReplicationOutput struct{ *pulumi.OutputState }

func (ReplicationConfigReplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationConfigReplication)(nil)).Elem()
}

func (o ReplicationConfigReplicationOutput) ToReplicationConfigReplicationOutput() ReplicationConfigReplicationOutput {
	return o
}

func (o ReplicationConfigReplicationOutput) ToReplicationConfigReplicationOutputWithContext(ctx context.Context) ReplicationConfigReplicationOutput {
	return o
}

func (o ReplicationConfigReplicationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReplicationConfigReplication) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Requires password encryption to be turned off `POST /api/system/decrypt`
func (o ReplicationConfigReplicationOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationConfigReplication) *string { return v.Password }).(pulumi.StringPtrOutput)
}

func (o ReplicationConfigReplicationOutput) PathPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationConfigReplication) *string { return v.PathPrefix }).(pulumi.StringPtrOutput)
}

func (o ReplicationConfigReplicationOutput) SocketTimeoutMillis() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReplicationConfigReplication) *int { return v.SocketTimeoutMillis }).(pulumi.IntPtrOutput)
}

func (o ReplicationConfigReplicationOutput) SyncDeletes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReplicationConfigReplication) *bool { return v.SyncDeletes }).(pulumi.BoolPtrOutput)
}

func (o ReplicationConfigReplicationOutput) SyncProperties() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReplicationConfigReplication) *bool { return v.SyncProperties }).(pulumi.BoolPtrOutput)
}

func (o ReplicationConfigReplicationOutput) SyncStatistics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReplicationConfigReplication) *bool { return v.SyncStatistics }).(pulumi.BoolPtrOutput)
}

func (o ReplicationConfigReplicationOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationConfigReplication) *string { return v.Url }).(pulumi.StringPtrOutput)
}

func (o ReplicationConfigReplicationOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationConfigReplication) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ReplicationConfigReplicationArrayOutput struct{ *pulumi.OutputState }

func (ReplicationConfigReplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicationConfigReplication)(nil)).Elem()
}

func (o ReplicationConfigReplicationArrayOutput) ToReplicationConfigReplicationArrayOutput() ReplicationConfigReplicationArrayOutput {
	return o
}

func (o ReplicationConfigReplicationArrayOutput) ToReplicationConfigReplicationArrayOutputWithContext(ctx context.Context) ReplicationConfigReplicationArrayOutput {
	return o
}

func (o ReplicationConfigReplicationArrayOutput) Index(i pulumi.IntInput) ReplicationConfigReplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReplicationConfigReplication {
		return vs[0].([]ReplicationConfigReplication)[vs[1].(int)]
	}).(ReplicationConfigReplicationOutput)
}

type XrayPolicyRule struct {
	// (Required) Nested block describing the actions to be applied by the policy. Described below.
	Actions *XrayPolicyRuleActions `pulumi:"actions"`
	// (Required) Nested block describing the criteria for the policy. Described below.
	Criteria XrayPolicyRuleCriteria `pulumi:"criteria"`
	// (Required) Name of the rule
	Name string `pulumi:"name"`
	// (Required) Integer describing the rule priority
	Priority int `pulumi:"priority"`
}

// XrayPolicyRuleInput is an input type that accepts XrayPolicyRuleArgs and XrayPolicyRuleOutput values.
// You can construct a concrete instance of `XrayPolicyRuleInput` via:
//
//          XrayPolicyRuleArgs{...}
type XrayPolicyRuleInput interface {
	pulumi.Input

	ToXrayPolicyRuleOutput() XrayPolicyRuleOutput
	ToXrayPolicyRuleOutputWithContext(context.Context) XrayPolicyRuleOutput
}

type XrayPolicyRuleArgs struct {
	// (Required) Nested block describing the actions to be applied by the policy. Described below.
	Actions XrayPolicyRuleActionsPtrInput `pulumi:"actions"`
	// (Required) Nested block describing the criteria for the policy. Described below.
	Criteria XrayPolicyRuleCriteriaInput `pulumi:"criteria"`
	// (Required) Name of the rule
	Name pulumi.StringInput `pulumi:"name"`
	// (Required) Integer describing the rule priority
	Priority pulumi.IntInput `pulumi:"priority"`
}

func (XrayPolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*XrayPolicyRule)(nil)).Elem()
}

func (i XrayPolicyRuleArgs) ToXrayPolicyRuleOutput() XrayPolicyRuleOutput {
	return i.ToXrayPolicyRuleOutputWithContext(context.Background())
}

func (i XrayPolicyRuleArgs) ToXrayPolicyRuleOutputWithContext(ctx context.Context) XrayPolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XrayPolicyRuleOutput)
}

// XrayPolicyRuleArrayInput is an input type that accepts XrayPolicyRuleArray and XrayPolicyRuleArrayOutput values.
// You can construct a concrete instance of `XrayPolicyRuleArrayInput` via:
//
//          XrayPolicyRuleArray{ XrayPolicyRuleArgs{...} }
type XrayPolicyRuleArrayInput interface {
	pulumi.Input

	ToXrayPolicyRuleArrayOutput() XrayPolicyRuleArrayOutput
	ToXrayPolicyRuleArrayOutputWithContext(context.Context) XrayPolicyRuleArrayOutput
}

type XrayPolicyRuleArray []XrayPolicyRuleInput

func (XrayPolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]XrayPolicyRule)(nil)).Elem()
}

func (i XrayPolicyRuleArray) ToXrayPolicyRuleArrayOutput() XrayPolicyRuleArrayOutput {
	return i.ToXrayPolicyRuleArrayOutputWithContext(context.Background())
}

func (i XrayPolicyRuleArray) ToXrayPolicyRuleArrayOutputWithContext(ctx context.Context) XrayPolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XrayPolicyRuleArrayOutput)
}

type XrayPolicyRuleOutput struct{ *pulumi.OutputState }

func (XrayPolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*XrayPolicyRule)(nil)).Elem()
}

func (o XrayPolicyRuleOutput) ToXrayPolicyRuleOutput() XrayPolicyRuleOutput {
	return o
}

func (o XrayPolicyRuleOutput) ToXrayPolicyRuleOutputWithContext(ctx context.Context) XrayPolicyRuleOutput {
	return o
}

// (Required) Nested block describing the actions to be applied by the policy. Described below.
func (o XrayPolicyRuleOutput) Actions() XrayPolicyRuleActionsPtrOutput {
	return o.ApplyT(func(v XrayPolicyRule) *XrayPolicyRuleActions { return v.Actions }).(XrayPolicyRuleActionsPtrOutput)
}

// (Required) Nested block describing the criteria for the policy. Described below.
func (o XrayPolicyRuleOutput) Criteria() XrayPolicyRuleCriteriaOutput {
	return o.ApplyT(func(v XrayPolicyRule) XrayPolicyRuleCriteria { return v.Criteria }).(XrayPolicyRuleCriteriaOutput)
}

// (Required) Name of the rule
func (o XrayPolicyRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v XrayPolicyRule) string { return v.Name }).(pulumi.StringOutput)
}

// (Required) Integer describing the rule priority
func (o XrayPolicyRuleOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v XrayPolicyRule) int { return v.Priority }).(pulumi.IntOutput)
}

type XrayPolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (XrayPolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]XrayPolicyRule)(nil)).Elem()
}

func (o XrayPolicyRuleArrayOutput) ToXrayPolicyRuleArrayOutput() XrayPolicyRuleArrayOutput {
	return o
}

func (o XrayPolicyRuleArrayOutput) ToXrayPolicyRuleArrayOutputWithContext(ctx context.Context) XrayPolicyRuleArrayOutput {
	return o
}

func (o XrayPolicyRuleArrayOutput) Index(i pulumi.IntInput) XrayPolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) XrayPolicyRule {
		return vs[0].([]XrayPolicyRule)[vs[1].(int)]
	}).(XrayPolicyRuleOutput)
}

type XrayPolicyRuleActions struct {
	// (Optional) Nested block describing artifacts that should be blocked for download if a violation is triggered. Described below.
	BlockDownload XrayPolicyRuleActionsBlockDownload `pulumi:"blockDownload"`
	// (Optional) The severity of violation to be triggered if the `criteria` are met.
	CustomSeverity *string `pulumi:"customSeverity"`
	// (Optional) Whether or not the related CI build should be marked as failed if a violation is triggered. This option is only available when the policy is applied to an `xrayWatch` resource with a `type` of `builds`.
	FailBuild *bool `pulumi:"failBuild"`
	// (Optional) A list of email addressed that will get emailed when a violation is triggered.
	Mails []string `pulumi:"mails"`
	// (Optional) A list of Xray-configured webhook URLs to be invoked if a violation is triggered.
	Webhooks []string `pulumi:"webhooks"`
}

// XrayPolicyRuleActionsInput is an input type that accepts XrayPolicyRuleActionsArgs and XrayPolicyRuleActionsOutput values.
// You can construct a concrete instance of `XrayPolicyRuleActionsInput` via:
//
//          XrayPolicyRuleActionsArgs{...}
type XrayPolicyRuleActionsInput interface {
	pulumi.Input

	ToXrayPolicyRuleActionsOutput() XrayPolicyRuleActionsOutput
	ToXrayPolicyRuleActionsOutputWithContext(context.Context) XrayPolicyRuleActionsOutput
}

type XrayPolicyRuleActionsArgs struct {
	// (Optional) Nested block describing artifacts that should be blocked for download if a violation is triggered. Described below.
	BlockDownload XrayPolicyRuleActionsBlockDownloadInput `pulumi:"blockDownload"`
	// (Optional) The severity of violation to be triggered if the `criteria` are met.
	CustomSeverity pulumi.StringPtrInput `pulumi:"customSeverity"`
	// (Optional) Whether or not the related CI build should be marked as failed if a violation is triggered. This option is only available when the policy is applied to an `xrayWatch` resource with a `type` of `builds`.
	FailBuild pulumi.BoolPtrInput `pulumi:"failBuild"`
	// (Optional) A list of email addressed that will get emailed when a violation is triggered.
	Mails pulumi.StringArrayInput `pulumi:"mails"`
	// (Optional) A list of Xray-configured webhook URLs to be invoked if a violation is triggered.
	Webhooks pulumi.StringArrayInput `pulumi:"webhooks"`
}

func (XrayPolicyRuleActionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*XrayPolicyRuleActions)(nil)).Elem()
}

func (i XrayPolicyRuleActionsArgs) ToXrayPolicyRuleActionsOutput() XrayPolicyRuleActionsOutput {
	return i.ToXrayPolicyRuleActionsOutputWithContext(context.Background())
}

func (i XrayPolicyRuleActionsArgs) ToXrayPolicyRuleActionsOutputWithContext(ctx context.Context) XrayPolicyRuleActionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XrayPolicyRuleActionsOutput)
}

func (i XrayPolicyRuleActionsArgs) ToXrayPolicyRuleActionsPtrOutput() XrayPolicyRuleActionsPtrOutput {
	return i.ToXrayPolicyRuleActionsPtrOutputWithContext(context.Background())
}

func (i XrayPolicyRuleActionsArgs) ToXrayPolicyRuleActionsPtrOutputWithContext(ctx context.Context) XrayPolicyRuleActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XrayPolicyRuleActionsOutput).ToXrayPolicyRuleActionsPtrOutputWithContext(ctx)
}

// XrayPolicyRuleActionsPtrInput is an input type that accepts XrayPolicyRuleActionsArgs, XrayPolicyRuleActionsPtr and XrayPolicyRuleActionsPtrOutput values.
// You can construct a concrete instance of `XrayPolicyRuleActionsPtrInput` via:
//
//          XrayPolicyRuleActionsArgs{...}
//
//  or:
//
//          nil
type XrayPolicyRuleActionsPtrInput interface {
	pulumi.Input

	ToXrayPolicyRuleActionsPtrOutput() XrayPolicyRuleActionsPtrOutput
	ToXrayPolicyRuleActionsPtrOutputWithContext(context.Context) XrayPolicyRuleActionsPtrOutput
}

type xrayPolicyRuleActionsPtrType XrayPolicyRuleActionsArgs

func XrayPolicyRuleActionsPtr(v *XrayPolicyRuleActionsArgs) XrayPolicyRuleActionsPtrInput {
	return (*xrayPolicyRuleActionsPtrType)(v)
}

func (*xrayPolicyRuleActionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**XrayPolicyRuleActions)(nil)).Elem()
}

func (i *xrayPolicyRuleActionsPtrType) ToXrayPolicyRuleActionsPtrOutput() XrayPolicyRuleActionsPtrOutput {
	return i.ToXrayPolicyRuleActionsPtrOutputWithContext(context.Background())
}

func (i *xrayPolicyRuleActionsPtrType) ToXrayPolicyRuleActionsPtrOutputWithContext(ctx context.Context) XrayPolicyRuleActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XrayPolicyRuleActionsPtrOutput)
}

type XrayPolicyRuleActionsOutput struct{ *pulumi.OutputState }

func (XrayPolicyRuleActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*XrayPolicyRuleActions)(nil)).Elem()
}

func (o XrayPolicyRuleActionsOutput) ToXrayPolicyRuleActionsOutput() XrayPolicyRuleActionsOutput {
	return o
}

func (o XrayPolicyRuleActionsOutput) ToXrayPolicyRuleActionsOutputWithContext(ctx context.Context) XrayPolicyRuleActionsOutput {
	return o
}

func (o XrayPolicyRuleActionsOutput) ToXrayPolicyRuleActionsPtrOutput() XrayPolicyRuleActionsPtrOutput {
	return o.ToXrayPolicyRuleActionsPtrOutputWithContext(context.Background())
}

func (o XrayPolicyRuleActionsOutput) ToXrayPolicyRuleActionsPtrOutputWithContext(ctx context.Context) XrayPolicyRuleActionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v XrayPolicyRuleActions) *XrayPolicyRuleActions {
		return &v
	}).(XrayPolicyRuleActionsPtrOutput)
}

// (Optional) Nested block describing artifacts that should be blocked for download if a violation is triggered. Described below.
func (o XrayPolicyRuleActionsOutput) BlockDownload() XrayPolicyRuleActionsBlockDownloadOutput {
	return o.ApplyT(func(v XrayPolicyRuleActions) XrayPolicyRuleActionsBlockDownload { return v.BlockDownload }).(XrayPolicyRuleActionsBlockDownloadOutput)
}

// (Optional) The severity of violation to be triggered if the `criteria` are met.
func (o XrayPolicyRuleActionsOutput) CustomSeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v XrayPolicyRuleActions) *string { return v.CustomSeverity }).(pulumi.StringPtrOutput)
}

// (Optional) Whether or not the related CI build should be marked as failed if a violation is triggered. This option is only available when the policy is applied to an `xrayWatch` resource with a `type` of `builds`.
func (o XrayPolicyRuleActionsOutput) FailBuild() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v XrayPolicyRuleActions) *bool { return v.FailBuild }).(pulumi.BoolPtrOutput)
}

// (Optional) A list of email addressed that will get emailed when a violation is triggered.
func (o XrayPolicyRuleActionsOutput) Mails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v XrayPolicyRuleActions) []string { return v.Mails }).(pulumi.StringArrayOutput)
}

// (Optional) A list of Xray-configured webhook URLs to be invoked if a violation is triggered.
func (o XrayPolicyRuleActionsOutput) Webhooks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v XrayPolicyRuleActions) []string { return v.Webhooks }).(pulumi.StringArrayOutput)
}

type XrayPolicyRuleActionsPtrOutput struct{ *pulumi.OutputState }

func (XrayPolicyRuleActionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**XrayPolicyRuleActions)(nil)).Elem()
}

func (o XrayPolicyRuleActionsPtrOutput) ToXrayPolicyRuleActionsPtrOutput() XrayPolicyRuleActionsPtrOutput {
	return o
}

func (o XrayPolicyRuleActionsPtrOutput) ToXrayPolicyRuleActionsPtrOutputWithContext(ctx context.Context) XrayPolicyRuleActionsPtrOutput {
	return o
}

func (o XrayPolicyRuleActionsPtrOutput) Elem() XrayPolicyRuleActionsOutput {
	return o.ApplyT(func(v *XrayPolicyRuleActions) XrayPolicyRuleActions {
		if v != nil {
			return *v
		}
		var ret XrayPolicyRuleActions
		return ret
	}).(XrayPolicyRuleActionsOutput)
}

// (Optional) Nested block describing artifacts that should be blocked for download if a violation is triggered. Described below.
func (o XrayPolicyRuleActionsPtrOutput) BlockDownload() XrayPolicyRuleActionsBlockDownloadPtrOutput {
	return o.ApplyT(func(v *XrayPolicyRuleActions) *XrayPolicyRuleActionsBlockDownload {
		if v == nil {
			return nil
		}
		return &v.BlockDownload
	}).(XrayPolicyRuleActionsBlockDownloadPtrOutput)
}

// (Optional) The severity of violation to be triggered if the `criteria` are met.
func (o XrayPolicyRuleActionsPtrOutput) CustomSeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *XrayPolicyRuleActions) *string {
		if v == nil {
			return nil
		}
		return v.CustomSeverity
	}).(pulumi.StringPtrOutput)
}

// (Optional) Whether or not the related CI build should be marked as failed if a violation is triggered. This option is only available when the policy is applied to an `xrayWatch` resource with a `type` of `builds`.
func (o XrayPolicyRuleActionsPtrOutput) FailBuild() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *XrayPolicyRuleActions) *bool {
		if v == nil {
			return nil
		}
		return v.FailBuild
	}).(pulumi.BoolPtrOutput)
}

// (Optional) A list of email addressed that will get emailed when a violation is triggered.
func (o XrayPolicyRuleActionsPtrOutput) Mails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *XrayPolicyRuleActions) []string {
		if v == nil {
			return nil
		}
		return v.Mails
	}).(pulumi.StringArrayOutput)
}

// (Optional) A list of Xray-configured webhook URLs to be invoked if a violation is triggered.
func (o XrayPolicyRuleActionsPtrOutput) Webhooks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *XrayPolicyRuleActions) []string {
		if v == nil {
			return nil
		}
		return v.Webhooks
	}).(pulumi.StringArrayOutput)
}

type XrayPolicyRuleActionsBlockDownload struct {
	// Whether or not to block download of artifacts that meet the artifact and severity `filters` for the associated `xrayWatch` resource.
	Active bool `pulumi:"active"`
	// Whether or not to block download of artifacts that meet the artifact `filters` for the associated `xrayWatch` resource but have not been scanned yet.
	Unscanned bool `pulumi:"unscanned"`
}

// XrayPolicyRuleActionsBlockDownloadInput is an input type that accepts XrayPolicyRuleActionsBlockDownloadArgs and XrayPolicyRuleActionsBlockDownloadOutput values.
// You can construct a concrete instance of `XrayPolicyRuleActionsBlockDownloadInput` via:
//
//          XrayPolicyRuleActionsBlockDownloadArgs{...}
type XrayPolicyRuleActionsBlockDownloadInput interface {
	pulumi.Input

	ToXrayPolicyRuleActionsBlockDownloadOutput() XrayPolicyRuleActionsBlockDownloadOutput
	ToXrayPolicyRuleActionsBlockDownloadOutputWithContext(context.Context) XrayPolicyRuleActionsBlockDownloadOutput
}

type XrayPolicyRuleActionsBlockDownloadArgs struct {
	// Whether or not to block download of artifacts that meet the artifact and severity `filters` for the associated `xrayWatch` resource.
	Active pulumi.BoolInput `pulumi:"active"`
	// Whether or not to block download of artifacts that meet the artifact `filters` for the associated `xrayWatch` resource but have not been scanned yet.
	Unscanned pulumi.BoolInput `pulumi:"unscanned"`
}

func (XrayPolicyRuleActionsBlockDownloadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*XrayPolicyRuleActionsBlockDownload)(nil)).Elem()
}

func (i XrayPolicyRuleActionsBlockDownloadArgs) ToXrayPolicyRuleActionsBlockDownloadOutput() XrayPolicyRuleActionsBlockDownloadOutput {
	return i.ToXrayPolicyRuleActionsBlockDownloadOutputWithContext(context.Background())
}

func (i XrayPolicyRuleActionsBlockDownloadArgs) ToXrayPolicyRuleActionsBlockDownloadOutputWithContext(ctx context.Context) XrayPolicyRuleActionsBlockDownloadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XrayPolicyRuleActionsBlockDownloadOutput)
}

func (i XrayPolicyRuleActionsBlockDownloadArgs) ToXrayPolicyRuleActionsBlockDownloadPtrOutput() XrayPolicyRuleActionsBlockDownloadPtrOutput {
	return i.ToXrayPolicyRuleActionsBlockDownloadPtrOutputWithContext(context.Background())
}

func (i XrayPolicyRuleActionsBlockDownloadArgs) ToXrayPolicyRuleActionsBlockDownloadPtrOutputWithContext(ctx context.Context) XrayPolicyRuleActionsBlockDownloadPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XrayPolicyRuleActionsBlockDownloadOutput).ToXrayPolicyRuleActionsBlockDownloadPtrOutputWithContext(ctx)
}

// XrayPolicyRuleActionsBlockDownloadPtrInput is an input type that accepts XrayPolicyRuleActionsBlockDownloadArgs, XrayPolicyRuleActionsBlockDownloadPtr and XrayPolicyRuleActionsBlockDownloadPtrOutput values.
// You can construct a concrete instance of `XrayPolicyRuleActionsBlockDownloadPtrInput` via:
//
//          XrayPolicyRuleActionsBlockDownloadArgs{...}
//
//  or:
//
//          nil
type XrayPolicyRuleActionsBlockDownloadPtrInput interface {
	pulumi.Input

	ToXrayPolicyRuleActionsBlockDownloadPtrOutput() XrayPolicyRuleActionsBlockDownloadPtrOutput
	ToXrayPolicyRuleActionsBlockDownloadPtrOutputWithContext(context.Context) XrayPolicyRuleActionsBlockDownloadPtrOutput
}

type xrayPolicyRuleActionsBlockDownloadPtrType XrayPolicyRuleActionsBlockDownloadArgs

func XrayPolicyRuleActionsBlockDownloadPtr(v *XrayPolicyRuleActionsBlockDownloadArgs) XrayPolicyRuleActionsBlockDownloadPtrInput {
	return (*xrayPolicyRuleActionsBlockDownloadPtrType)(v)
}

func (*xrayPolicyRuleActionsBlockDownloadPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**XrayPolicyRuleActionsBlockDownload)(nil)).Elem()
}

func (i *xrayPolicyRuleActionsBlockDownloadPtrType) ToXrayPolicyRuleActionsBlockDownloadPtrOutput() XrayPolicyRuleActionsBlockDownloadPtrOutput {
	return i.ToXrayPolicyRuleActionsBlockDownloadPtrOutputWithContext(context.Background())
}

func (i *xrayPolicyRuleActionsBlockDownloadPtrType) ToXrayPolicyRuleActionsBlockDownloadPtrOutputWithContext(ctx context.Context) XrayPolicyRuleActionsBlockDownloadPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XrayPolicyRuleActionsBlockDownloadPtrOutput)
}

type XrayPolicyRuleActionsBlockDownloadOutput struct{ *pulumi.OutputState }

func (XrayPolicyRuleActionsBlockDownloadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*XrayPolicyRuleActionsBlockDownload)(nil)).Elem()
}

func (o XrayPolicyRuleActionsBlockDownloadOutput) ToXrayPolicyRuleActionsBlockDownloadOutput() XrayPolicyRuleActionsBlockDownloadOutput {
	return o
}

func (o XrayPolicyRuleActionsBlockDownloadOutput) ToXrayPolicyRuleActionsBlockDownloadOutputWithContext(ctx context.Context) XrayPolicyRuleActionsBlockDownloadOutput {
	return o
}

func (o XrayPolicyRuleActionsBlockDownloadOutput) ToXrayPolicyRuleActionsBlockDownloadPtrOutput() XrayPolicyRuleActionsBlockDownloadPtrOutput {
	return o.ToXrayPolicyRuleActionsBlockDownloadPtrOutputWithContext(context.Background())
}

func (o XrayPolicyRuleActionsBlockDownloadOutput) ToXrayPolicyRuleActionsBlockDownloadPtrOutputWithContext(ctx context.Context) XrayPolicyRuleActionsBlockDownloadPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v XrayPolicyRuleActionsBlockDownload) *XrayPolicyRuleActionsBlockDownload {
		return &v
	}).(XrayPolicyRuleActionsBlockDownloadPtrOutput)
}

// Whether or not to block download of artifacts that meet the artifact and severity `filters` for the associated `xrayWatch` resource.
func (o XrayPolicyRuleActionsBlockDownloadOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v XrayPolicyRuleActionsBlockDownload) bool { return v.Active }).(pulumi.BoolOutput)
}

// Whether or not to block download of artifacts that meet the artifact `filters` for the associated `xrayWatch` resource but have not been scanned yet.
func (o XrayPolicyRuleActionsBlockDownloadOutput) Unscanned() pulumi.BoolOutput {
	return o.ApplyT(func(v XrayPolicyRuleActionsBlockDownload) bool { return v.Unscanned }).(pulumi.BoolOutput)
}

type XrayPolicyRuleActionsBlockDownloadPtrOutput struct{ *pulumi.OutputState }

func (XrayPolicyRuleActionsBlockDownloadPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**XrayPolicyRuleActionsBlockDownload)(nil)).Elem()
}

func (o XrayPolicyRuleActionsBlockDownloadPtrOutput) ToXrayPolicyRuleActionsBlockDownloadPtrOutput() XrayPolicyRuleActionsBlockDownloadPtrOutput {
	return o
}

func (o XrayPolicyRuleActionsBlockDownloadPtrOutput) ToXrayPolicyRuleActionsBlockDownloadPtrOutputWithContext(ctx context.Context) XrayPolicyRuleActionsBlockDownloadPtrOutput {
	return o
}

func (o XrayPolicyRuleActionsBlockDownloadPtrOutput) Elem() XrayPolicyRuleActionsBlockDownloadOutput {
	return o.ApplyT(func(v *XrayPolicyRuleActionsBlockDownload) XrayPolicyRuleActionsBlockDownload {
		if v != nil {
			return *v
		}
		var ret XrayPolicyRuleActionsBlockDownload
		return ret
	}).(XrayPolicyRuleActionsBlockDownloadOutput)
}

// Whether or not to block download of artifacts that meet the artifact and severity `filters` for the associated `xrayWatch` resource.
func (o XrayPolicyRuleActionsBlockDownloadPtrOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *XrayPolicyRuleActionsBlockDownload) *bool {
		if v == nil {
			return nil
		}
		return &v.Active
	}).(pulumi.BoolPtrOutput)
}

// Whether or not to block download of artifacts that meet the artifact `filters` for the associated `xrayWatch` resource but have not been scanned yet.
func (o XrayPolicyRuleActionsBlockDownloadPtrOutput) Unscanned() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *XrayPolicyRuleActionsBlockDownload) *bool {
		if v == nil {
			return nil
		}
		return &v.Unscanned
	}).(pulumi.BoolPtrOutput)
}

type XrayPolicyRuleCriteria struct {
	// (Optional) Whether or not to allow components whose license cannot be determined (`true` or `false`).
	AllowUnknown *bool `pulumi:"allowUnknown"`
	// (Optional) A list of OSS license names that may be attached to a component.
	AllowedLicenses []string `pulumi:"allowedLicenses"`
	// (Optional) A list of OSS license names that may not be attached to a component.
	BannedLicenses []string `pulumi:"bannedLicenses"`
	// (Optional) Nested block describing a CVS score range to be impacted. Defined below.
	CvssRange *XrayPolicyRuleCriteriaCvssRange `pulumi:"cvssRange"`
	// (Optional) The minimum security vulnerability severity that will be impacted by the policy.
	MinSeverity *string `pulumi:"minSeverity"`
}

// XrayPolicyRuleCriteriaInput is an input type that accepts XrayPolicyRuleCriteriaArgs and XrayPolicyRuleCriteriaOutput values.
// You can construct a concrete instance of `XrayPolicyRuleCriteriaInput` via:
//
//          XrayPolicyRuleCriteriaArgs{...}
type XrayPolicyRuleCriteriaInput interface {
	pulumi.Input

	ToXrayPolicyRuleCriteriaOutput() XrayPolicyRuleCriteriaOutput
	ToXrayPolicyRuleCriteriaOutputWithContext(context.Context) XrayPolicyRuleCriteriaOutput
}

type XrayPolicyRuleCriteriaArgs struct {
	// (Optional) Whether or not to allow components whose license cannot be determined (`true` or `false`).
	AllowUnknown pulumi.BoolPtrInput `pulumi:"allowUnknown"`
	// (Optional) A list of OSS license names that may be attached to a component.
	AllowedLicenses pulumi.StringArrayInput `pulumi:"allowedLicenses"`
	// (Optional) A list of OSS license names that may not be attached to a component.
	BannedLicenses pulumi.StringArrayInput `pulumi:"bannedLicenses"`
	// (Optional) Nested block describing a CVS score range to be impacted. Defined below.
	CvssRange XrayPolicyRuleCriteriaCvssRangePtrInput `pulumi:"cvssRange"`
	// (Optional) The minimum security vulnerability severity that will be impacted by the policy.
	MinSeverity pulumi.StringPtrInput `pulumi:"minSeverity"`
}

func (XrayPolicyRuleCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*XrayPolicyRuleCriteria)(nil)).Elem()
}

func (i XrayPolicyRuleCriteriaArgs) ToXrayPolicyRuleCriteriaOutput() XrayPolicyRuleCriteriaOutput {
	return i.ToXrayPolicyRuleCriteriaOutputWithContext(context.Background())
}

func (i XrayPolicyRuleCriteriaArgs) ToXrayPolicyRuleCriteriaOutputWithContext(ctx context.Context) XrayPolicyRuleCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XrayPolicyRuleCriteriaOutput)
}

type XrayPolicyRuleCriteriaOutput struct{ *pulumi.OutputState }

func (XrayPolicyRuleCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*XrayPolicyRuleCriteria)(nil)).Elem()
}

func (o XrayPolicyRuleCriteriaOutput) ToXrayPolicyRuleCriteriaOutput() XrayPolicyRuleCriteriaOutput {
	return o
}

func (o XrayPolicyRuleCriteriaOutput) ToXrayPolicyRuleCriteriaOutputWithContext(ctx context.Context) XrayPolicyRuleCriteriaOutput {
	return o
}

// (Optional) Whether or not to allow components whose license cannot be determined (`true` or `false`).
func (o XrayPolicyRuleCriteriaOutput) AllowUnknown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v XrayPolicyRuleCriteria) *bool { return v.AllowUnknown }).(pulumi.BoolPtrOutput)
}

// (Optional) A list of OSS license names that may be attached to a component.
func (o XrayPolicyRuleCriteriaOutput) AllowedLicenses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v XrayPolicyRuleCriteria) []string { return v.AllowedLicenses }).(pulumi.StringArrayOutput)
}

// (Optional) A list of OSS license names that may not be attached to a component.
func (o XrayPolicyRuleCriteriaOutput) BannedLicenses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v XrayPolicyRuleCriteria) []string { return v.BannedLicenses }).(pulumi.StringArrayOutput)
}

// (Optional) Nested block describing a CVS score range to be impacted. Defined below.
func (o XrayPolicyRuleCriteriaOutput) CvssRange() XrayPolicyRuleCriteriaCvssRangePtrOutput {
	return o.ApplyT(func(v XrayPolicyRuleCriteria) *XrayPolicyRuleCriteriaCvssRange { return v.CvssRange }).(XrayPolicyRuleCriteriaCvssRangePtrOutput)
}

// (Optional) The minimum security vulnerability severity that will be impacted by the policy.
func (o XrayPolicyRuleCriteriaOutput) MinSeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v XrayPolicyRuleCriteria) *string { return v.MinSeverity }).(pulumi.StringPtrOutput)
}

type XrayPolicyRuleCriteriaCvssRange struct {
	// (Required) The beginning of the range of CVS scores (from 1-10) to flag.
	From int `pulumi:"from"`
	// (Required) The end of the range of CVS scores (from 1-10) to flag.
	To int `pulumi:"to"`
}

// XrayPolicyRuleCriteriaCvssRangeInput is an input type that accepts XrayPolicyRuleCriteriaCvssRangeArgs and XrayPolicyRuleCriteriaCvssRangeOutput values.
// You can construct a concrete instance of `XrayPolicyRuleCriteriaCvssRangeInput` via:
//
//          XrayPolicyRuleCriteriaCvssRangeArgs{...}
type XrayPolicyRuleCriteriaCvssRangeInput interface {
	pulumi.Input

	ToXrayPolicyRuleCriteriaCvssRangeOutput() XrayPolicyRuleCriteriaCvssRangeOutput
	ToXrayPolicyRuleCriteriaCvssRangeOutputWithContext(context.Context) XrayPolicyRuleCriteriaCvssRangeOutput
}

type XrayPolicyRuleCriteriaCvssRangeArgs struct {
	// (Required) The beginning of the range of CVS scores (from 1-10) to flag.
	From pulumi.IntInput `pulumi:"from"`
	// (Required) The end of the range of CVS scores (from 1-10) to flag.
	To pulumi.IntInput `pulumi:"to"`
}

func (XrayPolicyRuleCriteriaCvssRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*XrayPolicyRuleCriteriaCvssRange)(nil)).Elem()
}

func (i XrayPolicyRuleCriteriaCvssRangeArgs) ToXrayPolicyRuleCriteriaCvssRangeOutput() XrayPolicyRuleCriteriaCvssRangeOutput {
	return i.ToXrayPolicyRuleCriteriaCvssRangeOutputWithContext(context.Background())
}

func (i XrayPolicyRuleCriteriaCvssRangeArgs) ToXrayPolicyRuleCriteriaCvssRangeOutputWithContext(ctx context.Context) XrayPolicyRuleCriteriaCvssRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XrayPolicyRuleCriteriaCvssRangeOutput)
}

func (i XrayPolicyRuleCriteriaCvssRangeArgs) ToXrayPolicyRuleCriteriaCvssRangePtrOutput() XrayPolicyRuleCriteriaCvssRangePtrOutput {
	return i.ToXrayPolicyRuleCriteriaCvssRangePtrOutputWithContext(context.Background())
}

func (i XrayPolicyRuleCriteriaCvssRangeArgs) ToXrayPolicyRuleCriteriaCvssRangePtrOutputWithContext(ctx context.Context) XrayPolicyRuleCriteriaCvssRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XrayPolicyRuleCriteriaCvssRangeOutput).ToXrayPolicyRuleCriteriaCvssRangePtrOutputWithContext(ctx)
}

// XrayPolicyRuleCriteriaCvssRangePtrInput is an input type that accepts XrayPolicyRuleCriteriaCvssRangeArgs, XrayPolicyRuleCriteriaCvssRangePtr and XrayPolicyRuleCriteriaCvssRangePtrOutput values.
// You can construct a concrete instance of `XrayPolicyRuleCriteriaCvssRangePtrInput` via:
//
//          XrayPolicyRuleCriteriaCvssRangeArgs{...}
//
//  or:
//
//          nil
type XrayPolicyRuleCriteriaCvssRangePtrInput interface {
	pulumi.Input

	ToXrayPolicyRuleCriteriaCvssRangePtrOutput() XrayPolicyRuleCriteriaCvssRangePtrOutput
	ToXrayPolicyRuleCriteriaCvssRangePtrOutputWithContext(context.Context) XrayPolicyRuleCriteriaCvssRangePtrOutput
}

type xrayPolicyRuleCriteriaCvssRangePtrType XrayPolicyRuleCriteriaCvssRangeArgs

func XrayPolicyRuleCriteriaCvssRangePtr(v *XrayPolicyRuleCriteriaCvssRangeArgs) XrayPolicyRuleCriteriaCvssRangePtrInput {
	return (*xrayPolicyRuleCriteriaCvssRangePtrType)(v)
}

func (*xrayPolicyRuleCriteriaCvssRangePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**XrayPolicyRuleCriteriaCvssRange)(nil)).Elem()
}

func (i *xrayPolicyRuleCriteriaCvssRangePtrType) ToXrayPolicyRuleCriteriaCvssRangePtrOutput() XrayPolicyRuleCriteriaCvssRangePtrOutput {
	return i.ToXrayPolicyRuleCriteriaCvssRangePtrOutputWithContext(context.Background())
}

func (i *xrayPolicyRuleCriteriaCvssRangePtrType) ToXrayPolicyRuleCriteriaCvssRangePtrOutputWithContext(ctx context.Context) XrayPolicyRuleCriteriaCvssRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XrayPolicyRuleCriteriaCvssRangePtrOutput)
}

type XrayPolicyRuleCriteriaCvssRangeOutput struct{ *pulumi.OutputState }

func (XrayPolicyRuleCriteriaCvssRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*XrayPolicyRuleCriteriaCvssRange)(nil)).Elem()
}

func (o XrayPolicyRuleCriteriaCvssRangeOutput) ToXrayPolicyRuleCriteriaCvssRangeOutput() XrayPolicyRuleCriteriaCvssRangeOutput {
	return o
}

func (o XrayPolicyRuleCriteriaCvssRangeOutput) ToXrayPolicyRuleCriteriaCvssRangeOutputWithContext(ctx context.Context) XrayPolicyRuleCriteriaCvssRangeOutput {
	return o
}

func (o XrayPolicyRuleCriteriaCvssRangeOutput) ToXrayPolicyRuleCriteriaCvssRangePtrOutput() XrayPolicyRuleCriteriaCvssRangePtrOutput {
	return o.ToXrayPolicyRuleCriteriaCvssRangePtrOutputWithContext(context.Background())
}

func (o XrayPolicyRuleCriteriaCvssRangeOutput) ToXrayPolicyRuleCriteriaCvssRangePtrOutputWithContext(ctx context.Context) XrayPolicyRuleCriteriaCvssRangePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v XrayPolicyRuleCriteriaCvssRange) *XrayPolicyRuleCriteriaCvssRange {
		return &v
	}).(XrayPolicyRuleCriteriaCvssRangePtrOutput)
}

// (Required) The beginning of the range of CVS scores (from 1-10) to flag.
func (o XrayPolicyRuleCriteriaCvssRangeOutput) From() pulumi.IntOutput {
	return o.ApplyT(func(v XrayPolicyRuleCriteriaCvssRange) int { return v.From }).(pulumi.IntOutput)
}

// (Required) The end of the range of CVS scores (from 1-10) to flag.
func (o XrayPolicyRuleCriteriaCvssRangeOutput) To() pulumi.IntOutput {
	return o.ApplyT(func(v XrayPolicyRuleCriteriaCvssRange) int { return v.To }).(pulumi.IntOutput)
}

type XrayPolicyRuleCriteriaCvssRangePtrOutput struct{ *pulumi.OutputState }

func (XrayPolicyRuleCriteriaCvssRangePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**XrayPolicyRuleCriteriaCvssRange)(nil)).Elem()
}

func (o XrayPolicyRuleCriteriaCvssRangePtrOutput) ToXrayPolicyRuleCriteriaCvssRangePtrOutput() XrayPolicyRuleCriteriaCvssRangePtrOutput {
	return o
}

func (o XrayPolicyRuleCriteriaCvssRangePtrOutput) ToXrayPolicyRuleCriteriaCvssRangePtrOutputWithContext(ctx context.Context) XrayPolicyRuleCriteriaCvssRangePtrOutput {
	return o
}

func (o XrayPolicyRuleCriteriaCvssRangePtrOutput) Elem() XrayPolicyRuleCriteriaCvssRangeOutput {
	return o.ApplyT(func(v *XrayPolicyRuleCriteriaCvssRange) XrayPolicyRuleCriteriaCvssRange {
		if v != nil {
			return *v
		}
		var ret XrayPolicyRuleCriteriaCvssRange
		return ret
	}).(XrayPolicyRuleCriteriaCvssRangeOutput)
}

// (Required) The beginning of the range of CVS scores (from 1-10) to flag.
func (o XrayPolicyRuleCriteriaCvssRangePtrOutput) From() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *XrayPolicyRuleCriteriaCvssRange) *int {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.IntPtrOutput)
}

// (Required) The end of the range of CVS scores (from 1-10) to flag.
func (o XrayPolicyRuleCriteriaCvssRangePtrOutput) To() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *XrayPolicyRuleCriteriaCvssRange) *int {
		if v == nil {
			return nil
		}
		return &v.To
	}).(pulumi.IntPtrOutput)
}

type XrayWatchAssignedPolicy struct {
	// The name of the policy that will be applied
	Name string `pulumi:"name"`
	// The type of the policy
	Type string `pulumi:"type"`
}

// XrayWatchAssignedPolicyInput is an input type that accepts XrayWatchAssignedPolicyArgs and XrayWatchAssignedPolicyOutput values.
// You can construct a concrete instance of `XrayWatchAssignedPolicyInput` via:
//
//          XrayWatchAssignedPolicyArgs{...}
type XrayWatchAssignedPolicyInput interface {
	pulumi.Input

	ToXrayWatchAssignedPolicyOutput() XrayWatchAssignedPolicyOutput
	ToXrayWatchAssignedPolicyOutputWithContext(context.Context) XrayWatchAssignedPolicyOutput
}

type XrayWatchAssignedPolicyArgs struct {
	// The name of the policy that will be applied
	Name pulumi.StringInput `pulumi:"name"`
	// The type of the policy
	Type pulumi.StringInput `pulumi:"type"`
}

func (XrayWatchAssignedPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*XrayWatchAssignedPolicy)(nil)).Elem()
}

func (i XrayWatchAssignedPolicyArgs) ToXrayWatchAssignedPolicyOutput() XrayWatchAssignedPolicyOutput {
	return i.ToXrayWatchAssignedPolicyOutputWithContext(context.Background())
}

func (i XrayWatchAssignedPolicyArgs) ToXrayWatchAssignedPolicyOutputWithContext(ctx context.Context) XrayWatchAssignedPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XrayWatchAssignedPolicyOutput)
}

// XrayWatchAssignedPolicyArrayInput is an input type that accepts XrayWatchAssignedPolicyArray and XrayWatchAssignedPolicyArrayOutput values.
// You can construct a concrete instance of `XrayWatchAssignedPolicyArrayInput` via:
//
//          XrayWatchAssignedPolicyArray{ XrayWatchAssignedPolicyArgs{...} }
type XrayWatchAssignedPolicyArrayInput interface {
	pulumi.Input

	ToXrayWatchAssignedPolicyArrayOutput() XrayWatchAssignedPolicyArrayOutput
	ToXrayWatchAssignedPolicyArrayOutputWithContext(context.Context) XrayWatchAssignedPolicyArrayOutput
}

type XrayWatchAssignedPolicyArray []XrayWatchAssignedPolicyInput

func (XrayWatchAssignedPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]XrayWatchAssignedPolicy)(nil)).Elem()
}

func (i XrayWatchAssignedPolicyArray) ToXrayWatchAssignedPolicyArrayOutput() XrayWatchAssignedPolicyArrayOutput {
	return i.ToXrayWatchAssignedPolicyArrayOutputWithContext(context.Background())
}

func (i XrayWatchAssignedPolicyArray) ToXrayWatchAssignedPolicyArrayOutputWithContext(ctx context.Context) XrayWatchAssignedPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XrayWatchAssignedPolicyArrayOutput)
}

type XrayWatchAssignedPolicyOutput struct{ *pulumi.OutputState }

func (XrayWatchAssignedPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*XrayWatchAssignedPolicy)(nil)).Elem()
}

func (o XrayWatchAssignedPolicyOutput) ToXrayWatchAssignedPolicyOutput() XrayWatchAssignedPolicyOutput {
	return o
}

func (o XrayWatchAssignedPolicyOutput) ToXrayWatchAssignedPolicyOutputWithContext(ctx context.Context) XrayWatchAssignedPolicyOutput {
	return o
}

// The name of the policy that will be applied
func (o XrayWatchAssignedPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v XrayWatchAssignedPolicy) string { return v.Name }).(pulumi.StringOutput)
}

// The type of the policy
func (o XrayWatchAssignedPolicyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v XrayWatchAssignedPolicy) string { return v.Type }).(pulumi.StringOutput)
}

type XrayWatchAssignedPolicyArrayOutput struct{ *pulumi.OutputState }

func (XrayWatchAssignedPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]XrayWatchAssignedPolicy)(nil)).Elem()
}

func (o XrayWatchAssignedPolicyArrayOutput) ToXrayWatchAssignedPolicyArrayOutput() XrayWatchAssignedPolicyArrayOutput {
	return o
}

func (o XrayWatchAssignedPolicyArrayOutput) ToXrayWatchAssignedPolicyArrayOutputWithContext(ctx context.Context) XrayWatchAssignedPolicyArrayOutput {
	return o
}

func (o XrayWatchAssignedPolicyArrayOutput) Index(i pulumi.IntInput) XrayWatchAssignedPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) XrayWatchAssignedPolicy {
		return vs[0].([]XrayWatchAssignedPolicy)[vs[1].(int)]
	}).(XrayWatchAssignedPolicyOutput)
}

type XrayWatchResource struct {
	// The ID number of a binary manager resource
	BinMgrId *string `pulumi:"binMgrId"`
	// Nested argument describing filters to be applied. Defined below.
	Filters []XrayWatchResourceFilter `pulumi:"filters"`
	// A name describing the resource
	Name string `pulumi:"name"`
	// Type of repository (e.g. local or remote)
	RepoType *string `pulumi:"repoType"`
	// Type of resource to be watched
	Type string `pulumi:"type"`
}

// XrayWatchResourceInput is an input type that accepts XrayWatchResourceArgs and XrayWatchResourceOutput values.
// You can construct a concrete instance of `XrayWatchResourceInput` via:
//
//          XrayWatchResourceArgs{...}
type XrayWatchResourceInput interface {
	pulumi.Input

	ToXrayWatchResourceOutput() XrayWatchResourceOutput
	ToXrayWatchResourceOutputWithContext(context.Context) XrayWatchResourceOutput
}

type XrayWatchResourceArgs struct {
	// The ID number of a binary manager resource
	BinMgrId pulumi.StringPtrInput `pulumi:"binMgrId"`
	// Nested argument describing filters to be applied. Defined below.
	Filters XrayWatchResourceFilterArrayInput `pulumi:"filters"`
	// A name describing the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Type of repository (e.g. local or remote)
	RepoType pulumi.StringPtrInput `pulumi:"repoType"`
	// Type of resource to be watched
	Type pulumi.StringInput `pulumi:"type"`
}

func (XrayWatchResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*XrayWatchResource)(nil)).Elem()
}

func (i XrayWatchResourceArgs) ToXrayWatchResourceOutput() XrayWatchResourceOutput {
	return i.ToXrayWatchResourceOutputWithContext(context.Background())
}

func (i XrayWatchResourceArgs) ToXrayWatchResourceOutputWithContext(ctx context.Context) XrayWatchResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XrayWatchResourceOutput)
}

// XrayWatchResourceArrayInput is an input type that accepts XrayWatchResourceArray and XrayWatchResourceArrayOutput values.
// You can construct a concrete instance of `XrayWatchResourceArrayInput` via:
//
//          XrayWatchResourceArray{ XrayWatchResourceArgs{...} }
type XrayWatchResourceArrayInput interface {
	pulumi.Input

	ToXrayWatchResourceArrayOutput() XrayWatchResourceArrayOutput
	ToXrayWatchResourceArrayOutputWithContext(context.Context) XrayWatchResourceArrayOutput
}

type XrayWatchResourceArray []XrayWatchResourceInput

func (XrayWatchResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]XrayWatchResource)(nil)).Elem()
}

func (i XrayWatchResourceArray) ToXrayWatchResourceArrayOutput() XrayWatchResourceArrayOutput {
	return i.ToXrayWatchResourceArrayOutputWithContext(context.Background())
}

func (i XrayWatchResourceArray) ToXrayWatchResourceArrayOutputWithContext(ctx context.Context) XrayWatchResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XrayWatchResourceArrayOutput)
}

type XrayWatchResourceOutput struct{ *pulumi.OutputState }

func (XrayWatchResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*XrayWatchResource)(nil)).Elem()
}

func (o XrayWatchResourceOutput) ToXrayWatchResourceOutput() XrayWatchResourceOutput {
	return o
}

func (o XrayWatchResourceOutput) ToXrayWatchResourceOutputWithContext(ctx context.Context) XrayWatchResourceOutput {
	return o
}

// The ID number of a binary manager resource
func (o XrayWatchResourceOutput) BinMgrId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v XrayWatchResource) *string { return v.BinMgrId }).(pulumi.StringPtrOutput)
}

// Nested argument describing filters to be applied. Defined below.
func (o XrayWatchResourceOutput) Filters() XrayWatchResourceFilterArrayOutput {
	return o.ApplyT(func(v XrayWatchResource) []XrayWatchResourceFilter { return v.Filters }).(XrayWatchResourceFilterArrayOutput)
}

// A name describing the resource
func (o XrayWatchResourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v XrayWatchResource) string { return v.Name }).(pulumi.StringOutput)
}

// Type of repository (e.g. local or remote)
func (o XrayWatchResourceOutput) RepoType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v XrayWatchResource) *string { return v.RepoType }).(pulumi.StringPtrOutput)
}

// Type of resource to be watched
func (o XrayWatchResourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v XrayWatchResource) string { return v.Type }).(pulumi.StringOutput)
}

type XrayWatchResourceArrayOutput struct{ *pulumi.OutputState }

func (XrayWatchResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]XrayWatchResource)(nil)).Elem()
}

func (o XrayWatchResourceArrayOutput) ToXrayWatchResourceArrayOutput() XrayWatchResourceArrayOutput {
	return o
}

func (o XrayWatchResourceArrayOutput) ToXrayWatchResourceArrayOutputWithContext(ctx context.Context) XrayWatchResourceArrayOutput {
	return o
}

func (o XrayWatchResourceArrayOutput) Index(i pulumi.IntInput) XrayWatchResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) XrayWatchResource {
		return vs[0].([]XrayWatchResource)[vs[1].(int)]
	}).(XrayWatchResourceOutput)
}

type XrayWatchResourceFilter struct {
	// The type of filter, such as `regex` or `package-type`
	Type string `pulumi:"type"`
	// The value of the filter, such as the text of the regex or name of the package type
	Value string `pulumi:"value"`
}

// XrayWatchResourceFilterInput is an input type that accepts XrayWatchResourceFilterArgs and XrayWatchResourceFilterOutput values.
// You can construct a concrete instance of `XrayWatchResourceFilterInput` via:
//
//          XrayWatchResourceFilterArgs{...}
type XrayWatchResourceFilterInput interface {
	pulumi.Input

	ToXrayWatchResourceFilterOutput() XrayWatchResourceFilterOutput
	ToXrayWatchResourceFilterOutputWithContext(context.Context) XrayWatchResourceFilterOutput
}

type XrayWatchResourceFilterArgs struct {
	// The type of filter, such as `regex` or `package-type`
	Type pulumi.StringInput `pulumi:"type"`
	// The value of the filter, such as the text of the regex or name of the package type
	Value pulumi.StringInput `pulumi:"value"`
}

func (XrayWatchResourceFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*XrayWatchResourceFilter)(nil)).Elem()
}

func (i XrayWatchResourceFilterArgs) ToXrayWatchResourceFilterOutput() XrayWatchResourceFilterOutput {
	return i.ToXrayWatchResourceFilterOutputWithContext(context.Background())
}

func (i XrayWatchResourceFilterArgs) ToXrayWatchResourceFilterOutputWithContext(ctx context.Context) XrayWatchResourceFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XrayWatchResourceFilterOutput)
}

// XrayWatchResourceFilterArrayInput is an input type that accepts XrayWatchResourceFilterArray and XrayWatchResourceFilterArrayOutput values.
// You can construct a concrete instance of `XrayWatchResourceFilterArrayInput` via:
//
//          XrayWatchResourceFilterArray{ XrayWatchResourceFilterArgs{...} }
type XrayWatchResourceFilterArrayInput interface {
	pulumi.Input

	ToXrayWatchResourceFilterArrayOutput() XrayWatchResourceFilterArrayOutput
	ToXrayWatchResourceFilterArrayOutputWithContext(context.Context) XrayWatchResourceFilterArrayOutput
}

type XrayWatchResourceFilterArray []XrayWatchResourceFilterInput

func (XrayWatchResourceFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]XrayWatchResourceFilter)(nil)).Elem()
}

func (i XrayWatchResourceFilterArray) ToXrayWatchResourceFilterArrayOutput() XrayWatchResourceFilterArrayOutput {
	return i.ToXrayWatchResourceFilterArrayOutputWithContext(context.Background())
}

func (i XrayWatchResourceFilterArray) ToXrayWatchResourceFilterArrayOutputWithContext(ctx context.Context) XrayWatchResourceFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XrayWatchResourceFilterArrayOutput)
}

type XrayWatchResourceFilterOutput struct{ *pulumi.OutputState }

func (XrayWatchResourceFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*XrayWatchResourceFilter)(nil)).Elem()
}

func (o XrayWatchResourceFilterOutput) ToXrayWatchResourceFilterOutput() XrayWatchResourceFilterOutput {
	return o
}

func (o XrayWatchResourceFilterOutput) ToXrayWatchResourceFilterOutputWithContext(ctx context.Context) XrayWatchResourceFilterOutput {
	return o
}

// The type of filter, such as `regex` or `package-type`
func (o XrayWatchResourceFilterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v XrayWatchResourceFilter) string { return v.Type }).(pulumi.StringOutput)
}

// The value of the filter, such as the text of the regex or name of the package type
func (o XrayWatchResourceFilterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v XrayWatchResourceFilter) string { return v.Value }).(pulumi.StringOutput)
}

type XrayWatchResourceFilterArrayOutput struct{ *pulumi.OutputState }

func (XrayWatchResourceFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]XrayWatchResourceFilter)(nil)).Elem()
}

func (o XrayWatchResourceFilterArrayOutput) ToXrayWatchResourceFilterArrayOutput() XrayWatchResourceFilterArrayOutput {
	return o
}

func (o XrayWatchResourceFilterArrayOutput) ToXrayWatchResourceFilterArrayOutputWithContext(ctx context.Context) XrayWatchResourceFilterArrayOutput {
	return o
}

func (o XrayWatchResourceFilterArrayOutput) Index(i pulumi.IntInput) XrayWatchResourceFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) XrayWatchResourceFilter {
		return vs[0].([]XrayWatchResourceFilter)[vs[1].(int)]
	}).(XrayWatchResourceFilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessTokenAdminTokenInput)(nil)).Elem(), AccessTokenAdminTokenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessTokenAdminTokenPtrInput)(nil)).Elem(), AccessTokenAdminTokenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedAlpineRepositoryMemberInput)(nil)).Elem(), FederatedAlpineRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedAlpineRepositoryMemberArrayInput)(nil)).Elem(), FederatedAlpineRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedBowerRepositoryMemberInput)(nil)).Elem(), FederatedBowerRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedBowerRepositoryMemberArrayInput)(nil)).Elem(), FederatedBowerRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedCargoRepositoryMemberInput)(nil)).Elem(), FederatedCargoRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedCargoRepositoryMemberArrayInput)(nil)).Elem(), FederatedCargoRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedChefRepositoryMemberInput)(nil)).Elem(), FederatedChefRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedChefRepositoryMemberArrayInput)(nil)).Elem(), FederatedChefRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedCocoapodsRepositoryMemberInput)(nil)).Elem(), FederatedCocoapodsRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedCocoapodsRepositoryMemberArrayInput)(nil)).Elem(), FederatedCocoapodsRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedComposerRepositoryMemberInput)(nil)).Elem(), FederatedComposerRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedComposerRepositoryMemberArrayInput)(nil)).Elem(), FederatedComposerRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedConanRepositoryMemberInput)(nil)).Elem(), FederatedConanRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedConanRepositoryMemberArrayInput)(nil)).Elem(), FederatedConanRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedCondaRepositoryMemberInput)(nil)).Elem(), FederatedCondaRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedCondaRepositoryMemberArrayInput)(nil)).Elem(), FederatedCondaRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedCranRepositoryMemberInput)(nil)).Elem(), FederatedCranRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedCranRepositoryMemberArrayInput)(nil)).Elem(), FederatedCranRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedDebianRepositoryMemberInput)(nil)).Elem(), FederatedDebianRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedDebianRepositoryMemberArrayInput)(nil)).Elem(), FederatedDebianRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedDockerRepositoryMemberInput)(nil)).Elem(), FederatedDockerRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedDockerRepositoryMemberArrayInput)(nil)).Elem(), FederatedDockerRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedGemsRepositoryMemberInput)(nil)).Elem(), FederatedGemsRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedGemsRepositoryMemberArrayInput)(nil)).Elem(), FederatedGemsRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedGenericRepositoryMemberInput)(nil)).Elem(), FederatedGenericRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedGenericRepositoryMemberArrayInput)(nil)).Elem(), FederatedGenericRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedGitltfsRepositoryMemberInput)(nil)).Elem(), FederatedGitltfsRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedGitltfsRepositoryMemberArrayInput)(nil)).Elem(), FederatedGitltfsRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedGoRepositoryMemberInput)(nil)).Elem(), FederatedGoRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedGoRepositoryMemberArrayInput)(nil)).Elem(), FederatedGoRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedGradleRepositoryMemberInput)(nil)).Elem(), FederatedGradleRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedGradleRepositoryMemberArrayInput)(nil)).Elem(), FederatedGradleRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedHelmRepositoryMemberInput)(nil)).Elem(), FederatedHelmRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedHelmRepositoryMemberArrayInput)(nil)).Elem(), FederatedHelmRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedIvyRepositoryMemberInput)(nil)).Elem(), FederatedIvyRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedIvyRepositoryMemberArrayInput)(nil)).Elem(), FederatedIvyRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedMavenRepositoryMemberInput)(nil)).Elem(), FederatedMavenRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedMavenRepositoryMemberArrayInput)(nil)).Elem(), FederatedMavenRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedNpmRepositoryMemberInput)(nil)).Elem(), FederatedNpmRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedNpmRepositoryMemberArrayInput)(nil)).Elem(), FederatedNpmRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedNugetRepositoryMemberInput)(nil)).Elem(), FederatedNugetRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedNugetRepositoryMemberArrayInput)(nil)).Elem(), FederatedNugetRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedOpkgRepositoryMemberInput)(nil)).Elem(), FederatedOpkgRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedOpkgRepositoryMemberArrayInput)(nil)).Elem(), FederatedOpkgRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedPuppetRepositoryMemberInput)(nil)).Elem(), FederatedPuppetRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedPuppetRepositoryMemberArrayInput)(nil)).Elem(), FederatedPuppetRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedPypiRepositoryMemberInput)(nil)).Elem(), FederatedPypiRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedPypiRepositoryMemberArrayInput)(nil)).Elem(), FederatedPypiRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedRpmRepositoryMemberInput)(nil)).Elem(), FederatedRpmRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedRpmRepositoryMemberArrayInput)(nil)).Elem(), FederatedRpmRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedSbtRepositoryMemberInput)(nil)).Elem(), FederatedSbtRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedSbtRepositoryMemberArrayInput)(nil)).Elem(), FederatedSbtRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedVagrantRepositoryMemberInput)(nil)).Elem(), FederatedVagrantRepositoryMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedVagrantRepositoryMemberArrayInput)(nil)).Elem(), FederatedVagrantRepositoryMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OauthSettingsOauthProviderInput)(nil)).Elem(), OauthSettingsOauthProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OauthSettingsOauthProviderArrayInput)(nil)).Elem(), OauthSettingsOauthProviderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetBuildInput)(nil)).Elem(), PermissionTargetBuildArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetBuildPtrInput)(nil)).Elem(), PermissionTargetBuildArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetBuildActionsInput)(nil)).Elem(), PermissionTargetBuildActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetBuildActionsPtrInput)(nil)).Elem(), PermissionTargetBuildActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetBuildActionsGroupInput)(nil)).Elem(), PermissionTargetBuildActionsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetBuildActionsGroupArrayInput)(nil)).Elem(), PermissionTargetBuildActionsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetBuildActionsUserInput)(nil)).Elem(), PermissionTargetBuildActionsUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetBuildActionsUserArrayInput)(nil)).Elem(), PermissionTargetBuildActionsUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetReleaseBundleInput)(nil)).Elem(), PermissionTargetReleaseBundleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetReleaseBundlePtrInput)(nil)).Elem(), PermissionTargetReleaseBundleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetReleaseBundleActionsInput)(nil)).Elem(), PermissionTargetReleaseBundleActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetReleaseBundleActionsPtrInput)(nil)).Elem(), PermissionTargetReleaseBundleActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetReleaseBundleActionsGroupInput)(nil)).Elem(), PermissionTargetReleaseBundleActionsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetReleaseBundleActionsGroupArrayInput)(nil)).Elem(), PermissionTargetReleaseBundleActionsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetReleaseBundleActionsUserInput)(nil)).Elem(), PermissionTargetReleaseBundleActionsUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetReleaseBundleActionsUserArrayInput)(nil)).Elem(), PermissionTargetReleaseBundleActionsUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetRepoInput)(nil)).Elem(), PermissionTargetRepoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetRepoPtrInput)(nil)).Elem(), PermissionTargetRepoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetRepoActionsInput)(nil)).Elem(), PermissionTargetRepoActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetRepoActionsPtrInput)(nil)).Elem(), PermissionTargetRepoActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetRepoActionsGroupInput)(nil)).Elem(), PermissionTargetRepoActionsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetRepoActionsGroupArrayInput)(nil)).Elem(), PermissionTargetRepoActionsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetRepoActionsUserInput)(nil)).Elem(), PermissionTargetRepoActionsUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetRepoActionsUserArrayInput)(nil)).Elem(), PermissionTargetRepoActionsUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsBuildInput)(nil)).Elem(), PermissionTargetsBuildArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsBuildPtrInput)(nil)).Elem(), PermissionTargetsBuildArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsBuildActionsInput)(nil)).Elem(), PermissionTargetsBuildActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsBuildActionsPtrInput)(nil)).Elem(), PermissionTargetsBuildActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsBuildActionsGroupInput)(nil)).Elem(), PermissionTargetsBuildActionsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsBuildActionsGroupArrayInput)(nil)).Elem(), PermissionTargetsBuildActionsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsBuildActionsUserInput)(nil)).Elem(), PermissionTargetsBuildActionsUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsBuildActionsUserArrayInput)(nil)).Elem(), PermissionTargetsBuildActionsUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsReleaseBundleInput)(nil)).Elem(), PermissionTargetsReleaseBundleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsReleaseBundlePtrInput)(nil)).Elem(), PermissionTargetsReleaseBundleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsReleaseBundleActionsInput)(nil)).Elem(), PermissionTargetsReleaseBundleActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsReleaseBundleActionsPtrInput)(nil)).Elem(), PermissionTargetsReleaseBundleActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsReleaseBundleActionsGroupInput)(nil)).Elem(), PermissionTargetsReleaseBundleActionsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsReleaseBundleActionsGroupArrayInput)(nil)).Elem(), PermissionTargetsReleaseBundleActionsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsReleaseBundleActionsUserInput)(nil)).Elem(), PermissionTargetsReleaseBundleActionsUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsReleaseBundleActionsUserArrayInput)(nil)).Elem(), PermissionTargetsReleaseBundleActionsUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsRepoInput)(nil)).Elem(), PermissionTargetsRepoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsRepoPtrInput)(nil)).Elem(), PermissionTargetsRepoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsRepoActionsInput)(nil)).Elem(), PermissionTargetsRepoActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsRepoActionsPtrInput)(nil)).Elem(), PermissionTargetsRepoActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsRepoActionsGroupInput)(nil)).Elem(), PermissionTargetsRepoActionsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsRepoActionsGroupArrayInput)(nil)).Elem(), PermissionTargetsRepoActionsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsRepoActionsUserInput)(nil)).Elem(), PermissionTargetsRepoActionsUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionTargetsRepoActionsUserArrayInput)(nil)).Elem(), PermissionTargetsRepoActionsUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PushReplicationReplicationInput)(nil)).Elem(), PushReplicationReplicationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PushReplicationReplicationArrayInput)(nil)).Elem(), PushReplicationReplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteCargoRepositoryContentSynchronisationInput)(nil)).Elem(), RemoteCargoRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteCargoRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemoteCargoRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteDockerRepositoryContentSynchronisationInput)(nil)).Elem(), RemoteDockerRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteDockerRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemoteDockerRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteHelmRepositoryContentSynchronisationInput)(nil)).Elem(), RemoteHelmRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteHelmRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemoteHelmRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteNpmRepositoryContentSynchronisationInput)(nil)).Elem(), RemoteNpmRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteNpmRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemoteNpmRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemotePypiRepositoryContentSynchronisationInput)(nil)).Elem(), RemotePypiRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemotePypiRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemotePypiRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteRepositoryContentSynchronisationInput)(nil)).Elem(), RemoteRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteRepositoryContentSynchronisationPtrInput)(nil)).Elem(), RemoteRepositoryContentSynchronisationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationConfigReplicationInput)(nil)).Elem(), ReplicationConfigReplicationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationConfigReplicationArrayInput)(nil)).Elem(), ReplicationConfigReplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*XrayPolicyRuleInput)(nil)).Elem(), XrayPolicyRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*XrayPolicyRuleArrayInput)(nil)).Elem(), XrayPolicyRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*XrayPolicyRuleActionsInput)(nil)).Elem(), XrayPolicyRuleActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*XrayPolicyRuleActionsPtrInput)(nil)).Elem(), XrayPolicyRuleActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*XrayPolicyRuleActionsBlockDownloadInput)(nil)).Elem(), XrayPolicyRuleActionsBlockDownloadArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*XrayPolicyRuleActionsBlockDownloadPtrInput)(nil)).Elem(), XrayPolicyRuleActionsBlockDownloadArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*XrayPolicyRuleCriteriaInput)(nil)).Elem(), XrayPolicyRuleCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*XrayPolicyRuleCriteriaCvssRangeInput)(nil)).Elem(), XrayPolicyRuleCriteriaCvssRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*XrayPolicyRuleCriteriaCvssRangePtrInput)(nil)).Elem(), XrayPolicyRuleCriteriaCvssRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*XrayWatchAssignedPolicyInput)(nil)).Elem(), XrayWatchAssignedPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*XrayWatchAssignedPolicyArrayInput)(nil)).Elem(), XrayWatchAssignedPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*XrayWatchResourceInput)(nil)).Elem(), XrayWatchResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*XrayWatchResourceArrayInput)(nil)).Elem(), XrayWatchResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*XrayWatchResourceFilterInput)(nil)).Elem(), XrayWatchResourceFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*XrayWatchResourceFilterArrayInput)(nil)).Elem(), XrayWatchResourceFilterArray{})
	pulumi.RegisterOutputType(AccessTokenAdminTokenOutput{})
	pulumi.RegisterOutputType(AccessTokenAdminTokenPtrOutput{})
	pulumi.RegisterOutputType(FederatedAlpineRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedAlpineRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedBowerRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedBowerRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedCargoRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedCargoRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedChefRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedChefRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedCocoapodsRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedCocoapodsRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedComposerRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedComposerRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedConanRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedConanRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedCondaRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedCondaRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedCranRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedCranRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedDebianRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedDebianRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedDockerRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedDockerRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedGemsRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedGemsRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedGenericRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedGenericRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedGitltfsRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedGitltfsRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedGoRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedGoRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedGradleRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedGradleRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedHelmRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedHelmRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedIvyRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedIvyRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedMavenRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedMavenRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedNpmRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedNpmRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedNugetRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedNugetRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedOpkgRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedOpkgRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedPuppetRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedPuppetRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedPypiRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedPypiRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedRpmRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedRpmRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedSbtRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedSbtRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(FederatedVagrantRepositoryMemberOutput{})
	pulumi.RegisterOutputType(FederatedVagrantRepositoryMemberArrayOutput{})
	pulumi.RegisterOutputType(OauthSettingsOauthProviderOutput{})
	pulumi.RegisterOutputType(OauthSettingsOauthProviderArrayOutput{})
	pulumi.RegisterOutputType(PermissionTargetBuildOutput{})
	pulumi.RegisterOutputType(PermissionTargetBuildPtrOutput{})
	pulumi.RegisterOutputType(PermissionTargetBuildActionsOutput{})
	pulumi.RegisterOutputType(PermissionTargetBuildActionsPtrOutput{})
	pulumi.RegisterOutputType(PermissionTargetBuildActionsGroupOutput{})
	pulumi.RegisterOutputType(PermissionTargetBuildActionsGroupArrayOutput{})
	pulumi.RegisterOutputType(PermissionTargetBuildActionsUserOutput{})
	pulumi.RegisterOutputType(PermissionTargetBuildActionsUserArrayOutput{})
	pulumi.RegisterOutputType(PermissionTargetReleaseBundleOutput{})
	pulumi.RegisterOutputType(PermissionTargetReleaseBundlePtrOutput{})
	pulumi.RegisterOutputType(PermissionTargetReleaseBundleActionsOutput{})
	pulumi.RegisterOutputType(PermissionTargetReleaseBundleActionsPtrOutput{})
	pulumi.RegisterOutputType(PermissionTargetReleaseBundleActionsGroupOutput{})
	pulumi.RegisterOutputType(PermissionTargetReleaseBundleActionsGroupArrayOutput{})
	pulumi.RegisterOutputType(PermissionTargetReleaseBundleActionsUserOutput{})
	pulumi.RegisterOutputType(PermissionTargetReleaseBundleActionsUserArrayOutput{})
	pulumi.RegisterOutputType(PermissionTargetRepoOutput{})
	pulumi.RegisterOutputType(PermissionTargetRepoPtrOutput{})
	pulumi.RegisterOutputType(PermissionTargetRepoActionsOutput{})
	pulumi.RegisterOutputType(PermissionTargetRepoActionsPtrOutput{})
	pulumi.RegisterOutputType(PermissionTargetRepoActionsGroupOutput{})
	pulumi.RegisterOutputType(PermissionTargetRepoActionsGroupArrayOutput{})
	pulumi.RegisterOutputType(PermissionTargetRepoActionsUserOutput{})
	pulumi.RegisterOutputType(PermissionTargetRepoActionsUserArrayOutput{})
	pulumi.RegisterOutputType(PermissionTargetsBuildOutput{})
	pulumi.RegisterOutputType(PermissionTargetsBuildPtrOutput{})
	pulumi.RegisterOutputType(PermissionTargetsBuildActionsOutput{})
	pulumi.RegisterOutputType(PermissionTargetsBuildActionsPtrOutput{})
	pulumi.RegisterOutputType(PermissionTargetsBuildActionsGroupOutput{})
	pulumi.RegisterOutputType(PermissionTargetsBuildActionsGroupArrayOutput{})
	pulumi.RegisterOutputType(PermissionTargetsBuildActionsUserOutput{})
	pulumi.RegisterOutputType(PermissionTargetsBuildActionsUserArrayOutput{})
	pulumi.RegisterOutputType(PermissionTargetsReleaseBundleOutput{})
	pulumi.RegisterOutputType(PermissionTargetsReleaseBundlePtrOutput{})
	pulumi.RegisterOutputType(PermissionTargetsReleaseBundleActionsOutput{})
	pulumi.RegisterOutputType(PermissionTargetsReleaseBundleActionsPtrOutput{})
	pulumi.RegisterOutputType(PermissionTargetsReleaseBundleActionsGroupOutput{})
	pulumi.RegisterOutputType(PermissionTargetsReleaseBundleActionsGroupArrayOutput{})
	pulumi.RegisterOutputType(PermissionTargetsReleaseBundleActionsUserOutput{})
	pulumi.RegisterOutputType(PermissionTargetsReleaseBundleActionsUserArrayOutput{})
	pulumi.RegisterOutputType(PermissionTargetsRepoOutput{})
	pulumi.RegisterOutputType(PermissionTargetsRepoPtrOutput{})
	pulumi.RegisterOutputType(PermissionTargetsRepoActionsOutput{})
	pulumi.RegisterOutputType(PermissionTargetsRepoActionsPtrOutput{})
	pulumi.RegisterOutputType(PermissionTargetsRepoActionsGroupOutput{})
	pulumi.RegisterOutputType(PermissionTargetsRepoActionsGroupArrayOutput{})
	pulumi.RegisterOutputType(PermissionTargetsRepoActionsUserOutput{})
	pulumi.RegisterOutputType(PermissionTargetsRepoActionsUserArrayOutput{})
	pulumi.RegisterOutputType(PushReplicationReplicationOutput{})
	pulumi.RegisterOutputType(PushReplicationReplicationArrayOutput{})
	pulumi.RegisterOutputType(RemoteCargoRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemoteCargoRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(RemoteDockerRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemoteDockerRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(RemoteHelmRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemoteHelmRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(RemoteNpmRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemoteNpmRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(RemotePypiRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemotePypiRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(RemoteRepositoryContentSynchronisationOutput{})
	pulumi.RegisterOutputType(RemoteRepositoryContentSynchronisationPtrOutput{})
	pulumi.RegisterOutputType(ReplicationConfigReplicationOutput{})
	pulumi.RegisterOutputType(ReplicationConfigReplicationArrayOutput{})
	pulumi.RegisterOutputType(XrayPolicyRuleOutput{})
	pulumi.RegisterOutputType(XrayPolicyRuleArrayOutput{})
	pulumi.RegisterOutputType(XrayPolicyRuleActionsOutput{})
	pulumi.RegisterOutputType(XrayPolicyRuleActionsPtrOutput{})
	pulumi.RegisterOutputType(XrayPolicyRuleActionsBlockDownloadOutput{})
	pulumi.RegisterOutputType(XrayPolicyRuleActionsBlockDownloadPtrOutput{})
	pulumi.RegisterOutputType(XrayPolicyRuleCriteriaOutput{})
	pulumi.RegisterOutputType(XrayPolicyRuleCriteriaCvssRangeOutput{})
	pulumi.RegisterOutputType(XrayPolicyRuleCriteriaCvssRangePtrOutput{})
	pulumi.RegisterOutputType(XrayWatchAssignedPolicyOutput{})
	pulumi.RegisterOutputType(XrayWatchAssignedPolicyArrayOutput{})
	pulumi.RegisterOutputType(XrayWatchResourceOutput{})
	pulumi.RegisterOutputType(XrayWatchResourceArrayOutput{})
	pulumi.RegisterOutputType(XrayWatchResourceFilterOutput{})
	pulumi.RegisterOutputType(XrayWatchResourceFilterArrayOutput{})
}
