// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-artifactory/sdk/v8/go/artifactory/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource for deploying artifact to Artifactory repository. Support deploying a single artifact only. Changes to `repository` or `path` attributes will trigger a recreation of the resource (i.e. delete then create). See [JFrog documentation](https://jfrog.com/help/r/jfrog-artifactory-documentation/deploy-a-single-artifact) for more details.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-artifactory/sdk/v8/go/artifactory"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := artifactory.NewArtifact(ctx, "my-artifact", &artifactory.ArtifactArgs{
//				Repository: pulumi.String("my-generic-local"),
//				Path:       pulumi.String("/my-path/my-file.zip"),
//				FilePath:   pulumi.String("/path/to/my-file.zip"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = artifactory.NewArtifact(ctx, "my-base64-artifact", &artifactory.ArtifactArgs{
//				Repository:    pulumi.String("my-generic-local"),
//				Path:          pulumi.String("/my-path/my-file.zip"),
//				ContentBase64: pulumi.String("UEsDBAoAAAAAALl8alQAAAAAAAAAAAAAAAAJAAAATUVUQS1JTkYvUEsDBAoAAAAIALh8alTmUEsubQAAAIMAAAAUAAAATUVUQS1JTkYvTUFOSUZFU1QuTUbzTczLTEstLtENSy0qzszPs1Iw1DPg5XIsSs7ILEstQggH5KRWlBYrwCR4uZyLUhNLUlN0nSqtFBwLEpMzUhV8E8tS8xSM9cz0jHm5nEozc0rAsilAO1JzcjMhYim6XinZQGuA9uiZ83LxcgEAUEsDBAoAAAAAALh8alQAAAAAAAAAAAAAAAAMAAAAYXJ0aWZhY3RvcnkvUEsDBAoAAAAAALh8alQAAAAAAAAAAAAAAAARAAAAYXJ0aWZhY3RvcnkvdGVzdC9QSwMECgAAAAgAuHxqVMgzPcxdAQAALAIAAB0AAABhcnRpZmFjdG9yeS90ZXN0L011bHRpMS5jbGFzc3VRy07CQBQ9w6OlpQqCgPgEV+jCxsTEBcaNiXFRHwkGF66GOuKQPkyZmvBZutDEhR/gRxlvCwkxwVnck3vunXPPnfn++fwCcIRdExpWDdRQL6BhYg1NHes6Nhi0ExlIdcqQ7ez1GXJn4YNgKDkyEFexPxDRLR94xFSc0OVen0cyyWdkTj3JMUPT4ZGSj9xVYTSxlRgr+zL2lDzsUovPZcBQ79w7I/7CbY8HQ7unIhkMu+lAHg1JorqgzGD2wjhyxblMhhWnmgdJnwUdBR2bFrawzWBdCM8LW3dh5D20dexYaKHN0PjHFkN5Pux6MBKu+kP1JmMlfHqSMKZCbepMhvYN2VJkTnCfzFUX0Az6c5J5tHKts2hjtJGnz0hOBixZg6JBmU3ICPP7H2CvadmkqKWkhiJFa9pAuERoYBml2eXjVIy4N2Qq2Xfk5gImIWhKgRrnIgbKWCGkj007q79QSwECFAMKAAAAAAC5fGpUAAAAAAAAAAAAAAAACQAAAAAAAAAAABAA7UEAAAAATUVUQS1JTkYvUEsBAhQDCgAAAAgAuHxqVOZQSy5tAAAAgwAAABQAAAAAAAAAAAAAAKSBJwAAAE1FVEEtSU5GL01BTklGRVNULk1GUEsBAhQDCgAAAAAAuHxqVAAAAAAAAAAAAAAAAAwAAAAAAAAAAAAQAO1BxgAAAGFydGlmYWN0b3J5L1BLAQIUAwoAAAAAALh8alQAAAAAAAAAAAAAAAARAAAAAAAAAAAAEADtQfAAAABhcnRpZmFjdG9yeS90ZXN0L1BLAQIUAwoAAAAIALh8alTIMz3MXQEAACwCAAAdAAAAAAAAAAAAAACkgR8BAABhcnRpZmFjdG9yeS90ZXN0L011bHRpMS5jbGFzc1BLBQYAAAAABQAFAD0BAAC3AgAAAAA="),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Artifact struct {
	pulumi.CustomResourceState

	// MD5 checksum of the artifact.
	ChecksumMd5 pulumi.StringOutput `pulumi:"checksumMd5"`
	// SHA1 checksum of the artifact.
	ChecksumSha1 pulumi.StringOutput `pulumi:"checksumSha1"`
	// SHA256 checksum of the artifact.
	ChecksumSha256 pulumi.StringOutput `pulumi:"checksumSha256"`
	// Base64 content of the source file. Conflicts with `filePath`. Either one of these attribute must be set.
	ContentBase64 pulumi.StringPtrOutput `pulumi:"contentBase64"`
	// Timestamp when artifact is created.
	Created pulumi.StringOutput `pulumi:"created"`
	// User who deploys the artifact.
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// Download URI of the artifact.
	DownloadUri pulumi.StringOutput `pulumi:"downloadUri"`
	// Path to the source file. Conflicts with `contentBase64`. Either one of these attribute must be set.
	FilePath pulumi.StringPtrOutput `pulumi:"filePath"`
	// MIME type of the artifact.
	MimeType pulumi.StringOutput `pulumi:"mimeType"`
	// The relative path in the target repository. Must begin with a '/'. You can add key-value matrix parameters to deploy the artifacts with properties. For more details, please refer to [Introducing Matrix Parameters](https://jfrog.com/help/r/jfrog-artifactory-documentation/using-properties-in-deployment-and-resolution).
	Path pulumi.StringOutput `pulumi:"path"`
	// Name of the respository.
	Repository pulumi.StringOutput `pulumi:"repository"`
	// Size of the artifact, in bytes.
	Size pulumi.IntOutput `pulumi:"size"`
	// URI of the artifact.
	Uri pulumi.StringOutput `pulumi:"uri"`
}

// NewArtifact registers a new resource with the given unique name, arguments, and options.
func NewArtifact(ctx *pulumi.Context,
	name string, args *ArtifactArgs, opts ...pulumi.ResourceOption) (*Artifact, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Artifact
	err := ctx.RegisterResource("artifactory:index/artifact:Artifact", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetArtifact gets an existing Artifact resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetArtifact(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ArtifactState, opts ...pulumi.ResourceOption) (*Artifact, error) {
	var resource Artifact
	err := ctx.ReadResource("artifactory:index/artifact:Artifact", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Artifact resources.
type artifactState struct {
	// MD5 checksum of the artifact.
	ChecksumMd5 *string `pulumi:"checksumMd5"`
	// SHA1 checksum of the artifact.
	ChecksumSha1 *string `pulumi:"checksumSha1"`
	// SHA256 checksum of the artifact.
	ChecksumSha256 *string `pulumi:"checksumSha256"`
	// Base64 content of the source file. Conflicts with `filePath`. Either one of these attribute must be set.
	ContentBase64 *string `pulumi:"contentBase64"`
	// Timestamp when artifact is created.
	Created *string `pulumi:"created"`
	// User who deploys the artifact.
	CreatedBy *string `pulumi:"createdBy"`
	// Download URI of the artifact.
	DownloadUri *string `pulumi:"downloadUri"`
	// Path to the source file. Conflicts with `contentBase64`. Either one of these attribute must be set.
	FilePath *string `pulumi:"filePath"`
	// MIME type of the artifact.
	MimeType *string `pulumi:"mimeType"`
	// The relative path in the target repository. Must begin with a '/'. You can add key-value matrix parameters to deploy the artifacts with properties. For more details, please refer to [Introducing Matrix Parameters](https://jfrog.com/help/r/jfrog-artifactory-documentation/using-properties-in-deployment-and-resolution).
	Path *string `pulumi:"path"`
	// Name of the respository.
	Repository *string `pulumi:"repository"`
	// Size of the artifact, in bytes.
	Size *int `pulumi:"size"`
	// URI of the artifact.
	Uri *string `pulumi:"uri"`
}

type ArtifactState struct {
	// MD5 checksum of the artifact.
	ChecksumMd5 pulumi.StringPtrInput
	// SHA1 checksum of the artifact.
	ChecksumSha1 pulumi.StringPtrInput
	// SHA256 checksum of the artifact.
	ChecksumSha256 pulumi.StringPtrInput
	// Base64 content of the source file. Conflicts with `filePath`. Either one of these attribute must be set.
	ContentBase64 pulumi.StringPtrInput
	// Timestamp when artifact is created.
	Created pulumi.StringPtrInput
	// User who deploys the artifact.
	CreatedBy pulumi.StringPtrInput
	// Download URI of the artifact.
	DownloadUri pulumi.StringPtrInput
	// Path to the source file. Conflicts with `contentBase64`. Either one of these attribute must be set.
	FilePath pulumi.StringPtrInput
	// MIME type of the artifact.
	MimeType pulumi.StringPtrInput
	// The relative path in the target repository. Must begin with a '/'. You can add key-value matrix parameters to deploy the artifacts with properties. For more details, please refer to [Introducing Matrix Parameters](https://jfrog.com/help/r/jfrog-artifactory-documentation/using-properties-in-deployment-and-resolution).
	Path pulumi.StringPtrInput
	// Name of the respository.
	Repository pulumi.StringPtrInput
	// Size of the artifact, in bytes.
	Size pulumi.IntPtrInput
	// URI of the artifact.
	Uri pulumi.StringPtrInput
}

func (ArtifactState) ElementType() reflect.Type {
	return reflect.TypeOf((*artifactState)(nil)).Elem()
}

type artifactArgs struct {
	// Base64 content of the source file. Conflicts with `filePath`. Either one of these attribute must be set.
	ContentBase64 *string `pulumi:"contentBase64"`
	// Path to the source file. Conflicts with `contentBase64`. Either one of these attribute must be set.
	FilePath *string `pulumi:"filePath"`
	// The relative path in the target repository. Must begin with a '/'. You can add key-value matrix parameters to deploy the artifacts with properties. For more details, please refer to [Introducing Matrix Parameters](https://jfrog.com/help/r/jfrog-artifactory-documentation/using-properties-in-deployment-and-resolution).
	Path string `pulumi:"path"`
	// Name of the respository.
	Repository string `pulumi:"repository"`
}

// The set of arguments for constructing a Artifact resource.
type ArtifactArgs struct {
	// Base64 content of the source file. Conflicts with `filePath`. Either one of these attribute must be set.
	ContentBase64 pulumi.StringPtrInput
	// Path to the source file. Conflicts with `contentBase64`. Either one of these attribute must be set.
	FilePath pulumi.StringPtrInput
	// The relative path in the target repository. Must begin with a '/'. You can add key-value matrix parameters to deploy the artifacts with properties. For more details, please refer to [Introducing Matrix Parameters](https://jfrog.com/help/r/jfrog-artifactory-documentation/using-properties-in-deployment-and-resolution).
	Path pulumi.StringInput
	// Name of the respository.
	Repository pulumi.StringInput
}

func (ArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*artifactArgs)(nil)).Elem()
}

type ArtifactInput interface {
	pulumi.Input

	ToArtifactOutput() ArtifactOutput
	ToArtifactOutputWithContext(ctx context.Context) ArtifactOutput
}

func (*Artifact) ElementType() reflect.Type {
	return reflect.TypeOf((**Artifact)(nil)).Elem()
}

func (i *Artifact) ToArtifactOutput() ArtifactOutput {
	return i.ToArtifactOutputWithContext(context.Background())
}

func (i *Artifact) ToArtifactOutputWithContext(ctx context.Context) ArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactOutput)
}

// ArtifactArrayInput is an input type that accepts ArtifactArray and ArtifactArrayOutput values.
// You can construct a concrete instance of `ArtifactArrayInput` via:
//
//	ArtifactArray{ ArtifactArgs{...} }
type ArtifactArrayInput interface {
	pulumi.Input

	ToArtifactArrayOutput() ArtifactArrayOutput
	ToArtifactArrayOutputWithContext(context.Context) ArtifactArrayOutput
}

type ArtifactArray []ArtifactInput

func (ArtifactArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Artifact)(nil)).Elem()
}

func (i ArtifactArray) ToArtifactArrayOutput() ArtifactArrayOutput {
	return i.ToArtifactArrayOutputWithContext(context.Background())
}

func (i ArtifactArray) ToArtifactArrayOutputWithContext(ctx context.Context) ArtifactArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactArrayOutput)
}

// ArtifactMapInput is an input type that accepts ArtifactMap and ArtifactMapOutput values.
// You can construct a concrete instance of `ArtifactMapInput` via:
//
//	ArtifactMap{ "key": ArtifactArgs{...} }
type ArtifactMapInput interface {
	pulumi.Input

	ToArtifactMapOutput() ArtifactMapOutput
	ToArtifactMapOutputWithContext(context.Context) ArtifactMapOutput
}

type ArtifactMap map[string]ArtifactInput

func (ArtifactMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Artifact)(nil)).Elem()
}

func (i ArtifactMap) ToArtifactMapOutput() ArtifactMapOutput {
	return i.ToArtifactMapOutputWithContext(context.Background())
}

func (i ArtifactMap) ToArtifactMapOutputWithContext(ctx context.Context) ArtifactMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactMapOutput)
}

type ArtifactOutput struct{ *pulumi.OutputState }

func (ArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Artifact)(nil)).Elem()
}

func (o ArtifactOutput) ToArtifactOutput() ArtifactOutput {
	return o
}

func (o ArtifactOutput) ToArtifactOutputWithContext(ctx context.Context) ArtifactOutput {
	return o
}

// MD5 checksum of the artifact.
func (o ArtifactOutput) ChecksumMd5() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringOutput { return v.ChecksumMd5 }).(pulumi.StringOutput)
}

// SHA1 checksum of the artifact.
func (o ArtifactOutput) ChecksumSha1() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringOutput { return v.ChecksumSha1 }).(pulumi.StringOutput)
}

// SHA256 checksum of the artifact.
func (o ArtifactOutput) ChecksumSha256() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringOutput { return v.ChecksumSha256 }).(pulumi.StringOutput)
}

// Base64 content of the source file. Conflicts with `filePath`. Either one of these attribute must be set.
func (o ArtifactOutput) ContentBase64() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringPtrOutput { return v.ContentBase64 }).(pulumi.StringPtrOutput)
}

// Timestamp when artifact is created.
func (o ArtifactOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

// User who deploys the artifact.
func (o ArtifactOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// Download URI of the artifact.
func (o ArtifactOutput) DownloadUri() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringOutput { return v.DownloadUri }).(pulumi.StringOutput)
}

// Path to the source file. Conflicts with `contentBase64`. Either one of these attribute must be set.
func (o ArtifactOutput) FilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringPtrOutput { return v.FilePath }).(pulumi.StringPtrOutput)
}

// MIME type of the artifact.
func (o ArtifactOutput) MimeType() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringOutput { return v.MimeType }).(pulumi.StringOutput)
}

// The relative path in the target repository. Must begin with a '/'. You can add key-value matrix parameters to deploy the artifacts with properties. For more details, please refer to [Introducing Matrix Parameters](https://jfrog.com/help/r/jfrog-artifactory-documentation/using-properties-in-deployment-and-resolution).
func (o ArtifactOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

// Name of the respository.
func (o ArtifactOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringOutput { return v.Repository }).(pulumi.StringOutput)
}

// Size of the artifact, in bytes.
func (o ArtifactOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *Artifact) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// URI of the artifact.
func (o ArtifactOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringOutput { return v.Uri }).(pulumi.StringOutput)
}

type ArtifactArrayOutput struct{ *pulumi.OutputState }

func (ArtifactArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Artifact)(nil)).Elem()
}

func (o ArtifactArrayOutput) ToArtifactArrayOutput() ArtifactArrayOutput {
	return o
}

func (o ArtifactArrayOutput) ToArtifactArrayOutputWithContext(ctx context.Context) ArtifactArrayOutput {
	return o
}

func (o ArtifactArrayOutput) Index(i pulumi.IntInput) ArtifactOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Artifact {
		return vs[0].([]*Artifact)[vs[1].(int)]
	}).(ArtifactOutput)
}

type ArtifactMapOutput struct{ *pulumi.OutputState }

func (ArtifactMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Artifact)(nil)).Elem()
}

func (o ArtifactMapOutput) ToArtifactMapOutput() ArtifactMapOutput {
	return o
}

func (o ArtifactMapOutput) ToArtifactMapOutputWithContext(ctx context.Context) ArtifactMapOutput {
	return o
}

func (o ArtifactMapOutput) MapIndex(k pulumi.StringInput) ArtifactOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Artifact {
		return vs[0].(map[string]*Artifact)[vs[1].(string)]
	}).(ArtifactOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactInput)(nil)).Elem(), &Artifact{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactArrayInput)(nil)).Elem(), ArtifactArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactMapInput)(nil)).Elem(), ArtifactMap{})
	pulumi.RegisterOutputType(ArtifactOutput{})
	pulumi.RegisterOutputType(ArtifactArrayOutput{})
	pulumi.RegisterOutputType(ArtifactMapOutput{})
}
