// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-artifactory/sdk/v6/go/artifactory/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Artifactory Password Expiration Policy resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-artifactory/sdk/v6/go/artifactory"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := artifactory.NewPasswordExpirationPolicy(ctx, "my-password-expiration-policy", &artifactory.PasswordExpirationPolicyArgs{
//				Enabled:        pulumi.Bool(true),
//				NotifyByEmail:  pulumi.Bool(true),
//				PasswordMaxAge: pulumi.Int(120),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import artifactory:index/passwordExpirationPolicy:PasswordExpirationPolicy my-password-expiration-policy my-password-expiration-policy
// ```
type PasswordExpirationPolicy struct {
	pulumi.CustomResourceState

	// Enable Password Expiration Policy. This only applies to internal user passwords.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Name of the resource. Only used for importing.
	Name pulumi.StringOutput `pulumi:"name"`
	// Send mail notification before password expiration. Users will receive an email notification X days before password will expire. Mail server must be enabled and configured correctly.
	NotifyByEmail pulumi.BoolOutput `pulumi:"notifyByEmail"`
	// Password expires every N days. The time interval in which users will be obligated to change their password.
	PasswordMaxAge pulumi.IntOutput `pulumi:"passwordMaxAge"`
}

// NewPasswordExpirationPolicy registers a new resource with the given unique name, arguments, and options.
func NewPasswordExpirationPolicy(ctx *pulumi.Context,
	name string, args *PasswordExpirationPolicyArgs, opts ...pulumi.ResourceOption) (*PasswordExpirationPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.NotifyByEmail == nil {
		return nil, errors.New("invalid value for required argument 'NotifyByEmail'")
	}
	if args.PasswordMaxAge == nil {
		return nil, errors.New("invalid value for required argument 'PasswordMaxAge'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PasswordExpirationPolicy
	err := ctx.RegisterResource("artifactory:index/passwordExpirationPolicy:PasswordExpirationPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPasswordExpirationPolicy gets an existing PasswordExpirationPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPasswordExpirationPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PasswordExpirationPolicyState, opts ...pulumi.ResourceOption) (*PasswordExpirationPolicy, error) {
	var resource PasswordExpirationPolicy
	err := ctx.ReadResource("artifactory:index/passwordExpirationPolicy:PasswordExpirationPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PasswordExpirationPolicy resources.
type passwordExpirationPolicyState struct {
	// Enable Password Expiration Policy. This only applies to internal user passwords.
	Enabled *bool `pulumi:"enabled"`
	// Name of the resource. Only used for importing.
	Name *string `pulumi:"name"`
	// Send mail notification before password expiration. Users will receive an email notification X days before password will expire. Mail server must be enabled and configured correctly.
	NotifyByEmail *bool `pulumi:"notifyByEmail"`
	// Password expires every N days. The time interval in which users will be obligated to change their password.
	PasswordMaxAge *int `pulumi:"passwordMaxAge"`
}

type PasswordExpirationPolicyState struct {
	// Enable Password Expiration Policy. This only applies to internal user passwords.
	Enabled pulumi.BoolPtrInput
	// Name of the resource. Only used for importing.
	Name pulumi.StringPtrInput
	// Send mail notification before password expiration. Users will receive an email notification X days before password will expire. Mail server must be enabled and configured correctly.
	NotifyByEmail pulumi.BoolPtrInput
	// Password expires every N days. The time interval in which users will be obligated to change their password.
	PasswordMaxAge pulumi.IntPtrInput
}

func (PasswordExpirationPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*passwordExpirationPolicyState)(nil)).Elem()
}

type passwordExpirationPolicyArgs struct {
	// Enable Password Expiration Policy. This only applies to internal user passwords.
	Enabled bool `pulumi:"enabled"`
	// Name of the resource. Only used for importing.
	Name *string `pulumi:"name"`
	// Send mail notification before password expiration. Users will receive an email notification X days before password will expire. Mail server must be enabled and configured correctly.
	NotifyByEmail bool `pulumi:"notifyByEmail"`
	// Password expires every N days. The time interval in which users will be obligated to change their password.
	PasswordMaxAge int `pulumi:"passwordMaxAge"`
}

// The set of arguments for constructing a PasswordExpirationPolicy resource.
type PasswordExpirationPolicyArgs struct {
	// Enable Password Expiration Policy. This only applies to internal user passwords.
	Enabled pulumi.BoolInput
	// Name of the resource. Only used for importing.
	Name pulumi.StringPtrInput
	// Send mail notification before password expiration. Users will receive an email notification X days before password will expire. Mail server must be enabled and configured correctly.
	NotifyByEmail pulumi.BoolInput
	// Password expires every N days. The time interval in which users will be obligated to change their password.
	PasswordMaxAge pulumi.IntInput
}

func (PasswordExpirationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*passwordExpirationPolicyArgs)(nil)).Elem()
}

type PasswordExpirationPolicyInput interface {
	pulumi.Input

	ToPasswordExpirationPolicyOutput() PasswordExpirationPolicyOutput
	ToPasswordExpirationPolicyOutputWithContext(ctx context.Context) PasswordExpirationPolicyOutput
}

func (*PasswordExpirationPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**PasswordExpirationPolicy)(nil)).Elem()
}

func (i *PasswordExpirationPolicy) ToPasswordExpirationPolicyOutput() PasswordExpirationPolicyOutput {
	return i.ToPasswordExpirationPolicyOutputWithContext(context.Background())
}

func (i *PasswordExpirationPolicy) ToPasswordExpirationPolicyOutputWithContext(ctx context.Context) PasswordExpirationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordExpirationPolicyOutput)
}

// PasswordExpirationPolicyArrayInput is an input type that accepts PasswordExpirationPolicyArray and PasswordExpirationPolicyArrayOutput values.
// You can construct a concrete instance of `PasswordExpirationPolicyArrayInput` via:
//
//	PasswordExpirationPolicyArray{ PasswordExpirationPolicyArgs{...} }
type PasswordExpirationPolicyArrayInput interface {
	pulumi.Input

	ToPasswordExpirationPolicyArrayOutput() PasswordExpirationPolicyArrayOutput
	ToPasswordExpirationPolicyArrayOutputWithContext(context.Context) PasswordExpirationPolicyArrayOutput
}

type PasswordExpirationPolicyArray []PasswordExpirationPolicyInput

func (PasswordExpirationPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PasswordExpirationPolicy)(nil)).Elem()
}

func (i PasswordExpirationPolicyArray) ToPasswordExpirationPolicyArrayOutput() PasswordExpirationPolicyArrayOutput {
	return i.ToPasswordExpirationPolicyArrayOutputWithContext(context.Background())
}

func (i PasswordExpirationPolicyArray) ToPasswordExpirationPolicyArrayOutputWithContext(ctx context.Context) PasswordExpirationPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordExpirationPolicyArrayOutput)
}

// PasswordExpirationPolicyMapInput is an input type that accepts PasswordExpirationPolicyMap and PasswordExpirationPolicyMapOutput values.
// You can construct a concrete instance of `PasswordExpirationPolicyMapInput` via:
//
//	PasswordExpirationPolicyMap{ "key": PasswordExpirationPolicyArgs{...} }
type PasswordExpirationPolicyMapInput interface {
	pulumi.Input

	ToPasswordExpirationPolicyMapOutput() PasswordExpirationPolicyMapOutput
	ToPasswordExpirationPolicyMapOutputWithContext(context.Context) PasswordExpirationPolicyMapOutput
}

type PasswordExpirationPolicyMap map[string]PasswordExpirationPolicyInput

func (PasswordExpirationPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PasswordExpirationPolicy)(nil)).Elem()
}

func (i PasswordExpirationPolicyMap) ToPasswordExpirationPolicyMapOutput() PasswordExpirationPolicyMapOutput {
	return i.ToPasswordExpirationPolicyMapOutputWithContext(context.Background())
}

func (i PasswordExpirationPolicyMap) ToPasswordExpirationPolicyMapOutputWithContext(ctx context.Context) PasswordExpirationPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordExpirationPolicyMapOutput)
}

type PasswordExpirationPolicyOutput struct{ *pulumi.OutputState }

func (PasswordExpirationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PasswordExpirationPolicy)(nil)).Elem()
}

func (o PasswordExpirationPolicyOutput) ToPasswordExpirationPolicyOutput() PasswordExpirationPolicyOutput {
	return o
}

func (o PasswordExpirationPolicyOutput) ToPasswordExpirationPolicyOutputWithContext(ctx context.Context) PasswordExpirationPolicyOutput {
	return o
}

// Enable Password Expiration Policy. This only applies to internal user passwords.
func (o PasswordExpirationPolicyOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *PasswordExpirationPolicy) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Name of the resource. Only used for importing.
func (o PasswordExpirationPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PasswordExpirationPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Send mail notification before password expiration. Users will receive an email notification X days before password will expire. Mail server must be enabled and configured correctly.
func (o PasswordExpirationPolicyOutput) NotifyByEmail() pulumi.BoolOutput {
	return o.ApplyT(func(v *PasswordExpirationPolicy) pulumi.BoolOutput { return v.NotifyByEmail }).(pulumi.BoolOutput)
}

// Password expires every N days. The time interval in which users will be obligated to change their password.
func (o PasswordExpirationPolicyOutput) PasswordMaxAge() pulumi.IntOutput {
	return o.ApplyT(func(v *PasswordExpirationPolicy) pulumi.IntOutput { return v.PasswordMaxAge }).(pulumi.IntOutput)
}

type PasswordExpirationPolicyArrayOutput struct{ *pulumi.OutputState }

func (PasswordExpirationPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PasswordExpirationPolicy)(nil)).Elem()
}

func (o PasswordExpirationPolicyArrayOutput) ToPasswordExpirationPolicyArrayOutput() PasswordExpirationPolicyArrayOutput {
	return o
}

func (o PasswordExpirationPolicyArrayOutput) ToPasswordExpirationPolicyArrayOutputWithContext(ctx context.Context) PasswordExpirationPolicyArrayOutput {
	return o
}

func (o PasswordExpirationPolicyArrayOutput) Index(i pulumi.IntInput) PasswordExpirationPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PasswordExpirationPolicy {
		return vs[0].([]*PasswordExpirationPolicy)[vs[1].(int)]
	}).(PasswordExpirationPolicyOutput)
}

type PasswordExpirationPolicyMapOutput struct{ *pulumi.OutputState }

func (PasswordExpirationPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PasswordExpirationPolicy)(nil)).Elem()
}

func (o PasswordExpirationPolicyMapOutput) ToPasswordExpirationPolicyMapOutput() PasswordExpirationPolicyMapOutput {
	return o
}

func (o PasswordExpirationPolicyMapOutput) ToPasswordExpirationPolicyMapOutputWithContext(ctx context.Context) PasswordExpirationPolicyMapOutput {
	return o
}

func (o PasswordExpirationPolicyMapOutput) MapIndex(k pulumi.StringInput) PasswordExpirationPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PasswordExpirationPolicy {
		return vs[0].(map[string]*PasswordExpirationPolicy)[vs[1].(string)]
	}).(PasswordExpirationPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordExpirationPolicyInput)(nil)).Elem(), &PasswordExpirationPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordExpirationPolicyArrayInput)(nil)).Elem(), PasswordExpirationPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordExpirationPolicyMapInput)(nil)).Elem(), PasswordExpirationPolicyMap{})
	pulumi.RegisterOutputType(PasswordExpirationPolicyOutput{})
	pulumi.RegisterOutputType(PasswordExpirationPolicyArrayOutput{})
	pulumi.RegisterOutputType(PasswordExpirationPolicyMapOutput{})
}
