// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-artifactory/sdk/v6/go/artifactory/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a global environment resource. This can be used to create and manage global environment.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-artifactory/sdk/v6/go/artifactory"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := artifactory.NewGlobalEnvironment(ctx, "test-env", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// ```sh
// $ pulumi import artifactory:index/globalEnvironment:GlobalEnvironment dev-env myenv
// ```
type GlobalEnvironment struct {
	pulumi.CustomResourceState

	// Name must start with a letter and contain letters, digits and `-` character. The maximum length is 32 characters
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewGlobalEnvironment registers a new resource with the given unique name, arguments, and options.
func NewGlobalEnvironment(ctx *pulumi.Context,
	name string, args *GlobalEnvironmentArgs, opts ...pulumi.ResourceOption) (*GlobalEnvironment, error) {
	if args == nil {
		args = &GlobalEnvironmentArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GlobalEnvironment
	err := ctx.RegisterResource("artifactory:index/globalEnvironment:GlobalEnvironment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGlobalEnvironment gets an existing GlobalEnvironment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGlobalEnvironment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GlobalEnvironmentState, opts ...pulumi.ResourceOption) (*GlobalEnvironment, error) {
	var resource GlobalEnvironment
	err := ctx.ReadResource("artifactory:index/globalEnvironment:GlobalEnvironment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GlobalEnvironment resources.
type globalEnvironmentState struct {
	// Name must start with a letter and contain letters, digits and `-` character. The maximum length is 32 characters
	Name *string `pulumi:"name"`
}

type GlobalEnvironmentState struct {
	// Name must start with a letter and contain letters, digits and `-` character. The maximum length is 32 characters
	Name pulumi.StringPtrInput
}

func (GlobalEnvironmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*globalEnvironmentState)(nil)).Elem()
}

type globalEnvironmentArgs struct {
	// Name must start with a letter and contain letters, digits and `-` character. The maximum length is 32 characters
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a GlobalEnvironment resource.
type GlobalEnvironmentArgs struct {
	// Name must start with a letter and contain letters, digits and `-` character. The maximum length is 32 characters
	Name pulumi.StringPtrInput
}

func (GlobalEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*globalEnvironmentArgs)(nil)).Elem()
}

type GlobalEnvironmentInput interface {
	pulumi.Input

	ToGlobalEnvironmentOutput() GlobalEnvironmentOutput
	ToGlobalEnvironmentOutputWithContext(ctx context.Context) GlobalEnvironmentOutput
}

func (*GlobalEnvironment) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalEnvironment)(nil)).Elem()
}

func (i *GlobalEnvironment) ToGlobalEnvironmentOutput() GlobalEnvironmentOutput {
	return i.ToGlobalEnvironmentOutputWithContext(context.Background())
}

func (i *GlobalEnvironment) ToGlobalEnvironmentOutputWithContext(ctx context.Context) GlobalEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalEnvironmentOutput)
}

// GlobalEnvironmentArrayInput is an input type that accepts GlobalEnvironmentArray and GlobalEnvironmentArrayOutput values.
// You can construct a concrete instance of `GlobalEnvironmentArrayInput` via:
//
//	GlobalEnvironmentArray{ GlobalEnvironmentArgs{...} }
type GlobalEnvironmentArrayInput interface {
	pulumi.Input

	ToGlobalEnvironmentArrayOutput() GlobalEnvironmentArrayOutput
	ToGlobalEnvironmentArrayOutputWithContext(context.Context) GlobalEnvironmentArrayOutput
}

type GlobalEnvironmentArray []GlobalEnvironmentInput

func (GlobalEnvironmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GlobalEnvironment)(nil)).Elem()
}

func (i GlobalEnvironmentArray) ToGlobalEnvironmentArrayOutput() GlobalEnvironmentArrayOutput {
	return i.ToGlobalEnvironmentArrayOutputWithContext(context.Background())
}

func (i GlobalEnvironmentArray) ToGlobalEnvironmentArrayOutputWithContext(ctx context.Context) GlobalEnvironmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalEnvironmentArrayOutput)
}

// GlobalEnvironmentMapInput is an input type that accepts GlobalEnvironmentMap and GlobalEnvironmentMapOutput values.
// You can construct a concrete instance of `GlobalEnvironmentMapInput` via:
//
//	GlobalEnvironmentMap{ "key": GlobalEnvironmentArgs{...} }
type GlobalEnvironmentMapInput interface {
	pulumi.Input

	ToGlobalEnvironmentMapOutput() GlobalEnvironmentMapOutput
	ToGlobalEnvironmentMapOutputWithContext(context.Context) GlobalEnvironmentMapOutput
}

type GlobalEnvironmentMap map[string]GlobalEnvironmentInput

func (GlobalEnvironmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GlobalEnvironment)(nil)).Elem()
}

func (i GlobalEnvironmentMap) ToGlobalEnvironmentMapOutput() GlobalEnvironmentMapOutput {
	return i.ToGlobalEnvironmentMapOutputWithContext(context.Background())
}

func (i GlobalEnvironmentMap) ToGlobalEnvironmentMapOutputWithContext(ctx context.Context) GlobalEnvironmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalEnvironmentMapOutput)
}

type GlobalEnvironmentOutput struct{ *pulumi.OutputState }

func (GlobalEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalEnvironment)(nil)).Elem()
}

func (o GlobalEnvironmentOutput) ToGlobalEnvironmentOutput() GlobalEnvironmentOutput {
	return o
}

func (o GlobalEnvironmentOutput) ToGlobalEnvironmentOutputWithContext(ctx context.Context) GlobalEnvironmentOutput {
	return o
}

// Name must start with a letter and contain letters, digits and `-` character. The maximum length is 32 characters
func (o GlobalEnvironmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GlobalEnvironment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type GlobalEnvironmentArrayOutput struct{ *pulumi.OutputState }

func (GlobalEnvironmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GlobalEnvironment)(nil)).Elem()
}

func (o GlobalEnvironmentArrayOutput) ToGlobalEnvironmentArrayOutput() GlobalEnvironmentArrayOutput {
	return o
}

func (o GlobalEnvironmentArrayOutput) ToGlobalEnvironmentArrayOutputWithContext(ctx context.Context) GlobalEnvironmentArrayOutput {
	return o
}

func (o GlobalEnvironmentArrayOutput) Index(i pulumi.IntInput) GlobalEnvironmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GlobalEnvironment {
		return vs[0].([]*GlobalEnvironment)[vs[1].(int)]
	}).(GlobalEnvironmentOutput)
}

type GlobalEnvironmentMapOutput struct{ *pulumi.OutputState }

func (GlobalEnvironmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GlobalEnvironment)(nil)).Elem()
}

func (o GlobalEnvironmentMapOutput) ToGlobalEnvironmentMapOutput() GlobalEnvironmentMapOutput {
	return o
}

func (o GlobalEnvironmentMapOutput) ToGlobalEnvironmentMapOutputWithContext(ctx context.Context) GlobalEnvironmentMapOutput {
	return o
}

func (o GlobalEnvironmentMapOutput) MapIndex(k pulumi.StringInput) GlobalEnvironmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GlobalEnvironment {
		return vs[0].(map[string]*GlobalEnvironment)[vs[1].(string)]
	}).(GlobalEnvironmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalEnvironmentInput)(nil)).Elem(), &GlobalEnvironment{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalEnvironmentArrayInput)(nil)).Elem(), GlobalEnvironmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalEnvironmentMapInput)(nil)).Elem(), GlobalEnvironmentMap{})
	pulumi.RegisterOutputType(GlobalEnvironmentOutput{})
	pulumi.RegisterOutputType(GlobalEnvironmentArrayOutput{})
	pulumi.RegisterOutputType(GlobalEnvironmentMapOutput{})
}
