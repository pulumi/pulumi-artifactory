// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Artifactory Virtual Cran Repository Resource
//
// Provides an Artifactory virtual repository resource with specific cran features.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-artifactory/sdk/v2/go/artifactory"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := artifactory.NewVirtualCranRepository(ctx, "foo-cran", &artifactory.VirtualCranRepositoryArgs{
// 			Description:     pulumi.String("A test virtual repo"),
// 			ExcludesPattern: pulumi.String("com/google/**"),
// 			IncludesPattern: pulumi.String("com/jfrog/**,cloud/jfrog/**"),
// 			Key:             pulumi.String("foo-cran"),
// 			Notes:           pulumi.String("Internal description"),
// 			Repositories:    pulumi.StringArray{},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Virtual repositories can be imported using their name, e.g.
//
// ```sh
//  $ pulumi import artifactory:index/virtualCranRepository:VirtualCranRepository foo foo
// ```
type VirtualCranRepository struct {
	pulumi.CustomResourceState

	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
	// another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts pulumi.BoolPtrOutput `pulumi:"artifactoryRequestsCanRetrieveRemoteArtifacts"`
	// Default repository to deploy artifacts.
	DefaultDeploymentRepo pulumi.StringPtrOutput `pulumi:"defaultDeploymentRepo"`
	// A free text field that describes the content and purpose of the repository. If you choose to insert a link into this
	// field, clicking the link will prompt the user to confirm that they might be redirected to a new domain.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
	// artifacts are excluded.
	ExcludesPattern pulumi.StringPtrOutput `pulumi:"excludesPattern"`
	// List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only
	// artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern pulumi.StringPtrOutput `pulumi:"includesPattern"`
	// The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or
	// contain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.
	// 'libs-release-local').
	Key pulumi.StringOutput `pulumi:"key"`
	// A free text field to add additional notes about the repository. These are only visible to the administrator.
	Notes pulumi.StringPtrOutput `pulumi:"notes"`
	// The Package Type. This must be specified when the repository is created, and once set, cannot be changed.
	PackageType pulumi.StringOutput `pulumi:"packageType"`
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments pulumi.StringArrayOutput `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric characters. When assigning
	// repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey pulumi.StringPtrOutput `pulumi:"projectKey"`
	// Repository layout key for the local repository
	RepoLayoutRef pulumi.StringPtrOutput `pulumi:"repoLayoutRef"`
	// The effective list of actual repositories included in this virtual repository.
	Repositories pulumi.StringArrayOutput `pulumi:"repositories"`
	// This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated repositories. A value of 0 indicates no caching. Default value is 7200.
	RetrievalCachePeriodSeconds pulumi.IntPtrOutput `pulumi:"retrievalCachePeriodSeconds"`
}

// NewVirtualCranRepository registers a new resource with the given unique name, arguments, and options.
func NewVirtualCranRepository(ctx *pulumi.Context,
	name string, args *VirtualCranRepositoryArgs, opts ...pulumi.ResourceOption) (*VirtualCranRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	var resource VirtualCranRepository
	err := ctx.RegisterResource("artifactory:index/virtualCranRepository:VirtualCranRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualCranRepository gets an existing VirtualCranRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualCranRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualCranRepositoryState, opts ...pulumi.ResourceOption) (*VirtualCranRepository, error) {
	var resource VirtualCranRepository
	err := ctx.ReadResource("artifactory:index/virtualCranRepository:VirtualCranRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualCranRepository resources.
type virtualCranRepositoryState struct {
	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
	// another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts *bool `pulumi:"artifactoryRequestsCanRetrieveRemoteArtifacts"`
	// Default repository to deploy artifacts.
	DefaultDeploymentRepo *string `pulumi:"defaultDeploymentRepo"`
	// A free text field that describes the content and purpose of the repository. If you choose to insert a link into this
	// field, clicking the link will prompt the user to confirm that they might be redirected to a new domain.
	Description *string `pulumi:"description"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
	// artifacts are excluded.
	ExcludesPattern *string `pulumi:"excludesPattern"`
	// List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only
	// artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern *string `pulumi:"includesPattern"`
	// The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or
	// contain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.
	// 'libs-release-local').
	Key *string `pulumi:"key"`
	// A free text field to add additional notes about the repository. These are only visible to the administrator.
	Notes *string `pulumi:"notes"`
	// The Package Type. This must be specified when the repository is created, and once set, cannot be changed.
	PackageType *string `pulumi:"packageType"`
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments []string `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric characters. When assigning
	// repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey *string `pulumi:"projectKey"`
	// Repository layout key for the local repository
	RepoLayoutRef *string `pulumi:"repoLayoutRef"`
	// The effective list of actual repositories included in this virtual repository.
	Repositories []string `pulumi:"repositories"`
	// This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated repositories. A value of 0 indicates no caching. Default value is 7200.
	RetrievalCachePeriodSeconds *int `pulumi:"retrievalCachePeriodSeconds"`
}

type VirtualCranRepositoryState struct {
	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
	// another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts pulumi.BoolPtrInput
	// Default repository to deploy artifacts.
	DefaultDeploymentRepo pulumi.StringPtrInput
	// A free text field that describes the content and purpose of the repository. If you choose to insert a link into this
	// field, clicking the link will prompt the user to confirm that they might be redirected to a new domain.
	Description pulumi.StringPtrInput
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
	// artifacts are excluded.
	ExcludesPattern pulumi.StringPtrInput
	// List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only
	// artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern pulumi.StringPtrInput
	// The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or
	// contain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.
	// 'libs-release-local').
	Key pulumi.StringPtrInput
	// A free text field to add additional notes about the repository. These are only visible to the administrator.
	Notes pulumi.StringPtrInput
	// The Package Type. This must be specified when the repository is created, and once set, cannot be changed.
	PackageType pulumi.StringPtrInput
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments pulumi.StringArrayInput
	// Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric characters. When assigning
	// repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey pulumi.StringPtrInput
	// Repository layout key for the local repository
	RepoLayoutRef pulumi.StringPtrInput
	// The effective list of actual repositories included in this virtual repository.
	Repositories pulumi.StringArrayInput
	// This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated repositories. A value of 0 indicates no caching. Default value is 7200.
	RetrievalCachePeriodSeconds pulumi.IntPtrInput
}

func (VirtualCranRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualCranRepositoryState)(nil)).Elem()
}

type virtualCranRepositoryArgs struct {
	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
	// another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts *bool `pulumi:"artifactoryRequestsCanRetrieveRemoteArtifacts"`
	// Default repository to deploy artifacts.
	DefaultDeploymentRepo *string `pulumi:"defaultDeploymentRepo"`
	// A free text field that describes the content and purpose of the repository. If you choose to insert a link into this
	// field, clicking the link will prompt the user to confirm that they might be redirected to a new domain.
	Description *string `pulumi:"description"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
	// artifacts are excluded.
	ExcludesPattern *string `pulumi:"excludesPattern"`
	// List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only
	// artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern *string `pulumi:"includesPattern"`
	// The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or
	// contain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.
	// 'libs-release-local').
	Key string `pulumi:"key"`
	// A free text field to add additional notes about the repository. These are only visible to the administrator.
	Notes *string `pulumi:"notes"`
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments []string `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric characters. When assigning
	// repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey *string `pulumi:"projectKey"`
	// Repository layout key for the local repository
	RepoLayoutRef *string `pulumi:"repoLayoutRef"`
	// The effective list of actual repositories included in this virtual repository.
	Repositories []string `pulumi:"repositories"`
	// This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated repositories. A value of 0 indicates no caching. Default value is 7200.
	RetrievalCachePeriodSeconds *int `pulumi:"retrievalCachePeriodSeconds"`
}

// The set of arguments for constructing a VirtualCranRepository resource.
type VirtualCranRepositoryArgs struct {
	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
	// another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts pulumi.BoolPtrInput
	// Default repository to deploy artifacts.
	DefaultDeploymentRepo pulumi.StringPtrInput
	// A free text field that describes the content and purpose of the repository. If you choose to insert a link into this
	// field, clicking the link will prompt the user to confirm that they might be redirected to a new domain.
	Description pulumi.StringPtrInput
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
	// artifacts are excluded.
	ExcludesPattern pulumi.StringPtrInput
	// List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only
	// artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern pulumi.StringPtrInput
	// The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or
	// contain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.
	// 'libs-release-local').
	Key pulumi.StringInput
	// A free text field to add additional notes about the repository. These are only visible to the administrator.
	Notes pulumi.StringPtrInput
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments pulumi.StringArrayInput
	// Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric characters. When assigning
	// repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey pulumi.StringPtrInput
	// Repository layout key for the local repository
	RepoLayoutRef pulumi.StringPtrInput
	// The effective list of actual repositories included in this virtual repository.
	Repositories pulumi.StringArrayInput
	// This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated repositories. A value of 0 indicates no caching. Default value is 7200.
	RetrievalCachePeriodSeconds pulumi.IntPtrInput
}

func (VirtualCranRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualCranRepositoryArgs)(nil)).Elem()
}

type VirtualCranRepositoryInput interface {
	pulumi.Input

	ToVirtualCranRepositoryOutput() VirtualCranRepositoryOutput
	ToVirtualCranRepositoryOutputWithContext(ctx context.Context) VirtualCranRepositoryOutput
}

func (*VirtualCranRepository) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualCranRepository)(nil)).Elem()
}

func (i *VirtualCranRepository) ToVirtualCranRepositoryOutput() VirtualCranRepositoryOutput {
	return i.ToVirtualCranRepositoryOutputWithContext(context.Background())
}

func (i *VirtualCranRepository) ToVirtualCranRepositoryOutputWithContext(ctx context.Context) VirtualCranRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualCranRepositoryOutput)
}

// VirtualCranRepositoryArrayInput is an input type that accepts VirtualCranRepositoryArray and VirtualCranRepositoryArrayOutput values.
// You can construct a concrete instance of `VirtualCranRepositoryArrayInput` via:
//
//          VirtualCranRepositoryArray{ VirtualCranRepositoryArgs{...} }
type VirtualCranRepositoryArrayInput interface {
	pulumi.Input

	ToVirtualCranRepositoryArrayOutput() VirtualCranRepositoryArrayOutput
	ToVirtualCranRepositoryArrayOutputWithContext(context.Context) VirtualCranRepositoryArrayOutput
}

type VirtualCranRepositoryArray []VirtualCranRepositoryInput

func (VirtualCranRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualCranRepository)(nil)).Elem()
}

func (i VirtualCranRepositoryArray) ToVirtualCranRepositoryArrayOutput() VirtualCranRepositoryArrayOutput {
	return i.ToVirtualCranRepositoryArrayOutputWithContext(context.Background())
}

func (i VirtualCranRepositoryArray) ToVirtualCranRepositoryArrayOutputWithContext(ctx context.Context) VirtualCranRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualCranRepositoryArrayOutput)
}

// VirtualCranRepositoryMapInput is an input type that accepts VirtualCranRepositoryMap and VirtualCranRepositoryMapOutput values.
// You can construct a concrete instance of `VirtualCranRepositoryMapInput` via:
//
//          VirtualCranRepositoryMap{ "key": VirtualCranRepositoryArgs{...} }
type VirtualCranRepositoryMapInput interface {
	pulumi.Input

	ToVirtualCranRepositoryMapOutput() VirtualCranRepositoryMapOutput
	ToVirtualCranRepositoryMapOutputWithContext(context.Context) VirtualCranRepositoryMapOutput
}

type VirtualCranRepositoryMap map[string]VirtualCranRepositoryInput

func (VirtualCranRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualCranRepository)(nil)).Elem()
}

func (i VirtualCranRepositoryMap) ToVirtualCranRepositoryMapOutput() VirtualCranRepositoryMapOutput {
	return i.ToVirtualCranRepositoryMapOutputWithContext(context.Background())
}

func (i VirtualCranRepositoryMap) ToVirtualCranRepositoryMapOutputWithContext(ctx context.Context) VirtualCranRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualCranRepositoryMapOutput)
}

type VirtualCranRepositoryOutput struct{ *pulumi.OutputState }

func (VirtualCranRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualCranRepository)(nil)).Elem()
}

func (o VirtualCranRepositoryOutput) ToVirtualCranRepositoryOutput() VirtualCranRepositoryOutput {
	return o
}

func (o VirtualCranRepositoryOutput) ToVirtualCranRepositoryOutputWithContext(ctx context.Context) VirtualCranRepositoryOutput {
	return o
}

type VirtualCranRepositoryArrayOutput struct{ *pulumi.OutputState }

func (VirtualCranRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualCranRepository)(nil)).Elem()
}

func (o VirtualCranRepositoryArrayOutput) ToVirtualCranRepositoryArrayOutput() VirtualCranRepositoryArrayOutput {
	return o
}

func (o VirtualCranRepositoryArrayOutput) ToVirtualCranRepositoryArrayOutputWithContext(ctx context.Context) VirtualCranRepositoryArrayOutput {
	return o
}

func (o VirtualCranRepositoryArrayOutput) Index(i pulumi.IntInput) VirtualCranRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VirtualCranRepository {
		return vs[0].([]*VirtualCranRepository)[vs[1].(int)]
	}).(VirtualCranRepositoryOutput)
}

type VirtualCranRepositoryMapOutput struct{ *pulumi.OutputState }

func (VirtualCranRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualCranRepository)(nil)).Elem()
}

func (o VirtualCranRepositoryMapOutput) ToVirtualCranRepositoryMapOutput() VirtualCranRepositoryMapOutput {
	return o
}

func (o VirtualCranRepositoryMapOutput) ToVirtualCranRepositoryMapOutputWithContext(ctx context.Context) VirtualCranRepositoryMapOutput {
	return o
}

func (o VirtualCranRepositoryMapOutput) MapIndex(k pulumi.StringInput) VirtualCranRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VirtualCranRepository {
		return vs[0].(map[string]*VirtualCranRepository)[vs[1].(string)]
	}).(VirtualCranRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualCranRepositoryInput)(nil)).Elem(), &VirtualCranRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualCranRepositoryArrayInput)(nil)).Elem(), VirtualCranRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualCranRepositoryMapInput)(nil)).Elem(), VirtualCranRepositoryMap{})
	pulumi.RegisterOutputType(VirtualCranRepositoryOutput{})
	pulumi.RegisterOutputType(VirtualCranRepositoryArrayOutput{})
	pulumi.RegisterOutputType(VirtualCranRepositoryMapOutput{})
}
