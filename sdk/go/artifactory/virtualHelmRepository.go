// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Artifactory Virtual Helm Repository Resource
//
// Provides an Artifactory virtual repository resource with Helm package type. This should be preferred over the original one-size-fits-all `VirtualRepository`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := artifactory.NewVirtualHelmRepository(ctx, "foo-helm-virtual", &artifactory.VirtualHelmRepositoryArgs{
// 			Key:           pulumi.String("foo-helm-virtual"),
// 			UseNamespaces: pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Virtual repositories can be imported using their name, e.g.
//
// ```sh
//  $ pulumi import artifactory:index/virtualHelmRepository:VirtualHelmRepository foo foo
// ```
type VirtualHelmRepository struct {
	pulumi.CustomResourceState

	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
	// another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts pulumi.BoolPtrOutput `pulumi:"artifactoryRequestsCanRetrieveRemoteArtifacts"`
	// Default repository to deploy artifacts.
	DefaultDeploymentRepo pulumi.StringPtrOutput `pulumi:"defaultDeploymentRepo"`
	// A free text field that describes the content and purpose of the repository. If you choose to insert a link into this
	// field, clicking the link will prompt the user to confirm that they might be redirected to a new domain.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
	// artifacts are excluded.
	ExcludesPattern pulumi.StringPtrOutput `pulumi:"excludesPattern"`
	// List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only
	// artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern pulumi.StringPtrOutput `pulumi:"includesPattern"`
	// The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or
	// contain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.
	// 'libs-release-local').
	Key pulumi.StringOutput `pulumi:"key"`
	// A free text field to add additional notes about the repository. These are only visible to the administrator.
	Notes pulumi.StringPtrOutput `pulumi:"notes"`
	// The Package Type. This must be specified when the repository is created, and once set, cannot be changed.
	PackageType pulumi.StringOutput `pulumi:"packageType"`
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments pulumi.StringArrayOutput `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric characters. When assigning
	// repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey pulumi.StringPtrOutput `pulumi:"projectKey"`
	// Repository layout key for the local repository
	RepoLayoutRef pulumi.StringPtrOutput `pulumi:"repoLayoutRef"`
	// The effective list of actual repositories included in this virtual repository.
	Repositories pulumi.StringArrayOutput `pulumi:"repositories"`
	// This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated
	// repositories. A value of 0 indicates no caching.
	RetrievalCachePeriodSeconds pulumi.IntPtrOutput `pulumi:"retrievalCachePeriodSeconds"`
	// From Artifactory 7.24.1 (SaaS Version), you can explicitly state a specific aggregated local or remote repository to fetch from a virtual by assigning namespaces to local and remote repositories. See https://www.jfrog.com/confluence/display/JFROG/Kubernetes+Helm+Chart+Repositories#KubernetesHelmChartRepositories-NamespaceSupportforHelmVirtualRepositories. Default to 'false'.
	UseNamespaces pulumi.BoolPtrOutput `pulumi:"useNamespaces"`
}

// NewVirtualHelmRepository registers a new resource with the given unique name, arguments, and options.
func NewVirtualHelmRepository(ctx *pulumi.Context,
	name string, args *VirtualHelmRepositoryArgs, opts ...pulumi.ResourceOption) (*VirtualHelmRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	var resource VirtualHelmRepository
	err := ctx.RegisterResource("artifactory:index/virtualHelmRepository:VirtualHelmRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualHelmRepository gets an existing VirtualHelmRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualHelmRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualHelmRepositoryState, opts ...pulumi.ResourceOption) (*VirtualHelmRepository, error) {
	var resource VirtualHelmRepository
	err := ctx.ReadResource("artifactory:index/virtualHelmRepository:VirtualHelmRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualHelmRepository resources.
type virtualHelmRepositoryState struct {
	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
	// another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts *bool `pulumi:"artifactoryRequestsCanRetrieveRemoteArtifacts"`
	// Default repository to deploy artifacts.
	DefaultDeploymentRepo *string `pulumi:"defaultDeploymentRepo"`
	// A free text field that describes the content and purpose of the repository. If you choose to insert a link into this
	// field, clicking the link will prompt the user to confirm that they might be redirected to a new domain.
	Description *string `pulumi:"description"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
	// artifacts are excluded.
	ExcludesPattern *string `pulumi:"excludesPattern"`
	// List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only
	// artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern *string `pulumi:"includesPattern"`
	// The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or
	// contain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.
	// 'libs-release-local').
	Key *string `pulumi:"key"`
	// A free text field to add additional notes about the repository. These are only visible to the administrator.
	Notes *string `pulumi:"notes"`
	// The Package Type. This must be specified when the repository is created, and once set, cannot be changed.
	PackageType *string `pulumi:"packageType"`
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments []string `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric characters. When assigning
	// repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey *string `pulumi:"projectKey"`
	// Repository layout key for the local repository
	RepoLayoutRef *string `pulumi:"repoLayoutRef"`
	// The effective list of actual repositories included in this virtual repository.
	Repositories []string `pulumi:"repositories"`
	// This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated
	// repositories. A value of 0 indicates no caching.
	RetrievalCachePeriodSeconds *int `pulumi:"retrievalCachePeriodSeconds"`
	// From Artifactory 7.24.1 (SaaS Version), you can explicitly state a specific aggregated local or remote repository to fetch from a virtual by assigning namespaces to local and remote repositories. See https://www.jfrog.com/confluence/display/JFROG/Kubernetes+Helm+Chart+Repositories#KubernetesHelmChartRepositories-NamespaceSupportforHelmVirtualRepositories. Default to 'false'.
	UseNamespaces *bool `pulumi:"useNamespaces"`
}

type VirtualHelmRepositoryState struct {
	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
	// another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts pulumi.BoolPtrInput
	// Default repository to deploy artifacts.
	DefaultDeploymentRepo pulumi.StringPtrInput
	// A free text field that describes the content and purpose of the repository. If you choose to insert a link into this
	// field, clicking the link will prompt the user to confirm that they might be redirected to a new domain.
	Description pulumi.StringPtrInput
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
	// artifacts are excluded.
	ExcludesPattern pulumi.StringPtrInput
	// List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only
	// artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern pulumi.StringPtrInput
	// The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or
	// contain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.
	// 'libs-release-local').
	Key pulumi.StringPtrInput
	// A free text field to add additional notes about the repository. These are only visible to the administrator.
	Notes pulumi.StringPtrInput
	// The Package Type. This must be specified when the repository is created, and once set, cannot be changed.
	PackageType pulumi.StringPtrInput
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments pulumi.StringArrayInput
	// Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric characters. When assigning
	// repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey pulumi.StringPtrInput
	// Repository layout key for the local repository
	RepoLayoutRef pulumi.StringPtrInput
	// The effective list of actual repositories included in this virtual repository.
	Repositories pulumi.StringArrayInput
	// This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated
	// repositories. A value of 0 indicates no caching.
	RetrievalCachePeriodSeconds pulumi.IntPtrInput
	// From Artifactory 7.24.1 (SaaS Version), you can explicitly state a specific aggregated local or remote repository to fetch from a virtual by assigning namespaces to local and remote repositories. See https://www.jfrog.com/confluence/display/JFROG/Kubernetes+Helm+Chart+Repositories#KubernetesHelmChartRepositories-NamespaceSupportforHelmVirtualRepositories. Default to 'false'.
	UseNamespaces pulumi.BoolPtrInput
}

func (VirtualHelmRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualHelmRepositoryState)(nil)).Elem()
}

type virtualHelmRepositoryArgs struct {
	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
	// another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts *bool `pulumi:"artifactoryRequestsCanRetrieveRemoteArtifacts"`
	// Default repository to deploy artifacts.
	DefaultDeploymentRepo *string `pulumi:"defaultDeploymentRepo"`
	// A free text field that describes the content and purpose of the repository. If you choose to insert a link into this
	// field, clicking the link will prompt the user to confirm that they might be redirected to a new domain.
	Description *string `pulumi:"description"`
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
	// artifacts are excluded.
	ExcludesPattern *string `pulumi:"excludesPattern"`
	// List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only
	// artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern *string `pulumi:"includesPattern"`
	// The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or
	// contain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.
	// 'libs-release-local').
	Key string `pulumi:"key"`
	// A free text field to add additional notes about the repository. These are only visible to the administrator.
	Notes *string `pulumi:"notes"`
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments []string `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric characters. When assigning
	// repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey *string `pulumi:"projectKey"`
	// Repository layout key for the local repository
	RepoLayoutRef *string `pulumi:"repoLayoutRef"`
	// The effective list of actual repositories included in this virtual repository.
	Repositories []string `pulumi:"repositories"`
	// This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated
	// repositories. A value of 0 indicates no caching.
	RetrievalCachePeriodSeconds *int `pulumi:"retrievalCachePeriodSeconds"`
	// From Artifactory 7.24.1 (SaaS Version), you can explicitly state a specific aggregated local or remote repository to fetch from a virtual by assigning namespaces to local and remote repositories. See https://www.jfrog.com/confluence/display/JFROG/Kubernetes+Helm+Chart+Repositories#KubernetesHelmChartRepositories-NamespaceSupportforHelmVirtualRepositories. Default to 'false'.
	UseNamespaces *bool `pulumi:"useNamespaces"`
}

// The set of arguments for constructing a VirtualHelmRepository resource.
type VirtualHelmRepositoryArgs struct {
	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by
	// another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts pulumi.BoolPtrInput
	// Default repository to deploy artifacts.
	DefaultDeploymentRepo pulumi.StringPtrInput
	// A free text field that describes the content and purpose of the repository. If you choose to insert a link into this
	// field, clicking the link will prompt the user to confirm that they might be redirected to a new domain.
	Description pulumi.StringPtrInput
	// List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no
	// artifacts are excluded.
	ExcludesPattern pulumi.StringPtrInput
	// List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only
	// artifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).
	IncludesPattern pulumi.StringPtrInput
	// The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or
	// contain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.
	// 'libs-release-local').
	Key pulumi.StringInput
	// A free text field to add additional notes about the repository. These are only visible to the administrator.
	Notes pulumi.StringPtrInput
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments pulumi.StringArrayInput
	// Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric characters. When assigning
	// repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey pulumi.StringPtrInput
	// Repository layout key for the local repository
	RepoLayoutRef pulumi.StringPtrInput
	// The effective list of actual repositories included in this virtual repository.
	Repositories pulumi.StringArrayInput
	// This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated
	// repositories. A value of 0 indicates no caching.
	RetrievalCachePeriodSeconds pulumi.IntPtrInput
	// From Artifactory 7.24.1 (SaaS Version), you can explicitly state a specific aggregated local or remote repository to fetch from a virtual by assigning namespaces to local and remote repositories. See https://www.jfrog.com/confluence/display/JFROG/Kubernetes+Helm+Chart+Repositories#KubernetesHelmChartRepositories-NamespaceSupportforHelmVirtualRepositories. Default to 'false'.
	UseNamespaces pulumi.BoolPtrInput
}

func (VirtualHelmRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualHelmRepositoryArgs)(nil)).Elem()
}

type VirtualHelmRepositoryInput interface {
	pulumi.Input

	ToVirtualHelmRepositoryOutput() VirtualHelmRepositoryOutput
	ToVirtualHelmRepositoryOutputWithContext(ctx context.Context) VirtualHelmRepositoryOutput
}

func (*VirtualHelmRepository) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualHelmRepository)(nil)).Elem()
}

func (i *VirtualHelmRepository) ToVirtualHelmRepositoryOutput() VirtualHelmRepositoryOutput {
	return i.ToVirtualHelmRepositoryOutputWithContext(context.Background())
}

func (i *VirtualHelmRepository) ToVirtualHelmRepositoryOutputWithContext(ctx context.Context) VirtualHelmRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualHelmRepositoryOutput)
}

// VirtualHelmRepositoryArrayInput is an input type that accepts VirtualHelmRepositoryArray and VirtualHelmRepositoryArrayOutput values.
// You can construct a concrete instance of `VirtualHelmRepositoryArrayInput` via:
//
//          VirtualHelmRepositoryArray{ VirtualHelmRepositoryArgs{...} }
type VirtualHelmRepositoryArrayInput interface {
	pulumi.Input

	ToVirtualHelmRepositoryArrayOutput() VirtualHelmRepositoryArrayOutput
	ToVirtualHelmRepositoryArrayOutputWithContext(context.Context) VirtualHelmRepositoryArrayOutput
}

type VirtualHelmRepositoryArray []VirtualHelmRepositoryInput

func (VirtualHelmRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualHelmRepository)(nil)).Elem()
}

func (i VirtualHelmRepositoryArray) ToVirtualHelmRepositoryArrayOutput() VirtualHelmRepositoryArrayOutput {
	return i.ToVirtualHelmRepositoryArrayOutputWithContext(context.Background())
}

func (i VirtualHelmRepositoryArray) ToVirtualHelmRepositoryArrayOutputWithContext(ctx context.Context) VirtualHelmRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualHelmRepositoryArrayOutput)
}

// VirtualHelmRepositoryMapInput is an input type that accepts VirtualHelmRepositoryMap and VirtualHelmRepositoryMapOutput values.
// You can construct a concrete instance of `VirtualHelmRepositoryMapInput` via:
//
//          VirtualHelmRepositoryMap{ "key": VirtualHelmRepositoryArgs{...} }
type VirtualHelmRepositoryMapInput interface {
	pulumi.Input

	ToVirtualHelmRepositoryMapOutput() VirtualHelmRepositoryMapOutput
	ToVirtualHelmRepositoryMapOutputWithContext(context.Context) VirtualHelmRepositoryMapOutput
}

type VirtualHelmRepositoryMap map[string]VirtualHelmRepositoryInput

func (VirtualHelmRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualHelmRepository)(nil)).Elem()
}

func (i VirtualHelmRepositoryMap) ToVirtualHelmRepositoryMapOutput() VirtualHelmRepositoryMapOutput {
	return i.ToVirtualHelmRepositoryMapOutputWithContext(context.Background())
}

func (i VirtualHelmRepositoryMap) ToVirtualHelmRepositoryMapOutputWithContext(ctx context.Context) VirtualHelmRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualHelmRepositoryMapOutput)
}

type VirtualHelmRepositoryOutput struct{ *pulumi.OutputState }

func (VirtualHelmRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualHelmRepository)(nil)).Elem()
}

func (o VirtualHelmRepositoryOutput) ToVirtualHelmRepositoryOutput() VirtualHelmRepositoryOutput {
	return o
}

func (o VirtualHelmRepositoryOutput) ToVirtualHelmRepositoryOutputWithContext(ctx context.Context) VirtualHelmRepositoryOutput {
	return o
}

type VirtualHelmRepositoryArrayOutput struct{ *pulumi.OutputState }

func (VirtualHelmRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualHelmRepository)(nil)).Elem()
}

func (o VirtualHelmRepositoryArrayOutput) ToVirtualHelmRepositoryArrayOutput() VirtualHelmRepositoryArrayOutput {
	return o
}

func (o VirtualHelmRepositoryArrayOutput) ToVirtualHelmRepositoryArrayOutputWithContext(ctx context.Context) VirtualHelmRepositoryArrayOutput {
	return o
}

func (o VirtualHelmRepositoryArrayOutput) Index(i pulumi.IntInput) VirtualHelmRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VirtualHelmRepository {
		return vs[0].([]*VirtualHelmRepository)[vs[1].(int)]
	}).(VirtualHelmRepositoryOutput)
}

type VirtualHelmRepositoryMapOutput struct{ *pulumi.OutputState }

func (VirtualHelmRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualHelmRepository)(nil)).Elem()
}

func (o VirtualHelmRepositoryMapOutput) ToVirtualHelmRepositoryMapOutput() VirtualHelmRepositoryMapOutput {
	return o
}

func (o VirtualHelmRepositoryMapOutput) ToVirtualHelmRepositoryMapOutputWithContext(ctx context.Context) VirtualHelmRepositoryMapOutput {
	return o
}

func (o VirtualHelmRepositoryMapOutput) MapIndex(k pulumi.StringInput) VirtualHelmRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VirtualHelmRepository {
		return vs[0].(map[string]*VirtualHelmRepository)[vs[1].(string)]
	}).(VirtualHelmRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualHelmRepositoryInput)(nil)).Elem(), &VirtualHelmRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualHelmRepositoryArrayInput)(nil)).Elem(), VirtualHelmRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualHelmRepositoryMapInput)(nil)).Elem(), VirtualHelmRepositoryMap{})
	pulumi.RegisterOutputType(VirtualHelmRepositoryOutput{})
	pulumi.RegisterOutputType(VirtualHelmRepositoryArrayOutput{})
	pulumi.RegisterOutputType(VirtualHelmRepositoryMapOutput{})
}
