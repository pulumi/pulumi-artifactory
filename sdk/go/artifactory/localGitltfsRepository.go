// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Artifactory Local Gitlfs Repository Resource
//
// Creates a local gitlfs repository.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := artifactory.NewLocalGitltfsRepository(ctx, "terraform_local_test_gitlfs_repo", &artifactory.LocalGitltfsRepositoryArgs{
// 			Key: pulumi.String("terraform-local-test-gitlfs-repo"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type LocalGitltfsRepository struct {
	pulumi.CustomResourceState

	// When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and
	// therefore requires strict content moderation to prevent malicious users from uploading content that may compromise
	// security (e.g., cross-site scripting attacks).
	ArchiveBrowsingEnabled pulumi.BoolPtrOutput   `pulumi:"archiveBrowsingEnabled"`
	BlackedOut             pulumi.BoolPtrOutput   `pulumi:"blackedOut"`
	Description            pulumi.StringPtrOutput `pulumi:"description"`
	DownloadDirect         pulumi.BoolPtrOutput   `pulumi:"downloadDirect"`
	ExcludesPattern        pulumi.StringOutput    `pulumi:"excludesPattern"`
	IncludesPattern        pulumi.StringOutput    `pulumi:"includesPattern"`
	// - the identity key of the repo
	Key           pulumi.StringOutput      `pulumi:"key"`
	Notes         pulumi.StringPtrOutput   `pulumi:"notes"`
	PackageType   pulumi.StringOutput      `pulumi:"packageType"`
	PropertySets  pulumi.StringArrayOutput `pulumi:"propertySets"`
	RepoLayoutRef pulumi.StringOutput      `pulumi:"repoLayoutRef"`
	XrayIndex     pulumi.BoolOutput        `pulumi:"xrayIndex"`
}

// NewLocalGitltfsRepository registers a new resource with the given unique name, arguments, and options.
func NewLocalGitltfsRepository(ctx *pulumi.Context,
	name string, args *LocalGitltfsRepositoryArgs, opts ...pulumi.ResourceOption) (*LocalGitltfsRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	var resource LocalGitltfsRepository
	err := ctx.RegisterResource("artifactory:index/localGitltfsRepository:LocalGitltfsRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLocalGitltfsRepository gets an existing LocalGitltfsRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLocalGitltfsRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LocalGitltfsRepositoryState, opts ...pulumi.ResourceOption) (*LocalGitltfsRepository, error) {
	var resource LocalGitltfsRepository
	err := ctx.ReadResource("artifactory:index/localGitltfsRepository:LocalGitltfsRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LocalGitltfsRepository resources.
type localGitltfsRepositoryState struct {
	// When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and
	// therefore requires strict content moderation to prevent malicious users from uploading content that may compromise
	// security (e.g., cross-site scripting attacks).
	ArchiveBrowsingEnabled *bool   `pulumi:"archiveBrowsingEnabled"`
	BlackedOut             *bool   `pulumi:"blackedOut"`
	Description            *string `pulumi:"description"`
	DownloadDirect         *bool   `pulumi:"downloadDirect"`
	ExcludesPattern        *string `pulumi:"excludesPattern"`
	IncludesPattern        *string `pulumi:"includesPattern"`
	// - the identity key of the repo
	Key           *string  `pulumi:"key"`
	Notes         *string  `pulumi:"notes"`
	PackageType   *string  `pulumi:"packageType"`
	PropertySets  []string `pulumi:"propertySets"`
	RepoLayoutRef *string  `pulumi:"repoLayoutRef"`
	XrayIndex     *bool    `pulumi:"xrayIndex"`
}

type LocalGitltfsRepositoryState struct {
	// When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and
	// therefore requires strict content moderation to prevent malicious users from uploading content that may compromise
	// security (e.g., cross-site scripting attacks).
	ArchiveBrowsingEnabled pulumi.BoolPtrInput
	BlackedOut             pulumi.BoolPtrInput
	Description            pulumi.StringPtrInput
	DownloadDirect         pulumi.BoolPtrInput
	ExcludesPattern        pulumi.StringPtrInput
	IncludesPattern        pulumi.StringPtrInput
	// - the identity key of the repo
	Key           pulumi.StringPtrInput
	Notes         pulumi.StringPtrInput
	PackageType   pulumi.StringPtrInput
	PropertySets  pulumi.StringArrayInput
	RepoLayoutRef pulumi.StringPtrInput
	XrayIndex     pulumi.BoolPtrInput
}

func (LocalGitltfsRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*localGitltfsRepositoryState)(nil)).Elem()
}

type localGitltfsRepositoryArgs struct {
	// When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and
	// therefore requires strict content moderation to prevent malicious users from uploading content that may compromise
	// security (e.g., cross-site scripting attacks).
	ArchiveBrowsingEnabled *bool   `pulumi:"archiveBrowsingEnabled"`
	BlackedOut             *bool   `pulumi:"blackedOut"`
	Description            *string `pulumi:"description"`
	DownloadDirect         *bool   `pulumi:"downloadDirect"`
	ExcludesPattern        *string `pulumi:"excludesPattern"`
	IncludesPattern        *string `pulumi:"includesPattern"`
	// - the identity key of the repo
	Key           string   `pulumi:"key"`
	Notes         *string  `pulumi:"notes"`
	PropertySets  []string `pulumi:"propertySets"`
	RepoLayoutRef *string  `pulumi:"repoLayoutRef"`
	XrayIndex     *bool    `pulumi:"xrayIndex"`
}

// The set of arguments for constructing a LocalGitltfsRepository resource.
type LocalGitltfsRepositoryArgs struct {
	// When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and
	// therefore requires strict content moderation to prevent malicious users from uploading content that may compromise
	// security (e.g., cross-site scripting attacks).
	ArchiveBrowsingEnabled pulumi.BoolPtrInput
	BlackedOut             pulumi.BoolPtrInput
	Description            pulumi.StringPtrInput
	DownloadDirect         pulumi.BoolPtrInput
	ExcludesPattern        pulumi.StringPtrInput
	IncludesPattern        pulumi.StringPtrInput
	// - the identity key of the repo
	Key           pulumi.StringInput
	Notes         pulumi.StringPtrInput
	PropertySets  pulumi.StringArrayInput
	RepoLayoutRef pulumi.StringPtrInput
	XrayIndex     pulumi.BoolPtrInput
}

func (LocalGitltfsRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*localGitltfsRepositoryArgs)(nil)).Elem()
}

type LocalGitltfsRepositoryInput interface {
	pulumi.Input

	ToLocalGitltfsRepositoryOutput() LocalGitltfsRepositoryOutput
	ToLocalGitltfsRepositoryOutputWithContext(ctx context.Context) LocalGitltfsRepositoryOutput
}

func (*LocalGitltfsRepository) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalGitltfsRepository)(nil))
}

func (i *LocalGitltfsRepository) ToLocalGitltfsRepositoryOutput() LocalGitltfsRepositoryOutput {
	return i.ToLocalGitltfsRepositoryOutputWithContext(context.Background())
}

func (i *LocalGitltfsRepository) ToLocalGitltfsRepositoryOutputWithContext(ctx context.Context) LocalGitltfsRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalGitltfsRepositoryOutput)
}

func (i *LocalGitltfsRepository) ToLocalGitltfsRepositoryPtrOutput() LocalGitltfsRepositoryPtrOutput {
	return i.ToLocalGitltfsRepositoryPtrOutputWithContext(context.Background())
}

func (i *LocalGitltfsRepository) ToLocalGitltfsRepositoryPtrOutputWithContext(ctx context.Context) LocalGitltfsRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalGitltfsRepositoryPtrOutput)
}

type LocalGitltfsRepositoryPtrInput interface {
	pulumi.Input

	ToLocalGitltfsRepositoryPtrOutput() LocalGitltfsRepositoryPtrOutput
	ToLocalGitltfsRepositoryPtrOutputWithContext(ctx context.Context) LocalGitltfsRepositoryPtrOutput
}

type localGitltfsRepositoryPtrType LocalGitltfsRepositoryArgs

func (*localGitltfsRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalGitltfsRepository)(nil))
}

func (i *localGitltfsRepositoryPtrType) ToLocalGitltfsRepositoryPtrOutput() LocalGitltfsRepositoryPtrOutput {
	return i.ToLocalGitltfsRepositoryPtrOutputWithContext(context.Background())
}

func (i *localGitltfsRepositoryPtrType) ToLocalGitltfsRepositoryPtrOutputWithContext(ctx context.Context) LocalGitltfsRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalGitltfsRepositoryPtrOutput)
}

// LocalGitltfsRepositoryArrayInput is an input type that accepts LocalGitltfsRepositoryArray and LocalGitltfsRepositoryArrayOutput values.
// You can construct a concrete instance of `LocalGitltfsRepositoryArrayInput` via:
//
//          LocalGitltfsRepositoryArray{ LocalGitltfsRepositoryArgs{...} }
type LocalGitltfsRepositoryArrayInput interface {
	pulumi.Input

	ToLocalGitltfsRepositoryArrayOutput() LocalGitltfsRepositoryArrayOutput
	ToLocalGitltfsRepositoryArrayOutputWithContext(context.Context) LocalGitltfsRepositoryArrayOutput
}

type LocalGitltfsRepositoryArray []LocalGitltfsRepositoryInput

func (LocalGitltfsRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LocalGitltfsRepository)(nil)).Elem()
}

func (i LocalGitltfsRepositoryArray) ToLocalGitltfsRepositoryArrayOutput() LocalGitltfsRepositoryArrayOutput {
	return i.ToLocalGitltfsRepositoryArrayOutputWithContext(context.Background())
}

func (i LocalGitltfsRepositoryArray) ToLocalGitltfsRepositoryArrayOutputWithContext(ctx context.Context) LocalGitltfsRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalGitltfsRepositoryArrayOutput)
}

// LocalGitltfsRepositoryMapInput is an input type that accepts LocalGitltfsRepositoryMap and LocalGitltfsRepositoryMapOutput values.
// You can construct a concrete instance of `LocalGitltfsRepositoryMapInput` via:
//
//          LocalGitltfsRepositoryMap{ "key": LocalGitltfsRepositoryArgs{...} }
type LocalGitltfsRepositoryMapInput interface {
	pulumi.Input

	ToLocalGitltfsRepositoryMapOutput() LocalGitltfsRepositoryMapOutput
	ToLocalGitltfsRepositoryMapOutputWithContext(context.Context) LocalGitltfsRepositoryMapOutput
}

type LocalGitltfsRepositoryMap map[string]LocalGitltfsRepositoryInput

func (LocalGitltfsRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LocalGitltfsRepository)(nil)).Elem()
}

func (i LocalGitltfsRepositoryMap) ToLocalGitltfsRepositoryMapOutput() LocalGitltfsRepositoryMapOutput {
	return i.ToLocalGitltfsRepositoryMapOutputWithContext(context.Background())
}

func (i LocalGitltfsRepositoryMap) ToLocalGitltfsRepositoryMapOutputWithContext(ctx context.Context) LocalGitltfsRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalGitltfsRepositoryMapOutput)
}

type LocalGitltfsRepositoryOutput struct{ *pulumi.OutputState }

func (LocalGitltfsRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalGitltfsRepository)(nil))
}

func (o LocalGitltfsRepositoryOutput) ToLocalGitltfsRepositoryOutput() LocalGitltfsRepositoryOutput {
	return o
}

func (o LocalGitltfsRepositoryOutput) ToLocalGitltfsRepositoryOutputWithContext(ctx context.Context) LocalGitltfsRepositoryOutput {
	return o
}

func (o LocalGitltfsRepositoryOutput) ToLocalGitltfsRepositoryPtrOutput() LocalGitltfsRepositoryPtrOutput {
	return o.ToLocalGitltfsRepositoryPtrOutputWithContext(context.Background())
}

func (o LocalGitltfsRepositoryOutput) ToLocalGitltfsRepositoryPtrOutputWithContext(ctx context.Context) LocalGitltfsRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocalGitltfsRepository) *LocalGitltfsRepository {
		return &v
	}).(LocalGitltfsRepositoryPtrOutput)
}

type LocalGitltfsRepositoryPtrOutput struct{ *pulumi.OutputState }

func (LocalGitltfsRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalGitltfsRepository)(nil))
}

func (o LocalGitltfsRepositoryPtrOutput) ToLocalGitltfsRepositoryPtrOutput() LocalGitltfsRepositoryPtrOutput {
	return o
}

func (o LocalGitltfsRepositoryPtrOutput) ToLocalGitltfsRepositoryPtrOutputWithContext(ctx context.Context) LocalGitltfsRepositoryPtrOutput {
	return o
}

func (o LocalGitltfsRepositoryPtrOutput) Elem() LocalGitltfsRepositoryOutput {
	return o.ApplyT(func(v *LocalGitltfsRepository) LocalGitltfsRepository {
		if v != nil {
			return *v
		}
		var ret LocalGitltfsRepository
		return ret
	}).(LocalGitltfsRepositoryOutput)
}

type LocalGitltfsRepositoryArrayOutput struct{ *pulumi.OutputState }

func (LocalGitltfsRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocalGitltfsRepository)(nil))
}

func (o LocalGitltfsRepositoryArrayOutput) ToLocalGitltfsRepositoryArrayOutput() LocalGitltfsRepositoryArrayOutput {
	return o
}

func (o LocalGitltfsRepositoryArrayOutput) ToLocalGitltfsRepositoryArrayOutputWithContext(ctx context.Context) LocalGitltfsRepositoryArrayOutput {
	return o
}

func (o LocalGitltfsRepositoryArrayOutput) Index(i pulumi.IntInput) LocalGitltfsRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LocalGitltfsRepository {
		return vs[0].([]LocalGitltfsRepository)[vs[1].(int)]
	}).(LocalGitltfsRepositoryOutput)
}

type LocalGitltfsRepositoryMapOutput struct{ *pulumi.OutputState }

func (LocalGitltfsRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LocalGitltfsRepository)(nil))
}

func (o LocalGitltfsRepositoryMapOutput) ToLocalGitltfsRepositoryMapOutput() LocalGitltfsRepositoryMapOutput {
	return o
}

func (o LocalGitltfsRepositoryMapOutput) ToLocalGitltfsRepositoryMapOutputWithContext(ctx context.Context) LocalGitltfsRepositoryMapOutput {
	return o
}

func (o LocalGitltfsRepositoryMapOutput) MapIndex(k pulumi.StringInput) LocalGitltfsRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) LocalGitltfsRepository {
		return vs[0].(map[string]LocalGitltfsRepository)[vs[1].(string)]
	}).(LocalGitltfsRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LocalGitltfsRepositoryInput)(nil)).Elem(), &LocalGitltfsRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalGitltfsRepositoryPtrInput)(nil)).Elem(), &LocalGitltfsRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalGitltfsRepositoryArrayInput)(nil)).Elem(), LocalGitltfsRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalGitltfsRepositoryMapInput)(nil)).Elem(), LocalGitltfsRepositoryMap{})
	pulumi.RegisterOutputType(LocalGitltfsRepositoryOutput{})
	pulumi.RegisterOutputType(LocalGitltfsRepositoryPtrOutput{})
	pulumi.RegisterOutputType(LocalGitltfsRepositoryArrayOutput{})
	pulumi.RegisterOutputType(LocalGitltfsRepositoryMapOutput{})
}
