// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Artifactory Federated Vagrant Repository Resource
//
// Creates a federated Vagrant repository
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := artifactory.NewFederatedVagrantRepository(ctx, "terraform-federated-test-vagrant-repo", &artifactory.FederatedVagrantRepositoryArgs{
// 			Key: pulumi.String("terraform-federated-test-vagrant-repo"),
// 			Members: FederatedVagrantRepositoryMemberArray{
// 				&FederatedVagrantRepositoryMemberArgs{
// 					Enable: true,
// 					Url:    pulumi.String("http://tempurl.org/artifactory/terraform-federated-test-vagrant-repo"),
// 				},
// 				&FederatedVagrantRepositoryMemberArgs{
// 					Enable: true,
// 					Url:    pulumi.String("http://tempurl2.org/artifactory/terraform-federated-test-vagrant-repo-2"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type FederatedVagrantRepository struct {
	pulumi.CustomResourceState

	// When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and
	// therefore requires strict content moderation to prevent malicious users from uploading content that may compromise
	// security (e.g., cross-site scripting attacks).
	ArchiveBrowsingEnabled pulumi.BoolPtrOutput   `pulumi:"archiveBrowsingEnabled"`
	BlackedOut             pulumi.BoolPtrOutput   `pulumi:"blackedOut"`
	Description            pulumi.StringPtrOutput `pulumi:"description"`
	DownloadDirect         pulumi.BoolPtrOutput   `pulumi:"downloadDirect"`
	ExcludesPattern        pulumi.StringOutput    `pulumi:"excludesPattern"`
	IncludesPattern        pulumi.StringOutput    `pulumi:"includesPattern"`
	// - the identity key of the repo
	Key pulumi.StringOutput `pulumi:"key"`
	// - The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.
	Members     FederatedVagrantRepositoryMemberArrayOutput `pulumi:"members"`
	Notes       pulumi.StringPtrOutput                      `pulumi:"notes"`
	PackageType pulumi.StringOutput                         `pulumi:"packageType"`
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution pulumi.BoolPtrOutput `pulumi:"priorityResolution"`
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments pulumi.StringArrayOutput `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed
	// with project key, separated by a dash.
	ProjectKey    pulumi.StringPtrOutput   `pulumi:"projectKey"`
	PropertySets  pulumi.StringArrayOutput `pulumi:"propertySets"`
	RepoLayoutRef pulumi.StringOutput      `pulumi:"repoLayoutRef"`
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
	// Xray settings.
	XrayIndex pulumi.BoolPtrOutput `pulumi:"xrayIndex"`
}

// NewFederatedVagrantRepository registers a new resource with the given unique name, arguments, and options.
func NewFederatedVagrantRepository(ctx *pulumi.Context,
	name string, args *FederatedVagrantRepositoryArgs, opts ...pulumi.ResourceOption) (*FederatedVagrantRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	var resource FederatedVagrantRepository
	err := ctx.RegisterResource("artifactory:index/federatedVagrantRepository:FederatedVagrantRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFederatedVagrantRepository gets an existing FederatedVagrantRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFederatedVagrantRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FederatedVagrantRepositoryState, opts ...pulumi.ResourceOption) (*FederatedVagrantRepository, error) {
	var resource FederatedVagrantRepository
	err := ctx.ReadResource("artifactory:index/federatedVagrantRepository:FederatedVagrantRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FederatedVagrantRepository resources.
type federatedVagrantRepositoryState struct {
	// When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and
	// therefore requires strict content moderation to prevent malicious users from uploading content that may compromise
	// security (e.g., cross-site scripting attacks).
	ArchiveBrowsingEnabled *bool   `pulumi:"archiveBrowsingEnabled"`
	BlackedOut             *bool   `pulumi:"blackedOut"`
	Description            *string `pulumi:"description"`
	DownloadDirect         *bool   `pulumi:"downloadDirect"`
	ExcludesPattern        *string `pulumi:"excludesPattern"`
	IncludesPattern        *string `pulumi:"includesPattern"`
	// - the identity key of the repo
	Key *string `pulumi:"key"`
	// - The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.
	Members     []FederatedVagrantRepositoryMember `pulumi:"members"`
	Notes       *string                            `pulumi:"notes"`
	PackageType *string                            `pulumi:"packageType"`
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution *bool `pulumi:"priorityResolution"`
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments []string `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed
	// with project key, separated by a dash.
	ProjectKey    *string  `pulumi:"projectKey"`
	PropertySets  []string `pulumi:"propertySets"`
	RepoLayoutRef *string  `pulumi:"repoLayoutRef"`
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
	// Xray settings.
	XrayIndex *bool `pulumi:"xrayIndex"`
}

type FederatedVagrantRepositoryState struct {
	// When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and
	// therefore requires strict content moderation to prevent malicious users from uploading content that may compromise
	// security (e.g., cross-site scripting attacks).
	ArchiveBrowsingEnabled pulumi.BoolPtrInput
	BlackedOut             pulumi.BoolPtrInput
	Description            pulumi.StringPtrInput
	DownloadDirect         pulumi.BoolPtrInput
	ExcludesPattern        pulumi.StringPtrInput
	IncludesPattern        pulumi.StringPtrInput
	// - the identity key of the repo
	Key pulumi.StringPtrInput
	// - The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.
	Members     FederatedVagrantRepositoryMemberArrayInput
	Notes       pulumi.StringPtrInput
	PackageType pulumi.StringPtrInput
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution pulumi.BoolPtrInput
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments pulumi.StringArrayInput
	// Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed
	// with project key, separated by a dash.
	ProjectKey    pulumi.StringPtrInput
	PropertySets  pulumi.StringArrayInput
	RepoLayoutRef pulumi.StringPtrInput
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
	// Xray settings.
	XrayIndex pulumi.BoolPtrInput
}

func (FederatedVagrantRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*federatedVagrantRepositoryState)(nil)).Elem()
}

type federatedVagrantRepositoryArgs struct {
	// When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and
	// therefore requires strict content moderation to prevent malicious users from uploading content that may compromise
	// security (e.g., cross-site scripting attacks).
	ArchiveBrowsingEnabled *bool   `pulumi:"archiveBrowsingEnabled"`
	BlackedOut             *bool   `pulumi:"blackedOut"`
	Description            *string `pulumi:"description"`
	DownloadDirect         *bool   `pulumi:"downloadDirect"`
	ExcludesPattern        *string `pulumi:"excludesPattern"`
	IncludesPattern        *string `pulumi:"includesPattern"`
	// - the identity key of the repo
	Key string `pulumi:"key"`
	// - The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.
	Members []FederatedVagrantRepositoryMember `pulumi:"members"`
	Notes   *string                            `pulumi:"notes"`
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution *bool `pulumi:"priorityResolution"`
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments []string `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed
	// with project key, separated by a dash.
	ProjectKey    *string  `pulumi:"projectKey"`
	PropertySets  []string `pulumi:"propertySets"`
	RepoLayoutRef *string  `pulumi:"repoLayoutRef"`
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
	// Xray settings.
	XrayIndex *bool `pulumi:"xrayIndex"`
}

// The set of arguments for constructing a FederatedVagrantRepository resource.
type FederatedVagrantRepositoryArgs struct {
	// When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and
	// therefore requires strict content moderation to prevent malicious users from uploading content that may compromise
	// security (e.g., cross-site scripting attacks).
	ArchiveBrowsingEnabled pulumi.BoolPtrInput
	BlackedOut             pulumi.BoolPtrInput
	Description            pulumi.StringPtrInput
	DownloadDirect         pulumi.BoolPtrInput
	ExcludesPattern        pulumi.StringPtrInput
	IncludesPattern        pulumi.StringPtrInput
	// - the identity key of the repo
	Key pulumi.StringInput
	// - The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.
	Members FederatedVagrantRepositoryMemberArrayInput
	Notes   pulumi.StringPtrInput
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution pulumi.BoolPtrInput
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments pulumi.StringArrayInput
	// Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed
	// with project key, separated by a dash.
	ProjectKey    pulumi.StringPtrInput
	PropertySets  pulumi.StringArrayInput
	RepoLayoutRef pulumi.StringPtrInput
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via
	// Xray settings.
	XrayIndex pulumi.BoolPtrInput
}

func (FederatedVagrantRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*federatedVagrantRepositoryArgs)(nil)).Elem()
}

type FederatedVagrantRepositoryInput interface {
	pulumi.Input

	ToFederatedVagrantRepositoryOutput() FederatedVagrantRepositoryOutput
	ToFederatedVagrantRepositoryOutputWithContext(ctx context.Context) FederatedVagrantRepositoryOutput
}

func (*FederatedVagrantRepository) ElementType() reflect.Type {
	return reflect.TypeOf((**FederatedVagrantRepository)(nil)).Elem()
}

func (i *FederatedVagrantRepository) ToFederatedVagrantRepositoryOutput() FederatedVagrantRepositoryOutput {
	return i.ToFederatedVagrantRepositoryOutputWithContext(context.Background())
}

func (i *FederatedVagrantRepository) ToFederatedVagrantRepositoryOutputWithContext(ctx context.Context) FederatedVagrantRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedVagrantRepositoryOutput)
}

// FederatedVagrantRepositoryArrayInput is an input type that accepts FederatedVagrantRepositoryArray and FederatedVagrantRepositoryArrayOutput values.
// You can construct a concrete instance of `FederatedVagrantRepositoryArrayInput` via:
//
//          FederatedVagrantRepositoryArray{ FederatedVagrantRepositoryArgs{...} }
type FederatedVagrantRepositoryArrayInput interface {
	pulumi.Input

	ToFederatedVagrantRepositoryArrayOutput() FederatedVagrantRepositoryArrayOutput
	ToFederatedVagrantRepositoryArrayOutputWithContext(context.Context) FederatedVagrantRepositoryArrayOutput
}

type FederatedVagrantRepositoryArray []FederatedVagrantRepositoryInput

func (FederatedVagrantRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FederatedVagrantRepository)(nil)).Elem()
}

func (i FederatedVagrantRepositoryArray) ToFederatedVagrantRepositoryArrayOutput() FederatedVagrantRepositoryArrayOutput {
	return i.ToFederatedVagrantRepositoryArrayOutputWithContext(context.Background())
}

func (i FederatedVagrantRepositoryArray) ToFederatedVagrantRepositoryArrayOutputWithContext(ctx context.Context) FederatedVagrantRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedVagrantRepositoryArrayOutput)
}

// FederatedVagrantRepositoryMapInput is an input type that accepts FederatedVagrantRepositoryMap and FederatedVagrantRepositoryMapOutput values.
// You can construct a concrete instance of `FederatedVagrantRepositoryMapInput` via:
//
//          FederatedVagrantRepositoryMap{ "key": FederatedVagrantRepositoryArgs{...} }
type FederatedVagrantRepositoryMapInput interface {
	pulumi.Input

	ToFederatedVagrantRepositoryMapOutput() FederatedVagrantRepositoryMapOutput
	ToFederatedVagrantRepositoryMapOutputWithContext(context.Context) FederatedVagrantRepositoryMapOutput
}

type FederatedVagrantRepositoryMap map[string]FederatedVagrantRepositoryInput

func (FederatedVagrantRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FederatedVagrantRepository)(nil)).Elem()
}

func (i FederatedVagrantRepositoryMap) ToFederatedVagrantRepositoryMapOutput() FederatedVagrantRepositoryMapOutput {
	return i.ToFederatedVagrantRepositoryMapOutputWithContext(context.Background())
}

func (i FederatedVagrantRepositoryMap) ToFederatedVagrantRepositoryMapOutputWithContext(ctx context.Context) FederatedVagrantRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedVagrantRepositoryMapOutput)
}

type FederatedVagrantRepositoryOutput struct{ *pulumi.OutputState }

func (FederatedVagrantRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FederatedVagrantRepository)(nil)).Elem()
}

func (o FederatedVagrantRepositoryOutput) ToFederatedVagrantRepositoryOutput() FederatedVagrantRepositoryOutput {
	return o
}

func (o FederatedVagrantRepositoryOutput) ToFederatedVagrantRepositoryOutputWithContext(ctx context.Context) FederatedVagrantRepositoryOutput {
	return o
}

type FederatedVagrantRepositoryArrayOutput struct{ *pulumi.OutputState }

func (FederatedVagrantRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FederatedVagrantRepository)(nil)).Elem()
}

func (o FederatedVagrantRepositoryArrayOutput) ToFederatedVagrantRepositoryArrayOutput() FederatedVagrantRepositoryArrayOutput {
	return o
}

func (o FederatedVagrantRepositoryArrayOutput) ToFederatedVagrantRepositoryArrayOutputWithContext(ctx context.Context) FederatedVagrantRepositoryArrayOutput {
	return o
}

func (o FederatedVagrantRepositoryArrayOutput) Index(i pulumi.IntInput) FederatedVagrantRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FederatedVagrantRepository {
		return vs[0].([]*FederatedVagrantRepository)[vs[1].(int)]
	}).(FederatedVagrantRepositoryOutput)
}

type FederatedVagrantRepositoryMapOutput struct{ *pulumi.OutputState }

func (FederatedVagrantRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FederatedVagrantRepository)(nil)).Elem()
}

func (o FederatedVagrantRepositoryMapOutput) ToFederatedVagrantRepositoryMapOutput() FederatedVagrantRepositoryMapOutput {
	return o
}

func (o FederatedVagrantRepositoryMapOutput) ToFederatedVagrantRepositoryMapOutputWithContext(ctx context.Context) FederatedVagrantRepositoryMapOutput {
	return o
}

func (o FederatedVagrantRepositoryMapOutput) MapIndex(k pulumi.StringInput) FederatedVagrantRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FederatedVagrantRepository {
		return vs[0].(map[string]*FederatedVagrantRepository)[vs[1].(string)]
	}).(FederatedVagrantRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedVagrantRepositoryInput)(nil)).Elem(), &FederatedVagrantRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedVagrantRepositoryArrayInput)(nil)).Elem(), FederatedVagrantRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedVagrantRepositoryMapInput)(nil)).Elem(), FederatedVagrantRepositoryMap{})
	pulumi.RegisterOutputType(FederatedVagrantRepositoryOutput{})
	pulumi.RegisterOutputType(FederatedVagrantRepositoryArrayOutput{})
	pulumi.RegisterOutputType(FederatedVagrantRepositoryMapOutput{})
}
