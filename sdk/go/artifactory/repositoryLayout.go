// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RepositoryLayout struct {
	pulumi.CustomResourceState

	// Please refer to: [Path
	// Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-ModulesandPathPatternsusedbyRepositoryLayouts)
	// in the Artifactory Wiki documentation.
	ArtifactPathPattern pulumi.StringOutput `pulumi:"artifactPathPattern"`
	// Please refer to: [Descriptor Path
	// Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-DescriptorPathPatterns) in
	// the Artifactory Wiki documentation.
	DescriptorPathPattern pulumi.StringPtrOutput `pulumi:"descriptorPathPattern"`
	// When set, 'descriptor_path_pattern' will be used. Default to 'false'.
	DistinctiveDescriptorPathPattern pulumi.BoolPtrOutput `pulumi:"distinctiveDescriptorPathPattern"`
	// A regular expression matching the integration revision string appearing in a file name as part of the artifact's path.
	// For example, 'SNAPSHOT|(?:(?:[0-9]{8}.[0-9]{6})-(?:[0-9]+))', in Maven. Note! Take care not to introduce any regexp
	// capturing groups within this expression. If not applicable use '.*'
	FileIntegrationRevisionRegexp pulumi.StringOutput `pulumi:"fileIntegrationRevisionRegexp"`
	// A regular expression matching the integration revision string appearing in a folder name as part of the artifact's path.
	// For example, 'SNAPSHOT', in Maven. Note! Take care not to introduce any regexp capturing groups within this expression.
	// If not applicable use '.*'
	FolderIntegrationRevisionRegexp pulumi.StringOutput `pulumi:"folderIntegrationRevisionRegexp"`
	// Layout name
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewRepositoryLayout registers a new resource with the given unique name, arguments, and options.
func NewRepositoryLayout(ctx *pulumi.Context,
	name string, args *RepositoryLayoutArgs, opts ...pulumi.ResourceOption) (*RepositoryLayout, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ArtifactPathPattern == nil {
		return nil, errors.New("invalid value for required argument 'ArtifactPathPattern'")
	}
	if args.FileIntegrationRevisionRegexp == nil {
		return nil, errors.New("invalid value for required argument 'FileIntegrationRevisionRegexp'")
	}
	if args.FolderIntegrationRevisionRegexp == nil {
		return nil, errors.New("invalid value for required argument 'FolderIntegrationRevisionRegexp'")
	}
	var resource RepositoryLayout
	err := ctx.RegisterResource("artifactory:index/repositoryLayout:RepositoryLayout", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepositoryLayout gets an existing RepositoryLayout resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepositoryLayout(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryLayoutState, opts ...pulumi.ResourceOption) (*RepositoryLayout, error) {
	var resource RepositoryLayout
	err := ctx.ReadResource("artifactory:index/repositoryLayout:RepositoryLayout", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RepositoryLayout resources.
type repositoryLayoutState struct {
	// Please refer to: [Path
	// Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-ModulesandPathPatternsusedbyRepositoryLayouts)
	// in the Artifactory Wiki documentation.
	ArtifactPathPattern *string `pulumi:"artifactPathPattern"`
	// Please refer to: [Descriptor Path
	// Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-DescriptorPathPatterns) in
	// the Artifactory Wiki documentation.
	DescriptorPathPattern *string `pulumi:"descriptorPathPattern"`
	// When set, 'descriptor_path_pattern' will be used. Default to 'false'.
	DistinctiveDescriptorPathPattern *bool `pulumi:"distinctiveDescriptorPathPattern"`
	// A regular expression matching the integration revision string appearing in a file name as part of the artifact's path.
	// For example, 'SNAPSHOT|(?:(?:[0-9]{8}.[0-9]{6})-(?:[0-9]+))', in Maven. Note! Take care not to introduce any regexp
	// capturing groups within this expression. If not applicable use '.*'
	FileIntegrationRevisionRegexp *string `pulumi:"fileIntegrationRevisionRegexp"`
	// A regular expression matching the integration revision string appearing in a folder name as part of the artifact's path.
	// For example, 'SNAPSHOT', in Maven. Note! Take care not to introduce any regexp capturing groups within this expression.
	// If not applicable use '.*'
	FolderIntegrationRevisionRegexp *string `pulumi:"folderIntegrationRevisionRegexp"`
	// Layout name
	Name *string `pulumi:"name"`
}

type RepositoryLayoutState struct {
	// Please refer to: [Path
	// Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-ModulesandPathPatternsusedbyRepositoryLayouts)
	// in the Artifactory Wiki documentation.
	ArtifactPathPattern pulumi.StringPtrInput
	// Please refer to: [Descriptor Path
	// Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-DescriptorPathPatterns) in
	// the Artifactory Wiki documentation.
	DescriptorPathPattern pulumi.StringPtrInput
	// When set, 'descriptor_path_pattern' will be used. Default to 'false'.
	DistinctiveDescriptorPathPattern pulumi.BoolPtrInput
	// A regular expression matching the integration revision string appearing in a file name as part of the artifact's path.
	// For example, 'SNAPSHOT|(?:(?:[0-9]{8}.[0-9]{6})-(?:[0-9]+))', in Maven. Note! Take care not to introduce any regexp
	// capturing groups within this expression. If not applicable use '.*'
	FileIntegrationRevisionRegexp pulumi.StringPtrInput
	// A regular expression matching the integration revision string appearing in a folder name as part of the artifact's path.
	// For example, 'SNAPSHOT', in Maven. Note! Take care not to introduce any regexp capturing groups within this expression.
	// If not applicable use '.*'
	FolderIntegrationRevisionRegexp pulumi.StringPtrInput
	// Layout name
	Name pulumi.StringPtrInput
}

func (RepositoryLayoutState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryLayoutState)(nil)).Elem()
}

type repositoryLayoutArgs struct {
	// Please refer to: [Path
	// Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-ModulesandPathPatternsusedbyRepositoryLayouts)
	// in the Artifactory Wiki documentation.
	ArtifactPathPattern string `pulumi:"artifactPathPattern"`
	// Please refer to: [Descriptor Path
	// Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-DescriptorPathPatterns) in
	// the Artifactory Wiki documentation.
	DescriptorPathPattern *string `pulumi:"descriptorPathPattern"`
	// When set, 'descriptor_path_pattern' will be used. Default to 'false'.
	DistinctiveDescriptorPathPattern *bool `pulumi:"distinctiveDescriptorPathPattern"`
	// A regular expression matching the integration revision string appearing in a file name as part of the artifact's path.
	// For example, 'SNAPSHOT|(?:(?:[0-9]{8}.[0-9]{6})-(?:[0-9]+))', in Maven. Note! Take care not to introduce any regexp
	// capturing groups within this expression. If not applicable use '.*'
	FileIntegrationRevisionRegexp string `pulumi:"fileIntegrationRevisionRegexp"`
	// A regular expression matching the integration revision string appearing in a folder name as part of the artifact's path.
	// For example, 'SNAPSHOT', in Maven. Note! Take care not to introduce any regexp capturing groups within this expression.
	// If not applicable use '.*'
	FolderIntegrationRevisionRegexp string `pulumi:"folderIntegrationRevisionRegexp"`
	// Layout name
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a RepositoryLayout resource.
type RepositoryLayoutArgs struct {
	// Please refer to: [Path
	// Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-ModulesandPathPatternsusedbyRepositoryLayouts)
	// in the Artifactory Wiki documentation.
	ArtifactPathPattern pulumi.StringInput
	// Please refer to: [Descriptor Path
	// Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-DescriptorPathPatterns) in
	// the Artifactory Wiki documentation.
	DescriptorPathPattern pulumi.StringPtrInput
	// When set, 'descriptor_path_pattern' will be used. Default to 'false'.
	DistinctiveDescriptorPathPattern pulumi.BoolPtrInput
	// A regular expression matching the integration revision string appearing in a file name as part of the artifact's path.
	// For example, 'SNAPSHOT|(?:(?:[0-9]{8}.[0-9]{6})-(?:[0-9]+))', in Maven. Note! Take care not to introduce any regexp
	// capturing groups within this expression. If not applicable use '.*'
	FileIntegrationRevisionRegexp pulumi.StringInput
	// A regular expression matching the integration revision string appearing in a folder name as part of the artifact's path.
	// For example, 'SNAPSHOT', in Maven. Note! Take care not to introduce any regexp capturing groups within this expression.
	// If not applicable use '.*'
	FolderIntegrationRevisionRegexp pulumi.StringInput
	// Layout name
	Name pulumi.StringPtrInput
}

func (RepositoryLayoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryLayoutArgs)(nil)).Elem()
}

type RepositoryLayoutInput interface {
	pulumi.Input

	ToRepositoryLayoutOutput() RepositoryLayoutOutput
	ToRepositoryLayoutOutputWithContext(ctx context.Context) RepositoryLayoutOutput
}

func (*RepositoryLayout) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryLayout)(nil)).Elem()
}

func (i *RepositoryLayout) ToRepositoryLayoutOutput() RepositoryLayoutOutput {
	return i.ToRepositoryLayoutOutputWithContext(context.Background())
}

func (i *RepositoryLayout) ToRepositoryLayoutOutputWithContext(ctx context.Context) RepositoryLayoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryLayoutOutput)
}

// RepositoryLayoutArrayInput is an input type that accepts RepositoryLayoutArray and RepositoryLayoutArrayOutput values.
// You can construct a concrete instance of `RepositoryLayoutArrayInput` via:
//
//	RepositoryLayoutArray{ RepositoryLayoutArgs{...} }
type RepositoryLayoutArrayInput interface {
	pulumi.Input

	ToRepositoryLayoutArrayOutput() RepositoryLayoutArrayOutput
	ToRepositoryLayoutArrayOutputWithContext(context.Context) RepositoryLayoutArrayOutput
}

type RepositoryLayoutArray []RepositoryLayoutInput

func (RepositoryLayoutArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryLayout)(nil)).Elem()
}

func (i RepositoryLayoutArray) ToRepositoryLayoutArrayOutput() RepositoryLayoutArrayOutput {
	return i.ToRepositoryLayoutArrayOutputWithContext(context.Background())
}

func (i RepositoryLayoutArray) ToRepositoryLayoutArrayOutputWithContext(ctx context.Context) RepositoryLayoutArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryLayoutArrayOutput)
}

// RepositoryLayoutMapInput is an input type that accepts RepositoryLayoutMap and RepositoryLayoutMapOutput values.
// You can construct a concrete instance of `RepositoryLayoutMapInput` via:
//
//	RepositoryLayoutMap{ "key": RepositoryLayoutArgs{...} }
type RepositoryLayoutMapInput interface {
	pulumi.Input

	ToRepositoryLayoutMapOutput() RepositoryLayoutMapOutput
	ToRepositoryLayoutMapOutputWithContext(context.Context) RepositoryLayoutMapOutput
}

type RepositoryLayoutMap map[string]RepositoryLayoutInput

func (RepositoryLayoutMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryLayout)(nil)).Elem()
}

func (i RepositoryLayoutMap) ToRepositoryLayoutMapOutput() RepositoryLayoutMapOutput {
	return i.ToRepositoryLayoutMapOutputWithContext(context.Background())
}

func (i RepositoryLayoutMap) ToRepositoryLayoutMapOutputWithContext(ctx context.Context) RepositoryLayoutMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryLayoutMapOutput)
}

type RepositoryLayoutOutput struct{ *pulumi.OutputState }

func (RepositoryLayoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryLayout)(nil)).Elem()
}

func (o RepositoryLayoutOutput) ToRepositoryLayoutOutput() RepositoryLayoutOutput {
	return o
}

func (o RepositoryLayoutOutput) ToRepositoryLayoutOutputWithContext(ctx context.Context) RepositoryLayoutOutput {
	return o
}

// Please refer to: [Path
// Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-ModulesandPathPatternsusedbyRepositoryLayouts)
// in the Artifactory Wiki documentation.
func (o RepositoryLayoutOutput) ArtifactPathPattern() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryLayout) pulumi.StringOutput { return v.ArtifactPathPattern }).(pulumi.StringOutput)
}

// Please refer to: [Descriptor Path
// Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-DescriptorPathPatterns) in
// the Artifactory Wiki documentation.
func (o RepositoryLayoutOutput) DescriptorPathPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryLayout) pulumi.StringPtrOutput { return v.DescriptorPathPattern }).(pulumi.StringPtrOutput)
}

// When set, 'descriptor_path_pattern' will be used. Default to 'false'.
func (o RepositoryLayoutOutput) DistinctiveDescriptorPathPattern() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryLayout) pulumi.BoolPtrOutput { return v.DistinctiveDescriptorPathPattern }).(pulumi.BoolPtrOutput)
}

// A regular expression matching the integration revision string appearing in a file name as part of the artifact's path.
// For example, 'SNAPSHOT|(?:(?:[0-9]{8}.[0-9]{6})-(?:[0-9]+))', in Maven. Note! Take care not to introduce any regexp
// capturing groups within this expression. If not applicable use '.*'
func (o RepositoryLayoutOutput) FileIntegrationRevisionRegexp() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryLayout) pulumi.StringOutput { return v.FileIntegrationRevisionRegexp }).(pulumi.StringOutput)
}

// A regular expression matching the integration revision string appearing in a folder name as part of the artifact's path.
// For example, 'SNAPSHOT', in Maven. Note! Take care not to introduce any regexp capturing groups within this expression.
// If not applicable use '.*'
func (o RepositoryLayoutOutput) FolderIntegrationRevisionRegexp() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryLayout) pulumi.StringOutput { return v.FolderIntegrationRevisionRegexp }).(pulumi.StringOutput)
}

// Layout name
func (o RepositoryLayoutOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryLayout) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type RepositoryLayoutArrayOutput struct{ *pulumi.OutputState }

func (RepositoryLayoutArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryLayout)(nil)).Elem()
}

func (o RepositoryLayoutArrayOutput) ToRepositoryLayoutArrayOutput() RepositoryLayoutArrayOutput {
	return o
}

func (o RepositoryLayoutArrayOutput) ToRepositoryLayoutArrayOutputWithContext(ctx context.Context) RepositoryLayoutArrayOutput {
	return o
}

func (o RepositoryLayoutArrayOutput) Index(i pulumi.IntInput) RepositoryLayoutOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RepositoryLayout {
		return vs[0].([]*RepositoryLayout)[vs[1].(int)]
	}).(RepositoryLayoutOutput)
}

type RepositoryLayoutMapOutput struct{ *pulumi.OutputState }

func (RepositoryLayoutMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryLayout)(nil)).Elem()
}

func (o RepositoryLayoutMapOutput) ToRepositoryLayoutMapOutput() RepositoryLayoutMapOutput {
	return o
}

func (o RepositoryLayoutMapOutput) ToRepositoryLayoutMapOutputWithContext(ctx context.Context) RepositoryLayoutMapOutput {
	return o
}

func (o RepositoryLayoutMapOutput) MapIndex(k pulumi.StringInput) RepositoryLayoutOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RepositoryLayout {
		return vs[0].(map[string]*RepositoryLayout)[vs[1].(string)]
	}).(RepositoryLayoutOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryLayoutInput)(nil)).Elem(), &RepositoryLayout{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryLayoutArrayInput)(nil)).Elem(), RepositoryLayoutArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryLayoutMapInput)(nil)).Elem(), RepositoryLayoutMap{})
	pulumi.RegisterOutputType(RepositoryLayoutOutput{})
	pulumi.RegisterOutputType(RepositoryLayoutArrayOutput{})
	pulumi.RegisterOutputType(RepositoryLayoutMapOutput{})
}
