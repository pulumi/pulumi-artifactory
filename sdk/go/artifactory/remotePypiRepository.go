// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package artifactory

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Artifactory Remote Repository Resource
//
// Provides an Artifactory remote `pypi` repository resource. This provides pypi specific fields and is the only way to get them.
// Official documentation can be found [here](https://www.jfrog.com/confluence/display/JFROG/Package+Management).
// Pypi specific documentation can be found [here](https://www.jfrog.com/confluence/display/JFROG/PyPI+Repositories).
//
// ## Example Usage
//
// Includes only new and relevant fields, for anything else, see: generic repo.
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := artifactory.NewRemotePypiRepository(ctx, "pypi-remote", &artifactory.RemotePypiRepositoryArgs{
// 			Key:                  pulumi.String("pypi-remote-foo"),
// 			PypiRegistryUrl:      pulumi.String("https://pypi.org"),
// 			PypiRepositorySuffix: pulumi.String("simple"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type RemotePypiRepository struct {
	pulumi.CustomResourceState

	// Also known as 'Lenient Host Authentication', Allow credentials of this repository to be used on requests redirected to
	// any other host.
	AllowAnyHostAuth pulumi.BoolOutput `pulumi:"allowAnyHostAuth"`
	// The number of seconds the repository stays in assumed offline state after a connection error. At the end of this time,
	// an online check is attempted in order to reset the offline status. A value of 0 means the repository is never assumed
	// offline. Default to 300.
	AssumedOfflinePeriodSecs pulumi.IntPtrOutput `pulumi:"assumedOfflinePeriodSecs"`
	// (A.K.A 'Ignore Repository' on the UI) When set, the repository or its local cache do not participate in artifact
	// resolution.
	BlackedOut pulumi.BoolOutput `pulumi:"blackedOut"`
	// Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,
	// HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,
	// Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
	BlockMismatchingMimeTypes pulumi.BoolOutput `pulumi:"blockMismatchingMimeTypes"`
	// Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,
	// HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,
	// Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
	BypassHeadRequests   pulumi.BoolOutput   `pulumi:"bypassHeadRequests"`
	ClientTlsCertificate pulumi.StringOutput `pulumi:"clientTlsCertificate"`
	// Reference [JFROG Smart Remote Repositories](https://www.jfrog.com/confluence/display/JFROG/Smart+Remote+Repositories)
	ContentSynchronisation RemotePypiRepositoryContentSynchronisationOutput `pulumi:"contentSynchronisation"`
	Description            pulumi.StringOutput                              `pulumi:"description"`
	// Enables cookie management if the remote repository uses cookies to manage client state.
	EnableCookieManagement pulumi.BoolOutput   `pulumi:"enableCookieManagement"`
	ExcludesPattern        pulumi.StringOutput `pulumi:"excludesPattern"`
	// Deprecated: This field is not returned in a get payload but is offered on the UI. It's inserted here for inclusive and informational reasons. It does not function
	FailedRetrievalCachePeriodSecs pulumi.IntOutput    `pulumi:"failedRetrievalCachePeriodSecs"`
	HardFail                       pulumi.BoolOutput   `pulumi:"hardFail"`
	IncludesPattern                pulumi.StringOutput `pulumi:"includesPattern"`
	// The repository identifier. Must be unique system-wide
	Key          pulumi.StringOutput    `pulumi:"key"`
	LocalAddress pulumi.StringPtrOutput `pulumi:"localAddress"`
	// This is actually the missedRetrievalCachePeriodSecs in the API
	MissedCachePeriodSeconds pulumi.IntOutput       `pulumi:"missedCachePeriodSeconds"`
	Notes                    pulumi.StringPtrOutput `pulumi:"notes"`
	// If set, Artifactory does not try to fetch remote artifacts. Only locally-cached artifacts are retrieved.
	Offline     pulumi.BoolOutput      `pulumi:"offline"`
	PackageType pulumi.StringOutput    `pulumi:"packageType"`
	Password    pulumi.StringPtrOutput `pulumi:"password"`
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution pulumi.BoolOutput `pulumi:"priorityResolution"`
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments pulumi.StringArrayOutput `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey           pulumi.StringPtrOutput   `pulumi:"projectKey"`
	PropagateQueryParams pulumi.BoolPtrOutput     `pulumi:"propagateQueryParams"`
	PropertySets         pulumi.StringArrayOutput `pulumi:"propertySets"`
	Proxy                pulumi.StringOutput      `pulumi:"proxy"`
	// To configure the remote repo to proxy public external PyPI repository, or a PyPI repository hosted on another Artifactory server. See JFrog Pypi documentation [here](https://www.jfrog.com/confluence/display/JFROG/PyPI+Repositories) for the usage details. Default value is 'https://pypi.org'.
	PypiRegistryUrl pulumi.StringPtrOutput `pulumi:"pypiRegistryUrl"`
	// Usually should be left as a default for 'simple', unless the remote is a PyPI server that has custom registry suffix, like +simple in DevPI. Default value is 'simple'.
	PypiRepositorySuffix pulumi.StringPtrOutput `pulumi:"pypiRepositorySuffix"`
	RemoteRepoLayoutRef  pulumi.StringOutput    `pulumi:"remoteRepoLayoutRef"`
	RepoLayoutRef        pulumi.StringOutput    `pulumi:"repoLayoutRef"`
	// The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.
	RetrievalCachePeriodSeconds pulumi.IntOutput  `pulumi:"retrievalCachePeriodSeconds"`
	ShareConfiguration          pulumi.BoolOutput `pulumi:"shareConfiguration"`
	SocketTimeoutMillis         pulumi.IntOutput  `pulumi:"socketTimeoutMillis"`
	// When set, the repository should store cached artifacts locally. When not set, artifacts are not stored locally, and
	// direct repository-to-client streaming is used. This can be useful for multi-server setups over a high-speed LAN, with
	// one Artifactory caching certain data on central storage, and streaming it directly to satellite pass-though Artifactory
	// servers.
	StoreArtifactsLocally pulumi.BoolOutput `pulumi:"storeArtifactsLocally"`
	// When set, remote artifacts are fetched along with their properties.
	SynchronizeProperties               pulumi.BoolOutput      `pulumi:"synchronizeProperties"`
	UnusedArtifactsCleanupPeriodEnabled pulumi.BoolOutput      `pulumi:"unusedArtifactsCleanupPeriodEnabled"`
	UnusedArtifactsCleanupPeriodHours   pulumi.IntOutput       `pulumi:"unusedArtifactsCleanupPeriodHours"`
	Url                                 pulumi.StringOutput    `pulumi:"url"`
	Username                            pulumi.StringPtrOutput `pulumi:"username"`
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.
	XrayIndex pulumi.BoolPtrOutput `pulumi:"xrayIndex"`
}

// NewRemotePypiRepository registers a new resource with the given unique name, arguments, and options.
func NewRemotePypiRepository(ctx *pulumi.Context,
	name string, args *RemotePypiRepositoryArgs, opts ...pulumi.ResourceOption) (*RemotePypiRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	var resource RemotePypiRepository
	err := ctx.RegisterResource("artifactory:index/remotePypiRepository:RemotePypiRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRemotePypiRepository gets an existing RemotePypiRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRemotePypiRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RemotePypiRepositoryState, opts ...pulumi.ResourceOption) (*RemotePypiRepository, error) {
	var resource RemotePypiRepository
	err := ctx.ReadResource("artifactory:index/remotePypiRepository:RemotePypiRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RemotePypiRepository resources.
type remotePypiRepositoryState struct {
	// Also known as 'Lenient Host Authentication', Allow credentials of this repository to be used on requests redirected to
	// any other host.
	AllowAnyHostAuth *bool `pulumi:"allowAnyHostAuth"`
	// The number of seconds the repository stays in assumed offline state after a connection error. At the end of this time,
	// an online check is attempted in order to reset the offline status. A value of 0 means the repository is never assumed
	// offline. Default to 300.
	AssumedOfflinePeriodSecs *int `pulumi:"assumedOfflinePeriodSecs"`
	// (A.K.A 'Ignore Repository' on the UI) When set, the repository or its local cache do not participate in artifact
	// resolution.
	BlackedOut *bool `pulumi:"blackedOut"`
	// Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,
	// HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,
	// Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
	BlockMismatchingMimeTypes *bool `pulumi:"blockMismatchingMimeTypes"`
	// Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,
	// HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,
	// Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
	BypassHeadRequests   *bool   `pulumi:"bypassHeadRequests"`
	ClientTlsCertificate *string `pulumi:"clientTlsCertificate"`
	// Reference [JFROG Smart Remote Repositories](https://www.jfrog.com/confluence/display/JFROG/Smart+Remote+Repositories)
	ContentSynchronisation *RemotePypiRepositoryContentSynchronisation `pulumi:"contentSynchronisation"`
	Description            *string                                     `pulumi:"description"`
	// Enables cookie management if the remote repository uses cookies to manage client state.
	EnableCookieManagement *bool   `pulumi:"enableCookieManagement"`
	ExcludesPattern        *string `pulumi:"excludesPattern"`
	// Deprecated: This field is not returned in a get payload but is offered on the UI. It's inserted here for inclusive and informational reasons. It does not function
	FailedRetrievalCachePeriodSecs *int    `pulumi:"failedRetrievalCachePeriodSecs"`
	HardFail                       *bool   `pulumi:"hardFail"`
	IncludesPattern                *string `pulumi:"includesPattern"`
	// The repository identifier. Must be unique system-wide
	Key          *string `pulumi:"key"`
	LocalAddress *string `pulumi:"localAddress"`
	// This is actually the missedRetrievalCachePeriodSecs in the API
	MissedCachePeriodSeconds *int    `pulumi:"missedCachePeriodSeconds"`
	Notes                    *string `pulumi:"notes"`
	// If set, Artifactory does not try to fetch remote artifacts. Only locally-cached artifacts are retrieved.
	Offline     *bool   `pulumi:"offline"`
	PackageType *string `pulumi:"packageType"`
	Password    *string `pulumi:"password"`
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution *bool `pulumi:"priorityResolution"`
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments []string `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey           *string  `pulumi:"projectKey"`
	PropagateQueryParams *bool    `pulumi:"propagateQueryParams"`
	PropertySets         []string `pulumi:"propertySets"`
	Proxy                *string  `pulumi:"proxy"`
	// To configure the remote repo to proxy public external PyPI repository, or a PyPI repository hosted on another Artifactory server. See JFrog Pypi documentation [here](https://www.jfrog.com/confluence/display/JFROG/PyPI+Repositories) for the usage details. Default value is 'https://pypi.org'.
	PypiRegistryUrl *string `pulumi:"pypiRegistryUrl"`
	// Usually should be left as a default for 'simple', unless the remote is a PyPI server that has custom registry suffix, like +simple in DevPI. Default value is 'simple'.
	PypiRepositorySuffix *string `pulumi:"pypiRepositorySuffix"`
	RemoteRepoLayoutRef  *string `pulumi:"remoteRepoLayoutRef"`
	RepoLayoutRef        *string `pulumi:"repoLayoutRef"`
	// The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.
	RetrievalCachePeriodSeconds *int  `pulumi:"retrievalCachePeriodSeconds"`
	ShareConfiguration          *bool `pulumi:"shareConfiguration"`
	SocketTimeoutMillis         *int  `pulumi:"socketTimeoutMillis"`
	// When set, the repository should store cached artifacts locally. When not set, artifacts are not stored locally, and
	// direct repository-to-client streaming is used. This can be useful for multi-server setups over a high-speed LAN, with
	// one Artifactory caching certain data on central storage, and streaming it directly to satellite pass-though Artifactory
	// servers.
	StoreArtifactsLocally *bool `pulumi:"storeArtifactsLocally"`
	// When set, remote artifacts are fetched along with their properties.
	SynchronizeProperties               *bool   `pulumi:"synchronizeProperties"`
	UnusedArtifactsCleanupPeriodEnabled *bool   `pulumi:"unusedArtifactsCleanupPeriodEnabled"`
	UnusedArtifactsCleanupPeriodHours   *int    `pulumi:"unusedArtifactsCleanupPeriodHours"`
	Url                                 *string `pulumi:"url"`
	Username                            *string `pulumi:"username"`
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.
	XrayIndex *bool `pulumi:"xrayIndex"`
}

type RemotePypiRepositoryState struct {
	// Also known as 'Lenient Host Authentication', Allow credentials of this repository to be used on requests redirected to
	// any other host.
	AllowAnyHostAuth pulumi.BoolPtrInput
	// The number of seconds the repository stays in assumed offline state after a connection error. At the end of this time,
	// an online check is attempted in order to reset the offline status. A value of 0 means the repository is never assumed
	// offline. Default to 300.
	AssumedOfflinePeriodSecs pulumi.IntPtrInput
	// (A.K.A 'Ignore Repository' on the UI) When set, the repository or its local cache do not participate in artifact
	// resolution.
	BlackedOut pulumi.BoolPtrInput
	// Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,
	// HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,
	// Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
	BlockMismatchingMimeTypes pulumi.BoolPtrInput
	// Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,
	// HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,
	// Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
	BypassHeadRequests   pulumi.BoolPtrInput
	ClientTlsCertificate pulumi.StringPtrInput
	// Reference [JFROG Smart Remote Repositories](https://www.jfrog.com/confluence/display/JFROG/Smart+Remote+Repositories)
	ContentSynchronisation RemotePypiRepositoryContentSynchronisationPtrInput
	Description            pulumi.StringPtrInput
	// Enables cookie management if the remote repository uses cookies to manage client state.
	EnableCookieManagement pulumi.BoolPtrInput
	ExcludesPattern        pulumi.StringPtrInput
	// Deprecated: This field is not returned in a get payload but is offered on the UI. It's inserted here for inclusive and informational reasons. It does not function
	FailedRetrievalCachePeriodSecs pulumi.IntPtrInput
	HardFail                       pulumi.BoolPtrInput
	IncludesPattern                pulumi.StringPtrInput
	// The repository identifier. Must be unique system-wide
	Key          pulumi.StringPtrInput
	LocalAddress pulumi.StringPtrInput
	// This is actually the missedRetrievalCachePeriodSecs in the API
	MissedCachePeriodSeconds pulumi.IntPtrInput
	Notes                    pulumi.StringPtrInput
	// If set, Artifactory does not try to fetch remote artifacts. Only locally-cached artifacts are retrieved.
	Offline     pulumi.BoolPtrInput
	PackageType pulumi.StringPtrInput
	Password    pulumi.StringPtrInput
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution pulumi.BoolPtrInput
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments pulumi.StringArrayInput
	// Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey           pulumi.StringPtrInput
	PropagateQueryParams pulumi.BoolPtrInput
	PropertySets         pulumi.StringArrayInput
	Proxy                pulumi.StringPtrInput
	// To configure the remote repo to proxy public external PyPI repository, or a PyPI repository hosted on another Artifactory server. See JFrog Pypi documentation [here](https://www.jfrog.com/confluence/display/JFROG/PyPI+Repositories) for the usage details. Default value is 'https://pypi.org'.
	PypiRegistryUrl pulumi.StringPtrInput
	// Usually should be left as a default for 'simple', unless the remote is a PyPI server that has custom registry suffix, like +simple in DevPI. Default value is 'simple'.
	PypiRepositorySuffix pulumi.StringPtrInput
	RemoteRepoLayoutRef  pulumi.StringPtrInput
	RepoLayoutRef        pulumi.StringPtrInput
	// The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.
	RetrievalCachePeriodSeconds pulumi.IntPtrInput
	ShareConfiguration          pulumi.BoolPtrInput
	SocketTimeoutMillis         pulumi.IntPtrInput
	// When set, the repository should store cached artifacts locally. When not set, artifacts are not stored locally, and
	// direct repository-to-client streaming is used. This can be useful for multi-server setups over a high-speed LAN, with
	// one Artifactory caching certain data on central storage, and streaming it directly to satellite pass-though Artifactory
	// servers.
	StoreArtifactsLocally pulumi.BoolPtrInput
	// When set, remote artifacts are fetched along with their properties.
	SynchronizeProperties               pulumi.BoolPtrInput
	UnusedArtifactsCleanupPeriodEnabled pulumi.BoolPtrInput
	UnusedArtifactsCleanupPeriodHours   pulumi.IntPtrInput
	Url                                 pulumi.StringPtrInput
	Username                            pulumi.StringPtrInput
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.
	XrayIndex pulumi.BoolPtrInput
}

func (RemotePypiRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*remotePypiRepositoryState)(nil)).Elem()
}

type remotePypiRepositoryArgs struct {
	// Also known as 'Lenient Host Authentication', Allow credentials of this repository to be used on requests redirected to
	// any other host.
	AllowAnyHostAuth *bool `pulumi:"allowAnyHostAuth"`
	// The number of seconds the repository stays in assumed offline state after a connection error. At the end of this time,
	// an online check is attempted in order to reset the offline status. A value of 0 means the repository is never assumed
	// offline. Default to 300.
	AssumedOfflinePeriodSecs *int `pulumi:"assumedOfflinePeriodSecs"`
	// (A.K.A 'Ignore Repository' on the UI) When set, the repository or its local cache do not participate in artifact
	// resolution.
	BlackedOut *bool `pulumi:"blackedOut"`
	// Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,
	// HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,
	// Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
	BlockMismatchingMimeTypes *bool `pulumi:"blockMismatchingMimeTypes"`
	// Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,
	// HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,
	// Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
	BypassHeadRequests   *bool   `pulumi:"bypassHeadRequests"`
	ClientTlsCertificate *string `pulumi:"clientTlsCertificate"`
	// Reference [JFROG Smart Remote Repositories](https://www.jfrog.com/confluence/display/JFROG/Smart+Remote+Repositories)
	ContentSynchronisation *RemotePypiRepositoryContentSynchronisation `pulumi:"contentSynchronisation"`
	Description            *string                                     `pulumi:"description"`
	// Enables cookie management if the remote repository uses cookies to manage client state.
	EnableCookieManagement *bool   `pulumi:"enableCookieManagement"`
	ExcludesPattern        *string `pulumi:"excludesPattern"`
	HardFail               *bool   `pulumi:"hardFail"`
	IncludesPattern        *string `pulumi:"includesPattern"`
	// The repository identifier. Must be unique system-wide
	Key          string  `pulumi:"key"`
	LocalAddress *string `pulumi:"localAddress"`
	// This is actually the missedRetrievalCachePeriodSecs in the API
	MissedCachePeriodSeconds *int    `pulumi:"missedCachePeriodSeconds"`
	Notes                    *string `pulumi:"notes"`
	// If set, Artifactory does not try to fetch remote artifacts. Only locally-cached artifacts are retrieved.
	Offline  *bool   `pulumi:"offline"`
	Password *string `pulumi:"password"`
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution *bool `pulumi:"priorityResolution"`
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments []string `pulumi:"projectEnvironments"`
	// Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey           *string  `pulumi:"projectKey"`
	PropagateQueryParams *bool    `pulumi:"propagateQueryParams"`
	PropertySets         []string `pulumi:"propertySets"`
	Proxy                *string  `pulumi:"proxy"`
	// To configure the remote repo to proxy public external PyPI repository, or a PyPI repository hosted on another Artifactory server. See JFrog Pypi documentation [here](https://www.jfrog.com/confluence/display/JFROG/PyPI+Repositories) for the usage details. Default value is 'https://pypi.org'.
	PypiRegistryUrl *string `pulumi:"pypiRegistryUrl"`
	// Usually should be left as a default for 'simple', unless the remote is a PyPI server that has custom registry suffix, like +simple in DevPI. Default value is 'simple'.
	PypiRepositorySuffix *string `pulumi:"pypiRepositorySuffix"`
	RemoteRepoLayoutRef  *string `pulumi:"remoteRepoLayoutRef"`
	RepoLayoutRef        *string `pulumi:"repoLayoutRef"`
	// The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.
	RetrievalCachePeriodSeconds *int  `pulumi:"retrievalCachePeriodSeconds"`
	ShareConfiguration          *bool `pulumi:"shareConfiguration"`
	SocketTimeoutMillis         *int  `pulumi:"socketTimeoutMillis"`
	// When set, the repository should store cached artifacts locally. When not set, artifacts are not stored locally, and
	// direct repository-to-client streaming is used. This can be useful for multi-server setups over a high-speed LAN, with
	// one Artifactory caching certain data on central storage, and streaming it directly to satellite pass-though Artifactory
	// servers.
	StoreArtifactsLocally *bool `pulumi:"storeArtifactsLocally"`
	// When set, remote artifacts are fetched along with their properties.
	SynchronizeProperties               *bool   `pulumi:"synchronizeProperties"`
	UnusedArtifactsCleanupPeriodEnabled *bool   `pulumi:"unusedArtifactsCleanupPeriodEnabled"`
	UnusedArtifactsCleanupPeriodHours   *int    `pulumi:"unusedArtifactsCleanupPeriodHours"`
	Url                                 string  `pulumi:"url"`
	Username                            *string `pulumi:"username"`
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.
	XrayIndex *bool `pulumi:"xrayIndex"`
}

// The set of arguments for constructing a RemotePypiRepository resource.
type RemotePypiRepositoryArgs struct {
	// Also known as 'Lenient Host Authentication', Allow credentials of this repository to be used on requests redirected to
	// any other host.
	AllowAnyHostAuth pulumi.BoolPtrInput
	// The number of seconds the repository stays in assumed offline state after a connection error. At the end of this time,
	// an online check is attempted in order to reset the offline status. A value of 0 means the repository is never assumed
	// offline. Default to 300.
	AssumedOfflinePeriodSecs pulumi.IntPtrInput
	// (A.K.A 'Ignore Repository' on the UI) When set, the repository or its local cache do not participate in artifact
	// resolution.
	BlackedOut pulumi.BoolPtrInput
	// Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,
	// HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,
	// Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
	BlockMismatchingMimeTypes pulumi.BoolPtrInput
	// Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,
	// HEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,
	// Artifactory will bypass the HEAD request and cache the artifact directly using a GET request.
	BypassHeadRequests   pulumi.BoolPtrInput
	ClientTlsCertificate pulumi.StringPtrInput
	// Reference [JFROG Smart Remote Repositories](https://www.jfrog.com/confluence/display/JFROG/Smart+Remote+Repositories)
	ContentSynchronisation RemotePypiRepositoryContentSynchronisationPtrInput
	Description            pulumi.StringPtrInput
	// Enables cookie management if the remote repository uses cookies to manage client state.
	EnableCookieManagement pulumi.BoolPtrInput
	ExcludesPattern        pulumi.StringPtrInput
	HardFail               pulumi.BoolPtrInput
	IncludesPattern        pulumi.StringPtrInput
	// The repository identifier. Must be unique system-wide
	Key          pulumi.StringInput
	LocalAddress pulumi.StringPtrInput
	// This is actually the missedRetrievalCachePeriodSecs in the API
	MissedCachePeriodSeconds pulumi.IntPtrInput
	Notes                    pulumi.StringPtrInput
	// If set, Artifactory does not try to fetch remote artifacts. Only locally-cached artifacts are retrieved.
	Offline  pulumi.BoolPtrInput
	Password pulumi.StringPtrInput
	// Setting repositories with priority will cause metadata to be merged only from repositories set with this field
	PriorityResolution pulumi.BoolPtrInput
	// Project environment for assigning this repository to. Allow values: "DEV" or "PROD"
	ProjectEnvironments pulumi.StringArrayInput
	// Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey           pulumi.StringPtrInput
	PropagateQueryParams pulumi.BoolPtrInput
	PropertySets         pulumi.StringArrayInput
	Proxy                pulumi.StringPtrInput
	// To configure the remote repo to proxy public external PyPI repository, or a PyPI repository hosted on another Artifactory server. See JFrog Pypi documentation [here](https://www.jfrog.com/confluence/display/JFROG/PyPI+Repositories) for the usage details. Default value is 'https://pypi.org'.
	PypiRegistryUrl pulumi.StringPtrInput
	// Usually should be left as a default for 'simple', unless the remote is a PyPI server that has custom registry suffix, like +simple in DevPI. Default value is 'simple'.
	PypiRepositorySuffix pulumi.StringPtrInput
	RemoteRepoLayoutRef  pulumi.StringPtrInput
	RepoLayoutRef        pulumi.StringPtrInput
	// The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.
	RetrievalCachePeriodSeconds pulumi.IntPtrInput
	ShareConfiguration          pulumi.BoolPtrInput
	SocketTimeoutMillis         pulumi.IntPtrInput
	// When set, the repository should store cached artifacts locally. When not set, artifacts are not stored locally, and
	// direct repository-to-client streaming is used. This can be useful for multi-server setups over a high-speed LAN, with
	// one Artifactory caching certain data on central storage, and streaming it directly to satellite pass-though Artifactory
	// servers.
	StoreArtifactsLocally pulumi.BoolPtrInput
	// When set, remote artifacts are fetched along with their properties.
	SynchronizeProperties               pulumi.BoolPtrInput
	UnusedArtifactsCleanupPeriodEnabled pulumi.BoolPtrInput
	UnusedArtifactsCleanupPeriodHours   pulumi.IntPtrInput
	Url                                 pulumi.StringInput
	Username                            pulumi.StringPtrInput
	// Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.
	XrayIndex pulumi.BoolPtrInput
}

func (RemotePypiRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*remotePypiRepositoryArgs)(nil)).Elem()
}

type RemotePypiRepositoryInput interface {
	pulumi.Input

	ToRemotePypiRepositoryOutput() RemotePypiRepositoryOutput
	ToRemotePypiRepositoryOutputWithContext(ctx context.Context) RemotePypiRepositoryOutput
}

func (*RemotePypiRepository) ElementType() reflect.Type {
	return reflect.TypeOf((**RemotePypiRepository)(nil)).Elem()
}

func (i *RemotePypiRepository) ToRemotePypiRepositoryOutput() RemotePypiRepositoryOutput {
	return i.ToRemotePypiRepositoryOutputWithContext(context.Background())
}

func (i *RemotePypiRepository) ToRemotePypiRepositoryOutputWithContext(ctx context.Context) RemotePypiRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemotePypiRepositoryOutput)
}

// RemotePypiRepositoryArrayInput is an input type that accepts RemotePypiRepositoryArray and RemotePypiRepositoryArrayOutput values.
// You can construct a concrete instance of `RemotePypiRepositoryArrayInput` via:
//
//          RemotePypiRepositoryArray{ RemotePypiRepositoryArgs{...} }
type RemotePypiRepositoryArrayInput interface {
	pulumi.Input

	ToRemotePypiRepositoryArrayOutput() RemotePypiRepositoryArrayOutput
	ToRemotePypiRepositoryArrayOutputWithContext(context.Context) RemotePypiRepositoryArrayOutput
}

type RemotePypiRepositoryArray []RemotePypiRepositoryInput

func (RemotePypiRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RemotePypiRepository)(nil)).Elem()
}

func (i RemotePypiRepositoryArray) ToRemotePypiRepositoryArrayOutput() RemotePypiRepositoryArrayOutput {
	return i.ToRemotePypiRepositoryArrayOutputWithContext(context.Background())
}

func (i RemotePypiRepositoryArray) ToRemotePypiRepositoryArrayOutputWithContext(ctx context.Context) RemotePypiRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemotePypiRepositoryArrayOutput)
}

// RemotePypiRepositoryMapInput is an input type that accepts RemotePypiRepositoryMap and RemotePypiRepositoryMapOutput values.
// You can construct a concrete instance of `RemotePypiRepositoryMapInput` via:
//
//          RemotePypiRepositoryMap{ "key": RemotePypiRepositoryArgs{...} }
type RemotePypiRepositoryMapInput interface {
	pulumi.Input

	ToRemotePypiRepositoryMapOutput() RemotePypiRepositoryMapOutput
	ToRemotePypiRepositoryMapOutputWithContext(context.Context) RemotePypiRepositoryMapOutput
}

type RemotePypiRepositoryMap map[string]RemotePypiRepositoryInput

func (RemotePypiRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RemotePypiRepository)(nil)).Elem()
}

func (i RemotePypiRepositoryMap) ToRemotePypiRepositoryMapOutput() RemotePypiRepositoryMapOutput {
	return i.ToRemotePypiRepositoryMapOutputWithContext(context.Background())
}

func (i RemotePypiRepositoryMap) ToRemotePypiRepositoryMapOutputWithContext(ctx context.Context) RemotePypiRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemotePypiRepositoryMapOutput)
}

type RemotePypiRepositoryOutput struct{ *pulumi.OutputState }

func (RemotePypiRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemotePypiRepository)(nil)).Elem()
}

func (o RemotePypiRepositoryOutput) ToRemotePypiRepositoryOutput() RemotePypiRepositoryOutput {
	return o
}

func (o RemotePypiRepositoryOutput) ToRemotePypiRepositoryOutputWithContext(ctx context.Context) RemotePypiRepositoryOutput {
	return o
}

type RemotePypiRepositoryArrayOutput struct{ *pulumi.OutputState }

func (RemotePypiRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RemotePypiRepository)(nil)).Elem()
}

func (o RemotePypiRepositoryArrayOutput) ToRemotePypiRepositoryArrayOutput() RemotePypiRepositoryArrayOutput {
	return o
}

func (o RemotePypiRepositoryArrayOutput) ToRemotePypiRepositoryArrayOutputWithContext(ctx context.Context) RemotePypiRepositoryArrayOutput {
	return o
}

func (o RemotePypiRepositoryArrayOutput) Index(i pulumi.IntInput) RemotePypiRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RemotePypiRepository {
		return vs[0].([]*RemotePypiRepository)[vs[1].(int)]
	}).(RemotePypiRepositoryOutput)
}

type RemotePypiRepositoryMapOutput struct{ *pulumi.OutputState }

func (RemotePypiRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RemotePypiRepository)(nil)).Elem()
}

func (o RemotePypiRepositoryMapOutput) ToRemotePypiRepositoryMapOutput() RemotePypiRepositoryMapOutput {
	return o
}

func (o RemotePypiRepositoryMapOutput) ToRemotePypiRepositoryMapOutputWithContext(ctx context.Context) RemotePypiRepositoryMapOutput {
	return o
}

func (o RemotePypiRepositoryMapOutput) MapIndex(k pulumi.StringInput) RemotePypiRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RemotePypiRepository {
		return vs[0].(map[string]*RemotePypiRepository)[vs[1].(string)]
	}).(RemotePypiRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RemotePypiRepositoryInput)(nil)).Elem(), &RemotePypiRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemotePypiRepositoryArrayInput)(nil)).Elem(), RemotePypiRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemotePypiRepositoryMapInput)(nil)).Elem(), RemotePypiRepositoryMap{})
	pulumi.RegisterOutputType(RemotePypiRepositoryOutput{})
	pulumi.RegisterOutputType(RemotePypiRepositoryArrayOutput{})
	pulumi.RegisterOutputType(RemotePypiRepositoryMapOutput{})
}
