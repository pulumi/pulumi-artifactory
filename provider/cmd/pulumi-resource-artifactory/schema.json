{
    "name": "artifactory",
    "description": "A Pulumi package for creating and managing artifactory cloud resources.",
    "keywords": [
        "pulumi",
        "artifactory"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`artifactory` Terraform Provider](https://github.com/jfrog/terraform-provider-artifactory).",
    "repository": "https://github.com/pulumi/pulumi-artifactory",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "accessToken": {
                "type": "string",
                "description": "This is a bearer token that can be given to you by your admin under `Identity and Access`\n"
            },
            "apiKey": {
                "type": "string",
                "deprecationMessage": "Xray and projects functionality will not work with any auth method other than access tokens (Bearer)"
            },
            "checkLicense": {
                "type": "boolean",
                "description": "Toggle for pre-flight checking of Artifactory Pro and Enterprise license. Default to `true`.\n",
                "default": false
            },
            "password": {
                "type": "string",
                "description": "Insider note: You may actually use an api_key as the password. This will get your around xray limitations instead of a\nbearer token\n",
                "deprecationMessage": "Xray and projects functionality will not work with any auth method other than access tokens (Bearer)"
            },
            "url": {
                "type": "string"
            },
            "username": {
                "type": "string",
                "deprecationMessage": "Xray and projects functionality will not work with any auth method other than access tokens (Bearer)"
            }
        }
    },
    "types": {
        "artifactory:index/AccessTokenAdminToken:AccessTokenAdminToken": {
            "properties": {
                "instanceId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "instanceId"
            ]
        },
        "artifactory:index/ArtifactPropertyWebhookCriteria:ArtifactPropertyWebhookCriteria": {
            "properties": {
                "anyLocal": {
                    "type": "boolean",
                    "description": "Trigger on any local repo\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "anyRemote": {
                    "type": "boolean",
                    "description": "Trigger on any remote repo\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludePatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\\n Ant-style path expressions are supported (*, **, ?).\\nFor example: \"org/apache/**\"\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includePatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\\n Ant-style path expressions are supported (*, **, ?).\\nFor example: \"org/apache/**\"\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repoKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Trigger on this list of repo keys\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "anyLocal",
                "anyRemote",
                "repoKeys"
            ]
        },
        "artifactory:index/ArtifactWebhookCriteria:ArtifactWebhookCriteria": {
            "properties": {
                "anyLocal": {
                    "type": "boolean",
                    "description": "Trigger on any local repo\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "anyRemote": {
                    "type": "boolean",
                    "description": "Trigger on any remote repo\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludePatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\\n Ant-style path expressions are supported (*, **, ?).\\nFor example: \"org/apache/**\"\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includePatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\\n Ant-style path expressions are supported (*, **, ?).\\nFor example: \"org/apache/**\"\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repoKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Trigger on this list of repo keys\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "anyLocal",
                "anyRemote",
                "repoKeys"
            ]
        },
        "artifactory:index/ArtifactoryReleaseBundleWebhookCriteria:ArtifactoryReleaseBundleWebhookCriteria": {
            "properties": {
                "anyReleaseBundle": {
                    "type": "boolean",
                    "description": "Trigger on any release bundle\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludePatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\\n Ant-style path expressions are supported (*, **, ?).\\nFor example: \"org/apache/**\"\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includePatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\\n Ant-style path expressions are supported (*, **, ?).\\nFor example: \"org/apache/**\"\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "registeredReleaseBundleNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Trigger on this list of release bundle names\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "anyReleaseBundle",
                "registeredReleaseBundleNames"
            ]
        },
        "artifactory:index/BuildWebhookCriteria:BuildWebhookCriteria": {
            "properties": {
                "anyBuild": {
                    "type": "boolean",
                    "description": "Trigger on any build\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludePatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\\n Ant-style path expressions are supported (*, **, ?).\\nFor example: \"org/apache/**\"\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includePatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\\n Ant-style path expressions are supported (*, **, ?).\\nFor example: \"org/apache/**\"\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "selectedBuilds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Trigger on this list of build names\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "anyBuild",
                "selectedBuilds"
            ]
        },
        "artifactory:index/DistributionWebhookCriteria:DistributionWebhookCriteria": {
            "properties": {
                "anyReleaseBundle": {
                    "type": "boolean",
                    "description": "Trigger on any release bundle\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludePatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\\n Ant-style path expressions are supported (*, **, ?).\\nFor example: \"org/apache/**\"\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includePatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\\n Ant-style path expressions are supported (*, **, ?).\\nFor example: \"org/apache/**\"\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "registeredReleaseBundleNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Trigger on this list of release bundle names\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "anyReleaseBundle",
                "registeredReleaseBundleNames"
            ]
        },
        "artifactory:index/DockerWebhookCriteria:DockerWebhookCriteria": {
            "properties": {
                "anyLocal": {
                    "type": "boolean",
                    "description": "Trigger on any local repo\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "anyRemote": {
                    "type": "boolean",
                    "description": "Trigger on any remote repo\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludePatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\\n Ant-style path expressions are supported (*, **, ?).\\nFor example: \"org/apache/**\"\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includePatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\\n Ant-style path expressions are supported (*, **, ?).\\nFor example: \"org/apache/**\"\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repoKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Trigger on this list of repo keys\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "anyLocal",
                "anyRemote",
                "repoKeys"
            ]
        },
        "artifactory:index/FederatedAlpineRepositoryMember:FederatedAlpineRepositoryMember": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Full URL to ending with the repository name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "url"
            ]
        },
        "artifactory:index/FederatedBowerRepositoryMember:FederatedBowerRepositoryMember": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Full URL to ending with the repository name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "url"
            ]
        },
        "artifactory:index/FederatedCargoRepositoryMember:FederatedCargoRepositoryMember": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Full URL to ending with the repository name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "url"
            ]
        },
        "artifactory:index/FederatedChefRepositoryMember:FederatedChefRepositoryMember": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Full URL to ending with the repository name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "url"
            ]
        },
        "artifactory:index/FederatedCocoapodsRepositoryMember:FederatedCocoapodsRepositoryMember": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Full URL to ending with the repository name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "url"
            ]
        },
        "artifactory:index/FederatedComposerRepositoryMember:FederatedComposerRepositoryMember": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Full URL to ending with the repository name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "url"
            ]
        },
        "artifactory:index/FederatedConanRepositoryMember:FederatedConanRepositoryMember": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Full URL to ending with the repository name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "url"
            ]
        },
        "artifactory:index/FederatedCondaRepositoryMember:FederatedCondaRepositoryMember": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Full URL to ending with the repository name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "url"
            ]
        },
        "artifactory:index/FederatedCranRepositoryMember:FederatedCranRepositoryMember": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Full URL to ending with the repository name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "url"
            ]
        },
        "artifactory:index/FederatedDebianRepositoryMember:FederatedDebianRepositoryMember": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Full URL to ending with the repository name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "url"
            ]
        },
        "artifactory:index/FederatedDockerRepositoryMember:FederatedDockerRepositoryMember": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Full URL to ending with the repository name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "url"
            ]
        },
        "artifactory:index/FederatedGemsRepositoryMember:FederatedGemsRepositoryMember": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Full URL to ending with the repository name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "url"
            ]
        },
        "artifactory:index/FederatedGenericRepositoryMember:FederatedGenericRepositoryMember": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Full URL to ending with the repository name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "url"
            ]
        },
        "artifactory:index/FederatedGitltfsRepositoryMember:FederatedGitltfsRepositoryMember": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Full URL to ending with the repository name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "url"
            ]
        },
        "artifactory:index/FederatedGoRepositoryMember:FederatedGoRepositoryMember": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Full URL to ending with the repository name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "url"
            ]
        },
        "artifactory:index/FederatedGradleRepositoryMember:FederatedGradleRepositoryMember": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Full URL to ending with the repository name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "url"
            ]
        },
        "artifactory:index/FederatedHelmRepositoryMember:FederatedHelmRepositoryMember": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Full URL to ending with the repository name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "url"
            ]
        },
        "artifactory:index/FederatedIvyRepositoryMember:FederatedIvyRepositoryMember": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Full URL to ending with the repository name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "url"
            ]
        },
        "artifactory:index/FederatedMavenRepositoryMember:FederatedMavenRepositoryMember": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Full URL to ending with the repository name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "url"
            ]
        },
        "artifactory:index/FederatedNpmRepositoryMember:FederatedNpmRepositoryMember": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Full URL to ending with the repository name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "url"
            ]
        },
        "artifactory:index/FederatedNugetRepositoryMember:FederatedNugetRepositoryMember": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Full URL to ending with the repository name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "url"
            ]
        },
        "artifactory:index/FederatedOpkgRepositoryMember:FederatedOpkgRepositoryMember": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Full URL to ending with the repository name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "url"
            ]
        },
        "artifactory:index/FederatedPuppetRepositoryMember:FederatedPuppetRepositoryMember": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Full URL to ending with the repository name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "url"
            ]
        },
        "artifactory:index/FederatedPypiRepositoryMember:FederatedPypiRepositoryMember": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Full URL to ending with the repository name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "url"
            ]
        },
        "artifactory:index/FederatedRpmRepositoryMember:FederatedRpmRepositoryMember": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Full URL to ending with the repository name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "url"
            ]
        },
        "artifactory:index/FederatedSbtRepositoryMember:FederatedSbtRepositoryMember": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Full URL to ending with the repository name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "url"
            ]
        },
        "artifactory:index/FederatedVagrantRepositoryMember:FederatedVagrantRepositoryMember": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Represents the active state of the federated member. It is supported to change the enabled status of my own member. The config will be updated on the other federated members automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Full URL to ending with the repository name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "url"
            ]
        },
        "artifactory:index/OauthSettingsOauthProvider:OauthSettingsOauthProvider": {
            "properties": {
                "apiUrl": {
                    "type": "string",
                    "description": "OAuth user info endpoint for the IdP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authUrl": {
                    "type": "string",
                    "description": "OAuth authorization endpoint for the IdP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientId": {
                    "type": "string",
                    "description": "OAuth client ID configured on the IdP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientSecret": {
                    "type": "string",
                    "description": "OAuth client secret configured on the IdP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable the Artifactory OAuth provider.  Default value is `true`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Artifactory OAuth provider.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tokenUrl": {
                    "type": "string",
                    "description": "OAuth token endpoint for the IdP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of OAuth provider. (e.g., `github`, `google`, `cloudfoundry`, or `openId`)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "apiUrl",
                "authUrl",
                "clientId",
                "clientSecret",
                "name",
                "tokenUrl",
                "type"
            ]
        },
        "artifactory:index/PermissionTargetBuild:PermissionTargetBuild": {
            "properties": {
                "actions": {
                    "$ref": "#/types/artifactory:index/PermissionTargetBuildActions:PermissionTargetBuildActions",
                    "description": "-\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludesPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Pattern of artifacts to exclude\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includesPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Pattern of artifacts to include\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of repositories this permission target is applicable for\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "repositories"
            ]
        },
        "artifactory:index/PermissionTargetBuildActions:PermissionTargetBuildActions": {
            "properties": {
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/PermissionTargetBuildActionsGroup:PermissionTargetBuildActionsGroup"
                    },
                    "description": "Groups this permission applies for.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/PermissionTargetBuildActionsUser:PermissionTargetBuildActionsUser"
                    },
                    "description": "Users this permission target applies for.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "artifactory:index/PermissionTargetBuildActionsGroup:PermissionTargetBuildActionsGroup": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of permission\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "permissions"
            ]
        },
        "artifactory:index/PermissionTargetBuildActionsUser:PermissionTargetBuildActionsUser": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of permission\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "permissions"
            ]
        },
        "artifactory:index/PermissionTargetReleaseBundle:PermissionTargetReleaseBundle": {
            "properties": {
                "actions": {
                    "$ref": "#/types/artifactory:index/PermissionTargetReleaseBundleActions:PermissionTargetReleaseBundleActions",
                    "description": "-\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludesPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Pattern of artifacts to exclude\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includesPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Pattern of artifacts to include\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of repositories this permission target is applicable for\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "repositories"
            ]
        },
        "artifactory:index/PermissionTargetReleaseBundleActions:PermissionTargetReleaseBundleActions": {
            "properties": {
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/PermissionTargetReleaseBundleActionsGroup:PermissionTargetReleaseBundleActionsGroup"
                    },
                    "description": "Groups this permission applies for.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/PermissionTargetReleaseBundleActionsUser:PermissionTargetReleaseBundleActionsUser"
                    },
                    "description": "Users this permission target applies for.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "artifactory:index/PermissionTargetReleaseBundleActionsGroup:PermissionTargetReleaseBundleActionsGroup": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of permission\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "permissions"
            ]
        },
        "artifactory:index/PermissionTargetReleaseBundleActionsUser:PermissionTargetReleaseBundleActionsUser": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of permission\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "permissions"
            ]
        },
        "artifactory:index/PermissionTargetRepo:PermissionTargetRepo": {
            "properties": {
                "actions": {
                    "$ref": "#/types/artifactory:index/PermissionTargetRepoActions:PermissionTargetRepoActions",
                    "description": "-\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludesPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Pattern of artifacts to exclude\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includesPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Pattern of artifacts to include\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of repositories this permission target is applicable for\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "repositories"
            ]
        },
        "artifactory:index/PermissionTargetRepoActions:PermissionTargetRepoActions": {
            "properties": {
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/PermissionTargetRepoActionsGroup:PermissionTargetRepoActionsGroup"
                    },
                    "description": "Groups this permission applies for.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/PermissionTargetRepoActionsUser:PermissionTargetRepoActionsUser"
                    },
                    "description": "Users this permission target applies for.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "artifactory:index/PermissionTargetRepoActionsGroup:PermissionTargetRepoActionsGroup": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of permission\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "permissions"
            ]
        },
        "artifactory:index/PermissionTargetRepoActionsUser:PermissionTargetRepoActionsUser": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of permission\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "permissions"
            ]
        },
        "artifactory:index/PermissionTargetsBuild:PermissionTargetsBuild": {
            "properties": {
                "actions": {
                    "$ref": "#/types/artifactory:index/PermissionTargetsBuildActions:PermissionTargetsBuildActions",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludesPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includesPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "repositories"
            ]
        },
        "artifactory:index/PermissionTargetsBuildActions:PermissionTargetsBuildActions": {
            "properties": {
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/PermissionTargetsBuildActionsGroup:PermissionTargetsBuildActionsGroup"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/PermissionTargetsBuildActionsUser:PermissionTargetsBuildActionsUser"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "artifactory:index/PermissionTargetsBuildActionsGroup:PermissionTargetsBuildActionsGroup": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "permissions"
            ]
        },
        "artifactory:index/PermissionTargetsBuildActionsUser:PermissionTargetsBuildActionsUser": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "permissions"
            ]
        },
        "artifactory:index/PermissionTargetsReleaseBundle:PermissionTargetsReleaseBundle": {
            "properties": {
                "actions": {
                    "$ref": "#/types/artifactory:index/PermissionTargetsReleaseBundleActions:PermissionTargetsReleaseBundleActions",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludesPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includesPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "repositories"
            ]
        },
        "artifactory:index/PermissionTargetsReleaseBundleActions:PermissionTargetsReleaseBundleActions": {
            "properties": {
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/PermissionTargetsReleaseBundleActionsGroup:PermissionTargetsReleaseBundleActionsGroup"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/PermissionTargetsReleaseBundleActionsUser:PermissionTargetsReleaseBundleActionsUser"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "artifactory:index/PermissionTargetsReleaseBundleActionsGroup:PermissionTargetsReleaseBundleActionsGroup": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "permissions"
            ]
        },
        "artifactory:index/PermissionTargetsReleaseBundleActionsUser:PermissionTargetsReleaseBundleActionsUser": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "permissions"
            ]
        },
        "artifactory:index/PermissionTargetsRepo:PermissionTargetsRepo": {
            "properties": {
                "actions": {
                    "$ref": "#/types/artifactory:index/PermissionTargetsRepoActions:PermissionTargetsRepoActions",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludesPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includesPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "repositories"
            ]
        },
        "artifactory:index/PermissionTargetsRepoActions:PermissionTargetsRepoActions": {
            "properties": {
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/PermissionTargetsRepoActionsGroup:PermissionTargetsRepoActionsGroup"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/PermissionTargetsRepoActionsUser:PermissionTargetsRepoActionsUser"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "artifactory:index/PermissionTargetsRepoActionsGroup:PermissionTargetsRepoActionsGroup": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "permissions"
            ]
        },
        "artifactory:index/PermissionTargetsRepoActionsUser:PermissionTargetsRepoActionsUser": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "permissions"
            ]
        },
        "artifactory:index/PushReplicationReplication:PushReplicationReplication": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Requires password encryption to be turned off `POST /api/system/decrypt`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathPrefix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "socketTimeoutMillis": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "syncDeletes": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "syncProperties": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "syncStatistics": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "password",
                        "socketTimeoutMillis",
                        "syncDeletes",
                        "syncProperties",
                        "syncStatistics"
                    ]
                }
            }
        },
        "artifactory:index/ReleaseBundleWebhookCriteria:ReleaseBundleWebhookCriteria": {
            "properties": {
                "anyReleaseBundle": {
                    "type": "boolean",
                    "description": "Trigger on any release bundle\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludePatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\\n Ant-style path expressions are supported (*, **, ?).\\nFor example: \"org/apache/**\"\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includePatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Simple comma separated wildcard patterns for repository artifact paths (with no leading slash).\\n Ant-style path expressions are supported (*, **, ?).\\nFor example: \"org/apache/**\"\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "registeredReleaseBundleNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Trigger on this list of release bundle names\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "anyReleaseBundle",
                "registeredReleaseBundleNames"
            ]
        },
        "artifactory:index/RemoteCargoRepositoryContentSynchronisation:RemoteCargoRepositoryContentSynchronisation": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "propertiesEnabled": {
                    "type": "boolean",
                    "description": "If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceOriginAbsenceDetection": {
                    "type": "boolean",
                    "description": "If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statisticsEnabled": {
                    "type": "boolean",
                    "description": "If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "artifactory:index/RemoteDockerRepositoryContentSynchronisation:RemoteDockerRepositoryContentSynchronisation": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "propertiesEnabled": {
                    "type": "boolean",
                    "description": "If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceOriginAbsenceDetection": {
                    "type": "boolean",
                    "description": "If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statisticsEnabled": {
                    "type": "boolean",
                    "description": "If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "artifactory:index/RemoteHelmRepositoryContentSynchronisation:RemoteHelmRepositoryContentSynchronisation": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "propertiesEnabled": {
                    "type": "boolean",
                    "description": "If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceOriginAbsenceDetection": {
                    "type": "boolean",
                    "description": "If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statisticsEnabled": {
                    "type": "boolean",
                    "description": "If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "artifactory:index/RemoteNpmRepositoryContentSynchronisation:RemoteNpmRepositoryContentSynchronisation": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "propertiesEnabled": {
                    "type": "boolean",
                    "description": "If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceOriginAbsenceDetection": {
                    "type": "boolean",
                    "description": "If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statisticsEnabled": {
                    "type": "boolean",
                    "description": "If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "artifactory:index/RemotePypiRepositoryContentSynchronisation:RemotePypiRepositoryContentSynchronisation": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "propertiesEnabled": {
                    "type": "boolean",
                    "description": "If set, properties for artifacts that have been cached in this repository will be updated if they are modified in the artifact hosted at the remote Artifactory instance. The trigger to synchronize the properties is download of the artifact from the remote repository cache of the local Artifactory instance. Default value is 'false'.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceOriginAbsenceDetection": {
                    "type": "boolean",
                    "description": "If set, Artifactory displays an indication on cached items if they have been deleted from the corresponding repository in the remote Artifactory instance. Default value is 'false'\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statisticsEnabled": {
                    "type": "boolean",
                    "description": "If set, Artifactory will notify the remote instance whenever an artifact in the Smart Remote Repository is downloaded locally so that it can update its download counter. Note that if this option is not set, there may be a discrepancy between the number of artifacts reported to have been downloaded in the different Artifactory instances of the proxy chain. Default value is 'false'.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "artifactory:index/RemoteRepositoryContentSynchronisation:RemoteRepositoryContentSynchronisation": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "If set, Remote repository proxies a local or remote repository from another instance of Artifactory. Default value is 'false'.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "artifactory:index/ReplicationConfigReplication:ReplicationConfigReplication": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Requires password encryption to be turned off `POST /api/system/decrypt`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathPrefix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "socketTimeoutMillis": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "syncDeletes": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "syncProperties": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "syncStatistics": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "password",
                        "socketTimeoutMillis",
                        "syncDeletes",
                        "syncProperties",
                        "syncStatistics"
                    ]
                }
            }
        },
        "artifactory:index/XrayPolicyRule:XrayPolicyRule": {
            "properties": {
                "actions": {
                    "$ref": "#/types/artifactory:index/XrayPolicyRuleActions:XrayPolicyRuleActions",
                    "description": "(Required) Nested block describing the actions to be applied by the policy. Described below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "criteria": {
                    "$ref": "#/types/artifactory:index/XrayPolicyRuleCriteria:XrayPolicyRuleCriteria",
                    "description": "(Required) Nested block describing the criteria for the policy. Described below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Required) Name of the rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": "(Required) Integer describing the rule priority\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "criteria",
                "name",
                "priority"
            ]
        },
        "artifactory:index/XrayPolicyRuleActions:XrayPolicyRuleActions": {
            "properties": {
                "blockDownload": {
                    "$ref": "#/types/artifactory:index/XrayPolicyRuleActionsBlockDownload:XrayPolicyRuleActionsBlockDownload",
                    "description": "(Optional) Nested block describing artifacts that should be blocked for download if a violation is triggered. Described below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customSeverity": {
                    "type": "string",
                    "description": "(Optional) The severity of violation to be triggered if the `criteria` are met.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "failBuild": {
                    "type": "boolean",
                    "description": "(Optional) Whether or not the related CI build should be marked as failed if a violation is triggered. This option is only available when the policy is applied to an `xray_watch` resource with a `type` of `builds`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) A list of email addressed that will get emailed when a violation is triggered.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "webhooks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) A list of Xray-configured webhook URLs to be invoked if a violation is triggered.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "blockDownload"
            ]
        },
        "artifactory:index/XrayPolicyRuleActionsBlockDownload:XrayPolicyRuleActionsBlockDownload": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Whether or not to block download of artifacts that meet the artifact and severity `filters` for the associated `xray_watch` resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unscanned": {
                    "type": "boolean",
                    "description": "Whether or not to block download of artifacts that meet the artifact `filters` for the associated `xray_watch` resource but have not been scanned yet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "active",
                "unscanned"
            ]
        },
        "artifactory:index/XrayPolicyRuleCriteria:XrayPolicyRuleCriteria": {
            "properties": {
                "allowUnknown": {
                    "type": "boolean",
                    "description": "(Optional) Whether or not to allow components whose license cannot be determined (`true` or `false`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowedLicenses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) A list of OSS license names that may be attached to a component.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bannedLicenses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) A list of OSS license names that may not be attached to a component.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cvssRange": {
                    "$ref": "#/types/artifactory:index/XrayPolicyRuleCriteriaCvssRange:XrayPolicyRuleCriteriaCvssRange",
                    "description": "(Optional) Nested block describing a CVS score range to be impacted. Defined below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minSeverity": {
                    "type": "string",
                    "description": "(Optional) The minimum security vulnerability severity that will be impacted by the policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "artifactory:index/XrayPolicyRuleCriteriaCvssRange:XrayPolicyRuleCriteriaCvssRange": {
            "properties": {
                "from": {
                    "type": "integer",
                    "description": "(Required) The beginning of the range of CVS scores (from 1-10) to flag.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "to": {
                    "type": "integer",
                    "description": "(Required) The end of the range of CVS scores (from 1-10) to flag.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "from",
                "to"
            ]
        },
        "artifactory:index/XrayWatchAssignedPolicy:XrayWatchAssignedPolicy": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the policy that will be applied\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of the policy\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ]
        },
        "artifactory:index/XrayWatchResource:XrayWatchResource": {
            "properties": {
                "binMgrId": {
                    "type": "string",
                    "description": "The ID number of a binary manager resource\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/XrayWatchResourceFilter:XrayWatchResourceFilter"
                    },
                    "description": "Nested argument describing filters to be applied. Defined below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "A name describing the resource\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repoType": {
                    "type": "string",
                    "description": "Type of repository (e.g. local or remote)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of resource to be watched\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "repoType",
                        "type"
                    ]
                }
            }
        },
        "artifactory:index/XrayWatchResourceFilter:XrayWatchResourceFilter": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "The type of filter, such as `regex` or `package-type`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The value of the filter, such as the text of the regex or name of the package type\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type",
                "value"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the artifactory package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "accessToken": {
                "type": "string",
                "description": "This is a bearer token that can be given to you by your admin under `Identity and Access`\n"
            },
            "apiKey": {
                "type": "string",
                "deprecationMessage": "Xray and projects functionality will not work with any auth method other than access tokens (Bearer)"
            },
            "checkLicense": {
                "type": "boolean",
                "description": "Toggle for pre-flight checking of Artifactory Pro and Enterprise license. Default to `true`.\n"
            },
            "password": {
                "type": "string",
                "description": "Insider note: You may actually use an api_key as the password. This will get your around xray limitations instead of a\nbearer token\n",
                "deprecationMessage": "Xray and projects functionality will not work with any auth method other than access tokens (Bearer)"
            },
            "url": {
                "type": "string"
            },
            "username": {
                "type": "string",
                "deprecationMessage": "Xray and projects functionality will not work with any auth method other than access tokens (Bearer)"
            }
        },
        "inputProperties": {
            "accessToken": {
                "type": "string",
                "description": "This is a bearer token that can be given to you by your admin under `Identity and Access`\n"
            },
            "apiKey": {
                "type": "string",
                "deprecationMessage": "Xray and projects functionality will not work with any auth method other than access tokens (Bearer)"
            },
            "checkLicense": {
                "type": "boolean",
                "description": "Toggle for pre-flight checking of Artifactory Pro and Enterprise license. Default to `true`.\n",
                "default": false
            },
            "password": {
                "type": "string",
                "description": "Insider note: You may actually use an api_key as the password. This will get your around xray limitations instead of a\nbearer token\n",
                "deprecationMessage": "Xray and projects functionality will not work with any auth method other than access tokens (Bearer)"
            },
            "url": {
                "type": "string"
            },
            "username": {
                "type": "string",
                "deprecationMessage": "Xray and projects functionality will not work with any auth method other than access tokens (Bearer)"
            }
        }
    },
    "resources": {
        "artifactory:index/accessToken:AccessToken": {
            "description": "\n\n\n## Import\n\nArtifactory **does not** retain access tokens and cannot be imported into state. ",
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Returns the access token to authenciate to Artifactory\n",
                    "language": {
                        "csharp": {
                            "name": "Details"
                        }
                    }
                },
                "adminToken": {
                    "$ref": "#/types/artifactory:index/AccessTokenAdminToken:AccessTokenAdminToken",
                    "description": "(Optional) Specify the `instance_id` in this block to grant this token admin privileges. This can only be created when the authenticated user is an admin. `admin_token` cannot be specified with `groups`.\n"
                },
                "audience": {
                    "type": "string",
                    "description": "(Optional) A space-separate list of the other Artifactory instances or services that should accept this token identified by their Artifactory Service IDs. You may set `\"jfrt@*\"` so the token to be accepted by all Artifactory instances.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "(Optional) The end date which the token is valid until, formatted as a RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).\n"
                },
                "endDateRelative": {
                    "type": "string",
                    "description": "(Optional) A relative duration for which the token is valid until, for example `240h` (10 days) or `2400h30m`. Valid time units are \"s\", \"m\", \"h\".\n"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) List of groups. The token is granted access based on the permissions of the groups. Specify `[\"*\"]` for all groups that the user belongs to. `groups` cannot be specified with `admin_token`.\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "Returns the refresh token when `refreshable` is true, or an empty string when `refreshable` is false\n"
                },
                "refreshable": {
                    "type": "boolean",
                    "description": "(Optional) Is this token refreshable? Defaults to `false`\n"
                },
                "username": {
                    "type": "string",
                    "description": "(Required) The username or subject for the token. A non-admin can only specify their own username. Admins can specify any existing username, or a new name for a temporary token. Temporary tokens require `groups` to be set.\n"
                }
            },
            "required": [
                "accessToken",
                "endDate",
                "refreshToken",
                "username"
            ],
            "inputProperties": {
                "adminToken": {
                    "$ref": "#/types/artifactory:index/AccessTokenAdminToken:AccessTokenAdminToken",
                    "description": "(Optional) Specify the `instance_id` in this block to grant this token admin privileges. This can only be created when the authenticated user is an admin. `admin_token` cannot be specified with `groups`.\n"
                },
                "audience": {
                    "type": "string",
                    "description": "(Optional) A space-separate list of the other Artifactory instances or services that should accept this token identified by their Artifactory Service IDs. You may set `\"jfrt@*\"` so the token to be accepted by all Artifactory instances.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "(Optional) The end date which the token is valid until, formatted as a RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).\n"
                },
                "endDateRelative": {
                    "type": "string",
                    "description": "(Optional) A relative duration for which the token is valid until, for example `240h` (10 days) or `2400h30m`. Valid time units are \"s\", \"m\", \"h\".\n"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) List of groups. The token is granted access based on the permissions of the groups. Specify `[\"*\"]` for all groups that the user belongs to. `groups` cannot be specified with `admin_token`.\n"
                },
                "refreshable": {
                    "type": "boolean",
                    "description": "(Optional) Is this token refreshable? Defaults to `false`\n"
                },
                "username": {
                    "type": "string",
                    "description": "(Required) The username or subject for the token. A non-admin can only specify their own username. Admins can specify any existing username, or a new name for a temporary token. Temporary tokens require `groups` to be set.\n"
                }
            },
            "requiredInputs": [
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccessToken resources.\n",
                "properties": {
                    "accessToken": {
                        "type": "string",
                        "description": "Returns the access token to authenciate to Artifactory\n",
                        "language": {
                            "csharp": {
                                "name": "Details"
                            }
                        }
                    },
                    "adminToken": {
                        "$ref": "#/types/artifactory:index/AccessTokenAdminToken:AccessTokenAdminToken",
                        "description": "(Optional) Specify the `instance_id` in this block to grant this token admin privileges. This can only be created when the authenticated user is an admin. `admin_token` cannot be specified with `groups`.\n"
                    },
                    "audience": {
                        "type": "string",
                        "description": "(Optional) A space-separate list of the other Artifactory instances or services that should accept this token identified by their Artifactory Service IDs. You may set `\"jfrt@*\"` so the token to be accepted by all Artifactory instances.\n"
                    },
                    "endDate": {
                        "type": "string",
                        "description": "(Optional) The end date which the token is valid until, formatted as a RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).\n"
                    },
                    "endDateRelative": {
                        "type": "string",
                        "description": "(Optional) A relative duration for which the token is valid until, for example `240h` (10 days) or `2400h30m`. Valid time units are \"s\", \"m\", \"h\".\n"
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Optional) List of groups. The token is granted access based on the permissions of the groups. Specify `[\"*\"]` for all groups that the user belongs to. `groups` cannot be specified with `admin_token`.\n"
                    },
                    "refreshToken": {
                        "type": "string",
                        "description": "Returns the refresh token when `refreshable` is true, or an empty string when `refreshable` is false\n"
                    },
                    "refreshable": {
                        "type": "boolean",
                        "description": "(Optional) Is this token refreshable? Defaults to `false`\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "(Required) The username or subject for the token. A non-admin can only specify their own username. Admins can specify any existing username, or a new name for a temporary token. Temporary tokens require `groups` to be set.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/alpineRepository:AlpineRepository": {
            "description": "## # Artifactory Local Alpine Repository Resource\n\nCreates a local Alpine repository and allows for the creation of a \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\nimport * from \"fs\";\n\nconst some_keypairRSA = new artifactory.Keypair(\"some-keypairRSA\", {\n    pairName: \"some-keypair\",\n    pairType: \"RSA\",\n    alias: \"foo-alias\",\n    privateKey: fs.readFileSync(\"samples/rsa.priv\"),\n    publicKey: fs.readFileSync(\"samples/rsa.pub\"),\n});\nconst terraform_local_test_alpine_repo_basic = new artifactory.AlpineRepository(\"terraform-local-test-alpine-repo-basic\", {\n    key: \"terraform-local-test-alpine-repo-basic\",\n    primaryKeypairRef: some_keypairRSA.pairName,\n}, {\n    dependsOn: [some_keypairRSA],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nsome_keypair_rsa = artifactory.Keypair(\"some-keypairRSA\",\n    pair_name=\"some-keypair\",\n    pair_type=\"RSA\",\n    alias=\"foo-alias\",\n    private_key=(lambda path: open(path).read())(\"samples/rsa.priv\"),\n    public_key=(lambda path: open(path).read())(\"samples/rsa.pub\"))\nterraform_local_test_alpine_repo_basic = artifactory.AlpineRepository(\"terraform-local-test-alpine-repo-basic\",\n    key=\"terraform-local-test-alpine-repo-basic\",\n    primary_keypair_ref=some_keypair_rsa.pair_name,\n    opts=pulumi.ResourceOptions(depends_on=[some_keypair_rsa]))\n```\n```csharp\nusing System.IO;\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var some_keypairRSA = new Artifactory.Keypair(\"some-keypairRSA\", new Artifactory.KeypairArgs\n        {\n            PairName = \"some-keypair\",\n            PairType = \"RSA\",\n            Alias = \"foo-alias\",\n            PrivateKey = File.ReadAllText(\"samples/rsa.priv\"),\n            PublicKey = File.ReadAllText(\"samples/rsa.pub\"),\n        });\n        var terraform_local_test_alpine_repo_basic = new Artifactory.AlpineRepository(\"terraform-local-test-alpine-repo-basic\", new Artifactory.AlpineRepositoryArgs\n        {\n            Key = \"terraform-local-test-alpine-repo-basic\",\n            PrimaryKeypairRef = some_keypairRSA.PairName,\n        }, new CustomResourceOptions\n        {\n            DependsOn = \n            {\n                some_keypairRSA,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"io/ioutil\"\n\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := ioutil.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewKeypair(ctx, \"some-keypairRSA\", \u0026artifactory.KeypairArgs{\n\t\t\tPairName:   pulumi.String(\"some-keypair\"),\n\t\t\tPairType:   pulumi.String(\"RSA\"),\n\t\t\tAlias:      pulumi.String(\"foo-alias\"),\n\t\t\tPrivateKey: readFileOrPanic(\"samples/rsa.priv\"),\n\t\t\tPublicKey:  readFileOrPanic(\"samples/rsa.pub\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = artifactory.NewAlpineRepository(ctx, \"terraform-local-test-alpine-repo-basic\", \u0026artifactory.AlpineRepositoryArgs{\n\t\t\tKey:               pulumi.String(\"terraform-local-test-alpine-repo-basic\"),\n\t\t\tPrimaryKeypairRef: some_keypairRSA.PairName,\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tsome_keypairRSA,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "indexCompressionFormats": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "primaryKeypairRef": {
                    "type": "string",
                    "description": "- The RSA key to be used to sign alpine indecies\n"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "indexCompressionFormats": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "primaryKeypairRef": {
                    "type": "string",
                    "description": "- The RSA key to be used to sign alpine indecies\n"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlpineRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "indexCompressionFormats": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "primaryKeypairRef": {
                        "type": "string",
                        "description": "- The RSA key to be used to sign alpine indecies\n"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/apiKey:ApiKey": {
            "description": "\n\n\n## Import\n\nA user's API key can be imported using any identifier, e.g.\n\n```sh\n $ pulumi import artifactory:index/apiKey:ApiKey test import\n```\n\n ",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "The API key.\n",
                    "language": {
                        "csharp": {
                            "name": "Key"
                        }
                    }
                }
            },
            "required": [
                "apiKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApiKey resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "The API key.\n",
                        "language": {
                            "csharp": {
                                "name": "Key"
                            }
                        }
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/artifactPropertyWebhook:ArtifactPropertyWebhook": {
            "description": "## # Artifactory Artifact Property Webhook Resource\n\nProvides an Artifactory webhook resource. This can be used to register and manage Artifactory webhook subscription which enables you to be notified or notify other users when such events take place in Artifactory.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n.\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst my_generic_local = new artifactory.LocalGenericRepository(\"my-generic-local\", {key: \"my-generic-local\"});\nconst artifact_webhook = new artifactory.ArtifactPropertyWebhook(\"artifact-webhook\", {\n    key: \"artifact-property-webhook\",\n    eventTypes: [\n        \"added\",\n        \"deleted\",\n    ],\n    criteria: {\n        anyLocal: true,\n        anyRemote: false,\n        repoKeys: [my_generic_local.key],\n        includePatterns: [\"foo/**\"],\n        excludePatterns: [\"bar/**\"],\n    },\n    url: \"http://tempurl.org/webhook\",\n    secret: \"some-secret\",\n    proxy: \"proxy-key\",\n    customHttpHeaders: {\n        \"header-1\": \"value-1\",\n        \"header-2\": \"value-2\",\n    },\n}, {\n    dependsOn: [my_generic_local],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nmy_generic_local = artifactory.LocalGenericRepository(\"my-generic-local\", key=\"my-generic-local\")\nartifact_webhook = artifactory.ArtifactPropertyWebhook(\"artifact-webhook\",\n    key=\"artifact-property-webhook\",\n    event_types=[\n        \"added\",\n        \"deleted\",\n    ],\n    criteria=artifactory.ArtifactPropertyWebhookCriteriaArgs(\n        any_local=True,\n        any_remote=False,\n        repo_keys=[my_generic_local.key],\n        include_patterns=[\"foo/**\"],\n        exclude_patterns=[\"bar/**\"],\n    ),\n    url=\"http://tempurl.org/webhook\",\n    secret=\"some-secret\",\n    proxy=\"proxy-key\",\n    custom_http_headers={\n        \"header-1\": \"value-1\",\n        \"header-2\": \"value-2\",\n    },\n    opts=pulumi.ResourceOptions(depends_on=[my_generic_local]))\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var my_generic_local = new Artifactory.LocalGenericRepository(\"my-generic-local\", new Artifactory.LocalGenericRepositoryArgs\n        {\n            Key = \"my-generic-local\",\n        });\n        var artifact_webhook = new Artifactory.ArtifactPropertyWebhook(\"artifact-webhook\", new Artifactory.ArtifactPropertyWebhookArgs\n        {\n            Key = \"artifact-property-webhook\",\n            EventTypes = \n            {\n                \"added\",\n                \"deleted\",\n            },\n            Criteria = new Artifactory.Inputs.ArtifactPropertyWebhookCriteriaArgs\n            {\n                AnyLocal = true,\n                AnyRemote = false,\n                RepoKeys = \n                {\n                    my_generic_local.Key,\n                },\n                IncludePatterns = \n                {\n                    \"foo/**\",\n                },\n                ExcludePatterns = \n                {\n                    \"bar/**\",\n                },\n            },\n            Url = \"http://tempurl.org/webhook\",\n            Secret = \"some-secret\",\n            Proxy = \"proxy-key\",\n            CustomHttpHeaders = \n            {\n                { \"header-1\", \"value-1\" },\n                { \"header-2\", \"value-2\" },\n            },\n        }, new CustomResourceOptions\n        {\n            DependsOn = \n            {\n                my_generic_local,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewLocalGenericRepository(ctx, \"my-generic-local\", \u0026artifactory.LocalGenericRepositoryArgs{\n\t\t\tKey: pulumi.String(\"my-generic-local\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = artifactory.NewArtifactPropertyWebhook(ctx, \"artifact-webhook\", \u0026artifactory.ArtifactPropertyWebhookArgs{\n\t\t\tKey: pulumi.String(\"artifact-property-webhook\"),\n\t\t\tEventTypes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"added\"),\n\t\t\t\tpulumi.String(\"deleted\"),\n\t\t\t},\n\t\t\tCriteria: \u0026ArtifactPropertyWebhookCriteriaArgs{\n\t\t\t\tAnyLocal:  pulumi.Bool(true),\n\t\t\t\tAnyRemote: pulumi.Bool(false),\n\t\t\t\tRepoKeys: pulumi.StringArray{\n\t\t\t\t\tmy_generic_local.Key,\n\t\t\t\t},\n\t\t\t\tIncludePatterns: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"foo/**\"),\n\t\t\t\t},\n\t\t\t\tExcludePatterns: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"bar/**\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tUrl:    pulumi.String(\"http://tempurl.org/webhook\"),\n\t\t\tSecret: pulumi.String(\"some-secret\"),\n\t\t\tProxy:  pulumi.String(\"proxy-key\"),\n\t\t\tCustomHttpHeaders: pulumi.StringMap{\n\t\t\t\t\"header-1\": pulumi.String(\"value-1\"),\n\t\t\t\t\"header-2\": pulumi.String(\"value-2\"),\n\t\t\t},\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tmy_generic_local,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "criteria": {
                    "$ref": "#/types/artifactory:index/ArtifactPropertyWebhookCriteria:ArtifactPropertyWebhookCriteria",
                    "description": "Specifies where the webhook will be applied on which repositories.\n"
                },
                "customHttpHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Webhook description. Max length 1000 characters.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Status of webhook. Default to 'true'\n"
                },
                "eventTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow values: \"added\", \"deleted\"\n"
                },
                "key": {
                    "type": "string",
                    "description": "The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.\n"
                },
                "proxy": {
                    "type": "string",
                    "description": "Proxy key from Artifactory Proxies setting\n"
                },
                "secret": {
                    "type": "string",
                    "description": "Secret authentication token that will be sent to the configured URL\n"
                },
                "url": {
                    "type": "string",
                    "description": "Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.\n"
                }
            },
            "required": [
                "criteria",
                "eventTypes",
                "key",
                "url"
            ],
            "inputProperties": {
                "criteria": {
                    "$ref": "#/types/artifactory:index/ArtifactPropertyWebhookCriteria:ArtifactPropertyWebhookCriteria",
                    "description": "Specifies where the webhook will be applied on which repositories.\n"
                },
                "customHttpHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Webhook description. Max length 1000 characters.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Status of webhook. Default to 'true'\n"
                },
                "eventTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow values: \"added\", \"deleted\"\n"
                },
                "key": {
                    "type": "string",
                    "description": "The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.\n"
                },
                "proxy": {
                    "type": "string",
                    "description": "Proxy key from Artifactory Proxies setting\n"
                },
                "secret": {
                    "type": "string",
                    "description": "Secret authentication token that will be sent to the configured URL\n"
                },
                "url": {
                    "type": "string",
                    "description": "Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.\n"
                }
            },
            "requiredInputs": [
                "criteria",
                "eventTypes",
                "key",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ArtifactPropertyWebhook resources.\n",
                "properties": {
                    "criteria": {
                        "$ref": "#/types/artifactory:index/ArtifactPropertyWebhookCriteria:ArtifactPropertyWebhookCriteria",
                        "description": "Specifies where the webhook will be applied on which repositories.\n"
                    },
                    "customHttpHeaders": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Webhook description. Max length 1000 characters.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Status of webhook. Default to 'true'\n"
                    },
                    "eventTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow values: \"added\", \"deleted\"\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.\n"
                    },
                    "proxy": {
                        "type": "string",
                        "description": "Proxy key from Artifactory Proxies setting\n"
                    },
                    "secret": {
                        "type": "string",
                        "description": "Secret authentication token that will be sent to the configured URL\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/artifactWebhook:ArtifactWebhook": {
            "description": "## # Artifactory Artifact Webhook Resource\n\nProvides an Artifactory webhook resource. This can be used to register and manage Artifactory webhook subscription which enables you to be notified or notify other users when such events take place in Artifactory.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n.\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst my_generic_local = new artifactory.LocalGenericRepository(\"my-generic-local\", {key: \"my-generic-local\"});\nconst artifact_webhook = new artifactory.ArtifactWebhook(\"artifact-webhook\", {\n    key: \"artifact-webhook\",\n    eventTypes: [\n        \"deployed\",\n        \"deleted\",\n        \"moved\",\n        \"copied\",\n    ],\n    criteria: {\n        anyLocal: true,\n        anyRemote: false,\n        repoKeys: [my_generic_local.key],\n        includePatterns: [\"foo/**\"],\n        excludePatterns: [\"bar/**\"],\n    },\n    url: \"http://tempurl.org/webhook\",\n    secret: \"some-secret\",\n    proxy: \"proxy-key\",\n    customHttpHeaders: {\n        \"header-1\": \"value-1\",\n        \"header-2\": \"value-2\",\n    },\n}, {\n    dependsOn: [my_generic_local],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nmy_generic_local = artifactory.LocalGenericRepository(\"my-generic-local\", key=\"my-generic-local\")\nartifact_webhook = artifactory.ArtifactWebhook(\"artifact-webhook\",\n    key=\"artifact-webhook\",\n    event_types=[\n        \"deployed\",\n        \"deleted\",\n        \"moved\",\n        \"copied\",\n    ],\n    criteria=artifactory.ArtifactWebhookCriteriaArgs(\n        any_local=True,\n        any_remote=False,\n        repo_keys=[my_generic_local.key],\n        include_patterns=[\"foo/**\"],\n        exclude_patterns=[\"bar/**\"],\n    ),\n    url=\"http://tempurl.org/webhook\",\n    secret=\"some-secret\",\n    proxy=\"proxy-key\",\n    custom_http_headers={\n        \"header-1\": \"value-1\",\n        \"header-2\": \"value-2\",\n    },\n    opts=pulumi.ResourceOptions(depends_on=[my_generic_local]))\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var my_generic_local = new Artifactory.LocalGenericRepository(\"my-generic-local\", new Artifactory.LocalGenericRepositoryArgs\n        {\n            Key = \"my-generic-local\",\n        });\n        var artifact_webhook = new Artifactory.ArtifactWebhook(\"artifact-webhook\", new Artifactory.ArtifactWebhookArgs\n        {\n            Key = \"artifact-webhook\",\n            EventTypes = \n            {\n                \"deployed\",\n                \"deleted\",\n                \"moved\",\n                \"copied\",\n            },\n            Criteria = new Artifactory.Inputs.ArtifactWebhookCriteriaArgs\n            {\n                AnyLocal = true,\n                AnyRemote = false,\n                RepoKeys = \n                {\n                    my_generic_local.Key,\n                },\n                IncludePatterns = \n                {\n                    \"foo/**\",\n                },\n                ExcludePatterns = \n                {\n                    \"bar/**\",\n                },\n            },\n            Url = \"http://tempurl.org/webhook\",\n            Secret = \"some-secret\",\n            Proxy = \"proxy-key\",\n            CustomHttpHeaders = \n            {\n                { \"header-1\", \"value-1\" },\n                { \"header-2\", \"value-2\" },\n            },\n        }, new CustomResourceOptions\n        {\n            DependsOn = \n            {\n                my_generic_local,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewLocalGenericRepository(ctx, \"my-generic-local\", \u0026artifactory.LocalGenericRepositoryArgs{\n\t\t\tKey: pulumi.String(\"my-generic-local\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = artifactory.NewArtifactWebhook(ctx, \"artifact-webhook\", \u0026artifactory.ArtifactWebhookArgs{\n\t\t\tKey: pulumi.String(\"artifact-webhook\"),\n\t\t\tEventTypes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"deployed\"),\n\t\t\t\tpulumi.String(\"deleted\"),\n\t\t\t\tpulumi.String(\"moved\"),\n\t\t\t\tpulumi.String(\"copied\"),\n\t\t\t},\n\t\t\tCriteria: \u0026ArtifactWebhookCriteriaArgs{\n\t\t\t\tAnyLocal:  pulumi.Bool(true),\n\t\t\t\tAnyRemote: pulumi.Bool(false),\n\t\t\t\tRepoKeys: pulumi.StringArray{\n\t\t\t\t\tmy_generic_local.Key,\n\t\t\t\t},\n\t\t\t\tIncludePatterns: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"foo/**\"),\n\t\t\t\t},\n\t\t\t\tExcludePatterns: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"bar/**\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tUrl:    pulumi.String(\"http://tempurl.org/webhook\"),\n\t\t\tSecret: pulumi.String(\"some-secret\"),\n\t\t\tProxy:  pulumi.String(\"proxy-key\"),\n\t\t\tCustomHttpHeaders: pulumi.StringMap{\n\t\t\t\t\"header-1\": pulumi.String(\"value-1\"),\n\t\t\t\t\"header-2\": pulumi.String(\"value-2\"),\n\t\t\t},\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tmy_generic_local,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "criteria": {
                    "$ref": "#/types/artifactory:index/ArtifactWebhookCriteria:ArtifactWebhookCriteria",
                    "description": "Specifies where the webhook will be applied on which repositories.\n"
                },
                "customHttpHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Webhook description. Max length 1000 characters.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Status of webhook. Default to 'true'\n"
                },
                "eventTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow values: \"deployed\", \"deleted\", \"moved\", \"copied\"\n"
                },
                "key": {
                    "type": "string",
                    "description": "The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.\n"
                },
                "proxy": {
                    "type": "string",
                    "description": "Proxy key from Artifactory Proxies setting\n"
                },
                "secret": {
                    "type": "string",
                    "description": "Secret authentication token that will be sent to the configured URL\n"
                },
                "url": {
                    "type": "string",
                    "description": "Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.\n"
                }
            },
            "required": [
                "criteria",
                "eventTypes",
                "key",
                "url"
            ],
            "inputProperties": {
                "criteria": {
                    "$ref": "#/types/artifactory:index/ArtifactWebhookCriteria:ArtifactWebhookCriteria",
                    "description": "Specifies where the webhook will be applied on which repositories.\n"
                },
                "customHttpHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Webhook description. Max length 1000 characters.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Status of webhook. Default to 'true'\n"
                },
                "eventTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow values: \"deployed\", \"deleted\", \"moved\", \"copied\"\n"
                },
                "key": {
                    "type": "string",
                    "description": "The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.\n"
                },
                "proxy": {
                    "type": "string",
                    "description": "Proxy key from Artifactory Proxies setting\n"
                },
                "secret": {
                    "type": "string",
                    "description": "Secret authentication token that will be sent to the configured URL\n"
                },
                "url": {
                    "type": "string",
                    "description": "Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.\n"
                }
            },
            "requiredInputs": [
                "criteria",
                "eventTypes",
                "key",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ArtifactWebhook resources.\n",
                "properties": {
                    "criteria": {
                        "$ref": "#/types/artifactory:index/ArtifactWebhookCriteria:ArtifactWebhookCriteria",
                        "description": "Specifies where the webhook will be applied on which repositories.\n"
                    },
                    "customHttpHeaders": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Webhook description. Max length 1000 characters.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Status of webhook. Default to 'true'\n"
                    },
                    "eventTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow values: \"deployed\", \"deleted\", \"moved\", \"copied\"\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.\n"
                    },
                    "proxy": {
                        "type": "string",
                        "description": "Proxy key from Artifactory Proxies setting\n"
                    },
                    "secret": {
                        "type": "string",
                        "description": "Secret authentication token that will be sent to the configured URL\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/artifactoryReleaseBundleWebhook:ArtifactoryReleaseBundleWebhook": {
            "description": "## # Artifactory Release Bundle Webhook Resource\n\nProvides an Artifactory webhook resource. This can be used to register and manage Artifactory webhook subscription which enables you to be notified or notify other users when such events take place in Artifactory.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n.\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst release_bundle_webhook = new artifactory.ReleaseBundleWebhook(\"release-bundle-webhook\", {\n    criteria: {\n        anyReleaseBundle: false,\n        excludePatterns: [\"bar/**\"],\n        includePatterns: [\"foo/**\"],\n        registeredReleaseBundleNames: [\"bundle-name\"],\n    },\n    customHttpHeaders: {\n        \"header-1\": \"value-1\",\n        \"header-2\": \"value-2\",\n    },\n    eventTypes: [\n        \"created\",\n        \"signed\",\n        \"deleted\",\n    ],\n    key: \"release-bundle-webhook\",\n    proxy: \"proxy-key\",\n    secret: \"some-secret\",\n    url: \"http://tempurl.org/webhook\",\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nrelease_bundle_webhook = artifactory.ReleaseBundleWebhook(\"release-bundle-webhook\",\n    criteria=artifactory.ReleaseBundleWebhookCriteriaArgs(\n        any_release_bundle=False,\n        exclude_patterns=[\"bar/**\"],\n        include_patterns=[\"foo/**\"],\n        registered_release_bundle_names=[\"bundle-name\"],\n    ),\n    custom_http_headers={\n        \"header-1\": \"value-1\",\n        \"header-2\": \"value-2\",\n    },\n    event_types=[\n        \"created\",\n        \"signed\",\n        \"deleted\",\n    ],\n    key=\"release-bundle-webhook\",\n    proxy=\"proxy-key\",\n    secret=\"some-secret\",\n    url=\"http://tempurl.org/webhook\")\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var release_bundle_webhook = new Artifactory.ReleaseBundleWebhook(\"release-bundle-webhook\", new Artifactory.ReleaseBundleWebhookArgs\n        {\n            Criteria = new Artifactory.Inputs.ReleaseBundleWebhookCriteriaArgs\n            {\n                AnyReleaseBundle = false,\n                ExcludePatterns = \n                {\n                    \"bar/**\",\n                },\n                IncludePatterns = \n                {\n                    \"foo/**\",\n                },\n                RegisteredReleaseBundleNames = \n                {\n                    \"bundle-name\",\n                },\n            },\n            CustomHttpHeaders = \n            {\n                { \"header-1\", \"value-1\" },\n                { \"header-2\", \"value-2\" },\n            },\n            EventTypes = \n            {\n                \"created\",\n                \"signed\",\n                \"deleted\",\n            },\n            Key = \"release-bundle-webhook\",\n            Proxy = \"proxy-key\",\n            Secret = \"some-secret\",\n            Url = \"http://tempurl.org/webhook\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewReleaseBundleWebhook(ctx, \"release-bundle-webhook\", \u0026artifactory.ReleaseBundleWebhookArgs{\n\t\t\tCriteria: \u0026ReleaseBundleWebhookCriteriaArgs{\n\t\t\t\tAnyReleaseBundle: pulumi.Bool(false),\n\t\t\t\tExcludePatterns: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"bar/**\"),\n\t\t\t\t},\n\t\t\t\tIncludePatterns: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"foo/**\"),\n\t\t\t\t},\n\t\t\t\tRegisteredReleaseBundleNames: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"bundle-name\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tCustomHttpHeaders: pulumi.StringMap{\n\t\t\t\t\"header-1\": pulumi.String(\"value-1\"),\n\t\t\t\t\"header-2\": pulumi.String(\"value-2\"),\n\t\t\t},\n\t\t\tEventTypes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"created\"),\n\t\t\t\tpulumi.String(\"signed\"),\n\t\t\t\tpulumi.String(\"deleted\"),\n\t\t\t},\n\t\t\tKey:    pulumi.String(\"release-bundle-webhook\"),\n\t\t\tProxy:  pulumi.String(\"proxy-key\"),\n\t\t\tSecret: pulumi.String(\"some-secret\"),\n\t\t\tUrl:    pulumi.String(\"http://tempurl.org/webhook\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "criteria": {
                    "$ref": "#/types/artifactory:index/ArtifactoryReleaseBundleWebhookCriteria:ArtifactoryReleaseBundleWebhookCriteria",
                    "description": "Specifies where the webhook will be applied on which repositories.\n"
                },
                "customHttpHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Webhook description. Max length 1000 characters.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Status of webhook. Default to 'true'\n"
                },
                "eventTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow values: \"created\", \"signed\", \"deleted\"\n"
                },
                "key": {
                    "type": "string",
                    "description": "The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.\n"
                },
                "proxy": {
                    "type": "string",
                    "description": "Proxy key from Artifactory Proxies setting\n"
                },
                "secret": {
                    "type": "string",
                    "description": "Secret authentication token that will be sent to the configured URL\n"
                },
                "url": {
                    "type": "string",
                    "description": "Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.\n"
                }
            },
            "required": [
                "criteria",
                "eventTypes",
                "key",
                "url"
            ],
            "inputProperties": {
                "criteria": {
                    "$ref": "#/types/artifactory:index/ArtifactoryReleaseBundleWebhookCriteria:ArtifactoryReleaseBundleWebhookCriteria",
                    "description": "Specifies where the webhook will be applied on which repositories.\n"
                },
                "customHttpHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Webhook description. Max length 1000 characters.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Status of webhook. Default to 'true'\n"
                },
                "eventTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow values: \"created\", \"signed\", \"deleted\"\n"
                },
                "key": {
                    "type": "string",
                    "description": "The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.\n"
                },
                "proxy": {
                    "type": "string",
                    "description": "Proxy key from Artifactory Proxies setting\n"
                },
                "secret": {
                    "type": "string",
                    "description": "Secret authentication token that will be sent to the configured URL\n"
                },
                "url": {
                    "type": "string",
                    "description": "Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.\n"
                }
            },
            "requiredInputs": [
                "criteria",
                "eventTypes",
                "key",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ArtifactoryReleaseBundleWebhook resources.\n",
                "properties": {
                    "criteria": {
                        "$ref": "#/types/artifactory:index/ArtifactoryReleaseBundleWebhookCriteria:ArtifactoryReleaseBundleWebhookCriteria",
                        "description": "Specifies where the webhook will be applied on which repositories.\n"
                    },
                    "customHttpHeaders": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Webhook description. Max length 1000 characters.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Status of webhook. Default to 'true'\n"
                    },
                    "eventTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow values: \"created\", \"signed\", \"deleted\"\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.\n"
                    },
                    "proxy": {
                        "type": "string",
                        "description": "Proxy key from Artifactory Proxies setting\n"
                    },
                    "secret": {
                        "type": "string",
                        "description": "Secret authentication token that will be sent to the configured URL\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/buildWebhook:BuildWebhook": {
            "description": "## # Artifactory Build Webhook Resource\n\nProvides an Artifactory webhook resource. This can be used to register and manage Artifactory webhook subscription which enables you to be notified or notify other users when such events take place in Artifactory.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n.\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst build_webhook = new artifactory.BuildWebhook(\"build-webhook\", {\n    criteria: {\n        anyBuild: true,\n        excludePatterns: [\"bar/**\"],\n        includePatterns: [\"foo/**\"],\n        selectedBuilds: [\"build-id\"],\n    },\n    customHttpHeaders: {\n        \"header-1\": \"value-1\",\n        \"header-2\": \"value-2\",\n    },\n    eventTypes: [\n        \"uploaded\",\n        \"deleted\",\n        \"promoted\",\n    ],\n    key: \"build-webhook\",\n    proxy: \"proxy-key\",\n    secret: \"some-secret\",\n    url: \"http://tempurl.org/webhook\",\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nbuild_webhook = artifactory.BuildWebhook(\"build-webhook\",\n    criteria=artifactory.BuildWebhookCriteriaArgs(\n        any_build=True,\n        exclude_patterns=[\"bar/**\"],\n        include_patterns=[\"foo/**\"],\n        selected_builds=[\"build-id\"],\n    ),\n    custom_http_headers={\n        \"header-1\": \"value-1\",\n        \"header-2\": \"value-2\",\n    },\n    event_types=[\n        \"uploaded\",\n        \"deleted\",\n        \"promoted\",\n    ],\n    key=\"build-webhook\",\n    proxy=\"proxy-key\",\n    secret=\"some-secret\",\n    url=\"http://tempurl.org/webhook\")\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var build_webhook = new Artifactory.BuildWebhook(\"build-webhook\", new Artifactory.BuildWebhookArgs\n        {\n            Criteria = new Artifactory.Inputs.BuildWebhookCriteriaArgs\n            {\n                AnyBuild = true,\n                ExcludePatterns = \n                {\n                    \"bar/**\",\n                },\n                IncludePatterns = \n                {\n                    \"foo/**\",\n                },\n                SelectedBuilds = \n                {\n                    \"build-id\",\n                },\n            },\n            CustomHttpHeaders = \n            {\n                { \"header-1\", \"value-1\" },\n                { \"header-2\", \"value-2\" },\n            },\n            EventTypes = \n            {\n                \"uploaded\",\n                \"deleted\",\n                \"promoted\",\n            },\n            Key = \"build-webhook\",\n            Proxy = \"proxy-key\",\n            Secret = \"some-secret\",\n            Url = \"http://tempurl.org/webhook\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewBuildWebhook(ctx, \"build-webhook\", \u0026artifactory.BuildWebhookArgs{\n\t\t\tCriteria: \u0026BuildWebhookCriteriaArgs{\n\t\t\t\tAnyBuild: pulumi.Bool(true),\n\t\t\t\tExcludePatterns: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"bar/**\"),\n\t\t\t\t},\n\t\t\t\tIncludePatterns: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"foo/**\"),\n\t\t\t\t},\n\t\t\t\tSelectedBuilds: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"build-id\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tCustomHttpHeaders: pulumi.StringMap{\n\t\t\t\t\"header-1\": pulumi.String(\"value-1\"),\n\t\t\t\t\"header-2\": pulumi.String(\"value-2\"),\n\t\t\t},\n\t\t\tEventTypes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"uploaded\"),\n\t\t\t\tpulumi.String(\"deleted\"),\n\t\t\t\tpulumi.String(\"promoted\"),\n\t\t\t},\n\t\t\tKey:    pulumi.String(\"build-webhook\"),\n\t\t\tProxy:  pulumi.String(\"proxy-key\"),\n\t\t\tSecret: pulumi.String(\"some-secret\"),\n\t\t\tUrl:    pulumi.String(\"http://tempurl.org/webhook\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "criteria": {
                    "$ref": "#/types/artifactory:index/BuildWebhookCriteria:BuildWebhookCriteria",
                    "description": "Specifies where the webhook will be applied on which repositories.\n"
                },
                "customHttpHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Webhook description. Max length 1000 characters.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Status of webhook. Default to 'true'\n"
                },
                "eventTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow values: \"uploaded\", \"deleted\", \"promoted\"\n"
                },
                "key": {
                    "type": "string",
                    "description": "The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.\n"
                },
                "proxy": {
                    "type": "string",
                    "description": "Proxy key from Artifactory Proxies setting\n"
                },
                "secret": {
                    "type": "string",
                    "description": "Secret authentication token that will be sent to the configured URL\n"
                },
                "url": {
                    "type": "string",
                    "description": "Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.\n"
                }
            },
            "required": [
                "criteria",
                "eventTypes",
                "key",
                "url"
            ],
            "inputProperties": {
                "criteria": {
                    "$ref": "#/types/artifactory:index/BuildWebhookCriteria:BuildWebhookCriteria",
                    "description": "Specifies where the webhook will be applied on which repositories.\n"
                },
                "customHttpHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Webhook description. Max length 1000 characters.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Status of webhook. Default to 'true'\n"
                },
                "eventTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow values: \"uploaded\", \"deleted\", \"promoted\"\n"
                },
                "key": {
                    "type": "string",
                    "description": "The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.\n"
                },
                "proxy": {
                    "type": "string",
                    "description": "Proxy key from Artifactory Proxies setting\n"
                },
                "secret": {
                    "type": "string",
                    "description": "Secret authentication token that will be sent to the configured URL\n"
                },
                "url": {
                    "type": "string",
                    "description": "Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.\n"
                }
            },
            "requiredInputs": [
                "criteria",
                "eventTypes",
                "key",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BuildWebhook resources.\n",
                "properties": {
                    "criteria": {
                        "$ref": "#/types/artifactory:index/BuildWebhookCriteria:BuildWebhookCriteria",
                        "description": "Specifies where the webhook will be applied on which repositories.\n"
                    },
                    "customHttpHeaders": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Webhook description. Max length 1000 characters.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Status of webhook. Default to 'true'\n"
                    },
                    "eventTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow values: \"uploaded\", \"deleted\", \"promoted\"\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.\n"
                    },
                    "proxy": {
                        "type": "string",
                        "description": "Proxy key from Artifactory Proxies setting\n"
                    },
                    "secret": {
                        "type": "string",
                        "description": "Secret authentication token that will be sent to the configured URL\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/certificate:Certificate": {
            "description": "## # Artifactory Certificate Resource\n\nProvides an Artifactory certificate resource. This can be used to create and manage Artifactory certificates which can be used as client authentication against remote repositories.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\nimport * as fs from \"fs\";\n\n// Create a new Artifactory certificate called my-cert\nconst my_cert = new artifactory.Certificate(\"my-cert\", {\n    alias: \"my-cert\",\n    content: fs.readFileSync(\"/path/to/bundle.pem\", \"utf-8\"),\n});\n// This can then be used by a remote repository\nconst my_remote = new artifactory.RemoteRepository(\"my-remote\", {\n    // more code\n    clientTlsCertificate: my_cert.alias,\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\n# Create a new Artifactory certificate called my-cert\nmy_cert = artifactory.Certificate(\"my-cert\",\n    alias=\"my-cert\",\n    content=(lambda path: open(path).read())(\"/path/to/bundle.pem\"))\n# This can then be used by a remote repository\nmy_remote = artifactory.RemoteRepository(\"my-remote\", client_tls_certificate=my_cert.alias)\n```\n```csharp\nusing System.IO;\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new Artifactory certificate called my-cert\n        var my_cert = new Artifactory.Certificate(\"my-cert\", new Artifactory.CertificateArgs\n        {\n            Alias = \"my-cert\",\n            Content = File.ReadAllText(\"/path/to/bundle.pem\"),\n        });\n        // This can then be used by a remote repository\n        var my_remote = new Artifactory.RemoteRepository(\"my-remote\", new Artifactory.RemoteRepositoryArgs\n        {\n            ClientTlsCertificate = my_cert.Alias,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"io/ioutil\"\n\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := ioutil.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewCertificate(ctx, \"my-cert\", \u0026artifactory.CertificateArgs{\n\t\t\tAlias:   pulumi.String(\"my-cert\"),\n\t\t\tContent: readFileOrPanic(\"/path/to/bundle.pem\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = artifactory.NewRemoteRepository(ctx, \"my-remote\", \u0026artifactory.RemoteRepositoryArgs{\n\t\t\tClientTlsCertificate: my_cert.Alias,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCertificates can be imported using their alias, e.g.\n\n```sh\n $ pulumi import artifactory:index/certificate:Certificate my-cert my-cert\n```\n\n ",
            "properties": {
                "alias": {
                    "type": "string",
                    "description": "Name of certificate.\n"
                },
                "content": {
                    "type": "string",
                    "description": "PEM-encoded client certificate and private key.\n"
                },
                "file": {
                    "type": "string"
                },
                "fingerprint": {
                    "type": "string",
                    "description": "SHA256 fingerprint of the certificate.\n"
                },
                "issuedBy": {
                    "type": "string",
                    "description": "Name of the certificate authority that issued the certificate.\n"
                },
                "issuedOn": {
                    "type": "string",
                    "description": "The time \u0026 date when the certificate is valid from.\n"
                },
                "issuedTo": {
                    "type": "string",
                    "description": "Name of whom the certificate has been issued to.\n"
                },
                "validUntil": {
                    "type": "string",
                    "description": "The time \u0026 date when the certificate expires.\n"
                }
            },
            "required": [
                "alias",
                "fingerprint",
                "issuedBy",
                "issuedOn",
                "issuedTo",
                "validUntil"
            ],
            "inputProperties": {
                "alias": {
                    "type": "string",
                    "description": "Name of certificate.\n"
                },
                "content": {
                    "type": "string",
                    "description": "PEM-encoded client certificate and private key.\n"
                },
                "file": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "alias"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Certificate resources.\n",
                "properties": {
                    "alias": {
                        "type": "string",
                        "description": "Name of certificate.\n"
                    },
                    "content": {
                        "type": "string",
                        "description": "PEM-encoded client certificate and private key.\n"
                    },
                    "file": {
                        "type": "string"
                    },
                    "fingerprint": {
                        "type": "string",
                        "description": "SHA256 fingerprint of the certificate.\n"
                    },
                    "issuedBy": {
                        "type": "string",
                        "description": "Name of the certificate authority that issued the certificate.\n"
                    },
                    "issuedOn": {
                        "type": "string",
                        "description": "The time \u0026 date when the certificate is valid from.\n"
                    },
                    "issuedTo": {
                        "type": "string",
                        "description": "Name of whom the certificate has been issued to.\n"
                    },
                    "validUntil": {
                        "type": "string",
                        "description": "The time \u0026 date when the certificate expires.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/debianRepository:DebianRepository": {
            "description": "## # Artifactory Local Debian Repository Resource\n\nCreates a local Debian repository and allows for the creation of a GPG key \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\nimport * from \"fs\";\n\nconst some_keypairGPG1 = new artifactory.Keypair(\"some-keypairGPG1\", {\n    pairName: `some-keypair${random_id.randid.id}`,\n    pairType: \"GPG\",\n    alias: \"foo-alias1\",\n    privateKey: fs.readFileSync(\"samples/gpg.priv\"),\n    publicKey: fs.readFileSync(\"samples/gpg.pub\"),\n});\nconst some_keypairGPG2 = new artifactory.Keypair(\"some-keypairGPG2\", {\n    pairName: `some-keypair4${random_id.randid.id}`,\n    pairType: \"GPG\",\n    alias: \"foo-alias2\",\n    privateKey: fs.readFileSync(\"samples/gpg.priv\"),\n    publicKey: fs.readFileSync(\"samples/gpg.pub\"),\n});\nconst my_debian_repo = new artifactory.DebianRepository(\"my-debian-repo\", {\n    key: \"my-debian-repo\",\n    primaryKeypairRef: some_keypairGPG1.pairName,\n    secondaryKeypairRef: some_keypairGPG2.pairName,\n    indexCompressionFormats: [\n        \"bz2\",\n        \"lzma\",\n        \"xz\",\n    ],\n    trivialLayout: true,\n}, {\n    dependsOn: [\n        some_keypairGPG1,\n        some_keypairGPG2,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nsome_keypair_gpg1 = artifactory.Keypair(\"some-keypairGPG1\",\n    pair_name=f\"some-keypair{random_id['randid']['id']}\",\n    pair_type=\"GPG\",\n    alias=\"foo-alias1\",\n    private_key=(lambda path: open(path).read())(\"samples/gpg.priv\"),\n    public_key=(lambda path: open(path).read())(\"samples/gpg.pub\"))\nsome_keypair_gpg2 = artifactory.Keypair(\"some-keypairGPG2\",\n    pair_name=f\"some-keypair4{random_id['randid']['id']}\",\n    pair_type=\"GPG\",\n    alias=\"foo-alias2\",\n    private_key=(lambda path: open(path).read())(\"samples/gpg.priv\"),\n    public_key=(lambda path: open(path).read())(\"samples/gpg.pub\"))\nmy_debian_repo = artifactory.DebianRepository(\"my-debian-repo\",\n    key=\"my-debian-repo\",\n    primary_keypair_ref=some_keypair_gpg1.pair_name,\n    secondary_keypair_ref=some_keypair_gpg2.pair_name,\n    index_compression_formats=[\n        \"bz2\",\n        \"lzma\",\n        \"xz\",\n    ],\n    trivial_layout=True,\n    opts=pulumi.ResourceOptions(depends_on=[\n            some_keypair_gpg1,\n            some_keypair_gpg2,\n        ]))\n```\n```csharp\nusing System.IO;\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var some_keypairGPG1 = new Artifactory.Keypair(\"some-keypairGPG1\", new Artifactory.KeypairArgs\n        {\n            PairName = $\"some-keypair{random_id.Randid.Id}\",\n            PairType = \"GPG\",\n            Alias = \"foo-alias1\",\n            PrivateKey = File.ReadAllText(\"samples/gpg.priv\"),\n            PublicKey = File.ReadAllText(\"samples/gpg.pub\"),\n        });\n        var some_keypairGPG2 = new Artifactory.Keypair(\"some-keypairGPG2\", new Artifactory.KeypairArgs\n        {\n            PairName = $\"some-keypair4{random_id.Randid.Id}\",\n            PairType = \"GPG\",\n            Alias = \"foo-alias2\",\n            PrivateKey = File.ReadAllText(\"samples/gpg.priv\"),\n            PublicKey = File.ReadAllText(\"samples/gpg.pub\"),\n        });\n        var my_debian_repo = new Artifactory.DebianRepository(\"my-debian-repo\", new Artifactory.DebianRepositoryArgs\n        {\n            Key = \"my-debian-repo\",\n            PrimaryKeypairRef = some_keypairGPG1.PairName,\n            SecondaryKeypairRef = some_keypairGPG2.PairName,\n            IndexCompressionFormats = \n            {\n                \"bz2\",\n                \"lzma\",\n                \"xz\",\n            },\n            TrivialLayout = true,\n        }, new CustomResourceOptions\n        {\n            DependsOn = \n            {\n                some_keypairGPG1,\n                some_keypairGPG2,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := ioutil.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewKeypair(ctx, \"some-keypairGPG1\", \u0026artifactory.KeypairArgs{\n\t\t\tPairName:   pulumi.String(fmt.Sprintf(\"%v%v\", \"some-keypair\", random_id.Randid.Id)),\n\t\t\tPairType:   pulumi.String(\"GPG\"),\n\t\t\tAlias:      pulumi.String(\"foo-alias1\"),\n\t\t\tPrivateKey: readFileOrPanic(\"samples/gpg.priv\"),\n\t\t\tPublicKey:  readFileOrPanic(\"samples/gpg.pub\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = artifactory.NewKeypair(ctx, \"some-keypairGPG2\", \u0026artifactory.KeypairArgs{\n\t\t\tPairName:   pulumi.String(fmt.Sprintf(\"%v%v\", \"some-keypair4\", random_id.Randid.Id)),\n\t\t\tPairType:   pulumi.String(\"GPG\"),\n\t\t\tAlias:      pulumi.String(\"foo-alias2\"),\n\t\t\tPrivateKey: readFileOrPanic(\"samples/gpg.priv\"),\n\t\t\tPublicKey:  readFileOrPanic(\"samples/gpg.pub\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = artifactory.NewDebianRepository(ctx, \"my-debian-repo\", \u0026artifactory.DebianRepositoryArgs{\n\t\t\tKey:                 pulumi.String(\"my-debian-repo\"),\n\t\t\tPrimaryKeypairRef:   some_keypairGPG1.PairName,\n\t\t\tSecondaryKeypairRef: some_keypairGPG2.PairName,\n\t\t\tIndexCompressionFormats: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"bz2\"),\n\t\t\t\tpulumi.String(\"lzma\"),\n\t\t\t\tpulumi.String(\"xz\"),\n\t\t\t},\n\t\t\tTrivialLayout: pulumi.Bool(true),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tsome_keypairGPG1,\n\t\t\tsome_keypairGPG2,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "indexCompressionFormats": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- If you're creating this repo, then maybe you know?\n"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "primaryKeypairRef": {
                    "type": "string",
                    "description": "- The RSA key to be used to sign packages\n"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "secondaryKeypairRef": {
                    "type": "string",
                    "description": "- Not really clear what this does\n"
                },
                "trivialLayout": {
                    "type": "boolean",
                    "description": "- Apparently this is a deprecated repo layout\n",
                    "deprecationMessage": "You shouldn't be using this"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "indexCompressionFormats": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- If you're creating this repo, then maybe you know?\n"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "primaryKeypairRef": {
                    "type": "string",
                    "description": "- The RSA key to be used to sign packages\n"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "secondaryKeypairRef": {
                    "type": "string",
                    "description": "- Not really clear what this does\n"
                },
                "trivialLayout": {
                    "type": "boolean",
                    "description": "- Apparently this is a deprecated repo layout\n",
                    "deprecationMessage": "You shouldn't be using this"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DebianRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "indexCompressionFormats": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "- If you're creating this repo, then maybe you know?\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "primaryKeypairRef": {
                        "type": "string",
                        "description": "- The RSA key to be used to sign packages\n"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "secondaryKeypairRef": {
                        "type": "string",
                        "description": "- Not really clear what this does\n"
                    },
                    "trivialLayout": {
                        "type": "boolean",
                        "description": "- Apparently this is a deprecated repo layout\n",
                        "deprecationMessage": "You shouldn't be using this"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/distributionWebhook:DistributionWebhook": {
            "description": "## # Artifactory Distribution Webhook Resource\n\nProvides an Artifactory webhook resource. This can be used to register and manage Artifactory webhook subscription which enables you to be notified or notify other users when such events take place in Artifactory.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n.\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst distribution_webhook = new artifactory.DistributionWebhook(\"distribution-webhook\", {\n    criteria: {\n        anyReleaseBundle: false,\n        excludePatterns: [\"bar/**\"],\n        includePatterns: [\"foo/**\"],\n        registeredReleaseBundleNames: [\"bundle-name\"],\n    },\n    customHttpHeaders: {\n        \"header-1\": \"value-1\",\n        \"header-2\": \"value-2\",\n    },\n    eventTypes: [\n        \"distribute_started\",\n        \"distribute_completed\",\n        \"distribute_aborted\",\n        \"distribute_failed\",\n        \"delete_started\",\n        \"delete_completed\",\n        \"delete_failed\",\n    ],\n    key: \"distribution-webhook\",\n    proxy: \"proxy-key\",\n    secret: \"some-secret\",\n    url: \"http://tempurl.org/webhook\",\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\ndistribution_webhook = artifactory.DistributionWebhook(\"distribution-webhook\",\n    criteria=artifactory.DistributionWebhookCriteriaArgs(\n        any_release_bundle=False,\n        exclude_patterns=[\"bar/**\"],\n        include_patterns=[\"foo/**\"],\n        registered_release_bundle_names=[\"bundle-name\"],\n    ),\n    custom_http_headers={\n        \"header-1\": \"value-1\",\n        \"header-2\": \"value-2\",\n    },\n    event_types=[\n        \"distribute_started\",\n        \"distribute_completed\",\n        \"distribute_aborted\",\n        \"distribute_failed\",\n        \"delete_started\",\n        \"delete_completed\",\n        \"delete_failed\",\n    ],\n    key=\"distribution-webhook\",\n    proxy=\"proxy-key\",\n    secret=\"some-secret\",\n    url=\"http://tempurl.org/webhook\")\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var distribution_webhook = new Artifactory.DistributionWebhook(\"distribution-webhook\", new Artifactory.DistributionWebhookArgs\n        {\n            Criteria = new Artifactory.Inputs.DistributionWebhookCriteriaArgs\n            {\n                AnyReleaseBundle = false,\n                ExcludePatterns = \n                {\n                    \"bar/**\",\n                },\n                IncludePatterns = \n                {\n                    \"foo/**\",\n                },\n                RegisteredReleaseBundleNames = \n                {\n                    \"bundle-name\",\n                },\n            },\n            CustomHttpHeaders = \n            {\n                { \"header-1\", \"value-1\" },\n                { \"header-2\", \"value-2\" },\n            },\n            EventTypes = \n            {\n                \"distribute_started\",\n                \"distribute_completed\",\n                \"distribute_aborted\",\n                \"distribute_failed\",\n                \"delete_started\",\n                \"delete_completed\",\n                \"delete_failed\",\n            },\n            Key = \"distribution-webhook\",\n            Proxy = \"proxy-key\",\n            Secret = \"some-secret\",\n            Url = \"http://tempurl.org/webhook\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewDistributionWebhook(ctx, \"distribution-webhook\", \u0026artifactory.DistributionWebhookArgs{\n\t\t\tCriteria: \u0026DistributionWebhookCriteriaArgs{\n\t\t\t\tAnyReleaseBundle: pulumi.Bool(false),\n\t\t\t\tExcludePatterns: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"bar/**\"),\n\t\t\t\t},\n\t\t\t\tIncludePatterns: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"foo/**\"),\n\t\t\t\t},\n\t\t\t\tRegisteredReleaseBundleNames: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"bundle-name\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tCustomHttpHeaders: pulumi.StringMap{\n\t\t\t\t\"header-1\": pulumi.String(\"value-1\"),\n\t\t\t\t\"header-2\": pulumi.String(\"value-2\"),\n\t\t\t},\n\t\t\tEventTypes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"distribute_started\"),\n\t\t\t\tpulumi.String(\"distribute_completed\"),\n\t\t\t\tpulumi.String(\"distribute_aborted\"),\n\t\t\t\tpulumi.String(\"distribute_failed\"),\n\t\t\t\tpulumi.String(\"delete_started\"),\n\t\t\t\tpulumi.String(\"delete_completed\"),\n\t\t\t\tpulumi.String(\"delete_failed\"),\n\t\t\t},\n\t\t\tKey:    pulumi.String(\"distribution-webhook\"),\n\t\t\tProxy:  pulumi.String(\"proxy-key\"),\n\t\t\tSecret: pulumi.String(\"some-secret\"),\n\t\t\tUrl:    pulumi.String(\"http://tempurl.org/webhook\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "criteria": {
                    "$ref": "#/types/artifactory:index/DistributionWebhookCriteria:DistributionWebhookCriteria",
                    "description": "Specifies where the webhook will be applied on which repositories.\n"
                },
                "customHttpHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Webhook description. Max length 1000 characters.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Status of webhook. Default to 'true'\n"
                },
                "eventTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow values: \"distribute_started\", \"distribute_completed\", \"distribute_aborted\", \"distribute_failed\", \"delete_started\", \"delete_completed\", \"delete_failed\"\n"
                },
                "key": {
                    "type": "string",
                    "description": "The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.\n"
                },
                "proxy": {
                    "type": "string",
                    "description": "Proxy key from Artifactory Proxies setting\n"
                },
                "secret": {
                    "type": "string",
                    "description": "Secret authentication token that will be sent to the configured URL\n"
                },
                "url": {
                    "type": "string",
                    "description": "Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.\n"
                }
            },
            "required": [
                "criteria",
                "eventTypes",
                "key",
                "url"
            ],
            "inputProperties": {
                "criteria": {
                    "$ref": "#/types/artifactory:index/DistributionWebhookCriteria:DistributionWebhookCriteria",
                    "description": "Specifies where the webhook will be applied on which repositories.\n"
                },
                "customHttpHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Webhook description. Max length 1000 characters.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Status of webhook. Default to 'true'\n"
                },
                "eventTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow values: \"distribute_started\", \"distribute_completed\", \"distribute_aborted\", \"distribute_failed\", \"delete_started\", \"delete_completed\", \"delete_failed\"\n"
                },
                "key": {
                    "type": "string",
                    "description": "The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.\n"
                },
                "proxy": {
                    "type": "string",
                    "description": "Proxy key from Artifactory Proxies setting\n"
                },
                "secret": {
                    "type": "string",
                    "description": "Secret authentication token that will be sent to the configured URL\n"
                },
                "url": {
                    "type": "string",
                    "description": "Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.\n"
                }
            },
            "requiredInputs": [
                "criteria",
                "eventTypes",
                "key",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DistributionWebhook resources.\n",
                "properties": {
                    "criteria": {
                        "$ref": "#/types/artifactory:index/DistributionWebhookCriteria:DistributionWebhookCriteria",
                        "description": "Specifies where the webhook will be applied on which repositories.\n"
                    },
                    "customHttpHeaders": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Webhook description. Max length 1000 characters.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Status of webhook. Default to 'true'\n"
                    },
                    "eventTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow values: \"distribute_started\", \"distribute_completed\", \"distribute_aborted\", \"distribute_failed\", \"delete_started\", \"delete_completed\", \"delete_failed\"\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.\n"
                    },
                    "proxy": {
                        "type": "string",
                        "description": "Proxy key from Artifactory Proxies setting\n"
                    },
                    "secret": {
                        "type": "string",
                        "description": "Secret authentication token that will be sent to the configured URL\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/dockerV1Repository:DockerV1Repository": {
            "description": "## # Artifactory Local Docker V1 Repository Resource\n\nCreates a local Docker v1 repository - By choosing a V1 repository, you don't really have many options \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst foo = new artifactory.DockerV2Repository(\"foo\", {\n    key: \"foo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nfoo = artifactory.DockerV2Repository(\"foo\", key=\"foo\")\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Artifactory.DockerV2Repository(\"foo\", new Artifactory.DockerV2RepositoryArgs\n        {\n            Key = \"foo\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewDockerV2Repository(ctx, \"foo\", \u0026artifactory.DockerV2RepositoryArgs{\n\t\t\tKey: pulumi.String(\"foo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The Docker API version to use. This cannot be set\n"
                },
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "blockPushingSchema1": {
                    "type": "boolean",
                    "description": "When set, Artifactory will block the pushing of Docker images with manifest v2 schema 1 to this repository.\n"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "maxUniqueTags": {
                    "type": "integer",
                    "description": "The maximum number of unique tags of a single Docker image to store in this repository. Once the number tags for an\nimage exceeds this setting, older tags are removed. A value of 0 (default) indicates there is no limit. This only\napplies to manifest v2\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "tagRetention": {
                    "type": "integer",
                    "description": "If greater than 1, overwritten tags will be saved by their digest, up to the set up number. This only applies to\nmanifest V2\n"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "apiVersion",
                "blockPushingSchema1",
                "excludesPattern",
                "includesPattern",
                "key",
                "maxUniqueTags",
                "packageType",
                "repoLayoutRef",
                "tagRetention"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "maxUniqueTags": {
                    "type": "integer",
                    "description": "The maximum number of unique tags of a single Docker image to store in this repository. Once the number tags for an\nimage exceeds this setting, older tags are removed. A value of 0 (default) indicates there is no limit. This only\napplies to manifest v2\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DockerV1Repository resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The Docker API version to use. This cannot be set\n"
                    },
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "blockPushingSchema1": {
                        "type": "boolean",
                        "description": "When set, Artifactory will block the pushing of Docker images with manifest v2 schema 1 to this repository.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "maxUniqueTags": {
                        "type": "integer",
                        "description": "The maximum number of unique tags of a single Docker image to store in this repository. Once the number tags for an\nimage exceeds this setting, older tags are removed. A value of 0 (default) indicates there is no limit. This only\napplies to manifest v2\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "tagRetention": {
                        "type": "integer",
                        "description": "If greater than 1, overwritten tags will be saved by their digest, up to the set up number. This only applies to\nmanifest V2\n"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/dockerV2Repository:DockerV2Repository": {
            "description": "## # Artifactory Local Docker V2 Repository Resource\n\nCreates a local Docker v2 repository \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst foo = new artifactory.DockerV2Repository(\"foo\", {\n    key: \"foo\",\n    maxUniqueTags: 5,\n    tagRetention: 3,\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nfoo = artifactory.DockerV2Repository(\"foo\",\n    key=\"foo\",\n    max_unique_tags=5,\n    tag_retention=3)\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Artifactory.DockerV2Repository(\"foo\", new Artifactory.DockerV2RepositoryArgs\n        {\n            Key = \"foo\",\n            MaxUniqueTags = 5,\n            TagRetention = 3,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewDockerV2Repository(ctx, \"foo\", \u0026artifactory.DockerV2RepositoryArgs{\n\t\t\tKey:           pulumi.String(\"foo\"),\n\t\t\tMaxUniqueTags: pulumi.Int(5),\n\t\t\tTagRetention:  pulumi.Int(3),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The Docker API version to use. This cannot be set\n"
                },
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "blockPushingSchema1": {
                    "type": "boolean",
                    "description": "- When set, Artifactory will block the pushing of Docker images with manifest v2 schema 1 to this repository.\n"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "maxUniqueTags": {
                    "type": "integer",
                    "description": "- The maximum number of unique tags of a single Docker image to store in this repository.\\n\" +\nOnce the number tags for an image exceeds this setting, older tags are removed. A value of 0 (default) indicates there is no limit.\nThis only applies to manifest v2\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "tagRetention": {
                    "type": "integer",
                    "description": "- If greater than 1, overwritten tags will be saved by their digest, up to the set up number. This only applies to manifest V2\n"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "apiVersion",
                "blockPushingSchema1",
                "excludesPattern",
                "includesPattern",
                "key",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "blockPushingSchema1": {
                    "type": "boolean",
                    "description": "- When set, Artifactory will block the pushing of Docker images with manifest v2 schema 1 to this repository.\n"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "maxUniqueTags": {
                    "type": "integer",
                    "description": "- The maximum number of unique tags of a single Docker image to store in this repository.\\n\" +\nOnce the number tags for an image exceeds this setting, older tags are removed. A value of 0 (default) indicates there is no limit.\nThis only applies to manifest v2\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "tagRetention": {
                    "type": "integer",
                    "description": "- If greater than 1, overwritten tags will be saved by their digest, up to the set up number. This only applies to manifest V2\n"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DockerV2Repository resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The Docker API version to use. This cannot be set\n"
                    },
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "blockPushingSchema1": {
                        "type": "boolean",
                        "description": "- When set, Artifactory will block the pushing of Docker images with manifest v2 schema 1 to this repository.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "maxUniqueTags": {
                        "type": "integer",
                        "description": "- The maximum number of unique tags of a single Docker image to store in this repository.\\n\" +\nOnce the number tags for an image exceeds this setting, older tags are removed. A value of 0 (default) indicates there is no limit.\nThis only applies to manifest v2\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "tagRetention": {
                        "type": "integer",
                        "description": "- If greater than 1, overwritten tags will be saved by their digest, up to the set up number. This only applies to manifest V2\n"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/dockerWebhook:DockerWebhook": {
            "description": "## # Artifactory Docker Webhook Resource\n\nProvides an Artifactory webhook resource. This can be used to register and manage Artifactory webhook subscription which enables you to be notified or notify other users when such events take place in Artifactory.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n.\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst my_docker_local = new artifactory.DockerV2Repository(\"my-docker-local\", {key: \"my-docker-local\"});\nconst docker_webhook = new artifactory.DockerWebhook(\"docker-webhook\", {\n    key: \"docker-webhook\",\n    eventTypes: [\n        \"pushed\",\n        \"deleted\",\n        \"promoted\",\n    ],\n    criteria: {\n        anyLocal: true,\n        anyRemote: false,\n        repoKeys: [my_docker_local.key],\n        includePatterns: [\"foo/**\"],\n        excludePatterns: [\"bar/**\"],\n    },\n    url: \"http://tempurl.org/webhook\",\n    secret: \"some-secret\",\n    proxy: \"proxy-key\",\n    customHttpHeaders: {\n        \"header-1\": \"value-1\",\n        \"header-2\": \"value-2\",\n    },\n}, {\n    dependsOn: [my_docker_local],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nmy_docker_local = artifactory.DockerV2Repository(\"my-docker-local\", key=\"my-docker-local\")\ndocker_webhook = artifactory.DockerWebhook(\"docker-webhook\",\n    key=\"docker-webhook\",\n    event_types=[\n        \"pushed\",\n        \"deleted\",\n        \"promoted\",\n    ],\n    criteria=artifactory.DockerWebhookCriteriaArgs(\n        any_local=True,\n        any_remote=False,\n        repo_keys=[my_docker_local.key],\n        include_patterns=[\"foo/**\"],\n        exclude_patterns=[\"bar/**\"],\n    ),\n    url=\"http://tempurl.org/webhook\",\n    secret=\"some-secret\",\n    proxy=\"proxy-key\",\n    custom_http_headers={\n        \"header-1\": \"value-1\",\n        \"header-2\": \"value-2\",\n    },\n    opts=pulumi.ResourceOptions(depends_on=[my_docker_local]))\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var my_docker_local = new Artifactory.DockerV2Repository(\"my-docker-local\", new Artifactory.DockerV2RepositoryArgs\n        {\n            Key = \"my-docker-local\",\n        });\n        var docker_webhook = new Artifactory.DockerWebhook(\"docker-webhook\", new Artifactory.DockerWebhookArgs\n        {\n            Key = \"docker-webhook\",\n            EventTypes = \n            {\n                \"pushed\",\n                \"deleted\",\n                \"promoted\",\n            },\n            Criteria = new Artifactory.Inputs.DockerWebhookCriteriaArgs\n            {\n                AnyLocal = true,\n                AnyRemote = false,\n                RepoKeys = \n                {\n                    my_docker_local.Key,\n                },\n                IncludePatterns = \n                {\n                    \"foo/**\",\n                },\n                ExcludePatterns = \n                {\n                    \"bar/**\",\n                },\n            },\n            Url = \"http://tempurl.org/webhook\",\n            Secret = \"some-secret\",\n            Proxy = \"proxy-key\",\n            CustomHttpHeaders = \n            {\n                { \"header-1\", \"value-1\" },\n                { \"header-2\", \"value-2\" },\n            },\n        }, new CustomResourceOptions\n        {\n            DependsOn = \n            {\n                my_docker_local,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewDockerV2Repository(ctx, \"my-docker-local\", \u0026artifactory.DockerV2RepositoryArgs{\n\t\t\tKey: pulumi.String(\"my-docker-local\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = artifactory.NewDockerWebhook(ctx, \"docker-webhook\", \u0026artifactory.DockerWebhookArgs{\n\t\t\tKey: pulumi.String(\"docker-webhook\"),\n\t\t\tEventTypes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"pushed\"),\n\t\t\t\tpulumi.String(\"deleted\"),\n\t\t\t\tpulumi.String(\"promoted\"),\n\t\t\t},\n\t\t\tCriteria: \u0026DockerWebhookCriteriaArgs{\n\t\t\t\tAnyLocal:  pulumi.Bool(true),\n\t\t\t\tAnyRemote: pulumi.Bool(false),\n\t\t\t\tRepoKeys: pulumi.StringArray{\n\t\t\t\t\tmy_docker_local.Key,\n\t\t\t\t},\n\t\t\t\tIncludePatterns: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"foo/**\"),\n\t\t\t\t},\n\t\t\t\tExcludePatterns: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"bar/**\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tUrl:    pulumi.String(\"http://tempurl.org/webhook\"),\n\t\t\tSecret: pulumi.String(\"some-secret\"),\n\t\t\tProxy:  pulumi.String(\"proxy-key\"),\n\t\t\tCustomHttpHeaders: pulumi.StringMap{\n\t\t\t\t\"header-1\": pulumi.String(\"value-1\"),\n\t\t\t\t\"header-2\": pulumi.String(\"value-2\"),\n\t\t\t},\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tmy_docker_local,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "criteria": {
                    "$ref": "#/types/artifactory:index/DockerWebhookCriteria:DockerWebhookCriteria",
                    "description": "Specifies where the webhook will be applied on which repositories.\n"
                },
                "customHttpHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Webhook description. Max length 1000 characters.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Status of webhook. Default to 'true'\n"
                },
                "eventTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow values: \"pushed\", \"deleted\", \"promoted\"\n"
                },
                "key": {
                    "type": "string",
                    "description": "The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.\n"
                },
                "proxy": {
                    "type": "string",
                    "description": "Proxy key from Artifactory Proxies setting\n"
                },
                "secret": {
                    "type": "string",
                    "description": "Secret authentication token that will be sent to the configured URL\n"
                },
                "url": {
                    "type": "string",
                    "description": "Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.\n"
                }
            },
            "required": [
                "criteria",
                "eventTypes",
                "key",
                "url"
            ],
            "inputProperties": {
                "criteria": {
                    "$ref": "#/types/artifactory:index/DockerWebhookCriteria:DockerWebhookCriteria",
                    "description": "Specifies where the webhook will be applied on which repositories.\n"
                },
                "customHttpHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Webhook description. Max length 1000 characters.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Status of webhook. Default to 'true'\n"
                },
                "eventTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow values: \"pushed\", \"deleted\", \"promoted\"\n"
                },
                "key": {
                    "type": "string",
                    "description": "The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.\n"
                },
                "proxy": {
                    "type": "string",
                    "description": "Proxy key from Artifactory Proxies setting\n"
                },
                "secret": {
                    "type": "string",
                    "description": "Secret authentication token that will be sent to the configured URL\n"
                },
                "url": {
                    "type": "string",
                    "description": "Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.\n"
                }
            },
            "requiredInputs": [
                "criteria",
                "eventTypes",
                "key",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DockerWebhook resources.\n",
                "properties": {
                    "criteria": {
                        "$ref": "#/types/artifactory:index/DockerWebhookCriteria:DockerWebhookCriteria",
                        "description": "Specifies where the webhook will be applied on which repositories.\n"
                    },
                    "customHttpHeaders": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Webhook description. Max length 1000 characters.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Status of webhook. Default to 'true'\n"
                    },
                    "eventTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow values: \"pushed\", \"deleted\", \"promoted\"\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.\n"
                    },
                    "proxy": {
                        "type": "string",
                        "description": "Proxy key from Artifactory Proxies setting\n"
                    },
                    "secret": {
                        "type": "string",
                        "description": "Secret authentication token that will be sent to the configured URL\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/federatedAlpineRepository:FederatedAlpineRepository": {
            "description": "## # Artifactory Federated Alpine Repository Resource\n\nCreates a federated Alpine repository\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_federated_test_alpine_repo = new artifactory.FederatedAlpineRepository(\"terraform-federated-test-alpine-repo\", {\n    key: \"terraform-federated-test-alpine-repo\",\n    members: [\n        {\n            enable: true,\n            url: \"http://tempurl.org/artifactory/terraform-federated-test-alpine-repo\",\n        },\n        {\n            enable: true,\n            url: \"http://tempurl2.org/artifactory/terraform-federated-test-alpine-repo-2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_federated_test_alpine_repo = artifactory.FederatedAlpineRepository(\"terraform-federated-test-alpine-repo\",\n    key=\"terraform-federated-test-alpine-repo\",\n    members=[\n        artifactory.FederatedAlpineRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl.org/artifactory/terraform-federated-test-alpine-repo\",\n        ),\n        artifactory.FederatedAlpineRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl2.org/artifactory/terraform-federated-test-alpine-repo-2\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_federated_test_alpine_repo = new Artifactory.FederatedAlpineRepository(\"terraform-federated-test-alpine-repo\", new Artifactory.FederatedAlpineRepositoryArgs\n        {\n            Key = \"terraform-federated-test-alpine-repo\",\n            Members = \n            {\n                new Artifactory.Inputs.FederatedAlpineRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl.org/artifactory/terraform-federated-test-alpine-repo\",\n                },\n                new Artifactory.Inputs.FederatedAlpineRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl2.org/artifactory/terraform-federated-test-alpine-repo-2\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewFederatedAlpineRepository(ctx, \"terraform-federated-test-alpine-repo\", \u0026artifactory.FederatedAlpineRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-federated-test-alpine-repo\"),\n\t\t\tMembers: FederatedAlpineRepositoryMemberArray{\n\t\t\t\t\u0026FederatedAlpineRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl.org/artifactory/terraform-federated-test-alpine-repo\"),\n\t\t\t\t},\n\t\t\t\t\u0026FederatedAlpineRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl2.org/artifactory/terraform-federated-test-alpine-repo-2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedAlpineRepositoryMember:FederatedAlpineRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "members",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedAlpineRepositoryMember:FederatedAlpineRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key",
                "members"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FederatedAlpineRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/artifactory:index/FederatedAlpineRepositoryMember:FederatedAlpineRepositoryMember"
                        },
                        "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/federatedBowerRepository:FederatedBowerRepository": {
            "description": "## # Artifactory Federated Bower Repository Resource\n\nCreates a federated Bower repository\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_federated_test_bower_repo = new artifactory.FederatedBowerRepository(\"terraform-federated-test-bower-repo\", {\n    key: \"terraform-federated-test-bower-repo\",\n    members: [\n        {\n            enable: true,\n            url: \"http://tempurl.org/artifactory/terraform-federated-test-bower-repo\",\n        },\n        {\n            enable: true,\n            url: \"http://tempurl2.org/artifactory/terraform-federated-test-bower-repo-2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_federated_test_bower_repo = artifactory.FederatedBowerRepository(\"terraform-federated-test-bower-repo\",\n    key=\"terraform-federated-test-bower-repo\",\n    members=[\n        artifactory.FederatedBowerRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl.org/artifactory/terraform-federated-test-bower-repo\",\n        ),\n        artifactory.FederatedBowerRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl2.org/artifactory/terraform-federated-test-bower-repo-2\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_federated_test_bower_repo = new Artifactory.FederatedBowerRepository(\"terraform-federated-test-bower-repo\", new Artifactory.FederatedBowerRepositoryArgs\n        {\n            Key = \"terraform-federated-test-bower-repo\",\n            Members = \n            {\n                new Artifactory.Inputs.FederatedBowerRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl.org/artifactory/terraform-federated-test-bower-repo\",\n                },\n                new Artifactory.Inputs.FederatedBowerRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl2.org/artifactory/terraform-federated-test-bower-repo-2\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewFederatedBowerRepository(ctx, \"terraform-federated-test-bower-repo\", \u0026artifactory.FederatedBowerRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-federated-test-bower-repo\"),\n\t\t\tMembers: FederatedBowerRepositoryMemberArray{\n\t\t\t\t\u0026FederatedBowerRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl.org/artifactory/terraform-federated-test-bower-repo\"),\n\t\t\t\t},\n\t\t\t\t\u0026FederatedBowerRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl2.org/artifactory/terraform-federated-test-bower-repo-2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedBowerRepositoryMember:FederatedBowerRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "members",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedBowerRepositoryMember:FederatedBowerRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key",
                "members"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FederatedBowerRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/artifactory:index/FederatedBowerRepositoryMember:FederatedBowerRepositoryMember"
                        },
                        "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/federatedCargoRepository:FederatedCargoRepository": {
            "description": "## # Artifactory Federated Cargo Repository Resource\n\nCreates a federated Cargo repository\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_federated_test_cargo_repo = new artifactory.FederatedCargoRepository(\"terraform-federated-test-cargo-repo\", {\n    key: \"terraform-federated-test-cargo-repo\",\n    members: [\n        {\n            enable: true,\n            url: \"http://tempurl.org/artifactory/terraform-federated-test-cargo-repo\",\n        },\n        {\n            enable: true,\n            url: \"http://tempurl2.org/artifactory/terraform-federated-test-cargo-repo-2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_federated_test_cargo_repo = artifactory.FederatedCargoRepository(\"terraform-federated-test-cargo-repo\",\n    key=\"terraform-federated-test-cargo-repo\",\n    members=[\n        artifactory.FederatedCargoRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl.org/artifactory/terraform-federated-test-cargo-repo\",\n        ),\n        artifactory.FederatedCargoRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl2.org/artifactory/terraform-federated-test-cargo-repo-2\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_federated_test_cargo_repo = new Artifactory.FederatedCargoRepository(\"terraform-federated-test-cargo-repo\", new Artifactory.FederatedCargoRepositoryArgs\n        {\n            Key = \"terraform-federated-test-cargo-repo\",\n            Members = \n            {\n                new Artifactory.Inputs.FederatedCargoRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl.org/artifactory/terraform-federated-test-cargo-repo\",\n                },\n                new Artifactory.Inputs.FederatedCargoRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl2.org/artifactory/terraform-federated-test-cargo-repo-2\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewFederatedCargoRepository(ctx, \"terraform-federated-test-cargo-repo\", \u0026artifactory.FederatedCargoRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-federated-test-cargo-repo\"),\n\t\t\tMembers: FederatedCargoRepositoryMemberArray{\n\t\t\t\t\u0026FederatedCargoRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl.org/artifactory/terraform-federated-test-cargo-repo\"),\n\t\t\t\t},\n\t\t\t\t\u0026FederatedCargoRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl2.org/artifactory/terraform-federated-test-cargo-repo-2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedCargoRepositoryMember:FederatedCargoRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "members",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedCargoRepositoryMember:FederatedCargoRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key",
                "members"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FederatedCargoRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/artifactory:index/FederatedCargoRepositoryMember:FederatedCargoRepositoryMember"
                        },
                        "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/federatedChefRepository:FederatedChefRepository": {
            "description": "## # Artifactory Federated Chef Repository Resource\n\nCreates a federated Chef repository\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_federated_test_chef_repo = new artifactory.FederatedChefRepository(\"terraform-federated-test-chef-repo\", {\n    key: \"terraform-federated-test-chef-repo\",\n    members: [\n        {\n            enable: true,\n            url: \"http://tempurl.org/artifactory/terraform-federated-test-chef-repo\",\n        },\n        {\n            enable: true,\n            url: \"http://tempurl2.org/artifactory/terraform-federated-test-chef-repo-2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_federated_test_chef_repo = artifactory.FederatedChefRepository(\"terraform-federated-test-chef-repo\",\n    key=\"terraform-federated-test-chef-repo\",\n    members=[\n        artifactory.FederatedChefRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl.org/artifactory/terraform-federated-test-chef-repo\",\n        ),\n        artifactory.FederatedChefRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl2.org/artifactory/terraform-federated-test-chef-repo-2\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_federated_test_chef_repo = new Artifactory.FederatedChefRepository(\"terraform-federated-test-chef-repo\", new Artifactory.FederatedChefRepositoryArgs\n        {\n            Key = \"terraform-federated-test-chef-repo\",\n            Members = \n            {\n                new Artifactory.Inputs.FederatedChefRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl.org/artifactory/terraform-federated-test-chef-repo\",\n                },\n                new Artifactory.Inputs.FederatedChefRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl2.org/artifactory/terraform-federated-test-chef-repo-2\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewFederatedChefRepository(ctx, \"terraform-federated-test-chef-repo\", \u0026artifactory.FederatedChefRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-federated-test-chef-repo\"),\n\t\t\tMembers: FederatedChefRepositoryMemberArray{\n\t\t\t\t\u0026FederatedChefRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl.org/artifactory/terraform-federated-test-chef-repo\"),\n\t\t\t\t},\n\t\t\t\t\u0026FederatedChefRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl2.org/artifactory/terraform-federated-test-chef-repo-2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedChefRepositoryMember:FederatedChefRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "members",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedChefRepositoryMember:FederatedChefRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key",
                "members"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FederatedChefRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/artifactory:index/FederatedChefRepositoryMember:FederatedChefRepositoryMember"
                        },
                        "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/federatedCocoapodsRepository:FederatedCocoapodsRepository": {
            "description": "## # Artifactory Federated Cocoapods Repository Resource\n\nCreates a federated Cocoapods repository\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_federated_test_cocoapods_repo = new artifactory.FederatedCocoapodsRepository(\"terraform-federated-test-cocoapods-repo\", {\n    key: \"terraform-federated-test-cocoapods-repo\",\n    members: [\n        {\n            enable: true,\n            url: \"http://tempurl.org/artifactory/terraform-federated-test-cocoapods-repo\",\n        },\n        {\n            enable: true,\n            url: \"http://tempurl2.org/artifactory/terraform-federated-test-cocoapods-repo-2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_federated_test_cocoapods_repo = artifactory.FederatedCocoapodsRepository(\"terraform-federated-test-cocoapods-repo\",\n    key=\"terraform-federated-test-cocoapods-repo\",\n    members=[\n        artifactory.FederatedCocoapodsRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl.org/artifactory/terraform-federated-test-cocoapods-repo\",\n        ),\n        artifactory.FederatedCocoapodsRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl2.org/artifactory/terraform-federated-test-cocoapods-repo-2\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_federated_test_cocoapods_repo = new Artifactory.FederatedCocoapodsRepository(\"terraform-federated-test-cocoapods-repo\", new Artifactory.FederatedCocoapodsRepositoryArgs\n        {\n            Key = \"terraform-federated-test-cocoapods-repo\",\n            Members = \n            {\n                new Artifactory.Inputs.FederatedCocoapodsRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl.org/artifactory/terraform-federated-test-cocoapods-repo\",\n                },\n                new Artifactory.Inputs.FederatedCocoapodsRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl2.org/artifactory/terraform-federated-test-cocoapods-repo-2\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewFederatedCocoapodsRepository(ctx, \"terraform-federated-test-cocoapods-repo\", \u0026artifactory.FederatedCocoapodsRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-federated-test-cocoapods-repo\"),\n\t\t\tMembers: FederatedCocoapodsRepositoryMemberArray{\n\t\t\t\t\u0026FederatedCocoapodsRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl.org/artifactory/terraform-federated-test-cocoapods-repo\"),\n\t\t\t\t},\n\t\t\t\t\u0026FederatedCocoapodsRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl2.org/artifactory/terraform-federated-test-cocoapods-repo-2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedCocoapodsRepositoryMember:FederatedCocoapodsRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "members",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedCocoapodsRepositoryMember:FederatedCocoapodsRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key",
                "members"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FederatedCocoapodsRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/artifactory:index/FederatedCocoapodsRepositoryMember:FederatedCocoapodsRepositoryMember"
                        },
                        "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/federatedComposerRepository:FederatedComposerRepository": {
            "description": "## # Artifactory Federated Composer Repository Resource\n\nCreates a federated Composer repository\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_federated_test_composer_repo = new artifactory.FederatedComposerRepository(\"terraform-federated-test-composer-repo\", {\n    key: \"terraform-federated-test-composer-repo\",\n    members: [\n        {\n            enable: true,\n            url: \"http://tempurl.org/artifactory/terraform-federated-test-composer-repo\",\n        },\n        {\n            enable: true,\n            url: \"http://tempurl2.org/artifactory/terraform-federated-test-composer-repo-2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_federated_test_composer_repo = artifactory.FederatedComposerRepository(\"terraform-federated-test-composer-repo\",\n    key=\"terraform-federated-test-composer-repo\",\n    members=[\n        artifactory.FederatedComposerRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl.org/artifactory/terraform-federated-test-composer-repo\",\n        ),\n        artifactory.FederatedComposerRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl2.org/artifactory/terraform-federated-test-composer-repo-2\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_federated_test_composer_repo = new Artifactory.FederatedComposerRepository(\"terraform-federated-test-composer-repo\", new Artifactory.FederatedComposerRepositoryArgs\n        {\n            Key = \"terraform-federated-test-composer-repo\",\n            Members = \n            {\n                new Artifactory.Inputs.FederatedComposerRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl.org/artifactory/terraform-federated-test-composer-repo\",\n                },\n                new Artifactory.Inputs.FederatedComposerRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl2.org/artifactory/terraform-federated-test-composer-repo-2\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewFederatedComposerRepository(ctx, \"terraform-federated-test-composer-repo\", \u0026artifactory.FederatedComposerRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-federated-test-composer-repo\"),\n\t\t\tMembers: FederatedComposerRepositoryMemberArray{\n\t\t\t\t\u0026FederatedComposerRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl.org/artifactory/terraform-federated-test-composer-repo\"),\n\t\t\t\t},\n\t\t\t\t\u0026FederatedComposerRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl2.org/artifactory/terraform-federated-test-composer-repo-2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedComposerRepositoryMember:FederatedComposerRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "members",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedComposerRepositoryMember:FederatedComposerRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key",
                "members"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FederatedComposerRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/artifactory:index/FederatedComposerRepositoryMember:FederatedComposerRepositoryMember"
                        },
                        "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/federatedConanRepository:FederatedConanRepository": {
            "description": "## # Artifactory Federated Conan Repository Resource\n\nCreates a federated Conan repository\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_federated_test_conan_repo = new artifactory.FederatedConanRepository(\"terraform-federated-test-conan-repo\", {\n    key: \"terraform-federated-test-conan-repo\",\n    members: [\n        {\n            enable: true,\n            url: \"http://tempurl.org/artifactory/terraform-federated-test-conan-repo\",\n        },\n        {\n            enable: true,\n            url: \"http://tempurl2.org/artifactory/terraform-federated-test-conan-repo-2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_federated_test_conan_repo = artifactory.FederatedConanRepository(\"terraform-federated-test-conan-repo\",\n    key=\"terraform-federated-test-conan-repo\",\n    members=[\n        artifactory.FederatedConanRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl.org/artifactory/terraform-federated-test-conan-repo\",\n        ),\n        artifactory.FederatedConanRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl2.org/artifactory/terraform-federated-test-conan-repo-2\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_federated_test_conan_repo = new Artifactory.FederatedConanRepository(\"terraform-federated-test-conan-repo\", new Artifactory.FederatedConanRepositoryArgs\n        {\n            Key = \"terraform-federated-test-conan-repo\",\n            Members = \n            {\n                new Artifactory.Inputs.FederatedConanRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl.org/artifactory/terraform-federated-test-conan-repo\",\n                },\n                new Artifactory.Inputs.FederatedConanRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl2.org/artifactory/terraform-federated-test-conan-repo-2\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewFederatedConanRepository(ctx, \"terraform-federated-test-conan-repo\", \u0026artifactory.FederatedConanRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-federated-test-conan-repo\"),\n\t\t\tMembers: FederatedConanRepositoryMemberArray{\n\t\t\t\t\u0026FederatedConanRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl.org/artifactory/terraform-federated-test-conan-repo\"),\n\t\t\t\t},\n\t\t\t\t\u0026FederatedConanRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl2.org/artifactory/terraform-federated-test-conan-repo-2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedConanRepositoryMember:FederatedConanRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "members",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedConanRepositoryMember:FederatedConanRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key",
                "members"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FederatedConanRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/artifactory:index/FederatedConanRepositoryMember:FederatedConanRepositoryMember"
                        },
                        "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/federatedCondaRepository:FederatedCondaRepository": {
            "description": "## # Artifactory Federated Conda Repository Resource\n\nCreates a federated Conda repository\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_federated_test_conda_repo = new artifactory.FederatedCondaRepository(\"terraform-federated-test-conda-repo\", {\n    key: \"terraform-federated-test-conda-repo\",\n    members: [\n        {\n            enable: true,\n            url: \"http://tempurl.org/artifactory/terraform-federated-test-conda-repo\",\n        },\n        {\n            enable: true,\n            url: \"http://tempurl2.org/artifactory/terraform-federated-test-conda-repo-2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_federated_test_conda_repo = artifactory.FederatedCondaRepository(\"terraform-federated-test-conda-repo\",\n    key=\"terraform-federated-test-conda-repo\",\n    members=[\n        artifactory.FederatedCondaRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl.org/artifactory/terraform-federated-test-conda-repo\",\n        ),\n        artifactory.FederatedCondaRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl2.org/artifactory/terraform-federated-test-conda-repo-2\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_federated_test_conda_repo = new Artifactory.FederatedCondaRepository(\"terraform-federated-test-conda-repo\", new Artifactory.FederatedCondaRepositoryArgs\n        {\n            Key = \"terraform-federated-test-conda-repo\",\n            Members = \n            {\n                new Artifactory.Inputs.FederatedCondaRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl.org/artifactory/terraform-federated-test-conda-repo\",\n                },\n                new Artifactory.Inputs.FederatedCondaRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl2.org/artifactory/terraform-federated-test-conda-repo-2\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewFederatedCondaRepository(ctx, \"terraform-federated-test-conda-repo\", \u0026artifactory.FederatedCondaRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-federated-test-conda-repo\"),\n\t\t\tMembers: FederatedCondaRepositoryMemberArray{\n\t\t\t\t\u0026FederatedCondaRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl.org/artifactory/terraform-federated-test-conda-repo\"),\n\t\t\t\t},\n\t\t\t\t\u0026FederatedCondaRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl2.org/artifactory/terraform-federated-test-conda-repo-2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedCondaRepositoryMember:FederatedCondaRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "members",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedCondaRepositoryMember:FederatedCondaRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key",
                "members"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FederatedCondaRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/artifactory:index/FederatedCondaRepositoryMember:FederatedCondaRepositoryMember"
                        },
                        "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/federatedCranRepository:FederatedCranRepository": {
            "description": "## # Artifactory Federated Cran Repository Resource\n\nCreates a federated Cran repository\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_federated_test_cran_repo = new artifactory.FederatedCranRepository(\"terraform-federated-test-cran-repo\", {\n    key: \"terraform-federated-test-cran-repo\",\n    members: [\n        {\n            enable: true,\n            url: \"http://tempurl.org/artifactory/terraform-federated-test-cran-repo\",\n        },\n        {\n            enable: true,\n            url: \"http://tempurl2.org/artifactory/terraform-federated-test-cran-repo-2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_federated_test_cran_repo = artifactory.FederatedCranRepository(\"terraform-federated-test-cran-repo\",\n    key=\"terraform-federated-test-cran-repo\",\n    members=[\n        artifactory.FederatedCranRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl.org/artifactory/terraform-federated-test-cran-repo\",\n        ),\n        artifactory.FederatedCranRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl2.org/artifactory/terraform-federated-test-cran-repo-2\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_federated_test_cran_repo = new Artifactory.FederatedCranRepository(\"terraform-federated-test-cran-repo\", new Artifactory.FederatedCranRepositoryArgs\n        {\n            Key = \"terraform-federated-test-cran-repo\",\n            Members = \n            {\n                new Artifactory.Inputs.FederatedCranRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl.org/artifactory/terraform-federated-test-cran-repo\",\n                },\n                new Artifactory.Inputs.FederatedCranRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl2.org/artifactory/terraform-federated-test-cran-repo-2\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewFederatedCranRepository(ctx, \"terraform-federated-test-cran-repo\", \u0026artifactory.FederatedCranRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-federated-test-cran-repo\"),\n\t\t\tMembers: FederatedCranRepositoryMemberArray{\n\t\t\t\t\u0026FederatedCranRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl.org/artifactory/terraform-federated-test-cran-repo\"),\n\t\t\t\t},\n\t\t\t\t\u0026FederatedCranRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl2.org/artifactory/terraform-federated-test-cran-repo-2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedCranRepositoryMember:FederatedCranRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "members",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedCranRepositoryMember:FederatedCranRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key",
                "members"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FederatedCranRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/artifactory:index/FederatedCranRepositoryMember:FederatedCranRepositoryMember"
                        },
                        "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/federatedDebianRepository:FederatedDebianRepository": {
            "description": "## # Artifactory Federated Debian Repository Resource\n\nCreates a federated Debian repository\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_federated_test_debian_repo = new artifactory.FederatedDebianRepository(\"terraform-federated-test-debian-repo\", {\n    key: \"terraform-federated-test-debian-repo\",\n    members: [\n        {\n            enable: true,\n            url: \"http://tempurl.org/artifactory/terraform-federated-test-debian-repo\",\n        },\n        {\n            enable: true,\n            url: \"http://tempurl2.org/artifactory/terraform-federated-test-debian-repo-2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_federated_test_debian_repo = artifactory.FederatedDebianRepository(\"terraform-federated-test-debian-repo\",\n    key=\"terraform-federated-test-debian-repo\",\n    members=[\n        artifactory.FederatedDebianRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl.org/artifactory/terraform-federated-test-debian-repo\",\n        ),\n        artifactory.FederatedDebianRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl2.org/artifactory/terraform-federated-test-debian-repo-2\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_federated_test_debian_repo = new Artifactory.FederatedDebianRepository(\"terraform-federated-test-debian-repo\", new Artifactory.FederatedDebianRepositoryArgs\n        {\n            Key = \"terraform-federated-test-debian-repo\",\n            Members = \n            {\n                new Artifactory.Inputs.FederatedDebianRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl.org/artifactory/terraform-federated-test-debian-repo\",\n                },\n                new Artifactory.Inputs.FederatedDebianRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl2.org/artifactory/terraform-federated-test-debian-repo-2\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewFederatedDebianRepository(ctx, \"terraform-federated-test-debian-repo\", \u0026artifactory.FederatedDebianRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-federated-test-debian-repo\"),\n\t\t\tMembers: FederatedDebianRepositoryMemberArray{\n\t\t\t\t\u0026FederatedDebianRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl.org/artifactory/terraform-federated-test-debian-repo\"),\n\t\t\t\t},\n\t\t\t\t\u0026FederatedDebianRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl2.org/artifactory/terraform-federated-test-debian-repo-2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedDebianRepositoryMember:FederatedDebianRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "members",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedDebianRepositoryMember:FederatedDebianRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key",
                "members"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FederatedDebianRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/artifactory:index/FederatedDebianRepositoryMember:FederatedDebianRepositoryMember"
                        },
                        "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/federatedDockerRepository:FederatedDockerRepository": {
            "description": "## # Artifactory Federated Docker Repository Resource\n\nCreates a federated Docker repository\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_federated_test_docker_repo = new artifactory.FederatedDockerRepository(\"terraform-federated-test-docker-repo\", {\n    key: \"terraform-federated-test-docker-repo\",\n    members: [\n        {\n            enable: true,\n            url: \"http://tempurl.org/artifactory/terraform-federated-test-docker-repo\",\n        },\n        {\n            enable: true,\n            url: \"http://tempurl2.org/artifactory/terraform-federated-test-docker-repo-2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_federated_test_docker_repo = artifactory.FederatedDockerRepository(\"terraform-federated-test-docker-repo\",\n    key=\"terraform-federated-test-docker-repo\",\n    members=[\n        artifactory.FederatedDockerRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl.org/artifactory/terraform-federated-test-docker-repo\",\n        ),\n        artifactory.FederatedDockerRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl2.org/artifactory/terraform-federated-test-docker-repo-2\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_federated_test_docker_repo = new Artifactory.FederatedDockerRepository(\"terraform-federated-test-docker-repo\", new Artifactory.FederatedDockerRepositoryArgs\n        {\n            Key = \"terraform-federated-test-docker-repo\",\n            Members = \n            {\n                new Artifactory.Inputs.FederatedDockerRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl.org/artifactory/terraform-federated-test-docker-repo\",\n                },\n                new Artifactory.Inputs.FederatedDockerRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl2.org/artifactory/terraform-federated-test-docker-repo-2\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewFederatedDockerRepository(ctx, \"terraform-federated-test-docker-repo\", \u0026artifactory.FederatedDockerRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-federated-test-docker-repo\"),\n\t\t\tMembers: FederatedDockerRepositoryMemberArray{\n\t\t\t\t\u0026FederatedDockerRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl.org/artifactory/terraform-federated-test-docker-repo\"),\n\t\t\t\t},\n\t\t\t\t\u0026FederatedDockerRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl2.org/artifactory/terraform-federated-test-docker-repo-2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedDockerRepositoryMember:FederatedDockerRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "members",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedDockerRepositoryMember:FederatedDockerRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key",
                "members"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FederatedDockerRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/artifactory:index/FederatedDockerRepositoryMember:FederatedDockerRepositoryMember"
                        },
                        "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/federatedGemsRepository:FederatedGemsRepository": {
            "description": "## # Artifactory Federated Gem Repository Resource\n\nCreates a federated Gem repository\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_federated_test_gem_repo = new artifactory.FederatedGemRepository(\"terraform-federated-test-gem-repo\", {\n    key: \"terraform-federated-test-gem-repo\",\n    member: [\n        {\n            enable: true,\n            url: \"http://tempurl.org/artifactory/terraform-federated-test-gem-repo\",\n        },\n        {\n            enable: true,\n            url: \"http://tempurl2.org/artifactory/terraform-federated-test-gem-repo-2\",\n        },\n    ],\n});\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedGemsRepositoryMember:FederatedGemsRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "members",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedGemsRepositoryMember:FederatedGemsRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key",
                "members"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FederatedGemsRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/artifactory:index/FederatedGemsRepositoryMember:FederatedGemsRepositoryMember"
                        },
                        "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/federatedGenericRepository:FederatedGenericRepository": {
            "description": "## # Artifactory Federated Generic Repository Resource\n\nCreates a federated Generic repository\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_federated_test_generic_repo = new artifactory.FederatedGenericRepository(\"terraform-federated-test-generic-repo\", {\n    key: \"terraform-federated-test-generic-repo\",\n    members: [\n        {\n            enable: true,\n            url: \"http://tempurl.org/artifactory/terraform-federated-test-generic-repo\",\n        },\n        {\n            enable: true,\n            url: \"http://tempurl2.org/artifactory/terraform-federated-test-generic-repo-2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_federated_test_generic_repo = artifactory.FederatedGenericRepository(\"terraform-federated-test-generic-repo\",\n    key=\"terraform-federated-test-generic-repo\",\n    members=[\n        artifactory.FederatedGenericRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl.org/artifactory/terraform-federated-test-generic-repo\",\n        ),\n        artifactory.FederatedGenericRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl2.org/artifactory/terraform-federated-test-generic-repo-2\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_federated_test_generic_repo = new Artifactory.FederatedGenericRepository(\"terraform-federated-test-generic-repo\", new Artifactory.FederatedGenericRepositoryArgs\n        {\n            Key = \"terraform-federated-test-generic-repo\",\n            Members = \n            {\n                new Artifactory.Inputs.FederatedGenericRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl.org/artifactory/terraform-federated-test-generic-repo\",\n                },\n                new Artifactory.Inputs.FederatedGenericRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl2.org/artifactory/terraform-federated-test-generic-repo-2\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewFederatedGenericRepository(ctx, \"terraform-federated-test-generic-repo\", \u0026artifactory.FederatedGenericRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-federated-test-generic-repo\"),\n\t\t\tMembers: FederatedGenericRepositoryMemberArray{\n\t\t\t\t\u0026FederatedGenericRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl.org/artifactory/terraform-federated-test-generic-repo\"),\n\t\t\t\t},\n\t\t\t\t\u0026FederatedGenericRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl2.org/artifactory/terraform-federated-test-generic-repo-2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedGenericRepositoryMember:FederatedGenericRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "members",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedGenericRepositoryMember:FederatedGenericRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.\n"
                }
            },
            "requiredInputs": [
                "key",
                "members"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FederatedGenericRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/artifactory:index/FederatedGenericRepositoryMember:FederatedGenericRepositoryMember"
                        },
                        "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/federatedGitltfsRepository:FederatedGitltfsRepository": {
            "description": "## # Artifactory Federated Gitlfs Repository Resource\n\nCreates a federated Gitlfs repository\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_federated_test_gitlfs_repo = new artifactory.FederatedGitltfsRepository(\"terraform-federated-test-gitlfs-repo\", {\n    key: \"terraform-federated-test-gitlfs-repo\",\n    members: [\n        {\n            enable: true,\n            url: \"http://tempurl.org/artifactory/terraform-federated-test-gitlfs-repo\",\n        },\n        {\n            enable: true,\n            url: \"http://tempurl2.org/artifactory/terraform-federated-test-gitlfs-repo-2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_federated_test_gitlfs_repo = artifactory.FederatedGitltfsRepository(\"terraform-federated-test-gitlfs-repo\",\n    key=\"terraform-federated-test-gitlfs-repo\",\n    members=[\n        artifactory.FederatedGitltfsRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl.org/artifactory/terraform-federated-test-gitlfs-repo\",\n        ),\n        artifactory.FederatedGitltfsRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl2.org/artifactory/terraform-federated-test-gitlfs-repo-2\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_federated_test_gitlfs_repo = new Artifactory.FederatedGitltfsRepository(\"terraform-federated-test-gitlfs-repo\", new Artifactory.FederatedGitltfsRepositoryArgs\n        {\n            Key = \"terraform-federated-test-gitlfs-repo\",\n            Members = \n            {\n                new Artifactory.Inputs.FederatedGitltfsRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl.org/artifactory/terraform-federated-test-gitlfs-repo\",\n                },\n                new Artifactory.Inputs.FederatedGitltfsRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl2.org/artifactory/terraform-federated-test-gitlfs-repo-2\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewFederatedGitltfsRepository(ctx, \"terraform-federated-test-gitlfs-repo\", \u0026artifactory.FederatedGitltfsRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-federated-test-gitlfs-repo\"),\n\t\t\tMembers: FederatedGitltfsRepositoryMemberArray{\n\t\t\t\t\u0026FederatedGitltfsRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl.org/artifactory/terraform-federated-test-gitlfs-repo\"),\n\t\t\t\t},\n\t\t\t\t\u0026FederatedGitltfsRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl2.org/artifactory/terraform-federated-test-gitlfs-repo-2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedGitltfsRepositoryMember:FederatedGitltfsRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "members",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedGitltfsRepositoryMember:FederatedGitltfsRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key",
                "members"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FederatedGitltfsRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/artifactory:index/FederatedGitltfsRepositoryMember:FederatedGitltfsRepositoryMember"
                        },
                        "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/federatedGoRepository:FederatedGoRepository": {
            "description": "## # Artifactory Federated Go Repository Resource\n\nCreates a federated Go repository\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_federated_test_go_repo = new artifactory.FederatedGoRepository(\"terraform-federated-test-go-repo\", {\n    key: \"terraform-federated-test-go-repo\",\n    members: [\n        {\n            enable: true,\n            url: \"http://tempurl.org/artifactory/terraform-federated-test-go-repo\",\n        },\n        {\n            enable: true,\n            url: \"http://tempurl2.org/artifactory/terraform-federated-test-go-repo-2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_federated_test_go_repo = artifactory.FederatedGoRepository(\"terraform-federated-test-go-repo\",\n    key=\"terraform-federated-test-go-repo\",\n    members=[\n        artifactory.FederatedGoRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl.org/artifactory/terraform-federated-test-go-repo\",\n        ),\n        artifactory.FederatedGoRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl2.org/artifactory/terraform-federated-test-go-repo-2\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_federated_test_go_repo = new Artifactory.FederatedGoRepository(\"terraform-federated-test-go-repo\", new Artifactory.FederatedGoRepositoryArgs\n        {\n            Key = \"terraform-federated-test-go-repo\",\n            Members = \n            {\n                new Artifactory.Inputs.FederatedGoRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl.org/artifactory/terraform-federated-test-go-repo\",\n                },\n                new Artifactory.Inputs.FederatedGoRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl2.org/artifactory/terraform-federated-test-go-repo-2\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewFederatedGoRepository(ctx, \"terraform-federated-test-go-repo\", \u0026artifactory.FederatedGoRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-federated-test-go-repo\"),\n\t\t\tMembers: FederatedGoRepositoryMemberArray{\n\t\t\t\t\u0026FederatedGoRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl.org/artifactory/terraform-federated-test-go-repo\"),\n\t\t\t\t},\n\t\t\t\t\u0026FederatedGoRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl2.org/artifactory/terraform-federated-test-go-repo-2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedGoRepositoryMember:FederatedGoRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "members",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedGoRepositoryMember:FederatedGoRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key",
                "members"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FederatedGoRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/artifactory:index/FederatedGoRepositoryMember:FederatedGoRepositoryMember"
                        },
                        "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/federatedGradleRepository:FederatedGradleRepository": {
            "description": "## # Artifactory Federated Gradle Repository Resource\n\nCreates a federated Gradle repository\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_federated_test_gradle_repo = new artifactory.FederatedGradleRepository(\"terraform-federated-test-gradle-repo\", {\n    key: \"terraform-federated-test-gradle-repo\",\n    members: [\n        {\n            enable: true,\n            url: \"http://tempurl.org/artifactory/terraform-federated-test-gradle-repo\",\n        },\n        {\n            enable: true,\n            url: \"http://tempurl2.org/artifactory/terraform-federated-test-gradle-repo-2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_federated_test_gradle_repo = artifactory.FederatedGradleRepository(\"terraform-federated-test-gradle-repo\",\n    key=\"terraform-federated-test-gradle-repo\",\n    members=[\n        artifactory.FederatedGradleRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl.org/artifactory/terraform-federated-test-gradle-repo\",\n        ),\n        artifactory.FederatedGradleRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl2.org/artifactory/terraform-federated-test-gradle-repo-2\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_federated_test_gradle_repo = new Artifactory.FederatedGradleRepository(\"terraform-federated-test-gradle-repo\", new Artifactory.FederatedGradleRepositoryArgs\n        {\n            Key = \"terraform-federated-test-gradle-repo\",\n            Members = \n            {\n                new Artifactory.Inputs.FederatedGradleRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl.org/artifactory/terraform-federated-test-gradle-repo\",\n                },\n                new Artifactory.Inputs.FederatedGradleRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl2.org/artifactory/terraform-federated-test-gradle-repo-2\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewFederatedGradleRepository(ctx, \"terraform-federated-test-gradle-repo\", \u0026artifactory.FederatedGradleRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-federated-test-gradle-repo\"),\n\t\t\tMembers: FederatedGradleRepositoryMemberArray{\n\t\t\t\t\u0026FederatedGradleRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl.org/artifactory/terraform-federated-test-gradle-repo\"),\n\t\t\t\t},\n\t\t\t\t\u0026FederatedGradleRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl2.org/artifactory/terraform-federated-test-gradle-repo-2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedGradleRepositoryMember:FederatedGradleRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "members",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedGradleRepositoryMember:FederatedGradleRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key",
                "members"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FederatedGradleRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/artifactory:index/FederatedGradleRepositoryMember:FederatedGradleRepositoryMember"
                        },
                        "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/federatedHelmRepository:FederatedHelmRepository": {
            "description": "## # Artifactory Federated Helm Repository Resource\n\nCreates a federated Helm repository\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_federated_test_helm_repo = new artifactory.FederatedHelmRepository(\"terraform-federated-test-helm-repo\", {\n    key: \"terraform-federated-test-helm-repo\",\n    members: [\n        {\n            enable: true,\n            url: \"http://tempurl.org/artifactory/terraform-federated-test-helm-repo\",\n        },\n        {\n            enable: true,\n            url: \"http://tempurl2.org/artifactory/terraform-federated-test-helm-repo-2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_federated_test_helm_repo = artifactory.FederatedHelmRepository(\"terraform-federated-test-helm-repo\",\n    key=\"terraform-federated-test-helm-repo\",\n    members=[\n        artifactory.FederatedHelmRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl.org/artifactory/terraform-federated-test-helm-repo\",\n        ),\n        artifactory.FederatedHelmRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl2.org/artifactory/terraform-federated-test-helm-repo-2\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_federated_test_helm_repo = new Artifactory.FederatedHelmRepository(\"terraform-federated-test-helm-repo\", new Artifactory.FederatedHelmRepositoryArgs\n        {\n            Key = \"terraform-federated-test-helm-repo\",\n            Members = \n            {\n                new Artifactory.Inputs.FederatedHelmRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl.org/artifactory/terraform-federated-test-helm-repo\",\n                },\n                new Artifactory.Inputs.FederatedHelmRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl2.org/artifactory/terraform-federated-test-helm-repo-2\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewFederatedHelmRepository(ctx, \"terraform-federated-test-helm-repo\", \u0026artifactory.FederatedHelmRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-federated-test-helm-repo\"),\n\t\t\tMembers: FederatedHelmRepositoryMemberArray{\n\t\t\t\t\u0026FederatedHelmRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl.org/artifactory/terraform-federated-test-helm-repo\"),\n\t\t\t\t},\n\t\t\t\t\u0026FederatedHelmRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl2.org/artifactory/terraform-federated-test-helm-repo-2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedHelmRepositoryMember:FederatedHelmRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "members",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedHelmRepositoryMember:FederatedHelmRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key",
                "members"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FederatedHelmRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/artifactory:index/FederatedHelmRepositoryMember:FederatedHelmRepositoryMember"
                        },
                        "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/federatedIvyRepository:FederatedIvyRepository": {
            "description": "## # Artifactory Federated Ivy Repository Resource\n\nCreates a federated Ivy repository\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_federated_test_ivy_repo = new artifactory.FederatedIvyRepository(\"terraform-federated-test-ivy-repo\", {\n    key: \"terraform-federated-test-ivy-repo\",\n    members: [\n        {\n            enable: true,\n            url: \"http://tempurl.org/artifactory/terraform-federated-test-ivy-repo\",\n        },\n        {\n            enable: true,\n            url: \"http://tempurl2.org/artifactory/terraform-federated-test-ivy-repo-2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_federated_test_ivy_repo = artifactory.FederatedIvyRepository(\"terraform-federated-test-ivy-repo\",\n    key=\"terraform-federated-test-ivy-repo\",\n    members=[\n        artifactory.FederatedIvyRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl.org/artifactory/terraform-federated-test-ivy-repo\",\n        ),\n        artifactory.FederatedIvyRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl2.org/artifactory/terraform-federated-test-ivy-repo-2\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_federated_test_ivy_repo = new Artifactory.FederatedIvyRepository(\"terraform-federated-test-ivy-repo\", new Artifactory.FederatedIvyRepositoryArgs\n        {\n            Key = \"terraform-federated-test-ivy-repo\",\n            Members = \n            {\n                new Artifactory.Inputs.FederatedIvyRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl.org/artifactory/terraform-federated-test-ivy-repo\",\n                },\n                new Artifactory.Inputs.FederatedIvyRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl2.org/artifactory/terraform-federated-test-ivy-repo-2\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewFederatedIvyRepository(ctx, \"terraform-federated-test-ivy-repo\", \u0026artifactory.FederatedIvyRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-federated-test-ivy-repo\"),\n\t\t\tMembers: FederatedIvyRepositoryMemberArray{\n\t\t\t\t\u0026FederatedIvyRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl.org/artifactory/terraform-federated-test-ivy-repo\"),\n\t\t\t\t},\n\t\t\t\t\u0026FederatedIvyRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl2.org/artifactory/terraform-federated-test-ivy-repo-2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedIvyRepositoryMember:FederatedIvyRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "members",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedIvyRepositoryMember:FederatedIvyRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key",
                "members"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FederatedIvyRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/artifactory:index/FederatedIvyRepositoryMember:FederatedIvyRepositoryMember"
                        },
                        "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/federatedMavenRepository:FederatedMavenRepository": {
            "description": "## # Artifactory Federated Maven Repository Resource\n\nCreates a federated Maven repository\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_federated_test_maven_repo = new artifactory.FederatedMavenRepository(\"terraform-federated-test-maven-repo\", {\n    key: \"terraform-federated-test-maven-repo\",\n    members: [\n        {\n            enable: true,\n            url: \"http://tempurl.org/artifactory/terraform-federated-test-maven-repo\",\n        },\n        {\n            enable: true,\n            url: \"http://tempurl2.org/artifactory/terraform-federated-test-maven-repo-2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_federated_test_maven_repo = artifactory.FederatedMavenRepository(\"terraform-federated-test-maven-repo\",\n    key=\"terraform-federated-test-maven-repo\",\n    members=[\n        artifactory.FederatedMavenRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl.org/artifactory/terraform-federated-test-maven-repo\",\n        ),\n        artifactory.FederatedMavenRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl2.org/artifactory/terraform-federated-test-maven-repo-2\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_federated_test_maven_repo = new Artifactory.FederatedMavenRepository(\"terraform-federated-test-maven-repo\", new Artifactory.FederatedMavenRepositoryArgs\n        {\n            Key = \"terraform-federated-test-maven-repo\",\n            Members = \n            {\n                new Artifactory.Inputs.FederatedMavenRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl.org/artifactory/terraform-federated-test-maven-repo\",\n                },\n                new Artifactory.Inputs.FederatedMavenRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl2.org/artifactory/terraform-federated-test-maven-repo-2\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewFederatedMavenRepository(ctx, \"terraform-federated-test-maven-repo\", \u0026artifactory.FederatedMavenRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-federated-test-maven-repo\"),\n\t\t\tMembers: FederatedMavenRepositoryMemberArray{\n\t\t\t\t\u0026FederatedMavenRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl.org/artifactory/terraform-federated-test-maven-repo\"),\n\t\t\t\t},\n\t\t\t\t\u0026FederatedMavenRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl2.org/artifactory/terraform-federated-test-maven-repo-2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedMavenRepositoryMember:FederatedMavenRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "members",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedMavenRepositoryMember:FederatedMavenRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key",
                "members"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FederatedMavenRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/artifactory:index/FederatedMavenRepositoryMember:FederatedMavenRepositoryMember"
                        },
                        "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/federatedNpmRepository:FederatedNpmRepository": {
            "description": "## # Artifactory Federated Npm Repository Resource\n\nCreates a federated Npm repository\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_federated_test_npm_repo = new artifactory.FederatedNpmRepository(\"terraform-federated-test-npm-repo\", {\n    key: \"terraform-federated-test-npm-repo\",\n    members: [\n        {\n            enable: true,\n            url: \"http://tempurl.org/artifactory/terraform-federated-test-npm-repo\",\n        },\n        {\n            enable: true,\n            url: \"http://tempurl2.org/artifactory/terraform-federated-test-npm-repo-2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_federated_test_npm_repo = artifactory.FederatedNpmRepository(\"terraform-federated-test-npm-repo\",\n    key=\"terraform-federated-test-npm-repo\",\n    members=[\n        artifactory.FederatedNpmRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl.org/artifactory/terraform-federated-test-npm-repo\",\n        ),\n        artifactory.FederatedNpmRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl2.org/artifactory/terraform-federated-test-npm-repo-2\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_federated_test_npm_repo = new Artifactory.FederatedNpmRepository(\"terraform-federated-test-npm-repo\", new Artifactory.FederatedNpmRepositoryArgs\n        {\n            Key = \"terraform-federated-test-npm-repo\",\n            Members = \n            {\n                new Artifactory.Inputs.FederatedNpmRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl.org/artifactory/terraform-federated-test-npm-repo\",\n                },\n                new Artifactory.Inputs.FederatedNpmRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl2.org/artifactory/terraform-federated-test-npm-repo-2\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewFederatedNpmRepository(ctx, \"terraform-federated-test-npm-repo\", \u0026artifactory.FederatedNpmRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-federated-test-npm-repo\"),\n\t\t\tMembers: FederatedNpmRepositoryMemberArray{\n\t\t\t\t\u0026FederatedNpmRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl.org/artifactory/terraform-federated-test-npm-repo\"),\n\t\t\t\t},\n\t\t\t\t\u0026FederatedNpmRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl2.org/artifactory/terraform-federated-test-npm-repo-2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedNpmRepositoryMember:FederatedNpmRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "members",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedNpmRepositoryMember:FederatedNpmRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key",
                "members"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FederatedNpmRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/artifactory:index/FederatedNpmRepositoryMember:FederatedNpmRepositoryMember"
                        },
                        "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/federatedNugetRepository:FederatedNugetRepository": {
            "description": "## # Artifactory Federated Nuget Repository Resource\n\nCreates a federated Nuget repository\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_federated_test_nuget_repo = new artifactory.FederatedNugetRepository(\"terraform-federated-test-nuget-repo\", {\n    key: \"terraform-federated-test-nuget-repo\",\n    members: [\n        {\n            enable: true,\n            url: \"http://tempurl.org/artifactory/terraform-federated-test-nuget-repo\",\n        },\n        {\n            enable: true,\n            url: \"http://tempurl2.org/artifactory/terraform-federated-test-nuget-repo-2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_federated_test_nuget_repo = artifactory.FederatedNugetRepository(\"terraform-federated-test-nuget-repo\",\n    key=\"terraform-federated-test-nuget-repo\",\n    members=[\n        artifactory.FederatedNugetRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl.org/artifactory/terraform-federated-test-nuget-repo\",\n        ),\n        artifactory.FederatedNugetRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl2.org/artifactory/terraform-federated-test-nuget-repo-2\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_federated_test_nuget_repo = new Artifactory.FederatedNugetRepository(\"terraform-federated-test-nuget-repo\", new Artifactory.FederatedNugetRepositoryArgs\n        {\n            Key = \"terraform-federated-test-nuget-repo\",\n            Members = \n            {\n                new Artifactory.Inputs.FederatedNugetRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl.org/artifactory/terraform-federated-test-nuget-repo\",\n                },\n                new Artifactory.Inputs.FederatedNugetRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl2.org/artifactory/terraform-federated-test-nuget-repo-2\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewFederatedNugetRepository(ctx, \"terraform-federated-test-nuget-repo\", \u0026artifactory.FederatedNugetRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-federated-test-nuget-repo\"),\n\t\t\tMembers: FederatedNugetRepositoryMemberArray{\n\t\t\t\t\u0026FederatedNugetRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl.org/artifactory/terraform-federated-test-nuget-repo\"),\n\t\t\t\t},\n\t\t\t\t\u0026FederatedNugetRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl2.org/artifactory/terraform-federated-test-nuget-repo-2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedNugetRepositoryMember:FederatedNugetRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "members",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedNugetRepositoryMember:FederatedNugetRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key",
                "members"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FederatedNugetRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/artifactory:index/FederatedNugetRepositoryMember:FederatedNugetRepositoryMember"
                        },
                        "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/federatedOpkgRepository:FederatedOpkgRepository": {
            "description": "## # Artifactory Federated Opkg Repository Resource\n\nCreates a federated Opkg repository\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_federated_test_opkg_repo = new artifactory.FederatedOpkgRepository(\"terraform-federated-test-opkg-repo\", {\n    key: \"terraform-federated-test-opkg-repo\",\n    members: [\n        {\n            enable: true,\n            url: \"http://tempurl.org/artifactory/terraform-federated-test-opkg-repo\",\n        },\n        {\n            enable: true,\n            url: \"http://tempurl2.org/artifactory/terraform-federated-test-opkg-repo-2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_federated_test_opkg_repo = artifactory.FederatedOpkgRepository(\"terraform-federated-test-opkg-repo\",\n    key=\"terraform-federated-test-opkg-repo\",\n    members=[\n        artifactory.FederatedOpkgRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl.org/artifactory/terraform-federated-test-opkg-repo\",\n        ),\n        artifactory.FederatedOpkgRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl2.org/artifactory/terraform-federated-test-opkg-repo-2\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_federated_test_opkg_repo = new Artifactory.FederatedOpkgRepository(\"terraform-federated-test-opkg-repo\", new Artifactory.FederatedOpkgRepositoryArgs\n        {\n            Key = \"terraform-federated-test-opkg-repo\",\n            Members = \n            {\n                new Artifactory.Inputs.FederatedOpkgRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl.org/artifactory/terraform-federated-test-opkg-repo\",\n                },\n                new Artifactory.Inputs.FederatedOpkgRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl2.org/artifactory/terraform-federated-test-opkg-repo-2\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewFederatedOpkgRepository(ctx, \"terraform-federated-test-opkg-repo\", \u0026artifactory.FederatedOpkgRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-federated-test-opkg-repo\"),\n\t\t\tMembers: FederatedOpkgRepositoryMemberArray{\n\t\t\t\t\u0026FederatedOpkgRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl.org/artifactory/terraform-federated-test-opkg-repo\"),\n\t\t\t\t},\n\t\t\t\t\u0026FederatedOpkgRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl2.org/artifactory/terraform-federated-test-opkg-repo-2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedOpkgRepositoryMember:FederatedOpkgRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "members",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedOpkgRepositoryMember:FederatedOpkgRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key",
                "members"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FederatedOpkgRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/artifactory:index/FederatedOpkgRepositoryMember:FederatedOpkgRepositoryMember"
                        },
                        "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/federatedPuppetRepository:FederatedPuppetRepository": {
            "description": "## # Artifactory Federated Puppet Repository Resource\n\nCreates a federated Puppet repository\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_federated_test_puppet_repo = new artifactory.FederatedPuppetRepository(\"terraform-federated-test-puppet-repo\", {\n    key: \"terraform-federated-test-puppet-repo\",\n    members: [\n        {\n            enable: true,\n            url: \"http://tempurl.org/artifactory/terraform-federated-test-puppet-repo\",\n        },\n        {\n            enable: true,\n            url: \"http://tempurl2.org/artifactory/terraform-federated-test-puppet-repo-2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_federated_test_puppet_repo = artifactory.FederatedPuppetRepository(\"terraform-federated-test-puppet-repo\",\n    key=\"terraform-federated-test-puppet-repo\",\n    members=[\n        artifactory.FederatedPuppetRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl.org/artifactory/terraform-federated-test-puppet-repo\",\n        ),\n        artifactory.FederatedPuppetRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl2.org/artifactory/terraform-federated-test-puppet-repo-2\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_federated_test_puppet_repo = new Artifactory.FederatedPuppetRepository(\"terraform-federated-test-puppet-repo\", new Artifactory.FederatedPuppetRepositoryArgs\n        {\n            Key = \"terraform-federated-test-puppet-repo\",\n            Members = \n            {\n                new Artifactory.Inputs.FederatedPuppetRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl.org/artifactory/terraform-federated-test-puppet-repo\",\n                },\n                new Artifactory.Inputs.FederatedPuppetRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl2.org/artifactory/terraform-federated-test-puppet-repo-2\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewFederatedPuppetRepository(ctx, \"terraform-federated-test-puppet-repo\", \u0026artifactory.FederatedPuppetRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-federated-test-puppet-repo\"),\n\t\t\tMembers: FederatedPuppetRepositoryMemberArray{\n\t\t\t\t\u0026FederatedPuppetRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl.org/artifactory/terraform-federated-test-puppet-repo\"),\n\t\t\t\t},\n\t\t\t\t\u0026FederatedPuppetRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl2.org/artifactory/terraform-federated-test-puppet-repo-2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedPuppetRepositoryMember:FederatedPuppetRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "members",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedPuppetRepositoryMember:FederatedPuppetRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key",
                "members"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FederatedPuppetRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/artifactory:index/FederatedPuppetRepositoryMember:FederatedPuppetRepositoryMember"
                        },
                        "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/federatedPypiRepository:FederatedPypiRepository": {
            "description": "## # Artifactory Federated Pypi Repository Resource\n\nCreates a federated Pypi repository\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_federated_test_pypi_repo = new artifactory.FederatedPypiRepository(\"terraform-federated-test-pypi-repo\", {\n    key: \"terraform-federated-test-pypi-repo\",\n    members: [\n        {\n            enable: true,\n            url: \"http://tempurl.org/artifactory/terraform-federated-test-pypi-repo\",\n        },\n        {\n            enable: true,\n            url: \"http://tempurl2.org/artifactory/terraform-federated-test-pypi-repo-2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_federated_test_pypi_repo = artifactory.FederatedPypiRepository(\"terraform-federated-test-pypi-repo\",\n    key=\"terraform-federated-test-pypi-repo\",\n    members=[\n        artifactory.FederatedPypiRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl.org/artifactory/terraform-federated-test-pypi-repo\",\n        ),\n        artifactory.FederatedPypiRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl2.org/artifactory/terraform-federated-test-pypi-repo-2\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_federated_test_pypi_repo = new Artifactory.FederatedPypiRepository(\"terraform-federated-test-pypi-repo\", new Artifactory.FederatedPypiRepositoryArgs\n        {\n            Key = \"terraform-federated-test-pypi-repo\",\n            Members = \n            {\n                new Artifactory.Inputs.FederatedPypiRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl.org/artifactory/terraform-federated-test-pypi-repo\",\n                },\n                new Artifactory.Inputs.FederatedPypiRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl2.org/artifactory/terraform-federated-test-pypi-repo-2\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewFederatedPypiRepository(ctx, \"terraform-federated-test-pypi-repo\", \u0026artifactory.FederatedPypiRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-federated-test-pypi-repo\"),\n\t\t\tMembers: FederatedPypiRepositoryMemberArray{\n\t\t\t\t\u0026FederatedPypiRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl.org/artifactory/terraform-federated-test-pypi-repo\"),\n\t\t\t\t},\n\t\t\t\t\u0026FederatedPypiRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl2.org/artifactory/terraform-federated-test-pypi-repo-2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedPypiRepositoryMember:FederatedPypiRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "members",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedPypiRepositoryMember:FederatedPypiRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key",
                "members"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FederatedPypiRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/artifactory:index/FederatedPypiRepositoryMember:FederatedPypiRepositoryMember"
                        },
                        "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/federatedRpmRepository:FederatedRpmRepository": {
            "description": "## # Artifactory Federated Rpm Repository Resource\n\nCreates a federated Rpm repository\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_federated_test_rpm_repo = new artifactory.FederatedRpmRepository(\"terraform-federated-test-rpm-repo\", {\n    key: \"terraform-federated-test-rpm-repo\",\n    members: [\n        {\n            enable: true,\n            url: \"http://tempurl.org/artifactory/terraform-federated-test-rpm-repo\",\n        },\n        {\n            enable: true,\n            url: \"http://tempurl2.org/artifactory/terraform-federated-test-rpm-repo-2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_federated_test_rpm_repo = artifactory.FederatedRpmRepository(\"terraform-federated-test-rpm-repo\",\n    key=\"terraform-federated-test-rpm-repo\",\n    members=[\n        artifactory.FederatedRpmRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl.org/artifactory/terraform-federated-test-rpm-repo\",\n        ),\n        artifactory.FederatedRpmRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl2.org/artifactory/terraform-federated-test-rpm-repo-2\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_federated_test_rpm_repo = new Artifactory.FederatedRpmRepository(\"terraform-federated-test-rpm-repo\", new Artifactory.FederatedRpmRepositoryArgs\n        {\n            Key = \"terraform-federated-test-rpm-repo\",\n            Members = \n            {\n                new Artifactory.Inputs.FederatedRpmRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl.org/artifactory/terraform-federated-test-rpm-repo\",\n                },\n                new Artifactory.Inputs.FederatedRpmRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl2.org/artifactory/terraform-federated-test-rpm-repo-2\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewFederatedRpmRepository(ctx, \"terraform-federated-test-rpm-repo\", \u0026artifactory.FederatedRpmRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-federated-test-rpm-repo\"),\n\t\t\tMembers: FederatedRpmRepositoryMemberArray{\n\t\t\t\t\u0026FederatedRpmRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl.org/artifactory/terraform-federated-test-rpm-repo\"),\n\t\t\t\t},\n\t\t\t\t\u0026FederatedRpmRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl2.org/artifactory/terraform-federated-test-rpm-repo-2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedRpmRepositoryMember:FederatedRpmRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "members",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedRpmRepositoryMember:FederatedRpmRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key",
                "members"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FederatedRpmRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/artifactory:index/FederatedRpmRepositoryMember:FederatedRpmRepositoryMember"
                        },
                        "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/federatedSbtRepository:FederatedSbtRepository": {
            "description": "## # Artifactory Federated SBT Repository Resource\n\nCreates a federated SBT repository\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_federated_test_sbt_repo = new artifactory.FederatedSbtRepository(\"terraform-federated-test-sbt-repo\", {\n    key: \"terraform-federated-test-sbt-repo\",\n    members: [\n        {\n            enable: true,\n            url: \"http://tempurl.org/artifactory/terraform-federated-test-sbt-repo\",\n        },\n        {\n            enable: true,\n            url: \"http://tempurl2.org/artifactory/terraform-federated-test-sbt-repo-2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_federated_test_sbt_repo = artifactory.FederatedSbtRepository(\"terraform-federated-test-sbt-repo\",\n    key=\"terraform-federated-test-sbt-repo\",\n    members=[\n        artifactory.FederatedSbtRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl.org/artifactory/terraform-federated-test-sbt-repo\",\n        ),\n        artifactory.FederatedSbtRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl2.org/artifactory/terraform-federated-test-sbt-repo-2\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_federated_test_sbt_repo = new Artifactory.FederatedSbtRepository(\"terraform-federated-test-sbt-repo\", new Artifactory.FederatedSbtRepositoryArgs\n        {\n            Key = \"terraform-federated-test-sbt-repo\",\n            Members = \n            {\n                new Artifactory.Inputs.FederatedSbtRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl.org/artifactory/terraform-federated-test-sbt-repo\",\n                },\n                new Artifactory.Inputs.FederatedSbtRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl2.org/artifactory/terraform-federated-test-sbt-repo-2\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewFederatedSbtRepository(ctx, \"terraform-federated-test-sbt-repo\", \u0026artifactory.FederatedSbtRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-federated-test-sbt-repo\"),\n\t\t\tMembers: FederatedSbtRepositoryMemberArray{\n\t\t\t\t\u0026FederatedSbtRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl.org/artifactory/terraform-federated-test-sbt-repo\"),\n\t\t\t\t},\n\t\t\t\t\u0026FederatedSbtRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl2.org/artifactory/terraform-federated-test-sbt-repo-2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedSbtRepositoryMember:FederatedSbtRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "members",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedSbtRepositoryMember:FederatedSbtRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key",
                "members"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FederatedSbtRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/artifactory:index/FederatedSbtRepositoryMember:FederatedSbtRepositoryMember"
                        },
                        "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/federatedVagrantRepository:FederatedVagrantRepository": {
            "description": "## # Artifactory Federated Vagrant Repository Resource\n\nCreates a federated Vagrant repository\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_federated_test_vagrant_repo = new artifactory.FederatedVagrantRepository(\"terraform-federated-test-vagrant-repo\", {\n    key: \"terraform-federated-test-vagrant-repo\",\n    members: [\n        {\n            enable: true,\n            url: \"http://tempurl.org/artifactory/terraform-federated-test-vagrant-repo\",\n        },\n        {\n            enable: true,\n            url: \"http://tempurl2.org/artifactory/terraform-federated-test-vagrant-repo-2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_federated_test_vagrant_repo = artifactory.FederatedVagrantRepository(\"terraform-federated-test-vagrant-repo\",\n    key=\"terraform-federated-test-vagrant-repo\",\n    members=[\n        artifactory.FederatedVagrantRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl.org/artifactory/terraform-federated-test-vagrant-repo\",\n        ),\n        artifactory.FederatedVagrantRepositoryMemberArgs(\n            enable=True,\n            url=\"http://tempurl2.org/artifactory/terraform-federated-test-vagrant-repo-2\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_federated_test_vagrant_repo = new Artifactory.FederatedVagrantRepository(\"terraform-federated-test-vagrant-repo\", new Artifactory.FederatedVagrantRepositoryArgs\n        {\n            Key = \"terraform-federated-test-vagrant-repo\",\n            Members = \n            {\n                new Artifactory.Inputs.FederatedVagrantRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl.org/artifactory/terraform-federated-test-vagrant-repo\",\n                },\n                new Artifactory.Inputs.FederatedVagrantRepositoryMemberArgs\n                {\n                    Enable = true,\n                    Url = \"http://tempurl2.org/artifactory/terraform-federated-test-vagrant-repo-2\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewFederatedVagrantRepository(ctx, \"terraform-federated-test-vagrant-repo\", \u0026artifactory.FederatedVagrantRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-federated-test-vagrant-repo\"),\n\t\t\tMembers: FederatedVagrantRepositoryMemberArray{\n\t\t\t\t\u0026FederatedVagrantRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl.org/artifactory/terraform-federated-test-vagrant-repo\"),\n\t\t\t\t},\n\t\t\t\t\u0026FederatedVagrantRepositoryMemberArgs{\n\t\t\t\t\tEnable: true,\n\t\t\t\t\tUrl:    pulumi.String(\"http://tempurl2.org/artifactory/terraform-federated-test-vagrant-repo-2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedVagrantRepositoryMember:FederatedVagrantRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "members",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/FederatedVagrantRepositoryMember:FederatedVagrantRepositoryMember"
                    },
                    "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key",
                "members"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FederatedVagrantRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/artifactory:index/FederatedVagrantRepositoryMember:FederatedVagrantRepositoryMember"
                        },
                        "description": "- The list of Federated members and must contain this repository URL (configured base URL + `/artifactory/` + repo `key`). Note that each of the federated members will need to have a base URL set. Please follow the [instruction](https://www.jfrog.com/confluence/display/JFROG/Working+with+Federated+Repositories#WorkingwithFederatedRepositories-SettingUpaFederatedRepository) to set up Federated repositories correctly.\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/generalSecurity:GeneralSecurity": {
            "description": "## # Artifactory General Security Resource\n\nThis resource can be used to manage Artifactory's general security settings.\n\nOnly a single `artifactory.GeneralSecurity` resource is meant to be defined.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\n// Configure Artifactory general security settings\nconst security = new artifactory.GeneralSecurity(\"security\", {\n    enableAnonymousAccess: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\n# Configure Artifactory general security settings\nsecurity = artifactory.GeneralSecurity(\"security\", enable_anonymous_access=True)\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Configure Artifactory general security settings\n        var security = new Artifactory.GeneralSecurity(\"security\", new Artifactory.GeneralSecurityArgs\n        {\n            EnableAnonymousAccess = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewGeneralSecurity(ctx, \"security\", \u0026artifactory.GeneralSecurityArgs{\n\t\t\tEnableAnonymousAccess: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCurrent general security settings can be imported using `security` as the `ID`, e.g.\n\n```sh\n $ pulumi import artifactory:index/generalSecurity:GeneralSecurity security security\n```\n\n ",
            "properties": {
                "enableAnonymousAccess": {
                    "type": "boolean"
                }
            },
            "inputProperties": {
                "enableAnonymousAccess": {
                    "type": "boolean"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GeneralSecurity resources.\n",
                "properties": {
                    "enableAnonymousAccess": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/goRepository:GoRepository": {
            "description": "## # Artifactory Virtual Go Repository Resource\n\nProvides an Artifactory virtual repository resource, but with specific go lang features. This should be preferred over the original\none-size-fits-all `artifactory.VirtualRepository`. \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst baz_go = new artifactory.GoRepository(\"baz-go\", {\n    description: \"A test virtual repo\",\n    excludesPattern: \"com/google/**\",\n    externalDependenciesEnabled: true,\n    externalDependenciesPatterns: [\n        \"**/github.com/**\",\n        \"**/go.googlesource.com/**\",\n    ],\n    includesPattern: \"com/jfrog/**,cloud/jfrog/**\",\n    key: \"baz-go\",\n    notes: \"Internal description\",\n    repoLayoutRef: \"go-default\",\n    repositories: [],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nbaz_go = artifactory.GoRepository(\"baz-go\",\n    description=\"A test virtual repo\",\n    excludes_pattern=\"com/google/**\",\n    external_dependencies_enabled=True,\n    external_dependencies_patterns=[\n        \"**/github.com/**\",\n        \"**/go.googlesource.com/**\",\n    ],\n    includes_pattern=\"com/jfrog/**,cloud/jfrog/**\",\n    key=\"baz-go\",\n    notes=\"Internal description\",\n    repo_layout_ref=\"go-default\",\n    repositories=[])\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var baz_go = new Artifactory.GoRepository(\"baz-go\", new Artifactory.GoRepositoryArgs\n        {\n            Description = \"A test virtual repo\",\n            ExcludesPattern = \"com/google/**\",\n            ExternalDependenciesEnabled = true,\n            ExternalDependenciesPatterns = \n            {\n                \"**/github.com/**\",\n                \"**/go.googlesource.com/**\",\n            },\n            IncludesPattern = \"com/jfrog/**,cloud/jfrog/**\",\n            Key = \"baz-go\",\n            Notes = \"Internal description\",\n            RepoLayoutRef = \"go-default\",\n            Repositories = {},\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewGoRepository(ctx, \"baz-go\", \u0026artifactory.GoRepositoryArgs{\n\t\t\tDescription:                 pulumi.String(\"A test virtual repo\"),\n\t\t\tExcludesPattern:             pulumi.String(\"com/google/**\"),\n\t\t\tExternalDependenciesEnabled: pulumi.Bool(true),\n\t\t\tExternalDependenciesPatterns: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"**/github.com/**\"),\n\t\t\t\tpulumi.String(\"**/go.googlesource.com/**\"),\n\t\t\t},\n\t\t\tIncludesPattern: pulumi.String(\"com/jfrog/**,cloud/jfrog/**\"),\n\t\t\tKey:             pulumi.String(\"baz-go\"),\n\t\t\tNotes:           pulumi.String(\"Internal description\"),\n\t\t\tRepoLayoutRef:   pulumi.String(\"go-default\"),\n\t\t\tRepositories:    pulumi.StringArray{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVirtual repositories can be imported using their name, e.g.\n\n```sh\n $ pulumi import artifactory:index/goRepository:GoRepository foo foo\n```\n\n ",
            "properties": {
                "artifactoryRequestsCanRetrieveRemoteArtifacts": {
                    "type": "boolean",
                    "description": "Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by\nanother Artifactory instance.\n"
                },
                "defaultDeploymentRepo": {
                    "type": "string",
                    "description": "Default repository to deploy artifacts.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A free text field that describes the content and purpose of the repository. If you choose to insert a link into this\nfield, clicking the link will prompt the user to confirm that they might be redirected to a new domain.\n"
                },
                "excludesPattern": {
                    "type": "string",
                    "description": "List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no\nartifacts are excluded.\n"
                },
                "externalDependenciesEnabled": {
                    "type": "boolean",
                    "description": ". Shorthand for \"Enable 'go-import' Meta Tags\" on the UI. This must be set to true in order to use the allow list\n"
                },
                "externalDependenciesPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- 'go-import' Allow List on the UI.\n"
                },
                "includesPattern": {
                    "type": "string",
                    "description": "List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only\nartifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).\n"
                },
                "key": {
                    "type": "string",
                    "description": "The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or\ncontain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.\n'libs-release-local').\n"
                },
                "notes": {
                    "type": "string",
                    "description": "A free text field to add additional notes about the repository. These are only visible to the administrator.\n"
                },
                "packageType": {
                    "type": "string",
                    "description": "The Package Type. This must be specified when the repository is created, and once set, cannot be changed.\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric characters. When assigning\nrepository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                },
                "repoLayoutRef": {
                    "type": "string",
                    "description": "Sets the layout that the repository should use for storing and identifying modules. A recommended layout that\ncorresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.\n"
                },
                "repositories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The effective list of actual repositories included in this virtual repository.\n"
                },
                "retrievalCachePeriodSeconds": {
                    "type": "integer",
                    "description": "This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated\nrepositories. A value of 0 indicates no caching.\n"
                }
            },
            "required": [
                "key",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "artifactoryRequestsCanRetrieveRemoteArtifacts": {
                    "type": "boolean",
                    "description": "Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by\nanother Artifactory instance.\n"
                },
                "defaultDeploymentRepo": {
                    "type": "string",
                    "description": "Default repository to deploy artifacts.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A free text field that describes the content and purpose of the repository. If you choose to insert a link into this\nfield, clicking the link will prompt the user to confirm that they might be redirected to a new domain.\n"
                },
                "excludesPattern": {
                    "type": "string",
                    "description": "List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no\nartifacts are excluded.\n"
                },
                "externalDependenciesEnabled": {
                    "type": "boolean",
                    "description": ". Shorthand for \"Enable 'go-import' Meta Tags\" on the UI. This must be set to true in order to use the allow list\n"
                },
                "externalDependenciesPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "- 'go-import' Allow List on the UI.\n"
                },
                "includesPattern": {
                    "type": "string",
                    "description": "List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only\nartifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).\n"
                },
                "key": {
                    "type": "string",
                    "description": "The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or\ncontain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.\n'libs-release-local').\n"
                },
                "notes": {
                    "type": "string",
                    "description": "A free text field to add additional notes about the repository. These are only visible to the administrator.\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric characters. When assigning\nrepository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                },
                "repoLayoutRef": {
                    "type": "string",
                    "description": "Sets the layout that the repository should use for storing and identifying modules. A recommended layout that\ncorresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.\n"
                },
                "repositories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The effective list of actual repositories included in this virtual repository.\n"
                },
                "retrievalCachePeriodSeconds": {
                    "type": "integer",
                    "description": "This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated\nrepositories. A value of 0 indicates no caching.\n"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GoRepository resources.\n",
                "properties": {
                    "artifactoryRequestsCanRetrieveRemoteArtifacts": {
                        "type": "boolean",
                        "description": "Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by\nanother Artifactory instance.\n"
                    },
                    "defaultDeploymentRepo": {
                        "type": "string",
                        "description": "Default repository to deploy artifacts.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A free text field that describes the content and purpose of the repository. If you choose to insert a link into this\nfield, clicking the link will prompt the user to confirm that they might be redirected to a new domain.\n"
                    },
                    "excludesPattern": {
                        "type": "string",
                        "description": "List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no\nartifacts are excluded.\n"
                    },
                    "externalDependenciesEnabled": {
                        "type": "boolean",
                        "description": ". Shorthand for \"Enable 'go-import' Meta Tags\" on the UI. This must be set to true in order to use the allow list\n"
                    },
                    "externalDependenciesPatterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "- 'go-import' Allow List on the UI.\n"
                    },
                    "includesPattern": {
                        "type": "string",
                        "description": "List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only\nartifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or\ncontain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.\n'libs-release-local').\n"
                    },
                    "notes": {
                        "type": "string",
                        "description": "A free text field to add additional notes about the repository. These are only visible to the administrator.\n"
                    },
                    "packageType": {
                        "type": "string",
                        "description": "The Package Type. This must be specified when the repository is created, and once set, cannot be changed.\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric characters. When assigning\nrepository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                    },
                    "repoLayoutRef": {
                        "type": "string",
                        "description": "Sets the layout that the repository should use for storing and identifying modules. A recommended layout that\ncorresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.\n"
                    },
                    "repositories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The effective list of actual repositories included in this virtual repository.\n"
                    },
                    "retrievalCachePeriodSeconds": {
                        "type": "integer",
                        "description": "This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated\nrepositories. A value of 0 indicates no caching.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/group:Group": {
            "description": "\n\n\n## Import\n\nGroups can be imported using their name, e.g.\n\n```sh\n $ pulumi import artifactory:index/group:Group terraform-group mygroup\n```\n\n ",
            "properties": {
                "adminPrivileges": {
                    "type": "boolean",
                    "description": "Any users added to this group will automatically be assigned with admin privileges in the system.\n"
                },
                "autoJoin": {
                    "type": "boolean",
                    "description": "When this parameter is set, any new users defined in the system are automatically assigned to this group.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for the group\n"
                },
                "detachAllUsers": {
                    "type": "boolean",
                    "description": "When this override is set, an empty or missing usernames array will detach all users from the group\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the group\n"
                },
                "policyManager": {
                    "type": "boolean",
                    "description": "When this override is set, User in the group can set Xray security and compliance policies. Default value is 'false'.\n"
                },
                "realm": {
                    "type": "string",
                    "description": "The realm for the group.\n"
                },
                "realmAttributes": {
                    "type": "string",
                    "description": "The realm attributes for the group.\n"
                },
                "reportsManager": {
                    "type": "boolean",
                    "description": "When this override is set, User in the group can manage Xray Reports on any resource type. Default value is 'false'.\n"
                },
                "usersNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of users assigned to the group. If missing or empty, tf will not manage group membership\n"
                },
                "watchManager": {
                    "type": "boolean",
                    "description": "When this override is set, User in the group can manage Xray Watches on any resource type. Default value is 'false'.\n"
                }
            },
            "required": [
                "adminPrivileges",
                "autoJoin",
                "name",
                "realm"
            ],
            "inputProperties": {
                "adminPrivileges": {
                    "type": "boolean",
                    "description": "Any users added to this group will automatically be assigned with admin privileges in the system.\n"
                },
                "autoJoin": {
                    "type": "boolean",
                    "description": "When this parameter is set, any new users defined in the system are automatically assigned to this group.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for the group\n"
                },
                "detachAllUsers": {
                    "type": "boolean",
                    "description": "When this override is set, an empty or missing usernames array will detach all users from the group\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the group\n"
                },
                "policyManager": {
                    "type": "boolean",
                    "description": "When this override is set, User in the group can set Xray security and compliance policies. Default value is 'false'.\n"
                },
                "realm": {
                    "type": "string",
                    "description": "The realm for the group.\n"
                },
                "realmAttributes": {
                    "type": "string",
                    "description": "The realm attributes for the group.\n"
                },
                "reportsManager": {
                    "type": "boolean",
                    "description": "When this override is set, User in the group can manage Xray Reports on any resource type. Default value is 'false'.\n"
                },
                "usersNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of users assigned to the group. If missing or empty, tf will not manage group membership\n"
                },
                "watchManager": {
                    "type": "boolean",
                    "description": "When this override is set, User in the group can manage Xray Watches on any resource type. Default value is 'false'.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "adminPrivileges": {
                        "type": "boolean",
                        "description": "Any users added to this group will automatically be assigned with admin privileges in the system.\n"
                    },
                    "autoJoin": {
                        "type": "boolean",
                        "description": "When this parameter is set, any new users defined in the system are automatically assigned to this group.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for the group\n"
                    },
                    "detachAllUsers": {
                        "type": "boolean",
                        "description": "When this override is set, an empty or missing usernames array will detach all users from the group\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the group\n"
                    },
                    "policyManager": {
                        "type": "boolean",
                        "description": "When this override is set, User in the group can set Xray security and compliance policies. Default value is 'false'.\n"
                    },
                    "realm": {
                        "type": "string",
                        "description": "The realm for the group.\n"
                    },
                    "realmAttributes": {
                        "type": "string",
                        "description": "The realm attributes for the group.\n"
                    },
                    "reportsManager": {
                        "type": "boolean",
                        "description": "When this override is set, User in the group can manage Xray Reports on any resource type. Default value is 'false'.\n"
                    },
                    "usersNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of users assigned to the group. If missing or empty, tf will not manage group membership\n"
                    },
                    "watchManager": {
                        "type": "boolean",
                        "description": "When this override is set, User in the group can manage Xray Watches on any resource type. Default value is 'false'.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/keypair:Keypair": {
            "description": "## # Artifactory keypair Resource\n\nCreates an RSA Keypair resource - suitable for signing alpine indices. \n- Currently, only RSA is supported.\n- Passphrases are not currently supported, though they exist in the API\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\nimport * from \"fs\";\n\nconst some_keypair6543461672124900137 = new artifactory.Keypair(\"some-keypair6543461672124900137\", {\n    pairName: \"some-keypair6543461672124900137\",\n    pairType: \"RSA\",\n    alias: \"foo-alias6543461672124900137\",\n    privateKey: fs.readFileSync(\"samples/rsa.priv\"),\n    publicKey: fs.readFileSync(\"samples/rsa.pub\"),\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nsome_keypair6543461672124900137 = artifactory.Keypair(\"some-keypair6543461672124900137\",\n    pair_name=\"some-keypair6543461672124900137\",\n    pair_type=\"RSA\",\n    alias=\"foo-alias6543461672124900137\",\n    private_key=(lambda path: open(path).read())(\"samples/rsa.priv\"),\n    public_key=(lambda path: open(path).read())(\"samples/rsa.pub\"))\n```\n```csharp\nusing System.IO;\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var some_keypair6543461672124900137 = new Artifactory.Keypair(\"some-keypair6543461672124900137\", new Artifactory.KeypairArgs\n        {\n            PairName = \"some-keypair6543461672124900137\",\n            PairType = \"RSA\",\n            Alias = \"foo-alias6543461672124900137\",\n            PrivateKey = File.ReadAllText(\"samples/rsa.priv\"),\n            PublicKey = File.ReadAllText(\"samples/rsa.pub\"),\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"io/ioutil\"\n\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := ioutil.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewKeypair(ctx, \"some-keypair6543461672124900137\", \u0026artifactory.KeypairArgs{\n\t\t\tPairName:   pulumi.String(\"some-keypair6543461672124900137\"),\n\t\t\tPairType:   pulumi.String(\"RSA\"),\n\t\t\tAlias:      pulumi.String(\"foo-alias6543461672124900137\"),\n\t\t\tPrivateKey: readFileOrPanic(\"samples/rsa.priv\"),\n\t\t\tPublicKey:  readFileOrPanic(\"samples/rsa.pub\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "alias": {
                    "type": "string",
                    "description": "Required but for unknown reasons\n"
                },
                "pairName": {
                    "type": "string",
                    "description": "name of the key pair and the identity of the resource.\n"
                },
                "pairType": {
                    "type": "string",
                    "description": "RT requires this - presumably for verification purposes.\n"
                },
                "passphrase": {
                    "type": "string",
                    "description": "- This will be used to decrypt the private key. Validated server side.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "- duh! This will have it's pem format validated\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "- duh! This will have it's pem format validated\n"
                },
                "unavailable": {
                    "type": "boolean",
                    "description": "- it's unknown what this does, but, it's returned in the payload and there is no known place to set it in the UI\n"
                }
            },
            "required": [
                "alias",
                "pairName",
                "pairType",
                "privateKey",
                "publicKey",
                "unavailable"
            ],
            "inputProperties": {
                "alias": {
                    "type": "string",
                    "description": "Required but for unknown reasons\n"
                },
                "pairName": {
                    "type": "string",
                    "description": "name of the key pair and the identity of the resource.\n"
                },
                "pairType": {
                    "type": "string",
                    "description": "RT requires this - presumably for verification purposes.\n"
                },
                "passphrase": {
                    "type": "string",
                    "description": "- This will be used to decrypt the private key. Validated server side.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "- duh! This will have it's pem format validated\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "- duh! This will have it's pem format validated\n"
                }
            },
            "requiredInputs": [
                "alias",
                "pairName",
                "pairType",
                "privateKey",
                "publicKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Keypair resources.\n",
                "properties": {
                    "alias": {
                        "type": "string",
                        "description": "Required but for unknown reasons\n"
                    },
                    "pairName": {
                        "type": "string",
                        "description": "name of the key pair and the identity of the resource.\n"
                    },
                    "pairType": {
                        "type": "string",
                        "description": "RT requires this - presumably for verification purposes.\n"
                    },
                    "passphrase": {
                        "type": "string",
                        "description": "- This will be used to decrypt the private key. Validated server side.\n"
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "- duh! This will have it's pem format validated\n"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "- duh! This will have it's pem format validated\n"
                    },
                    "unavailable": {
                        "type": "boolean",
                        "description": "- it's unknown what this does, but, it's returned in the payload and there is no known place to set it in the UI\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/ldapGroupSetting:LdapGroupSetting": {
            "description": "## # Artifactory LDAP Group Setting Resource\n\nThis resource can be used to manage Artifactory's LDAP Group settings for user authentication.\n\nLDAP Groups Add-on allows you to synchronize your LDAP groups with the system and leverage your existing organizational structure for managing group-based permissions.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\n// Configure Artifactory LDAP setting\nconst ldapGroupName = new artifactory.LdapGroupSetting(\"ldap_group_name\", {\n    descriptionAttribute: \"description\",\n    enabledLdap: \"ldap_name\",\n    filter: \"(objectClass=groupOfNames)\",\n    groupBaseDn: \"\",\n    groupMemberAttribute: \"uniqueMember\",\n    groupNameAttribute: \"cn\",\n    strategy: \"STATIC\",\n    subTree: true,\n});\n```\nNote: `Name` argument has to match to the resource name.   \nReference Link: [JFrog LDAP](https://www.jfrog.com/confluence/display/JFROG/LDAP)\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nLDAP Group setting can be imported using the key, e.g.\n\n```sh\n $ pulumi import artifactory:index/ldapGroupSetting:LdapGroupSetting ldap_group_name ldap_group_name\n```\n\n ",
            "properties": {
                "descriptionAttribute": {
                    "type": "string",
                    "description": "An attribute on the group entry which denoting the group description. Used when importing groups.\n"
                },
                "filter": {
                    "type": "string",
                    "description": "The LDAP filter used to search for group entries. Used for importing groups.\n"
                },
                "groupBaseDn": {
                    "type": "string",
                    "description": "A search base for group entry DNs, relative to the DN on the LDAP server’s URL (and not relative to the LDAP Setting’s “Search Base”). Used when importing groups.\n"
                },
                "groupMemberAttribute": {
                    "type": "string",
                    "description": "A multi-value attribute on the group entry containing user DNs or IDs of the group members (e.g., uniqueMember,member).\n"
                },
                "groupNameAttribute": {
                    "type": "string",
                    "description": "Attribute on the group entry denoting the group name. Used when importing groups.\n"
                },
                "ldapSettingKey": {
                    "type": "string",
                    "description": "(Required) The LDAP setting key you want to use for group retrieval. The value for this field corresponds to\n'enabledLdap' field of the ldap group setting XML block of system configuration.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Ldap group setting name.\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "The JFrog Platform Deployment (JPD) supports three ways of mapping groups to LDAP schemas:\n- STATIC: Group objects are aware of their members, however, the users are not aware of the groups they belong to. Each group object such as groupOfNames or groupOfUniqueNames holds its respective member attributes, typically member or uniqueMember, which is a user DN.\n- DYNAMIC: User objects are aware of what groups they belong to, but the group objects are not aware of their members. Each user object contains a custom attribute, such as group, that holds the group DNs or group names of which the user is a member.\n- HIERARCHICAL: The user's DN is indicative of the groups the user belongs to by using group names as part of user DN hierarchy. Each user DN contains a list of ou's or custom attributes that make up the group association. For example, uid=user1,ou=developers,ou=uk,dc=jfrog,dc=org indicates that user1 belongs to two groups: uk and developers.\n"
                },
                "subTree": {
                    "type": "boolean",
                    "description": "When set, enables deep search through the sub-tree of the LDAP URL + Search Base. True by default.\n"
                }
            },
            "required": [
                "descriptionAttribute",
                "filter",
                "groupMemberAttribute",
                "groupNameAttribute",
                "ldapSettingKey",
                "name",
                "strategy"
            ],
            "inputProperties": {
                "descriptionAttribute": {
                    "type": "string",
                    "description": "An attribute on the group entry which denoting the group description. Used when importing groups.\n"
                },
                "filter": {
                    "type": "string",
                    "description": "The LDAP filter used to search for group entries. Used for importing groups.\n"
                },
                "groupBaseDn": {
                    "type": "string",
                    "description": "A search base for group entry DNs, relative to the DN on the LDAP server’s URL (and not relative to the LDAP Setting’s “Search Base”). Used when importing groups.\n"
                },
                "groupMemberAttribute": {
                    "type": "string",
                    "description": "A multi-value attribute on the group entry containing user DNs or IDs of the group members (e.g., uniqueMember,member).\n"
                },
                "groupNameAttribute": {
                    "type": "string",
                    "description": "Attribute on the group entry denoting the group name. Used when importing groups.\n"
                },
                "ldapSettingKey": {
                    "type": "string",
                    "description": "(Required) The LDAP setting key you want to use for group retrieval. The value for this field corresponds to\n'enabledLdap' field of the ldap group setting XML block of system configuration.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Ldap group setting name.\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "The JFrog Platform Deployment (JPD) supports three ways of mapping groups to LDAP schemas:\n- STATIC: Group objects are aware of their members, however, the users are not aware of the groups they belong to. Each group object such as groupOfNames or groupOfUniqueNames holds its respective member attributes, typically member or uniqueMember, which is a user DN.\n- DYNAMIC: User objects are aware of what groups they belong to, but the group objects are not aware of their members. Each user object contains a custom attribute, such as group, that holds the group DNs or group names of which the user is a member.\n- HIERARCHICAL: The user's DN is indicative of the groups the user belongs to by using group names as part of user DN hierarchy. Each user DN contains a list of ou's or custom attributes that make up the group association. For example, uid=user1,ou=developers,ou=uk,dc=jfrog,dc=org indicates that user1 belongs to two groups: uk and developers.\n"
                },
                "subTree": {
                    "type": "boolean",
                    "description": "When set, enables deep search through the sub-tree of the LDAP URL + Search Base. True by default.\n"
                }
            },
            "requiredInputs": [
                "descriptionAttribute",
                "filter",
                "groupMemberAttribute",
                "groupNameAttribute",
                "ldapSettingKey",
                "strategy"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LdapGroupSetting resources.\n",
                "properties": {
                    "descriptionAttribute": {
                        "type": "string",
                        "description": "An attribute on the group entry which denoting the group description. Used when importing groups.\n"
                    },
                    "filter": {
                        "type": "string",
                        "description": "The LDAP filter used to search for group entries. Used for importing groups.\n"
                    },
                    "groupBaseDn": {
                        "type": "string",
                        "description": "A search base for group entry DNs, relative to the DN on the LDAP server’s URL (and not relative to the LDAP Setting’s “Search Base”). Used when importing groups.\n"
                    },
                    "groupMemberAttribute": {
                        "type": "string",
                        "description": "A multi-value attribute on the group entry containing user DNs or IDs of the group members (e.g., uniqueMember,member).\n"
                    },
                    "groupNameAttribute": {
                        "type": "string",
                        "description": "Attribute on the group entry denoting the group name. Used when importing groups.\n"
                    },
                    "ldapSettingKey": {
                        "type": "string",
                        "description": "(Required) The LDAP setting key you want to use for group retrieval. The value for this field corresponds to\n'enabledLdap' field of the ldap group setting XML block of system configuration.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Ldap group setting name.\n"
                    },
                    "strategy": {
                        "type": "string",
                        "description": "The JFrog Platform Deployment (JPD) supports three ways of mapping groups to LDAP schemas:\n- STATIC: Group objects are aware of their members, however, the users are not aware of the groups they belong to. Each group object such as groupOfNames or groupOfUniqueNames holds its respective member attributes, typically member or uniqueMember, which is a user DN.\n- DYNAMIC: User objects are aware of what groups they belong to, but the group objects are not aware of their members. Each user object contains a custom attribute, such as group, that holds the group DNs or group names of which the user is a member.\n- HIERARCHICAL: The user's DN is indicative of the groups the user belongs to by using group names as part of user DN hierarchy. Each user DN contains a list of ou's or custom attributes that make up the group association. For example, uid=user1,ou=developers,ou=uk,dc=jfrog,dc=org indicates that user1 belongs to two groups: uk and developers.\n"
                    },
                    "subTree": {
                        "type": "boolean",
                        "description": "When set, enables deep search through the sub-tree of the LDAP URL + Search Base. True by default.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/ldapSetting:LdapSetting": {
            "description": "## # Artifactory LDAP Setting Resource\n\nThis resource can be used to manage Artifactory's LDAP settings for user authentication.\n\nWhen specified LDAP setting is active, Artifactory first attempts to authenticate the user against the LDAP server. If LDAP authentication fails, it then tries to authenticate via its internal database.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\n// Configure Artifactory LDAP setting\nconst ldapName = new artifactory.LdapSetting(\"ldap_name\", {\n    allowUserToAccessProfile: false,\n    autoCreateUser: true,\n    emailAttribute: \"mail\",\n    enabled: true,\n    key: \"ldap_name\",\n    ldapPoisoningProtection: true,\n    ldapUrl: \"ldap://ldap_server_url\",\n    managerDn: \"mgr_dn\",\n    managerPassword: \"mgr_passwd_random\",\n    pagingSupportEnabled: false,\n    searchBase: \"ou=users\",\n    searchFilter: \"(uid={0})\",\n    searchSubTree: true,\n    userDnPattern: \"uid={0},ou=People\",\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\n# Configure Artifactory LDAP setting\nldap_name = artifactory.LdapSetting(\"ldapName\",\n    allow_user_to_access_profile=False,\n    auto_create_user=True,\n    email_attribute=\"mail\",\n    enabled=True,\n    key=\"ldap_name\",\n    ldap_poisoning_protection=True,\n    ldap_url=\"ldap://ldap_server_url\",\n    manager_dn=\"mgr_dn\",\n    manager_password=\"mgr_passwd_random\",\n    paging_support_enabled=False,\n    search_base=\"ou=users\",\n    search_filter=\"(uid={0})\",\n    search_sub_tree=True,\n    user_dn_pattern=\"uid={0},ou=People\")\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Configure Artifactory LDAP setting\n        var ldapName = new Artifactory.LdapSetting(\"ldapName\", new Artifactory.LdapSettingArgs\n        {\n            AllowUserToAccessProfile = false,\n            AutoCreateUser = true,\n            EmailAttribute = \"mail\",\n            Enabled = true,\n            Key = \"ldap_name\",\n            LdapPoisoningProtection = true,\n            LdapUrl = \"ldap://ldap_server_url\",\n            ManagerDn = \"mgr_dn\",\n            ManagerPassword = \"mgr_passwd_random\",\n            PagingSupportEnabled = false,\n            SearchBase = \"ou=users\",\n            SearchFilter = \"(uid={0})\",\n            SearchSubTree = true,\n            UserDnPattern = \"uid={0},ou=People\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewLdapSetting(ctx, \"ldapName\", \u0026artifactory.LdapSettingArgs{\n\t\t\tAllowUserToAccessProfile: pulumi.Bool(false),\n\t\t\tAutoCreateUser:           pulumi.Bool(true),\n\t\t\tEmailAttribute:           pulumi.String(\"mail\"),\n\t\t\tEnabled:                  pulumi.Bool(true),\n\t\t\tKey:                      pulumi.String(\"ldap_name\"),\n\t\t\tLdapPoisoningProtection:  pulumi.Bool(true),\n\t\t\tLdapUrl:                  pulumi.String(\"ldap://ldap_server_url\"),\n\t\t\tManagerDn:                pulumi.String(\"mgr_dn\"),\n\t\t\tManagerPassword:          pulumi.String(\"mgr_passwd_random\"),\n\t\t\tPagingSupportEnabled:     pulumi.Bool(false),\n\t\t\tSearchBase:               pulumi.String(\"ou=users\"),\n\t\t\tSearchFilter:             pulumi.String(\"(uid={0})\"),\n\t\t\tSearchSubTree:            pulumi.Bool(true),\n\t\t\tUserDnPattern:            pulumi.String(\"uid={0},ou=People\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\nNote: `Key` argument has to match to the resource name.   \nReference Link: [JFrog LDAP](https://www.jfrog.com/confluence/display/JFROG/LDAP)\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nLDAP setting can be imported using the key, e.g.\n\n```sh\n $ pulumi import artifactory:index/ldapSetting:LdapSetting ldap_name ldap_name\n```\n\n ",
            "properties": {
                "allowUserToAccessProfile": {
                    "type": "boolean",
                    "description": "When set, users created after logging in using LDAP will be able to access their profile page.  Default value is `false`.\n"
                },
                "autoCreateUser": {
                    "type": "boolean",
                    "description": "When set, the system will automatically create new users for those who have logged in using LDAP, and assign them to the default groups.  Default value is `true`.\n"
                },
                "emailAttribute": {
                    "type": "string",
                    "description": "An attribute that can be used to map a user's email address to a user created automatically in Artifactory. Default value is `mail`.\n- Note: If blank/empty string input was set for email_attribute, Default value \"mail\" takes effect. This is to match with Artifactory behavior.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "When set, these settings are enabled. Default value is `true`.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The unique ID of the LDAP setting.\n"
                },
                "ldapPoisoningProtection": {
                    "type": "boolean",
                    "description": "Protects against LDAP poisoning by filtering out users exposed to vulnerabilities.  Default value is `true`.\n"
                },
                "ldapUrl": {
                    "type": "string",
                    "description": "Location of the LDAP server in the following format: ldap://myserver:myport/dc=sampledomain,dc=com. The URL should include the base DN used to search for and/or authenticate users.\n"
                },
                "managerDn": {
                    "type": "string",
                    "description": "The full DN of a user with permissions that allow querying the LDAP server. When working with LDAP Groups, the user should have permissions for any extra group attributes such as memberOf.\n"
                },
                "managerPassword": {
                    "type": "string",
                    "description": "The password of the user binding to the LDAP server when using \"search\" authentication.\n"
                },
                "pagingSupportEnabled": {
                    "type": "boolean",
                    "description": "When set, supports paging results for the LDAP server. This feature requires that the LDAP Server supports a PagedResultsControl configuration.  Default value is `true`.\n"
                },
                "searchBase": {
                    "type": "string",
                    "description": "The Context name in which to search relative to the base DN in the LDAP URL. Multiple search bases may be specified separated by a pipe ( | ).\n"
                },
                "searchFilter": {
                    "type": "string",
                    "description": "A filter expression used to search for the user DN that is used in LDAP authentication. This is an LDAP search filter (as defined in 'RFC 2254') with optional arguments. In this case, the username is the only argument, denoted by '{0}'. Possible examples are: uid={0}) - this would search for a username match on the uid attribute. Authentication using LDAP is performed from the DN found if successful.\n"
                },
                "searchSubTree": {
                    "type": "boolean",
                    "description": "When set, enables deep search through the sub-tree of the LDAP URL + Search Base.  Default value is `true`.\n"
                },
                "userDnPattern": {
                    "type": "string",
                    "description": "A DN pattern used to log users directly in to the LDAP database. This pattern is used to create a DN string for \"direct\" user authentication, and is relative to the base DN in the LDAP URL. The pattern argument {0} is replaced with the username at runtime. This only works if anonymous binding is allowed and a direct user DN can be used (which is not the default case for Active Directory). For example: uid={0},ou=People\n"
                }
            },
            "required": [
                "key",
                "ldapUrl",
                "managerPassword",
                "userDnPattern"
            ],
            "inputProperties": {
                "allowUserToAccessProfile": {
                    "type": "boolean",
                    "description": "When set, users created after logging in using LDAP will be able to access their profile page.  Default value is `false`.\n"
                },
                "autoCreateUser": {
                    "type": "boolean",
                    "description": "When set, the system will automatically create new users for those who have logged in using LDAP, and assign them to the default groups.  Default value is `true`.\n"
                },
                "emailAttribute": {
                    "type": "string",
                    "description": "An attribute that can be used to map a user's email address to a user created automatically in Artifactory. Default value is `mail`.\n- Note: If blank/empty string input was set for email_attribute, Default value \"mail\" takes effect. This is to match with Artifactory behavior.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "When set, these settings are enabled. Default value is `true`.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The unique ID of the LDAP setting.\n"
                },
                "ldapPoisoningProtection": {
                    "type": "boolean",
                    "description": "Protects against LDAP poisoning by filtering out users exposed to vulnerabilities.  Default value is `true`.\n"
                },
                "ldapUrl": {
                    "type": "string",
                    "description": "Location of the LDAP server in the following format: ldap://myserver:myport/dc=sampledomain,dc=com. The URL should include the base DN used to search for and/or authenticate users.\n"
                },
                "managerDn": {
                    "type": "string",
                    "description": "The full DN of a user with permissions that allow querying the LDAP server. When working with LDAP Groups, the user should have permissions for any extra group attributes such as memberOf.\n"
                },
                "managerPassword": {
                    "type": "string",
                    "description": "The password of the user binding to the LDAP server when using \"search\" authentication.\n"
                },
                "pagingSupportEnabled": {
                    "type": "boolean",
                    "description": "When set, supports paging results for the LDAP server. This feature requires that the LDAP Server supports a PagedResultsControl configuration.  Default value is `true`.\n"
                },
                "searchBase": {
                    "type": "string",
                    "description": "The Context name in which to search relative to the base DN in the LDAP URL. Multiple search bases may be specified separated by a pipe ( | ).\n"
                },
                "searchFilter": {
                    "type": "string",
                    "description": "A filter expression used to search for the user DN that is used in LDAP authentication. This is an LDAP search filter (as defined in 'RFC 2254') with optional arguments. In this case, the username is the only argument, denoted by '{0}'. Possible examples are: uid={0}) - this would search for a username match on the uid attribute. Authentication using LDAP is performed from the DN found if successful.\n"
                },
                "searchSubTree": {
                    "type": "boolean",
                    "description": "When set, enables deep search through the sub-tree of the LDAP URL + Search Base.  Default value is `true`.\n"
                },
                "userDnPattern": {
                    "type": "string",
                    "description": "A DN pattern used to log users directly in to the LDAP database. This pattern is used to create a DN string for \"direct\" user authentication, and is relative to the base DN in the LDAP URL. The pattern argument {0} is replaced with the username at runtime. This only works if anonymous binding is allowed and a direct user DN can be used (which is not the default case for Active Directory). For example: uid={0},ou=People\n"
                }
            },
            "requiredInputs": [
                "key",
                "ldapUrl",
                "userDnPattern"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LdapSetting resources.\n",
                "properties": {
                    "allowUserToAccessProfile": {
                        "type": "boolean",
                        "description": "When set, users created after logging in using LDAP will be able to access their profile page.  Default value is `false`.\n"
                    },
                    "autoCreateUser": {
                        "type": "boolean",
                        "description": "When set, the system will automatically create new users for those who have logged in using LDAP, and assign them to the default groups.  Default value is `true`.\n"
                    },
                    "emailAttribute": {
                        "type": "string",
                        "description": "An attribute that can be used to map a user's email address to a user created automatically in Artifactory. Default value is `mail`.\n- Note: If blank/empty string input was set for email_attribute, Default value \"mail\" takes effect. This is to match with Artifactory behavior.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "When set, these settings are enabled. Default value is `true`.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The unique ID of the LDAP setting.\n"
                    },
                    "ldapPoisoningProtection": {
                        "type": "boolean",
                        "description": "Protects against LDAP poisoning by filtering out users exposed to vulnerabilities.  Default value is `true`.\n"
                    },
                    "ldapUrl": {
                        "type": "string",
                        "description": "Location of the LDAP server in the following format: ldap://myserver:myport/dc=sampledomain,dc=com. The URL should include the base DN used to search for and/or authenticate users.\n"
                    },
                    "managerDn": {
                        "type": "string",
                        "description": "The full DN of a user with permissions that allow querying the LDAP server. When working with LDAP Groups, the user should have permissions for any extra group attributes such as memberOf.\n"
                    },
                    "managerPassword": {
                        "type": "string",
                        "description": "The password of the user binding to the LDAP server when using \"search\" authentication.\n"
                    },
                    "pagingSupportEnabled": {
                        "type": "boolean",
                        "description": "When set, supports paging results for the LDAP server. This feature requires that the LDAP Server supports a PagedResultsControl configuration.  Default value is `true`.\n"
                    },
                    "searchBase": {
                        "type": "string",
                        "description": "The Context name in which to search relative to the base DN in the LDAP URL. Multiple search bases may be specified separated by a pipe ( | ).\n"
                    },
                    "searchFilter": {
                        "type": "string",
                        "description": "A filter expression used to search for the user DN that is used in LDAP authentication. This is an LDAP search filter (as defined in 'RFC 2254') with optional arguments. In this case, the username is the only argument, denoted by '{0}'. Possible examples are: uid={0}) - this would search for a username match on the uid attribute. Authentication using LDAP is performed from the DN found if successful.\n"
                    },
                    "searchSubTree": {
                        "type": "boolean",
                        "description": "When set, enables deep search through the sub-tree of the LDAP URL + Search Base.  Default value is `true`.\n"
                    },
                    "userDnPattern": {
                        "type": "string",
                        "description": "A DN pattern used to log users directly in to the LDAP database. This pattern is used to create a DN string for \"direct\" user authentication, and is relative to the base DN in the LDAP URL. The pattern argument {0} is replaced with the username at runtime. This only works if anonymous binding is allowed and a direct user DN can be used (which is not the default case for Active Directory). For example: uid={0},ou=People\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/localBowerRepository:LocalBowerRepository": {
            "description": "## # Artifactory Local Bower Repository Resource\n\nCreates a local bower repository. \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_local_test_bower_repo = new artifactory.LocalBowerRepository(\"terraform-local-test-bower-repo\", {\n    key: \"terraform-local-test-bower-repo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_local_test_bower_repo = artifactory.LocalBowerRepository(\"terraform-local-test-bower-repo\", key=\"terraform-local-test-bower-repo\")\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_local_test_bower_repo = new Artifactory.LocalBowerRepository(\"terraform-local-test-bower-repo\", new Artifactory.LocalBowerRepositoryArgs\n        {\n            Key = \"terraform-local-test-bower-repo\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewLocalBowerRepository(ctx, \"terraform-local-test-bower-repo\", \u0026artifactory.LocalBowerRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-local-test-bower-repo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LocalBowerRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/localChefRepository:LocalChefRepository": {
            "description": "## # Artifactory Local Chef Repository Resource\n\nCreates a local chef repository. \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_local_test_chef_repo = new artifactory.LocalChefRepository(\"terraform-local-test-chef-repo\", {\n    key: \"terraform-local-test-chef-repo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_local_test_chef_repo = artifactory.LocalChefRepository(\"terraform-local-test-chef-repo\", key=\"terraform-local-test-chef-repo\")\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_local_test_chef_repo = new Artifactory.LocalChefRepository(\"terraform-local-test-chef-repo\", new Artifactory.LocalChefRepositoryArgs\n        {\n            Key = \"terraform-local-test-chef-repo\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewLocalChefRepository(ctx, \"terraform-local-test-chef-repo\", \u0026artifactory.LocalChefRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-local-test-chef-repo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LocalChefRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/localCocoapodsRepository:LocalCocoapodsRepository": {
            "description": "## # Artifactory Local Cocoapods Repository Resource\n\nCreates a local cocoapods repository. \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_local_test_cocoapods_repo = new artifactory.LocalCocoapodsRepository(\"terraform-local-test-cocoapods-repo\", {\n    key: \"terraform-local-test-cocoapods-repo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_local_test_cocoapods_repo = artifactory.LocalCocoapodsRepository(\"terraform-local-test-cocoapods-repo\", key=\"terraform-local-test-cocoapods-repo\")\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_local_test_cocoapods_repo = new Artifactory.LocalCocoapodsRepository(\"terraform-local-test-cocoapods-repo\", new Artifactory.LocalCocoapodsRepositoryArgs\n        {\n            Key = \"terraform-local-test-cocoapods-repo\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewLocalCocoapodsRepository(ctx, \"terraform-local-test-cocoapods-repo\", \u0026artifactory.LocalCocoapodsRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-local-test-cocoapods-repo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LocalCocoapodsRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/localComposerRepository:LocalComposerRepository": {
            "description": "## # Artifactory Local Php-Composer Repository Resource\n\nCreates a local composer repository. \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_local_test_composer_repo = new artifactory.LocalComposerRepository(\"terraform-local-test-composer-repo\", {\n    key: \"terraform-local-test-composer-repo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_local_test_composer_repo = artifactory.LocalComposerRepository(\"terraform-local-test-composer-repo\", key=\"terraform-local-test-composer-repo\")\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_local_test_composer_repo = new Artifactory.LocalComposerRepository(\"terraform-local-test-composer-repo\", new Artifactory.LocalComposerRepositoryArgs\n        {\n            Key = \"terraform-local-test-composer-repo\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewLocalComposerRepository(ctx, \"terraform-local-test-composer-repo\", \u0026artifactory.LocalComposerRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-local-test-composer-repo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LocalComposerRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/localConanRepository:LocalConanRepository": {
            "description": "## # Artifactory Local Conan Repository Resource\n\nCreates a local conan repository. \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_local_test_conan_repo = new artifactory.LocalConanRepository(\"terraform-local-test-conan-repo\", {\n    key: \"terraform-local-test-conan-repo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_local_test_conan_repo = artifactory.LocalConanRepository(\"terraform-local-test-conan-repo\", key=\"terraform-local-test-conan-repo\")\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_local_test_conan_repo = new Artifactory.LocalConanRepository(\"terraform-local-test-conan-repo\", new Artifactory.LocalConanRepositoryArgs\n        {\n            Key = \"terraform-local-test-conan-repo\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewLocalConanRepository(ctx, \"terraform-local-test-conan-repo\", \u0026artifactory.LocalConanRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-local-test-conan-repo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LocalConanRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/localCranRepository:LocalCranRepository": {
            "description": "## # Artifactory Local Cran Repository Resource\n\nCreates a local cran repository. \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_local_test_cran_repo = new artifactory.LocalCranRepository(\"terraform-local-test-cran-repo\", {\n    key: \"terraform-local-test-cran-repo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_local_test_cran_repo = artifactory.LocalCranRepository(\"terraform-local-test-cran-repo\", key=\"terraform-local-test-cran-repo\")\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_local_test_cran_repo = new Artifactory.LocalCranRepository(\"terraform-local-test-cran-repo\", new Artifactory.LocalCranRepositoryArgs\n        {\n            Key = \"terraform-local-test-cran-repo\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewLocalCranRepository(ctx, \"terraform-local-test-cran-repo\", \u0026artifactory.LocalCranRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-local-test-cran-repo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LocalCranRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/localGemsRepository:LocalGemsRepository": {
            "description": "## # Artifactory Local Gems Repository Resource\n\nCreates a local gems repository. \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_local_test_gems_repo = new artifactory.LocalGemsRepository(\"terraform-local-test-gems-repo\", {\n    key: \"terraform-local-test-gems-repo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_local_test_gems_repo = artifactory.LocalGemsRepository(\"terraform-local-test-gems-repo\", key=\"terraform-local-test-gems-repo\")\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_local_test_gems_repo = new Artifactory.LocalGemsRepository(\"terraform-local-test-gems-repo\", new Artifactory.LocalGemsRepositoryArgs\n        {\n            Key = \"terraform-local-test-gems-repo\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewLocalGemsRepository(ctx, \"terraform-local-test-gems-repo\", \u0026artifactory.LocalGemsRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-local-test-gems-repo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LocalGemsRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/localGenericRepository:LocalGenericRepository": {
            "description": "## # Artifactory Local Generic Repository Resource\n\nCreates a local generic repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_local_test_generic_repo = new artifactory.LocalGenericRepository(\"terraform-local-test-generic-repo\", {\n    key: \"terraform-local-test-generic-repo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_local_test_generic_repo = artifactory.LocalGenericRepository(\"terraform-local-test-generic-repo\", key=\"terraform-local-test-generic-repo\")\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_local_test_generic_repo = new Artifactory.LocalGenericRepository(\"terraform-local-test-generic-repo\", new Artifactory.LocalGenericRepositoryArgs\n        {\n            Key = \"terraform-local-test-generic-repo\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewLocalGenericRepository(ctx, \"terraform-local-test-generic-repo\", \u0026artifactory.LocalGenericRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-local-test-generic-repo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.\n"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LocalGenericRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/localGitltfsRepository:LocalGitltfsRepository": {
            "description": "## # Artifactory Local Gitlfs Repository Resource\n\nCreates a local gitlfs repository. \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_local_test_gitlfs_repo = new artifactory.LocalGitltfsRepository(\"terraform-local-test-gitlfs-repo\", {\n    key: \"terraform-local-test-gitlfs-repo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_local_test_gitlfs_repo = artifactory.LocalGitltfsRepository(\"terraform-local-test-gitlfs-repo\", key=\"terraform-local-test-gitlfs-repo\")\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_local_test_gitlfs_repo = new Artifactory.LocalGitltfsRepository(\"terraform-local-test-gitlfs-repo\", new Artifactory.LocalGitltfsRepositoryArgs\n        {\n            Key = \"terraform-local-test-gitlfs-repo\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewLocalGitltfsRepository(ctx, \"terraform-local-test-gitlfs-repo\", \u0026artifactory.LocalGitltfsRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-local-test-gitlfs-repo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LocalGitltfsRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/localGoRepository:LocalGoRepository": {
            "description": "## # Artifactory Local Go Repository Resource\n\nCreates a local go repository. \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_local_test_go_repo = new artifactory.LocalGoRepository(\"terraform-local-test-go-repo\", {\n    key: \"terraform-local-test-go-repo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_local_test_go_repo = artifactory.LocalGoRepository(\"terraform-local-test-go-repo\", key=\"terraform-local-test-go-repo\")\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_local_test_go_repo = new Artifactory.LocalGoRepository(\"terraform-local-test-go-repo\", new Artifactory.LocalGoRepositoryArgs\n        {\n            Key = \"terraform-local-test-go-repo\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewLocalGoRepository(ctx, \"terraform-local-test-go-repo\", \u0026artifactory.LocalGoRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-local-test-go-repo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LocalGoRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/localGradleRepository:LocalGradleRepository": {
            "description": "## # Artifactory Local Gradle Repository Resource\n\nCreates a local Gradle repository and allows for the creation of a \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_local_test_gradle_repo_basic = new artifactory.LocalGradleRepository(\"terraform-local-test-gradle-repo-basic\", {\n    checksumPolicyType: \"client-checksums\",\n    handleReleases: true,\n    handleSnapshots: true,\n    key: \"terraform-local-test-gradle-repo-basic\",\n    maxUniqueSnapshots: 10,\n    snapshotVersionBehavior: \"unique\",\n    suppressPomConsistencyChecks: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_local_test_gradle_repo_basic = artifactory.LocalGradleRepository(\"terraform-local-test-gradle-repo-basic\",\n    checksum_policy_type=\"client-checksums\",\n    handle_releases=True,\n    handle_snapshots=True,\n    key=\"terraform-local-test-gradle-repo-basic\",\n    max_unique_snapshots=10,\n    snapshot_version_behavior=\"unique\",\n    suppress_pom_consistency_checks=True)\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_local_test_gradle_repo_basic = new Artifactory.LocalGradleRepository(\"terraform-local-test-gradle-repo-basic\", new Artifactory.LocalGradleRepositoryArgs\n        {\n            ChecksumPolicyType = \"client-checksums\",\n            HandleReleases = true,\n            HandleSnapshots = true,\n            Key = \"terraform-local-test-gradle-repo-basic\",\n            MaxUniqueSnapshots = 10,\n            SnapshotVersionBehavior = \"unique\",\n            SuppressPomConsistencyChecks = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewLocalGradleRepository(ctx, \"terraform-local-test-gradle-repo-basic\", \u0026artifactory.LocalGradleRepositoryArgs{\n\t\t\tChecksumPolicyType:           pulumi.String(\"client-checksums\"),\n\t\t\tHandleReleases:               pulumi.Bool(true),\n\t\t\tHandleSnapshots:              pulumi.Bool(true),\n\t\t\tKey:                          pulumi.String(\"terraform-local-test-gradle-repo-basic\"),\n\t\t\tMaxUniqueSnapshots:           pulumi.Int(10),\n\t\t\tSnapshotVersionBehavior:      pulumi.String(\"unique\"),\n\t\t\tSuppressPomConsistencyChecks: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "checksumPolicyType": {
                    "type": "string",
                    "description": "- Checksum policy determines how Artifactory behaves when a client checksum for a deployed\n\"resource is missing or conflicts with the locally calculated checksum (bad checksum). For more details,\n\"please refer to [Checksum Policy](https://www.jfrog.com/confluence/display/JFROG/Local+Repositories#LocalRepositories-ChecksumPolicy)\n"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "handleReleases": {
                    "type": "boolean",
                    "description": "If set, Artifactory allows you to deploy release artifacts into this repository.\n"
                },
                "handleSnapshots": {
                    "type": "boolean",
                    "description": "If set, Artifactory allows you to deploy snapshot artifacts into this repository.\n"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "maxUniqueSnapshots": {
                    "type": "integer",
                    "description": "- The maximum number of unique snapshots of a single artifact to store.\nOnce the number of snapshots exceeds this setting, older versions are removed.\nA value of 0 (default) indicates there is no limit, and unique snapshots are not cleaned up.\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "snapshotVersionBehavior": {
                    "type": "string",
                    "description": "Specifies the naming convention for Maven SNAPSHOT versions.\nThe options are -\nUnique: Version number is based on a time-stamp (default)\nNon-unique: Version number uses a self-overriding naming pattern of artifactId-version-SNAPSHOT.type\nDeployer: Respects the settings in the Maven client that is deploying the artifact.\n"
                },
                "suppressPomConsistencyChecks": {
                    "type": "boolean",
                    "description": "By default, Artifactory keeps your repositories healthy by refusing POMs with incorrect coordinates (path).\nIf the groupId:artifactId:version information inside the POM does not match the deployed path, Artifactory rejects the deployment with a \"409 Conflict\" error.\nYou can disable this behavior by setting the Suppress POM Consistency Checks checkbox. True by default for Gradle repository.\n"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "checksumPolicyType": {
                    "type": "string",
                    "description": "- Checksum policy determines how Artifactory behaves when a client checksum for a deployed\n\"resource is missing or conflicts with the locally calculated checksum (bad checksum). For more details,\n\"please refer to [Checksum Policy](https://www.jfrog.com/confluence/display/JFROG/Local+Repositories#LocalRepositories-ChecksumPolicy)\n"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "handleReleases": {
                    "type": "boolean",
                    "description": "If set, Artifactory allows you to deploy release artifacts into this repository.\n"
                },
                "handleSnapshots": {
                    "type": "boolean",
                    "description": "If set, Artifactory allows you to deploy snapshot artifacts into this repository.\n"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "maxUniqueSnapshots": {
                    "type": "integer",
                    "description": "- The maximum number of unique snapshots of a single artifact to store.\nOnce the number of snapshots exceeds this setting, older versions are removed.\nA value of 0 (default) indicates there is no limit, and unique snapshots are not cleaned up.\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "snapshotVersionBehavior": {
                    "type": "string",
                    "description": "Specifies the naming convention for Maven SNAPSHOT versions.\nThe options are -\nUnique: Version number is based on a time-stamp (default)\nNon-unique: Version number uses a self-overriding naming pattern of artifactId-version-SNAPSHOT.type\nDeployer: Respects the settings in the Maven client that is deploying the artifact.\n"
                },
                "suppressPomConsistencyChecks": {
                    "type": "boolean",
                    "description": "By default, Artifactory keeps your repositories healthy by refusing POMs with incorrect coordinates (path).\nIf the groupId:artifactId:version information inside the POM does not match the deployed path, Artifactory rejects the deployment with a \"409 Conflict\" error.\nYou can disable this behavior by setting the Suppress POM Consistency Checks checkbox. True by default for Gradle repository.\n"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LocalGradleRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "checksumPolicyType": {
                        "type": "string",
                        "description": "- Checksum policy determines how Artifactory behaves when a client checksum for a deployed\n\"resource is missing or conflicts with the locally calculated checksum (bad checksum). For more details,\n\"please refer to [Checksum Policy](https://www.jfrog.com/confluence/display/JFROG/Local+Repositories#LocalRepositories-ChecksumPolicy)\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "handleReleases": {
                        "type": "boolean",
                        "description": "If set, Artifactory allows you to deploy release artifacts into this repository.\n"
                    },
                    "handleSnapshots": {
                        "type": "boolean",
                        "description": "If set, Artifactory allows you to deploy snapshot artifacts into this repository.\n"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "maxUniqueSnapshots": {
                        "type": "integer",
                        "description": "- The maximum number of unique snapshots of a single artifact to store.\nOnce the number of snapshots exceeds this setting, older versions are removed.\nA value of 0 (default) indicates there is no limit, and unique snapshots are not cleaned up.\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "snapshotVersionBehavior": {
                        "type": "string",
                        "description": "Specifies the naming convention for Maven SNAPSHOT versions.\nThe options are -\nUnique: Version number is based on a time-stamp (default)\nNon-unique: Version number uses a self-overriding naming pattern of artifactId-version-SNAPSHOT.type\nDeployer: Respects the settings in the Maven client that is deploying the artifact.\n"
                    },
                    "suppressPomConsistencyChecks": {
                        "type": "boolean",
                        "description": "By default, Artifactory keeps your repositories healthy by refusing POMs with incorrect coordinates (path).\nIf the groupId:artifactId:version information inside the POM does not match the deployed path, Artifactory rejects the deployment with a \"409 Conflict\" error.\nYou can disable this behavior by setting the Suppress POM Consistency Checks checkbox. True by default for Gradle repository.\n"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/localHelmRepository:LocalHelmRepository": {
            "description": "## # Artifactory Local Helm Repository Resource\n\nCreates a local helm repository. \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_local_test_helm_repo = new artifactory.LocalHelmRepository(\"terraform-local-test-helm-repo\", {\n    key: \"terraform-local-test-helm-repo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_local_test_helm_repo = artifactory.LocalHelmRepository(\"terraform-local-test-helm-repo\", key=\"terraform-local-test-helm-repo\")\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_local_test_helm_repo = new Artifactory.LocalHelmRepository(\"terraform-local-test-helm-repo\", new Artifactory.LocalHelmRepositoryArgs\n        {\n            Key = \"terraform-local-test-helm-repo\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewLocalHelmRepository(ctx, \"terraform-local-test-helm-repo\", \u0026artifactory.LocalHelmRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-local-test-helm-repo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LocalHelmRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/localIvyRepository:LocalIvyRepository": {
            "description": "## # Artifactory Local Ivy Repository Resource\n\nCreates a local ivy repository. \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_local_test_ivy_repo = new artifactory.LocalIvyRepository(\"terraform-local-test-ivy-repo\", {\n    key: \"terraform-local-test-ivy-repo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_local_test_ivy_repo = artifactory.LocalIvyRepository(\"terraform-local-test-ivy-repo\", key=\"terraform-local-test-ivy-repo\")\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_local_test_ivy_repo = new Artifactory.LocalIvyRepository(\"terraform-local-test-ivy-repo\", new Artifactory.LocalIvyRepositoryArgs\n        {\n            Key = \"terraform-local-test-ivy-repo\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewLocalIvyRepository(ctx, \"terraform-local-test-ivy-repo\", \u0026artifactory.LocalIvyRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-local-test-ivy-repo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LocalIvyRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/localMavenRepository:LocalMavenRepository": {
            "description": "## # Artifactory Local Gradle Repository Resource\n\nCreates a local Maven repository and allows for the creation of a \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_local_test_maven_repo_basic = new artifactory.LocalMavenRepository(\"terraform-local-test-maven-repo-basic\", {\n    checksumPolicyType: \"client-checksums\",\n    handleReleases: true,\n    handleSnapshots: true,\n    key: \"terraform-local-test-maven-repo-basic\",\n    maxUniqueSnapshots: 10,\n    snapshotVersionBehavior: \"unique\",\n    suppressPomConsistencyChecks: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_local_test_maven_repo_basic = artifactory.LocalMavenRepository(\"terraform-local-test-maven-repo-basic\",\n    checksum_policy_type=\"client-checksums\",\n    handle_releases=True,\n    handle_snapshots=True,\n    key=\"terraform-local-test-maven-repo-basic\",\n    max_unique_snapshots=10,\n    snapshot_version_behavior=\"unique\",\n    suppress_pom_consistency_checks=False)\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_local_test_maven_repo_basic = new Artifactory.LocalMavenRepository(\"terraform-local-test-maven-repo-basic\", new Artifactory.LocalMavenRepositoryArgs\n        {\n            ChecksumPolicyType = \"client-checksums\",\n            HandleReleases = true,\n            HandleSnapshots = true,\n            Key = \"terraform-local-test-maven-repo-basic\",\n            MaxUniqueSnapshots = 10,\n            SnapshotVersionBehavior = \"unique\",\n            SuppressPomConsistencyChecks = false,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewLocalMavenRepository(ctx, \"terraform-local-test-maven-repo-basic\", \u0026artifactory.LocalMavenRepositoryArgs{\n\t\t\tChecksumPolicyType:           pulumi.String(\"client-checksums\"),\n\t\t\tHandleReleases:               pulumi.Bool(true),\n\t\t\tHandleSnapshots:              pulumi.Bool(true),\n\t\t\tKey:                          pulumi.String(\"terraform-local-test-maven-repo-basic\"),\n\t\t\tMaxUniqueSnapshots:           pulumi.Int(10),\n\t\t\tSnapshotVersionBehavior:      pulumi.String(\"unique\"),\n\t\t\tSuppressPomConsistencyChecks: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "checksumPolicyType": {
                    "type": "string",
                    "description": "- Checksum policy determines how Artifactory behaves when a client checksum for a deployed\n\"resource is missing or conflicts with the locally calculated checksum (bad checksum). For more details,\n\"please refer to [Checksum Policy](https://www.jfrog.com/confluence/display/JFROG/Local+Repositories#LocalRepositories-ChecksumPolicy)\n"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "handleReleases": {
                    "type": "boolean",
                    "description": "If set, Artifactory allows you to deploy release artifacts into this repository.\n"
                },
                "handleSnapshots": {
                    "type": "boolean",
                    "description": "If set, Artifactory allows you to deploy snapshot artifacts into this repository.\n"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "maxUniqueSnapshots": {
                    "type": "integer",
                    "description": "- The maximum number of unique snapshots of a single artifact to store.\nOnce the number of snapshots exceeds this setting, older versions are removed.\nA value of 0 (default) indicates there is no limit, and unique snapshots are not cleaned up.\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "snapshotVersionBehavior": {
                    "type": "string",
                    "description": "Specifies the naming convention for Maven SNAPSHOT versions.\nThe options are -\nUnique: Version number is based on a time-stamp (default)\nNon-unique: Version number uses a self-overriding naming pattern of artifactId-version-SNAPSHOT.type\nDeployer: Respects the settings in the Maven client that is deploying the artifact.\n"
                },
                "suppressPomConsistencyChecks": {
                    "type": "boolean",
                    "description": "By default, Artifactory keeps your repositories healthy by refusing POMs with incorrect coordinates (path).\nIf the groupId:artifactId:version information inside the POM does not match the deployed path, Artifactory rejects the deployment with a \"409 Conflict\" error.\nYou can disable this behavior by setting the Suppress POM Consistency Checks checkbox. False by default for Maven repository\n"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "checksumPolicyType": {
                    "type": "string",
                    "description": "- Checksum policy determines how Artifactory behaves when a client checksum for a deployed\n\"resource is missing or conflicts with the locally calculated checksum (bad checksum). For more details,\n\"please refer to [Checksum Policy](https://www.jfrog.com/confluence/display/JFROG/Local+Repositories#LocalRepositories-ChecksumPolicy)\n"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "handleReleases": {
                    "type": "boolean",
                    "description": "If set, Artifactory allows you to deploy release artifacts into this repository.\n"
                },
                "handleSnapshots": {
                    "type": "boolean",
                    "description": "If set, Artifactory allows you to deploy snapshot artifacts into this repository.\n"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "maxUniqueSnapshots": {
                    "type": "integer",
                    "description": "- The maximum number of unique snapshots of a single artifact to store.\nOnce the number of snapshots exceeds this setting, older versions are removed.\nA value of 0 (default) indicates there is no limit, and unique snapshots are not cleaned up.\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "snapshotVersionBehavior": {
                    "type": "string",
                    "description": "Specifies the naming convention for Maven SNAPSHOT versions.\nThe options are -\nUnique: Version number is based on a time-stamp (default)\nNon-unique: Version number uses a self-overriding naming pattern of artifactId-version-SNAPSHOT.type\nDeployer: Respects the settings in the Maven client that is deploying the artifact.\n"
                },
                "suppressPomConsistencyChecks": {
                    "type": "boolean",
                    "description": "By default, Artifactory keeps your repositories healthy by refusing POMs with incorrect coordinates (path).\nIf the groupId:artifactId:version information inside the POM does not match the deployed path, Artifactory rejects the deployment with a \"409 Conflict\" error.\nYou can disable this behavior by setting the Suppress POM Consistency Checks checkbox. False by default for Maven repository\n"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LocalMavenRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "checksumPolicyType": {
                        "type": "string",
                        "description": "- Checksum policy determines how Artifactory behaves when a client checksum for a deployed\n\"resource is missing or conflicts with the locally calculated checksum (bad checksum). For more details,\n\"please refer to [Checksum Policy](https://www.jfrog.com/confluence/display/JFROG/Local+Repositories#LocalRepositories-ChecksumPolicy)\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "handleReleases": {
                        "type": "boolean",
                        "description": "If set, Artifactory allows you to deploy release artifacts into this repository.\n"
                    },
                    "handleSnapshots": {
                        "type": "boolean",
                        "description": "If set, Artifactory allows you to deploy snapshot artifacts into this repository.\n"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "maxUniqueSnapshots": {
                        "type": "integer",
                        "description": "- The maximum number of unique snapshots of a single artifact to store.\nOnce the number of snapshots exceeds this setting, older versions are removed.\nA value of 0 (default) indicates there is no limit, and unique snapshots are not cleaned up.\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "snapshotVersionBehavior": {
                        "type": "string",
                        "description": "Specifies the naming convention for Maven SNAPSHOT versions.\nThe options are -\nUnique: Version number is based on a time-stamp (default)\nNon-unique: Version number uses a self-overriding naming pattern of artifactId-version-SNAPSHOT.type\nDeployer: Respects the settings in the Maven client that is deploying the artifact.\n"
                    },
                    "suppressPomConsistencyChecks": {
                        "type": "boolean",
                        "description": "By default, Artifactory keeps your repositories healthy by refusing POMs with incorrect coordinates (path).\nIf the groupId:artifactId:version information inside the POM does not match the deployed path, Artifactory rejects the deployment with a \"409 Conflict\" error.\nYou can disable this behavior by setting the Suppress POM Consistency Checks checkbox. False by default for Maven repository\n"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/localNpmRepository:LocalNpmRepository": {
            "description": "## # Artifactory Local NPM Repository Resource\n\nCreates a local npm repository. \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_local_test_npm_repo = new artifactory.LocalNpmRepository(\"terraform-local-test-npm-repo\", {\n    key: \"terraform-local-test-npm-repo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_local_test_npm_repo = artifactory.LocalNpmRepository(\"terraform-local-test-npm-repo\", key=\"terraform-local-test-npm-repo\")\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_local_test_npm_repo = new Artifactory.LocalNpmRepository(\"terraform-local-test-npm-repo\", new Artifactory.LocalNpmRepositoryArgs\n        {\n            Key = \"terraform-local-test-npm-repo\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewLocalNpmRepository(ctx, \"terraform-local-test-npm-repo\", \u0026artifactory.LocalNpmRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-local-test-npm-repo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LocalNpmRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/localNugetRepository:LocalNugetRepository": {
            "description": "## # Artifactory Local Nuget Repository Resource\n\nCreates a local Nuget repository and allows for the creation of a \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_local_test_nuget_repo_basic = new artifactory.LocalNugetRepository(\"terraform-local-test-nuget-repo-basic\", {\n    forceNugetAuthentication: true,\n    key: \"terraform-local-test-nuget-repo-basic\",\n    maxUniqueSnapshots: 5,\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_local_test_nuget_repo_basic = artifactory.LocalNugetRepository(\"terraform-local-test-nuget-repo-basic\",\n    force_nuget_authentication=True,\n    key=\"terraform-local-test-nuget-repo-basic\",\n    max_unique_snapshots=5)\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_local_test_nuget_repo_basic = new Artifactory.LocalNugetRepository(\"terraform-local-test-nuget-repo-basic\", new Artifactory.LocalNugetRepositoryArgs\n        {\n            ForceNugetAuthentication = true,\n            Key = \"terraform-local-test-nuget-repo-basic\",\n            MaxUniqueSnapshots = 5,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewLocalNugetRepository(ctx, \"terraform-local-test-nuget-repo-basic\", \u0026artifactory.LocalNugetRepositoryArgs{\n\t\t\tForceNugetAuthentication: pulumi.Bool(true),\n\t\t\tKey:                      pulumi.String(\"terraform-local-test-nuget-repo-basic\"),\n\t\t\tMaxUniqueSnapshots:       pulumi.Int(5),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "forceNugetAuthentication": {
                    "type": "boolean",
                    "description": "- Force basic authentication credentials in order to use this repository.\n"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "maxUniqueSnapshots": {
                    "type": "integer",
                    "description": "- The maximum number of unique snapshots of a single artifact to store.\nOnce the number of snapshots exceeds this setting, older versions are removed.\nA value of 0 (default) indicates there is no limit, and unique snapshots are not cleaned up.\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "forceNugetAuthentication": {
                    "type": "boolean",
                    "description": "- Force basic authentication credentials in order to use this repository.\n"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "maxUniqueSnapshots": {
                    "type": "integer",
                    "description": "- The maximum number of unique snapshots of a single artifact to store.\nOnce the number of snapshots exceeds this setting, older versions are removed.\nA value of 0 (default) indicates there is no limit, and unique snapshots are not cleaned up.\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LocalNugetRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "forceNugetAuthentication": {
                        "type": "boolean",
                        "description": "- Force basic authentication credentials in order to use this repository.\n"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "maxUniqueSnapshots": {
                        "type": "integer",
                        "description": "- The maximum number of unique snapshots of a single artifact to store.\nOnce the number of snapshots exceeds this setting, older versions are removed.\nA value of 0 (default) indicates there is no limit, and unique snapshots are not cleaned up.\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/localOpkgRepository:LocalOpkgRepository": {
            "description": "## # Artifactory Local Opkg Repository Resource\n\nCreates a local opkg repository. \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_local_test_opkg_repo = new artifactory.LocalOpkgRepository(\"terraform-local-test-opkg-repo\", {\n    key: \"terraform-local-test-opkg-repo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_local_test_opkg_repo = artifactory.LocalOpkgRepository(\"terraform-local-test-opkg-repo\", key=\"terraform-local-test-opkg-repo\")\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_local_test_opkg_repo = new Artifactory.LocalOpkgRepository(\"terraform-local-test-opkg-repo\", new Artifactory.LocalOpkgRepositoryArgs\n        {\n            Key = \"terraform-local-test-opkg-repo\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewLocalOpkgRepository(ctx, \"terraform-local-test-opkg-repo\", \u0026artifactory.LocalOpkgRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-local-test-opkg-repo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LocalOpkgRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/localPuppetRepository:LocalPuppetRepository": {
            "description": "## # Artifactory Local Puppet Repository Resource\n\nCreates a local puppet repository. \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_local_test_puppet_repo = new artifactory.LocalPuppetRepository(\"terraform-local-test-puppet-repo\", {\n    key: \"terraform-local-test-puppet-repo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_local_test_puppet_repo = artifactory.LocalPuppetRepository(\"terraform-local-test-puppet-repo\", key=\"terraform-local-test-puppet-repo\")\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_local_test_puppet_repo = new Artifactory.LocalPuppetRepository(\"terraform-local-test-puppet-repo\", new Artifactory.LocalPuppetRepositoryArgs\n        {\n            Key = \"terraform-local-test-puppet-repo\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewLocalPuppetRepository(ctx, \"terraform-local-test-puppet-repo\", \u0026artifactory.LocalPuppetRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-local-test-puppet-repo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LocalPuppetRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/localPypiRepository:LocalPypiRepository": {
            "description": "## # Artifactory Local Pypi Repository Resource\n\nCreates a local pypi repository. \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_local_test_pypi_repo = new artifactory.LocalPypiRepository(\"terraform-local-test-pypi-repo\", {\n    key: \"terraform-local-test-pypi-repo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_local_test_pypi_repo = artifactory.LocalPypiRepository(\"terraform-local-test-pypi-repo\", key=\"terraform-local-test-pypi-repo\")\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_local_test_pypi_repo = new Artifactory.LocalPypiRepository(\"terraform-local-test-pypi-repo\", new Artifactory.LocalPypiRepositoryArgs\n        {\n            Key = \"terraform-local-test-pypi-repo\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewLocalPypiRepository(ctx, \"terraform-local-test-pypi-repo\", \u0026artifactory.LocalPypiRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-local-test-pypi-repo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LocalPypiRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/localRepository:LocalRepository": {
            "description": "## # Artifactory Local Repository Resource\n\nProvides an Artifactory local repository resource. This can be used to create and manage Artifactory local repositories.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\n// Create a new Artifactory local repository called my-local\nconst my_local = new artifactory.LocalRepository(\"my-local\", {\n    key: \"my-local\",\n    packageType: \"npm\",\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\n# Create a new Artifactory local repository called my-local\nmy_local = artifactory.LocalRepository(\"my-local\",\n    key=\"my-local\",\n    package_type=\"npm\")\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new Artifactory local repository called my-local\n        var my_local = new Artifactory.LocalRepository(\"my-local\", new Artifactory.LocalRepositoryArgs\n        {\n            Key = \"my-local\",\n            PackageType = \"npm\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewLocalRepository(ctx, \"my-local\", \u0026artifactory.LocalRepositoryArgs{\n\t\t\tKey:         pulumi.String(\"my-local\"),\n\t\t\tPackageType: pulumi.String(\"npm\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nLocal repositories can be imported using their name, e.g.\n\n```sh\n $ pulumi import artifactory:index/localRepository:LocalRepository my-local my-local\n```\n\n ",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "calculateYumMetadata": {
                    "type": "boolean"
                },
                "checksumPolicyType": {
                    "type": "string"
                },
                "debianTrivialLayout": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "dockerApiVersion": {
                    "type": "string"
                },
                "enableFileListsIndexing": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "forceNugetAuthentication": {
                    "type": "boolean"
                },
                "handleReleases": {
                    "type": "boolean"
                },
                "handleSnapshots": {
                    "type": "boolean"
                },
                "includesPattern": {
                    "type": "string"
                },
                "indexCompressionFormats": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "key": {
                    "type": "string"
                },
                "maxUniqueSnapshots": {
                    "type": "integer"
                },
                "maxUniqueTags": {
                    "type": "integer"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "snapshotVersionBehavior": {
                    "type": "string"
                },
                "suppressPomConsistencyChecks": {
                    "type": "boolean"
                },
                "xrayIndex": {
                    "type": "boolean"
                },
                "yumRootDepth": {
                    "type": "integer"
                }
            },
            "required": [
                "blackedOut",
                "checksumPolicyType",
                "dockerApiVersion",
                "enableFileListsIndexing",
                "excludesPattern",
                "forceNugetAuthentication",
                "handleReleases",
                "handleSnapshots",
                "includesPattern",
                "key",
                "maxUniqueSnapshots",
                "maxUniqueTags",
                "packageType",
                "repoLayoutRef",
                "snapshotVersionBehavior",
                "suppressPomConsistencyChecks",
                "xrayIndex"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "calculateYumMetadata": {
                    "type": "boolean"
                },
                "checksumPolicyType": {
                    "type": "string"
                },
                "debianTrivialLayout": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "dockerApiVersion": {
                    "type": "string"
                },
                "enableFileListsIndexing": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "forceNugetAuthentication": {
                    "type": "boolean"
                },
                "handleReleases": {
                    "type": "boolean"
                },
                "handleSnapshots": {
                    "type": "boolean"
                },
                "includesPattern": {
                    "type": "string"
                },
                "indexCompressionFormats": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "key": {
                    "type": "string"
                },
                "maxUniqueSnapshots": {
                    "type": "integer"
                },
                "maxUniqueTags": {
                    "type": "integer"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "snapshotVersionBehavior": {
                    "type": "string"
                },
                "suppressPomConsistencyChecks": {
                    "type": "boolean"
                },
                "xrayIndex": {
                    "type": "boolean"
                },
                "yumRootDepth": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LocalRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "calculateYumMetadata": {
                        "type": "boolean"
                    },
                    "checksumPolicyType": {
                        "type": "string"
                    },
                    "debianTrivialLayout": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "dockerApiVersion": {
                        "type": "string"
                    },
                    "enableFileListsIndexing": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "forceNugetAuthentication": {
                        "type": "boolean"
                    },
                    "handleReleases": {
                        "type": "boolean"
                    },
                    "handleSnapshots": {
                        "type": "boolean"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "indexCompressionFormats": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "key": {
                        "type": "string"
                    },
                    "maxUniqueSnapshots": {
                        "type": "integer"
                    },
                    "maxUniqueTags": {
                        "type": "integer"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "snapshotVersionBehavior": {
                        "type": "string"
                    },
                    "suppressPomConsistencyChecks": {
                        "type": "boolean"
                    },
                    "xrayIndex": {
                        "type": "boolean"
                    },
                    "yumRootDepth": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/localRpmRepository:LocalRpmRepository": {
            "description": "## # Artifactory Local RPM Repository Resource\n\nCreates a local RPM repository\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_local_test_rpm_repo_basic = new artifactory.LocalRpmRepository(\"terraform-local-test-rpm-repo-basic\", {\n    calculateYumMetadata: true,\n    enableFileListsIndexing: true,\n    key: \"terraform-local-test-rpm-repo-basic\",\n    yumGroupFileNames: \"file-1.xml,file-2.xml\",\n    yumRootDepth: 5,\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_local_test_rpm_repo_basic = artifactory.LocalRpmRepository(\"terraform-local-test-rpm-repo-basic\",\n    calculate_yum_metadata=True,\n    enable_file_lists_indexing=True,\n    key=\"terraform-local-test-rpm-repo-basic\",\n    yum_group_file_names=\"file-1.xml,file-2.xml\",\n    yum_root_depth=5)\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_local_test_rpm_repo_basic = new Artifactory.LocalRpmRepository(\"terraform-local-test-rpm-repo-basic\", new Artifactory.LocalRpmRepositoryArgs\n        {\n            CalculateYumMetadata = true,\n            EnableFileListsIndexing = true,\n            Key = \"terraform-local-test-rpm-repo-basic\",\n            YumGroupFileNames = \"file-1.xml,file-2.xml\",\n            YumRootDepth = 5,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewLocalRpmRepository(ctx, \"terraform-local-test-rpm-repo-basic\", \u0026artifactory.LocalRpmRepositoryArgs{\n\t\t\tCalculateYumMetadata:    pulumi.Bool(true),\n\t\t\tEnableFileListsIndexing: pulumi.Bool(true),\n\t\t\tKey:                     pulumi.String(\"terraform-local-test-rpm-repo-basic\"),\n\t\t\tYumGroupFileNames:       pulumi.String(\"file-1.xml,file-2.xml\"),\n\t\t\tYumRootDepth:            pulumi.Int(5),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "calculateYumMetadata": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "enableFileListsIndexing": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                },
                "yumGroupFileNames": {
                    "type": "string",
                    "description": "- A list of XML file names containing RPM group component definitions. Artifactory includes the group definitions as part of the calculated RPM metadata, as well as automatically generating a gzipped version of the group files, if required.\n"
                },
                "yumRootDepth": {
                    "type": "integer",
                    "description": "- The depth, relative to the repository's root folder, where RPM metadata is created. This is useful when your repository contains multiple RPM repositories under parallel hierarchies. For example, if your RPMs are stored under 'fedora/linux/$releasever/$basearch', specify a depth of 4. Once the number of snapshots exceeds this setting, older versions are removed. A value of 0 (default) indicates there is no limit, and unique snapshots are not cleaned up.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "calculateYumMetadata": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "enableFileListsIndexing": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                },
                "yumGroupFileNames": {
                    "type": "string",
                    "description": "- A list of XML file names containing RPM group component definitions. Artifactory includes the group definitions as part of the calculated RPM metadata, as well as automatically generating a gzipped version of the group files, if required.\n"
                },
                "yumRootDepth": {
                    "type": "integer",
                    "description": "- The depth, relative to the repository's root folder, where RPM metadata is created. This is useful when your repository contains multiple RPM repositories under parallel hierarchies. For example, if your RPMs are stored under 'fedora/linux/$releasever/$basearch', specify a depth of 4. Once the number of snapshots exceeds this setting, older versions are removed. A value of 0 (default) indicates there is no limit, and unique snapshots are not cleaned up.\n"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LocalRpmRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "calculateYumMetadata": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "enableFileListsIndexing": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    },
                    "yumGroupFileNames": {
                        "type": "string",
                        "description": "- A list of XML file names containing RPM group component definitions. Artifactory includes the group definitions as part of the calculated RPM metadata, as well as automatically generating a gzipped version of the group files, if required.\n"
                    },
                    "yumRootDepth": {
                        "type": "integer",
                        "description": "- The depth, relative to the repository's root folder, where RPM metadata is created. This is useful when your repository contains multiple RPM repositories under parallel hierarchies. For example, if your RPMs are stored under 'fedora/linux/$releasever/$basearch', specify a depth of 4. Once the number of snapshots exceeds this setting, older versions are removed. A value of 0 (default) indicates there is no limit, and unique snapshots are not cleaned up.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/localSbtRepository:LocalSbtRepository": {
            "description": "## # Artifactory Local Sbt Repository Resource\n\nCreates a local sbt repository. \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_local_test_sbt_repo = new artifactory.LocalSbtRepository(\"terraform-local-test-sbt-repo\", {\n    key: \"terraform-local-test-sbt-repo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_local_test_sbt_repo = artifactory.LocalSbtRepository(\"terraform-local-test-sbt-repo\", key=\"terraform-local-test-sbt-repo\")\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_local_test_sbt_repo = new Artifactory.LocalSbtRepository(\"terraform-local-test-sbt-repo\", new Artifactory.LocalSbtRepositoryArgs\n        {\n            Key = \"terraform-local-test-sbt-repo\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewLocalSbtRepository(ctx, \"terraform-local-test-sbt-repo\", \u0026artifactory.LocalSbtRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-local-test-sbt-repo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LocalSbtRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/localVagrantRepository:LocalVagrantRepository": {
            "description": "## # Artifactory Local Vagrant Repository Resource\n\nCreates a local vagrant repository. \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst terraform_local_test_vagrant_repo = new artifactory.LocalVagrantRepository(\"terraform-local-test-vagrant-repo\", {\n    key: \"terraform-local-test-vagrant-repo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nterraform_local_test_vagrant_repo = artifactory.LocalVagrantRepository(\"terraform-local-test-vagrant-repo\", key=\"terraform-local-test-vagrant-repo\")\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var terraform_local_test_vagrant_repo = new Artifactory.LocalVagrantRepository(\"terraform-local-test-vagrant-repo\", new Artifactory.LocalVagrantRepositoryArgs\n        {\n            Key = \"terraform-local-test-vagrant-repo\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewLocalVagrantRepository(ctx, \"terraform-local-test-vagrant-repo\", \u0026artifactory.LocalVagrantRepositoryArgs{\n\t\t\tKey: pulumi.String(\"terraform-local-test-vagrant-repo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "required": [
                "excludesPattern",
                "includesPattern",
                "key",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "archiveBrowsingEnabled": {
                    "type": "boolean",
                    "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "downloadDirect": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "- the identity key of the repo\n"
                },
                "notes": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LocalVagrantRepository resources.\n",
                "properties": {
                    "archiveBrowsingEnabled": {
                        "type": "boolean",
                        "description": "When set, you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and\ntherefore requires strict content moderation to prevent malicious users from uploading content that may compromise\nsecurity (e.g., cross-site scripting attacks).\n"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadDirect": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "- the identity key of the repo\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed\nwith project key, separated by a dash.\n"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via\nXray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/mavenRepository:MavenRepository": {
            "description": "## # Artifactory Virtual Maven Repository Resource\n\nProvides an Artifactory virtual repository resource, but with specific maven feature. This should be preferred over the original\none-size-fits-all `artifactory.VirtualRepository`. \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst bar = new artifactory.LocalRepository(\"bar\", {\n    key: \"bar\",\n    packageType: \"maven\",\n    repoLayoutRef: \"maven-2-default\",\n});\nconst baz = new artifactory.RemoteRepository(\"baz\", {\n    key: \"baz\",\n    packageType: \"maven\",\n    repoLayoutRef: \"maven-2-default\",\n    url: \"https://search.maven.com/\",\n});\nconst foo = new artifactory.MavenRepository(\"foo\", {\n    description: \"A test virtual repo\",\n    excludesPattern: \"com/google/**\",\n    forceMavenAuthentication: true,\n    includesPattern: \"com/jfrog/**,cloud/jfrog/**\",\n    key: \"maven-virt-repo\",\n    notes: \"Internal description\",\n    pomRepositoryReferencesCleanupPolicy: \"discard_active_reference\",\n    repoLayoutRef: \"maven-2-default\",\n    repositories: [\n        bar.key,\n        artifactory_local_repository_baz.key,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nbar = artifactory.LocalRepository(\"bar\",\n    key=\"bar\",\n    package_type=\"maven\",\n    repo_layout_ref=\"maven-2-default\")\nbaz = artifactory.RemoteRepository(\"baz\",\n    key=\"baz\",\n    package_type=\"maven\",\n    repo_layout_ref=\"maven-2-default\",\n    url=\"https://search.maven.com/\")\nfoo = artifactory.MavenRepository(\"foo\",\n    description=\"A test virtual repo\",\n    excludes_pattern=\"com/google/**\",\n    force_maven_authentication=True,\n    includes_pattern=\"com/jfrog/**,cloud/jfrog/**\",\n    key=\"maven-virt-repo\",\n    notes=\"Internal description\",\n    pom_repository_references_cleanup_policy=\"discard_active_reference\",\n    repo_layout_ref=\"maven-2-default\",\n    repositories=[\n        bar.key,\n        artifactory_local_repository[\"baz\"][\"key\"],\n    ])\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var bar = new Artifactory.LocalRepository(\"bar\", new Artifactory.LocalRepositoryArgs\n        {\n            Key = \"bar\",\n            PackageType = \"maven\",\n            RepoLayoutRef = \"maven-2-default\",\n        });\n        var baz = new Artifactory.RemoteRepository(\"baz\", new Artifactory.RemoteRepositoryArgs\n        {\n            Key = \"baz\",\n            PackageType = \"maven\",\n            RepoLayoutRef = \"maven-2-default\",\n            Url = \"https://search.maven.com/\",\n        });\n        var foo = new Artifactory.MavenRepository(\"foo\", new Artifactory.MavenRepositoryArgs\n        {\n            Description = \"A test virtual repo\",\n            ExcludesPattern = \"com/google/**\",\n            ForceMavenAuthentication = true,\n            IncludesPattern = \"com/jfrog/**,cloud/jfrog/**\",\n            Key = \"maven-virt-repo\",\n            Notes = \"Internal description\",\n            PomRepositoryReferencesCleanupPolicy = \"discard_active_reference\",\n            RepoLayoutRef = \"maven-2-default\",\n            Repositories = \n            {\n                bar.Key,\n                artifactory_local_repository.Baz.Key,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tbar, err := artifactory.NewLocalRepository(ctx, \"bar\", \u0026artifactory.LocalRepositoryArgs{\n\t\t\tKey:           pulumi.String(\"bar\"),\n\t\t\tPackageType:   pulumi.String(\"maven\"),\n\t\t\tRepoLayoutRef: pulumi.String(\"maven-2-default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = artifactory.NewRemoteRepository(ctx, \"baz\", \u0026artifactory.RemoteRepositoryArgs{\n\t\t\tKey:           pulumi.String(\"baz\"),\n\t\t\tPackageType:   pulumi.String(\"maven\"),\n\t\t\tRepoLayoutRef: pulumi.String(\"maven-2-default\"),\n\t\t\tUrl:           pulumi.String(\"https://search.maven.com/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = artifactory.NewMavenRepository(ctx, \"foo\", \u0026artifactory.MavenRepositoryArgs{\n\t\t\tDescription:                          pulumi.String(\"A test virtual repo\"),\n\t\t\tExcludesPattern:                      pulumi.String(\"com/google/**\"),\n\t\t\tForceMavenAuthentication:             pulumi.Bool(true),\n\t\t\tIncludesPattern:                      pulumi.String(\"com/jfrog/**,cloud/jfrog/**\"),\n\t\t\tKey:                                  pulumi.String(\"maven-virt-repo\"),\n\t\t\tNotes:                                pulumi.String(\"Internal description\"),\n\t\t\tPomRepositoryReferencesCleanupPolicy: pulumi.String(\"discard_active_reference\"),\n\t\t\tRepoLayoutRef:                        pulumi.String(\"maven-2-default\"),\n\t\t\tRepositories: pulumi.StringArray{\n\t\t\t\tbar.Key,\n\t\t\t\tpulumi.Any(artifactory_local_repository.Baz.Key),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVirtual repositories can be imported using their name, e.g.\n\n```sh\n $ pulumi import artifactory:index/mavenRepository:MavenRepository foo foo\n```\n\n ",
            "properties": {
                "artifactoryRequestsCanRetrieveRemoteArtifacts": {
                    "type": "boolean",
                    "description": "Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by\nanother Artifactory instance.\n"
                },
                "defaultDeploymentRepo": {
                    "type": "string",
                    "description": "Default repository to deploy artifacts.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A free text field that describes the content and purpose of the repository. If you choose to insert a link into this\nfield, clicking the link will prompt the user to confirm that they might be redirected to a new domain.\n"
                },
                "excludesPattern": {
                    "type": "string",
                    "description": "List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no\nartifacts are excluded.\n"
                },
                "forceMavenAuthentication": {
                    "type": "boolean",
                    "description": "- forces authentication when fetching from remote repos\n"
                },
                "includesPattern": {
                    "type": "string",
                    "description": "List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only\nartifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).\n"
                },
                "key": {
                    "type": "string",
                    "description": "The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or\ncontain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.\n'libs-release-local').\n"
                },
                "keyPair": {
                    "type": "string",
                    "description": "- Key pair to use for... well, I'm not sure. Maybe ssh auth to remote repo?\n"
                },
                "notes": {
                    "type": "string",
                    "description": "A free text field to add additional notes about the repository. These are only visible to the administrator.\n"
                },
                "packageType": {
                    "type": "string",
                    "description": "The Package Type. This must be specified when the repository is created, and once set, cannot be changed.\n"
                },
                "pomRepositoryReferencesCleanupPolicy": {
                    "type": "string",
                    "description": ". One of: `\"discard_active_reference\", \"discard_any_reference\", \"nothing\"`\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric characters. When assigning\nrepository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                },
                "repoLayoutRef": {
                    "type": "string",
                    "description": "Sets the layout that the repository should use for storing and identifying modules. A recommended layout that\ncorresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.\n"
                },
                "repositories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The effective list of actual repositories included in this virtual repository.\n"
                },
                "retrievalCachePeriodSeconds": {
                    "type": "integer",
                    "description": "This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated\nrepositories. A value of 0 indicates no caching.\n"
                }
            },
            "required": [
                "forceMavenAuthentication",
                "key",
                "packageType",
                "pomRepositoryReferencesCleanupPolicy",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "artifactoryRequestsCanRetrieveRemoteArtifacts": {
                    "type": "boolean",
                    "description": "Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by\nanother Artifactory instance.\n"
                },
                "defaultDeploymentRepo": {
                    "type": "string",
                    "description": "Default repository to deploy artifacts.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A free text field that describes the content and purpose of the repository. If you choose to insert a link into this\nfield, clicking the link will prompt the user to confirm that they might be redirected to a new domain.\n"
                },
                "excludesPattern": {
                    "type": "string",
                    "description": "List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no\nartifacts are excluded.\n"
                },
                "forceMavenAuthentication": {
                    "type": "boolean",
                    "description": "- forces authentication when fetching from remote repos\n"
                },
                "includesPattern": {
                    "type": "string",
                    "description": "List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only\nartifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).\n"
                },
                "key": {
                    "type": "string",
                    "description": "The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or\ncontain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.\n'libs-release-local').\n"
                },
                "keyPair": {
                    "type": "string",
                    "description": "- Key pair to use for... well, I'm not sure. Maybe ssh auth to remote repo?\n"
                },
                "notes": {
                    "type": "string",
                    "description": "A free text field to add additional notes about the repository. These are only visible to the administrator.\n"
                },
                "pomRepositoryReferencesCleanupPolicy": {
                    "type": "string",
                    "description": ". One of: `\"discard_active_reference\", \"discard_any_reference\", \"nothing\"`\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric characters. When assigning\nrepository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                },
                "repoLayoutRef": {
                    "type": "string",
                    "description": "Sets the layout that the repository should use for storing and identifying modules. A recommended layout that\ncorresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.\n"
                },
                "repositories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The effective list of actual repositories included in this virtual repository.\n"
                },
                "retrievalCachePeriodSeconds": {
                    "type": "integer",
                    "description": "This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated\nrepositories. A value of 0 indicates no caching.\n"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MavenRepository resources.\n",
                "properties": {
                    "artifactoryRequestsCanRetrieveRemoteArtifacts": {
                        "type": "boolean",
                        "description": "Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by\nanother Artifactory instance.\n"
                    },
                    "defaultDeploymentRepo": {
                        "type": "string",
                        "description": "Default repository to deploy artifacts.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A free text field that describes the content and purpose of the repository. If you choose to insert a link into this\nfield, clicking the link will prompt the user to confirm that they might be redirected to a new domain.\n"
                    },
                    "excludesPattern": {
                        "type": "string",
                        "description": "List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no\nartifacts are excluded.\n"
                    },
                    "forceMavenAuthentication": {
                        "type": "boolean",
                        "description": "- forces authentication when fetching from remote repos\n"
                    },
                    "includesPattern": {
                        "type": "string",
                        "description": "List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only\nartifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or\ncontain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.\n'libs-release-local').\n"
                    },
                    "keyPair": {
                        "type": "string",
                        "description": "- Key pair to use for... well, I'm not sure. Maybe ssh auth to remote repo?\n"
                    },
                    "notes": {
                        "type": "string",
                        "description": "A free text field to add additional notes about the repository. These are only visible to the administrator.\n"
                    },
                    "packageType": {
                        "type": "string",
                        "description": "The Package Type. This must be specified when the repository is created, and once set, cannot be changed.\n"
                    },
                    "pomRepositoryReferencesCleanupPolicy": {
                        "type": "string",
                        "description": ". One of: `\"discard_active_reference\", \"discard_any_reference\", \"nothing\"`\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric characters. When assigning\nrepository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                    },
                    "repoLayoutRef": {
                        "type": "string",
                        "description": "Sets the layout that the repository should use for storing and identifying modules. A recommended layout that\ncorresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.\n"
                    },
                    "repositories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The effective list of actual repositories included in this virtual repository.\n"
                    },
                    "retrievalCachePeriodSeconds": {
                        "type": "integer",
                        "description": "This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated\nrepositories. A value of 0 indicates no caching.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/oauthSettings:OauthSettings": {
            "description": "## # Artifactory OAuth SSO Settings Resource\n\nThis resource can be used to manage Artifactory's OAuth SSO settings.\n\nOnly a single `artifactory.OauthSettings` resource is meant to be defined.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\n// Configure Artifactory OAuth SSO settings\nconst oauth = new artifactory.OauthSettings(\"oauth\", {\n    allowUserToAccessProfile: true,\n    enable: true,\n    oauthProviders: [{\n        apiUrl: \"https://organization.okta.com/oauth2/v1/userinfo\",\n        authUrl: \"https://organization.okta.com/oauth2/v1/authorize\",\n        clientId: \"foo\",\n        clientSecret: \"bar\",\n        enabled: false,\n        name: \"okta\",\n        tokenUrl: \"https://organization.okta.com/oauth2/v1/token\",\n        type: \"openId\",\n    }],\n    persistUsers: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\n# Configure Artifactory OAuth SSO settings\noauth = artifactory.OauthSettings(\"oauth\",\n    allow_user_to_access_profile=True,\n    enable=True,\n    oauth_providers=[artifactory.OauthSettingsOauthProviderArgs(\n        api_url=\"https://organization.okta.com/oauth2/v1/userinfo\",\n        auth_url=\"https://organization.okta.com/oauth2/v1/authorize\",\n        client_id=\"foo\",\n        client_secret=\"bar\",\n        enabled=False,\n        name=\"okta\",\n        token_url=\"https://organization.okta.com/oauth2/v1/token\",\n        type=\"openId\",\n    )],\n    persist_users=True)\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Configure Artifactory OAuth SSO settings\n        var oauth = new Artifactory.OauthSettings(\"oauth\", new Artifactory.OauthSettingsArgs\n        {\n            AllowUserToAccessProfile = true,\n            Enable = true,\n            OauthProviders = \n            {\n                new Artifactory.Inputs.OauthSettingsOauthProviderArgs\n                {\n                    ApiUrl = \"https://organization.okta.com/oauth2/v1/userinfo\",\n                    AuthUrl = \"https://organization.okta.com/oauth2/v1/authorize\",\n                    ClientId = \"foo\",\n                    ClientSecret = \"bar\",\n                    Enabled = false,\n                    Name = \"okta\",\n                    TokenUrl = \"https://organization.okta.com/oauth2/v1/token\",\n                    Type = \"openId\",\n                },\n            },\n            PersistUsers = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewOauthSettings(ctx, \"oauth\", \u0026artifactory.OauthSettingsArgs{\n\t\t\tAllowUserToAccessProfile: pulumi.Bool(true),\n\t\t\tEnable:                   pulumi.Bool(true),\n\t\t\tOauthProviders: OauthSettingsOauthProviderArray{\n\t\t\t\t\u0026OauthSettingsOauthProviderArgs{\n\t\t\t\t\tApiUrl:       pulumi.String(\"https://organization.okta.com/oauth2/v1/userinfo\"),\n\t\t\t\t\tAuthUrl:      pulumi.String(\"https://organization.okta.com/oauth2/v1/authorize\"),\n\t\t\t\t\tClientId:     pulumi.String(\"foo\"),\n\t\t\t\t\tClientSecret: pulumi.String(\"bar\"),\n\t\t\t\t\tEnabled:      pulumi.Bool(false),\n\t\t\t\t\tName:         pulumi.String(\"okta\"),\n\t\t\t\t\tTokenUrl:     pulumi.String(\"https://organization.okta.com/oauth2/v1/token\"),\n\t\t\t\t\tType:         pulumi.String(\"openId\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tPersistUsers: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCurrent OAuth SSO settings can be imported using `oauth_settings` as the `ID`, e.g.\n\n```sh\n $ pulumi import artifactory:index/oauthSettings:OauthSettings oauth oauth_settings\n```\n\n ",
            "properties": {
                "allowUserToAccessProfile": {
                    "type": "boolean",
                    "description": "Allow persisted users to access their profile.  Default value is `false`.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable OAuth SSO.  Default value is `true`.\n"
                },
                "oauthProviders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/OauthSettingsOauthProvider:OauthSettingsOauthProvider"
                    },
                    "description": "OAuth provider settings block. Multiple blocks can be defined, at least one is required.\n"
                },
                "persistUsers": {
                    "type": "boolean",
                    "description": "Enable the creation of local Artifactory users.  Default value is `false`.\n"
                }
            },
            "required": [
                "oauthProviders"
            ],
            "inputProperties": {
                "allowUserToAccessProfile": {
                    "type": "boolean",
                    "description": "Allow persisted users to access their profile.  Default value is `false`.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable OAuth SSO.  Default value is `true`.\n"
                },
                "oauthProviders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/OauthSettingsOauthProvider:OauthSettingsOauthProvider"
                    },
                    "description": "OAuth provider settings block. Multiple blocks can be defined, at least one is required.\n"
                },
                "persistUsers": {
                    "type": "boolean",
                    "description": "Enable the creation of local Artifactory users.  Default value is `false`.\n"
                }
            },
            "requiredInputs": [
                "oauthProviders"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OauthSettings resources.\n",
                "properties": {
                    "allowUserToAccessProfile": {
                        "type": "boolean",
                        "description": "Allow persisted users to access their profile.  Default value is `false`.\n"
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Enable OAuth SSO.  Default value is `true`.\n"
                    },
                    "oauthProviders": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/artifactory:index/OauthSettingsOauthProvider:OauthSettingsOauthProvider"
                        },
                        "description": "OAuth provider settings block. Multiple blocks can be defined, at least one is required.\n"
                    },
                    "persistUsers": {
                        "type": "boolean",
                        "description": "Enable the creation of local Artifactory users.  Default value is `false`.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/permissionTarget:PermissionTarget": {
            "description": "## # Artifactory Permission Target Resource\n\n**Requires Artifactory \u003e= 6.6.0. If using a lower version see here**\n\nProvides an Artifactory permission target resource. This can be used to create and manage Artifactory permission targets.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\n// Create a new Artifactory permission target called testpermission\nconst test_perm = new artifactory.PermissionTarget(\"test-perm\", {\n    build: {\n        actions: {\n            users: [{\n                name: \"anonymous\",\n                permissions: [\n                    \"read\",\n                    \"write\",\n                ],\n            }],\n        },\n        includesPatterns: [\"**\"],\n        repositories: [\"artifactory-build-info\"],\n    },\n    repo: {\n        actions: {\n            groups: [{\n                name: \"readers\",\n                permissions: [\"read\"],\n            }],\n            users: [{\n                name: \"anonymous\",\n                permissions: [\n                    \"read\",\n                    \"write\",\n                ],\n            }],\n        },\n        excludesPatterns: [\"bar/**\"],\n        includesPatterns: [\"foo/**\"],\n        repositories: [\"example-repo-local\"],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\n# Create a new Artifactory permission target called testpermission\ntest_perm = artifactory.PermissionTarget(\"test-perm\",\n    build=artifactory.PermissionTargetBuildArgs(\n        actions=artifactory.PermissionTargetBuildActionsArgs(\n            users=[artifactory.PermissionTargetBuildActionsUserArgs(\n                name=\"anonymous\",\n                permissions=[\n                    \"read\",\n                    \"write\",\n                ],\n            )],\n        ),\n        includes_patterns=[\"**\"],\n        repositories=[\"artifactory-build-info\"],\n    ),\n    repo=artifactory.PermissionTargetRepoArgs(\n        actions=artifactory.PermissionTargetRepoActionsArgs(\n            groups=[artifactory.PermissionTargetRepoActionsGroupArgs(\n                name=\"readers\",\n                permissions=[\"read\"],\n            )],\n            users=[artifactory.PermissionTargetRepoActionsUserArgs(\n                name=\"anonymous\",\n                permissions=[\n                    \"read\",\n                    \"write\",\n                ],\n            )],\n        ),\n        excludes_patterns=[\"bar/**\"],\n        includes_patterns=[\"foo/**\"],\n        repositories=[\"example-repo-local\"],\n    ))\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new Artifactory permission target called testpermission\n        var test_perm = new Artifactory.PermissionTarget(\"test-perm\", new Artifactory.PermissionTargetArgs\n        {\n            Build = new Artifactory.Inputs.PermissionTargetBuildArgs\n            {\n                Actions = new Artifactory.Inputs.PermissionTargetBuildActionsArgs\n                {\n                    Users = \n                    {\n                        new Artifactory.Inputs.PermissionTargetBuildActionsUserArgs\n                        {\n                            Name = \"anonymous\",\n                            Permissions = \n                            {\n                                \"read\",\n                                \"write\",\n                            },\n                        },\n                    },\n                },\n                IncludesPatterns = \n                {\n                    \"**\",\n                },\n                Repositories = \n                {\n                    \"artifactory-build-info\",\n                },\n            },\n            Repo = new Artifactory.Inputs.PermissionTargetRepoArgs\n            {\n                Actions = new Artifactory.Inputs.PermissionTargetRepoActionsArgs\n                {\n                    Groups = \n                    {\n                        new Artifactory.Inputs.PermissionTargetRepoActionsGroupArgs\n                        {\n                            Name = \"readers\",\n                            Permissions = \n                            {\n                                \"read\",\n                            },\n                        },\n                    },\n                    Users = \n                    {\n                        new Artifactory.Inputs.PermissionTargetRepoActionsUserArgs\n                        {\n                            Name = \"anonymous\",\n                            Permissions = \n                            {\n                                \"read\",\n                                \"write\",\n                            },\n                        },\n                    },\n                },\n                ExcludesPatterns = \n                {\n                    \"bar/**\",\n                },\n                IncludesPatterns = \n                {\n                    \"foo/**\",\n                },\n                Repositories = \n                {\n                    \"example-repo-local\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewPermissionTarget(ctx, \"test-perm\", \u0026artifactory.PermissionTargetArgs{\n\t\t\tBuild: \u0026PermissionTargetBuildArgs{\n\t\t\t\tActions: \u0026PermissionTargetBuildActionsArgs{\n\t\t\t\t\tUsers: PermissionTargetBuildActionsUserArray{\n\t\t\t\t\t\t\u0026PermissionTargetBuildActionsUserArgs{\n\t\t\t\t\t\t\tName: pulumi.String(\"anonymous\"),\n\t\t\t\t\t\t\tPermissions: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"read\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"write\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tIncludesPatterns: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"**\"),\n\t\t\t\t},\n\t\t\t\tRepositories: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"artifactory-build-info\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRepo: \u0026PermissionTargetRepoArgs{\n\t\t\t\tActions: \u0026PermissionTargetRepoActionsArgs{\n\t\t\t\t\tGroups: PermissionTargetRepoActionsGroupArray{\n\t\t\t\t\t\t\u0026PermissionTargetRepoActionsGroupArgs{\n\t\t\t\t\t\t\tName: pulumi.String(\"readers\"),\n\t\t\t\t\t\t\tPermissions: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"read\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tUsers: PermissionTargetRepoActionsUserArray{\n\t\t\t\t\t\t\u0026PermissionTargetRepoActionsUserArgs{\n\t\t\t\t\t\t\tName: pulumi.String(\"anonymous\"),\n\t\t\t\t\t\t\tPermissions: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"read\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"write\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tExcludesPatterns: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"bar/**\"),\n\t\t\t\t},\n\t\t\t\tIncludesPatterns: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"foo/**\"),\n\t\t\t\t},\n\t\t\t\tRepositories: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"example-repo-local\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Permissions\n\nThe provider supports the following `permission` enums:\n\n* `read`\n* `write`\n* `annotate`\n* `delete`\n* `manage`\n\nThe values can be mapped to the permissions from the official [documentation](https://www.jfrog.com/confluence/display/JFROG/Permissions):\n\n* `read` - matches `Read` permissions.\n* `write` - matches ` Deploy / Cache / Create` permissions.\n* `annotate` - matches `Annotate` permissions.\n* `delete` - matches `Delete / Overwrite` permissions.\n* `manage` - matches `Manage` permissions.\n\n\n## Import\n\nPermission targets can be imported using their name, e.g.\n\n```sh\n $ pulumi import artifactory:index/permissionTarget:PermissionTarget terraform-test-permission mypermission\n```\n\n ",
            "properties": {
                "build": {
                    "$ref": "#/types/artifactory:index/PermissionTargetBuild:PermissionTargetBuild",
                    "description": "As for repo but for artifactory-build-info permssions.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of permission\n"
                },
                "releaseBundle": {
                    "$ref": "#/types/artifactory:index/PermissionTargetReleaseBundle:PermissionTargetReleaseBundle"
                },
                "repo": {
                    "$ref": "#/types/artifactory:index/PermissionTargetRepo:PermissionTargetRepo",
                    "description": "Repository permission configuration\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "build": {
                    "$ref": "#/types/artifactory:index/PermissionTargetBuild:PermissionTargetBuild",
                    "description": "As for repo but for artifactory-build-info permssions.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of permission\n"
                },
                "releaseBundle": {
                    "$ref": "#/types/artifactory:index/PermissionTargetReleaseBundle:PermissionTargetReleaseBundle"
                },
                "repo": {
                    "$ref": "#/types/artifactory:index/PermissionTargetRepo:PermissionTargetRepo",
                    "description": "Repository permission configuration\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PermissionTarget resources.\n",
                "properties": {
                    "build": {
                        "$ref": "#/types/artifactory:index/PermissionTargetBuild:PermissionTargetBuild",
                        "description": "As for repo but for artifactory-build-info permssions.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of permission\n"
                    },
                    "releaseBundle": {
                        "$ref": "#/types/artifactory:index/PermissionTargetReleaseBundle:PermissionTargetReleaseBundle"
                    },
                    "repo": {
                        "$ref": "#/types/artifactory:index/PermissionTargetRepo:PermissionTargetRepo",
                        "description": "Repository permission configuration\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/permissionTargets:PermissionTargets": {
            "properties": {
                "build": {
                    "$ref": "#/types/artifactory:index/PermissionTargetsBuild:PermissionTargetsBuild"
                },
                "name": {
                    "type": "string"
                },
                "releaseBundle": {
                    "$ref": "#/types/artifactory:index/PermissionTargetsReleaseBundle:PermissionTargetsReleaseBundle"
                },
                "repo": {
                    "$ref": "#/types/artifactory:index/PermissionTargetsRepo:PermissionTargetsRepo"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "build": {
                    "$ref": "#/types/artifactory:index/PermissionTargetsBuild:PermissionTargetsBuild"
                },
                "name": {
                    "type": "string"
                },
                "releaseBundle": {
                    "$ref": "#/types/artifactory:index/PermissionTargetsReleaseBundle:PermissionTargetsReleaseBundle"
                },
                "repo": {
                    "$ref": "#/types/artifactory:index/PermissionTargetsRepo:PermissionTargetsRepo"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PermissionTargets resources.\n",
                "properties": {
                    "build": {
                        "$ref": "#/types/artifactory:index/PermissionTargetsBuild:PermissionTargetsBuild"
                    },
                    "name": {
                        "type": "string"
                    },
                    "releaseBundle": {
                        "$ref": "#/types/artifactory:index/PermissionTargetsReleaseBundle:PermissionTargetsReleaseBundle"
                    },
                    "repo": {
                        "$ref": "#/types/artifactory:index/PermissionTargetsRepo:PermissionTargetsRepo"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/pullReplication:PullReplication": {
            "description": "## # Artifactory Pull Replication Resource\n\nProvides an Artifactory pull replication resource. This can be used to create and manage pull replication in Artifactory\nfor a remote repo.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\n// Create a replication between two artifactory local repositories\nconst providerTestSource = new artifactory.LocalRepository(\"provider_test_source\", {\n    key: \"provider_test_source\",\n    packageType: \"maven\",\n});\nconst providerTestDest = new artifactory.RemoteRepository(\"provider_test_dest\", {\n    key: \"provider_test_dest\",\n    packageType: \"maven\",\n    password: \"bar\",\n    url: pulumi.interpolate`https://example.com/artifactory/${artifactory_local_repository_artifactory_local_repository.key}`,\n    username: \"foo\",\n});\nconst foo_rep = new artifactory.PullReplication(\"foo-rep\", {\n    cronExp: \"0 0 * * * ?\",\n    enableEventReplication: true,\n    repoKey: providerTestDest.key,\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\n# Create a replication between two artifactory local repositories\nprovider_test_source = artifactory.LocalRepository(\"providerTestSource\",\n    key=\"provider_test_source\",\n    package_type=\"maven\")\nprovider_test_dest = artifactory.RemoteRepository(\"providerTestDest\",\n    key=\"provider_test_dest\",\n    package_type=\"maven\",\n    password=\"bar\",\n    url=f\"https://example.com/artifactory/{artifactory_local_repository['artifactory_local_repository']['key']}\",\n    username=\"foo\")\nfoo_rep = artifactory.PullReplication(\"foo-rep\",\n    cron_exp=\"0 0 * * * ?\",\n    enable_event_replication=True,\n    repo_key=provider_test_dest.key)\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a replication between two artifactory local repositories\n        var providerTestSource = new Artifactory.LocalRepository(\"providerTestSource\", new Artifactory.LocalRepositoryArgs\n        {\n            Key = \"provider_test_source\",\n            PackageType = \"maven\",\n        });\n        var providerTestDest = new Artifactory.RemoteRepository(\"providerTestDest\", new Artifactory.RemoteRepositoryArgs\n        {\n            Key = \"provider_test_dest\",\n            PackageType = \"maven\",\n            Password = \"bar\",\n            Url = $\"https://example.com/artifactory/{artifactory_local_repository.Artifactory_local_repository.Key}\",\n            Username = \"foo\",\n        });\n        var foo_rep = new Artifactory.PullReplication(\"foo-rep\", new Artifactory.PullReplicationArgs\n        {\n            CronExp = \"0 0 * * * ?\",\n            EnableEventReplication = true,\n            RepoKey = providerTestDest.Key,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewLocalRepository(ctx, \"providerTestSource\", \u0026artifactory.LocalRepositoryArgs{\n\t\t\tKey:         pulumi.String(\"provider_test_source\"),\n\t\t\tPackageType: pulumi.String(\"maven\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tproviderTestDest, err := artifactory.NewRemoteRepository(ctx, \"providerTestDest\", \u0026artifactory.RemoteRepositoryArgs{\n\t\t\tKey:         pulumi.String(\"provider_test_dest\"),\n\t\t\tPackageType: pulumi.String(\"maven\"),\n\t\t\tPassword:    pulumi.String(\"bar\"),\n\t\t\tUrl:         pulumi.String(fmt.Sprintf(\"%v%v\", \"https://example.com/artifactory/\", artifactory_local_repository.Artifactory_local_repository.Key)),\n\t\t\tUsername:    pulumi.String(\"foo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = artifactory.NewPullReplication(ctx, \"foo-rep\", \u0026artifactory.PullReplicationArgs{\n\t\t\tCronExp:                pulumi.String(\"0 0 * * * ?\"),\n\t\t\tEnableEventReplication: pulumi.Bool(true),\n\t\t\tRepoKey:                providerTestDest.Key,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nPull replication config can be imported using its repo key, e.g.\n\n```sh\n $ pulumi import artifactory:index/pullReplication:PullReplication foo-rep repository-key\n```\n\n ",
            "properties": {
                "cronExp": {
                    "type": "string"
                },
                "enableEventReplication": {
                    "type": "boolean"
                },
                "enabled": {
                    "type": "boolean"
                },
                "password": {
                    "type": "string",
                    "description": "If a password is used to create the resource, it will be returned as encrypted and this will become the new\nstate.Practically speaking, what this means is that, the password can only be set, not gotten.\n"
                },
                "pathPrefix": {
                    "type": "string"
                },
                "repoKey": {
                    "type": "string"
                },
                "socketTimeoutMillis": {
                    "type": "integer"
                },
                "syncDeletes": {
                    "type": "boolean"
                },
                "syncProperties": {
                    "type": "boolean"
                },
                "syncStatistics": {
                    "type": "boolean"
                },
                "url": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "required": [
                "cronExp",
                "enableEventReplication",
                "enabled",
                "password",
                "repoKey",
                "socketTimeoutMillis",
                "syncDeletes",
                "syncProperties",
                "syncStatistics"
            ],
            "inputProperties": {
                "cronExp": {
                    "type": "string"
                },
                "enableEventReplication": {
                    "type": "boolean"
                },
                "enabled": {
                    "type": "boolean"
                },
                "pathPrefix": {
                    "type": "string"
                },
                "repoKey": {
                    "type": "string"
                },
                "socketTimeoutMillis": {
                    "type": "integer"
                },
                "syncDeletes": {
                    "type": "boolean"
                },
                "syncProperties": {
                    "type": "boolean"
                },
                "syncStatistics": {
                    "type": "boolean"
                },
                "url": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "cronExp",
                "repoKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PullReplication resources.\n",
                "properties": {
                    "cronExp": {
                        "type": "string"
                    },
                    "enableEventReplication": {
                        "type": "boolean"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "password": {
                        "type": "string",
                        "description": "If a password is used to create the resource, it will be returned as encrypted and this will become the new\nstate.Practically speaking, what this means is that, the password can only be set, not gotten.\n"
                    },
                    "pathPrefix": {
                        "type": "string"
                    },
                    "repoKey": {
                        "type": "string"
                    },
                    "socketTimeoutMillis": {
                        "type": "integer"
                    },
                    "syncDeletes": {
                        "type": "boolean"
                    },
                    "syncProperties": {
                        "type": "boolean"
                    },
                    "syncStatistics": {
                        "type": "boolean"
                    },
                    "url": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/pushReplication:PushReplication": {
            "description": "\n\n\n## Import\n\nPush replication configs can be imported using their repo key, e.g.\n\n```sh\n $ pulumi import artifactory:index/pushReplication:PushReplication foo-rep provider_test_source\n```\n\n ",
            "properties": {
                "cronExp": {
                    "type": "string"
                },
                "enableEventReplication": {
                    "type": "boolean"
                },
                "replications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/PushReplicationReplication:PushReplicationReplication"
                    }
                },
                "repoKey": {
                    "type": "string"
                }
            },
            "required": [
                "cronExp",
                "enableEventReplication",
                "repoKey"
            ],
            "inputProperties": {
                "cronExp": {
                    "type": "string"
                },
                "enableEventReplication": {
                    "type": "boolean"
                },
                "replications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/PushReplicationReplication:PushReplicationReplication"
                    }
                },
                "repoKey": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "cronExp",
                "repoKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PushReplication resources.\n",
                "properties": {
                    "cronExp": {
                        "type": "string"
                    },
                    "enableEventReplication": {
                        "type": "boolean"
                    },
                    "replications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/artifactory:index/PushReplicationReplication:PushReplicationReplication"
                        }
                    },
                    "repoKey": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/releaseBundleWebhook:ReleaseBundleWebhook": {
            "description": "## # Artifactory Release Bundle Webhook Resource\n\nProvides an Artifactory webhook resource. This can be used to register and manage Artifactory webhook subscription which enables you to be notified or notify other users when such events take place in Artifactory.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n.\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst release_bundle_webhook = new artifactory.ReleaseBundleWebhook(\"release-bundle-webhook\", {\n    criteria: {\n        anyReleaseBundle: false,\n        excludePatterns: [\"bar/**\"],\n        includePatterns: [\"foo/**\"],\n        registeredReleaseBundleNames: [\"bundle-name\"],\n    },\n    customHttpHeaders: {\n        \"header-1\": \"value-1\",\n        \"header-2\": \"value-2\",\n    },\n    eventTypes: [\n        \"created\",\n        \"signed\",\n        \"deleted\",\n    ],\n    key: \"release-bundle-webhook\",\n    proxy: \"proxy-key\",\n    secret: \"some-secret\",\n    url: \"http://tempurl.org/webhook\",\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nrelease_bundle_webhook = artifactory.ReleaseBundleWebhook(\"release-bundle-webhook\",\n    criteria=artifactory.ReleaseBundleWebhookCriteriaArgs(\n        any_release_bundle=False,\n        exclude_patterns=[\"bar/**\"],\n        include_patterns=[\"foo/**\"],\n        registered_release_bundle_names=[\"bundle-name\"],\n    ),\n    custom_http_headers={\n        \"header-1\": \"value-1\",\n        \"header-2\": \"value-2\",\n    },\n    event_types=[\n        \"created\",\n        \"signed\",\n        \"deleted\",\n    ],\n    key=\"release-bundle-webhook\",\n    proxy=\"proxy-key\",\n    secret=\"some-secret\",\n    url=\"http://tempurl.org/webhook\")\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var release_bundle_webhook = new Artifactory.ReleaseBundleWebhook(\"release-bundle-webhook\", new Artifactory.ReleaseBundleWebhookArgs\n        {\n            Criteria = new Artifactory.Inputs.ReleaseBundleWebhookCriteriaArgs\n            {\n                AnyReleaseBundle = false,\n                ExcludePatterns = \n                {\n                    \"bar/**\",\n                },\n                IncludePatterns = \n                {\n                    \"foo/**\",\n                },\n                RegisteredReleaseBundleNames = \n                {\n                    \"bundle-name\",\n                },\n            },\n            CustomHttpHeaders = \n            {\n                { \"header-1\", \"value-1\" },\n                { \"header-2\", \"value-2\" },\n            },\n            EventTypes = \n            {\n                \"created\",\n                \"signed\",\n                \"deleted\",\n            },\n            Key = \"release-bundle-webhook\",\n            Proxy = \"proxy-key\",\n            Secret = \"some-secret\",\n            Url = \"http://tempurl.org/webhook\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewReleaseBundleWebhook(ctx, \"release-bundle-webhook\", \u0026artifactory.ReleaseBundleWebhookArgs{\n\t\t\tCriteria: \u0026ReleaseBundleWebhookCriteriaArgs{\n\t\t\t\tAnyReleaseBundle: pulumi.Bool(false),\n\t\t\t\tExcludePatterns: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"bar/**\"),\n\t\t\t\t},\n\t\t\t\tIncludePatterns: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"foo/**\"),\n\t\t\t\t},\n\t\t\t\tRegisteredReleaseBundleNames: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"bundle-name\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tCustomHttpHeaders: pulumi.StringMap{\n\t\t\t\t\"header-1\": pulumi.String(\"value-1\"),\n\t\t\t\t\"header-2\": pulumi.String(\"value-2\"),\n\t\t\t},\n\t\t\tEventTypes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"created\"),\n\t\t\t\tpulumi.String(\"signed\"),\n\t\t\t\tpulumi.String(\"deleted\"),\n\t\t\t},\n\t\t\tKey:    pulumi.String(\"release-bundle-webhook\"),\n\t\t\tProxy:  pulumi.String(\"proxy-key\"),\n\t\t\tSecret: pulumi.String(\"some-secret\"),\n\t\t\tUrl:    pulumi.String(\"http://tempurl.org/webhook\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "criteria": {
                    "$ref": "#/types/artifactory:index/ReleaseBundleWebhookCriteria:ReleaseBundleWebhookCriteria",
                    "description": "Specifies where the webhook will be applied on which repositories.\n"
                },
                "customHttpHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Webhook description. Max length 1000 characters.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Status of webhook. Default to 'true'\n"
                },
                "eventTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow values: \"created\", \"signed\", \"deleted\"\n"
                },
                "key": {
                    "type": "string",
                    "description": "The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.\n"
                },
                "proxy": {
                    "type": "string",
                    "description": "Proxy key from Artifactory Proxies setting\n"
                },
                "secret": {
                    "type": "string",
                    "description": "Secret authentication token that will be sent to the configured URL\n"
                },
                "url": {
                    "type": "string",
                    "description": "Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.\n"
                }
            },
            "required": [
                "criteria",
                "eventTypes",
                "key",
                "url"
            ],
            "inputProperties": {
                "criteria": {
                    "$ref": "#/types/artifactory:index/ReleaseBundleWebhookCriteria:ReleaseBundleWebhookCriteria",
                    "description": "Specifies where the webhook will be applied on which repositories.\n"
                },
                "customHttpHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Webhook description. Max length 1000 characters.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Status of webhook. Default to 'true'\n"
                },
                "eventTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow values: \"created\", \"signed\", \"deleted\"\n"
                },
                "key": {
                    "type": "string",
                    "description": "The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.\n"
                },
                "proxy": {
                    "type": "string",
                    "description": "Proxy key from Artifactory Proxies setting\n"
                },
                "secret": {
                    "type": "string",
                    "description": "Secret authentication token that will be sent to the configured URL\n"
                },
                "url": {
                    "type": "string",
                    "description": "Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.\n"
                }
            },
            "requiredInputs": [
                "criteria",
                "eventTypes",
                "key",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ReleaseBundleWebhook resources.\n",
                "properties": {
                    "criteria": {
                        "$ref": "#/types/artifactory:index/ReleaseBundleWebhookCriteria:ReleaseBundleWebhookCriteria",
                        "description": "Specifies where the webhook will be applied on which repositories.\n"
                    },
                    "customHttpHeaders": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Custom HTTP headers you wish to use to invoke the Webhook, comprise of key/value pair.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Webhook description. Max length 1000 characters.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Status of webhook. Default to 'true'\n"
                    },
                    "eventTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Events in Artifactory, Distribution, Release Bundle that function as the event trigger for the Webhook. Allow values: \"created\", \"signed\", \"deleted\"\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The identity key of the webhook. Must be between 2 and 200 characters. Cannot contain spaces.\n"
                    },
                    "proxy": {
                        "type": "string",
                        "description": "Proxy key from Artifactory Proxies setting\n"
                    },
                    "secret": {
                        "type": "string",
                        "description": "Secret authentication token that will be sent to the configured URL\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Specifies the URL that the Webhook invokes. This will be the URL that Artifactory will send an HTTP POST request to.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/remoteCargoRepository:RemoteCargoRepository": {
            "description": "## # Artifactory Remote Cargo Repository Resource\n\nProvides an Artifactory remote `cargo` repository resource. This provides cargo specific fields and is the only way to get them\nOfficial documentation can be found [here](https://www.jfrog.com/confluence/display/JFROG/Cargo+Registry)\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreate a new Artifactory remote cargo repository called my-remote-cargo\nfor brevity sake, only cargo specific fields are included; for other fields see documentation for\ngeneric repo.\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst my_remote_cargo = new artifactory.RemoteCargoRepository(\"my-remote-cargo\", {\n    anonymousAccess: true,\n    gitRegistryUrl: \"https://github.com/rust-lang/foo.index\",\n    key: \"my-remote-cargo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nmy_remote_cargo = artifactory.RemoteCargoRepository(\"my-remote-cargo\",\n    anonymous_access=True,\n    git_registry_url=\"https://github.com/rust-lang/foo.index\",\n    key=\"my-remote-cargo\")\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var my_remote_cargo = new Artifactory.RemoteCargoRepository(\"my-remote-cargo\", new Artifactory.RemoteCargoRepositoryArgs\n        {\n            AnonymousAccess = true,\n            GitRegistryUrl = \"https://github.com/rust-lang/foo.index\",\n            Key = \"my-remote-cargo\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewRemoteCargoRepository(ctx, \"my-remote-cargo\", \u0026artifactory.RemoteCargoRepositoryArgs{\n\t\t\tAnonymousAccess: pulumi.Bool(true),\n\t\t\tGitRegistryUrl:  pulumi.String(\"https://github.com/rust-lang/foo.index\"),\n\t\t\tKey:             pulumi.String(\"my-remote-cargo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Note\n\nIf you get a 400 error: `\"Custom Base URL should be defined prior to creating a Cargo repository\"`,\nyou must set the base url at: `http://${host}/ui/admin/configuration/general`\n",
            "properties": {
                "allowAnyHostAuth": {
                    "type": "boolean",
                    "description": "Also known as 'Lenient Host Authentication', Allow credentials of this repository to be used on requests redirected to\nany other host.\n"
                },
                "anonymousAccess": {
                    "type": "boolean",
                    "description": "- Cargo client does not send credentials when performing download and search for crates. Enable this to allow anonymous access to these resources (only), note that this will override the security anonymous access option.\n"
                },
                "assumedOfflinePeriodSecs": {
                    "type": "integer",
                    "description": "The number of seconds the repository stays in assumed offline state after a connection error. At the end of this time,\nan online check is attempted in order to reset the offline status. A value of 0 means the repository is never assumed\noffline. Default to 300.\n"
                },
                "blackedOut": {
                    "type": "boolean",
                    "description": "(A.K.A 'Ignore Repository' on the UI) When set, the repository or its local cache do not participate in artifact\nresolution.\n"
                },
                "blockMismatchingMimeTypes": {
                    "type": "boolean",
                    "description": "Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,\nHEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,\nArtifactory will bypass the HEAD request and cache the artifact directly using a GET request.\n"
                },
                "bypassHeadRequests": {
                    "type": "boolean",
                    "description": "Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,\nHEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,\nArtifactory will bypass the HEAD request and cache the artifact directly using a GET request.\n"
                },
                "clientTlsCertificate": {
                    "type": "string"
                },
                "contentSynchronisation": {
                    "$ref": "#/types/artifactory:index/RemoteCargoRepositoryContentSynchronisation:RemoteCargoRepositoryContentSynchronisation",
                    "description": "Reference [JFROG Smart Remote Repositories](https://www.jfrog.com/confluence/display/JFROG/Smart+Remote+Repositories)\n"
                },
                "description": {
                    "type": "string"
                },
                "enableCookieManagement": {
                    "type": "boolean",
                    "description": "Enables cookie management if the remote repository uses cookies to manage client state.\n"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "failedRetrievalCachePeriodSecs": {
                    "type": "integer",
                    "deprecationMessage": "This field is not returned in a get payload but is offered on the UI. It's inserted here for inclusive and informational reasons. It does not function"
                },
                "gitRegistryUrl": {
                    "type": "string",
                    "description": "- This is the index url, expected to be a git repository. for remote artifactory use \"arturl/git/repokey.git\"\n"
                },
                "hardFail": {
                    "type": "boolean"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "The repository identifier. Must be unique system-wide\n"
                },
                "localAddress": {
                    "type": "string"
                },
                "missedCachePeriodSeconds": {
                    "type": "integer",
                    "description": "This is actually the missedRetrievalCachePeriodSecs in the API\n"
                },
                "notes": {
                    "type": "string"
                },
                "offline": {
                    "type": "boolean",
                    "description": "If set, Artifactory does not try to fetch remote artifacts. Only locally-cached artifacts are retrieved.\n"
                },
                "packageType": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                },
                "propagateQueryParams": {
                    "type": "boolean"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "proxy": {
                    "type": "string"
                },
                "remoteRepoLayoutRef": {
                    "type": "string"
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "retrievalCachePeriodSeconds": {
                    "type": "integer",
                    "description": "The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.\n"
                },
                "shareConfiguration": {
                    "type": "boolean"
                },
                "socketTimeoutMillis": {
                    "type": "integer"
                },
                "storeArtifactsLocally": {
                    "type": "boolean",
                    "description": "When set, the repository should store cached artifacts locally. When not set, artifacts are not stored locally, and\ndirect repository-to-client streaming is used. This can be useful for multi-server setups over a high-speed LAN, with\none Artifactory caching certain data on central storage, and streaming it directly to satellite pass-though Artifactory\nservers.\n"
                },
                "synchronizeProperties": {
                    "type": "boolean",
                    "description": "When set, remote artifacts are fetched along with their properties.\n"
                },
                "unusedArtifactsCleanupPeriodEnabled": {
                    "type": "boolean"
                },
                "unusedArtifactsCleanupPeriodHours": {
                    "type": "integer"
                },
                "url": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.\n"
                }
            },
            "required": [
                "allowAnyHostAuth",
                "blackedOut",
                "blockMismatchingMimeTypes",
                "bypassHeadRequests",
                "clientTlsCertificate",
                "contentSynchronisation",
                "description",
                "enableCookieManagement",
                "excludesPattern",
                "failedRetrievalCachePeriodSecs",
                "gitRegistryUrl",
                "hardFail",
                "includesPattern",
                "key",
                "missedCachePeriodSeconds",
                "offline",
                "packageType",
                "priorityResolution",
                "proxy",
                "remoteRepoLayoutRef",
                "repoLayoutRef",
                "retrievalCachePeriodSeconds",
                "shareConfiguration",
                "socketTimeoutMillis",
                "storeArtifactsLocally",
                "synchronizeProperties",
                "unusedArtifactsCleanupPeriodEnabled",
                "unusedArtifactsCleanupPeriodHours",
                "url"
            ],
            "inputProperties": {
                "allowAnyHostAuth": {
                    "type": "boolean",
                    "description": "Also known as 'Lenient Host Authentication', Allow credentials of this repository to be used on requests redirected to\nany other host.\n"
                },
                "anonymousAccess": {
                    "type": "boolean",
                    "description": "- Cargo client does not send credentials when performing download and search for crates. Enable this to allow anonymous access to these resources (only), note that this will override the security anonymous access option.\n"
                },
                "assumedOfflinePeriodSecs": {
                    "type": "integer",
                    "description": "The number of seconds the repository stays in assumed offline state after a connection error. At the end of this time,\nan online check is attempted in order to reset the offline status. A value of 0 means the repository is never assumed\noffline. Default to 300.\n"
                },
                "blackedOut": {
                    "type": "boolean",
                    "description": "(A.K.A 'Ignore Repository' on the UI) When set, the repository or its local cache do not participate in artifact\nresolution.\n"
                },
                "blockMismatchingMimeTypes": {
                    "type": "boolean",
                    "description": "Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,\nHEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,\nArtifactory will bypass the HEAD request and cache the artifact directly using a GET request.\n"
                },
                "bypassHeadRequests": {
                    "type": "boolean",
                    "description": "Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,\nHEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,\nArtifactory will bypass the HEAD request and cache the artifact directly using a GET request.\n"
                },
                "clientTlsCertificate": {
                    "type": "string"
                },
                "contentSynchronisation": {
                    "$ref": "#/types/artifactory:index/RemoteCargoRepositoryContentSynchronisation:RemoteCargoRepositoryContentSynchronisation",
                    "description": "Reference [JFROG Smart Remote Repositories](https://www.jfrog.com/confluence/display/JFROG/Smart+Remote+Repositories)\n"
                },
                "description": {
                    "type": "string"
                },
                "enableCookieManagement": {
                    "type": "boolean",
                    "description": "Enables cookie management if the remote repository uses cookies to manage client state.\n"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "gitRegistryUrl": {
                    "type": "string",
                    "description": "- This is the index url, expected to be a git repository. for remote artifactory use \"arturl/git/repokey.git\"\n"
                },
                "hardFail": {
                    "type": "boolean"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "The repository identifier. Must be unique system-wide\n"
                },
                "localAddress": {
                    "type": "string"
                },
                "missedCachePeriodSeconds": {
                    "type": "integer",
                    "description": "This is actually the missedRetrievalCachePeriodSecs in the API\n"
                },
                "notes": {
                    "type": "string"
                },
                "offline": {
                    "type": "boolean",
                    "description": "If set, Artifactory does not try to fetch remote artifacts. Only locally-cached artifacts are retrieved.\n"
                },
                "password": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                },
                "propagateQueryParams": {
                    "type": "boolean"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "proxy": {
                    "type": "string"
                },
                "remoteRepoLayoutRef": {
                    "type": "string"
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "retrievalCachePeriodSeconds": {
                    "type": "integer",
                    "description": "The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.\n"
                },
                "shareConfiguration": {
                    "type": "boolean"
                },
                "socketTimeoutMillis": {
                    "type": "integer"
                },
                "storeArtifactsLocally": {
                    "type": "boolean",
                    "description": "When set, the repository should store cached artifacts locally. When not set, artifacts are not stored locally, and\ndirect repository-to-client streaming is used. This can be useful for multi-server setups over a high-speed LAN, with\none Artifactory caching certain data on central storage, and streaming it directly to satellite pass-though Artifactory\nservers.\n"
                },
                "synchronizeProperties": {
                    "type": "boolean",
                    "description": "When set, remote artifacts are fetched along with their properties.\n"
                },
                "unusedArtifactsCleanupPeriodEnabled": {
                    "type": "boolean"
                },
                "unusedArtifactsCleanupPeriodHours": {
                    "type": "integer"
                },
                "url": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.\n"
                }
            },
            "requiredInputs": [
                "gitRegistryUrl",
                "key",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RemoteCargoRepository resources.\n",
                "properties": {
                    "allowAnyHostAuth": {
                        "type": "boolean",
                        "description": "Also known as 'Lenient Host Authentication', Allow credentials of this repository to be used on requests redirected to\nany other host.\n"
                    },
                    "anonymousAccess": {
                        "type": "boolean",
                        "description": "- Cargo client does not send credentials when performing download and search for crates. Enable this to allow anonymous access to these resources (only), note that this will override the security anonymous access option.\n"
                    },
                    "assumedOfflinePeriodSecs": {
                        "type": "integer",
                        "description": "The number of seconds the repository stays in assumed offline state after a connection error. At the end of this time,\nan online check is attempted in order to reset the offline status. A value of 0 means the repository is never assumed\noffline. Default to 300.\n"
                    },
                    "blackedOut": {
                        "type": "boolean",
                        "description": "(A.K.A 'Ignore Repository' on the UI) When set, the repository or its local cache do not participate in artifact\nresolution.\n"
                    },
                    "blockMismatchingMimeTypes": {
                        "type": "boolean",
                        "description": "Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,\nHEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,\nArtifactory will bypass the HEAD request and cache the artifact directly using a GET request.\n"
                    },
                    "bypassHeadRequests": {
                        "type": "boolean",
                        "description": "Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,\nHEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,\nArtifactory will bypass the HEAD request and cache the artifact directly using a GET request.\n"
                    },
                    "clientTlsCertificate": {
                        "type": "string"
                    },
                    "contentSynchronisation": {
                        "$ref": "#/types/artifactory:index/RemoteCargoRepositoryContentSynchronisation:RemoteCargoRepositoryContentSynchronisation",
                        "description": "Reference [JFROG Smart Remote Repositories](https://www.jfrog.com/confluence/display/JFROG/Smart+Remote+Repositories)\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "enableCookieManagement": {
                        "type": "boolean",
                        "description": "Enables cookie management if the remote repository uses cookies to manage client state.\n"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "failedRetrievalCachePeriodSecs": {
                        "type": "integer",
                        "deprecationMessage": "This field is not returned in a get payload but is offered on the UI. It's inserted here for inclusive and informational reasons. It does not function"
                    },
                    "gitRegistryUrl": {
                        "type": "string",
                        "description": "- This is the index url, expected to be a git repository. for remote artifactory use \"arturl/git/repokey.git\"\n"
                    },
                    "hardFail": {
                        "type": "boolean"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "The repository identifier. Must be unique system-wide\n"
                    },
                    "localAddress": {
                        "type": "string"
                    },
                    "missedCachePeriodSeconds": {
                        "type": "integer",
                        "description": "This is actually the missedRetrievalCachePeriodSecs in the API\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "offline": {
                        "type": "boolean",
                        "description": "If set, Artifactory does not try to fetch remote artifacts. Only locally-cached artifacts are retrieved.\n"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                    },
                    "propagateQueryParams": {
                        "type": "boolean"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "proxy": {
                        "type": "string"
                    },
                    "remoteRepoLayoutRef": {
                        "type": "string"
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "retrievalCachePeriodSeconds": {
                        "type": "integer",
                        "description": "The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.\n"
                    },
                    "shareConfiguration": {
                        "type": "boolean"
                    },
                    "socketTimeoutMillis": {
                        "type": "integer"
                    },
                    "storeArtifactsLocally": {
                        "type": "boolean",
                        "description": "When set, the repository should store cached artifacts locally. When not set, artifacts are not stored locally, and\ndirect repository-to-client streaming is used. This can be useful for multi-server setups over a high-speed LAN, with\none Artifactory caching certain data on central storage, and streaming it directly to satellite pass-though Artifactory\nservers.\n"
                    },
                    "synchronizeProperties": {
                        "type": "boolean",
                        "description": "When set, remote artifacts are fetched along with their properties.\n"
                    },
                    "unusedArtifactsCleanupPeriodEnabled": {
                        "type": "boolean"
                    },
                    "unusedArtifactsCleanupPeriodHours": {
                        "type": "integer"
                    },
                    "url": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/remoteDockerRepository:RemoteDockerRepository": {
            "description": "## # Artifactory Remote Repository Resource\n\nProvides an Artifactory remote `docker` repository resource. This provides docker specific fields and is the only way to\nget them\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nIncludes only new and relevant fields\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\n// Create a new Artifactory remote docker repository called my-remote-docker\nconst my_remote_docker = new artifactory.RemoteDockerRepository(\"my-remote-docker\", {\n    blockPushingSchema1: true,\n    enableTokenAuthentication: true,\n    externalDependenciesEnabled: true,\n    externalDependenciesPatterns: [\n        \"**/hub.docker.io/**\",\n        \"**/bintray.jfrog.io/**\",\n    ],\n    key: \"my-remote-docker\",\n    url: \"https://hub.docker.io/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\n# Create a new Artifactory remote docker repository called my-remote-docker\nmy_remote_docker = artifactory.RemoteDockerRepository(\"my-remote-docker\",\n    block_pushing_schema1=True,\n    enable_token_authentication=True,\n    external_dependencies_enabled=True,\n    external_dependencies_patterns=[\n        \"**/hub.docker.io/**\",\n        \"**/bintray.jfrog.io/**\",\n    ],\n    key=\"my-remote-docker\",\n    url=\"https://hub.docker.io/\")\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new Artifactory remote docker repository called my-remote-docker\n        var my_remote_docker = new Artifactory.RemoteDockerRepository(\"my-remote-docker\", new Artifactory.RemoteDockerRepositoryArgs\n        {\n            BlockPushingSchema1 = true,\n            EnableTokenAuthentication = true,\n            ExternalDependenciesEnabled = true,\n            ExternalDependenciesPatterns = \n            {\n                \"**/hub.docker.io/**\",\n                \"**/bintray.jfrog.io/**\",\n            },\n            Key = \"my-remote-docker\",\n            Url = \"https://hub.docker.io/\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewRemoteDockerRepository(ctx, \"my-remote-docker\", \u0026artifactory.RemoteDockerRepositoryArgs{\n\t\t\tBlockPushingSchema1:         pulumi.Bool(true),\n\t\t\tEnableTokenAuthentication:   pulumi.Bool(true),\n\t\t\tExternalDependenciesEnabled: pulumi.Bool(true),\n\t\t\tExternalDependenciesPatterns: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"**/hub.docker.io/**\"),\n\t\t\t\tpulumi.String(\"**/bintray.jfrog.io/**\"),\n\t\t\t},\n\t\t\tKey: pulumi.String(\"my-remote-docker\"),\n\t\t\tUrl: pulumi.String(\"https://hub.docker.io/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "allowAnyHostAuth": {
                    "type": "boolean",
                    "description": "Also known as 'Lenient Host Authentication', Allow credentials of this repository to be used on requests redirected to\nany other host.\n"
                },
                "assumedOfflinePeriodSecs": {
                    "type": "integer",
                    "description": "The number of seconds the repository stays in assumed offline state after a connection error. At the end of this time,\nan online check is attempted in order to reset the offline status. A value of 0 means the repository is never assumed\noffline. Default to 300.\n"
                },
                "blackedOut": {
                    "type": "boolean",
                    "description": "(A.K.A 'Ignore Repository' on the UI) When set, the repository or its local cache do not participate in artifact\nresolution.\n"
                },
                "blockMismatchingMimeTypes": {
                    "type": "boolean",
                    "description": "Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,\nHEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,\nArtifactory will bypass the HEAD request and cache the artifact directly using a GET request.\n"
                },
                "blockPushingSchema1": {
                    "type": "boolean",
                    "description": "When set, Artifactory will block the pulling of Docker images with manifest v2\nschema 1 from the remote repository (i.e. the upstream). It will be possible to pull images with manifest v2 schema 1\nthat exist in the cache.\n"
                },
                "bypassHeadRequests": {
                    "type": "boolean",
                    "description": "Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,\nHEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,\nArtifactory will bypass the HEAD request and cache the artifact directly using a GET request.\n"
                },
                "clientTlsCertificate": {
                    "type": "string"
                },
                "contentSynchronisation": {
                    "$ref": "#/types/artifactory:index/RemoteDockerRepositoryContentSynchronisation:RemoteDockerRepositoryContentSynchronisation",
                    "description": "Reference [JFROG Smart Remote Repositories](https://www.jfrog.com/confluence/display/JFROG/Smart+Remote+Repositories)\n"
                },
                "description": {
                    "type": "string"
                },
                "enableCookieManagement": {
                    "type": "boolean",
                    "description": "Enables cookie management if the remote repository uses cookies to manage client state.\n"
                },
                "enableTokenAuthentication": {
                    "type": "boolean",
                    "description": "Enable token (Bearer) based authentication.\n"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "externalDependenciesEnabled": {
                    "type": "boolean",
                    "description": "Also known as 'Foreign Layers Caching' on the UI\n"
                },
                "externalDependenciesPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An allow list of Ant-style path patterns that determine which remote VCS\n"
                },
                "failedRetrievalCachePeriodSecs": {
                    "type": "integer",
                    "deprecationMessage": "This field is not returned in a get payload but is offered on the UI. It's inserted here for inclusive and informational reasons. It does not function"
                },
                "hardFail": {
                    "type": "boolean"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "The repository identifier. Must be unique system-wide\n"
                },
                "localAddress": {
                    "type": "string"
                },
                "missedCachePeriodSeconds": {
                    "type": "integer",
                    "description": "This is actually the missedRetrievalCachePeriodSecs in the API\n"
                },
                "notes": {
                    "type": "string"
                },
                "offline": {
                    "type": "boolean",
                    "description": "If set, Artifactory does not try to fetch remote artifacts. Only locally-cached artifacts are retrieved.\n"
                },
                "packageType": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                },
                "propagateQueryParams": {
                    "type": "boolean"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "proxy": {
                    "type": "string"
                },
                "remoteRepoLayoutRef": {
                    "type": "string"
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "retrievalCachePeriodSeconds": {
                    "type": "integer",
                    "description": "The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.\n"
                },
                "shareConfiguration": {
                    "type": "boolean"
                },
                "socketTimeoutMillis": {
                    "type": "integer"
                },
                "storeArtifactsLocally": {
                    "type": "boolean",
                    "description": "When set, the repository should store cached artifacts locally. When not set, artifacts are not stored locally, and\ndirect repository-to-client streaming is used. This can be useful for multi-server setups over a high-speed LAN, with\none Artifactory caching certain data on central storage, and streaming it directly to satellite pass-though Artifactory\nservers.\n"
                },
                "synchronizeProperties": {
                    "type": "boolean",
                    "description": "When set, remote artifacts are fetched along with their properties.\n"
                },
                "unusedArtifactsCleanupPeriodEnabled": {
                    "type": "boolean"
                },
                "unusedArtifactsCleanupPeriodHours": {
                    "type": "integer"
                },
                "url": {
                    "type": "string",
                    "description": "- the remote repo URL. You kinda don't have a remote repo without it\n"
                },
                "username": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.\n"
                }
            },
            "required": [
                "allowAnyHostAuth",
                "blackedOut",
                "blockMismatchingMimeTypes",
                "blockPushingSchema1",
                "bypassHeadRequests",
                "clientTlsCertificate",
                "contentSynchronisation",
                "description",
                "enableCookieManagement",
                "enableTokenAuthentication",
                "excludesPattern",
                "externalDependenciesEnabled",
                "failedRetrievalCachePeriodSecs",
                "hardFail",
                "includesPattern",
                "key",
                "missedCachePeriodSeconds",
                "offline",
                "packageType",
                "priorityResolution",
                "proxy",
                "remoteRepoLayoutRef",
                "repoLayoutRef",
                "retrievalCachePeriodSeconds",
                "shareConfiguration",
                "socketTimeoutMillis",
                "storeArtifactsLocally",
                "synchronizeProperties",
                "unusedArtifactsCleanupPeriodEnabled",
                "unusedArtifactsCleanupPeriodHours",
                "url"
            ],
            "inputProperties": {
                "allowAnyHostAuth": {
                    "type": "boolean",
                    "description": "Also known as 'Lenient Host Authentication', Allow credentials of this repository to be used on requests redirected to\nany other host.\n"
                },
                "assumedOfflinePeriodSecs": {
                    "type": "integer",
                    "description": "The number of seconds the repository stays in assumed offline state after a connection error. At the end of this time,\nan online check is attempted in order to reset the offline status. A value of 0 means the repository is never assumed\noffline. Default to 300.\n"
                },
                "blackedOut": {
                    "type": "boolean",
                    "description": "(A.K.A 'Ignore Repository' on the UI) When set, the repository or its local cache do not participate in artifact\nresolution.\n"
                },
                "blockMismatchingMimeTypes": {
                    "type": "boolean",
                    "description": "Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,\nHEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,\nArtifactory will bypass the HEAD request and cache the artifact directly using a GET request.\n"
                },
                "blockPushingSchema1": {
                    "type": "boolean",
                    "description": "When set, Artifactory will block the pulling of Docker images with manifest v2\nschema 1 from the remote repository (i.e. the upstream). It will be possible to pull images with manifest v2 schema 1\nthat exist in the cache.\n"
                },
                "bypassHeadRequests": {
                    "type": "boolean",
                    "description": "Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,\nHEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,\nArtifactory will bypass the HEAD request and cache the artifact directly using a GET request.\n"
                },
                "clientTlsCertificate": {
                    "type": "string"
                },
                "contentSynchronisation": {
                    "$ref": "#/types/artifactory:index/RemoteDockerRepositoryContentSynchronisation:RemoteDockerRepositoryContentSynchronisation",
                    "description": "Reference [JFROG Smart Remote Repositories](https://www.jfrog.com/confluence/display/JFROG/Smart+Remote+Repositories)\n"
                },
                "description": {
                    "type": "string"
                },
                "enableCookieManagement": {
                    "type": "boolean",
                    "description": "Enables cookie management if the remote repository uses cookies to manage client state.\n"
                },
                "enableTokenAuthentication": {
                    "type": "boolean",
                    "description": "Enable token (Bearer) based authentication.\n"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "externalDependenciesEnabled": {
                    "type": "boolean",
                    "description": "Also known as 'Foreign Layers Caching' on the UI\n"
                },
                "externalDependenciesPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An allow list of Ant-style path patterns that determine which remote VCS\n"
                },
                "hardFail": {
                    "type": "boolean"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "The repository identifier. Must be unique system-wide\n"
                },
                "localAddress": {
                    "type": "string"
                },
                "missedCachePeriodSeconds": {
                    "type": "integer",
                    "description": "This is actually the missedRetrievalCachePeriodSecs in the API\n"
                },
                "notes": {
                    "type": "string"
                },
                "offline": {
                    "type": "boolean",
                    "description": "If set, Artifactory does not try to fetch remote artifacts. Only locally-cached artifacts are retrieved.\n"
                },
                "password": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                },
                "propagateQueryParams": {
                    "type": "boolean"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "proxy": {
                    "type": "string"
                },
                "remoteRepoLayoutRef": {
                    "type": "string"
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "retrievalCachePeriodSeconds": {
                    "type": "integer",
                    "description": "The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.\n"
                },
                "shareConfiguration": {
                    "type": "boolean"
                },
                "socketTimeoutMillis": {
                    "type": "integer"
                },
                "storeArtifactsLocally": {
                    "type": "boolean",
                    "description": "When set, the repository should store cached artifacts locally. When not set, artifacts are not stored locally, and\ndirect repository-to-client streaming is used. This can be useful for multi-server setups over a high-speed LAN, with\none Artifactory caching certain data on central storage, and streaming it directly to satellite pass-though Artifactory\nservers.\n"
                },
                "synchronizeProperties": {
                    "type": "boolean",
                    "description": "When set, remote artifacts are fetched along with their properties.\n"
                },
                "unusedArtifactsCleanupPeriodEnabled": {
                    "type": "boolean"
                },
                "unusedArtifactsCleanupPeriodHours": {
                    "type": "integer"
                },
                "url": {
                    "type": "string",
                    "description": "- the remote repo URL. You kinda don't have a remote repo without it\n"
                },
                "username": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.\n"
                }
            },
            "requiredInputs": [
                "key",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RemoteDockerRepository resources.\n",
                "properties": {
                    "allowAnyHostAuth": {
                        "type": "boolean",
                        "description": "Also known as 'Lenient Host Authentication', Allow credentials of this repository to be used on requests redirected to\nany other host.\n"
                    },
                    "assumedOfflinePeriodSecs": {
                        "type": "integer",
                        "description": "The number of seconds the repository stays in assumed offline state after a connection error. At the end of this time,\nan online check is attempted in order to reset the offline status. A value of 0 means the repository is never assumed\noffline. Default to 300.\n"
                    },
                    "blackedOut": {
                        "type": "boolean",
                        "description": "(A.K.A 'Ignore Repository' on the UI) When set, the repository or its local cache do not participate in artifact\nresolution.\n"
                    },
                    "blockMismatchingMimeTypes": {
                        "type": "boolean",
                        "description": "Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,\nHEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,\nArtifactory will bypass the HEAD request and cache the artifact directly using a GET request.\n"
                    },
                    "blockPushingSchema1": {
                        "type": "boolean",
                        "description": "When set, Artifactory will block the pulling of Docker images with manifest v2\nschema 1 from the remote repository (i.e. the upstream). It will be possible to pull images with manifest v2 schema 1\nthat exist in the cache.\n"
                    },
                    "bypassHeadRequests": {
                        "type": "boolean",
                        "description": "Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,\nHEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,\nArtifactory will bypass the HEAD request and cache the artifact directly using a GET request.\n"
                    },
                    "clientTlsCertificate": {
                        "type": "string"
                    },
                    "contentSynchronisation": {
                        "$ref": "#/types/artifactory:index/RemoteDockerRepositoryContentSynchronisation:RemoteDockerRepositoryContentSynchronisation",
                        "description": "Reference [JFROG Smart Remote Repositories](https://www.jfrog.com/confluence/display/JFROG/Smart+Remote+Repositories)\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "enableCookieManagement": {
                        "type": "boolean",
                        "description": "Enables cookie management if the remote repository uses cookies to manage client state.\n"
                    },
                    "enableTokenAuthentication": {
                        "type": "boolean",
                        "description": "Enable token (Bearer) based authentication.\n"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "externalDependenciesEnabled": {
                        "type": "boolean",
                        "description": "Also known as 'Foreign Layers Caching' on the UI\n"
                    },
                    "externalDependenciesPatterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An allow list of Ant-style path patterns that determine which remote VCS\n"
                    },
                    "failedRetrievalCachePeriodSecs": {
                        "type": "integer",
                        "deprecationMessage": "This field is not returned in a get payload but is offered on the UI. It's inserted here for inclusive and informational reasons. It does not function"
                    },
                    "hardFail": {
                        "type": "boolean"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "The repository identifier. Must be unique system-wide\n"
                    },
                    "localAddress": {
                        "type": "string"
                    },
                    "missedCachePeriodSeconds": {
                        "type": "integer",
                        "description": "This is actually the missedRetrievalCachePeriodSecs in the API\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "offline": {
                        "type": "boolean",
                        "description": "If set, Artifactory does not try to fetch remote artifacts. Only locally-cached artifacts are retrieved.\n"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                    },
                    "propagateQueryParams": {
                        "type": "boolean"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "proxy": {
                        "type": "string"
                    },
                    "remoteRepoLayoutRef": {
                        "type": "string"
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "retrievalCachePeriodSeconds": {
                        "type": "integer",
                        "description": "The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.\n"
                    },
                    "shareConfiguration": {
                        "type": "boolean"
                    },
                    "socketTimeoutMillis": {
                        "type": "integer"
                    },
                    "storeArtifactsLocally": {
                        "type": "boolean",
                        "description": "When set, the repository should store cached artifacts locally. When not set, artifacts are not stored locally, and\ndirect repository-to-client streaming is used. This can be useful for multi-server setups over a high-speed LAN, with\none Artifactory caching certain data on central storage, and streaming it directly to satellite pass-though Artifactory\nservers.\n"
                    },
                    "synchronizeProperties": {
                        "type": "boolean",
                        "description": "When set, remote artifacts are fetched along with their properties.\n"
                    },
                    "unusedArtifactsCleanupPeriodEnabled": {
                        "type": "boolean"
                    },
                    "unusedArtifactsCleanupPeriodHours": {
                        "type": "integer"
                    },
                    "url": {
                        "type": "string",
                        "description": "- the remote repo URL. You kinda don't have a remote repo without it\n"
                    },
                    "username": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/remoteHelmRepository:RemoteHelmRepository": {
            "description": "## # Artifactory Remote Repository Resource\n\nProvides an Artifactory remote `helm` repository resource. This provides helm specific fields and is the only way to get them.\nOfficial documentation can be found [here](https://www.jfrog.com/confluence/display/JFROG/Package+Management),\nalthough helm is (currently) not listed as a supported format\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nIncludes only new and relevant fields, for anything else, see: generic repo.\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst helm_remote = new artifactory.RemoteHelmRepository(\"helm-remote\", {\n    externalDependenciesEnabled: true,\n    externalDependenciesPatterns: [\"**github.com**\"],\n    helmChartsBaseUrl: \"https://foo.com\",\n    key: \"helm-remote-foo25\",\n    url: \"https://repo.chartcenter.io/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nhelm_remote = artifactory.RemoteHelmRepository(\"helm-remote\",\n    external_dependencies_enabled=True,\n    external_dependencies_patterns=[\"**github.com**\"],\n    helm_charts_base_url=\"https://foo.com\",\n    key=\"helm-remote-foo25\",\n    url=\"https://repo.chartcenter.io/\")\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var helm_remote = new Artifactory.RemoteHelmRepository(\"helm-remote\", new Artifactory.RemoteHelmRepositoryArgs\n        {\n            ExternalDependenciesEnabled = true,\n            ExternalDependenciesPatterns = \n            {\n                \"**github.com**\",\n            },\n            HelmChartsBaseUrl = \"https://foo.com\",\n            Key = \"helm-remote-foo25\",\n            Url = \"https://repo.chartcenter.io/\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewRemoteHelmRepository(ctx, \"helm-remote\", \u0026artifactory.RemoteHelmRepositoryArgs{\n\t\t\tExternalDependenciesEnabled: pulumi.Bool(true),\n\t\t\tExternalDependenciesPatterns: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"**github.com**\"),\n\t\t\t},\n\t\t\tHelmChartsBaseUrl: pulumi.String(\"https://foo.com\"),\n\t\t\tKey:               pulumi.String(\"helm-remote-foo25\"),\n\t\t\tUrl:               pulumi.String(\"https://repo.chartcenter.io/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "allowAnyHostAuth": {
                    "type": "boolean",
                    "description": "Also known as 'Lenient Host Authentication', Allow credentials of this repository to be used on requests redirected to\nany other host.\n"
                },
                "assumedOfflinePeriodSecs": {
                    "type": "integer",
                    "description": "The number of seconds the repository stays in assumed offline state after a connection error. At the end of this time,\nan online check is attempted in order to reset the offline status. A value of 0 means the repository is never assumed\noffline. Default to 300.\n"
                },
                "blackedOut": {
                    "type": "boolean",
                    "description": "(A.K.A 'Ignore Repository' on the UI) When set, the repository or its local cache do not participate in artifact\nresolution.\n"
                },
                "blockMismatchingMimeTypes": {
                    "type": "boolean",
                    "description": "Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,\nHEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,\nArtifactory will bypass the HEAD request and cache the artifact directly using a GET request.\n"
                },
                "bypassHeadRequests": {
                    "type": "boolean",
                    "description": "Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,\nHEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,\nArtifactory will bypass the HEAD request and cache the artifact directly using a GET request.\n"
                },
                "clientTlsCertificate": {
                    "type": "string"
                },
                "contentSynchronisation": {
                    "$ref": "#/types/artifactory:index/RemoteHelmRepositoryContentSynchronisation:RemoteHelmRepositoryContentSynchronisation",
                    "description": "Reference [JFROG Smart Remote Repositories](https://www.jfrog.com/confluence/display/JFROG/Smart+Remote+Repositories)\n"
                },
                "description": {
                    "type": "string"
                },
                "enableCookieManagement": {
                    "type": "boolean",
                    "description": "Enables cookie management if the remote repository uses cookies to manage client state.\n"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "externalDependenciesEnabled": {
                    "type": "boolean",
                    "description": "When set, external dependencies are rewritten.\n"
                },
                "externalDependenciesPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An Allow List of Ant-style path expressions that specify where external\ndependencies may be downloaded from. By default, this is an empty list which means that no dependencies may be downloaded\nfrom external sources. Note that the official documentation states the default is '**', which is correct when creating\nrepositories in the UI, but incorrect for the API.\n"
                },
                "failedRetrievalCachePeriodSecs": {
                    "type": "integer",
                    "deprecationMessage": "This field is not returned in a get payload but is offered on the UI. It's inserted here for inclusive and informational reasons. It does not function"
                },
                "hardFail": {
                    "type": "boolean"
                },
                "helmChartsBaseUrl": {
                    "type": "string",
                    "description": "- No documentation is available. Hopefully you know what this means\n"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "The repository identifier. Must be unique system-wide\n"
                },
                "localAddress": {
                    "type": "string"
                },
                "missedCachePeriodSeconds": {
                    "type": "integer",
                    "description": "This is actually the missedRetrievalCachePeriodSecs in the API\n"
                },
                "notes": {
                    "type": "string"
                },
                "offline": {
                    "type": "boolean",
                    "description": "If set, Artifactory does not try to fetch remote artifacts. Only locally-cached artifacts are retrieved.\n"
                },
                "packageType": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                },
                "propagateQueryParams": {
                    "type": "boolean"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "proxy": {
                    "type": "string"
                },
                "remoteRepoLayoutRef": {
                    "type": "string"
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "retrievalCachePeriodSeconds": {
                    "type": "integer",
                    "description": "The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.\n"
                },
                "shareConfiguration": {
                    "type": "boolean"
                },
                "socketTimeoutMillis": {
                    "type": "integer"
                },
                "storeArtifactsLocally": {
                    "type": "boolean",
                    "description": "When set, the repository should store cached artifacts locally. When not set, artifacts are not stored locally, and\ndirect repository-to-client streaming is used. This can be useful for multi-server setups over a high-speed LAN, with\none Artifactory caching certain data on central storage, and streaming it directly to satellite pass-though Artifactory\nservers.\n"
                },
                "synchronizeProperties": {
                    "type": "boolean",
                    "description": "When set, remote artifacts are fetched along with their properties.\n"
                },
                "unusedArtifactsCleanupPeriodEnabled": {
                    "type": "boolean"
                },
                "unusedArtifactsCleanupPeriodHours": {
                    "type": "integer"
                },
                "url": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.\n"
                }
            },
            "required": [
                "allowAnyHostAuth",
                "blackedOut",
                "blockMismatchingMimeTypes",
                "bypassHeadRequests",
                "clientTlsCertificate",
                "contentSynchronisation",
                "description",
                "enableCookieManagement",
                "excludesPattern",
                "failedRetrievalCachePeriodSecs",
                "hardFail",
                "includesPattern",
                "key",
                "missedCachePeriodSeconds",
                "offline",
                "packageType",
                "priorityResolution",
                "proxy",
                "remoteRepoLayoutRef",
                "repoLayoutRef",
                "retrievalCachePeriodSeconds",
                "shareConfiguration",
                "socketTimeoutMillis",
                "storeArtifactsLocally",
                "synchronizeProperties",
                "unusedArtifactsCleanupPeriodEnabled",
                "unusedArtifactsCleanupPeriodHours",
                "url"
            ],
            "inputProperties": {
                "allowAnyHostAuth": {
                    "type": "boolean",
                    "description": "Also known as 'Lenient Host Authentication', Allow credentials of this repository to be used on requests redirected to\nany other host.\n"
                },
                "assumedOfflinePeriodSecs": {
                    "type": "integer",
                    "description": "The number of seconds the repository stays in assumed offline state after a connection error. At the end of this time,\nan online check is attempted in order to reset the offline status. A value of 0 means the repository is never assumed\noffline. Default to 300.\n"
                },
                "blackedOut": {
                    "type": "boolean",
                    "description": "(A.K.A 'Ignore Repository' on the UI) When set, the repository or its local cache do not participate in artifact\nresolution.\n"
                },
                "blockMismatchingMimeTypes": {
                    "type": "boolean",
                    "description": "Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,\nHEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,\nArtifactory will bypass the HEAD request and cache the artifact directly using a GET request.\n"
                },
                "bypassHeadRequests": {
                    "type": "boolean",
                    "description": "Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,\nHEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,\nArtifactory will bypass the HEAD request and cache the artifact directly using a GET request.\n"
                },
                "clientTlsCertificate": {
                    "type": "string"
                },
                "contentSynchronisation": {
                    "$ref": "#/types/artifactory:index/RemoteHelmRepositoryContentSynchronisation:RemoteHelmRepositoryContentSynchronisation",
                    "description": "Reference [JFROG Smart Remote Repositories](https://www.jfrog.com/confluence/display/JFROG/Smart+Remote+Repositories)\n"
                },
                "description": {
                    "type": "string"
                },
                "enableCookieManagement": {
                    "type": "boolean",
                    "description": "Enables cookie management if the remote repository uses cookies to manage client state.\n"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "externalDependenciesEnabled": {
                    "type": "boolean",
                    "description": "When set, external dependencies are rewritten.\n"
                },
                "externalDependenciesPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An Allow List of Ant-style path expressions that specify where external\ndependencies may be downloaded from. By default, this is an empty list which means that no dependencies may be downloaded\nfrom external sources. Note that the official documentation states the default is '**', which is correct when creating\nrepositories in the UI, but incorrect for the API.\n"
                },
                "hardFail": {
                    "type": "boolean"
                },
                "helmChartsBaseUrl": {
                    "type": "string",
                    "description": "- No documentation is available. Hopefully you know what this means\n"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "The repository identifier. Must be unique system-wide\n"
                },
                "localAddress": {
                    "type": "string"
                },
                "missedCachePeriodSeconds": {
                    "type": "integer",
                    "description": "This is actually the missedRetrievalCachePeriodSecs in the API\n"
                },
                "notes": {
                    "type": "string"
                },
                "offline": {
                    "type": "boolean",
                    "description": "If set, Artifactory does not try to fetch remote artifacts. Only locally-cached artifacts are retrieved.\n"
                },
                "password": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                },
                "propagateQueryParams": {
                    "type": "boolean"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "proxy": {
                    "type": "string"
                },
                "remoteRepoLayoutRef": {
                    "type": "string"
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "retrievalCachePeriodSeconds": {
                    "type": "integer",
                    "description": "The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.\n"
                },
                "shareConfiguration": {
                    "type": "boolean"
                },
                "socketTimeoutMillis": {
                    "type": "integer"
                },
                "storeArtifactsLocally": {
                    "type": "boolean",
                    "description": "When set, the repository should store cached artifacts locally. When not set, artifacts are not stored locally, and\ndirect repository-to-client streaming is used. This can be useful for multi-server setups over a high-speed LAN, with\none Artifactory caching certain data on central storage, and streaming it directly to satellite pass-though Artifactory\nservers.\n"
                },
                "synchronizeProperties": {
                    "type": "boolean",
                    "description": "When set, remote artifacts are fetched along with their properties.\n"
                },
                "unusedArtifactsCleanupPeriodEnabled": {
                    "type": "boolean"
                },
                "unusedArtifactsCleanupPeriodHours": {
                    "type": "integer"
                },
                "url": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.\n"
                }
            },
            "requiredInputs": [
                "key",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RemoteHelmRepository resources.\n",
                "properties": {
                    "allowAnyHostAuth": {
                        "type": "boolean",
                        "description": "Also known as 'Lenient Host Authentication', Allow credentials of this repository to be used on requests redirected to\nany other host.\n"
                    },
                    "assumedOfflinePeriodSecs": {
                        "type": "integer",
                        "description": "The number of seconds the repository stays in assumed offline state after a connection error. At the end of this time,\nan online check is attempted in order to reset the offline status. A value of 0 means the repository is never assumed\noffline. Default to 300.\n"
                    },
                    "blackedOut": {
                        "type": "boolean",
                        "description": "(A.K.A 'Ignore Repository' on the UI) When set, the repository or its local cache do not participate in artifact\nresolution.\n"
                    },
                    "blockMismatchingMimeTypes": {
                        "type": "boolean",
                        "description": "Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,\nHEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,\nArtifactory will bypass the HEAD request and cache the artifact directly using a GET request.\n"
                    },
                    "bypassHeadRequests": {
                        "type": "boolean",
                        "description": "Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,\nHEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,\nArtifactory will bypass the HEAD request and cache the artifact directly using a GET request.\n"
                    },
                    "clientTlsCertificate": {
                        "type": "string"
                    },
                    "contentSynchronisation": {
                        "$ref": "#/types/artifactory:index/RemoteHelmRepositoryContentSynchronisation:RemoteHelmRepositoryContentSynchronisation",
                        "description": "Reference [JFROG Smart Remote Repositories](https://www.jfrog.com/confluence/display/JFROG/Smart+Remote+Repositories)\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "enableCookieManagement": {
                        "type": "boolean",
                        "description": "Enables cookie management if the remote repository uses cookies to manage client state.\n"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "externalDependenciesEnabled": {
                        "type": "boolean",
                        "description": "When set, external dependencies are rewritten.\n"
                    },
                    "externalDependenciesPatterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An Allow List of Ant-style path expressions that specify where external\ndependencies may be downloaded from. By default, this is an empty list which means that no dependencies may be downloaded\nfrom external sources. Note that the official documentation states the default is '**', which is correct when creating\nrepositories in the UI, but incorrect for the API.\n"
                    },
                    "failedRetrievalCachePeriodSecs": {
                        "type": "integer",
                        "deprecationMessage": "This field is not returned in a get payload but is offered on the UI. It's inserted here for inclusive and informational reasons. It does not function"
                    },
                    "hardFail": {
                        "type": "boolean"
                    },
                    "helmChartsBaseUrl": {
                        "type": "string",
                        "description": "- No documentation is available. Hopefully you know what this means\n"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "The repository identifier. Must be unique system-wide\n"
                    },
                    "localAddress": {
                        "type": "string"
                    },
                    "missedCachePeriodSeconds": {
                        "type": "integer",
                        "description": "This is actually the missedRetrievalCachePeriodSecs in the API\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "offline": {
                        "type": "boolean",
                        "description": "If set, Artifactory does not try to fetch remote artifacts. Only locally-cached artifacts are retrieved.\n"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                    },
                    "propagateQueryParams": {
                        "type": "boolean"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "proxy": {
                        "type": "string"
                    },
                    "remoteRepoLayoutRef": {
                        "type": "string"
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "retrievalCachePeriodSeconds": {
                        "type": "integer",
                        "description": "The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.\n"
                    },
                    "shareConfiguration": {
                        "type": "boolean"
                    },
                    "socketTimeoutMillis": {
                        "type": "integer"
                    },
                    "storeArtifactsLocally": {
                        "type": "boolean",
                        "description": "When set, the repository should store cached artifacts locally. When not set, artifacts are not stored locally, and\ndirect repository-to-client streaming is used. This can be useful for multi-server setups over a high-speed LAN, with\none Artifactory caching certain data on central storage, and streaming it directly to satellite pass-though Artifactory\nservers.\n"
                    },
                    "synchronizeProperties": {
                        "type": "boolean",
                        "description": "When set, remote artifacts are fetched along with their properties.\n"
                    },
                    "unusedArtifactsCleanupPeriodEnabled": {
                        "type": "boolean"
                    },
                    "unusedArtifactsCleanupPeriodHours": {
                        "type": "integer"
                    },
                    "url": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/remoteNpmRepository:RemoteNpmRepository": {
            "description": "## # Artifactory Remote npm Repository Resource\n\nProvides an Artifactory remote `npm` repository resource. This provides npm specific fields and is the only way to get them\nOfficial documentation can be found [here](https://www.jfrog.com/confluence/display/JFROG/npm+Registry)\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreate a new Artifactory remote npm repository called my-remote-npm\nfor brevity sake, only npm specific fields are included; for other fields see documentation for\ngeneric repo.\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst thing = new artifactory.RemoteNpmRepository(\"thing\", {\n    key: \"remote-thing-npm\",\n    listRemoteFolderItems: true,\n    mismatchingMimeTypesOverrideList: \"application/json,application/xml\",\n    url: \"https://registry.npmjs.org/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nthing = artifactory.RemoteNpmRepository(\"thing\",\n    key=\"remote-thing-npm\",\n    list_remote_folder_items=True,\n    mismatching_mime_types_override_list=\"application/json,application/xml\",\n    url=\"https://registry.npmjs.org/\")\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var thing = new Artifactory.RemoteNpmRepository(\"thing\", new Artifactory.RemoteNpmRepositoryArgs\n        {\n            Key = \"remote-thing-npm\",\n            ListRemoteFolderItems = true,\n            MismatchingMimeTypesOverrideList = \"application/json,application/xml\",\n            Url = \"https://registry.npmjs.org/\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewRemoteNpmRepository(ctx, \"thing\", \u0026artifactory.RemoteNpmRepositoryArgs{\n\t\t\tKey:                              pulumi.String(\"remote-thing-npm\"),\n\t\t\tListRemoteFolderItems:            pulumi.Bool(true),\n\t\t\tMismatchingMimeTypesOverrideList: pulumi.String(\"application/json,application/xml\"),\n\t\t\tUrl:                              pulumi.String(\"https://registry.npmjs.org/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "allowAnyHostAuth": {
                    "type": "boolean",
                    "description": "Also known as 'Lenient Host Authentication', Allow credentials of this repository to be used on requests redirected to\nany other host.\n"
                },
                "assumedOfflinePeriodSecs": {
                    "type": "integer",
                    "description": "The number of seconds the repository stays in assumed offline state after a connection error. At the end of this time,\nan online check is attempted in order to reset the offline status. A value of 0 means the repository is never assumed\noffline. Default to 300.\n"
                },
                "blackedOut": {
                    "type": "boolean",
                    "description": "(A.K.A 'Ignore Repository' on the UI) When set, the repository or its local cache do not participate in artifact\nresolution.\n"
                },
                "blockMismatchingMimeTypes": {
                    "type": "boolean",
                    "description": "Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,\nHEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,\nArtifactory will bypass the HEAD request and cache the artifact directly using a GET request.\n"
                },
                "bypassHeadRequests": {
                    "type": "boolean",
                    "description": "Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,\nHEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,\nArtifactory will bypass the HEAD request and cache the artifact directly using a GET request.\n"
                },
                "clientTlsCertificate": {
                    "type": "string"
                },
                "contentSynchronisation": {
                    "$ref": "#/types/artifactory:index/RemoteNpmRepositoryContentSynchronisation:RemoteNpmRepositoryContentSynchronisation",
                    "description": "Reference [JFROG Smart Remote Repositories](https://www.jfrog.com/confluence/display/JFROG/Smart+Remote+Repositories)\n"
                },
                "description": {
                    "type": "string"
                },
                "enableCookieManagement": {
                    "type": "boolean",
                    "description": "Enables cookie management if the remote repository uses cookies to manage client state.\n"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "failedRetrievalCachePeriodSecs": {
                    "type": "integer",
                    "deprecationMessage": "This field is not returned in a get payload but is offered on the UI. It's inserted here for inclusive and informational reasons. It does not function"
                },
                "hardFail": {
                    "type": "boolean"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "The repository identifier. Must be unique system-wide\n"
                },
                "listRemoteFolderItems": {
                    "type": "boolean",
                    "description": "- No documentation could be found. This field exist in the API but not in the UI\n"
                },
                "localAddress": {
                    "type": "string"
                },
                "mismatchingMimeTypesOverrideList": {
                    "type": "string",
                    "description": "- No documentation could be found. This field exist in the API but not in the UI\n"
                },
                "missedCachePeriodSeconds": {
                    "type": "integer",
                    "description": "This is actually the missedRetrievalCachePeriodSecs in the API\n"
                },
                "notes": {
                    "type": "string"
                },
                "offline": {
                    "type": "boolean",
                    "description": "If set, Artifactory does not try to fetch remote artifacts. Only locally-cached artifacts are retrieved.\n"
                },
                "packageType": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                },
                "propagateQueryParams": {
                    "type": "boolean"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "proxy": {
                    "type": "string"
                },
                "remoteRepoLayoutRef": {
                    "type": "string"
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "retrievalCachePeriodSeconds": {
                    "type": "integer",
                    "description": "The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.\n"
                },
                "shareConfiguration": {
                    "type": "boolean"
                },
                "socketTimeoutMillis": {
                    "type": "integer"
                },
                "storeArtifactsLocally": {
                    "type": "boolean",
                    "description": "When set, the repository should store cached artifacts locally. When not set, artifacts are not stored locally, and\ndirect repository-to-client streaming is used. This can be useful for multi-server setups over a high-speed LAN, with\none Artifactory caching certain data on central storage, and streaming it directly to satellite pass-though Artifactory\nservers.\n"
                },
                "synchronizeProperties": {
                    "type": "boolean",
                    "description": "When set, remote artifacts are fetched along with their properties.\n"
                },
                "unusedArtifactsCleanupPeriodEnabled": {
                    "type": "boolean"
                },
                "unusedArtifactsCleanupPeriodHours": {
                    "type": "integer"
                },
                "url": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.\n"
                }
            },
            "required": [
                "allowAnyHostAuth",
                "blackedOut",
                "blockMismatchingMimeTypes",
                "bypassHeadRequests",
                "clientTlsCertificate",
                "contentSynchronisation",
                "description",
                "enableCookieManagement",
                "excludesPattern",
                "failedRetrievalCachePeriodSecs",
                "hardFail",
                "includesPattern",
                "key",
                "missedCachePeriodSeconds",
                "offline",
                "packageType",
                "priorityResolution",
                "proxy",
                "remoteRepoLayoutRef",
                "repoLayoutRef",
                "retrievalCachePeriodSeconds",
                "shareConfiguration",
                "socketTimeoutMillis",
                "storeArtifactsLocally",
                "synchronizeProperties",
                "unusedArtifactsCleanupPeriodEnabled",
                "unusedArtifactsCleanupPeriodHours",
                "url"
            ],
            "inputProperties": {
                "allowAnyHostAuth": {
                    "type": "boolean",
                    "description": "Also known as 'Lenient Host Authentication', Allow credentials of this repository to be used on requests redirected to\nany other host.\n"
                },
                "assumedOfflinePeriodSecs": {
                    "type": "integer",
                    "description": "The number of seconds the repository stays in assumed offline state after a connection error. At the end of this time,\nan online check is attempted in order to reset the offline status. A value of 0 means the repository is never assumed\noffline. Default to 300.\n"
                },
                "blackedOut": {
                    "type": "boolean",
                    "description": "(A.K.A 'Ignore Repository' on the UI) When set, the repository or its local cache do not participate in artifact\nresolution.\n"
                },
                "blockMismatchingMimeTypes": {
                    "type": "boolean",
                    "description": "Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,\nHEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,\nArtifactory will bypass the HEAD request and cache the artifact directly using a GET request.\n"
                },
                "bypassHeadRequests": {
                    "type": "boolean",
                    "description": "Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,\nHEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,\nArtifactory will bypass the HEAD request and cache the artifact directly using a GET request.\n"
                },
                "clientTlsCertificate": {
                    "type": "string"
                },
                "contentSynchronisation": {
                    "$ref": "#/types/artifactory:index/RemoteNpmRepositoryContentSynchronisation:RemoteNpmRepositoryContentSynchronisation",
                    "description": "Reference [JFROG Smart Remote Repositories](https://www.jfrog.com/confluence/display/JFROG/Smart+Remote+Repositories)\n"
                },
                "description": {
                    "type": "string"
                },
                "enableCookieManagement": {
                    "type": "boolean",
                    "description": "Enables cookie management if the remote repository uses cookies to manage client state.\n"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "hardFail": {
                    "type": "boolean"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "The repository identifier. Must be unique system-wide\n"
                },
                "listRemoteFolderItems": {
                    "type": "boolean",
                    "description": "- No documentation could be found. This field exist in the API but not in the UI\n"
                },
                "localAddress": {
                    "type": "string"
                },
                "mismatchingMimeTypesOverrideList": {
                    "type": "string",
                    "description": "- No documentation could be found. This field exist in the API but not in the UI\n"
                },
                "missedCachePeriodSeconds": {
                    "type": "integer",
                    "description": "This is actually the missedRetrievalCachePeriodSecs in the API\n"
                },
                "notes": {
                    "type": "string"
                },
                "offline": {
                    "type": "boolean",
                    "description": "If set, Artifactory does not try to fetch remote artifacts. Only locally-cached artifacts are retrieved.\n"
                },
                "password": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                },
                "propagateQueryParams": {
                    "type": "boolean"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "proxy": {
                    "type": "string"
                },
                "remoteRepoLayoutRef": {
                    "type": "string"
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "retrievalCachePeriodSeconds": {
                    "type": "integer",
                    "description": "The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.\n"
                },
                "shareConfiguration": {
                    "type": "boolean"
                },
                "socketTimeoutMillis": {
                    "type": "integer"
                },
                "storeArtifactsLocally": {
                    "type": "boolean",
                    "description": "When set, the repository should store cached artifacts locally. When not set, artifacts are not stored locally, and\ndirect repository-to-client streaming is used. This can be useful for multi-server setups over a high-speed LAN, with\none Artifactory caching certain data on central storage, and streaming it directly to satellite pass-though Artifactory\nservers.\n"
                },
                "synchronizeProperties": {
                    "type": "boolean",
                    "description": "When set, remote artifacts are fetched along with their properties.\n"
                },
                "unusedArtifactsCleanupPeriodEnabled": {
                    "type": "boolean"
                },
                "unusedArtifactsCleanupPeriodHours": {
                    "type": "integer"
                },
                "url": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.\n"
                }
            },
            "requiredInputs": [
                "key",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RemoteNpmRepository resources.\n",
                "properties": {
                    "allowAnyHostAuth": {
                        "type": "boolean",
                        "description": "Also known as 'Lenient Host Authentication', Allow credentials of this repository to be used on requests redirected to\nany other host.\n"
                    },
                    "assumedOfflinePeriodSecs": {
                        "type": "integer",
                        "description": "The number of seconds the repository stays in assumed offline state after a connection error. At the end of this time,\nan online check is attempted in order to reset the offline status. A value of 0 means the repository is never assumed\noffline. Default to 300.\n"
                    },
                    "blackedOut": {
                        "type": "boolean",
                        "description": "(A.K.A 'Ignore Repository' on the UI) When set, the repository or its local cache do not participate in artifact\nresolution.\n"
                    },
                    "blockMismatchingMimeTypes": {
                        "type": "boolean",
                        "description": "Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,\nHEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,\nArtifactory will bypass the HEAD request and cache the artifact directly using a GET request.\n"
                    },
                    "bypassHeadRequests": {
                        "type": "boolean",
                        "description": "Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,\nHEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,\nArtifactory will bypass the HEAD request and cache the artifact directly using a GET request.\n"
                    },
                    "clientTlsCertificate": {
                        "type": "string"
                    },
                    "contentSynchronisation": {
                        "$ref": "#/types/artifactory:index/RemoteNpmRepositoryContentSynchronisation:RemoteNpmRepositoryContentSynchronisation",
                        "description": "Reference [JFROG Smart Remote Repositories](https://www.jfrog.com/confluence/display/JFROG/Smart+Remote+Repositories)\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "enableCookieManagement": {
                        "type": "boolean",
                        "description": "Enables cookie management if the remote repository uses cookies to manage client state.\n"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "failedRetrievalCachePeriodSecs": {
                        "type": "integer",
                        "deprecationMessage": "This field is not returned in a get payload but is offered on the UI. It's inserted here for inclusive and informational reasons. It does not function"
                    },
                    "hardFail": {
                        "type": "boolean"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "The repository identifier. Must be unique system-wide\n"
                    },
                    "listRemoteFolderItems": {
                        "type": "boolean",
                        "description": "- No documentation could be found. This field exist in the API but not in the UI\n"
                    },
                    "localAddress": {
                        "type": "string"
                    },
                    "mismatchingMimeTypesOverrideList": {
                        "type": "string",
                        "description": "- No documentation could be found. This field exist in the API but not in the UI\n"
                    },
                    "missedCachePeriodSeconds": {
                        "type": "integer",
                        "description": "This is actually the missedRetrievalCachePeriodSecs in the API\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "offline": {
                        "type": "boolean",
                        "description": "If set, Artifactory does not try to fetch remote artifacts. Only locally-cached artifacts are retrieved.\n"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                    },
                    "propagateQueryParams": {
                        "type": "boolean"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "proxy": {
                        "type": "string"
                    },
                    "remoteRepoLayoutRef": {
                        "type": "string"
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "retrievalCachePeriodSeconds": {
                        "type": "integer",
                        "description": "The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.\n"
                    },
                    "shareConfiguration": {
                        "type": "boolean"
                    },
                    "socketTimeoutMillis": {
                        "type": "integer"
                    },
                    "storeArtifactsLocally": {
                        "type": "boolean",
                        "description": "When set, the repository should store cached artifacts locally. When not set, artifacts are not stored locally, and\ndirect repository-to-client streaming is used. This can be useful for multi-server setups over a high-speed LAN, with\none Artifactory caching certain data on central storage, and streaming it directly to satellite pass-though Artifactory\nservers.\n"
                    },
                    "synchronizeProperties": {
                        "type": "boolean",
                        "description": "When set, remote artifacts are fetched along with their properties.\n"
                    },
                    "unusedArtifactsCleanupPeriodEnabled": {
                        "type": "boolean"
                    },
                    "unusedArtifactsCleanupPeriodHours": {
                        "type": "integer"
                    },
                    "url": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/remotePypiRepository:RemotePypiRepository": {
            "description": "## # Artifactory Remote Repository Resource\n\nProvides an Artifactory remote `pypi` repository resource. This provides pypi specific fields and is the only way to get them.\nOfficial documentation can be found [here](https://www.jfrog.com/confluence/display/JFROG/Package+Management).\nPypi specific documentation can be found [here](https://www.jfrog.com/confluence/display/JFROG/PyPI+Repositories).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nIncludes only new and relevant fields, for anything else, see: generic repo.\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst pypi_remote = new artifactory.RemotePypiRepository(\"pypi-remote\", {\n    key: \"pypi-remote-foo\",\n    pypiRegistryUrl: \"https://pypi.org\",\n    pypiRepositorySuffix: \"simple\",\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\npypi_remote = artifactory.RemotePypiRepository(\"pypi-remote\",\n    key=\"pypi-remote-foo\",\n    pypi_registry_url=\"https://pypi.org\",\n    pypi_repository_suffix=\"simple\")\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var pypi_remote = new Artifactory.RemotePypiRepository(\"pypi-remote\", new Artifactory.RemotePypiRepositoryArgs\n        {\n            Key = \"pypi-remote-foo\",\n            PypiRegistryUrl = \"https://pypi.org\",\n            PypiRepositorySuffix = \"simple\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewRemotePypiRepository(ctx, \"pypi-remote\", \u0026artifactory.RemotePypiRepositoryArgs{\n\t\t\tKey:                  pulumi.String(\"pypi-remote-foo\"),\n\t\t\tPypiRegistryUrl:      pulumi.String(\"https://pypi.org\"),\n\t\t\tPypiRepositorySuffix: pulumi.String(\"simple\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "allowAnyHostAuth": {
                    "type": "boolean",
                    "description": "Also known as 'Lenient Host Authentication', Allow credentials of this repository to be used on requests redirected to\nany other host.\n"
                },
                "assumedOfflinePeriodSecs": {
                    "type": "integer",
                    "description": "The number of seconds the repository stays in assumed offline state after a connection error. At the end of this time,\nan online check is attempted in order to reset the offline status. A value of 0 means the repository is never assumed\noffline. Default to 300.\n"
                },
                "blackedOut": {
                    "type": "boolean",
                    "description": "(A.K.A 'Ignore Repository' on the UI) When set, the repository or its local cache do not participate in artifact\nresolution.\n"
                },
                "blockMismatchingMimeTypes": {
                    "type": "boolean",
                    "description": "Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,\nHEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,\nArtifactory will bypass the HEAD request and cache the artifact directly using a GET request.\n"
                },
                "bypassHeadRequests": {
                    "type": "boolean",
                    "description": "Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,\nHEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,\nArtifactory will bypass the HEAD request and cache the artifact directly using a GET request.\n"
                },
                "clientTlsCertificate": {
                    "type": "string"
                },
                "contentSynchronisation": {
                    "$ref": "#/types/artifactory:index/RemotePypiRepositoryContentSynchronisation:RemotePypiRepositoryContentSynchronisation",
                    "description": "Reference [JFROG Smart Remote Repositories](https://www.jfrog.com/confluence/display/JFROG/Smart+Remote+Repositories)\n"
                },
                "description": {
                    "type": "string"
                },
                "enableCookieManagement": {
                    "type": "boolean",
                    "description": "Enables cookie management if the remote repository uses cookies to manage client state.\n"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "failedRetrievalCachePeriodSecs": {
                    "type": "integer",
                    "deprecationMessage": "This field is not returned in a get payload but is offered on the UI. It's inserted here for inclusive and informational reasons. It does not function"
                },
                "hardFail": {
                    "type": "boolean"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "The repository identifier. Must be unique system-wide\n"
                },
                "localAddress": {
                    "type": "string"
                },
                "missedCachePeriodSeconds": {
                    "type": "integer",
                    "description": "This is actually the missedRetrievalCachePeriodSecs in the API\n"
                },
                "notes": {
                    "type": "string"
                },
                "offline": {
                    "type": "boolean",
                    "description": "If set, Artifactory does not try to fetch remote artifacts. Only locally-cached artifacts are retrieved.\n"
                },
                "packageType": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                },
                "propagateQueryParams": {
                    "type": "boolean"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "proxy": {
                    "type": "string"
                },
                "pypiRegistryUrl": {
                    "type": "string",
                    "description": "To configure the remote repo to proxy public external PyPI repository, or a PyPI repository hosted on another Artifactory server. See JFrog Pypi documentation [here](https://www.jfrog.com/confluence/display/JFROG/PyPI+Repositories) for the usage details. Default value is 'https://pypi.org'.\n"
                },
                "pypiRepositorySuffix": {
                    "type": "string",
                    "description": "Usually should be left as a default for 'simple', unless the remote is a PyPI server that has custom registry suffix, like +simple in DevPI. Default value is 'simple'.\n"
                },
                "remoteRepoLayoutRef": {
                    "type": "string"
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "retrievalCachePeriodSeconds": {
                    "type": "integer",
                    "description": "The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.\n"
                },
                "shareConfiguration": {
                    "type": "boolean"
                },
                "socketTimeoutMillis": {
                    "type": "integer"
                },
                "storeArtifactsLocally": {
                    "type": "boolean",
                    "description": "When set, the repository should store cached artifacts locally. When not set, artifacts are not stored locally, and\ndirect repository-to-client streaming is used. This can be useful for multi-server setups over a high-speed LAN, with\none Artifactory caching certain data on central storage, and streaming it directly to satellite pass-though Artifactory\nservers.\n"
                },
                "synchronizeProperties": {
                    "type": "boolean",
                    "description": "When set, remote artifacts are fetched along with their properties.\n"
                },
                "unusedArtifactsCleanupPeriodEnabled": {
                    "type": "boolean"
                },
                "unusedArtifactsCleanupPeriodHours": {
                    "type": "integer"
                },
                "url": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.\n"
                }
            },
            "required": [
                "allowAnyHostAuth",
                "blackedOut",
                "blockMismatchingMimeTypes",
                "bypassHeadRequests",
                "clientTlsCertificate",
                "contentSynchronisation",
                "description",
                "enableCookieManagement",
                "excludesPattern",
                "failedRetrievalCachePeriodSecs",
                "hardFail",
                "includesPattern",
                "key",
                "missedCachePeriodSeconds",
                "offline",
                "packageType",
                "priorityResolution",
                "proxy",
                "remoteRepoLayoutRef",
                "repoLayoutRef",
                "retrievalCachePeriodSeconds",
                "shareConfiguration",
                "socketTimeoutMillis",
                "storeArtifactsLocally",
                "synchronizeProperties",
                "unusedArtifactsCleanupPeriodEnabled",
                "unusedArtifactsCleanupPeriodHours",
                "url"
            ],
            "inputProperties": {
                "allowAnyHostAuth": {
                    "type": "boolean",
                    "description": "Also known as 'Lenient Host Authentication', Allow credentials of this repository to be used on requests redirected to\nany other host.\n"
                },
                "assumedOfflinePeriodSecs": {
                    "type": "integer",
                    "description": "The number of seconds the repository stays in assumed offline state after a connection error. At the end of this time,\nan online check is attempted in order to reset the offline status. A value of 0 means the repository is never assumed\noffline. Default to 300.\n"
                },
                "blackedOut": {
                    "type": "boolean",
                    "description": "(A.K.A 'Ignore Repository' on the UI) When set, the repository or its local cache do not participate in artifact\nresolution.\n"
                },
                "blockMismatchingMimeTypes": {
                    "type": "boolean",
                    "description": "Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,\nHEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,\nArtifactory will bypass the HEAD request and cache the artifact directly using a GET request.\n"
                },
                "bypassHeadRequests": {
                    "type": "boolean",
                    "description": "Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,\nHEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,\nArtifactory will bypass the HEAD request and cache the artifact directly using a GET request.\n"
                },
                "clientTlsCertificate": {
                    "type": "string"
                },
                "contentSynchronisation": {
                    "$ref": "#/types/artifactory:index/RemotePypiRepositoryContentSynchronisation:RemotePypiRepositoryContentSynchronisation",
                    "description": "Reference [JFROG Smart Remote Repositories](https://www.jfrog.com/confluence/display/JFROG/Smart+Remote+Repositories)\n"
                },
                "description": {
                    "type": "string"
                },
                "enableCookieManagement": {
                    "type": "boolean",
                    "description": "Enables cookie management if the remote repository uses cookies to manage client state.\n"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "hardFail": {
                    "type": "boolean"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "The repository identifier. Must be unique system-wide\n"
                },
                "localAddress": {
                    "type": "string"
                },
                "missedCachePeriodSeconds": {
                    "type": "integer",
                    "description": "This is actually the missedRetrievalCachePeriodSecs in the API\n"
                },
                "notes": {
                    "type": "string"
                },
                "offline": {
                    "type": "boolean",
                    "description": "If set, Artifactory does not try to fetch remote artifacts. Only locally-cached artifacts are retrieved.\n"
                },
                "password": {
                    "type": "string"
                },
                "priorityResolution": {
                    "type": "boolean",
                    "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                },
                "propagateQueryParams": {
                    "type": "boolean"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "proxy": {
                    "type": "string"
                },
                "pypiRegistryUrl": {
                    "type": "string",
                    "description": "To configure the remote repo to proxy public external PyPI repository, or a PyPI repository hosted on another Artifactory server. See JFrog Pypi documentation [here](https://www.jfrog.com/confluence/display/JFROG/PyPI+Repositories) for the usage details. Default value is 'https://pypi.org'.\n"
                },
                "pypiRepositorySuffix": {
                    "type": "string",
                    "description": "Usually should be left as a default for 'simple', unless the remote is a PyPI server that has custom registry suffix, like +simple in DevPI. Default value is 'simple'.\n"
                },
                "remoteRepoLayoutRef": {
                    "type": "string"
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "retrievalCachePeriodSeconds": {
                    "type": "integer",
                    "description": "The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.\n"
                },
                "shareConfiguration": {
                    "type": "boolean"
                },
                "socketTimeoutMillis": {
                    "type": "integer"
                },
                "storeArtifactsLocally": {
                    "type": "boolean",
                    "description": "When set, the repository should store cached artifacts locally. When not set, artifacts are not stored locally, and\ndirect repository-to-client streaming is used. This can be useful for multi-server setups over a high-speed LAN, with\none Artifactory caching certain data on central storage, and streaming it directly to satellite pass-though Artifactory\nservers.\n"
                },
                "synchronizeProperties": {
                    "type": "boolean",
                    "description": "When set, remote artifacts are fetched along with their properties.\n"
                },
                "unusedArtifactsCleanupPeriodEnabled": {
                    "type": "boolean"
                },
                "unusedArtifactsCleanupPeriodHours": {
                    "type": "integer"
                },
                "url": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean",
                    "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.\n"
                }
            },
            "requiredInputs": [
                "key",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RemotePypiRepository resources.\n",
                "properties": {
                    "allowAnyHostAuth": {
                        "type": "boolean",
                        "description": "Also known as 'Lenient Host Authentication', Allow credentials of this repository to be used on requests redirected to\nany other host.\n"
                    },
                    "assumedOfflinePeriodSecs": {
                        "type": "integer",
                        "description": "The number of seconds the repository stays in assumed offline state after a connection error. At the end of this time,\nan online check is attempted in order to reset the offline status. A value of 0 means the repository is never assumed\noffline. Default to 300.\n"
                    },
                    "blackedOut": {
                        "type": "boolean",
                        "description": "(A.K.A 'Ignore Repository' on the UI) When set, the repository or its local cache do not participate in artifact\nresolution.\n"
                    },
                    "blockMismatchingMimeTypes": {
                        "type": "boolean",
                        "description": "Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,\nHEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,\nArtifactory will bypass the HEAD request and cache the artifact directly using a GET request.\n"
                    },
                    "bypassHeadRequests": {
                        "type": "boolean",
                        "description": "Before caching an artifact, Artifactory first sends a HEAD request to the remote resource. In some remote resources,\nHEAD requests are disallowed and therefore rejected, even though downloading the artifact is allowed. When checked,\nArtifactory will bypass the HEAD request and cache the artifact directly using a GET request.\n"
                    },
                    "clientTlsCertificate": {
                        "type": "string"
                    },
                    "contentSynchronisation": {
                        "$ref": "#/types/artifactory:index/RemotePypiRepositoryContentSynchronisation:RemotePypiRepositoryContentSynchronisation",
                        "description": "Reference [JFROG Smart Remote Repositories](https://www.jfrog.com/confluence/display/JFROG/Smart+Remote+Repositories)\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "enableCookieManagement": {
                        "type": "boolean",
                        "description": "Enables cookie management if the remote repository uses cookies to manage client state.\n"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "failedRetrievalCachePeriodSecs": {
                        "type": "integer",
                        "deprecationMessage": "This field is not returned in a get payload but is offered on the UI. It's inserted here for inclusive and informational reasons. It does not function"
                    },
                    "hardFail": {
                        "type": "boolean"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "The repository identifier. Must be unique system-wide\n"
                    },
                    "localAddress": {
                        "type": "string"
                    },
                    "missedCachePeriodSeconds": {
                        "type": "integer",
                        "description": "This is actually the missedRetrievalCachePeriodSecs in the API\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "offline": {
                        "type": "boolean",
                        "description": "If set, Artifactory does not try to fetch remote artifacts. Only locally-cached artifacts are retrieved.\n"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "priorityResolution": {
                        "type": "boolean",
                        "description": "Setting repositories with priority will cause metadata to be merged only from repositories set with this field\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                    },
                    "propagateQueryParams": {
                        "type": "boolean"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "proxy": {
                        "type": "string"
                    },
                    "pypiRegistryUrl": {
                        "type": "string",
                        "description": "To configure the remote repo to proxy public external PyPI repository, or a PyPI repository hosted on another Artifactory server. See JFrog Pypi documentation [here](https://www.jfrog.com/confluence/display/JFROG/PyPI+Repositories) for the usage details. Default value is 'https://pypi.org'.\n"
                    },
                    "pypiRepositorySuffix": {
                        "type": "string",
                        "description": "Usually should be left as a default for 'simple', unless the remote is a PyPI server that has custom registry suffix, like +simple in DevPI. Default value is 'simple'.\n"
                    },
                    "remoteRepoLayoutRef": {
                        "type": "string"
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "retrievalCachePeriodSeconds": {
                        "type": "integer",
                        "description": "The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.\n"
                    },
                    "shareConfiguration": {
                        "type": "boolean"
                    },
                    "socketTimeoutMillis": {
                        "type": "integer"
                    },
                    "storeArtifactsLocally": {
                        "type": "boolean",
                        "description": "When set, the repository should store cached artifacts locally. When not set, artifacts are not stored locally, and\ndirect repository-to-client streaming is used. This can be useful for multi-server setups over a high-speed LAN, with\none Artifactory caching certain data on central storage, and streaming it directly to satellite pass-though Artifactory\nservers.\n"
                    },
                    "synchronizeProperties": {
                        "type": "boolean",
                        "description": "When set, remote artifacts are fetched along with their properties.\n"
                    },
                    "unusedArtifactsCleanupPeriodEnabled": {
                        "type": "boolean"
                    },
                    "unusedArtifactsCleanupPeriodHours": {
                        "type": "integer"
                    },
                    "url": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean",
                        "description": "Enable Indexing In Xray. Repository will be indexed with the default retention period. You will be able to change it via Xray settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/remoteRepository:RemoteRepository": {
            "description": "\n\n\n## Import\n\nRemote repositories can be imported using their name, e.g.\n\n```sh\n $ pulumi import artifactory:index/remoteRepository:RemoteRepository my-remote my-remote\n```\n\n ",
            "properties": {
                "allowAnyHostAuth": {
                    "type": "boolean"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "blockMismatchingMimeTypes": {
                    "type": "boolean"
                },
                "bowerRegistryUrl": {
                    "type": "string"
                },
                "bypassHeadRequests": {
                    "type": "boolean"
                },
                "clientTlsCertificate": {
                    "type": "string"
                },
                "contentSynchronisation": {
                    "$ref": "#/types/artifactory:index/RemoteRepositoryContentSynchronisation:RemoteRepositoryContentSynchronisation",
                    "description": "Reference [JFROG Smart Remote Repositories](https://www.jfrog.com/confluence/display/JFROG/Smart+Remote+Repositories)\n"
                },
                "description": {
                    "type": "string"
                },
                "downloadContextPath": {
                    "type": "string"
                },
                "enableCookieManagement": {
                    "type": "boolean"
                },
                "enableTokenAuthentication": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "feedContextPath": {
                    "type": "string"
                },
                "fetchJarsEagerly": {
                    "type": "boolean"
                },
                "fetchSourcesEagerly": {
                    "type": "boolean"
                },
                "forceNugetAuthentication": {
                    "type": "boolean"
                },
                "handleReleases": {
                    "type": "boolean"
                },
                "handleSnapshots": {
                    "type": "boolean"
                },
                "hardFail": {
                    "type": "boolean"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "localAddress": {
                    "type": "string"
                },
                "maxUniqueSnapshots": {
                    "type": "integer"
                },
                "missedCachePeriodSeconds": {
                    "type": "integer"
                },
                "notes": {
                    "type": "string"
                },
                "offline": {
                    "type": "boolean"
                },
                "packageType": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "description": "Requires password encryption to be turned off `POST /api/system/decrypt`\n"
                },
                "propagateQueryParams": {
                    "type": "boolean"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "proxy": {
                    "type": "string",
                    "description": "Proxy key from Artifactory Proxies setting\n"
                },
                "pypiRegistryUrl": {
                    "type": "string"
                },
                "remoteRepoChecksumPolicyType": {
                    "type": "string"
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "retrievalCachePeriodSeconds": {
                    "type": "integer",
                    "description": "The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.\n"
                },
                "shareConfiguration": {
                    "type": "boolean"
                },
                "socketTimeoutMillis": {
                    "type": "integer"
                },
                "storeArtifactsLocally": {
                    "type": "boolean"
                },
                "suppressPomConsistencyChecks": {
                    "type": "boolean"
                },
                "synchronizeProperties": {
                    "type": "boolean"
                },
                "unusedArtifactsCleanupPeriodHours": {
                    "type": "integer"
                },
                "url": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "v3FeedUrl": {
                    "type": "string"
                },
                "vcsGitDownloadUrl": {
                    "type": "string"
                },
                "vcsGitProvider": {
                    "type": "string"
                },
                "vcsType": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean"
                }
            },
            "required": [
                "allowAnyHostAuth",
                "blackedOut",
                "blockMismatchingMimeTypes",
                "bowerRegistryUrl",
                "bypassHeadRequests",
                "clientTlsCertificate",
                "contentSynchronisation",
                "enableCookieManagement",
                "enableTokenAuthentication",
                "excludesPattern",
                "fetchJarsEagerly",
                "fetchSourcesEagerly",
                "forceNugetAuthentication",
                "handleReleases",
                "handleSnapshots",
                "hardFail",
                "includesPattern",
                "key",
                "maxUniqueSnapshots",
                "missedCachePeriodSeconds",
                "offline",
                "propagateQueryParams",
                "pypiRegistryUrl",
                "remoteRepoChecksumPolicyType",
                "repoLayoutRef",
                "retrievalCachePeriodSeconds",
                "shareConfiguration",
                "socketTimeoutMillis",
                "storeArtifactsLocally",
                "suppressPomConsistencyChecks",
                "synchronizeProperties",
                "unusedArtifactsCleanupPeriodHours",
                "url",
                "vcsGitDownloadUrl",
                "vcsGitProvider",
                "vcsType",
                "xrayIndex"
            ],
            "inputProperties": {
                "allowAnyHostAuth": {
                    "type": "boolean"
                },
                "blackedOut": {
                    "type": "boolean"
                },
                "blockMismatchingMimeTypes": {
                    "type": "boolean"
                },
                "bowerRegistryUrl": {
                    "type": "string"
                },
                "bypassHeadRequests": {
                    "type": "boolean"
                },
                "clientTlsCertificate": {
                    "type": "string"
                },
                "contentSynchronisation": {
                    "$ref": "#/types/artifactory:index/RemoteRepositoryContentSynchronisation:RemoteRepositoryContentSynchronisation",
                    "description": "Reference [JFROG Smart Remote Repositories](https://www.jfrog.com/confluence/display/JFROG/Smart+Remote+Repositories)\n"
                },
                "description": {
                    "type": "string"
                },
                "downloadContextPath": {
                    "type": "string"
                },
                "enableCookieManagement": {
                    "type": "boolean"
                },
                "enableTokenAuthentication": {
                    "type": "boolean"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "feedContextPath": {
                    "type": "string"
                },
                "fetchJarsEagerly": {
                    "type": "boolean"
                },
                "fetchSourcesEagerly": {
                    "type": "boolean"
                },
                "forceNugetAuthentication": {
                    "type": "boolean"
                },
                "handleReleases": {
                    "type": "boolean"
                },
                "handleSnapshots": {
                    "type": "boolean"
                },
                "hardFail": {
                    "type": "boolean"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "localAddress": {
                    "type": "string"
                },
                "maxUniqueSnapshots": {
                    "type": "integer"
                },
                "missedCachePeriodSeconds": {
                    "type": "integer"
                },
                "notes": {
                    "type": "string"
                },
                "offline": {
                    "type": "boolean"
                },
                "packageType": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "description": "Requires password encryption to be turned off `POST /api/system/decrypt`\n"
                },
                "propagateQueryParams": {
                    "type": "boolean"
                },
                "propertySets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "proxy": {
                    "type": "string",
                    "description": "Proxy key from Artifactory Proxies setting\n"
                },
                "pypiRegistryUrl": {
                    "type": "string"
                },
                "remoteRepoChecksumPolicyType": {
                    "type": "string"
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "retrievalCachePeriodSeconds": {
                    "type": "integer",
                    "description": "The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.\n"
                },
                "shareConfiguration": {
                    "type": "boolean"
                },
                "socketTimeoutMillis": {
                    "type": "integer"
                },
                "storeArtifactsLocally": {
                    "type": "boolean"
                },
                "suppressPomConsistencyChecks": {
                    "type": "boolean"
                },
                "synchronizeProperties": {
                    "type": "boolean"
                },
                "unusedArtifactsCleanupPeriodHours": {
                    "type": "integer"
                },
                "url": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "v3FeedUrl": {
                    "type": "string"
                },
                "vcsGitDownloadUrl": {
                    "type": "string"
                },
                "vcsGitProvider": {
                    "type": "string"
                },
                "vcsType": {
                    "type": "string"
                },
                "xrayIndex": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "key",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RemoteRepository resources.\n",
                "properties": {
                    "allowAnyHostAuth": {
                        "type": "boolean"
                    },
                    "blackedOut": {
                        "type": "boolean"
                    },
                    "blockMismatchingMimeTypes": {
                        "type": "boolean"
                    },
                    "bowerRegistryUrl": {
                        "type": "string"
                    },
                    "bypassHeadRequests": {
                        "type": "boolean"
                    },
                    "clientTlsCertificate": {
                        "type": "string"
                    },
                    "contentSynchronisation": {
                        "$ref": "#/types/artifactory:index/RemoteRepositoryContentSynchronisation:RemoteRepositoryContentSynchronisation",
                        "description": "Reference [JFROG Smart Remote Repositories](https://www.jfrog.com/confluence/display/JFROG/Smart+Remote+Repositories)\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadContextPath": {
                        "type": "string"
                    },
                    "enableCookieManagement": {
                        "type": "boolean"
                    },
                    "enableTokenAuthentication": {
                        "type": "boolean"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "feedContextPath": {
                        "type": "string"
                    },
                    "fetchJarsEagerly": {
                        "type": "boolean"
                    },
                    "fetchSourcesEagerly": {
                        "type": "boolean"
                    },
                    "forceNugetAuthentication": {
                        "type": "boolean"
                    },
                    "handleReleases": {
                        "type": "boolean"
                    },
                    "handleSnapshots": {
                        "type": "boolean"
                    },
                    "hardFail": {
                        "type": "boolean"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string"
                    },
                    "localAddress": {
                        "type": "string"
                    },
                    "maxUniqueSnapshots": {
                        "type": "integer"
                    },
                    "missedCachePeriodSeconds": {
                        "type": "integer"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "offline": {
                        "type": "boolean"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string",
                        "description": "Requires password encryption to be turned off `POST /api/system/decrypt`\n"
                    },
                    "propagateQueryParams": {
                        "type": "boolean"
                    },
                    "propertySets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "proxy": {
                        "type": "string",
                        "description": "Proxy key from Artifactory Proxies setting\n"
                    },
                    "pypiRegistryUrl": {
                        "type": "string"
                    },
                    "remoteRepoChecksumPolicyType": {
                        "type": "string"
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "retrievalCachePeriodSeconds": {
                        "type": "integer",
                        "description": "The metadataRetrievalTimeoutSecs field not allowed to be bigger then retrievalCachePeriodSecs field.\n"
                    },
                    "shareConfiguration": {
                        "type": "boolean"
                    },
                    "socketTimeoutMillis": {
                        "type": "integer"
                    },
                    "storeArtifactsLocally": {
                        "type": "boolean"
                    },
                    "suppressPomConsistencyChecks": {
                        "type": "boolean"
                    },
                    "synchronizeProperties": {
                        "type": "boolean"
                    },
                    "unusedArtifactsCleanupPeriodHours": {
                        "type": "integer"
                    },
                    "url": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    },
                    "v3FeedUrl": {
                        "type": "string"
                    },
                    "vcsGitDownloadUrl": {
                        "type": "string"
                    },
                    "vcsGitProvider": {
                        "type": "string"
                    },
                    "vcsType": {
                        "type": "string"
                    },
                    "xrayIndex": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/replicationConfig:ReplicationConfig": {
            "description": "\n\n\n## Import\n\nReplication configs can be imported using their repo key, e.g.\n\n```sh\n $ pulumi import artifactory:index/replicationConfig:ReplicationConfig foo-rep provider_test_source\n```\n\n ",
            "properties": {
                "cronExp": {
                    "type": "string"
                },
                "enableEventReplication": {
                    "type": "boolean"
                },
                "replications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/ReplicationConfigReplication:ReplicationConfigReplication"
                    }
                },
                "repoKey": {
                    "type": "string"
                }
            },
            "required": [
                "cronExp",
                "enableEventReplication",
                "repoKey"
            ],
            "inputProperties": {
                "cronExp": {
                    "type": "string"
                },
                "enableEventReplication": {
                    "type": "boolean"
                },
                "replications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/ReplicationConfigReplication:ReplicationConfigReplication"
                    }
                },
                "repoKey": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "cronExp",
                "repoKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ReplicationConfig resources.\n",
                "properties": {
                    "cronExp": {
                        "type": "string"
                    },
                    "enableEventReplication": {
                        "type": "boolean"
                    },
                    "replications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/artifactory:index/ReplicationConfigReplication:ReplicationConfigReplication"
                        }
                    },
                    "repoKey": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/samlSettings:SamlSettings": {
            "description": "## # Artifactory SAML SSO Settings Resource\n\nThis resource can be used to manage Artifactory's SAML SSO settings.\n\nOnly a single `artifactory.SamlSettings` resource is meant to be defined.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\n// Configure Artifactory SAML SSO settings\nconst saml = new artifactory.SamlSettings(\"saml\", {\n    allowUserToAccessProfile: true,\n    autoRedirect: true,\n    certificate: \"test-certificate\",\n    emailAttribute: \"email\",\n    enable: true,\n    groupAttribute: \"groups\",\n    loginUrl: \"test-login-url\",\n    logoutUrl: \"test-logout-url\",\n    noAutoUserCreation: false,\n    serviceProviderName: \"okta\",\n    syncGroups: true,\n    useEncryptedAssertion: false,\n    verifyAudienceRestriction: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\n# Configure Artifactory SAML SSO settings\nsaml = artifactory.SamlSettings(\"saml\",\n    allow_user_to_access_profile=True,\n    auto_redirect=True,\n    certificate=\"test-certificate\",\n    email_attribute=\"email\",\n    enable=True,\n    group_attribute=\"groups\",\n    login_url=\"test-login-url\",\n    logout_url=\"test-logout-url\",\n    no_auto_user_creation=False,\n    service_provider_name=\"okta\",\n    sync_groups=True,\n    use_encrypted_assertion=False,\n    verify_audience_restriction=True)\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Configure Artifactory SAML SSO settings\n        var saml = new Artifactory.SamlSettings(\"saml\", new Artifactory.SamlSettingsArgs\n        {\n            AllowUserToAccessProfile = true,\n            AutoRedirect = true,\n            Certificate = \"test-certificate\",\n            EmailAttribute = \"email\",\n            Enable = true,\n            GroupAttribute = \"groups\",\n            LoginUrl = \"test-login-url\",\n            LogoutUrl = \"test-logout-url\",\n            NoAutoUserCreation = false,\n            ServiceProviderName = \"okta\",\n            SyncGroups = true,\n            UseEncryptedAssertion = false,\n            VerifyAudienceRestriction = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewSamlSettings(ctx, \"saml\", \u0026artifactory.SamlSettingsArgs{\n\t\t\tAllowUserToAccessProfile:  pulumi.Bool(true),\n\t\t\tAutoRedirect:              pulumi.Bool(true),\n\t\t\tCertificate:               pulumi.String(\"test-certificate\"),\n\t\t\tEmailAttribute:            pulumi.String(\"email\"),\n\t\t\tEnable:                    pulumi.Bool(true),\n\t\t\tGroupAttribute:            pulumi.String(\"groups\"),\n\t\t\tLoginUrl:                  pulumi.String(\"test-login-url\"),\n\t\t\tLogoutUrl:                 pulumi.String(\"test-logout-url\"),\n\t\t\tNoAutoUserCreation:        pulumi.Bool(false),\n\t\t\tServiceProviderName:       pulumi.String(\"okta\"),\n\t\t\tSyncGroups:                pulumi.Bool(true),\n\t\t\tUseEncryptedAssertion:     pulumi.Bool(false),\n\t\t\tVerifyAudienceRestriction: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCurrent SAML SSO settings can be imported using `saml_settings` as the `ID`, e.g.\n\n```sh\n $ pulumi import artifactory:index/samlSettings:SamlSettings saml saml_settings\n```\n\n ",
            "properties": {
                "allowUserToAccessProfile": {
                    "type": "boolean",
                    "description": "Allow persisted users to access their profile.  Default value is `true`.\n"
                },
                "autoRedirect": {
                    "type": "boolean",
                    "description": "Auto redirect to login through the IdP when clicking on Artifactory's login link.  Default value is `false`.\n"
                },
                "certificate": {
                    "type": "string",
                    "description": "SAML certificate that contains the public key for the IdP service provider.  Used by Artifactory to verify sign-in requests. Default value is ``.\n"
                },
                "emailAttribute": {
                    "type": "string",
                    "description": "Name of the attribute in the SAML response from the IdP that contains the user's email. Default value is ``.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable SAML SSO.  Default value is `true`.\n"
                },
                "groupAttribute": {
                    "type": "string",
                    "description": "Name of the attribute in the SAML response from the IdP that contains the user's group memberships. Default value is ``.\n"
                },
                "loginUrl": {
                    "type": "string",
                    "description": "Service provider login url configured on the IdP.\n"
                },
                "logoutUrl": {
                    "type": "string",
                    "description": "Service provider logout url, or where to redirect after user logs out.\n"
                },
                "noAutoUserCreation": {
                    "type": "boolean",
                    "description": "When automatic user creation is off, authenticated users are not automatically created inside Artifactory. Instead, for every request from an SSO user, the user is temporarily associated with default groups (if such groups are defined), and the permissions for these groups apply. Without auto-user creation, you must manually create the user inside Artifactory to manage user permissions not attached to their default groups. Default value is `false`.\n"
                },
                "serviceProviderName": {
                    "type": "string",
                    "description": "The SAML service provider name. This should be a URI that is also known as the entityID, providerID, or entity identity.\n"
                },
                "syncGroups": {
                    "type": "boolean",
                    "description": "Associate user with Artifactory groups based on the `group_attribute` provided in the SAML response from the identity provider.  Default value is `false`.\n"
                },
                "useEncryptedAssertion": {
                    "type": "boolean",
                    "description": "When set, an X.509 public certificate will be created by Artifactory. Download this certificate and upload it to your IDP and choose your own encryption algorithm. This process will let you encrypt the assertion section in your SAML response. Default value is `false`.\n"
                },
                "verifyAudienceRestriction": {
                    "type": "boolean",
                    "description": "Enable \"audience\", or who the SAML assertion is intended for.  Ensures that the correct service provider intended for Artifactory is used on the IdP.  Default value is `true`.\n"
                }
            },
            "required": [
                "loginUrl",
                "logoutUrl",
                "serviceProviderName"
            ],
            "inputProperties": {
                "allowUserToAccessProfile": {
                    "type": "boolean",
                    "description": "Allow persisted users to access their profile.  Default value is `true`.\n"
                },
                "autoRedirect": {
                    "type": "boolean",
                    "description": "Auto redirect to login through the IdP when clicking on Artifactory's login link.  Default value is `false`.\n"
                },
                "certificate": {
                    "type": "string",
                    "description": "SAML certificate that contains the public key for the IdP service provider.  Used by Artifactory to verify sign-in requests. Default value is ``.\n"
                },
                "emailAttribute": {
                    "type": "string",
                    "description": "Name of the attribute in the SAML response from the IdP that contains the user's email. Default value is ``.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable SAML SSO.  Default value is `true`.\n"
                },
                "groupAttribute": {
                    "type": "string",
                    "description": "Name of the attribute in the SAML response from the IdP that contains the user's group memberships. Default value is ``.\n"
                },
                "loginUrl": {
                    "type": "string",
                    "description": "Service provider login url configured on the IdP.\n"
                },
                "logoutUrl": {
                    "type": "string",
                    "description": "Service provider logout url, or where to redirect after user logs out.\n"
                },
                "noAutoUserCreation": {
                    "type": "boolean",
                    "description": "When automatic user creation is off, authenticated users are not automatically created inside Artifactory. Instead, for every request from an SSO user, the user is temporarily associated with default groups (if such groups are defined), and the permissions for these groups apply. Without auto-user creation, you must manually create the user inside Artifactory to manage user permissions not attached to their default groups. Default value is `false`.\n"
                },
                "serviceProviderName": {
                    "type": "string",
                    "description": "The SAML service provider name. This should be a URI that is also known as the entityID, providerID, or entity identity.\n"
                },
                "syncGroups": {
                    "type": "boolean",
                    "description": "Associate user with Artifactory groups based on the `group_attribute` provided in the SAML response from the identity provider.  Default value is `false`.\n"
                },
                "useEncryptedAssertion": {
                    "type": "boolean",
                    "description": "When set, an X.509 public certificate will be created by Artifactory. Download this certificate and upload it to your IDP and choose your own encryption algorithm. This process will let you encrypt the assertion section in your SAML response. Default value is `false`.\n"
                },
                "verifyAudienceRestriction": {
                    "type": "boolean",
                    "description": "Enable \"audience\", or who the SAML assertion is intended for.  Ensures that the correct service provider intended for Artifactory is used on the IdP.  Default value is `true`.\n"
                }
            },
            "requiredInputs": [
                "loginUrl",
                "logoutUrl",
                "serviceProviderName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SamlSettings resources.\n",
                "properties": {
                    "allowUserToAccessProfile": {
                        "type": "boolean",
                        "description": "Allow persisted users to access their profile.  Default value is `true`.\n"
                    },
                    "autoRedirect": {
                        "type": "boolean",
                        "description": "Auto redirect to login through the IdP when clicking on Artifactory's login link.  Default value is `false`.\n"
                    },
                    "certificate": {
                        "type": "string",
                        "description": "SAML certificate that contains the public key for the IdP service provider.  Used by Artifactory to verify sign-in requests. Default value is ``.\n"
                    },
                    "emailAttribute": {
                        "type": "string",
                        "description": "Name of the attribute in the SAML response from the IdP that contains the user's email. Default value is ``.\n"
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Enable SAML SSO.  Default value is `true`.\n"
                    },
                    "groupAttribute": {
                        "type": "string",
                        "description": "Name of the attribute in the SAML response from the IdP that contains the user's group memberships. Default value is ``.\n"
                    },
                    "loginUrl": {
                        "type": "string",
                        "description": "Service provider login url configured on the IdP.\n"
                    },
                    "logoutUrl": {
                        "type": "string",
                        "description": "Service provider logout url, or where to redirect after user logs out.\n"
                    },
                    "noAutoUserCreation": {
                        "type": "boolean",
                        "description": "When automatic user creation is off, authenticated users are not automatically created inside Artifactory. Instead, for every request from an SSO user, the user is temporarily associated with default groups (if such groups are defined), and the permissions for these groups apply. Without auto-user creation, you must manually create the user inside Artifactory to manage user permissions not attached to their default groups. Default value is `false`.\n"
                    },
                    "serviceProviderName": {
                        "type": "string",
                        "description": "The SAML service provider name. This should be a URI that is also known as the entityID, providerID, or entity identity.\n"
                    },
                    "syncGroups": {
                        "type": "boolean",
                        "description": "Associate user with Artifactory groups based on the `group_attribute` provided in the SAML response from the identity provider.  Default value is `false`.\n"
                    },
                    "useEncryptedAssertion": {
                        "type": "boolean",
                        "description": "When set, an X.509 public certificate will be created by Artifactory. Download this certificate and upload it to your IDP and choose your own encryption algorithm. This process will let you encrypt the assertion section in your SAML response. Default value is `false`.\n"
                    },
                    "verifyAudienceRestriction": {
                        "type": "boolean",
                        "description": "Enable \"audience\", or who the SAML assertion is intended for.  Ensures that the correct service provider intended for Artifactory is used on the IdP.  Default value is `true`.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/singleReplicationConfig:SingleReplicationConfig": {
            "description": "\n\n\n## Import\n\nReplication configs can be imported using their repo key, e.g.\n\n```sh\n $ pulumi import artifactory:index/singleReplicationConfig:SingleReplicationConfig foo-rep repository-key\n```\n\n ",
            "properties": {
                "cronExp": {
                    "type": "string"
                },
                "enableEventReplication": {
                    "type": "boolean"
                },
                "enabled": {
                    "type": "boolean"
                },
                "password": {
                    "type": "string",
                    "description": "Requires password encryption to be turned off `POST /api/system/decrypt`\n"
                },
                "pathPrefix": {
                    "type": "string"
                },
                "repoKey": {
                    "type": "string"
                },
                "socketTimeoutMillis": {
                    "type": "integer"
                },
                "syncDeletes": {
                    "type": "boolean"
                },
                "syncProperties": {
                    "type": "boolean"
                },
                "syncStatistics": {
                    "type": "boolean"
                },
                "url": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "required": [
                "cronExp",
                "enableEventReplication",
                "enabled",
                "password",
                "repoKey",
                "socketTimeoutMillis",
                "syncDeletes",
                "syncProperties",
                "syncStatistics"
            ],
            "inputProperties": {
                "cronExp": {
                    "type": "string"
                },
                "enableEventReplication": {
                    "type": "boolean"
                },
                "enabled": {
                    "type": "boolean"
                },
                "pathPrefix": {
                    "type": "string"
                },
                "repoKey": {
                    "type": "string"
                },
                "socketTimeoutMillis": {
                    "type": "integer"
                },
                "syncDeletes": {
                    "type": "boolean"
                },
                "syncProperties": {
                    "type": "boolean"
                },
                "syncStatistics": {
                    "type": "boolean"
                },
                "url": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "cronExp",
                "repoKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SingleReplicationConfig resources.\n",
                "properties": {
                    "cronExp": {
                        "type": "string"
                    },
                    "enableEventReplication": {
                        "type": "boolean"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "password": {
                        "type": "string",
                        "description": "Requires password encryption to be turned off `POST /api/system/decrypt`\n"
                    },
                    "pathPrefix": {
                        "type": "string"
                    },
                    "repoKey": {
                        "type": "string"
                    },
                    "socketTimeoutMillis": {
                        "type": "integer"
                    },
                    "syncDeletes": {
                        "type": "boolean"
                    },
                    "syncProperties": {
                        "type": "boolean"
                    },
                    "syncStatistics": {
                        "type": "boolean"
                    },
                    "url": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/user:User": {
            "description": "\n\n\n## Import\n\nUsers can be imported using their name, e.g.\n\n```sh\n $ pulumi import artifactory:index/user:User test-user myusername\n```\n\n ",
            "properties": {
                "admin": {
                    "type": "boolean",
                    "description": "When enabled, this user is an administrator with all the ensuing privileges. Default value is `false`.\n"
                },
                "disableUiAccess": {
                    "type": "boolean",
                    "description": "When set, this user can only access Artifactory through the REST API. This option cannot be set if the user has Admin privileges. Default value is `true`.\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email for user.\n"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of groups this user is a part of.\n"
                },
                "internalPasswordDisabled": {
                    "type": "boolean",
                    "description": "When set, disables the fallback of using an internal password when external authentication (such as LDAP) is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Username for user.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for the user. Password validation is not done by the provider and is offloaded onto the Artifactory. There may be cases in which you want to leave this unset to prevent users from updating their profile. For example, a departmental user with a single password shared between all department members.\n"
                },
                "profileUpdatable": {
                    "type": "boolean",
                    "description": "When set, this user can update his profile details (except for the password. Only an administrator can update the password). Default value is `true`.\n"
                }
            },
            "required": [
                "email",
                "name",
                "password"
            ],
            "inputProperties": {
                "admin": {
                    "type": "boolean",
                    "description": "When enabled, this user is an administrator with all the ensuing privileges. Default value is `false`.\n"
                },
                "disableUiAccess": {
                    "type": "boolean",
                    "description": "When set, this user can only access Artifactory through the REST API. This option cannot be set if the user has Admin privileges. Default value is `true`.\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email for user.\n"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of groups this user is a part of.\n"
                },
                "internalPasswordDisabled": {
                    "type": "boolean",
                    "description": "When set, disables the fallback of using an internal password when external authentication (such as LDAP) is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Username for user.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for the user. Password validation is not done by the provider and is offloaded onto the Artifactory. There may be cases in which you want to leave this unset to prevent users from updating their profile. For example, a departmental user with a single password shared between all department members.\n"
                },
                "profileUpdatable": {
                    "type": "boolean",
                    "description": "When set, this user can update his profile details (except for the password. Only an administrator can update the password). Default value is `true`.\n"
                }
            },
            "requiredInputs": [
                "email",
                "password"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "admin": {
                        "type": "boolean",
                        "description": "When enabled, this user is an administrator with all the ensuing privileges. Default value is `false`.\n"
                    },
                    "disableUiAccess": {
                        "type": "boolean",
                        "description": "When set, this user can only access Artifactory through the REST API. This option cannot be set if the user has Admin privileges. Default value is `true`.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email for user.\n"
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of groups this user is a part of.\n"
                    },
                    "internalPasswordDisabled": {
                        "type": "boolean",
                        "description": "When set, disables the fallback of using an internal password when external authentication (such as LDAP) is enabled.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Username for user.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password for the user. Password validation is not done by the provider and is offloaded onto the Artifactory. There may be cases in which you want to leave this unset to prevent users from updating their profile. For example, a departmental user with a single password shared between all department members.\n"
                    },
                    "profileUpdatable": {
                        "type": "boolean",
                        "description": "When set, this user can update his profile details (except for the password. Only an administrator can update the password). Default value is `true`.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/virtualConanRepository:VirtualConanRepository": {
            "description": "## # Artifactory Virtual Conan Repository Resource\n\nProvides an Artifactory virtual repository resource, but with specific conan features. This should be preferred over the original\none-size-fits-all `artifactory.VirtualRepository`. \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst foo_conan = new artifactory.VirtualConanRepository(\"foo-conan\", {\n    description: \"A test virtual repo\",\n    excludesPattern: \"com/google/**\",\n    includesPattern: \"com/jfrog/**,cloud/jfrog/**\",\n    key: \"foo-conan\",\n    notes: \"Internal description\",\n    repoLayoutRef: \"conan-default\",\n    repositories: [],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nfoo_conan = artifactory.VirtualConanRepository(\"foo-conan\",\n    description=\"A test virtual repo\",\n    excludes_pattern=\"com/google/**\",\n    includes_pattern=\"com/jfrog/**,cloud/jfrog/**\",\n    key=\"foo-conan\",\n    notes=\"Internal description\",\n    repo_layout_ref=\"conan-default\",\n    repositories=[])\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo_conan = new Artifactory.VirtualConanRepository(\"foo-conan\", new Artifactory.VirtualConanRepositoryArgs\n        {\n            Description = \"A test virtual repo\",\n            ExcludesPattern = \"com/google/**\",\n            IncludesPattern = \"com/jfrog/**,cloud/jfrog/**\",\n            Key = \"foo-conan\",\n            Notes = \"Internal description\",\n            RepoLayoutRef = \"conan-default\",\n            Repositories = {},\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewVirtualConanRepository(ctx, \"foo-conan\", \u0026artifactory.VirtualConanRepositoryArgs{\n\t\t\tDescription:     pulumi.String(\"A test virtual repo\"),\n\t\t\tExcludesPattern: pulumi.String(\"com/google/**\"),\n\t\t\tIncludesPattern: pulumi.String(\"com/jfrog/**,cloud/jfrog/**\"),\n\t\t\tKey:             pulumi.String(\"foo-conan\"),\n\t\t\tNotes:           pulumi.String(\"Internal description\"),\n\t\t\tRepoLayoutRef:   pulumi.String(\"conan-default\"),\n\t\t\tRepositories:    pulumi.StringArray{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVirtual repositories can be imported using their name, e.g.\n\n```sh\n $ pulumi import artifactory:index/virtualConanRepository:VirtualConanRepository foo foo\n```\n\n ",
            "properties": {
                "artifactoryRequestsCanRetrieveRemoteArtifacts": {
                    "type": "boolean",
                    "description": "Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by\nanother Artifactory instance.\n"
                },
                "defaultDeploymentRepo": {
                    "type": "string",
                    "description": "Default repository to deploy artifacts.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A free text field that describes the content and purpose of the repository. If you choose to insert a link into this\nfield, clicking the link will prompt the user to confirm that they might be redirected to a new domain.\n"
                },
                "excludesPattern": {
                    "type": "string",
                    "description": "List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no\nartifacts are excluded.\n"
                },
                "includesPattern": {
                    "type": "string",
                    "description": "List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only\nartifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).\n"
                },
                "key": {
                    "type": "string",
                    "description": "The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or\ncontain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.\n'libs-release-local').\n"
                },
                "notes": {
                    "type": "string",
                    "description": "A free text field to add additional notes about the repository. These are only visible to the administrator.\n"
                },
                "packageType": {
                    "type": "string",
                    "description": "The Package Type. This must be specified when the repository is created, and once set, cannot be changed.\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric characters. When assigning\nrepository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                },
                "repoLayoutRef": {
                    "type": "string",
                    "description": "Sets the layout that the repository should use for storing and identifying modules. A recommended layout that\ncorresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.\n"
                },
                "repositories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The effective list of actual repositories included in this virtual repository.\n"
                },
                "retrievalCachePeriodSeconds": {
                    "type": "integer",
                    "description": "- This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated repositories. A value of 0 indicates no caching. Default: 7200 seconds.\n"
                }
            },
            "required": [
                "key",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "artifactoryRequestsCanRetrieveRemoteArtifacts": {
                    "type": "boolean",
                    "description": "Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by\nanother Artifactory instance.\n"
                },
                "defaultDeploymentRepo": {
                    "type": "string",
                    "description": "Default repository to deploy artifacts.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A free text field that describes the content and purpose of the repository. If you choose to insert a link into this\nfield, clicking the link will prompt the user to confirm that they might be redirected to a new domain.\n"
                },
                "excludesPattern": {
                    "type": "string",
                    "description": "List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no\nartifacts are excluded.\n"
                },
                "includesPattern": {
                    "type": "string",
                    "description": "List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only\nartifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).\n"
                },
                "key": {
                    "type": "string",
                    "description": "The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or\ncontain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.\n'libs-release-local').\n"
                },
                "notes": {
                    "type": "string",
                    "description": "A free text field to add additional notes about the repository. These are only visible to the administrator.\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric characters. When assigning\nrepository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                },
                "repoLayoutRef": {
                    "type": "string",
                    "description": "Sets the layout that the repository should use for storing and identifying modules. A recommended layout that\ncorresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.\n"
                },
                "repositories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The effective list of actual repositories included in this virtual repository.\n"
                },
                "retrievalCachePeriodSeconds": {
                    "type": "integer",
                    "description": "- This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated repositories. A value of 0 indicates no caching. Default: 7200 seconds.\n"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VirtualConanRepository resources.\n",
                "properties": {
                    "artifactoryRequestsCanRetrieveRemoteArtifacts": {
                        "type": "boolean",
                        "description": "Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by\nanother Artifactory instance.\n"
                    },
                    "defaultDeploymentRepo": {
                        "type": "string",
                        "description": "Default repository to deploy artifacts.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A free text field that describes the content and purpose of the repository. If you choose to insert a link into this\nfield, clicking the link will prompt the user to confirm that they might be redirected to a new domain.\n"
                    },
                    "excludesPattern": {
                        "type": "string",
                        "description": "List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no\nartifacts are excluded.\n"
                    },
                    "includesPattern": {
                        "type": "string",
                        "description": "List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only\nartifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or\ncontain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.\n'libs-release-local').\n"
                    },
                    "notes": {
                        "type": "string",
                        "description": "A free text field to add additional notes about the repository. These are only visible to the administrator.\n"
                    },
                    "packageType": {
                        "type": "string",
                        "description": "The Package Type. This must be specified when the repository is created, and once set, cannot be changed.\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric characters. When assigning\nrepository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                    },
                    "repoLayoutRef": {
                        "type": "string",
                        "description": "Sets the layout that the repository should use for storing and identifying modules. A recommended layout that\ncorresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.\n"
                    },
                    "repositories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The effective list of actual repositories included in this virtual repository.\n"
                    },
                    "retrievalCachePeriodSeconds": {
                        "type": "integer",
                        "description": "- This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated repositories. A value of 0 indicates no caching. Default: 7200 seconds.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/virtualGenericRepository:VirtualGenericRepository": {
            "description": "## # Artifactory Virtual Generic Repository Resource\n\nProvides an Artifactory virtual repository resource with generic package type. This should be preferred over the original\none-size-fits-all `artifactory.VirtualRepository`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst foo_generic = new artifactory.VirtualGenericRepository(\"foo-generic\", {\n    description: \"A test virtual repo\",\n    excludesPattern: \"com/google/**\",\n    includesPattern: \"com/jfrog/**,cloud/jfrog/**\",\n    key: \"foo-generic\",\n    notes: \"Internal description\",\n    repoLayoutRef: \"simple-default\",\n    repositories: [],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nfoo_generic = artifactory.VirtualGenericRepository(\"foo-generic\",\n    description=\"A test virtual repo\",\n    excludes_pattern=\"com/google/**\",\n    includes_pattern=\"com/jfrog/**,cloud/jfrog/**\",\n    key=\"foo-generic\",\n    notes=\"Internal description\",\n    repo_layout_ref=\"simple-default\",\n    repositories=[])\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo_generic = new Artifactory.VirtualGenericRepository(\"foo-generic\", new Artifactory.VirtualGenericRepositoryArgs\n        {\n            Description = \"A test virtual repo\",\n            ExcludesPattern = \"com/google/**\",\n            IncludesPattern = \"com/jfrog/**,cloud/jfrog/**\",\n            Key = \"foo-generic\",\n            Notes = \"Internal description\",\n            RepoLayoutRef = \"simple-default\",\n            Repositories = {},\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewVirtualGenericRepository(ctx, \"foo-generic\", \u0026artifactory.VirtualGenericRepositoryArgs{\n\t\t\tDescription:     pulumi.String(\"A test virtual repo\"),\n\t\t\tExcludesPattern: pulumi.String(\"com/google/**\"),\n\t\t\tIncludesPattern: pulumi.String(\"com/jfrog/**,cloud/jfrog/**\"),\n\t\t\tKey:             pulumi.String(\"foo-generic\"),\n\t\t\tNotes:           pulumi.String(\"Internal description\"),\n\t\t\tRepoLayoutRef:   pulumi.String(\"simple-default\"),\n\t\t\tRepositories:    pulumi.StringArray{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVirtual repositories can be imported using their name, e.g.\n\n```sh\n $ pulumi import artifactory:index/virtualGenericRepository:VirtualGenericRepository foo foo\n```\n\n ",
            "properties": {
                "artifactoryRequestsCanRetrieveRemoteArtifacts": {
                    "type": "boolean",
                    "description": "Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by\nanother Artifactory instance.\n"
                },
                "defaultDeploymentRepo": {
                    "type": "string",
                    "description": "Default repository to deploy artifacts.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A free text field that describes the content and purpose of the repository. If you choose to insert a link into this\nfield, clicking the link will prompt the user to confirm that they might be redirected to a new domain.\n"
                },
                "excludesPattern": {
                    "type": "string",
                    "description": "List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no\nartifacts are excluded.\n"
                },
                "includesPattern": {
                    "type": "string",
                    "description": "List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only\nartifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).\n"
                },
                "key": {
                    "type": "string",
                    "description": "The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or\ncontain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.\n'libs-release-local').\n"
                },
                "notes": {
                    "type": "string",
                    "description": "A free text field to add additional notes about the repository. These are only visible to the administrator.\n"
                },
                "packageType": {
                    "type": "string",
                    "description": "The Package Type. This must be specified when the repository is created, and once set, cannot be changed.\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                },
                "repoLayoutRef": {
                    "type": "string",
                    "description": "Sets the layout that the repository should use for storing and identifying modules. A recommended layout that\ncorresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.\n"
                },
                "repositories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The effective list of actual repositories included in this virtual repository.\n"
                },
                "retrievalCachePeriodSeconds": {
                    "type": "integer",
                    "description": "This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated\nrepositories. A value of 0 indicates no caching.\n"
                }
            },
            "required": [
                "key",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "artifactoryRequestsCanRetrieveRemoteArtifacts": {
                    "type": "boolean",
                    "description": "Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by\nanother Artifactory instance.\n"
                },
                "defaultDeploymentRepo": {
                    "type": "string",
                    "description": "Default repository to deploy artifacts.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A free text field that describes the content and purpose of the repository. If you choose to insert a link into this\nfield, clicking the link will prompt the user to confirm that they might be redirected to a new domain.\n"
                },
                "excludesPattern": {
                    "type": "string",
                    "description": "List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no\nartifacts are excluded.\n"
                },
                "includesPattern": {
                    "type": "string",
                    "description": "List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only\nartifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).\n"
                },
                "key": {
                    "type": "string",
                    "description": "The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or\ncontain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.\n'libs-release-local').\n"
                },
                "notes": {
                    "type": "string",
                    "description": "A free text field to add additional notes about the repository. These are only visible to the administrator.\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                },
                "repoLayoutRef": {
                    "type": "string",
                    "description": "Sets the layout that the repository should use for storing and identifying modules. A recommended layout that\ncorresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.\n"
                },
                "repositories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The effective list of actual repositories included in this virtual repository.\n"
                },
                "retrievalCachePeriodSeconds": {
                    "type": "integer",
                    "description": "This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated\nrepositories. A value of 0 indicates no caching.\n"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VirtualGenericRepository resources.\n",
                "properties": {
                    "artifactoryRequestsCanRetrieveRemoteArtifacts": {
                        "type": "boolean",
                        "description": "Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by\nanother Artifactory instance.\n"
                    },
                    "defaultDeploymentRepo": {
                        "type": "string",
                        "description": "Default repository to deploy artifacts.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A free text field that describes the content and purpose of the repository. If you choose to insert a link into this\nfield, clicking the link will prompt the user to confirm that they might be redirected to a new domain.\n"
                    },
                    "excludesPattern": {
                        "type": "string",
                        "description": "List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no\nartifacts are excluded.\n"
                    },
                    "includesPattern": {
                        "type": "string",
                        "description": "List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only\nartifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or\ncontain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.\n'libs-release-local').\n"
                    },
                    "notes": {
                        "type": "string",
                        "description": "A free text field to add additional notes about the repository. These are only visible to the administrator.\n"
                    },
                    "packageType": {
                        "type": "string",
                        "description": "The Package Type. This must be specified when the repository is created, and once set, cannot be changed.\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                    },
                    "repoLayoutRef": {
                        "type": "string",
                        "description": "Sets the layout that the repository should use for storing and identifying modules. A recommended layout that\ncorresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.\n"
                    },
                    "repositories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The effective list of actual repositories included in this virtual repository.\n"
                    },
                    "retrievalCachePeriodSeconds": {
                        "type": "integer",
                        "description": "This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated\nrepositories. A value of 0 indicates no caching.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/virtualHelmRepository:VirtualHelmRepository": {
            "description": "## # Artifactory Virtual Helm Repository Resource\n\nProvides an Artifactory virtual repository resource with Helm package type. This should be preferred over the original one-size-fits-all `artifactory.VirtualRepository`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst foo_helm_virtual = new artifactory.VirtualHelmRepository(\"foo-helm-virtual\", {\n    key: \"foo-helm-virtual\",\n    useNamespaces: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nfoo_helm_virtual = artifactory.VirtualHelmRepository(\"foo-helm-virtual\",\n    key=\"foo-helm-virtual\",\n    use_namespaces=True)\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo_helm_virtual = new Artifactory.VirtualHelmRepository(\"foo-helm-virtual\", new Artifactory.VirtualHelmRepositoryArgs\n        {\n            Key = \"foo-helm-virtual\",\n            UseNamespaces = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewVirtualHelmRepository(ctx, \"foo-helm-virtual\", \u0026artifactory.VirtualHelmRepositoryArgs{\n\t\t\tKey:           pulumi.String(\"foo-helm-virtual\"),\n\t\t\tUseNamespaces: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVirtual repositories can be imported using their name, e.g.\n\n```sh\n $ pulumi import artifactory:index/virtualHelmRepository:VirtualHelmRepository foo foo\n```\n\n ",
            "properties": {
                "artifactoryRequestsCanRetrieveRemoteArtifacts": {
                    "type": "boolean",
                    "description": "Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by\nanother Artifactory instance.\n"
                },
                "defaultDeploymentRepo": {
                    "type": "string",
                    "description": "Default repository to deploy artifacts.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A free text field that describes the content and purpose of the repository. If you choose to insert a link into this\nfield, clicking the link will prompt the user to confirm that they might be redirected to a new domain.\n"
                },
                "excludesPattern": {
                    "type": "string",
                    "description": "List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no\nartifacts are excluded.\n"
                },
                "includesPattern": {
                    "type": "string",
                    "description": "List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only\nartifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).\n"
                },
                "key": {
                    "type": "string",
                    "description": "The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or\ncontain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.\n'libs-release-local').\n"
                },
                "notes": {
                    "type": "string",
                    "description": "A free text field to add additional notes about the repository. These are only visible to the administrator.\n"
                },
                "packageType": {
                    "type": "string",
                    "description": "The Package Type. This must be specified when the repository is created, and once set, cannot be changed.\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric characters. When assigning\nrepository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                },
                "repoLayoutRef": {
                    "type": "string",
                    "description": "Sets the layout that the repository should use for storing and identifying modules. A recommended layout that\ncorresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.\n"
                },
                "repositories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The effective list of actual repositories included in this virtual repository.\n"
                },
                "retrievalCachePeriodSeconds": {
                    "type": "integer",
                    "description": "This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated\nrepositories. A value of 0 indicates no caching.\n"
                },
                "useNamespaces": {
                    "type": "boolean",
                    "description": "- From Artifactory 7.24.1 (SaaS Version), you can explicitly state a specific aggregated local or remote repository to fetch from a virtual by assigning namespaces to local and remote repositories. See https://www.jfrog.com/confluence/display/JFROG/Kubernetes+Helm+Chart+Repositories#KubernetesHelmChartRepositories-NamespaceSupportforHelmVirtualRepositories. Default to 'false'.\n"
                }
            },
            "required": [
                "key",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "artifactoryRequestsCanRetrieveRemoteArtifacts": {
                    "type": "boolean",
                    "description": "Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by\nanother Artifactory instance.\n"
                },
                "defaultDeploymentRepo": {
                    "type": "string",
                    "description": "Default repository to deploy artifacts.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A free text field that describes the content and purpose of the repository. If you choose to insert a link into this\nfield, clicking the link will prompt the user to confirm that they might be redirected to a new domain.\n"
                },
                "excludesPattern": {
                    "type": "string",
                    "description": "List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no\nartifacts are excluded.\n"
                },
                "includesPattern": {
                    "type": "string",
                    "description": "List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only\nartifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).\n"
                },
                "key": {
                    "type": "string",
                    "description": "The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or\ncontain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.\n'libs-release-local').\n"
                },
                "notes": {
                    "type": "string",
                    "description": "A free text field to add additional notes about the repository. These are only visible to the administrator.\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric characters. When assigning\nrepository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                },
                "repoLayoutRef": {
                    "type": "string",
                    "description": "Sets the layout that the repository should use for storing and identifying modules. A recommended layout that\ncorresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.\n"
                },
                "repositories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The effective list of actual repositories included in this virtual repository.\n"
                },
                "retrievalCachePeriodSeconds": {
                    "type": "integer",
                    "description": "This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated\nrepositories. A value of 0 indicates no caching.\n"
                },
                "useNamespaces": {
                    "type": "boolean",
                    "description": "- From Artifactory 7.24.1 (SaaS Version), you can explicitly state a specific aggregated local or remote repository to fetch from a virtual by assigning namespaces to local and remote repositories. See https://www.jfrog.com/confluence/display/JFROG/Kubernetes+Helm+Chart+Repositories#KubernetesHelmChartRepositories-NamespaceSupportforHelmVirtualRepositories. Default to 'false'.\n"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VirtualHelmRepository resources.\n",
                "properties": {
                    "artifactoryRequestsCanRetrieveRemoteArtifacts": {
                        "type": "boolean",
                        "description": "Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by\nanother Artifactory instance.\n"
                    },
                    "defaultDeploymentRepo": {
                        "type": "string",
                        "description": "Default repository to deploy artifacts.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A free text field that describes the content and purpose of the repository. If you choose to insert a link into this\nfield, clicking the link will prompt the user to confirm that they might be redirected to a new domain.\n"
                    },
                    "excludesPattern": {
                        "type": "string",
                        "description": "List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no\nartifacts are excluded.\n"
                    },
                    "includesPattern": {
                        "type": "string",
                        "description": "List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only\nartifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or\ncontain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.\n'libs-release-local').\n"
                    },
                    "notes": {
                        "type": "string",
                        "description": "A free text field to add additional notes about the repository. These are only visible to the administrator.\n"
                    },
                    "packageType": {
                        "type": "string",
                        "description": "The Package Type. This must be specified when the repository is created, and once set, cannot be changed.\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric characters. When assigning\nrepository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                    },
                    "repoLayoutRef": {
                        "type": "string",
                        "description": "Sets the layout that the repository should use for storing and identifying modules. A recommended layout that\ncorresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.\n"
                    },
                    "repositories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The effective list of actual repositories included in this virtual repository.\n"
                    },
                    "retrievalCachePeriodSeconds": {
                        "type": "integer",
                        "description": "This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated\nrepositories. A value of 0 indicates no caching.\n"
                    },
                    "useNamespaces": {
                        "type": "boolean",
                        "description": "- From Artifactory 7.24.1 (SaaS Version), you can explicitly state a specific aggregated local or remote repository to fetch from a virtual by assigning namespaces to local and remote repositories. See https://www.jfrog.com/confluence/display/JFROG/Kubernetes+Helm+Chart+Repositories#KubernetesHelmChartRepositories-NamespaceSupportforHelmVirtualRepositories. Default to 'false'.\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/virtualRepository:VirtualRepository": {
            "description": "## # Artifactory Virtual Repository Resource\n\nProvides an Artifactory virtual repository resource. This can be used to create and manage Artifactory virtual repositories.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\nconst bar = new artifactory.LocalRepository(\"bar\", {\n    key: \"bar\",\n    packageType: \"maven\",\n});\nconst baz = new artifactory.LocalRepository(\"baz\", {\n    key: \"baz\",\n    packageType: \"maven\",\n});\nconst foo = new artifactory.VirtualRepository(\"foo\", {\n    key: \"foo\",\n    packageType: \"maven\",\n    repositories: [\n        bar.key,\n        baz.key,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nbar = artifactory.LocalRepository(\"bar\",\n    key=\"bar\",\n    package_type=\"maven\")\nbaz = artifactory.LocalRepository(\"baz\",\n    key=\"baz\",\n    package_type=\"maven\")\nfoo = artifactory.VirtualRepository(\"foo\",\n    key=\"foo\",\n    package_type=\"maven\",\n    repositories=[\n        bar.key,\n        baz.key,\n    ])\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var bar = new Artifactory.LocalRepository(\"bar\", new Artifactory.LocalRepositoryArgs\n        {\n            Key = \"bar\",\n            PackageType = \"maven\",\n        });\n        var baz = new Artifactory.LocalRepository(\"baz\", new Artifactory.LocalRepositoryArgs\n        {\n            Key = \"baz\",\n            PackageType = \"maven\",\n        });\n        var foo = new Artifactory.VirtualRepository(\"foo\", new Artifactory.VirtualRepositoryArgs\n        {\n            Key = \"foo\",\n            PackageType = \"maven\",\n            Repositories = \n            {\n                bar.Key,\n                baz.Key,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tbar, err := artifactory.NewLocalRepository(ctx, \"bar\", \u0026artifactory.LocalRepositoryArgs{\n\t\t\tKey:         pulumi.String(\"bar\"),\n\t\t\tPackageType: pulumi.String(\"maven\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbaz, err := artifactory.NewLocalRepository(ctx, \"baz\", \u0026artifactory.LocalRepositoryArgs{\n\t\t\tKey:         pulumi.String(\"baz\"),\n\t\t\tPackageType: pulumi.String(\"maven\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = artifactory.NewVirtualRepository(ctx, \"foo\", \u0026artifactory.VirtualRepositoryArgs{\n\t\t\tKey:         pulumi.String(\"foo\"),\n\t\t\tPackageType: pulumi.String(\"maven\"),\n\t\t\tRepositories: pulumi.StringArray{\n\t\t\t\tbar.Key,\n\t\t\t\tbaz.Key,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVirtual repositories can be imported using their name, e.g.\n\n```sh\n $ pulumi import artifactory:index/virtualRepository:VirtualRepository foo foo\n```\n\n ",
            "properties": {
                "artifactoryRequestsCanRetrieveRemoteArtifacts": {
                    "type": "boolean"
                },
                "debianTrivialLayout": {
                    "type": "boolean"
                },
                "defaultDeploymentRepo": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "forceNugetAuthentication": {
                    "type": "boolean"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "keyPair": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "pomRepositoryReferencesCleanupPolicy": {
                    "type": "string"
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "repositories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "forceNugetAuthentication",
                "key",
                "packageType",
                "pomRepositoryReferencesCleanupPolicy",
                "repoLayoutRef",
                "repositories"
            ],
            "inputProperties": {
                "artifactoryRequestsCanRetrieveRemoteArtifacts": {
                    "type": "boolean"
                },
                "debianTrivialLayout": {
                    "type": "boolean"
                },
                "defaultDeploymentRepo": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "excludesPattern": {
                    "type": "string"
                },
                "forceNugetAuthentication": {
                    "type": "boolean"
                },
                "includesPattern": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "keyPair": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "packageType": {
                    "type": "string"
                },
                "pomRepositoryReferencesCleanupPolicy": {
                    "type": "string"
                },
                "repoLayoutRef": {
                    "type": "string"
                },
                "repositories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "requiredInputs": [
                "key",
                "packageType",
                "repositories"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VirtualRepository resources.\n",
                "properties": {
                    "artifactoryRequestsCanRetrieveRemoteArtifacts": {
                        "type": "boolean"
                    },
                    "debianTrivialLayout": {
                        "type": "boolean"
                    },
                    "defaultDeploymentRepo": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "excludesPattern": {
                        "type": "string"
                    },
                    "forceNugetAuthentication": {
                        "type": "boolean"
                    },
                    "includesPattern": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string"
                    },
                    "keyPair": {
                        "type": "string"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "packageType": {
                        "type": "string"
                    },
                    "pomRepositoryReferencesCleanupPolicy": {
                        "type": "string"
                    },
                    "repoLayoutRef": {
                        "type": "string"
                    },
                    "repositories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/virtualRpmRepository:VirtualRpmRepository": {
            "description": "## # Artifactory Virtual Rpm Repository Resource\n\nProvides an Artifactory virtual repository resource with Rpm package type. This should be preferred over the original one-size-fits-all `artifactory.VirtualRepository`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\nimport * from \"fs\";\n\nconst primary_keypair = new artifactory.Keypair(\"primary-keypair\", {\n    pairName: \"primary-keypair\",\n    pairType: \"GPG\",\n    alias: \"foo-alias-1\",\n    privateKey: fs.readFileSync(\"samples/gpg.priv\"),\n    publicKey: fs.readFileSync(\"samples/gpg.pub\"),\n});\nconst secondary_keypair = new artifactory.Keypair(\"secondary-keypair\", {\n    pairName: \"secondary-keypair\",\n    pairType: \"GPG\",\n    alias: \"foo-alias-2\",\n    privateKey: fs.readFileSync(\"samples/gpg.priv\"),\n    publicKey: fs.readFileSync(\"samples/gpg.pub\"),\n});\nconst foo_rpm_virtual = new artifactory.VirtualRpmRepository(\"foo-rpm-virtual\", {\n    key: \"foo-rpm-virtual\",\n    primaryKeypairRef: primary_keypair.pairName,\n    secondaryKeypairRef: secondary_keypair.pairName,\n}, {\n    dependsOn: [\n        primary_keypair,\n        secondary_keypair,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nprimary_keypair = artifactory.Keypair(\"primary-keypair\",\n    pair_name=\"primary-keypair\",\n    pair_type=\"GPG\",\n    alias=\"foo-alias-1\",\n    private_key=(lambda path: open(path).read())(\"samples/gpg.priv\"),\n    public_key=(lambda path: open(path).read())(\"samples/gpg.pub\"))\nsecondary_keypair = artifactory.Keypair(\"secondary-keypair\",\n    pair_name=\"secondary-keypair\",\n    pair_type=\"GPG\",\n    alias=\"foo-alias-2\",\n    private_key=(lambda path: open(path).read())(\"samples/gpg.priv\"),\n    public_key=(lambda path: open(path).read())(\"samples/gpg.pub\"))\nfoo_rpm_virtual = artifactory.VirtualRpmRepository(\"foo-rpm-virtual\",\n    key=\"foo-rpm-virtual\",\n    primary_keypair_ref=primary_keypair.pair_name,\n    secondary_keypair_ref=secondary_keypair.pair_name,\n    opts=pulumi.ResourceOptions(depends_on=[\n            primary_keypair,\n            secondary_keypair,\n        ]))\n```\n```csharp\nusing System.IO;\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var primary_keypair = new Artifactory.Keypair(\"primary-keypair\", new Artifactory.KeypairArgs\n        {\n            PairName = \"primary-keypair\",\n            PairType = \"GPG\",\n            Alias = \"foo-alias-1\",\n            PrivateKey = File.ReadAllText(\"samples/gpg.priv\"),\n            PublicKey = File.ReadAllText(\"samples/gpg.pub\"),\n        });\n        var secondary_keypair = new Artifactory.Keypair(\"secondary-keypair\", new Artifactory.KeypairArgs\n        {\n            PairName = \"secondary-keypair\",\n            PairType = \"GPG\",\n            Alias = \"foo-alias-2\",\n            PrivateKey = File.ReadAllText(\"samples/gpg.priv\"),\n            PublicKey = File.ReadAllText(\"samples/gpg.pub\"),\n        });\n        var foo_rpm_virtual = new Artifactory.VirtualRpmRepository(\"foo-rpm-virtual\", new Artifactory.VirtualRpmRepositoryArgs\n        {\n            Key = \"foo-rpm-virtual\",\n            PrimaryKeypairRef = primary_keypair.PairName,\n            SecondaryKeypairRef = secondary_keypair.PairName,\n        }, new CustomResourceOptions\n        {\n            DependsOn = \n            {\n                primary_keypair,\n                secondary_keypair,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"io/ioutil\"\n\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := ioutil.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.NewKeypair(ctx, \"primary-keypair\", \u0026artifactory.KeypairArgs{\n\t\t\tPairName:   pulumi.String(\"primary-keypair\"),\n\t\t\tPairType:   pulumi.String(\"GPG\"),\n\t\t\tAlias:      pulumi.String(\"foo-alias-1\"),\n\t\t\tPrivateKey: readFileOrPanic(\"samples/gpg.priv\"),\n\t\t\tPublicKey:  readFileOrPanic(\"samples/gpg.pub\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = artifactory.NewKeypair(ctx, \"secondary-keypair\", \u0026artifactory.KeypairArgs{\n\t\t\tPairName:   pulumi.String(\"secondary-keypair\"),\n\t\t\tPairType:   pulumi.String(\"GPG\"),\n\t\t\tAlias:      pulumi.String(\"foo-alias-2\"),\n\t\t\tPrivateKey: readFileOrPanic(\"samples/gpg.priv\"),\n\t\t\tPublicKey:  readFileOrPanic(\"samples/gpg.pub\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = artifactory.NewVirtualRpmRepository(ctx, \"foo-rpm-virtual\", \u0026artifactory.VirtualRpmRepositoryArgs{\n\t\t\tKey:                 pulumi.String(\"foo-rpm-virtual\"),\n\t\t\tPrimaryKeypairRef:   primary_keypair.PairName,\n\t\t\tSecondaryKeypairRef: secondary_keypair.PairName,\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tprimary_keypair,\n\t\t\tsecondary_keypair,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVirtual repositories can be imported using their name, e.g.\n\n```sh\n $ pulumi import artifactory:index/virtualRpmRepository:VirtualRpmRepository foo foo\n```\n\n ",
            "properties": {
                "artifactoryRequestsCanRetrieveRemoteArtifacts": {
                    "type": "boolean",
                    "description": "Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by\nanother Artifactory instance.\n"
                },
                "defaultDeploymentRepo": {
                    "type": "string",
                    "description": "Default repository to deploy artifacts.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A free text field that describes the content and purpose of the repository. If you choose to insert a link into this\nfield, clicking the link will prompt the user to confirm that they might be redirected to a new domain.\n"
                },
                "excludesPattern": {
                    "type": "string",
                    "description": "List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no\nartifacts are excluded.\n"
                },
                "includesPattern": {
                    "type": "string",
                    "description": "List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only\nartifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).\n"
                },
                "key": {
                    "type": "string",
                    "description": "The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or\ncontain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.\n'libs-release-local').\n"
                },
                "notes": {
                    "type": "string",
                    "description": "A free text field to add additional notes about the repository. These are only visible to the administrator.\n"
                },
                "packageType": {
                    "type": "string",
                    "description": "The Package Type. This must be specified when the repository is created, and once set, cannot be changed.\n"
                },
                "primaryKeypairRef": {
                    "type": "string",
                    "description": "- The primary GPG key to be used to sign packages\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric characters. When assigning\nrepository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                },
                "repoLayoutRef": {
                    "type": "string",
                    "description": "Sets the layout that the repository should use for storing and identifying modules. A recommended layout that\ncorresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.\n"
                },
                "repositories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The effective list of actual repositories included in this virtual repository.\n"
                },
                "retrievalCachePeriodSeconds": {
                    "type": "integer",
                    "description": "This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated\nrepositories. A value of 0 indicates no caching.\n"
                },
                "secondaryKeypairRef": {
                    "type": "string",
                    "description": "- The secondary GPG key to be used to sign packages\n"
                }
            },
            "required": [
                "key",
                "packageType",
                "repoLayoutRef"
            ],
            "inputProperties": {
                "artifactoryRequestsCanRetrieveRemoteArtifacts": {
                    "type": "boolean",
                    "description": "Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by\nanother Artifactory instance.\n"
                },
                "defaultDeploymentRepo": {
                    "type": "string",
                    "description": "Default repository to deploy artifacts.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A free text field that describes the content and purpose of the repository. If you choose to insert a link into this\nfield, clicking the link will prompt the user to confirm that they might be redirected to a new domain.\n"
                },
                "excludesPattern": {
                    "type": "string",
                    "description": "List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no\nartifacts are excluded.\n"
                },
                "includesPattern": {
                    "type": "string",
                    "description": "List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only\nartifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).\n"
                },
                "key": {
                    "type": "string",
                    "description": "The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or\ncontain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.\n'libs-release-local').\n"
                },
                "notes": {
                    "type": "string",
                    "description": "A free text field to add additional notes about the repository. These are only visible to the administrator.\n"
                },
                "primaryKeypairRef": {
                    "type": "string",
                    "description": "- The primary GPG key to be used to sign packages\n"
                },
                "projectEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric characters. When assigning\nrepository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                },
                "repoLayoutRef": {
                    "type": "string",
                    "description": "Sets the layout that the repository should use for storing and identifying modules. A recommended layout that\ncorresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.\n"
                },
                "repositories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The effective list of actual repositories included in this virtual repository.\n"
                },
                "retrievalCachePeriodSeconds": {
                    "type": "integer",
                    "description": "This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated\nrepositories. A value of 0 indicates no caching.\n"
                },
                "secondaryKeypairRef": {
                    "type": "string",
                    "description": "- The secondary GPG key to be used to sign packages\n"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VirtualRpmRepository resources.\n",
                "properties": {
                    "artifactoryRequestsCanRetrieveRemoteArtifacts": {
                        "type": "boolean",
                        "description": "Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by\nanother Artifactory instance.\n"
                    },
                    "defaultDeploymentRepo": {
                        "type": "string",
                        "description": "Default repository to deploy artifacts.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A free text field that describes the content and purpose of the repository. If you choose to insert a link into this\nfield, clicking the link will prompt the user to confirm that they might be redirected to a new domain.\n"
                    },
                    "excludesPattern": {
                        "type": "string",
                        "description": "List of artifact patterns to exclude when evaluating artifact requests, in the form of x/y/**/z/*.By default no\nartifacts are excluded.\n"
                    },
                    "includesPattern": {
                        "type": "string",
                        "description": "List of artifact patterns to include when evaluating artifact requests in the form of x/y/**/z/*. When used, only\nartifacts matching one of the include patterns are served. By default, all artifacts are included (**/*).\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The Repository Key. A mandatory identifier for the repository and must be unique. It cannot begin with a number or\ncontain spaces or special characters. For local repositories, we recommend using a '-local' suffix (e.g.\n'libs-release-local').\n"
                    },
                    "notes": {
                        "type": "string",
                        "description": "A free text field to add additional notes about the repository. These are only visible to the administrator.\n"
                    },
                    "packageType": {
                        "type": "string",
                        "description": "The Package Type. This must be specified when the repository is created, and once set, cannot be changed.\n"
                    },
                    "primaryKeypairRef": {
                        "type": "string",
                        "description": "- The primary GPG key to be used to sign packages\n"
                    },
                    "projectEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project environment for assigning this repository to. Allow values: \"DEV\" or \"PROD\"\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "Project key for assigning this repository to. Must be 3 - 10 lowercase alphanumeric characters. When assigning\nrepository to a project, repository key must be prefixed with project key, separated by a dash.\n"
                    },
                    "repoLayoutRef": {
                        "type": "string",
                        "description": "Sets the layout that the repository should use for storing and identifying modules. A recommended layout that\ncorresponds to the package type defined is suggested, and index packages uploaded and calculate metadata accordingly.\n"
                    },
                    "repositories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The effective list of actual repositories included in this virtual repository.\n"
                    },
                    "retrievalCachePeriodSeconds": {
                        "type": "integer",
                        "description": "This value refers to the number of seconds to cache metadata files before checking for newer versions on aggregated\nrepositories. A value of 0 indicates no caching.\n"
                    },
                    "secondaryKeypairRef": {
                        "type": "string",
                        "description": "- The secondary GPG key to be used to sign packages\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/xrayPolicy:XrayPolicy": {
            "description": "## # Xray Policy Resource\n\nProvides an Xray policy resource. This can be used to create and manage Xray v1 policies.\n\n\n## Import\n\nA policy can be imported by using the name, e.g.\n\n```sh\n $ pulumi import artifactory:index/xrayPolicy:XrayPolicy example policy-name\n```\n\n ",
            "properties": {
                "author": {
                    "type": "string",
                    "description": "(Optional) Name of the policy author\n"
                },
                "created": {
                    "type": "string",
                    "description": "Timestamp of when the policy was first created\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) More verbose description of the policy\n"
                },
                "modified": {
                    "type": "string",
                    "description": "Timestamp of when the policy was last modified\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Required) Name of the rule\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/XrayPolicyRule:XrayPolicyRule"
                    },
                    "description": "(Required) Nested block describing the policy rules. Described below.\n"
                },
                "type": {
                    "type": "string",
                    "description": "(Required) Type of the policy\n"
                }
            },
            "required": [
                "author",
                "created",
                "modified",
                "name",
                "rules",
                "type"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "(Optional) More verbose description of the policy\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Required) Name of the rule\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/XrayPolicyRule:XrayPolicyRule"
                    },
                    "description": "(Required) Nested block describing the policy rules. Described below.\n"
                },
                "type": {
                    "type": "string",
                    "description": "(Required) Type of the policy\n"
                }
            },
            "requiredInputs": [
                "rules",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering XrayPolicy resources.\n",
                "properties": {
                    "author": {
                        "type": "string",
                        "description": "(Optional) Name of the policy author\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "Timestamp of when the policy was first created\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Optional) More verbose description of the policy\n"
                    },
                    "modified": {
                        "type": "string",
                        "description": "Timestamp of when the policy was last modified\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Required) Name of the rule\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/artifactory:index/XrayPolicyRule:XrayPolicyRule"
                        },
                        "description": "(Required) Nested block describing the policy rules. Described below.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(Required) Type of the policy\n"
                    }
                },
                "type": "object"
            }
        },
        "artifactory:index/xrayWatch:XrayWatch": {
            "description": "## # Xray Watch Resource\n\nProvides a Xray watch resource.\n\n\n## Import\n\nWatches can be imported using their name, e.g.\n\n```sh\n $ pulumi import artifactory:index/xrayWatch:XrayWatch example watch-name\n```\n\n ",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Whether or not the watch will be active\n"
                },
                "assignedPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/XrayWatchAssignedPolicy:XrayWatchAssignedPolicy"
                    },
                    "description": "Nested argument describing policies that will be applied. Defined below.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the watch\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the watch (must be unique)\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/XrayWatchResource:XrayWatchResource"
                    },
                    "description": "Nested argument describing the resources to be watched. Defined below.\n"
                },
                "watchRecipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "assignedPolicies",
                "name",
                "resources"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "Whether or not the watch will be active\n"
                },
                "assignedPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/XrayWatchAssignedPolicy:XrayWatchAssignedPolicy"
                    },
                    "description": "Nested argument describing policies that will be applied. Defined below.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the watch\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the watch (must be unique)\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/artifactory:index/XrayWatchResource:XrayWatchResource"
                    },
                    "description": "Nested argument describing the resources to be watched. Defined below.\n"
                },
                "watchRecipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "requiredInputs": [
                "assignedPolicies",
                "resources"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering XrayWatch resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Whether or not the watch will be active\n"
                    },
                    "assignedPolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/artifactory:index/XrayWatchAssignedPolicy:XrayWatchAssignedPolicy"
                        },
                        "description": "Nested argument describing policies that will be applied. Defined below.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the watch\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the watch (must be unique)\n"
                    },
                    "resources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/artifactory:index/XrayWatchResource:XrayWatchResource"
                        },
                        "description": "Nested argument describing the resources to be watched. Defined below.\n"
                    },
                    "watchRecipients": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "artifactory:index/getFile:getFile": {
            "description": "## # Artifactory File Data Source\n\nProvides an Artifactory file datasource. This can be used to download a file from a given Artifactory repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\n// \nconst my_file = pulumi.output(artifactory.getFile({\n    outputPath: \"tmp/artifact.zip\",\n    path: \"/path/to/the/artifact.zip\",\n    repository: \"repo-key\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nmy_file = artifactory.get_file(output_path=\"tmp/artifact.zip\",\n    path=\"/path/to/the/artifact.zip\",\n    repository=\"repo-key\")\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var my_file = Output.Create(Artifactory.GetFile.InvokeAsync(new Artifactory.GetFileArgs\n        {\n            OutputPath = \"tmp/artifact.zip\",\n            Path = \"/path/to/the/artifact.zip\",\n            Repository = \"repo-key\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.GetFile(ctx, \u0026GetFileArgs{\n\t\t\tOutputPath: \"tmp/artifact.zip\",\n\t\t\tPath:       \"/path/to/the/artifact.zip\",\n\t\t\tRepository: \"repo-key\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFile.\n",
                "properties": {
                    "forceOverwrite": {
                        "type": "boolean",
                        "description": "If set to true, an existing file in the output_path will be overwritten. Default: false\n"
                    },
                    "outputPath": {
                        "type": "string",
                        "description": "The local path the file should be downloaded to.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The path to the file within the repository.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "Name of the repository where the file is stored.\n"
                    }
                },
                "type": "object",
                "required": [
                    "outputPath",
                    "path",
                    "repository"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFile.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "The time \u0026 date when the file was created.\n"
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "The user who created the file.\n"
                    },
                    "downloadUri": {
                        "type": "string",
                        "description": "The URI that can be used to download the file.\n"
                    },
                    "forceOverwrite": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "lastModified": {
                        "type": "string",
                        "description": "The time \u0026 date when the file was last modified.\n"
                    },
                    "lastUpdated": {
                        "type": "string",
                        "description": "The time \u0026 date when the file was last updated.\n"
                    },
                    "md5": {
                        "type": "string",
                        "description": "MD5 checksum of the file.\n"
                    },
                    "mimetype": {
                        "type": "string",
                        "description": "The mimetype of the file.\n"
                    },
                    "modifiedBy": {
                        "type": "string",
                        "description": "The user who last modified the file.\n"
                    },
                    "outputPath": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "sha1": {
                        "type": "string",
                        "description": "SHA1 checksum of the file.\n"
                    },
                    "sha256": {
                        "type": "string",
                        "description": "SHA256 checksum of the file.\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of the file.\n"
                    }
                },
                "type": "object",
                "required": [
                    "created",
                    "createdBy",
                    "downloadUri",
                    "lastModified",
                    "lastUpdated",
                    "md5",
                    "mimetype",
                    "modifiedBy",
                    "outputPath",
                    "path",
                    "repository",
                    "sha1",
                    "sha256",
                    "size",
                    "id"
                ]
            }
        },
        "artifactory:index/getFileinfo:getFileinfo": {
            "description": "## # Artifactory File Info Data Source\n\nProvides an Artifactory fileinfo datasource. This can be used to read metadata of files stored in Artifactory repositories.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as artifactory from \"@pulumi/artifactory\";\n\n// \nconst my_file = pulumi.output(artifactory.getFileinfo({\n    path: \"/path/to/the/artifact.zip\",\n    repository: \"repo-key\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_artifactory as artifactory\n\nmy_file = artifactory.get_fileinfo(path=\"/path/to/the/artifact.zip\",\n    repository=\"repo-key\")\n```\n```csharp\nusing Pulumi;\nusing Artifactory = Pulumi.Artifactory;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var my_file = Output.Create(Artifactory.GetFileinfo.InvokeAsync(new Artifactory.GetFileinfoArgs\n        {\n            Path = \"/path/to/the/artifact.zip\",\n            Repository = \"repo-key\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-artifactory/sdk/go/artifactory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := artifactory.GetFileinfo(ctx, \u0026GetFileinfoArgs{\n\t\t\tPath:       \"/path/to/the/artifact.zip\",\n\t\t\tRepository: \"repo-key\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFileinfo.\n",
                "properties": {
                    "path": {
                        "type": "string",
                        "description": "The path to the file within the repository.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "Name of the repository where the file is stored.\n"
                    }
                },
                "type": "object",
                "required": [
                    "path",
                    "repository"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFileinfo.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "The time \u0026 date when the file was created.\n"
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "The user who created the file.\n"
                    },
                    "downloadUri": {
                        "type": "string",
                        "description": "The URI that can be used to download the file.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "lastModified": {
                        "type": "string",
                        "description": "The time \u0026 date when the file was last modified.\n"
                    },
                    "lastUpdated": {
                        "type": "string",
                        "description": "The time \u0026 date when the file was last updated.\n"
                    },
                    "md5": {
                        "type": "string",
                        "description": "MD5 checksum of the file.\n"
                    },
                    "mimetype": {
                        "type": "string",
                        "description": "The mimetype of the file.\n"
                    },
                    "modifiedBy": {
                        "type": "string",
                        "description": "The user who last modified the file.\n"
                    },
                    "path": {
                        "type": "string"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "sha1": {
                        "type": "string",
                        "description": "SHA1 checksum of the file.\n"
                    },
                    "sha256": {
                        "type": "string",
                        "description": "SHA256 checksum of the file.\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of the file.\n"
                    }
                },
                "type": "object",
                "required": [
                    "created",
                    "createdBy",
                    "downloadUri",
                    "lastModified",
                    "lastUpdated",
                    "md5",
                    "mimetype",
                    "modifiedBy",
                    "path",
                    "repository",
                    "sha1",
                    "sha256",
                    "size",
                    "id"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-artifactory/sdk/go/artifactory"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing artifactory cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/jfrog/terraform-provider-artifactory)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-artifactory` repo](https://github.com/pulumi/pulumi-artifactory/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`jfrog/terraform-provider-artifactory` repo](https://github.com/jfrog/terraform-provider-artifactory/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/jfrog/terraform-provider-artifactory)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-artifactory` repo](https://github.com/pulumi/pulumi-artifactory/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`jfrog/terraform-provider-artifactory` repo](https://github.com/jfrog/terraform-provider-artifactory/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    }
}